    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using Microsoft.CodeAnalysis.Text;
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Text;
    using System.Text.Json;
    using System.Text.RegularExpressions;

namespace EIDSS.CodeGenerator
{

    //[Generator]
    public class AuditClassGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {

            //#if DEBUG
            //            if (!Debugger.IsAttached)
            //            {
            //                Debugger.Launch();
            //            }
            //#endif
            string auditcolumn = string.Empty;
            string audittablename = string.Empty;
            string columnname = string.Empty;
            string columndescription = string.Empty;
            string columnidentifier = string.Empty;
            string classname = "AuditEventCollection";
            StringBuilder columnLoads = new StringBuilder();
            string filename = string.Empty;
            int modelidx = -1;
            AuditSourceSourceController sourceController = new AuditSourceSourceController();
            StringBuilder source = new StringBuilder($@"
//------------------------------------------------------------------------------
// <auto-generated>
//
//      This code was auto-generated by the EIDSS API Client Generation Tool.
//      This class cannot be directly modified.  To modify the output of this class
//      edit the Code Generation Directive in the EIDSS.ClientLibrary namespace that initially 
//      generated this class.
//      
//      To generate the json that this code generator processes, run the following SQL statement
//      in developmnent:
//      SELECT 
//      	 t.idfTable
//      	,t.strName [TableName]
//      	,t.strDescription TableDescription
//      	,AssociatedColumns.idfColumn
//      	,AssociatedColumns.strName [ColumnName]
//      	,AssociatedColumns.strDescription ColumnDescription
//      FROM tauTable t
//      JOIN tauColumn AssociatedColumns ON AssociatedColumns.idfTable = t.idfTable
//      ORDER BY T.strName, AssociatedColumns.strName
//      FOR JSON AUTO, ROOT('AuditingDirectives')
//
//      Copy this json and paste it into the AuditColumnsCodeGenerationDirectives.json file located
//      in the EIDSS.API project.
// </auto-generated>
//------------------------------------------------------------------------------
using EIDSS.Domain.Enumerations;
using System.Collections.Generic;
using System.Linq;

namespace EIDSS.Repository.Auditing
{{

   public partial class DataAuditEventCollection
   {{
        /// <summary>
        /// Collection of column event info objects
        /// </summary>
        public List<AuditColumnInfo> AuditColumns {{ get; set; }} = new List<AuditColumnInfo>();

        /// <summary>
        /// Gets a list of AuditColumnInfo objects given the table 
        /// </summary>
        public IEnumerable<AuditColumnInfo> GetAuditColumnsForTable(AuditTableEnum table)
        {{
            return AuditColumns.Where(w => w.AuditTable == table);
        }}
");
            StringBuilder loadsource = new StringBuilder($@"
        /// <summary>
        /// Loads Audit column classes into the AuditColumns collection.
        /// </summary>
        public AuditEventCollection()
        {{
 ");

            AuditingDirectiveCollection gencontainer;
            string sourcetext = string.Empty;


            IEnumerable<AdditionalText> jsonFiles = context.AdditionalFiles.Where(
                    w => w.Path.EndsWith(
                        "auditcolumnscodegenerationdirectives.json", StringComparison.OrdinalIgnoreCase));
            AdditionalText f = jsonFiles.First();

            try
            {
                // Deserialize Json into our model...
                gencontainer = JsonSerializer.Deserialize<AuditingDirectiveCollection>(f.GetText().ToString());

                if (gencontainer == null || gencontainer.AuditingDirectives == null || gencontainer.AuditingDirectives.Count == 0)
                    return;

                sourceController.Source = source;
                sourceController.FileName = $"{classname}.cs";

                foreach (var m in gencontainer.AuditingDirectives)
                {
                    audittablename = m.TableName;

                    foreach (var ac in m.AssociatedColumns)
                    {
                        auditcolumn = audittablename + "_" + ac.ColumnName;
                        modelidx += 1;
                        columnname = ac.ColumnName;
                        columndescription = ac.ColumnDescription;
                        columnidentifier = ac.idfColumn.ToString();

                        loadsource.Append($@"
           AuditColumns.Add(
                new AuditColumnInfo
                {{
                    AuditTable = AuditTableEnum.{audittablename},
                    AuditColumn = AuditColumnEnum.{auditcolumn},
                    ColumnName = ""{columnname}"",
                    Description = ""{columndescription}"",
                    ID = {columnidentifier}
                }});");
                    }
                }

                if (sourceController.Source.Length > 0)
                {
                    sourceController.Source.AppendLine(loadsource.ToString());

                    // Close up the namespace and class with closing brackets...
                    sourceController.Source.Append($@"
        }}");
                    sourceController.Source.Append($@"
   }}");
                    sourceController.Source.Append($@"

    /// <summary>
    /// Audit Event Column
    /// </summary>
    public class AuditColumnInfo
    {{
        public long ID {{ get; set; }}
        public AuditTableEnum AuditTable {{ get; set; }}

        public AuditColumnEnum AuditColumn {{ get; set; }}

        public string ColumnName {{ get; set; }}

        public string? Description {{ get; set; }}
    }}
}}");
                }

                // Write out each method to the .cs file...
                context.AddSource(sourceController.FileName, 
                    SourceText.From(sourceController.Source.ToString(), Encoding.UTF8));
            }
            catch (Exception ex)
            {
                var msg = ex.Message;
                // Eat it...               var msg = ex.Message;
                if (ex.InnerException != null) msg += " " + ex.InnerException.Message;
                msg += " Error occurred while generating method {0} for API Client Class {1}. Parms:  FileName: {2}, ReturnType:{3}, MethodParameters: {4}, Stack Trace:{5}";
                throw new Exception(msg);
            //    context.ReportDiagnostic(Diagnostic.Create( 
            //        new DiagnosticDescriptor("AUDITING-CODE-GEN001", "Generation Error", msg, "Error", DiagnosticSeverity.Error, false),null,null));
            }
            modelidx = -1;
        }

        public void Initialize(GeneratorInitializationContext context)
        {
        }
    }


    //class ClientGenConstants
    //{
    //    public string ClientClassName { get; set; }
    //    public string MethodName { get; set; }
    //    public string MethodParms { get; set; }
    //    public string MethodVerb { get; set; }
    //    public string ReturnType { get; set; }
    //    public string SummaryInfo { get; set; }
    //    public string URL { get; set; }

    //}
    class AuditSourceSourceController
    {
        //public StringBuilder InterfaceMembers { get; set; } = new StringBuilder();
        public StringBuilder Source { get; set; } = new StringBuilder();
        public string FileName { get; set; }
    }
}

