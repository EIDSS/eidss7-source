using EIDSS.Repository.ReturnModels;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace EIDSS.Repository.Contexts
{
    public partial class EIDSSContext
    {
        private IEIDSSContextProcedures _procedures;

        public virtual IEIDSSContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new EIDSSContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IEIDSSContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<spObjectAccess_SelectDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spUserGroupDetail_SelectDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_ACCESS_RULE_ACTOR_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_ACCESS_RULE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_ACCESS_RULE_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_ACCESS_RULE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_ACTOR_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_ADMINLEVEL_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_BASEREF_GET_KeyValueByReferenceIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_BASEREF_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_CONF_DataArchiveSettings_GetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_DATAAUDITLOG_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_DATAAUDITLOG_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_DEDUPLICATION_FARM_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_DEDUPLICATION_PERSON_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_DEDUPLICATION_PERSONID_FARM_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_DEDUPLICATION_PERSONID_HUMAN_DISEASE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_DEPARTMENT_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMP_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMP_NEW_DEFAULT_ORGANIZATION_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMP_ORGANIZATION_ACTIVATE_DEACTIVATE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMP_ORGANIZATION_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMP_ORGANIZATION_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMP_ORGANIZATION_STATUS_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMP_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEE_GETCOUNTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEE_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEEGROUP_BYUSER_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEEGROUP_DASHBOARD_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEEGROUP_DASHBOARD_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEEGROUP_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEEGROUP_GETDETAILResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEEGROUP_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEEGROUP_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEEGROUP_SYSTEMFUNCTION_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEES_IN_USERGROUP_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EVENT_GETCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EVENT_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EVENT_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EVENT_STATUS_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EVENT_SUBSCRIPTION_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_EVENT_SUBSCRIPTION_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ActivityParameters_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ActivityParameters_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Copy_TemplateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Determinant_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_DIAGNOSISREFERENCE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_FlexForm_GetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_FormTemplate_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_FormTypes_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Parameter_CopyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Parameter_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Parameter_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterFixedPresetValue_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterFixedPresetValue_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterFixedPresetValue_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterInUseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterReferenceTypes_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterReferenceTypes_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Parameters_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Parameters_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterSelectList_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterTemplate_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterTemplate_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterTypeEditorMapping_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterTypes_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterTypes_FILTERResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterTypes_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_ParameterTypes_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_RequiredParameter_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Rule_GetDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_RuleParameterForAction_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Rules_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Rules_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Rules_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Section_CopyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Section_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_SectionParameterTree_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Sections_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Sections_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Template_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Template_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Template_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_TemplateDesign_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_TemplateDeterminantValues_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_TemplateParameterOrder_SetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_Templates_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_TemplatesByParameter_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_FF_TemplateSectionOrder_SetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_GISDATA_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_GISDATA_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_IE_DownloadTemplate_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_IE_Language_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_IE_Module_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_IE_Resource_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_IE_Resource_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_IE_Section_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_NEIGHBORING_SITE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_OBJECT_ACCESS_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_OBJECT_ACCESS_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_ORG_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_ORG_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_ORG_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_ORG_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_SITE_ACTOR_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_SITE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_SITE_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_SITE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_SITE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_STAT_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_STAT_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_STAT_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_STAT_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_STLE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_STLE_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_SYSTEM_PREFERENCE_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_SYSTEM_PREFERENCE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_SYSTEMEVENT_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_SYSTEMFUNCTION_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_SYSTEMFUNCTION_PersonANDEmployeeGroup_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_Admin_SystemFunction_PersonANDEmployeeGroup_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_SYSTEMFUNCTION_USERPERMISSION_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_Admin_UserGoupAndUser_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_USERGROUP_SYSTEMFUNCTION_PERMISSION_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_USERGROUPTOEMPLOYEE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_UserListGetForUtilityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_USR_GROUPMEMBER_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_USR_GROUPMEMBER_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_USR_LOGININFO_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ADMIN_USR_LOGININFO_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AGG_CASE_DELETEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AGG_CASE_GETDETAILResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AGG_CASE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AGG_REPORT_DELETEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AGG_REPORT_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AGG_REPORT_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AS_CAMPAIGN_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AS_CAMPAIGN_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AS_CAMPAIGN_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AS_CAMPAIGN_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AS_CAMPAIGN_TO_DIAGNOSIS_SPECIES_SAMPLE_TYPE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AS_DISASSOCITESESSION_FROM_CAMPAIGN_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ASPNetUser_GetAccessRulesAndPermissionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ASPNetUser_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ASPNetUser_GetRolesAndPermissionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ASPNetUserGetPermissionByRole_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ASPNetUserSetSessionContextResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_AVR_UserPermissionsGetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_ADMIN_ProphylacticMatrixReportGet_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_ADMIN_SanitaryMatrixReportGet_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_ADMIN_VetDiagnosisInvesitgationMatrixReport_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_AggregateSetting_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_AggregateSetting_GetList_WithNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_AggregateSetting_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_CUSTOMREPORT_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_CUSTOMREPORT_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_CUSTOMREPORT_ROWORDER_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_CUSTOMREPORT_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASEAGEGROUPMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASEAGEGROUPMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASEAGEGROUPMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASEGROUPDISEASEMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASEGROUPDISEASEMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASEGROUPDISEASEMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASEHUMANGENDERMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASEHUMANGENDERMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASEHUMANGENDERMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASELABTESTMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASELABTESTMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASELABTESTMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASEPENSIDETESTMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASEPENSIDETESTMATRIX_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASEPENSIDETESTMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASESAMPLETYPEMATRIX_BY_DISEASE_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASESAMPLETYPEMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASESAMPLETYPEMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_DISEASESAMPLETYPEMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_GetInvestigationTypes_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_GetProphylacticMeasures_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_GetSanitaryActions_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_GetSpeciesList_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_GetVetDiseaseList_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_HumanAggregateCaseMatrixReport_DELETEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_HumanAggregateCaseMatrixReport_POSTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_HumanAggregateCaseMatrixReport_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_HumanAggregateCaseMatrixReportRecord_DELETEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_HumanAggregateCaseMatrixVersion_DELETEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_HumanAggregateCaseMatrixVersion_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_HumanAggregateCaseMatrixVersion_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_HumanAggregateCaseMatrixVersionByMatrixType_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_HumanAggregateCaseMatrixVersionDiseaseList_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_LKUP_DISEASE_GENDER_MATRIXResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_PERSONALIDTYPEMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_PERSONALIDTYPEMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_PERSONALIDTYPEMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_ProphylacticMatrixReportRecord_DELETEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_SanitaryMatrixReportRecord_DELETEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_SPECIESTYPEANIMALAGEMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_SPECIESTYPEANIMALAGEMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_TESTTOTESTRESULTMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_TESTTOTESTRESULTMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_TESTTOTESTRESULTMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_UNIQUENUMBERINGSCHEMA_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_UNIQUENUMBERINGSCHEMA_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_USER_GRIDS_GETDETAILResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_USER_GRIDS_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VECTORTYPEFIELDTESTMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VECTORTYPEFIELDTESTMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VECTORTYPEFIELDTESTMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VECTORTYPESAMPLETYPEMATRIX_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VECTORTYPESAMPLETYPEMATRIX_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VETAggregateCaseMatrixReportRecord_DELETEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VetDiagnosisMatrixReportRecord_DELETEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VeterinaryAggregateCaseMatrixReport_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VeterinaryProphylacticMatrixReport_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_CONF_VeterinarySanitaryActionMatrixReport_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_Country_GetLookupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_DAS_APPROVALS_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_DAS_DASHBOARD_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_DAS_INVESTIGATIONS_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_DAS_MYCOLLECTIONS_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_DAS_MYINVESTIGATIONS_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_DAS_MYNOTIFICATIONS_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_DAS_NOTIFICATIONS_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_DAS_USERS_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_DataAudit_AuditEvents_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<usp_Employee_ValidateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_AuditEventSystemLog_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_BASE_REFERENCE_Advanced_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_BASE_REFERENCE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_BaseReferenceTranslation_GetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_DataAuditEvent_DeleteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_DataAuditEvent_RestoreResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_DataAuditEvent_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_DataAuditEvent_UpdateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_Department_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_DISEASE_MTX_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_DISEASE_MTX_GET_BY_UsingTypeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_EMPLOYEE_GROUP_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_EMPLOYEEGROUPSFOREMPLOYEE_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_EMPLOYEESITE_GETDETAILResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_GIS_Location_ChildLevel_GetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_GIS_Location_CurrentLevel_GetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_GIS_Location_Levels_GetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_GIS_LocationAncestry_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_Languages_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_LKUP_DISEASE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_LKUP_DISEASE_GETList_PagedResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_LKUP_ORG_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_LKUP_PERSON_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST_PagedResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_LKUP_REFERENCETYPE_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_LKUP_SAMPLESFORDISEASESResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_LKUP_SITE_FROM_ORGResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_LogSecurityEvent_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_MENU_ByUser_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_MENU_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_OBSERVATION_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_ORG_GETSearchResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_PERSON_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_POSTAL_CODE_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_POSTALCODE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_ReportForm_DELETEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_ReportForm_GETDETAILResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_ReportForm_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_ReportForm_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_ReportFormSummary_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_Resource_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_SAMPLE_IMPORT_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_SecurityEventLog_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_Site_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_SITE_GROUP_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_SITE_GROUP_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_SITE_GROUP_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_SITE_GROUP_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_STREET_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_STREET_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_TEST_DISEASE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_TEST_INTERPRETATION_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_USER_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_USER_PREFERENCE_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_GBL_USER_PREFERENCE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HACode_GetCheckListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_CAMPAIGN_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_CAMPAIGN_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_CAMPAIGN_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_CAMPAIGN_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_CAMPAIGN_TO_SAMPLE_TYPE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_DetailedInformation_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_DISEASE_REPORT_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_MONITORING_SESSION_ACTION_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_MONITORING_SESSION_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_MONITORING_SESSION_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_MONITORING_SESSION_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_MONITORING_SESSION_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_MONITORING_SESSION_TO_DISEASE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HAS_Tests_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_DISEASE_AdvanceSearch_REPORT_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_DISEASE_ANTIVIRALTHERAPIES_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_DISEASE_CONTACTS_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_DISEASE_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_DISEASE_REPORT_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_DISEASE_REPORT_PERMISSION_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_DISEASE_VACCINATIONS_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_HUMAN_DISEASE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_HUMAN_DISEASE_INVESTIGATEDBY_UPDATEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_HUMAN_DISEASE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_HUMAN_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_HUMAN_MASTER_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_HUMAN_MASTER_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_IDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_HUMAN_MASTER_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_HUMAN_MASTER_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_REP_WHOEXPORTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_SAMPLES_GetList_With_DerivatesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUM_TESTS_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_HUMAN_DISEASELABTESTMATRIX_BY_DISEASE_GETLISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ILI_Aggregate_DeleteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ILI_Aggregate_Detail_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ILI_Aggregate_Form_DeleteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ILI_Aggregate_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_ILI_Aggregate_SetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_APPROVAL_ADVANCED_SEARCH_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_APPROVAL_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_APPROVAL_SEARCH_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_BATCH_ADVANCED_SEARCH_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_BATCH_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_FAVORITE_ADVANCED_SEARCH_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_FAVORITE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_FAVORITE_SEARCH_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_FREEZER_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_FREEZER_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_FREEZER_SUBDIVISION_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_SAMPLE_ADVANCED_SEARCH_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_SAMPLE_BAR_CODE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_SAMPLE_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_SAMPLE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_SAMPLE_GetListByBarCodesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_SAMPLE_GROUP_ACCESSION_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_SAMPLE_ID_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_SAMPLE_SEARCH_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_TAB_COUNTS_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_TEST_ADVANCED_SEARCH_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_TEST_AMENDMENT_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_TEST_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_TEST_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_TEST_SEARCH_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_TRANSFER_ADVANCED_SEARCH_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_TRANSFER_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_TRANSFER_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_LAB_TRANSFER_SEARCH_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Case_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Case_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_CASE_MONITORING_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Case_QuickSetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Case_SetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_CaseSummary_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Contact_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Contact_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Contact_SetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_FlexForm_SetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_HeatMapResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Herd_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_HerdSpecies_SetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_HUMAN_Case_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Note_File_GetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Session_DelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Session_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Session_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_SESSION_Note_DeleteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Session_Note_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Session_Note_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_SESSION_Note_SetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Session_Parameters_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Session_SetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Species_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_Vector_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_OMM_VET_CASE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<usp_PersonGetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_PIN_Audit_SetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_AccessRule_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_AGEGROUP_CANDELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_AGEGROUP_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_AGEGROUP_DOESEXISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_AGEGROUP_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_AGEGROUP_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_BASEREFERENCE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_BASEREFERENCE_Filtered_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_BASEREFERENCE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_BASEREFERENCE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_CASECLASSIFICATION_CANDELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_CASECLASSIFICATION_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_CASECLASSIFICATION_DOESEXISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_CASECLASSIFICATION_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_CASECLASSIFICATION_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_DIAGNOSISREFERENCE_CANDELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_DIAGNOSISREFERENCE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_DIAGNOSISREFERENCE_DOESEXISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_DIAGNOSISREFERENCE_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_DIAGNOSISREFERENCE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_DIAGNOSISREFERENCE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_LKUP_BASE_REFERENCE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_LKUP_CASECLASSIFICATIONResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_MEASURELIST_DOESEXISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_MEASURELIST_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_MEASUREREFEFENCE_CANDELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_MEASUREREFEFENCE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_MEASUREREFERENCE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_MEASUREREFERENCE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_REPORTDIAGNOSISGROUP_CANDELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_REPORTDIAGNOSISGROUP_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_REPORTDIAGNOSISGROUP_DOESEXISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_ReportDiagnosisGroup_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_REPORTDIAGNOSISGROUP_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SampleType_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SAMPLETYPEREFERENCE_CANDELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SAMPLETYPEREFERENCE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SAMPLETYPEREFERENCE_DOESEXISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SampleTypeReference_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SAMPLETYPEREFERENCE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SearchDuplicates_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SPECIESTYPE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SPECIESTYPE_DOESEXISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SPECIESTYPE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SPECIESTYPE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SPECIESTYPEREFERENCE_CANDELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SPECIESTYPEREFERENCE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_SPECIETYPE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_STATISTICDATATYPE_CANDELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_STATISTICDATATYPE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_STATISTICDATATYPE_DOESEXISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_STATISTICDATATYPE_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_STATISTICDATATYPE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_STATISTICDATATYPE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_StatisticType_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_VectorSubType_CANDELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_VectorSubType_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_VECTORSUBTYPE_DOESEXISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_VectorSubType_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_VectorSubType_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_VECTORTYPE_DOESEXISTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_VECTORTYPEREFERENCE_CANDELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_VECTORTYPEREFERENCE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_VectorTypeReference_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_VECTORTYPEREFERENCE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REF_VECTORTYPEREFERENCE_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_CurrentCountry_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_GetCurrentCountryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_HUM_ComparitiveCounter_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_HUM_ComparitiveCounter_GET_GGResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_HUM_DateFieldSource_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_HUM_TuberculosisDiagnosisSelectLookupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_HUM_WhoMeaslesRubella_DiagnosisResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_Human_Aggregate_Disease_Summary_Report_DetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_LAB_AssignmentDiagnosticAZSendToLookupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_LAB_TestingResultsDepartmentLookupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_Languages_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_MonthNames_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_Organization_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_Quarter_GGResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_REPORT_AUDIT_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_ReportingPeriodResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_ReportingPeriodTypeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_Reports_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_SpeciesType_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_VET_DateFieldSource_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_VET_NameOfInvestigationOrMeasureSelectLookupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_VET_SummarySurveillanceTypeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_DetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_Veterinary_Aggregate_Disease_Summary_Report_DetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_DetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_DetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_REP_Years_GETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_SecurityConfiguration_GetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_SecurityConfiguration_SetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<usp_SecuritySetConfigResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<usp_Settlement_GetLookupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<usp_SettlementType_GetLookupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<usp_SettlementType_SetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VAS_MONITORING_SESSION_ACTION_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VAS_MONITORING_SESSION_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VAS_MONITORING_SESSION_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VAS_MONITORING_SESSION_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VAS_MONITORING_SESSION_SAMPLE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VAS_MONITORING_SESSION_SAMPLE_TO_DISEASE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VAS_MONITORING_SESSION_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VAS_MONITORING_SESSION_SPECIES_TO_SAMPLE_TYPE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VAS_MONITORING_SESSION_SUMMARY_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VAS_MONITORING_SESSION_SUMMARY_TO_DISEASE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VAS_MONITORING_SESSION_TEST_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VAS_MONITORING_SESSION_TO_DISEASE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_DetailedCollections_CopyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_FIELDTEST_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_FIELDTEST_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_FIELDTEST_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_LABTEST_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SAMPLE_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SAMPLE_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SAMPLE_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SESSIONSUMMARY_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SESSIONSUMMARY_DIAGNOSIS_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SESSIONSUMMARY_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SESSIONSUMMARY_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SESSIONSUMMARY_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SESSIONSUMMARYDIAGNOSIS_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SESSIONSUMMARYDIAGNOSIS_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SESSIONSUMMARYDIAGNOSIS_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SURVEILLANCE_SESSION_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SURVEILLANCE_SESSION_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_SURVEILLANCE_SESSION_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_VECT_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_VECT_FIELDTEST_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_VECT_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_VECT_GetSampleTypeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_VECT_RW_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_VECT_SAMPLES_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_VECT_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_VECT_STRUCTURED_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_VECTCollection_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_VSSESSION_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_VSSESSION_GetListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VCTS_VSSESSION_New_GetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_ANIMAL_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_CASE_LOG_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_DISEASE_REPORT_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_DISEASE_REPORT_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_DISEASE_REPORT_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_DISEASE_REPORT_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_DISEASE_REPORT_SPECIES_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_FARM_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_FARM_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_FARM_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_FARM_INVENTORY_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_FARM_MASTER_DELResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_FARM_MASTER_GETDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_FARM_MASTER_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_FARM_MASTER_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_PENSIDE_TEST_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_SAMPLE_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_TEST_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_VET_VACCINATION_GETListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USP_xSiteDocumentListGetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USSP_VCT_AGGREGATE_DISEASEDIAGNOSIS_SETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<USSP_VCT_SAMPLE_DETAILEDCOLLECTIONS_SETResult>().HasNoKey().ToView(null);
        }
    }

    public partial class EIDSSContextProcedures : IEIDSSContextProcedures
    {
        protected readonly EIDSSContext _context;

        public EIDSSContextProcedures(EIDSSContext context)
        {
            _context = context;
        }

        public virtual async Task<List<spObjectAccess_SelectDetailResult>> spObjectAccess_SelectDetailAsync(string LangID, long? idfEmployee, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfEmployee",
                    Value = idfEmployee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spObjectAccess_SelectDetailResult>("EXEC @returnValue = [dbo].[spObjectAccess_SelectDetail] @LangID, @idfEmployee", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spUserGroupDetail_SelectDetailResult>> spUserGroupDetail_SelectDetailAsync(long? idfEmployeeGroup, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfEmployeeGroup",
                    Value = idfEmployeeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spUserGroupDetail_SelectDetailResult>("EXEC @returnValue = [dbo].[spUserGroupDetail_SelectDetail] @idfEmployeeGroup, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_ACCESS_RULE_ACTOR_GETListResult>> USP_ADMIN_ACCESS_RULE_ACTOR_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? AccessRuleID, long? SiteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessRuleID",
                    Value = AccessRuleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_ACCESS_RULE_ACTOR_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_ACCESS_RULE_ACTOR_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @AccessRuleID, @SiteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_ACCESS_RULE_DELResult>> USP_ADMIN_ACCESS_RULE_DELAsync(long? AccessRuleID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "AccessRuleID",
                    Value = AccessRuleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_ACCESS_RULE_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_ACCESS_RULE_DEL] @AccessRuleID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_ACCESS_RULE_GETDetailResult>> USP_ADMIN_ACCESS_RULE_GETDetailAsync(string LanguageID, long? AccessRuleID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessRuleID",
                    Value = AccessRuleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_ACCESS_RULE_GETDetailResult>("EXEC @returnValue = [dbo].[USP_ADMIN_ACCESS_RULE_GETDetail] @LanguageID, @AccessRuleID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_ACCESS_RULE_GETListResult>> USP_ADMIN_ACCESS_RULE_GETListAsync(string LanguageID, int? Page, int? PageSize, string SortColumn, string SortOrder, long? AccessRuleID, string AccessRuleName, bool? BorderingAreaRuleIndicator, bool? DefaultRuleIndicator, bool? ReciprocalRuleIndicator, bool? AccessToPersonalDataPermissionIndicator, bool? AccessToGenderAndAgeDataPermissionIndicator, bool? CreatePermissionIndicator, bool? DeletePermissionIndicator, bool? ReadPermissionIndicator, bool? WritePermissionIndicator, string GrantingActorSiteCode, string GrantingActorSiteHASCCode, string GrantingActorSiteName, long? GrantingActorAdministrativeLevelID, string ReceivingActorSiteCode, string ReceivingActorSiteHASCCode, string ReceivingActorSiteName, long? ReceivingActorAdministrativeLevelID, long? GrantingActorSiteGroupID, long? GrantingActorSiteID, string ReceivingActorSiteGroups, string ReceivingActorSites, string ReceivingActorUserGroups, string ReceivingActorUsers, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Page",
                    Value = Page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessRuleID",
                    Value = AccessRuleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AccessRuleName",
                    Size = -1,
                    Value = AccessRuleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BorderingAreaRuleIndicator",
                    Value = BorderingAreaRuleIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultRuleIndicator",
                    Value = DefaultRuleIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalRuleIndicator",
                    Value = ReciprocalRuleIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "AccessToPersonalDataPermissionIndicator",
                    Value = AccessToPersonalDataPermissionIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "AccessToGenderAndAgeDataPermissionIndicator",
                    Value = AccessToGenderAndAgeDataPermissionIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatePermissionIndicator",
                    Value = CreatePermissionIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DeletePermissionIndicator",
                    Value = DeletePermissionIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ReadPermissionIndicator",
                    Value = ReadPermissionIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "WritePermissionIndicator",
                    Value = WritePermissionIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GrantingActorSiteCode",
                    Size = 100,
                    Value = GrantingActorSiteCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GrantingActorSiteHASCCode",
                    Size = 100,
                    Value = GrantingActorSiteHASCCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GrantingActorSiteName",
                    Size = 400,
                    Value = GrantingActorSiteName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GrantingActorAdministrativeLevelID",
                    Value = GrantingActorAdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivingActorSiteCode",
                    Size = 100,
                    Value = ReceivingActorSiteCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivingActorSiteHASCCode",
                    Size = 100,
                    Value = ReceivingActorSiteHASCCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivingActorSiteName",
                    Size = 400,
                    Value = ReceivingActorSiteName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivingActorAdministrativeLevelID",
                    Value = ReceivingActorAdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "GrantingActorSiteGroupID",
                    Value = GrantingActorSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "GrantingActorSiteID",
                    Value = GrantingActorSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivingActorSiteGroups",
                    Size = -1,
                    Value = ReceivingActorSiteGroups ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivingActorSites",
                    Size = -1,
                    Value = ReceivingActorSites ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivingActorUserGroups",
                    Size = -1,
                    Value = ReceivingActorUserGroups ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivingActorUsers",
                    Size = -1,
                    Value = ReceivingActorUsers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_ACCESS_RULE_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_ACCESS_RULE_GETList] @LanguageID, @Page, @PageSize, @SortColumn, @SortOrder, @AccessRuleID, @AccessRuleName, @BorderingAreaRuleIndicator, @DefaultRuleIndicator, @ReciprocalRuleIndicator, @AccessToPersonalDataPermissionIndicator, @AccessToGenderAndAgeDataPermissionIndicator, @CreatePermissionIndicator, @DeletePermissionIndicator, @ReadPermissionIndicator, @WritePermissionIndicator, @GrantingActorSiteCode, @GrantingActorSiteHASCCode, @GrantingActorSiteName, @GrantingActorAdministrativeLevelID, @ReceivingActorSiteCode, @ReceivingActorSiteHASCCode, @ReceivingActorSiteName, @ReceivingActorAdministrativeLevelID, @GrantingActorSiteGroupID, @GrantingActorSiteID, @ReceivingActorSiteGroups, @ReceivingActorSites, @ReceivingActorUserGroups, @ReceivingActorUsers", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_ACTOR_GETListResult>> USP_ADMIN_ACTOR_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? ActorTypeID, string ActorName, string OrganizationName, string UserGroupDescription, long? DiseaseID, bool? DiseaseFiltrationSearchIndicator, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ActorTypeID",
                    Value = ActorTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ActorName",
                    Size = 400,
                    Value = ActorName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 400,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserGroupDescription",
                    Size = 400,
                    Value = UserGroupDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseFiltrationSearchIndicator",
                    Value = DiseaseFiltrationSearchIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_ACTOR_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_ACTOR_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @ActorTypeID, @ActorName, @OrganizationName, @UserGroupDescription, @DiseaseID, @DiseaseFiltrationSearchIndicator, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplySiteFiltrationIndicator", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_ADMINLEVEL_GETLISTResult>> USP_ADMIN_ADMINLEVEL_GETLISTAsync(string LangId, long? idfsAdminLevel, long? idfsCountry, long? idfsRegion, long? idfsRayon, long? idfsSettlement, string strDefaultName, string strNationalName, long? idfsSettlementType, double? LatFrom, double? LatTo, double? LongFrom, double? LongTo, double? ElevationFrom, double? ElevationTo, int? pageNo, int? pageSize, string sortColumn, string sortOrder, string strHASC, string strCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 40,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsAdminLevel",
                    Value = idfsAdminLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCountry",
                    Value = idfsCountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsRegion",
                    Value = idfsRegion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsRayon",
                    Value = idfsRayon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSettlement",
                    Value = idfsSettlement ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefaultName",
                    Size = 200,
                    Value = strDefaultName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strNationalName",
                    Size = 200,
                    Value = strNationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSettlementType",
                    Value = idfsSettlementType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LatFrom",
                    Value = LatFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "LatTo",
                    Value = LatTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "LongFrom",
                    Value = LongFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "LongTo",
                    Value = LongTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "ElevationFrom",
                    Value = ElevationFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "ElevationTo",
                    Value = ElevationTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strHASC",
                    Size = 12,
                    Value = strHASC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strCode",
                    Size = 400,
                    Value = strCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_ADMINLEVEL_GETLISTResult>("EXEC @returnValue = [dbo].[USP_ADMIN_ADMINLEVEL_GETLIST] @LangId, @idfsAdminLevel, @idfsCountry, @idfsRegion, @idfsRayon, @idfsSettlement, @strDefaultName, @strNationalName, @idfsSettlementType, @LatFrom, @LatTo, @LongFrom, @LongTo, @ElevationFrom, @ElevationTo, @pageNo, @pageSize, @sortColumn, @sortOrder, @strHASC, @strCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_BASEREF_GET_KeyValueByReferenceIdResult>> USP_ADMIN_BASEREF_GET_KeyValueByReferenceIdAsync(long? referenceId, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_BASEREF_GET_KeyValueByReferenceIdResult>("EXEC @returnValue = [dbo].[USP_ADMIN_BASEREF_GET_KeyValueByReferenceId] @referenceId, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_BASEREF_GETListResult>> USP_ADMIN_BASEREF_GETListAsync(long? referenceType, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "referenceType",
                    Value = referenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_BASEREF_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_BASEREF_GETList] @referenceType, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_CONF_DataArchiveSettings_GetResult>> USP_ADMIN_CONF_DataArchiveSettings_GetAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_CONF_DataArchiveSettings_GetResult>("EXEC @returnValue = [dbo].[USP_ADMIN_CONF_DataArchiveSettings_Get]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_DATAAUDITLOG_GETDetailResult>> USP_ADMIN_DATAAUDITLOG_GETDetailAsync(long? idfDataAuditEvent, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfDataAuditEvent",
                    Value = idfDataAuditEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_DATAAUDITLOG_GETDetailResult>("EXEC @returnValue = [dbo].[USP_ADMIN_DATAAUDITLOG_GETDetail] @idfDataAuditEvent, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_DATAAUDITLOG_GETListResult>> USP_ADMIN_DATAAUDITLOG_GETListAsync(string languageId, DateTime? startDate, DateTime? endDate, long? idfUserId, long? idfSiteId, long? idfActionId, long? idfObjetType, string idfObjectId, string SortColumn, string SortOrder, int? Page, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "languageId",
                    Size = 100,
                    Value = languageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfUserId",
                    Value = idfUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfSiteId",
                    Value = idfSiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfActionId",
                    Value = idfActionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfObjetType",
                    Value = idfObjetType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfObjectId",
                    Size = 100,
                    Value = idfObjectId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Page",
                    Value = Page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_DATAAUDITLOG_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_DATAAUDITLOG_GETList] @languageId, @startDate, @endDate, @idfUserId, @idfSiteId, @idfActionId, @idfObjetType, @idfObjectId, @SortColumn, @SortOrder, @Page, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_DEDUPLICATION_FARM_SETResult>> USP_ADMIN_DEDUPLICATION_FARM_SETAsync(long? FarmMasterID, long? SupersededFarmMasterID, long? AvianFarmTypeID, long? AvianProductionTypeID, long? FarmCategory, long? FarmOwnerID, string FarmNationalName, string FarmInterNationalName, string EIDSSFarmID, long? OwnershipStructureTypeID, string Fax, string Email, string Phone, long? FarmAddressID, bool? ForeignAddressIndicator, long? FarmAddressIdfsLocation, string FarmAddressStreet, string FarmAddressApartment, string FarmAddressBuilding, string FarmAddressHouse, string FarmAddressPostalCode, double? FarmAddressLatitude, double? FarmAddressLongitude, int? NumberOfBuildings, int? NumberOfBirdsPerBuilding, string HerdsOrFlocks, string Species, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "FarmMasterID",
                    Value = FarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SupersededFarmMasterID",
                    Value = SupersededFarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AvianFarmTypeID",
                    Value = AvianFarmTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AvianProductionTypeID",
                    Value = AvianProductionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmCategory",
                    Value = FarmCategory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerID",
                    Value = FarmOwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmNationalName",
                    Size = 400,
                    Value = FarmNationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmInterNationalName",
                    Size = 400,
                    Value = FarmInterNationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSFarmID",
                    Size = 400,
                    Value = EIDSSFarmID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OwnershipStructureTypeID",
                    Value = OwnershipStructureTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Fax",
                    Size = 400,
                    Value = Fax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 400,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Phone",
                    Size = 400,
                    Value = Phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressID",
                    Value = FarmAddressID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ForeignAddressIndicator",
                    Value = ForeignAddressIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressIdfsLocation",
                    Value = FarmAddressIdfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressStreet",
                    Size = 400,
                    Value = FarmAddressStreet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressApartment",
                    Size = 400,
                    Value = FarmAddressApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressBuilding",
                    Size = 400,
                    Value = FarmAddressBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressHouse",
                    Size = 400,
                    Value = FarmAddressHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressPostalCode",
                    Size = 400,
                    Value = FarmAddressPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressLatitude",
                    Value = FarmAddressLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressLongitude",
                    Value = FarmAddressLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "NumberOfBuildings",
                    Value = NumberOfBuildings ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NumberOfBirdsPerBuilding",
                    Value = NumberOfBirdsPerBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HerdsOrFlocks",
                    Size = -1,
                    Value = HerdsOrFlocks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Species",
                    Size = -1,
                    Value = Species ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_DEDUPLICATION_FARM_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_DEDUPLICATION_FARM_SET] @FarmMasterID, @SupersededFarmMasterID, @AvianFarmTypeID, @AvianProductionTypeID, @FarmCategory, @FarmOwnerID, @FarmNationalName, @FarmInterNationalName, @EIDSSFarmID, @OwnershipStructureTypeID, @Fax, @Email, @Phone, @FarmAddressID, @ForeignAddressIndicator, @FarmAddressIdfsLocation, @FarmAddressStreet, @FarmAddressApartment, @FarmAddressBuilding, @FarmAddressHouse, @FarmAddressPostalCode, @FarmAddressLatitude, @FarmAddressLongitude, @NumberOfBuildings, @NumberOfBirdsPerBuilding, @HerdsOrFlocks, @Species, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SETResult>> USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SETAsync(long? SupersededDiseaseReportID, string LanguageID, long? SurvivorDiseaseReportID, long? idfHuman, long? idfHumanActual, string strHumanCaseId, long? idfsFinalDiagnosis, DateTime? datDateOfDiagnosis, DateTime? datNotificationDate, long? idfsFinalState, string strLocalIdentifier, long? idfSentByOffice, string strSentByFirstName, string strSentByPatronymicName, string strSentByLastName, long? idfSentByPerson, long? idfReceivedByOffice, string strReceivedByFirstName, string strReceivedByPatronymicName, string strReceivedByLastName, long? idfReceivedByPerson, long? idfsHospitalizationStatus, long? idfHospital, string strCurrentLocation, DateTime? datOnSetDate, long? idfsInitialCaseStatus, long? idfsYNPreviouslySoughtCare, DateTime? datFirstSoughtCareDate, long? idfSoughtCareFacility, long? idfsNonNotIFiableDiagnosis, long? idfsYNHospitalization, DateTime? datHospitalizationDate, DateTime? datDischargeDate, string strHospitalName, long? idfsYNAntimicrobialTherapy, string strAntibioticName, string strDosage, DateTime? datFirstAdministeredDate, string strAntibioticComments, long? idfsYNSpecificVaccinationAdministered, long? idfInvestigatedByOffice, DateTime? StartDateofInvestigation, long? idfsYNRelatedToOutbreak, long? idfOutbreak, long? idfsYNExposureLocationKnown, long? idfPointGeoLocation, DateTime? datExposureDate, long? idfsGeoLocationType, string strLocationDescription, long? idfsLocationCountry, long? idfsLocationRegion, long? idfsLocationRayon, long? idfsLocationSettlement, double? intLocationLatitude, double? intLocationLongitude, long? intElevation, long? idfsLocationGroundType, double? intLocationDistance, double? intLocationDirection, string strForeignAddress, string strNote, long? idfsFinalCaseStatus, long? idfsOutcome, DateTime? datDateofDeath, long? idfsCaseProgressStatus, long? idfPersonEnteredBy, string strClinicalNotes, long? idfsYNSpecimenCollected, long? idfsYNTestsConducted, long? DiseaseReportTypeID, bool? blnClinicalDiagBasis, bool? blnLabDiagBasis, bool? blnEpiDiagBasis, DateTime? DateofClassification, string strSummaryNotes, long? idfEpiObservation, long? idfCSObservation, long? idfInvestigatedByPerson, string strEpidemiologistsName, long? idfsNotCollectedReason, string strNotCollectedReason, string SamplesParameters, string TestsParameters, string TestsInterpretationParameters, string AntiviralTherapiesParameters, string VaccinationsParameters, string ContactsParameters, string Events, long? idfsHumanAgeType, int? intPatientAge, DateTime? datCompletionPaperFormDate, int? RowStatus, long? idfsSite, string AuditUser, long? idfParentMonitoringSession, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "SupersededDiseaseReportID",
                    Value = SupersededDiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SurvivorDiseaseReportID",
                    Value = SurvivorDiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
               new SqlParameter
                {
                    ParameterName = "idfHuman",
                    Value = idfHuman ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfHumanActual",
                    Value = idfHumanActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strHumanCaseId",
                    Size = 400,
                    Value = strHumanCaseId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFinalDiagnosis",
                    Value = idfsFinalDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datDateOfDiagnosis",
                    Value = datDateOfDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datNotificationDate",
                    Value = datNotificationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFinalState",
                    Value = idfsFinalState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strLocalIdentifier",
                    Size = 400,
                    Value = strLocalIdentifier ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfSentByOffice",
                    Value = idfSentByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strSentByFirstName",
                    Size = 400,
                    Value = strSentByFirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSentByPatronymicName",
                    Size = 400,
                    Value = strSentByPatronymicName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSentByLastName",
                    Size = 400,
                    Value = strSentByLastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfSentByPerson",
                    Value = idfSentByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfReceivedByOffice",
                    Value = idfReceivedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strReceivedByFirstName",
                    Size = 400,
                    Value = strReceivedByFirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strReceivedByPatronymicName",
                    Size = 400,
                    Value = strReceivedByPatronymicName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strReceivedByLastName",
                    Size = 400,
                    Value = strReceivedByLastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfReceivedByPerson",
                    Value = idfReceivedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsHospitalizationStatus",
                    Value = idfsHospitalizationStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfHospital",
                    Value = idfHospital ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strCurrentLocation",
                    Size = 400,
                    Value = strCurrentLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "datOnSetDate",
                    Value = datOnSetDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsInitialCaseStatus",
                    Value = idfsInitialCaseStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNPreviouslySoughtCare",
                    Value = idfsYNPreviouslySoughtCare ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datFirstSoughtCareDate",
                    Value = datFirstSoughtCareDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfSoughtCareFacility",
                    Value = idfSoughtCareFacility ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsNonNotIFiableDiagnosis",
                    Value = idfsNonNotIFiableDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNHospitalization",
                    Value = idfsYNHospitalization ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datHospitalizationDate",
                    Value = datHospitalizationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datDischargeDate",
                    Value = datDischargeDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strHospitalName",
                    Size = 400,
                    Value = strHospitalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNAntimicrobialTherapy",
                    Value = idfsYNAntimicrobialTherapy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strAntibioticName",
                    Size = 400,
                    Value = strAntibioticName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strDosage",
                    Size = 400,
                    Value = strDosage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "datFirstAdministeredDate",
                    Value = datFirstAdministeredDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strAntibioticComments",
                    Size = -1,
                    Value = strAntibioticComments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNSpecificVaccinationAdministered",
                    Value = idfsYNSpecificVaccinationAdministered ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfInvestigatedByOffice",
                    Value = idfInvestigatedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StartDateofInvestigation",
                    Value = StartDateofInvestigation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNRelatedToOutbreak",
                    Value = idfsYNRelatedToOutbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfOutbreak",
                    Value = idfOutbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNExposureLocationKnown",
                    Value = idfsYNExposureLocationKnown ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfPointGeoLocation",
                    Value = idfPointGeoLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datExposureDate",
                    Value = datExposureDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsGeoLocationType",
                    Value = idfsGeoLocationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strLocationDescription",
                    Size = -1,
                    Value = strLocationDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocationCountry",
                    Value = idfsLocationCountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocationRegion",
                    Value = idfsLocationRegion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocationRayon",
                    Value = idfsLocationRayon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocationSettlement",
                    Value = idfsLocationSettlement ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intLocationLatitude",
                    Value = intLocationLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "intLocationLongitude",
                    Value = intLocationLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "intElevation",
                    Value = intElevation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocationGroundType",
                    Value = idfsLocationGroundType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intLocationDistance",
                    Value = intLocationDistance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "intLocationDirection",
                    Value = intLocationDirection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "strForeignAddress",
                    Size = -1,
                    Value = strForeignAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strNote",
                    Size = -1,
                    Value = strNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFinalCaseStatus",
                    Value = idfsFinalCaseStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsOutcome",
                    Value = idfsOutcome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datDateofDeath",
                    Value = datDateofDeath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCaseProgressStatus",
                    Value = idfsCaseProgressStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfPersonEnteredBy",
                    Value = idfPersonEnteredBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strClinicalNotes",
                    Size = 4000,
                    Value = strClinicalNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNSpecimenCollected",
                    Value = idfsYNSpecimenCollected ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNTestsConducted",
                    Value = idfsYNTestsConducted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReportTypeID",
                    Value = DiseaseReportTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "blnClinicalDiagBasis",
                    Value = blnClinicalDiagBasis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "blnLabDiagBasis",
                    Value = blnLabDiagBasis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "blnEpiDiagBasis",
                    Value = blnEpiDiagBasis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DateofClassification",
                    Value = DateofClassification ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strSummaryNotes",
                    Size = -1,
                    Value = strSummaryNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfEpiObservation",
                    Value = idfEpiObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfCSObservation",
                    Value = idfCSObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfInvestigatedByPerson",
                    Value = idfInvestigatedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strEpidemiologistsName",
                    Size = -1,
                    Value = strEpidemiologistsName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsNotCollectedReason",
                    Value = idfsNotCollectedReason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strNotCollectedReason",
                    Size = 400,
                    Value = strNotCollectedReason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SamplesParameters",
                    Size = -1,
                    Value = SamplesParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestsParameters",
                    Size = -1,
                    Value = TestsParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestsInterpretationParameters",
                    Size = -1,
                    Value = TestsInterpretationParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AntiviralTherapiesParameters",
                    Size = -1,
                    Value = AntiviralTherapiesParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VaccinationsParameters",
                    Size = -1,
                    Value = VaccinationsParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactsParameters",
                    Size = -1,
                    Value = ContactsParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsHumanAgeType",
                    Value = idfsHumanAgeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intPatientAge",
                    Value = intPatientAge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "datCompletionPaperFormDate",
                    Value = datCompletionPaperFormDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfParentMonitoringSession",
                    Value = idfParentMonitoringSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET] @SupersededDiseaseReportID, @LanguageID, @SurvivorDiseaseReportID, @idfHuman, @idfHumanActual, @strHumanCaseId, @idfsFinalDiagnosis, @datDateOfDiagnosis, @datNotificationDate, @idfsFinalState, @strLocalIdentifier, @idfSentByOffice, @strSentByFirstName, @strSentByPatronymicName, @strSentByLastName, @idfSentByPerson, @idfReceivedByOffice, @strReceivedByFirstName, @strReceivedByPatronymicName, @strReceivedByLastName, @idfReceivedByPerson, @idfsHospitalizationStatus, @idfHospital, @strCurrentLocation, @datOnSetDate, @idfsInitialCaseStatus, @idfsYNPreviouslySoughtCare, @datFirstSoughtCareDate, @idfSoughtCareFacility, @idfsNonNotIFiableDiagnosis, @idfsYNHospitalization, @datHospitalizationDate, @datDischargeDate, @strHospitalName, @idfsYNAntimicrobialTherapy, @strAntibioticName, @strDosage, @datFirstAdministeredDate, @strAntibioticComments, @idfsYNSpecificVaccinationAdministered, @idfInvestigatedByOffice, @StartDateofInvestigation, @idfsYNRelatedToOutbreak, @idfOutbreak, @idfsYNExposureLocationKnown, @idfPointGeoLocation, @datExposureDate, @idfsGeoLocationType, @strLocationDescription, @idfsLocationCountry, @idfsLocationRegion, @idfsLocationRayon, @idfsLocationSettlement, @intLocationLatitude, @intLocationLongitude, @intElevation, @idfsLocationGroundType, @intLocationDistance, @intLocationDirection, @strForeignAddress, @strNote, @idfsFinalCaseStatus, @idfsOutcome, @datDateofDeath, @idfsCaseProgressStatus, @idfPersonEnteredBy, @strClinicalNotes, @idfsYNSpecimenCollected, @idfsYNTestsConducted, @DiseaseReportTypeID, @blnClinicalDiagBasis, @blnLabDiagBasis, @blnEpiDiagBasis, @DateofClassification, @strSummaryNotes, @idfEpiObservation, @idfCSObservation, @idfInvestigatedByPerson, @strEpidemiologistsName, @idfsNotCollectedReason, @strNotCollectedReason, @SamplesParameters, @TestsParameters, @TestsInterpretationParameters, @AntiviralTherapiesParameters, @VaccinationsParameters, @ContactsParameters, @Events, @idfsHumanAgeType, @intPatientAge, @datCompletionPaperFormDate, @RowStatus, @idfsSite, @AuditUser, @idfParentMonitoringSession", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_DEDUPLICATION_PERSON_SETResult>> USP_ADMIN_DEDUPLICATION_PERSON_SETAsync(long? HumanMasterID, long? SupersededHumanMasterID, bool? CopyToHumanIndicator, long? PersonalIDType, string EIDSSPersonID, string PersonalID, string FirstName, string SecondName, string LastName, DateTime? DateOfBirth, DateTime? DateOfDeath, int? ReportedAge, long? ReportAgeUOMID, long? HumanGenderTypeID, long? OccupationTypeID, long? CitizenshipTypeID, string PassportNumber, long? IsEmployedTypeID, string EmployerName, DateTime? EmployedDateLastPresent, bool? EmployerForeignAddressIndicator, string EmployerForeignAddressString, long? EmployerGeoLocationID, long? EmployeridfsLocation, string EmployerstrStreetName, string EmployerstrApartment, string EmployerstrBuilding, string EmployerstrHouse, string EmployeridfsPostalCode, string EmployerPhone, long? IsStudentTypeID, string SchoolName, DateTime? SchoolDateLastAttended, bool? SchoolForeignAddressIndicator, string SchoolForeignAddressString, long? SchoolGeoLocationID, long? SchoolidfsLocation, string SchoolstrStreetName, string SchoolstrApartment, string SchoolstrBuilding, string SchoolstrHouse, string SchoolidfsPostalCode, string SchoolPhone, long? HumanGeoLocationID, long? HumanidfsLocation, string HumanstrStreetName, string HumanstrApartment, string HumanstrBuilding, string HumanstrHouse, string HumanidfsPostalCode, double? HumanstrLatitude, double? HumanstrLongitude, double? HumanstrElevation, long? HumanPermGeoLocationID, long? HumanPermidfsLocation, string HumanPermstrStreetName, string HumanPermstrApartment, string HumanPermstrBuilding, string HumanPermstrHouse, string HumanPermidfsPostalCode, long? HumanAltGeoLocationID, bool? HumanAltForeignAddressIndicator, string HumanAltForeignAddressString, long? HumanAltidfsLocation, string HumanAltstrStreetName, string HumanAltstrApartment, string HumanAltstrBuilding, string HumanAltstrHouse, string HumanAltidfsPostalCode, string RegistrationPhone, string HomePhone, string WorkPhone, int? ContactPhoneCountryCode, string ContactPhone, long? ContactPhoneTypeID, int? ContactPhone2CountryCode, string ContactPhone2, long? ContactPhone2TypeID, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "HumanMasterID",
                    Value = HumanMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SupersededHumanMasterID",
                    Value = SupersededHumanMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CopyToHumanIndicator",
                    Value = CopyToHumanIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalIDType",
                    Value = PersonalIDType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSPersonID",
                    Size = 400,
                    Value = EIDSSPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalID",
                    Size = 200,
                    Value = PersonalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 400,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SecondName",
                    Size = 400,
                    Value = SecondName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 400,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfBirth",
                    Value = DateOfBirth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfDeath",
                    Value = DateOfDeath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ReportedAge",
                    Value = ReportedAge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ReportAgeUOMID",
                    Value = ReportAgeUOMID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanGenderTypeID",
                    Value = HumanGenderTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OccupationTypeID",
                    Value = OccupationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CitizenshipTypeID",
                    Value = CitizenshipTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PassportNumber",
                    Size = 40,
                    Value = PassportNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsEmployedTypeID",
                    Value = IsEmployedTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerName",
                    Size = 400,
                    Value = EmployerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployedDateLastPresent",
                    Value = EmployedDateLastPresent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerForeignAddressIndicator",
                    Value = EmployerForeignAddressIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerForeignAddressString",
                    Size = 400,
                    Value = EmployerForeignAddressString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerGeoLocationID",
                    Value = EmployerGeoLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeridfsLocation",
                    Value = EmployeridfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerstrStreetName",
                    Size = 400,
                    Value = EmployerstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerstrApartment",
                    Size = 400,
                    Value = EmployerstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerstrBuilding",
                    Size = 400,
                    Value = EmployerstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerstrHouse",
                    Size = 400,
                    Value = EmployerstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeridfsPostalCode",
                    Size = 400,
                    Value = EmployeridfsPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerPhone",
                    Size = 200,
                    Value = EmployerPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsStudentTypeID",
                    Value = IsStudentTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolName",
                    Size = 400,
                    Value = SchoolName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolDateLastAttended",
                    Value = SchoolDateLastAttended ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolForeignAddressIndicator",
                    Value = SchoolForeignAddressIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolForeignAddressString",
                    Size = 400,
                    Value = SchoolForeignAddressString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolGeoLocationID",
                    Value = SchoolGeoLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolidfsLocation",
                    Value = SchoolidfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolstrStreetName",
                    Size = 400,
                    Value = SchoolstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolstrApartment",
                    Size = 400,
                    Value = SchoolstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolstrBuilding",
                    Size = 400,
                    Value = SchoolstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolstrHouse",
                    Size = 400,
                    Value = SchoolstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolidfsPostalCode",
                    Size = 400,
                    Value = SchoolidfsPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolPhone",
                    Size = 200,
                    Value = SchoolPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanGeoLocationID",
                    Value = HumanGeoLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanidfsLocation",
                    Value = HumanidfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrStreetName",
                    Size = 400,
                    Value = HumanstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrApartment",
                    Size = 400,
                    Value = HumanstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrBuilding",
                    Size = 400,
                    Value = HumanstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrHouse",
                    Size = 400,
                    Value = HumanstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanidfsPostalCode",
                    Size = 400,
                    Value = HumanidfsPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrLatitude",
                    Value = HumanstrLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrLongitude",
                    Value = HumanstrLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrElevation",
                    Value = HumanstrElevation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermGeoLocationID",
                    Value = HumanPermGeoLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermidfsLocation",
                    Value = HumanPermidfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermstrStreetName",
                    Size = 400,
                    Value = HumanPermstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermstrApartment",
                    Size = 400,
                    Value = HumanPermstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermstrBuilding",
                    Size = 400,
                    Value = HumanPermstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermstrHouse",
                    Size = 400,
                    Value = HumanPermstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermidfsPostalCode",
                    Size = 400,
                    Value = HumanPermidfsPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltGeoLocationID",
                    Value = HumanAltGeoLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltForeignAddressIndicator",
                    Value = HumanAltForeignAddressIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltForeignAddressString",
                    Size = 400,
                    Value = HumanAltForeignAddressString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltidfsLocation",
                    Value = HumanAltidfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltstrStreetName",
                    Size = 400,
                    Value = HumanAltstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltstrApartment",
                    Size = 400,
                    Value = HumanAltstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltstrBuilding",
                    Size = 400,
                    Value = HumanAltstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltstrHouse",
                    Size = 400,
                    Value = HumanAltstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltidfsPostalCode",
                    Size = 400,
                    Value = HumanAltidfsPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegistrationPhone",
                    Size = 400,
                    Value = RegistrationPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HomePhone",
                    Size = 400,
                    Value = HomePhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WorkPhone",
                    Size = 400,
                    Value = WorkPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhoneCountryCode",
                    Value = ContactPhoneCountryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhone",
                    Size = 400,
                    Value = ContactPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhoneTypeID",
                    Value = ContactPhoneTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhone2CountryCode",
                    Value = ContactPhone2CountryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhone2",
                    Size = 400,
                    Value = ContactPhone2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhone2TypeID",
                    Value = ContactPhone2TypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_DEDUPLICATION_PERSON_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_DEDUPLICATION_PERSON_SET] @HumanMasterID, @SupersededHumanMasterID, @CopyToHumanIndicator, @PersonalIDType, @EIDSSPersonID, @PersonalID, @FirstName, @SecondName, @LastName, @DateOfBirth, @DateOfDeath, @ReportedAge, @ReportAgeUOMID, @HumanGenderTypeID, @OccupationTypeID, @CitizenshipTypeID, @PassportNumber, @IsEmployedTypeID, @EmployerName, @EmployedDateLastPresent, @EmployerForeignAddressIndicator, @EmployerForeignAddressString, @EmployerGeoLocationID, @EmployeridfsLocation, @EmployerstrStreetName, @EmployerstrApartment, @EmployerstrBuilding, @EmployerstrHouse, @EmployeridfsPostalCode, @EmployerPhone, @IsStudentTypeID, @SchoolName, @SchoolDateLastAttended, @SchoolForeignAddressIndicator, @SchoolForeignAddressString, @SchoolGeoLocationID, @SchoolidfsLocation, @SchoolstrStreetName, @SchoolstrApartment, @SchoolstrBuilding, @SchoolstrHouse, @SchoolidfsPostalCode, @SchoolPhone, @HumanGeoLocationID, @HumanidfsLocation, @HumanstrStreetName, @HumanstrApartment, @HumanstrBuilding, @HumanstrHouse, @HumanidfsPostalCode, @HumanstrLatitude, @HumanstrLongitude, @HumanstrElevation, @HumanPermGeoLocationID, @HumanPermidfsLocation, @HumanPermstrStreetName, @HumanPermstrApartment, @HumanPermstrBuilding, @HumanPermstrHouse, @HumanPermidfsPostalCode, @HumanAltGeoLocationID, @HumanAltForeignAddressIndicator, @HumanAltForeignAddressString, @HumanAltidfsLocation, @HumanAltstrStreetName, @HumanAltstrApartment, @HumanAltstrBuilding, @HumanAltstrHouse, @HumanAltidfsPostalCode, @RegistrationPhone, @HomePhone, @WorkPhone, @ContactPhoneCountryCode, @ContactPhone, @ContactPhoneTypeID, @ContactPhone2CountryCode, @ContactPhone2, @ContactPhone2TypeID, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_DEDUPLICATION_PERSONID_FARM_SETResult>> USP_ADMIN_DEDUPLICATION_PERSONID_FARM_SETAsync(long? SurvivorHumanMasterID, long? SupersededHumanMasterID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "SurvivorHumanMasterID",
                    Value = SurvivorHumanMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SupersededHumanMasterID",
                    Value = SupersededHumanMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_DEDUPLICATION_PERSONID_FARM_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_DEDUPLICATION_PERSONID_FARM_SET] @SurvivorHumanMasterID, @SupersededHumanMasterID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_DEDUPLICATION_PERSONID_HUMAN_DISEASE_SETResult>> USP_ADMIN_DEDUPLICATION_PERSONID_HUMAN_DISEASE_SETAsync(long? SurvivorHumanMasterID, long? SupersededHumanMasterID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "SurvivorHumanMasterID",
                    Value = SurvivorHumanMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SupersededHumanMasterID",
                    Value = SupersededHumanMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_DEDUPLICATION_PERSONID_HUMAN_DISEASE_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_DEDUPLICATION_PERSONID_HUMAN_DISEASE_SET] @SurvivorHumanMasterID, @SupersededHumanMasterID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SETResult>> USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SETAsync(long? SurvivorVeterinaryDiseaseReportID, long? SupersededVeterinaryDiseaseReportID, string EIDSSReportID, long? FarmID, long? FarmMasterID, long? FarmOwnerID, long? MonitoringSessionID, long? OutbreakID, long? RelatedToDiseaseReportID, string EIDSSFieldAccessionID, long? DiseaseID, long? EnteredByPersonID, long? ReportedByOrganizationID, long? ReportedByPersonID, long? InvestigatedByOrganizationID, long? InvestigatedByPersonID, long? ReceivedByOrganizationID, long? ReceivedByPersonID, long? SiteID, DateTime? DiagnosisDate, DateTime? EnteredDate, DateTime? ReportDate, DateTime? AssignedDate, DateTime? InvestigationDate, int? RowStatus, long? ReportTypeID, long? ClassificationTypeID, long? StatusTypeID, long? ReportCategoryTypeID, int? FarmTotalAnimalQuantity, int? FarmSickAnimalQuantity, int? FarmDeadAnimalQuantity, double? FarmLatitude, double? FarmLongitude, long? FarmEpidemiologicalObservationID, long? ControlMeasuresObservationID, long? TestsConductedIndicator, string AuditUserName, string FlocksOrHerds, string Species, string Animals, string Vaccinations, string Samples, string PensideTests, string LaboratoryTests, string LaboratoryTestInterpretations, string CaseLogs, string ClinicalInformation, string Contacts, string CaseMonitorings, string Notifications, long? UserID, bool? LinkLocalOrFieldSampleIDToReportID, bool? OutbreakCaseIndicator, long? OutbreakCaseReportUID, long? OutbreakCaseStatusTypeID, long? OutbreakCaseQuestionnaireObservationID, bool? PrimaryCaseIndicator, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "SurvivorVeterinaryDiseaseReportID",
                    Value = SurvivorVeterinaryDiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SupersededVeterinaryDiseaseReportID",
                    Value = SupersededVeterinaryDiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSReportID",
                    Size = 400,
                    Value = EIDSSReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmID",
                    Value = FarmID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmMasterID",
                    Value = FarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerID",
                    Value = FarmOwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakID",
                    Value = OutbreakID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RelatedToDiseaseReportID",
                    Value = RelatedToDiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSFieldAccessionID",
                    Size = 400,
                    Value = EIDSSFieldAccessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EnteredByPersonID",
                    Value = EnteredByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportedByOrganizationID",
                    Value = ReportedByOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportedByPersonID",
                    Value = ReportedByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "InvestigatedByOrganizationID",
                    Value = InvestigatedByOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "InvestigatedByPersonID",
                    Value = InvestigatedByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivedByOrganizationID",
                    Value = ReceivedByOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivedByPersonID",
                    Value = ReceivedByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisDate",
                    Value = DiagnosisDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EnteredDate",
                    Value = EnteredDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ReportDate",
                    Value = ReportDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AssignedDate",
                    Value = AssignedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "InvestigationDate",
                    Value = InvestigationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ReportTypeID",
                    Value = ReportTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ClassificationTypeID",
                    Value = ClassificationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StatusTypeID",
                    Value = StatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportCategoryTypeID",
                    Value = ReportCategoryTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmTotalAnimalQuantity",
                    Value = FarmTotalAnimalQuantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FarmSickAnimalQuantity",
                    Value = FarmSickAnimalQuantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FarmDeadAnimalQuantity",
                    Value = FarmDeadAnimalQuantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FarmLatitude",
                    Value = FarmLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "FarmLongitude",
                    Value = FarmLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "FarmEpidemiologicalObservationID",
                    Value = FarmEpidemiologicalObservationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ControlMeasuresObservationID",
                    Value = ControlMeasuresObservationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestsConductedIndicator",
                    Value = TestsConductedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FlocksOrHerds",
                    Size = -1,
                    Value = FlocksOrHerds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Species",
                    Size = -1,
                    Value = Species ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Animals",
                    Size = -1,
                    Value = Animals ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Vaccinations",
                    Size = -1,
                    Value = Vaccinations ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Samples",
                    Size = -1,
                    Value = Samples ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PensideTests",
                    Size = -1,
                    Value = PensideTests ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LaboratoryTests",
                    Size = -1,
                    Value = LaboratoryTests ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LaboratoryTestInterpretations",
                    Size = -1,
                    Value = LaboratoryTestInterpretations ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaseLogs",
                    Size = -1,
                    Value = CaseLogs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ClinicalInformation",
                    Size = -1,
                    Value = ClinicalInformation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Contacts",
                    Size = -1,
                    Value = Contacts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaseMonitorings",
                    Size = -1,
                    Value = CaseMonitorings ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Notifications",
                    Size = -1,
                    Value = Notifications ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LinkLocalOrFieldSampleIDToReportID",
                    Value = LinkLocalOrFieldSampleIDToReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseIndicator",
                    Value = OutbreakCaseIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseReportUID",
                    Value = OutbreakCaseReportUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseStatusTypeID",
                    Value = OutbreakCaseStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseQuestionnaireObservationID",
                    Value = OutbreakCaseQuestionnaireObservationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PrimaryCaseIndicator",
                    Value = PrimaryCaseIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET] @SurvivorVeterinaryDiseaseReportID, @SupersededVeterinaryDiseaseReportID, @EIDSSReportID, @FarmID, @FarmMasterID, @FarmOwnerID, @MonitoringSessionID, @OutbreakID, @RelatedToDiseaseReportID, @EIDSSFieldAccessionID, @DiseaseID, @EnteredByPersonID, @ReportedByOrganizationID, @ReportedByPersonID, @InvestigatedByOrganizationID, @InvestigatedByPersonID, @ReceivedByOrganizationID, @ReceivedByPersonID, @SiteID, @DiagnosisDate, @EnteredDate, @ReportDate, @AssignedDate, @InvestigationDate, @RowStatus, @ReportTypeID, @ClassificationTypeID, @StatusTypeID, @ReportCategoryTypeID, @FarmTotalAnimalQuantity, @FarmSickAnimalQuantity, @FarmDeadAnimalQuantity, @FarmLatitude, @FarmLongitude, @FarmEpidemiologicalObservationID, @ControlMeasuresObservationID, @TestsConductedIndicator, @AuditUserName, @FlocksOrHerds, @Species, @Animals, @Vaccinations, @Samples, @PensideTests, @LaboratoryTests, @LaboratoryTestInterpretations, @CaseLogs, @ClinicalInformation, @Contacts, @CaseMonitorings, @Notifications, @UserID, @LinkLocalOrFieldSampleIDToReportID, @OutbreakCaseIndicator, @OutbreakCaseReportUID, @OutbreakCaseStatusTypeID, @OutbreakCaseQuestionnaireObservationID, @PrimaryCaseIndicator", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_DEPARTMENT_SETResult>> USP_ADMIN_DEPARTMENT_SETAsync(string LanguageID, long? DepartmentID, string DefaultName, string NationalName, long? OrganizationID, long? DepartmentNameTypeID, int? Order, string UserName, int? RowStatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentID",
                    Value = DepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultName",
                    Size = 400,
                    Value = DefaultName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalName",
                    Size = 400,
                    Value = NationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentNameTypeID",
                    Value = DepartmentNameTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Order",
                    Value = Order ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 100,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_DEPARTMENT_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_DEPARTMENT_SET] @LanguageID, @DepartmentID, @DefaultName, @NationalName, @OrganizationID, @DepartmentNameTypeID, @Order, @UserName, @RowStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMP_DELResult>> USP_ADMIN_EMP_DELAsync(long? idfPerson, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPerson",
                    Value = idfPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMP_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMP_DEL] @idfPerson", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMP_NEW_DEFAULT_ORGANIZATION_SETResult>> USP_ADMIN_EMP_NEW_DEFAULT_ORGANIZATION_SETAsync(long? idfUserID, long? idfNewUserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfUserID",
                    Value = idfUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfNewUserID",
                    Value = idfNewUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMP_NEW_DEFAULT_ORGANIZATION_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMP_NEW_DEFAULT_ORGANIZATION_SET] @idfUserID, @idfNewUserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMP_ORGANIZATION_ACTIVATE_DEACTIVATE_SETResult>> USP_ADMIN_EMP_ORGANIZATION_ACTIVATE_DEACTIVATE_SETAsync(long? idfPerson, bool? active, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPerson",
                    Value = idfPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMP_ORGANIZATION_ACTIVATE_DEACTIVATE_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMP_ORGANIZATION_ACTIVATE_DEACTIVATE_SET] @idfPerson, @active", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMP_ORGANIZATION_DELResult>> USP_ADMIN_EMP_ORGANIZATION_DELAsync(string aspNetUserId, long? idfUserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "aspNetUserId",
                    Size = 256,
                    Value = aspNetUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfUserId",
                    Value = idfUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMP_ORGANIZATION_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMP_ORGANIZATION_DEL] @aspNetUserId, @idfUserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMP_ORGANIZATION_SETResult>> USP_ADMIN_EMP_ORGANIZATION_SETAsync(string aspNetUserId, long? idfUserId, bool? IsDefault, int? intRowStatus, bool? active, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "aspNetUserId",
                    Size = 256,
                    Value = aspNetUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfUserId",
                    Value = idfUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsDefault",
                    Value = IsDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMP_ORGANIZATION_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMP_ORGANIZATION_SET] @aspNetUserId, @idfUserId, @IsDefault, @intRowStatus, @active", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMP_ORGANIZATION_STATUS_SETResult>> USP_ADMIN_EMP_ORGANIZATION_STATUS_SETAsync(long? idfPerson, int? intRowStatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPerson",
                    Value = idfPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMP_ORGANIZATION_STATUS_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMP_ORGANIZATION_STATUS_SET] @idfPerson, @intRowStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETDetailResult>> USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETDetailAsync(long? idfPerson, long? idfOffice, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPerson",
                    Value = idfPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfOffice",
                    Value = idfOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETDetailResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETDetail] @idfPerson, @idfOffice, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETListResult>> USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETListAsync(long? idfPerson, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPerson",
                    Value = idfPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETList] @idfPerson, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMP_SETResult>> USP_ADMIN_EMP_SETAsync(long? idfPerson, long? idfsStaffPosition, long? idfInstitution, long? idfDepartment, string strFamilyName, string strFirstName, string strSecondName, string strContactPhone, string strBarcode, long? idfsSite, string strPersonalID, string idfPersonalIDType, long? idfsEmployeeCategory, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPerson",
                    Value = idfPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsStaffPosition",
                    Value = idfsStaffPosition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfInstitution",
                    Value = idfInstitution ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfDepartment",
                    Value = idfDepartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strFamilyName",
                    Size = 400,
                    Value = strFamilyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strFirstName",
                    Size = 400,
                    Value = strFirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSecondName",
                    Size = 400,
                    Value = strSecondName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strContactPhone",
                    Size = 400,
                    Value = strContactPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strBarcode",
                    Size = 400,
                    Value = strBarcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strPersonalID",
                    Size = 400,
                    Value = strPersonalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfPersonalIDType",
                    Size = 400,
                    Value = idfPersonalIDType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsEmployeeCategory",
                    Value = idfsEmployeeCategory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMP_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMP_SET] @idfPerson, @idfsStaffPosition, @idfInstitution, @idfDepartment, @strFamilyName, @strFirstName, @strSecondName, @strContactPhone, @strBarcode, @idfsSite, @strPersonalID, @idfPersonalIDType, @idfsEmployeeCategory, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEE_DELResult>> USP_ADMIN_EMPLOYEE_DELAsync(long? idfPerson, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPerson",
                    Value = idfPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEE_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEE_DEL] @idfPerson", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEE_GETCOUNTResult>> USP_ADMIN_EMPLOYEE_GETCOUNTAsync(string LanguageID, long? EmployeeID, string FirstOrGivenName, string SecondName, string LastOrSurName, string ContactPhone, string OrganizationAbbreviatedName, string OrganizationFullName, string EIDSSOrganizationID, long? OrganizationID, string PositionTypeName, long? PositionTypeID, string PersonalID, long? PersonalIDType, long? idfsEmployeeCategory, long? AccountStateID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Value = EmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FirstOrGivenName",
                    Size = 800,
                    Value = FirstOrGivenName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SecondName",
                    Size = 800,
                    Value = SecondName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastOrSurName",
                    Size = 800,
                    Value = LastOrSurName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhone",
                    Size = 800,
                    Value = ContactPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationAbbreviatedName",
                    Size = 8000,
                    Value = OrganizationAbbreviatedName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationFullName",
                    Size = 8000,
                    Value = OrganizationFullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSOrganizationID",
                    Size = 400,
                    Value = EIDSSOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PositionTypeName",
                    Size = 8000,
                    Value = PositionTypeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PositionTypeID",
                    Value = PositionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalID",
                    Size = 200,
                    Value = PersonalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalIDType",
                    Value = PersonalIDType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsEmployeeCategory",
                    Value = idfsEmployeeCategory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AccountStateID",
                    Value = AccountStateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEE_GETCOUNTResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEE_GETCOUNT] @LanguageID, @EmployeeID, @FirstOrGivenName, @SecondName, @LastOrSurName, @ContactPhone, @OrganizationAbbreviatedName, @OrganizationFullName, @EIDSSOrganizationID, @OrganizationID, @PositionTypeName, @PositionTypeID, @PersonalID, @PersonalIDType, @idfsEmployeeCategory, @AccountStateID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEE_GETLISTResult>> USP_ADMIN_EMPLOYEE_GETLISTAsync(string LanguageID, long? EmployeeID, string FirstOrGivenName, string SecondName, string LastOrSurName, string ContactPhone, string EIDSSOrganizationID, long? OrganizationID, long? PositionTypeID, long? EmployeeCategoryID, long? AccountState, long? PersonalIdType, string PersonalIDValue, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Value = EmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FirstOrGivenName",
                    Size = 200,
                    Value = FirstOrGivenName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SecondName",
                    Size = 200,
                    Value = SecondName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastOrSurName",
                    Size = 200,
                    Value = LastOrSurName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhone",
                    Size = 200,
                    Value = ContactPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSOrganizationID",
                    Size = 200,
                    Value = EIDSSOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PositionTypeID",
                    Value = PositionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeCategoryID",
                    Value = EmployeeCategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AccountState",
                    Value = AccountState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalIdType",
                    Value = PersonalIdType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalIDValue",
                    Size = 200,
                    Value = PersonalIDValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEE_GETLISTResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEE_GETLIST] @LanguageID, @EmployeeID, @FirstOrGivenName, @SecondName, @LastOrSurName, @ContactPhone, @EIDSSOrganizationID, @OrganizationID, @PositionTypeID, @EmployeeCategoryID, @AccountState, @PersonalIdType, @PersonalIDValue, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEEGROUP_BYUSER_GetDetailResult>> USP_ADMIN_EMPLOYEEGROUP_BYUSER_GetDetailAsync(long? idfUserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfUserId",
                    Value = idfUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEEGROUP_BYUSER_GetDetailResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEEGROUP_BYUSER_GetDetail] @idfUserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEEGROUP_DASHBOARD_GETLISTResult>> USP_ADMIN_EMPLOYEEGROUP_DASHBOARD_GETLISTAsync(long? roleId, string dashboardItemType, string langId, string user, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "roleId",
                    Value = roleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "dashboardItemType",
                    Size = 100,
                    Value = dashboardItemType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 100,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEEGROUP_DASHBOARD_GETLISTResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEEGROUP_DASHBOARD_GETLIST] @roleId, @dashboardItemType, @langId, @user", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEEGROUP_DASHBOARD_SETResult>> USP_ADMIN_EMPLOYEEGROUP_DASHBOARD_SETAsync(long? roleID, string strDashboardObject, long? idfDataAuditEvent, string user, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "roleID",
                    Value = roleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDashboardObject",
                    Size = 2000,
                    Value = strDashboardObject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfDataAuditEvent",
                    Value = idfDataAuditEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 100,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEEGROUP_DASHBOARD_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEEGROUP_DASHBOARD_SET] @roleID, @strDashboardObject, @idfDataAuditEvent, @user", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEEGROUP_DELResult>> USP_ADMIN_EMPLOYEEGROUP_DELAsync(long? roleID, long? roleName, long? idfsSite, string user, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "roleID",
                    Value = roleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "roleName",
                    Value = roleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 100,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEEGROUP_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEEGROUP_DEL] @roleID, @roleName, @idfsSite, @user", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEEGROUP_GETDETAILResult>> USP_ADMIN_EMPLOYEEGROUP_GETDETAILAsync(long? idfEmployeeGroup, string langId, string user, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfEmployeeGroup",
                    Value = idfEmployeeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 200,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEEGROUP_GETDETAILResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEEGROUP_GETDETAIL] @idfEmployeeGroup, @langId, @user", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEEGROUP_GETLISTResult>> USP_ADMIN_EMPLOYEEGROUP_GETLISTAsync(string strName, string strDescription, string langId, long? idfsSite, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 1000,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strDescription",
                    Size = 2000,
                    Value = strDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEEGROUP_GETLISTResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEEGROUP_GETLIST] @strName, @strDescription, @langId, @idfsSite, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEEGROUP_SETResult>> USP_ADMIN_EMPLOYEEGROUP_SETAsync(long? idfEmployeeGroup, long? idfsSite, string strDefault, string strName, string strDescription, string langId, string strEmployees, string rolesandfunctions, string strDashboardObject, string user, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfEmployeeGroup",
                    Value = idfEmployeeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 400,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 400,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strDescription",
                    Size = 400,
                    Value = strDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strEmployees",
                    Size = -1,
                    Value = strEmployees ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "rolesandfunctions",
                    Size = -1,
                    Value = rolesandfunctions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strDashboardObject",
                    Size = 2000,
                    Value = strDashboardObject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 400,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEEGROUP_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEEGROUP_SET] @idfEmployeeGroup, @idfsSite, @strDefault, @strName, @strDescription, @langId, @strEmployees, @rolesandfunctions, @strDashboardObject, @user", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEEGROUP_SYSTEMFUNCTION_SETResult>> USP_ADMIN_EMPLOYEEGROUP_SYSTEMFUNCTION_SETAsync(string rolesandfunctions, long? idfDataAuditEvent, string user, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "rolesandfunctions",
                    Size = -1,
                    Value = rolesandfunctions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfDataAuditEvent",
                    Value = idfDataAuditEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 100,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEEGROUP_SYSTEMFUNCTION_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEEGROUP_SYSTEMFUNCTION_SET] @rolesandfunctions, @idfDataAuditEvent, @user", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEES_IN_USERGROUP_DELResult>> USP_ADMIN_EMPLOYEES_IN_USERGROUP_DELAsync(long? idfEmployeeGroup, string idfEmployeeList, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfEmployeeGroup",
                    Value = idfEmployeeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfEmployeeList",
                    Size = -1,
                    Value = idfEmployeeList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEES_IN_USERGROUP_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEES_IN_USERGROUP_DEL] @idfEmployeeGroup, @idfEmployeeList, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLISTResult>> USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLISTAsync(long? idfEmployeeGroup, string langId, long? Type, string Name, string Organization, string Description, int? pageNo, int? pageSize, string SortColumn, string SortOrder, string user, long? idfsSite, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfEmployeeGroup",
                    Value = idfEmployeeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Type",
                    Value = Type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 400,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Organization",
                    Size = 400,
                    Value = Organization ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 400,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 100,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLISTResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLIST] @idfEmployeeGroup, @langId, @Type, @Name, @Organization, @Description, @pageNo, @pageSize, @SortColumn, @SortOrder, @user, @idfsSite", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EVENT_GETCountResult>> USP_ADMIN_EVENT_GETCountAsync(string LanguageId, long? UserId, int? DaysFromReadDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageId",
                    Size = 100,
                    Value = LanguageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DaysFromReadDate",
                    Value = DaysFromReadDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EVENT_GETCountResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EVENT_GETCount] @LanguageId, @UserId, @DaysFromReadDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EVENT_GETListResult>> USP_ADMIN_EVENT_GETListAsync(string LanguageId, long? UserId, int? DaysFromReadDate, int? PageNo, int? PageSize, string SortColumn, string SortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageId",
                    Size = 100,
                    Value = LanguageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DaysFromReadDate",
                    Value = DaysFromReadDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNo",
                    Value = PageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 200,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 4,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EVENT_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EVENT_GETList] @LanguageId, @UserId, @DaysFromReadDate, @PageNo, @PageSize, @SortColumn, @SortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EVENT_SETResult>> USP_ADMIN_EVENT_SETAsync(long? EventId, long? EventTypeId, long? UserId, long? ObjectId, long? DiseaseId, long? SiteId, string InformationString, long? LoginSiteId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "EventId",
                    Value = EventId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectId",
                    Value = ObjectId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseId",
                    Value = DiseaseId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "InformationString",
                    Size = -1,
                    Value = InformationString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LoginSiteId",
                    Value = LoginSiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EVENT_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EVENT_SET] @EventId, @EventTypeId, @UserId, @ObjectId, @DiseaseId, @SiteId, @InformationString, @LoginSiteId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EVENT_STATUS_SETResult>> USP_ADMIN_EVENT_STATUS_SETAsync(long? SiteId, long? UserId, long? EventId, int? StatusValue, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventId",
                    Value = EventId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StatusValue",
                    Value = StatusValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 200,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EVENT_STATUS_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EVENT_STATUS_SET] @SiteId, @UserId, @EventId, @StatusValue, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EVENT_SUBSCRIPTION_GETListResult>> USP_ADMIN_EVENT_SUBSCRIPTION_GETListAsync(string LanguageId, string SiteAlertName, long? UserId, int? PageNo, int? PageSize, string SortColumn, string SortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageId",
                    Size = 50,
                    Value = LanguageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteAlertName",
                    Size = 510,
                    Value = SiteAlertName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNo",
                    Value = PageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EVENT_SUBSCRIPTION_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EVENT_SUBSCRIPTION_GETList] @LanguageId, @SiteAlertName, @UserId, @PageNo, @PageSize, @SortColumn, @SortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_EVENT_SUBSCRIPTION_SETResult>> USP_ADMIN_EVENT_SUBSCRIPTION_SETAsync(string Subscriptions, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "Subscriptions",
                    Size = -1,
                    Value = Subscriptions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 400,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_EVENT_SUBSCRIPTION_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_EVENT_SUBSCRIPTION_SET] @Subscriptions, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ActivityParameters_GETResult>> USP_ADMIN_FF_ActivityParameters_GETAsync(string observationList, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "observationList",
                    Size = -1,
                    Value = observationList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ActivityParameters_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ActivityParameters_GET] @observationList, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ActivityParameters_SETResult>> USP_ADMIN_FF_ActivityParameters_SETAsync(long? idfObservation, long? idfsFormTemplate, string answers, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfObservation",
                    Value = idfObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "answers",
                    Size = -1,
                    Value = answers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 400,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ActivityParameters_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ActivityParameters_SET] @idfObservation, @idfsFormTemplate, @answers, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Copy_TemplateResult>> USP_ADMIN_FF_Copy_TemplateAsync(string LangId, long? idfsFormTemplate, string User, long? idfsSite, long? idfsNewFormType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsNewFormType",
                    Value = idfsNewFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Copy_TemplateResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Copy_Template] @LangId, @idfsFormTemplate, @User, @idfsSite, @idfsNewFormType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Determinant_SETResult>> USP_ADMIN_FF_Determinant_SETAsync(long? idfsDiagnosisGroup, long? idfsFormTemplate, string User, int? intRowStatus, int? FunctionCall, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosisGroup",
                    Value = idfsDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 400,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FunctionCall",
                    Value = FunctionCall ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Determinant_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Determinant_SET] @idfsDiagnosisGroup, @idfsFormTemplate, @User, @intRowStatus, @FunctionCall, @EventTypeId, @SiteId, @UserId, @LocationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_DIAGNOSISREFERENCE_GETListResult>> USP_ADMIN_FF_DIAGNOSISREFERENCE_GETListAsync(string LangID, long? idfsFormTemplate, long? idfsFormType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormType",
                    Value = idfsFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_DIAGNOSISREFERENCE_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_DIAGNOSISREFERENCE_GETList] @LangID, @idfsFormTemplate, @idfsFormType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_FlexForm_GetResult>> USP_ADMIN_FF_FlexForm_GetAsync(string LangID, long? idfsDiagnosis, long? idfsFormType, long? idfsFormTemplate, long? idfObservation, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormType",
                    Value = idfsFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfObservation",
                    Value = idfObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_FlexForm_GetResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_FlexForm_Get] @LangID, @idfsDiagnosis, @idfsFormType, @idfsFormTemplate, @idfObservation", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_FormTemplate_GETResult>> USP_ADMIN_FF_FormTemplate_GETAsync(long? idfsDiagnosis, long? idfsFormType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormType",
                    Value = idfsFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_FormTemplate_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_FormTemplate_GET] @idfsDiagnosis, @idfsFormType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_FormTypes_GETResult>> USP_ADMIN_FF_FormTypes_GETAsync(string LangID, long? idfsFormType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormType",
                    Value = idfsFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_FormTypes_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_FormTypes_GET] @LangID, @idfsFormType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Parameter_CopyResult>> USP_ADMIN_FF_Parameter_CopyAsync(string LangId, long? idfsParameterSource, long? idfsSectionDestination, long? idfsFormTypeDestination, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameterSource",
                    Value = idfsParameterSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSectionDestination",
                    Value = idfsSectionDestination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTypeDestination",
                    Value = idfsFormTypeDestination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 200,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Parameter_CopyResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Parameter_Copy] @LangId, @idfsParameterSource, @idfsSectionDestination, @idfsFormTypeDestination, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Parameter_DELResult>> USP_ADMIN_FF_Parameter_DELAsync(string LangId, long? idfsParameter, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameter",
                    Value = idfsParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Parameter_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Parameter_DEL] @LangId, @idfsParameter, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Parameter_GETResult>> USP_ADMIN_FF_Parameter_GETAsync(string LangID, long? idfsParameter, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameter",
                    Value = idfsParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Parameter_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Parameter_GET] @LangID, @idfsParameter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterFixedPresetValue_DELResult>> USP_ADMIN_FF_ParameterFixedPresetValue_DELAsync(long? idfsParameterFixedPresetValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsParameterFixedPresetValue",
                    Value = idfsParameterFixedPresetValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterFixedPresetValue_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterFixedPresetValue_DEL] @idfsParameterFixedPresetValue", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterFixedPresetValue_GETListResult>> USP_ADMIN_FF_ParameterFixedPresetValue_GETListAsync(long? idfsParameterType, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsParameterType",
                    Value = idfsParameterType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterFixedPresetValue_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterFixedPresetValue_GETList] @idfsParameterType, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterFixedPresetValue_SETResult>> USP_ADMIN_FF_ParameterFixedPresetValue_SETAsync(long? idfsParameterType, string DefaultName, string NationalName, string LangID, int? intOrder, long? idfsParameterFixedPresetValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsParameterType",
                    Value = idfsParameterType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultName",
                    Size = 800,
                    Value = DefaultName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalName",
                    Size = 1200,
                    Value = NationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameterFixedPresetValue",
                    Value = idfsParameterFixedPresetValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterFixedPresetValue_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterFixedPresetValue_SET] @idfsParameterType, @DefaultName, @NationalName, @LangID, @intOrder, @idfsParameterFixedPresetValue", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterInUseResult>> USP_ADMIN_FF_ParameterInUseAsync(long? idfsParameter, long? idfsFormTemplate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsParameter",
                    Value = idfsParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterInUseResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterInUse] @idfsParameter, @idfsFormTemplate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterReferenceTypes_GETDetailResult>> USP_ADMIN_FF_ParameterReferenceTypes_GETDetailAsync(string LangID, long? idfsReferenceType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsReferenceType",
                    Value = idfsReferenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterReferenceTypes_GETDetailResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterReferenceTypes_GETDetail] @LangID, @idfsReferenceType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterReferenceTypes_GETListResult>> USP_ADMIN_FF_ParameterReferenceTypes_GETListAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterReferenceTypes_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterReferenceTypes_GETList] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Parameters_GETResult>> USP_ADMIN_FF_Parameters_GETAsync(string LangID, long? idfsSection, long? idfsFormType, string SectionIDs, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSection",
                    Value = idfsSection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormType",
                    Value = idfsFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SectionIDs",
                    Size = -1,
                    Value = SectionIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Parameters_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Parameters_GET] @LangID, @idfsSection, @idfsFormType, @SectionIDs", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Parameters_SETResult>> USP_ADMIN_FF_Parameters_SETAsync(string LangID, long? idfsSection, long? idfsFormType, long? idfsParameterType, long? idfsEditor, int? intHACode, int? intOrder, string strNote, string DefaultName, string NationalName, string DefaultLongName, string NationalLongName, long? idfsParameter, long? idfsParameterCaption, string User, int? intRowStatus, int? CopyOnly, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSection",
                    Value = idfsSection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormType",
                    Value = idfsFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameterType",
                    Value = idfsParameterType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsEditor",
                    Value = idfsEditor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "strNote",
                    Size = 2000,
                    Value = strNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultName",
                    Size = 800,
                    Value = DefaultName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalName",
                    Size = 1200,
                    Value = NationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultLongName",
                    Size = 800,
                    Value = DefaultLongName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalLongName",
                    Size = 1200,
                    Value = NationalLongName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameter",
                    Value = idfsParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameterCaption",
                    Value = idfsParameterCaption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 200,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CopyOnly",
                    Value = CopyOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Parameters_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Parameters_SET] @LangID, @idfsSection, @idfsFormType, @idfsParameterType, @idfsEditor, @intHACode, @intOrder, @strNote, @DefaultName, @NationalName, @DefaultLongName, @NationalLongName, @idfsParameter, @idfsParameterCaption, @User, @intRowStatus, @CopyOnly", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterSelectList_GETResult>> USP_ADMIN_FF_ParameterSelectList_GETAsync(string LangID, long? idfsParameter, long? idfsParameterType, long? intHACode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameter",
                    Value = idfsParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameterType",
                    Value = idfsParameterType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterSelectList_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterSelectList_GET] @LangID, @idfsParameter, @idfsParameterType, @intHACode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterTemplate_DELResult>> USP_ADMIN_FF_ParameterTemplate_DELAsync(long? idfsParameter, long? idfsFormTemplate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsParameter",
                    Value = idfsParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterTemplate_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterTemplate_DEL] @idfsParameter, @idfsFormTemplate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterTemplate_SETResult>> USP_ADMIN_FF_ParameterTemplate_SETAsync(long? idfsParameter, long? idfsFormTemplate, string LangID, long? idfsEditMode, int? intLeft, int? intTop, int? intWidth, int? intHeight, int? intScheme, int? intLabelSize, int? intOrder, bool? blnFreeze, string User, int? CopyOnly, int? FunctionCall, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsParameter",
                    Value = idfsParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsEditMode",
                    Value = idfsEditMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intLeft",
                    Value = intLeft ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intTop",
                    Value = intTop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intWidth",
                    Value = intWidth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intHeight",
                    Value = intHeight ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intScheme",
                    Value = intScheme ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intLabelSize",
                    Value = intLabelSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "blnFreeze",
                    Value = blnFreeze ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CopyOnly",
                    Value = CopyOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FunctionCall",
                    Value = FunctionCall ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterTemplate_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterTemplate_SET] @idfsParameter, @idfsFormTemplate, @LangID, @idfsEditMode, @intLeft, @intTop, @intWidth, @intHeight, @intScheme, @intLabelSize, @intOrder, @blnFreeze, @User, @CopyOnly, @FunctionCall", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterTypeEditorMapping_GetListResult>> USP_ADMIN_FF_ParameterTypeEditorMapping_GetListAsync(string LanguageID, long? idfsParameterType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameterType",
                    Value = idfsParameterType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterTypeEditorMapping_GetListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterTypeEditorMapping_GetList] @LanguageID, @idfsParameterType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterTypes_DELResult>> USP_ADMIN_FF_ParameterTypes_DELAsync(long? idfsParameterType, string User, bool? deleteAnyway, string LangId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsParameterType",
                    Value = idfsParameterType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 400,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterTypes_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterTypes_DEL] @idfsParameterType, @User, @deleteAnyway, @LangId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterTypes_FILTERResult>> USP_ADMIN_FF_ParameterTypes_FILTERAsync(string LangID, string searchString, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "searchString",
                    Size = 100,
                    Value = searchString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterTypes_FILTERResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterTypes_FILTER] @LangID, @searchString, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterTypes_GETListResult>> USP_ADMIN_FF_ParameterTypes_GETListAsync(string LangID, long? idfsParameterType, bool? OnlyLists, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameterType",
                    Value = idfsParameterType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OnlyLists",
                    Value = OnlyLists ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterTypes_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterTypes_GETList] @LangID, @idfsParameterType, @OnlyLists", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_ParameterTypes_SETResult>> USP_ADMIN_FF_ParameterTypes_SETAsync(long? idfsParameterType, string DefaultName, string NationalName, long? idfsReferenceType, int? HACode, int? Order, string LangID, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsParameterType",
                    Value = idfsParameterType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultName",
                    Size = 800,
                    Value = DefaultName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalName",
                    Size = 1200,
                    Value = NationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsReferenceType",
                    Value = idfsReferenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HACode",
                    Value = HACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Order",
                    Value = Order ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 200,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_ParameterTypes_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_ParameterTypes_SET] @idfsParameterType, @DefaultName, @NationalName, @idfsReferenceType, @HACode, @Order, @LangID, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_RequiredParameter_SETResult>> USP_ADMIN_FF_RequiredParameter_SETAsync(long? idfsParameter, long? idfsEditMode, long? idfsFormTemplate, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsParameter",
                    Value = idfsParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsEditMode",
                    Value = idfsEditMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 40,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_RequiredParameter_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_RequiredParameter_SET] @idfsParameter, @idfsEditMode, @idfsFormTemplate, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Rule_GetDetailsResult>> USP_ADMIN_FF_Rule_GetDetailsAsync(string LangID, long? idfsRule, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsRule",
                    Value = idfsRule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Rule_GetDetailsResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Rule_GetDetails] @LangID, @idfsRule", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_RuleParameterForAction_GETResult>> USP_ADMIN_FF_RuleParameterForAction_GETAsync(long? idfsRule, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsRule",
                    Value = idfsRule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_RuleParameterForAction_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_RuleParameterForAction_GET] @idfsRule", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Rules_GETResult>> USP_ADMIN_FF_Rules_GETAsync(string LangID, long? idfsFormTemplate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Rules_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Rules_GET] @LangID, @idfsFormTemplate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Rules_GETListResult>> USP_ADMIN_FF_Rules_GETListAsync(string LangID, long? idfsFunctionParameter, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFunctionParameter",
                    Value = idfsFunctionParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Rules_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Rules_GETList] @LangID, @idfsFunctionParameter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Rules_SETResult>> USP_ADMIN_FF_Rules_SETAsync(long? idfsFormTemplate, long? idfsCheckPoint, long? idfsRuleFunction, long? idfsRuleAction, string DefaultName, string NationalName, string MessageText, string MessageNationalText, bool? blnNot, string LangID, long? idfsRule, long? idfsRuleMessage, long? idfsFunctionParameter, long? idfsActionParameter, string User, string strFillValue, int? intRowStatus, string strCompareValue, int? FunctionCall, int? CopyOnly, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCheckPoint",
                    Value = idfsCheckPoint ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsRuleFunction",
                    Value = idfsRuleFunction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsRuleAction",
                    Value = idfsRuleAction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultName",
                    Size = 200,
                    Value = DefaultName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalName",
                    Size = 600,
                    Value = NationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MessageText",
                    Size = 200,
                    Value = MessageText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MessageNationalText",
                    Size = 300,
                    Value = MessageNationalText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "blnNot",
                    Value = blnNot ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsRule",
                    Value = idfsRule ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsRuleMessage",
                    Value = idfsRuleMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFunctionParameter",
                    Value = idfsFunctionParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsActionParameter",
                    Value = idfsActionParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strFillValue",
                    Size = 100,
                    Value = strFillValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "strCompareValue",
                    Size = 100,
                    Value = strCompareValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FunctionCall",
                    Value = FunctionCall ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CopyOnly",
                    Value = CopyOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Rules_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Rules_SET] @idfsFormTemplate, @idfsCheckPoint, @idfsRuleFunction, @idfsRuleAction, @DefaultName, @NationalName, @MessageText, @MessageNationalText, @blnNot, @LangID, @idfsRule, @idfsRuleMessage, @idfsFunctionParameter, @idfsActionParameter, @User, @strFillValue, @intRowStatus, @strCompareValue, @FunctionCall, @CopyOnly", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Section_CopyResult>> USP_ADMIN_FF_Section_CopyAsync(bool? IsDesigning, long? idfsSectionSource, long? idfsSectionDestination, long? idfsFormTypeDestination, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "IsDesigning",
                    Value = IsDesigning ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSectionSource",
                    Value = idfsSectionSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSectionDestination",
                    Value = idfsSectionDestination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTypeDestination",
                    Value = idfsFormTypeDestination ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Section_CopyResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Section_Copy] @IsDesigning, @idfsSectionSource, @idfsSectionDestination, @idfsFormTypeDestination, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Section_DELResult>> USP_ADMIN_FF_Section_DELAsync(long? idfsSection, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsSection",
                    Value = idfsSection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Section_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Section_DEL] @idfsSection", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_SectionParameterTree_GETResult>> USP_ADMIN_FF_SectionParameterTree_GETAsync(string LangID, long? idfsSection, long? idfsFormType, string parameterFilter, string sectionFilter, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSection",
                    Value = idfsSection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormType",
                    Value = idfsFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "parameterFilter",
                    Size = 400,
                    Value = parameterFilter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sectionFilter",
                    Size = 400,
                    Value = sectionFilter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_SectionParameterTree_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_SectionParameterTree_GET] @LangID, @idfsSection, @idfsFormType, @parameterFilter, @sectionFilter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Sections_GETResult>> USP_ADMIN_FF_Sections_GETAsync(string LangID, long? idfsFormType, long? idfsSection, long? idfsParentSection, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormType",
                    Value = idfsFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSection",
                    Value = idfsSection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParentSection",
                    Value = idfsParentSection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Sections_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Sections_GET] @LangID, @idfsFormType, @idfsSection, @idfsParentSection", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Sections_SETResult>> USP_ADMIN_FF_Sections_SETAsync(long? idfsSection, long? idfsParentSection, long? idfsFormType, string DefaultName, string NationalName, string LangID, int? intOrder, bool? blnGrid, bool? blnFixedRowset, long? idfsMatrixType, int? intRowStatus, string User, int? CopyOnly, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsSection",
                    Value = idfsSection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParentSection",
                    Value = idfsParentSection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormType",
                    Value = idfsFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultName",
                    Size = 800,
                    Value = DefaultName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalName",
                    Size = 1200,
                    Value = NationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "blnGrid",
                    Value = blnGrid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "blnFixedRowset",
                    Value = blnFixedRowset ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "idfsMatrixType",
                    Value = idfsMatrixType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CopyOnly",
                    Value = CopyOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Sections_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Sections_SET] @idfsSection, @idfsParentSection, @idfsFormType, @DefaultName, @NationalName, @LangID, @intOrder, @blnGrid, @blnFixedRowset, @idfsMatrixType, @intRowStatus, @User, @CopyOnly", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Template_DELResult>> USP_ADMIN_FF_Template_DELAsync(string LangId, long? idfsFormTemplate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Template_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Template_DEL] @LangId, @idfsFormTemplate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Template_GetDetailResult>> USP_ADMIN_FF_Template_GetDetailAsync(string LangID, long? idfsFormTemplate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Template_GetDetailResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Template_GetDetail] @LangID, @idfsFormTemplate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Template_SETResult>> USP_ADMIN_FF_Template_SETAsync(long? idfsFormType, string DefaultName, string NationalName, string strNote, string LangID, bool? blnUNI, long? idfsFormTemplate, int? intRowStatus, string User, int? FunctionCall, int? CopyOnly, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsFormType",
                    Value = idfsFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultName",
                    Size = 800,
                    Value = DefaultName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalName",
                    Size = 1200,
                    Value = NationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strNote",
                    Size = 400,
                    Value = strNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "blnUNI",
                    Value = blnUNI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FunctionCall",
                    Value = FunctionCall ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CopyOnly",
                    Value = CopyOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Template_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Template_SET] @idfsFormType, @DefaultName, @NationalName, @strNote, @LangID, @blnUNI, @idfsFormTemplate, @intRowStatus, @User, @FunctionCall, @CopyOnly, @EventTypeId, @SiteId, @UserId, @LocationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_TemplateDesign_GETResult>> USP_ADMIN_FF_TemplateDesign_GETAsync(string langid, long? idfsFormTemplate, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langid",
                    Size = 100,
                    Value = langid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_TemplateDesign_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_TemplateDesign_GET] @langid, @idfsFormTemplate, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_TemplateDeterminantValues_GETResult>> USP_ADMIN_FF_TemplateDeterminantValues_GETAsync(string LangID, long? idfsFormTemplate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_TemplateDeterminantValues_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_TemplateDeterminantValues_GET] @LangID, @idfsFormTemplate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_TemplateParameterOrder_SetResult>> USP_ADMIN_FF_TemplateParameterOrder_SetAsync(string langId, long? idfsFormTemplate, long? idfsCurrentParameter, long? idfsDestinationParameter, int? Direction, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCurrentParameter",
                    Value = idfsCurrentParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDestinationParameter",
                    Value = idfsDestinationParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Direction",
                    Value = Direction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_TemplateParameterOrder_SetResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_TemplateParameterOrder_Set] @langId, @idfsFormTemplate, @idfsCurrentParameter, @idfsDestinationParameter, @Direction, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_Templates_GETResult>> USP_ADMIN_FF_Templates_GETAsync(string LangID, long? idfsFormTemplate, long? idfsFormType, long? idfOUtbreak, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormType",
                    Value = idfsFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfOUtbreak",
                    Value = idfOUtbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_Templates_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_Templates_GET] @LangID, @idfsFormTemplate, @idfsFormType, @idfOUtbreak", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_TemplatesByParameter_GETResult>> USP_ADMIN_FF_TemplatesByParameter_GETAsync(string LangID, long? idfsParameter, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameter",
                    Value = idfsParameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_TemplatesByParameter_GETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_TemplatesByParameter_GET] @LangID, @idfsParameter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_FF_TemplateSectionOrder_SetResult>> USP_ADMIN_FF_TemplateSectionOrder_SetAsync(string LangId, long? idfsFormTemplate, long? idfsCurrentSection, long? idfsDestinationSection, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCurrentSection",
                    Value = idfsCurrentSection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDestinationSection",
                    Value = idfsDestinationSection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_FF_TemplateSectionOrder_SetResult>("EXEC @returnValue = [dbo].[USP_ADMIN_FF_TemplateSectionOrder_Set] @LangId, @idfsFormTemplate, @idfsCurrentSection, @idfsDestinationSection, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_GISDATA_DELResult>> USP_ADMIN_GISDATA_DELAsync(long? idfsLocation, string userName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsLocation",
                    Value = idfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "userName",
                    Size = 400,
                    Value = userName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_GISDATA_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_GISDATA_DEL] @idfsLocation, @userName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_GISDATA_SETResult>> USP_ADMIN_GISDATA_SETAsync(string LangID, long? idfsParent, string strHASC, string strCode, long? idfsLocation, string strDefaultName, string strNationalName, long? idfsType, double? Latitude, double? Longitude, int? Elevation, int? intOrder, string userName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 40,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParent",
                    Value = idfsParent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strHASC",
                    Size = 12,
                    Value = strHASC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strCode",
                    Size = 400,
                    Value = strCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocation",
                    Value = idfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefaultName",
                    Size = 200,
                    Value = strDefaultName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strNationalName",
                    Size = 200,
                    Value = strNationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsType",
                    Value = idfsType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Latitude",
                    Value = Latitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Longitude",
                    Value = Longitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Elevation",
                    Value = Elevation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userName",
                    Size = 400,
                    Value = userName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_GISDATA_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_GISDATA_SET] @LangID, @idfsParent, @strHASC, @strCode, @idfsLocation, @strDefaultName, @strNationalName, @idfsType, @Latitude, @Longitude, @Elevation, @intOrder, @userName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_IE_DownloadTemplate_GETListResult>> USP_ADMIN_IE_DownloadTemplate_GETListAsync(string langId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 20,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_IE_DownloadTemplate_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_IE_DownloadTemplate_GETList] @langId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_IE_Language_SETResult>> USP_ADMIN_IE_Language_SETAsync(long? ReferenceID, long? ReferenceType, string LangID, string DefaultName, string NationalName, string strReferenceCode, int? HACode, int? Order, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "ReferenceID",
                    Value = ReferenceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceType",
                    Value = ReferenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultName",
                    Size = 200,
                    Value = DefaultName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalName",
                    Size = 400,
                    Value = NationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strReferenceCode",
                    Size = 400,
                    Value = strReferenceCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HACode",
                    Value = HACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Order",
                    Value = Order ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_IE_Language_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_IE_Language_SET] @ReferenceID, @ReferenceType, @LangID, @DefaultName, @NationalName, @strReferenceCode, @HACode, @Order", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_IE_Module_GETListResult>> USP_ADMIN_IE_Module_GETListAsync(string langId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 48,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_IE_Module_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_IE_Module_GETList] @langId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_IE_Resource_GETListResult>> USP_ADMIN_IE_Resource_GETListAsync(long? moduleId, long? idfsResourceSet, string langId, string sortColumn, string sortOrder, string searchString, string includedTypes, bool? allModules, bool? isRequired, bool? isHidden, int? pageNo, int? pageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsResourceSet",
                    Value = idfsResourceSet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 20,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "searchString",
                    Size = 200,
                    Value = searchString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "includedTypes",
                    Size = 4000,
                    Value = includedTypes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "allModules",
                    Value = allModules ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isRequired",
                    Value = isRequired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isHidden",
                    Value = isHidden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_IE_Resource_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_IE_Resource_GETList] @moduleId, @idfsResourceSet, @langId, @sortColumn, @sortOrder, @searchString, @includedTypes, @allModules, @isRequired, @isHidden, @pageNo, @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_IE_Resource_SETResult>> USP_ADMIN_IE_Resource_SETAsync(long? idfsResource, long? idfsResourceSet, string DefaultName, string NationalName, bool? isRequired, bool? isHidden, string LangID, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsResource",
                    Value = idfsResource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsResourceSet",
                    Value = idfsResourceSet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultName",
                    Size = 800,
                    Value = DefaultName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalName",
                    Size = 1200,
                    Value = NationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isRequired",
                    Value = isRequired ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isHidden",
                    Value = isHidden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 400,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_IE_Resource_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_IE_Resource_SET] @idfsResource, @idfsResourceSet, @DefaultName, @NationalName, @isRequired, @isHidden, @LangID, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_IE_Section_GETListResult>> USP_ADMIN_IE_Section_GETListAsync(string parentNode, string langId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "parentNode",
                    Size = 8000,
                    Value = parentNode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 20,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_IE_Section_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_IE_Section_GETList] @parentNode, @langId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_NEIGHBORING_SITE_GETListResult>> USP_ADMIN_NEIGHBORING_SITE_GETListAsync(long? SiteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_NEIGHBORING_SITE_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_NEIGHBORING_SITE_GETList] @SiteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_OBJECT_ACCESS_GETListResult>> USP_ADMIN_OBJECT_ACCESS_GETListAsync(string LanguageID, long? ActorID, long? SiteID, long? ObjectID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ActorID",
                    Value = ActorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectID",
                    Value = ObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_OBJECT_ACCESS_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_OBJECT_ACCESS_GETList] @LanguageID, @ActorID, @SiteID, @ObjectID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_OBJECT_ACCESS_SETResult>> USP_ADMIN_OBJECT_ACCESS_SETAsync(string ObjectAccessRecords, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "ObjectAccessRecords",
                    Size = -1,
                    Value = ObjectAccessRecords ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_OBJECT_ACCESS_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_OBJECT_ACCESS_SET] @ObjectAccessRecords, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_ORG_DELResult>> USP_ADMIN_ORG_DELAsync(long? OrganizationKey, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "OrganizationKey",
                    Value = OrganizationKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_ORG_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_ORG_DEL] @OrganizationKey, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_ORG_GETDetailResult>> USP_ADMIN_ORG_GETDetailAsync(string LanguageID, long? OrganizationKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationKey",
                    Value = OrganizationKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_ORG_GETDetailResult>("EXEC @returnValue = [dbo].[USP_ADMIN_ORG_GETDetail] @LanguageID, @OrganizationKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_ORG_GETListResult>> USP_ADMIN_ORG_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? OrganizationKey, string OrganizationID, string AbbreviatedName, string FullName, int? AccessoryCode, long? SiteID, long? AdministrativeLevelID, long? OrganizationTypeID, bool? ShowForeignOrganizationsIndicator, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationKey",
                    Value = OrganizationKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Size = 200,
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AbbreviatedName",
                    Size = 200,
                    Value = AbbreviatedName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FullName",
                    Size = 200,
                    Value = FullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessoryCode",
                    Value = AccessoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelID",
                    Value = AdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationTypeID",
                    Value = OrganizationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ShowForeignOrganizationsIndicator",
                    Value = ShowForeignOrganizationsIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_ORG_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_ORG_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @OrganizationKey, @OrganizationID, @AbbreviatedName, @FullName, @AccessoryCode, @SiteID, @AdministrativeLevelID, @OrganizationTypeID, @ShowForeignOrganizationsIndicator", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_ORG_SETResult>> USP_ADMIN_ORG_SETAsync(string LanguageID, long? OrganizationKey, string OrganizationID, long? OrganizationTypeID, string AbbreviatedNameDefaultValue, string AbbreviatedNameNationalValue, string FullNameDefaultValue, string FullNameNationalValue, long? CurrentCustomizationID, long? AddressID, long? LocationID, string StreetName, string Apartment, string Building, string House, string PostalCode, bool? ForeignAddressIndicator, string ForeignAddressString, bool? SharedAddressIndicator, string ContactPhone, int? AccessoryCode, int? Order, long? OwnershipFormTypeID, long? LegalFormTypeID, long? MainFormOfActivityTypeID, string AuditUserName, string Departments, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationKey",
                    Value = OrganizationKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Size = 200,
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationTypeID",
                    Value = OrganizationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AbbreviatedNameDefaultValue",
                    Size = 400,
                    Value = AbbreviatedNameDefaultValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AbbreviatedNameNationalValue",
                    Size = 400,
                    Value = AbbreviatedNameNationalValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FullNameDefaultValue",
                    Size = 400,
                    Value = FullNameDefaultValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FullNameNationalValue",
                    Size = 400,
                    Value = FullNameNationalValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentCustomizationID",
                    Value = CurrentCustomizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AddressID",
                    Value = AddressID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationID",
                    Value = LocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StreetName",
                    Size = 400,
                    Value = StreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Apartment",
                    Size = 400,
                    Value = Apartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Building",
                    Size = 400,
                    Value = Building ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "House",
                    Size = 400,
                    Value = House ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PostalCode",
                    Size = 400,
                    Value = PostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ForeignAddressIndicator",
                    Value = ForeignAddressIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ForeignAddressString",
                    Size = 400,
                    Value = ForeignAddressString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SharedAddressIndicator",
                    Value = SharedAddressIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhone",
                    Size = 400,
                    Value = ContactPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessoryCode",
                    Value = AccessoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Order",
                    Value = Order ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OwnershipFormTypeID",
                    Value = OwnershipFormTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LegalFormTypeID",
                    Value = LegalFormTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MainFormOfActivityTypeID",
                    Value = MainFormOfActivityTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Departments",
                    Size = -1,
                    Value = Departments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_ORG_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_ORG_SET] @LanguageID, @OrganizationKey, @OrganizationID, @OrganizationTypeID, @AbbreviatedNameDefaultValue, @AbbreviatedNameNationalValue, @FullNameDefaultValue, @FullNameNationalValue, @CurrentCustomizationID, @AddressID, @LocationID, @StreetName, @Apartment, @Building, @House, @PostalCode, @ForeignAddressIndicator, @ForeignAddressString, @SharedAddressIndicator, @ContactPhone, @AccessoryCode, @Order, @OwnershipFormTypeID, @LegalFormTypeID, @MainFormOfActivityTypeID, @AuditUserName, @Departments", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_SITE_ACTOR_GETListResult>> USP_ADMIN_SITE_ACTOR_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? SiteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_SITE_ACTOR_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_SITE_ACTOR_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @SiteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_SITE_DELResult>> USP_ADMIN_SITE_DELAsync(long? SiteID, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_SITE_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_SITE_DEL] @SiteID, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_SITE_GETDetailResult>> USP_ADMIN_SITE_GETDetailAsync(string LanguageID, long? SiteID, long? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_SITE_GETDetailResult>("EXEC @returnValue = [dbo].[USP_ADMIN_SITE_GETDetail] @LanguageID, @SiteID, @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_SITE_GETListResult>> USP_ADMIN_SITE_GETListAsync(string LanguageID, long? SiteID, string EIDSSSiteID, long? SiteTypeID, string SiteName, string HASCSiteID, long? OrganizationID, long? AdministrativeLevelID, long? SiteGroupID, string AuditUserName, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSSiteID",
                    Size = 72,
                    Value = EIDSSSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteTypeID",
                    Value = SiteTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteName",
                    Size = 400,
                    Value = SiteName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HASCSiteID",
                    Size = 100,
                    Value = HASCSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelID",
                    Value = AdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteGroupID",
                    Value = SiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 1024,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_SITE_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_SITE_GETList] @LanguageID, @SiteID, @EIDSSSiteID, @SiteTypeID, @SiteName, @HASCSiteID, @OrganizationID, @AdministrativeLevelID, @SiteGroupID, @AuditUserName, @PageNumber, @PageSize, @SortColumn, @SortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_SITE_SETResult>> USP_ADMIN_SITE_SETAsync(string LanguageID, long? SiteID, long? CustomizationPackageID, string EIDSSSiteID, long? ParentSiteID, long? SiteTypeID, string SiteName, long? SiteOrganizationID, string HASCSiteID, int? RowStatus, string Permissions, string Organizations, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CustomizationPackageID",
                    Value = CustomizationPackageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSSiteID",
                    Size = 72,
                    Value = EIDSSSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ParentSiteID",
                    Value = ParentSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteTypeID",
                    Value = SiteTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteName",
                    Size = 400,
                    Value = SiteName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteOrganizationID",
                    Value = SiteOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HASCSiteID",
                    Size = 100,
                    Value = HASCSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Permissions",
                    Size = -1,
                    Value = Permissions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Organizations",
                    Size = -1,
                    Value = Organizations ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 400,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_SITE_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_SITE_SET] @LanguageID, @SiteID, @CustomizationPackageID, @EIDSSSiteID, @ParentSiteID, @SiteTypeID, @SiteName, @SiteOrganizationID, @HASCSiteID, @RowStatus, @Permissions, @Organizations, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_STAT_DELResult>> USP_ADMIN_STAT_DELAsync(long? idfStatistic, long? SiteId, long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfStatistic",
                    Value = idfStatistic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_STAT_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_STAT_DEL] @idfStatistic, @SiteId, @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_STAT_GetDetailResult>> USP_ADMIN_STAT_GetDetailAsync(long? idfStatistic, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfStatistic",
                    Value = idfStatistic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_STAT_GetDetailResult>("EXEC @returnValue = [dbo].[USP_ADMIN_STAT_GetDetail] @idfStatistic, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_STAT_GetListResult>> USP_ADMIN_STAT_GetListAsync(string LangID, long? idfsStatisticalDataType, long? idfsArea, DateTime? datStatisticStartDateFrom, DateTime? datStatisticStartDateTo, long? idfsRegion, long? idfsRayon, long? idfsSettlement, int? pageSize, int? pageNo, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsStatisticalDataType",
                    Value = idfsStatisticalDataType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsArea",
                    Value = idfsArea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datStatisticStartDateFrom",
                    Value = datStatisticStartDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datStatisticStartDateTo",
                    Value = datStatisticStartDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsRegion",
                    Value = idfsRegion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsRayon",
                    Value = idfsRayon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSettlement",
                    Value = idfsSettlement ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_STAT_GetListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_STAT_GetList] @LangID, @idfsStatisticalDataType, @idfsArea, @datStatisticStartDateFrom, @datStatisticStartDateTo, @idfsRegion, @idfsRayon, @idfsSettlement, @pageSize, @pageNo, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_STAT_SETResult>> USP_ADMIN_STAT_SETAsync(long? idfStatistic, long? idfsStatisticDataType, long? idfsMainBaseReference, long? idfsStatisticAreaType, long? idfsStatisticPeriodType, long? LocationUserControlidfsCountry, long? LocationUserControlidfsRegion, long? LocationUserControlidfsRayon, long? LocationUserControlidfsSettlement, DateTime? datStatisticStartDate, DateTime? datStatisticFinishDate, int? varValue, long? idfsStatisticalAgeGroup, long? idfsParameterName, bool? bulkImport, long? SiteId, long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfStatistic",
                    Value = idfStatistic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsStatisticDataType",
                    Value = idfsStatisticDataType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsMainBaseReference",
                    Value = idfsMainBaseReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsStatisticAreaType",
                    Value = idfsStatisticAreaType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsStatisticPeriodType",
                    Value = idfsStatisticPeriodType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationUserControlidfsCountry",
                    Value = LocationUserControlidfsCountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationUserControlidfsRegion",
                    Value = LocationUserControlidfsRegion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationUserControlidfsRayon",
                    Value = LocationUserControlidfsRayon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationUserControlidfsSettlement",
                    Value = LocationUserControlidfsSettlement ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datStatisticStartDate",
                    Value = datStatisticStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datStatisticFinishDate",
                    Value = datStatisticFinishDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "varValue",
                    Value = varValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfsStatisticalAgeGroup",
                    Value = idfsStatisticalAgeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsParameterName",
                    Value = idfsParameterName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "bulkImport",
                    Value = bulkImport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_STAT_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_STAT_SET] @idfStatistic, @idfsStatisticDataType, @idfsMainBaseReference, @idfsStatisticAreaType, @idfsStatisticPeriodType, @LocationUserControlidfsCountry, @LocationUserControlidfsRegion, @LocationUserControlidfsRayon, @LocationUserControlidfsSettlement, @datStatisticStartDate, @datStatisticFinishDate, @varValue, @idfsStatisticalAgeGroup, @idfsParameterName, @bulkImport, @SiteId, @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_STLE_DELResult>> USP_ADMIN_STLE_DELAsync(long? idfsSettlement, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsSettlement",
                    Value = idfsSettlement ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_STLE_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_STLE_DEL] @idfsSettlement", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_STLE_GetListResult>> USP_ADMIN_STLE_GetListAsync(string LangID, long? idfsSettlement, long? idfsSettlementType, string DefaultName, string strNationalName, long? idfsRegion, long? idfsRayon, double? LatMin, double? LatMax, double? LngMin, double? LngMax, double? EleMin, double? EleMax, int? pageSize, int? maxPagesPerFetch, int? paginationSet, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSettlement",
                    Value = idfsSettlement ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSettlementType",
                    Value = idfsSettlementType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultName",
                    Size = 200,
                    Value = DefaultName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strNationalName",
                    Size = 200,
                    Value = strNationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsRegion",
                    Value = idfsRegion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsRayon",
                    Value = idfsRayon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LatMin",
                    Value = LatMin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "LatMax",
                    Value = LatMax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "LngMin",
                    Value = LngMin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "LngMax",
                    Value = LngMax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "EleMin",
                    Value = EleMin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "EleMax",
                    Value = EleMax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "maxPagesPerFetch",
                    Value = maxPagesPerFetch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "paginationSet",
                    Value = paginationSet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_STLE_GetListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_STLE_GetList] @LangID, @idfsSettlement, @idfsSettlementType, @DefaultName, @strNationalName, @idfsRegion, @idfsRayon, @LatMin, @LatMax, @LngMin, @LngMax, @EleMin, @EleMax, @pageSize, @maxPagesPerFetch, @paginationSet", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_SYSTEM_PREFERENCE_GETDetailResult>> USP_ADMIN_SYSTEM_PREFERENCE_GETDetailAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_SYSTEM_PREFERENCE_GETDetailResult>("EXEC @returnValue = [dbo].[USP_ADMIN_SYSTEM_PREFERENCE_GETDetail]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_SYSTEM_PREFERENCE_SETResult>> USP_ADMIN_SYSTEM_PREFERENCE_SETAsync(long? SystemPreferenceID, string PreferenceDetail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "SystemPreferenceID",
                    Value = SystemPreferenceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PreferenceDetail",
                    Size = -1,
                    Value = PreferenceDetail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_SYSTEM_PREFERENCE_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_SYSTEM_PREFERENCE_SET] @SystemPreferenceID, @PreferenceDetail", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_SYSTEMEVENT_GETListResult>> USP_ADMIN_SYSTEMEVENT_GETListAsync(string LanguageId, long? UserId, DateTime? FromDate, DateTime? ToDate, long? EventTypeId, int? PageNo, int? PageSize, string SortColumn, string SortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageId",
                    Size = 100,
                    Value = LanguageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNo",
                    Value = PageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 200,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 4,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_SYSTEMEVENT_GETListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_SYSTEMEVENT_GETList] @LanguageId, @UserId, @FromDate, @ToDate, @EventTypeId, @PageNo, @PageSize, @SortColumn, @SortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_SYSTEMFUNCTION_GETLISTResult>> USP_ADMIN_SYSTEMFUNCTION_GETLISTAsync(string LanguageId, string SystemFunctionName, int? PageNo, int? PageSize, string SortColumn, string SortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageId",
                    Size = 100,
                    Value = LanguageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SystemFunctionName",
                    Size = 510,
                    Value = SystemFunctionName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNo",
                    Value = PageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_SYSTEMFUNCTION_GETLISTResult>("EXEC @returnValue = [dbo].[USP_ADMIN_SYSTEMFUNCTION_GETLIST] @LanguageId, @SystemFunctionName, @PageNo, @PageSize, @SortColumn, @SortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_SYSTEMFUNCTION_PersonANDEmployeeGroup_DELResult>> USP_ADMIN_SYSTEMFUNCTION_PersonANDEmployeeGroup_DELAsync(long? SystemFunctionID, long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "SystemFunctionID",
                    Value = SystemFunctionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_SYSTEMFUNCTION_PersonANDEmployeeGroup_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_SYSTEMFUNCTION_PersonANDEmployeeGroup_DEL] @SystemFunctionID, @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_Admin_SystemFunction_PersonANDEmployeeGroup_GetListResult>> USP_Admin_SystemFunction_PersonANDEmployeeGroup_GetListAsync(long? SystemFunctionID, string LangID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? ActorTypeID, string Name, string OrganizationName, string Description, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "SystemFunctionID",
                    Value = SystemFunctionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 200,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ActorTypeID",
                    Value = ActorTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 400,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationName",
                    Size = 400,
                    Value = OrganizationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 400,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_Admin_SystemFunction_PersonANDEmployeeGroup_GetListResult>("EXEC @returnValue = [dbo].[USP_Admin_SystemFunction_PersonANDEmployeeGroup_GetList] @SystemFunctionID, @LangID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @ActorTypeID, @Name, @OrganizationName, @Description, @UserSiteID, @UserOrganizationID, @UserEmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_SYSTEMFUNCTION_USERPERMISSION_GetListResult>> USP_ADMIN_SYSTEMFUNCTION_USERPERMISSION_GetListAsync(string LanguageId, long? EmployeeId, long? SystemFunctionId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageId",
                    Size = 100,
                    Value = LanguageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SystemFunctionId",
                    Value = SystemFunctionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_SYSTEMFUNCTION_USERPERMISSION_GetListResult>("EXEC @returnValue = [dbo].[USP_ADMIN_SYSTEMFUNCTION_USERPERMISSION_GetList] @LanguageId, @EmployeeId, @SystemFunctionId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_Admin_UserGoupAndUser_GetListResult>> USP_Admin_UserGoupAndUser_GetListAsync(string LanguageId, long? Id, string Name, int? pageNo, int? pageSize, string sortColumn, string sortOrder, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageId",
                    Size = 100,
                    Value = LanguageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 510,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_Admin_UserGoupAndUser_GetListResult>("EXEC @returnValue = [dbo].[USP_Admin_UserGoupAndUser_GetList] @LanguageId, @Id, @Name, @pageNo, @pageSize, @sortColumn, @sortOrder, @UserSiteID, @UserOrganizationID, @UserEmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_USERGROUP_SYSTEMFUNCTION_PERMISSION_GETLISTResult>> USP_ADMIN_USERGROUP_SYSTEMFUNCTION_PERMISSION_GETLISTAsync(string langId, long? SystemFunctionId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SystemFunctionId",
                    Value = SystemFunctionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_USERGROUP_SYSTEMFUNCTION_PERMISSION_GETLISTResult>("EXEC @returnValue = [dbo].[USP_ADMIN_USERGROUP_SYSTEMFUNCTION_PERMISSION_GETLIST] @langId, @SystemFunctionId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_USERGROUPTOEMPLOYEE_SETResult>> USP_ADMIN_USERGROUPTOEMPLOYEE_SETAsync(long? idfEmployeeGroup, string strEmployees, long? idfDataAuditEvent, string user, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfEmployeeGroup",
                    Value = idfEmployeeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strEmployees",
                    Size = -1,
                    Value = strEmployees ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfDataAuditEvent",
                    Value = idfDataAuditEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 100,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_USERGROUPTOEMPLOYEE_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_USERGROUPTOEMPLOYEE_SET] @idfEmployeeGroup, @strEmployees, @idfDataAuditEvent, @user", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_UserListGetForUtilityResult>> USP_ADMIN_UserListGetForUtilityAsync(long? idfsSite, long? idfInstitution, int? pageNo, int? pageSize, bool? showUnconvertedOnly, string advancedSearch, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfInstitution",
                    Value = idfInstitution ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "showUnconvertedOnly",
                    Value = showUnconvertedOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_UserListGetForUtilityResult>("EXEC @returnValue = [dbo].[USP_ADMIN_UserListGetForUtility] @idfsSite, @idfInstitution, @pageNo, @pageSize, @showUnconvertedOnly, @advancedSearch, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_USR_GROUPMEMBER_DELResult>> USP_ADMIN_USR_GROUPMEMBER_DELAsync(string idfEmployeeGroups, long? idfEmployee, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfEmployeeGroups",
                    Size = 1000,
                    Value = idfEmployeeGroups ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfEmployee",
                    Value = idfEmployee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_USR_GROUPMEMBER_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_USR_GROUPMEMBER_DEL] @idfEmployeeGroups, @idfEmployee", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_USR_GROUPMEMBER_SETResult>> USP_ADMIN_USR_GROUPMEMBER_SETAsync(string idfEmployeeGroups, long? idfEmployee, int? intRowStatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfEmployeeGroups",
                    Size = 1000,
                    Value = idfEmployeeGroups ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfEmployee",
                    Value = idfEmployee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_USR_GROUPMEMBER_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_USR_GROUPMEMBER_SET] @idfEmployeeGroups, @idfEmployee, @intRowStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_USR_LOGININFO_DELResult>> USP_ADMIN_USR_LOGININFO_DELAsync(long? idfUserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfUserID",
                    Value = idfUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_USR_LOGININFO_DELResult>("EXEC @returnValue = [dbo].[USP_ADMIN_USR_LOGININFO_DEL] @idfUserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ADMIN_USR_LOGININFO_SETResult>> USP_ADMIN_USR_LOGININFO_SETAsync(long? idfEmployee, long? idfsPersonSite, string strAccountName, byte[] binPassword, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfEmployee",
                    Value = idfEmployee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsPersonSite",
                    Value = idfsPersonSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strAccountName",
                    Size = 400,
                    Value = strAccountName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "binPassword",
                    Size = 50,
                    Value = binPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ADMIN_USR_LOGININFO_SETResult>("EXEC @returnValue = [dbo].[USP_ADMIN_USR_LOGININFO_SET] @idfEmployee, @idfsPersonSite, @strAccountName, @binPassword", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AGG_CASE_DELETEResult>> USP_AGG_CASE_DELETEAsync(long? ID, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "ID",
                    Value = ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 200,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AGG_CASE_DELETEResult>("EXEC @returnValue = [dbo].[USP_AGG_CASE_DELETE] @ID, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AGG_CASE_GETDETAILResult>> USP_AGG_CASE_GETDETAILAsync(string LanguageID, long? idfsAggrCaseType, long? idfAggrCase, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplyFiltrationIndicator, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsAggrCaseType",
                    Value = idfsAggrCaseType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfAggrCase",
                    Value = idfAggrCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplyFiltrationIndicator",
                    Value = ApplyFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AGG_CASE_GETDETAILResult>("EXEC @returnValue = [dbo].[USP_AGG_CASE_GETDETAIL] @LanguageID, @idfsAggrCaseType, @idfAggrCase, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplyFiltrationIndicator", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AGG_CASE_SETResult>> USP_AGG_CASE_SETAsync(long? idfAggrCase, string strCaseID, long? idfsAggrCaseType, long? GeographicalAdministrativeUnitID, long? OrganizationalAdministrativeUnitID, long? idfReceivedByOffice, long? idfReceivedByPerson, long? idfSentByOffice, long? idfSentByPerson, long? idfEnteredByOffice, long? idfEnteredByPerson, long? idfCaseObservation, long? idfsCaseObservationFormTemplate, long? idfDiagnosticObservation, long? idfsDiagnosticObservationFormTemplate, long? idfProphylacticObservation, long? idfsProphylacticObservationFormTemplate, long? idfSanitaryObservation, long? idfVersion, long? idfDiagnosticVersion, long? idfProphylacticVersion, long? idfSanitaryVersion, long? idfsSanitaryObservationFormTemplate, DateTime? datReceivedByDate, DateTime? datSentByDate, DateTime? datEnteredByDate, DateTime? datStartDate, DateTime? datFinishDate, DateTime? datModificationForArchiveDate, long? SiteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrCase",
                    Value = idfAggrCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strCaseID",
                    Size = 400,
                    Value = strCaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsAggrCaseType",
                    Value = idfsAggrCaseType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "GeographicalAdministrativeUnitID",
                    Value = GeographicalAdministrativeUnitID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationalAdministrativeUnitID",
                    Value = OrganizationalAdministrativeUnitID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfReceivedByOffice",
                    Value = idfReceivedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfReceivedByPerson",
                    Value = idfReceivedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfSentByOffice",
                    Value = idfSentByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfSentByPerson",
                    Value = idfSentByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfEnteredByOffice",
                    Value = idfEnteredByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfEnteredByPerson",
                    Value = idfEnteredByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfCaseObservation",
                    Value = idfCaseObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCaseObservationFormTemplate",
                    Value = idfsCaseObservationFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfDiagnosticObservation",
                    Value = idfDiagnosticObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosticObservationFormTemplate",
                    Value = idfsDiagnosticObservationFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfProphylacticObservation",
                    Value = idfProphylacticObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsProphylacticObservationFormTemplate",
                    Value = idfsProphylacticObservationFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfSanitaryObservation",
                    Value = idfSanitaryObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfDiagnosticVersion",
                    Value = idfDiagnosticVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfProphylacticVersion",
                    Value = idfProphylacticVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfSanitaryVersion",
                    Value = idfSanitaryVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSanitaryObservationFormTemplate",
                    Value = idfsSanitaryObservationFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datReceivedByDate",
                    Value = datReceivedByDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datSentByDate",
                    Value = datSentByDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datEnteredByDate",
                    Value = datEnteredByDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datStartDate",
                    Value = datStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datFinishDate",
                    Value = datFinishDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datModificationForArchiveDate",
                    Value = datModificationForArchiveDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AGG_CASE_SETResult>("EXEC @returnValue = [dbo].[USP_AGG_CASE_SET] @idfAggrCase, @strCaseID, @idfsAggrCaseType, @GeographicalAdministrativeUnitID, @OrganizationalAdministrativeUnitID, @idfReceivedByOffice, @idfReceivedByPerson, @idfSentByOffice, @idfSentByPerson, @idfEnteredByOffice, @idfEnteredByPerson, @idfCaseObservation, @idfsCaseObservationFormTemplate, @idfDiagnosticObservation, @idfsDiagnosticObservationFormTemplate, @idfProphylacticObservation, @idfsProphylacticObservationFormTemplate, @idfSanitaryObservation, @idfVersion, @idfDiagnosticVersion, @idfProphylacticVersion, @idfSanitaryVersion, @idfsSanitaryObservationFormTemplate, @datReceivedByDate, @datSentByDate, @datEnteredByDate, @datStartDate, @datFinishDate, @datModificationForArchiveDate, @SiteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AGG_REPORT_DELETEResult>> USP_AGG_REPORT_DELETEAsync(long? ID, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "ID",
                    Value = ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 200,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AGG_REPORT_DELETEResult>("EXEC @returnValue = [dbo].[USP_AGG_REPORT_DELETE] @ID, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AGG_REPORT_GETListResult>> USP_AGG_REPORT_GETListAsync(string LanguageID, long? AggregateReportTypeID, string ReportID, string LegacyReportID, long? AdministrativeUnitTypeID, long? TimeIntervalTypeID, DateTime? StartDate, DateTime? EndDate, long? AdministrativeUnitID, long? OrganizationID, bool? SelectAllIndicator, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, string SortColumn, string SortOrder, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AggregateReportTypeID",
                    Value = AggregateReportTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportID",
                    Size = 400,
                    Value = ReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LegacyReportID",
                    Size = 400,
                    Value = LegacyReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeUnitTypeID",
                    Value = AdministrativeUnitTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TimeIntervalTypeID",
                    Value = TimeIntervalTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeUnitID",
                    Value = AdministrativeUnitID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SelectAllIndicator",
                    Value = SelectAllIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AGG_REPORT_GETListResult>("EXEC @returnValue = [dbo].[USP_AGG_REPORT_GETList] @LanguageID, @AggregateReportTypeID, @ReportID, @LegacyReportID, @AdministrativeUnitTypeID, @TimeIntervalTypeID, @StartDate, @EndDate, @AdministrativeUnitID, @OrganizationID, @SelectAllIndicator, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplySiteFiltrationIndicator, @SortColumn, @SortOrder, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AGG_REPORT_SETResult>> USP_AGG_REPORT_SETAsync(long? AggregateReportID, string EIDSSAggregateReportID, long? AggregateReportTypeID, long? GeographicalAdministrativeUnitID, long? OrganizationalAdministrativeUnitID, long? ReceivedByOrganizationID, long? ReceivedByPersonID, long? SentByOrganizationID, long? SentByPersonID, long? EnteredByOrganizationID, long? EnteredByPersonID, long? CaseObservationID, long? CaseObservationFormTemplateID, long? DiagnosticObservationID, long? DiagnosticObservationFormTemplateID, long? ProphylacticObservationID, long? ProphylacticObservationFormTemplateID, long? SanitaryObservationID, long? SanitaryObservationFormTemplateID, long? CaseVersion, long? DiagnosticVersion, long? ProphylacticVersion, long? SanitaryVersion, DateTime? ReceivedByDate, DateTime? SentByDate, DateTime? EnteredByDate, DateTime? StartDate, DateTime? FinishDate, long? SiteID, string AuditUserName, long? UserID, string Events, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "AggregateReportID",
                    Value = AggregateReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSAggregateReportID",
                    Size = 400,
                    Value = EIDSSAggregateReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AggregateReportTypeID",
                    Value = AggregateReportTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "GeographicalAdministrativeUnitID",
                    Value = GeographicalAdministrativeUnitID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationalAdministrativeUnitID",
                    Value = OrganizationalAdministrativeUnitID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivedByOrganizationID",
                    Value = ReceivedByOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivedByPersonID",
                    Value = ReceivedByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SentByOrganizationID",
                    Value = SentByOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SentByPersonID",
                    Value = SentByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EnteredByOrganizationID",
                    Value = EnteredByOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EnteredByPersonID",
                    Value = EnteredByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CaseObservationID",
                    Value = CaseObservationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CaseObservationFormTemplateID",
                    Value = CaseObservationFormTemplateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosticObservationID",
                    Value = DiagnosticObservationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosticObservationFormTemplateID",
                    Value = DiagnosticObservationFormTemplateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ProphylacticObservationID",
                    Value = ProphylacticObservationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ProphylacticObservationFormTemplateID",
                    Value = ProphylacticObservationFormTemplateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SanitaryObservationID",
                    Value = SanitaryObservationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SanitaryObservationFormTemplateID",
                    Value = SanitaryObservationFormTemplateID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CaseVersion",
                    Value = CaseVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosticVersion",
                    Value = DiagnosticVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ProphylacticVersion",
                    Value = ProphylacticVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SanitaryVersion",
                    Value = SanitaryVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivedByDate",
                    Value = ReceivedByDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SentByDate",
                    Value = SentByDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EnteredByDate",
                    Value = EnteredByDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FinishDate",
                    Value = FinishDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AGG_REPORT_SETResult>("EXEC @returnValue = [dbo].[USP_AGG_REPORT_SET] @AggregateReportID, @EIDSSAggregateReportID, @AggregateReportTypeID, @GeographicalAdministrativeUnitID, @OrganizationalAdministrativeUnitID, @ReceivedByOrganizationID, @ReceivedByPersonID, @SentByOrganizationID, @SentByPersonID, @EnteredByOrganizationID, @EnteredByPersonID, @CaseObservationID, @CaseObservationFormTemplateID, @DiagnosticObservationID, @DiagnosticObservationFormTemplateID, @ProphylacticObservationID, @ProphylacticObservationFormTemplateID, @SanitaryObservationID, @SanitaryObservationFormTemplateID, @CaseVersion, @DiagnosticVersion, @ProphylacticVersion, @SanitaryVersion, @ReceivedByDate, @SentByDate, @EnteredByDate, @StartDate, @FinishDate, @SiteID, @AuditUserName, @UserID, @Events", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AS_CAMPAIGN_DELResult>> USP_AS_CAMPAIGN_DELAsync(string LanguageID, long? CampaignID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 255,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AS_CAMPAIGN_DELResult>("EXEC @returnValue = [dbo].[USP_AS_CAMPAIGN_DEL] @LanguageID, @CampaignID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AS_CAMPAIGN_GETDetailResult>> USP_AS_CAMPAIGN_GETDetailAsync(string LanguageID, long? CampaignID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AS_CAMPAIGN_GETDetailResult>("EXEC @returnValue = [dbo].[USP_AS_CAMPAIGN_GETDetail] @LanguageID, @CampaignID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AS_CAMPAIGN_GETListResult>> USP_AS_CAMPAIGN_GETListAsync(string LanguageID, string CampaignID, string LegacyCampaignID, string CampaignName, long? CampaignTypeID, long? CampaignStatusTypeID, long? CampaignCategoryID, DateTime? StartDateFrom, DateTime? StartDateTo, long? DiseaseID, long? UserSiteID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, string SortColumn, string SortOrder, int? Page, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Size = 400,
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LegacyCampaignID",
                    Size = 400,
                    Value = LegacyCampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignName",
                    Size = 400,
                    Value = CampaignName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignTypeID",
                    Value = CampaignTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignStatusTypeID",
                    Value = CampaignStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignCategoryID",
                    Value = CampaignCategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StartDateFrom",
                    Value = StartDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "StartDateTo",
                    Value = StartDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Page",
                    Value = Page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AS_CAMPAIGN_GETListResult>("EXEC @returnValue = [dbo].[USP_AS_CAMPAIGN_GETList] @LanguageID, @CampaignID, @LegacyCampaignID, @CampaignName, @CampaignTypeID, @CampaignStatusTypeID, @CampaignCategoryID, @StartDateFrom, @StartDateTo, @DiseaseID, @UserSiteID, @UserEmployeeID, @ApplySiteFiltrationIndicator, @SortColumn, @SortOrder, @Page, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AS_CAMPAIGN_SETResult>> USP_AS_CAMPAIGN_SETAsync(string LanguageID, long? idfCampaign, long? CampaignTypeID, long? CampaignStatusTypeID, DateTime? CampaignDateStart, DateTime? CampaignDateEnd, string strCampaignID, string CampaignName, string CampaignAdministrator, string Conclusion, long? SiteID, long? CampaignCategoryTypeID, string AuditUserName, string CampaignToDiagnosisCombo, string MonitoringSessions, string Events, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfCampaign",
                    Value = idfCampaign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignTypeID",
                    Value = CampaignTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignStatusTypeID",
                    Value = CampaignStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignDateStart",
                    Value = CampaignDateStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignDateEnd",
                    Value = CampaignDateEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCampaignID",
                    Size = 100,
                    Value = strCampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignName",
                    Size = 400,
                    Value = CampaignName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignAdministrator",
                    Size = 400,
                    Value = CampaignAdministrator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Conclusion",
                    Size = -1,
                    Value = Conclusion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignCategoryTypeID",
                    Value = CampaignCategoryTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignToDiagnosisCombo",
                    Size = -1,
                    Value = CampaignToDiagnosisCombo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessions",
                    Size = -1,
                    Value = MonitoringSessions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AS_CAMPAIGN_SETResult>("EXEC @returnValue = [dbo].[USP_AS_CAMPAIGN_SET] @LanguageID, @idfCampaign, @CampaignTypeID, @CampaignStatusTypeID, @CampaignDateStart, @CampaignDateEnd, @strCampaignID, @CampaignName, @CampaignAdministrator, @Conclusion, @SiteID, @CampaignCategoryTypeID, @AuditUserName, @CampaignToDiagnosisCombo, @MonitoringSessions, @Events", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AS_CAMPAIGN_TO_DIAGNOSIS_SPECIES_SAMPLE_TYPE_GETListResult>> USP_AS_CAMPAIGN_TO_DIAGNOSIS_SPECIES_SAMPLE_TYPE_GETListAsync(string LanguageID, long? CampaignID, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AS_CAMPAIGN_TO_DIAGNOSIS_SPECIES_SAMPLE_TYPE_GETListResult>("EXEC @returnValue = [dbo].[USP_AS_CAMPAIGN_TO_DIAGNOSIS_SPECIES_SAMPLE_TYPE_GETList] @LanguageID, @CampaignID, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AS_DISASSOCITESESSION_FROM_CAMPAIGN_SETResult>> USP_AS_DISASSOCITESESSION_FROM_CAMPAIGN_SETAsync(long? idfCampaign, long? idfMonitoringSesion, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfCampaign",
                    Value = idfCampaign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfMonitoringSesion",
                    Value = idfMonitoringSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AS_DISASSOCITESESSION_FROM_CAMPAIGN_SETResult>("EXEC @returnValue = [dbo].[USP_AS_DISASSOCITE SESSION_FROM_CAMPAIGN_SET] @idfCampaign, @idfMonitoringSesion, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ASPNetUser_GetAccessRulesAndPermissionsResult>> USP_ASPNetUser_GetAccessRulesAndPermissionsAsync(long? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ASPNetUser_GetAccessRulesAndPermissionsResult>("EXEC @returnValue = [dbo].[USP_ASPNetUser_GetAccessRulesAndPermissions] @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ASPNetUser_GetDetailResult>> USP_ASPNetUser_GetDetailAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 256,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ASPNetUser_GetDetailResult>("EXEC @returnValue = [dbo].[USP_ASPNetUser_GetDetail] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ASPNetUser_GetRolesAndPermissionsResult>> USP_ASPNetUser_GetRolesAndPermissionsAsync(long? idfuserid, long? EmployeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfuserid",
                    Value = idfuserid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Value = EmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ASPNetUser_GetRolesAndPermissionsResult>("EXEC @returnValue = [dbo].[USP_ASPNetUser_GetRolesAndPermissions] @idfuserid, @EmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ASPNetUserGetPermissionByRole_GETLISTResult>> USP_ASPNetUserGetPermissionByRole_GETLISTAsync(string strEmployees, string LangId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strEmployees",
                    Size = -1,
                    Value = strEmployees ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ASPNetUserGetPermissionByRole_GETLISTResult>("EXEC @returnValue = [dbo].[USP_ASPNetUserGetPermissionByRole_GETLIST] @strEmployees, @LangId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ASPNetUserSetSessionContextResult>> USP_ASPNetUserSetSessionContextAsync(string username, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "username",
                    Size = 510,
                    Value = username ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ASPNetUserSetSessionContextResult>("EXEC @returnValue = [dbo].[USP_ASPNetUserSetSessionContext] @username", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_AVR_UserPermissionsGetResult>> USP_AVR_UserPermissionsGetAsync(long? idfEmployee, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfEmployee",
                    Value = idfEmployee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_AVR_UserPermissionsGetResult>("EXEC @returnValue = [dbo].[USP_AVR_UserPermissionsGet] @idfEmployee", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GETResult>> USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GETAsync(long? idfVersion, int? pageNo, int? pageSize, string sortColumn, string sortOrder, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 200,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET] @idfVersion, @pageNo, @pageSize, @sortColumn, @sortOrder, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GETResult>> USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GETAsync(string versionList, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "versionList",
                    Size = -1,
                    Value = versionList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 48,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET] @versionList, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_ADMIN_ProphylacticMatrixReportGet_GETResult>> USP_CONF_ADMIN_ProphylacticMatrixReportGet_GETAsync(long? idfVersion, int? pageNo, int? pageSize, string sortColumn, string sortOrder, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 200,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_ADMIN_ProphylacticMatrixReportGet_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_ADMIN_ProphylacticMatrixReportGet_GET] @idfVersion, @pageNo, @pageSize, @sortColumn, @sortOrder, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_ADMIN_SanitaryMatrixReportGet_GETResult>> USP_CONF_ADMIN_SanitaryMatrixReportGet_GETAsync(string LangID, long? idfVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 200,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_ADMIN_SanitaryMatrixReportGet_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_ADMIN_SanitaryMatrixReportGet_GET] @LangID, @idfVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_ADMIN_VetDiagnosisInvesitgationMatrixReport_GETResult>> USP_CONF_ADMIN_VetDiagnosisInvesitgationMatrixReport_GETAsync(long? idfVersion, string LangID, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 48,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_ADMIN_VetDiagnosisInvesitgationMatrixReport_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_ADMIN_VetDiagnosisInvesitgationMatrixReport_GET] @idfVersion, @LangID, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_DELResult>> USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_DELAsync(long? idfDiagnosisAgeGroupToStatisticalAgeGroup, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfDiagnosisAgeGroupToStatisticalAgeGroup",
                    Value = idfDiagnosisAgeGroupToStatisticalAgeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_DEL] @idfDiagnosisAgeGroupToStatisticalAgeGroup, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_GETLISTResult>> USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_GETLISTAsync(string langId, long? idfsDiagnosisAgeGroup, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 20,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosisAgeGroup",
                    Value = idfsDiagnosisAgeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_GETLIST] @langId, @idfsDiagnosisAgeGroup, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SETResult>> USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SETAsync(long? idfDiagnosisAgeGroupToStatisticalAgeGroup, long? idfsDiagnosisAgeGroup, long? idfsStatisticalAgeGroup, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfDiagnosisAgeGroupToStatisticalAgeGroup",
                    Value = idfDiagnosisAgeGroupToStatisticalAgeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosisAgeGroup",
                    Value = idfsDiagnosisAgeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsStatisticalAgeGroup",
                    Value = idfsStatisticalAgeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SET] @idfDiagnosisAgeGroupToStatisticalAgeGroup, @idfsDiagnosisAgeGroup, @idfsStatisticalAgeGroup, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_AggregateSetting_GetListResult>> USP_CONF_AggregateSetting_GetListAsync(long? idfCustomizationPackage, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfCustomizationPackage",
                    Value = idfCustomizationPackage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_AggregateSetting_GetListResult>("EXEC @returnValue = [dbo].[USP_CONF_AggregateSetting_GetList] @idfCustomizationPackage, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_AggregateSetting_GetList_WithNameResult>> USP_CONF_AggregateSetting_GetList_WithNameAsync(string LanguageID, long? idfCustomizationPackage, long? idfsSite, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfCustomizationPackage",
                    Value = idfCustomizationPackage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_AggregateSetting_GetList_WithNameResult>("EXEC @returnValue = [dbo].[USP_CONF_AggregateSetting_GetList_WithName] @LanguageID, @idfCustomizationPackage, @idfsSite, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_AggregateSetting_SETResult>> USP_CONF_AggregateSetting_SETAsync(string AggregateSettingRecords, string Events, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "AggregateSettingRecords",
                    Size = -1,
                    Value = AggregateSettingRecords ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_AggregateSetting_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_AggregateSetting_SET] @AggregateSettingRecords, @Events, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_CUSTOMREPORT_DELResult>> USP_CONF_CUSTOMREPORT_DELAsync(long? idfReportRows, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfReportRows",
                    Value = idfReportRows ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_CUSTOMREPORT_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_CUSTOMREPORT_DEL] @idfReportRows, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_CUSTOMREPORT_GETLISTResult>> USP_CONF_CUSTOMREPORT_GETLISTAsync(string langId, long? idfsCustomReportType, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 20,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCustomReportType",
                    Value = idfsCustomReportType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 100,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_CUSTOMREPORT_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_CUSTOMREPORT_GETLIST] @langId, @idfsCustomReportType, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_CUSTOMREPORT_ROWORDER_SETResult>> USP_CONF_CUSTOMREPORT_ROWORDER_SETAsync(DataTable rows, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "rows",
                    Value = rows ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[UDT_RowOrder]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_CUSTOMREPORT_ROWORDER_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_CUSTOMREPORT_ROWORDER_SET] @rows", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_CUSTOMREPORT_SETResult>> USP_CONF_CUSTOMREPORT_SETAsync(long? idfReportRows, long? idfsCustomReportType, long? idfsDiagnosisOrReportDiagnosisGroup, long? idfsReportAdditionalText, long? idfsICDReportAdditionalText, int? intRowOrder, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfReportRows",
                    Value = idfReportRows ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCustomReportType",
                    Value = idfsCustomReportType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosisOrReportDiagnosisGroup",
                    Value = idfsDiagnosisOrReportDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsReportAdditionalText",
                    Value = idfsReportAdditionalText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsICDReportAdditionalText",
                    Value = idfsICDReportAdditionalText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intRowOrder",
                    Value = intRowOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_CUSTOMREPORT_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_CUSTOMREPORT_SET] @idfReportRows, @idfsCustomReportType, @idfsDiagnosisOrReportDiagnosisGroup, @idfsReportAdditionalText, @idfsICDReportAdditionalText, @intRowOrder, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASEAGEGROUPMATRIX_DELResult>> USP_CONF_DISEASEAGEGROUPMATRIX_DELAsync(long? idfDiagnosisAgeGroupToDiagnosis, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfDiagnosisAgeGroupToDiagnosis",
                    Value = idfDiagnosisAgeGroupToDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASEAGEGROUPMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASEAGEGROUPMATRIX_DEL] @idfDiagnosisAgeGroupToDiagnosis, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASEAGEGROUPMATRIX_GETLISTResult>> USP_CONF_DISEASEAGEGROUPMATRIX_GETLISTAsync(string LangId, long? idfsDiagnosis, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 20,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASEAGEGROUPMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASEAGEGROUPMATRIX_GETLIST] @LangId, @idfsDiagnosis, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASEAGEGROUPMATRIX_SETResult>> USP_CONF_DISEASEAGEGROUPMATRIX_SETAsync(long? idfDiagnosisAgeGroupToDiagnosis, long? idfsDiagnosis, long? idfsDiagnosisAgeGroup, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfDiagnosisAgeGroupToDiagnosis",
                    Value = idfDiagnosisAgeGroupToDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosisAgeGroup",
                    Value = idfsDiagnosisAgeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASEAGEGROUPMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASEAGEGROUPMATRIX_SET] @idfDiagnosisAgeGroupToDiagnosis, @idfsDiagnosis, @idfsDiagnosisAgeGroup", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASEGROUPDISEASEMATRIX_DELResult>> USP_CONF_DISEASEGROUPDISEASEMATRIX_DELAsync(long? idfDiagnosisToDiagnosisGroup, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfDiagnosisToDiagnosisGroup",
                    Value = idfDiagnosisToDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASEGROUPDISEASEMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_DEL] @idfDiagnosisToDiagnosisGroup, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASEGROUPDISEASEMATRIX_GETLISTResult>> USP_CONF_DISEASEGROUPDISEASEMATRIX_GETLISTAsync(string LangId, long? idfsDiagnosisGroup, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosisGroup",
                    Value = idfsDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASEGROUPDISEASEMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_GETLIST] @LangId, @idfsDiagnosisGroup, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASEGROUPDISEASEMATRIX_SETResult>> USP_CONF_DISEASEGROUPDISEASEMATRIX_SETAsync(long? idfDiagnosisToDiagnosisGroup, long? idfsDiagnosisGroup, long? idfsDiagnosis, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfDiagnosisToDiagnosisGroup",
                    Value = idfDiagnosisToDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosisGroup",
                    Value = idfsDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASEGROUPDISEASEMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_SET] @idfDiagnosisToDiagnosisGroup, @idfsDiagnosisGroup, @idfsDiagnosis, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASEHUMANGENDERMATRIX_DELResult>> USP_CONF_DISEASEHUMANGENDERMATRIX_DELAsync(long? DiagnosisGroupToGenderUID, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "DiagnosisGroupToGenderUID",
                    Value = DiagnosisGroupToGenderUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASEHUMANGENDERMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_DEL] @DiagnosisGroupToGenderUID, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASEHUMANGENDERMATRIX_GETLISTResult>> USP_CONF_DISEASEHUMANGENDERMATRIX_GETLISTAsync(string LangId, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 20,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASEHUMANGENDERMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_GETLIST] @LangId, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASEHUMANGENDERMATRIX_SETResult>> USP_CONF_DISEASEHUMANGENDERMATRIX_SETAsync(long? DiagnosisGroupToGenderUID, long? DiagnosisGroupID, long? GenderID, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "DiagnosisGroupToGenderUID",
                    Value = DiagnosisGroupToGenderUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisGroupID",
                    Value = DiagnosisGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "GenderID",
                    Value = GenderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASEHUMANGENDERMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_SET] @DiagnosisGroupToGenderUID, @DiagnosisGroupID, @GenderID, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASELABTESTMATRIX_DELResult>> USP_CONF_DISEASELABTESTMATRIX_DELAsync(long? idfTestforDisease, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfTestforDisease",
                    Value = idfTestforDisease ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASELABTESTMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASELABTESTMATRIX_DEL] @idfTestforDisease, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASELABTESTMATRIX_GETLISTResult>> USP_CONF_DISEASELABTESTMATRIX_GETLISTAsync(string langId, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 20,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASELABTESTMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASELABTESTMATRIX_GETLIST] @langId, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASELABTESTMATRIX_SETResult>> USP_CONF_DISEASELABTESTMATRIX_SETAsync(long? idfTestForDisease, long? idfsDiagnosis, long? idfsSampleType, long? idfsTestName, long? idfsTestCategory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfTestForDisease",
                    Value = idfTestForDisease ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSampleType",
                    Value = idfsSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsTestName",
                    Value = idfsTestName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsTestCategory",
                    Value = idfsTestCategory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASELABTESTMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASELABTESTMATRIX_SET] @idfTestForDisease, @idfsDiagnosis, @idfsSampleType, @idfsTestName, @idfsTestCategory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASEPENSIDETESTMATRIX_DELResult>> USP_CONF_DISEASEPENSIDETESTMATRIX_DELAsync(long? idfPensideTestforDisease, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPensideTestforDisease",
                    Value = idfPensideTestforDisease ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASEPENSIDETESTMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASEPENSIDETESTMATRIX_DEL] @idfPensideTestforDisease, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASEPENSIDETESTMATRIX_GETListResult>> USP_CONF_DISEASEPENSIDETESTMATRIX_GETListAsync(string LangID, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 20,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASEPENSIDETESTMATRIX_GETListResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASEPENSIDETESTMATRIX_GETList] @LangID, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASEPENSIDETESTMATRIX_SETResult>> USP_CONF_DISEASEPENSIDETESTMATRIX_SETAsync(long? idfPensideTestForDisease, long? idfsDiagnosis, long? idfsPensideTestName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPensideTestForDisease",
                    Value = idfPensideTestForDisease ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsPensideTestName",
                    Value = idfsPensideTestName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASEPENSIDETESTMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASEPENSIDETESTMATRIX_SET] @idfPensideTestForDisease, @idfsDiagnosis, @idfsPensideTestName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASESAMPLETYPEMATRIX_BY_DISEASE_GETLISTResult>> USP_CONF_DISEASESAMPLETYPEMATRIX_BY_DISEASE_GETLISTAsync(string langId, long? idfsDiagnosis, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASESAMPLETYPEMATRIX_BY_DISEASE_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASESAMPLETYPEMATRIX_BY_DISEASE_GETLIST] @langId, @idfsDiagnosis, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASESAMPLETYPEMATRIX_DELResult>> USP_CONF_DISEASESAMPLETYPEMATRIX_DELAsync(long? idfMaterialForDisease, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfMaterialForDisease",
                    Value = idfMaterialForDisease ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASESAMPLETYPEMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASESAMPLETYPEMATRIX_DEL] @idfMaterialForDisease, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASESAMPLETYPEMATRIX_GETLISTResult>> USP_CONF_DISEASESAMPLETYPEMATRIX_GETLISTAsync(string langId, long? idfsDiagnosis, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASESAMPLETYPEMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASESAMPLETYPEMATRIX_GETLIST] @langId, @idfsDiagnosis, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_DISEASESAMPLETYPEMATRIX_SETResult>> USP_CONF_DISEASESAMPLETYPEMATRIX_SETAsync(long? idfMaterialForDisease, long? idfsDiagnosis, long? idfsSampleType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfMaterialForDisease",
                    Value = idfMaterialForDisease ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSampleType",
                    Value = idfsSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_DISEASESAMPLETYPEMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_DISEASESAMPLETYPEMATRIX_SET] @idfMaterialForDisease, @idfsDiagnosis, @idfsSampleType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_GetInvestigationTypes_GETResult>> USP_CONF_GetInvestigationTypes_GETAsync(long? idfsBaseReference, long? intHACode, string strLanguageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsBaseReference",
                    Value = idfsBaseReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strLanguageID",
                    Size = 5,
                    Value = strLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_GetInvestigationTypes_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_GetInvestigationTypes_GET] @idfsBaseReference, @intHACode, @strLanguageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_GetProphylacticMeasures_GETResult>> USP_CONF_GetProphylacticMeasures_GETAsync(long? idfsBaseReference, long? intHACode, string strLanguageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsBaseReference",
                    Value = idfsBaseReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strLanguageID",
                    Size = 5,
                    Value = strLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_GetProphylacticMeasures_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_GetProphylacticMeasures_GET] @idfsBaseReference, @intHACode, @strLanguageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_GetSanitaryActions_GETResult>> USP_CONF_GetSanitaryActions_GETAsync(long? idfsBaseReference, long? intHACode, string strLanguageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsBaseReference",
                    Value = idfsBaseReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strLanguageID",
                    Size = 5,
                    Value = strLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_GetSanitaryActions_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_GetSanitaryActions_GET] @idfsBaseReference, @intHACode, @strLanguageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_GetSpeciesList_GETResult>> USP_CONF_GetSpeciesList_GETAsync(long? idfsBaseReference, long? intHACode, string strLanguageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsBaseReference",
                    Value = idfsBaseReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strLanguageID",
                    Size = 5,
                    Value = strLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_GetSpeciesList_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_GetSpeciesList_GET] @idfsBaseReference, @intHACode, @strLanguageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_GetVetDiseaseList_GETResult>> USP_CONF_GetVetDiseaseList_GETAsync(long? idfsBaseReference, long? intHACode, string strLanguageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsBaseReference",
                    Value = idfsBaseReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strLanguageID",
                    Size = 5,
                    Value = strLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_GetVetDiseaseList_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_GetVetDiseaseList_GET] @idfsBaseReference, @intHACode, @strLanguageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_HumanAggregateCaseMatrixReport_DELETEResult>> USP_CONF_HumanAggregateCaseMatrixReport_DELETEAsync(long? idfAggrHumanCaseMTX, long? idfVersion, long? idfsDiagnosis, int? intNumRow, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrHumanCaseMTX",
                    Value = idfAggrHumanCaseMTX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intNumRow",
                    Value = intNumRow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_HumanAggregateCaseMatrixReport_DELETEResult>("EXEC @returnValue = [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_DELETE] @idfAggrHumanCaseMTX, @idfVersion, @idfsDiagnosis, @intNumRow, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_HumanAggregateCaseMatrixReport_POSTResult>> USP_CONF_HumanAggregateCaseMatrixReport_POSTAsync(long? idfAggrHumanCaseMTX, long? idfVersion, long? idfsDiagnosis, int? intNumRow, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrHumanCaseMTX",
                    Value = idfAggrHumanCaseMTX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intNumRow",
                    Value = intNumRow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_HumanAggregateCaseMatrixReport_POSTResult>("EXEC @returnValue = [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_POST] @idfAggrHumanCaseMTX, @idfVersion, @idfsDiagnosis, @intNumRow", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_HumanAggregateCaseMatrixReport_SETResult>> USP_CONF_HumanAggregateCaseMatrixReport_SETAsync(long? idfAggrHumanCaseMTX, long? idfVersion, string inJsonString, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrHumanCaseMTX",
                    Value = idfAggrHumanCaseMTX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "inJsonString",
                    Size = -1,
                    Value = inJsonString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_HumanAggregateCaseMatrixReport_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET] @idfAggrHumanCaseMTX, @idfVersion, @inJsonString, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_HumanAggregateCaseMatrixReportRecord_DELETEResult>> USP_CONF_HumanAggregateCaseMatrixReportRecord_DELETEAsync(long? idfAggrHumanCaseMTX, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrHumanCaseMTX",
                    Value = idfAggrHumanCaseMTX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_HumanAggregateCaseMatrixReportRecord_DELETEResult>("EXEC @returnValue = [dbo].[USP_CONF_HumanAggregateCaseMatrixReportRecord_DELETE] @idfAggrHumanCaseMTX, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_HumanAggregateCaseMatrixVersion_DELETEResult>> USP_CONF_HumanAggregateCaseMatrixVersion_DELETEAsync(long? idfVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_HumanAggregateCaseMatrixVersion_DELETEResult>("EXEC @returnValue = [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_DELETE] @idfVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_HumanAggregateCaseMatrixVersion_GETResult>> USP_CONF_HumanAggregateCaseMatrixVersion_GETAsync(long? idfVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_HumanAggregateCaseMatrixVersion_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_GET] @idfVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_HumanAggregateCaseMatrixVersion_SETResult>> USP_CONF_HumanAggregateCaseMatrixVersion_SETAsync(long? idfVersion, long? idfsMatrixType, DateTime? datStartDate, string MatrixName, bool? blnIsActive, bool? blnIsDefault, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsMatrixType",
                    Value = idfsMatrixType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datStartDate",
                    Value = datStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MatrixName",
                    Size = 400,
                    Value = MatrixName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "blnIsActive",
                    Value = blnIsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "blnIsDefault",
                    Value = blnIsDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_HumanAggregateCaseMatrixVersion_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET] @idfVersion, @idfsMatrixType, @datStartDate, @MatrixName, @blnIsActive, @blnIsDefault, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_HumanAggregateCaseMatrixVersionByMatrixType_GETResult>> USP_CONF_HumanAggregateCaseMatrixVersionByMatrixType_GETAsync(long? idfsMatrixType, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsMatrixType",
                    Value = idfsMatrixType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_HumanAggregateCaseMatrixVersionByMatrixType_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_HumanAggregateCaseMatrixVersionByMatrixType_GET] @idfsMatrixType, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_HumanAggregateCaseMatrixVersionDiseaseList_GETResult>> USP_CONF_HumanAggregateCaseMatrixVersionDiseaseList_GETAsync(long? idfVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_HumanAggregateCaseMatrixVersionDiseaseList_GETResult>("EXEC @returnValue = [dbo].[USP_CONF_HumanAggregateCaseMatrixVersionDiseaseList_GET] @idfVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_LKUP_DISEASE_GENDER_MATRIXResult>> USP_CONF_LKUP_DISEASE_GENDER_MATRIXAsync(string LanguageID, long? DiseaseID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_LKUP_DISEASE_GENDER_MATRIXResult>("EXEC @returnValue = [dbo].[USP_CONF_LKUP_DISEASE_GENDER_MATRIX] @LanguageID, @DiseaseID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_PERSONALIDTYPEMATRIX_DELResult>> USP_CONF_PERSONALIDTYPEMATRIX_DELAsync(long? idfBaseReferenceAttribute, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfBaseReferenceAttribute",
                    Value = idfBaseReferenceAttribute ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_PERSONALIDTYPEMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_PERSONALIDTYPEMATRIX_DEL] @idfBaseReferenceAttribute, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_PERSONALIDTYPEMATRIX_GETLISTResult>> USP_CONF_PERSONALIDTYPEMATRIX_GETLISTAsync(string LangID, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_PERSONALIDTYPEMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_PERSONALIDTYPEMATRIX_GETLIST] @LangID, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_PERSONALIDTYPEMATRIX_SETResult>> USP_CONF_PERSONALIDTYPEMATRIX_SETAsync(long? idfPersonalIDType, string strFieldType, int? Length, int? intOrder, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPersonalIDType",
                    Value = idfPersonalIDType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strFieldType",
                    Size = 100,
                    Value = strFieldType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Length",
                    Value = Length ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_PERSONALIDTYPEMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_PERSONALIDTYPEMATRIX_SET] @idfPersonalIDType, @strFieldType, @Length, @intOrder, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_ProphylacticMatrixReportRecord_DELETEResult>> USP_CONF_ProphylacticMatrixReportRecord_DELETEAsync(long? idfAggrProphylacticActionMTX, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrProphylacticActionMTX",
                    Value = idfAggrProphylacticActionMTX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_ProphylacticMatrixReportRecord_DELETEResult>("EXEC @returnValue = [dbo].[USP_CONF_ProphylacticMatrixReportRecord_DELETE] @idfAggrProphylacticActionMTX, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_DELResult>> USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_DELAsync(long? idfDiagnosisToGroupForReportType, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfDiagnosisToGroupForReportType",
                    Value = idfDiagnosisToGroupForReportType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_DEL] @idfDiagnosisToGroupForReportType, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_GETLISTResult>> USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_GETLISTAsync(string langId, long? idfsCustomReportType, long? idfsReportDiagnosisGroup, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCustomReportType",
                    Value = idfsCustomReportType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsReportDiagnosisGroup",
                    Value = idfsReportDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_GETLIST] @langId, @idfsCustomReportType, @idfsReportDiagnosisGroup, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SETResult>> USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SETAsync(long? idfDiagnosisToGroupForReportType, long? idfsCustomReportType, long? idfsReportDiagnosisGroup, long? idfsDiagnosis, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfDiagnosisToGroupForReportType",
                    Value = idfDiagnosisToGroupForReportType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCustomReportType",
                    Value = idfsCustomReportType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsReportDiagnosisGroup",
                    Value = idfsReportDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SET] @idfDiagnosisToGroupForReportType, @idfsCustomReportType, @idfsReportDiagnosisGroup, @idfsDiagnosis, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DELResult>> USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DELAsync(long? idfDerivativeForSampleType, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfDerivativeForSampleType",
                    Value = idfDerivativeForSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL] @idfDerivativeForSampleType, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_GETLISTResult>> USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_GETLISTAsync(string langId, long? idfsSampleType, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSampleType",
                    Value = idfsSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_GETLIST] @langId, @idfsSampleType, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SETResult>> USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SETAsync(long? idfDerivativeForSampleType, long? idfsSampleType, long? idfsDerivativeType, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfDerivativeForSampleType",
                    Value = idfDerivativeForSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSampleType",
                    Value = idfsSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDerivativeType",
                    Value = idfsDerivativeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET] @idfDerivativeForSampleType, @idfsSampleType, @idfsDerivativeType, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_SanitaryMatrixReportRecord_DELETEResult>> USP_CONF_SanitaryMatrixReportRecord_DELETEAsync(long? idfAggrSanitaryActionMTX, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrSanitaryActionMTX",
                    Value = idfAggrSanitaryActionMTX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_SanitaryMatrixReportRecord_DELETEResult>("EXEC @returnValue = [dbo].[USP_CONF_SanitaryMatrixReportRecord_DELETE] @idfAggrSanitaryActionMTX, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_SPECIESTYPEANIMALAGEMATRIX_DELResult>> USP_CONF_SPECIESTYPEANIMALAGEMATRIX_DELAsync(long? idfSpeciesTypeToAnimalAge, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfSpeciesTypeToAnimalAge",
                    Value = idfSpeciesTypeToAnimalAge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_SPECIESTYPEANIMALAGEMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_DEL] @idfSpeciesTypeToAnimalAge, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_SPECIESTYPEANIMALAGEMATRIX_GETLISTResult>> USP_CONF_SPECIESTYPEANIMALAGEMATRIX_GETLISTAsync(string langId, long? idfsSpeciesType, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSpeciesType",
                    Value = idfsSpeciesType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_SPECIESTYPEANIMALAGEMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_GETLIST] @langId, @idfsSpeciesType, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SETResult>> USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SETAsync(long? idfSpeciesTypeToAnimalAge, long? idfsSpeciesType, long? idfsAnimalAge, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfSpeciesTypeToAnimalAge",
                    Value = idfSpeciesTypeToAnimalAge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSpeciesType",
                    Value = idfsSpeciesType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsAnimalAge",
                    Value = idfsAnimalAge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SET] @idfSpeciesTypeToAnimalAge, @idfsSpeciesType, @idfsAnimalAge, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_TESTTOTESTRESULTMATRIX_DELResult>> USP_CONF_TESTTOTESTRESULTMATRIX_DELAsync(long? idfsTestResultRelation, long? idfsTestName, long? idfsTestResult, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsTestResultRelation",
                    Value = idfsTestResultRelation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsTestName",
                    Value = idfsTestName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsTestResult",
                    Value = idfsTestResult ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_TESTTOTESTRESULTMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_DEL] @idfsTestResultRelation, @idfsTestName, @idfsTestResult, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_TESTTOTESTRESULTMATRIX_GETLISTResult>> USP_CONF_TESTTOTESTRESULTMATRIX_GETLISTAsync(string langId, long? idfsTestResultRelation, long? idfsTestName, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 20,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsTestResultRelation",
                    Value = idfsTestResultRelation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsTestName",
                    Value = idfsTestName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_TESTTOTESTRESULTMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_GETLIST] @langId, @idfsTestResultRelation, @idfsTestName, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_TESTTOTESTRESULTMATRIX_SETResult>> USP_CONF_TESTTOTESTRESULTMATRIX_SETAsync(long? idfsTestResultRelation, long? idfsTestName, long? idfsTestResult, bool? blnIndicative, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsTestResultRelation",
                    Value = idfsTestResultRelation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsTestName",
                    Value = idfsTestName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsTestResult",
                    Value = idfsTestResult ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "blnIndicative",
                    Value = blnIndicative ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_TESTTOTESTRESULTMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET] @idfsTestResultRelation, @idfsTestName, @idfsTestResult, @blnIndicative, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_UNIQUENUMBERINGSCHEMA_GETLISTResult>> USP_CONF_UNIQUENUMBERINGSCHEMA_GETLISTAsync(string LangId, string QuickSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "QuickSearch",
                    Size = 400,
                    Value = QuickSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_UNIQUENUMBERINGSCHEMA_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_GETLIST] @LangId, @QuickSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_UNIQUENUMBERINGSCHEMA_SETResult>> USP_CONF_UNIQUENUMBERINGSCHEMA_SETAsync(long? idfsNumberName, string strName, string strSuffix, string strSpecialCharacter, int? intNumberValue, string langId, int? intNextNumberValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsNumberName",
                    Value = idfsNumberName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 800,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSuffix",
                    Size = 20,
                    Value = strSuffix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSpecialCharacter",
                    Size = 20,
                    Value = strSpecialCharacter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intNumberValue",
                    Value = intNumberValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intNextNumberValue",
                    Value = intNextNumberValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_UNIQUENUMBERINGSCHEMA_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_SET] @idfsNumberName, @strName, @strSuffix, @strSpecialCharacter, @intNumberValue, @langId, @intNextNumberValue", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_USER_GRIDS_GETDETAILResult>> USP_CONF_USER_GRIDS_GETDETAILAsync(long? idfUserID, string GridID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfUserID",
                    Value = idfUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "GridID",
                    Size = 200,
                    Value = GridID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_USER_GRIDS_GETDETAILResult>("EXEC @returnValue = [dbo].[USP_CONF_USER_GRIDS_GETDETAIL] @idfUserID, @GridID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_USER_GRIDS_SETResult>> USP_CONF_USER_GRIDS_SETAsync(long? idfUserID, long? idfsSite, string ColumnDefinition, string GridID, int? intRowStatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfUserID",
                    Value = idfUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ColumnDefinition",
                    Size = -1,
                    Value = ColumnDefinition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GridID",
                    Size = 400,
                    Value = GridID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_USER_GRIDS_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_USER_GRIDS_SET] @idfUserID, @idfsSite, @ColumnDefinition, @GridID, @intRowStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_DELResult>> USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_DELAsync(long? idfCollectionMethodForVectorType, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfCollectionMethodForVectorType",
                    Value = idfCollectionMethodForVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_DEL] @idfCollectionMethodForVectorType, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_GETLISTResult>> USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_GETLISTAsync(string LangId, long? idfsVectorType, int? pageNo, int? pageSize, string sortColumn, string sortOrder, long? idfsCollectionMethod, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 20,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVectorType",
                    Value = idfsVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCollectionMethod",
                    Value = idfsCollectionMethod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_GETLIST] @LangId, @idfsVectorType, @pageNo, @pageSize, @sortColumn, @sortOrder, @idfsCollectionMethod", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SETResult>> USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SETAsync(long? idfCollectionMethodForVectorType, long? idfsVectorType, long? idfsCollectionMethod, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfCollectionMethodForVectorType",
                    Value = idfCollectionMethodForVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVectorType",
                    Value = idfsVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCollectionMethod",
                    Value = idfsCollectionMethod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SET] @idfCollectionMethodForVectorType, @idfsVectorType, @idfsCollectionMethod, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VECTORTYPEFIELDTESTMATRIX_DELResult>> USP_CONF_VECTORTYPEFIELDTESTMATRIX_DELAsync(long? idfPensideTestTypeForVectorType, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPensideTestTypeForVectorType",
                    Value = idfPensideTestTypeForVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VECTORTYPEFIELDTESTMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_DEL] @idfPensideTestTypeForVectorType, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VECTORTYPEFIELDTESTMATRIX_GETLISTResult>> USP_CONF_VECTORTYPEFIELDTESTMATRIX_GETLISTAsync(string langId, long? idfsVectorType, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 20,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVectorType",
                    Value = idfsVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VECTORTYPEFIELDTESTMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_GETLIST] @langId, @idfsVectorType, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VECTORTYPEFIELDTESTMATRIX_SETResult>> USP_CONF_VECTORTYPEFIELDTESTMATRIX_SETAsync(long? idfPensideTestTypeForVectorType, long? idfsVectorType, long? idfsPensideTestName, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPensideTestTypeForVectorType",
                    Value = idfPensideTestTypeForVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVectorType",
                    Value = idfsVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsPensideTestName",
                    Value = idfsPensideTestName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VECTORTYPEFIELDTESTMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_SET] @idfPensideTestTypeForVectorType, @idfsVectorType, @idfsPensideTestName, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VECTORTYPESAMPLETYPEMATRIX_DELResult>> USP_CONF_VECTORTYPESAMPLETYPEMATRIX_DELAsync(long? idfSampleTypeForVectorType, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfSampleTypeForVectorType",
                    Value = idfSampleTypeForVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VECTORTYPESAMPLETYPEMATRIX_DELResult>("EXEC @returnValue = [dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_DEL] @idfSampleTypeForVectorType, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VECTORTYPESAMPLETYPEMATRIX_GETLISTResult>> USP_CONF_VECTORTYPESAMPLETYPEMATRIX_GETLISTAsync(string langId, long? idfsVectorType, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 100,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVectorType",
                    Value = idfsVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VECTORTYPESAMPLETYPEMATRIX_GETLISTResult>("EXEC @returnValue = [dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_GETLIST] @langId, @idfsVectorType, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SETResult>> USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SETAsync(long? idfSampleTypeForVectorType, long? idfsVectorType, long? idfsSampleType, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfSampleTypeForVectorType",
                    Value = idfSampleTypeForVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVectorType",
                    Value = idfsVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSampleType",
                    Value = idfsSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SET] @idfSampleTypeForVectorType, @idfsVectorType, @idfsSampleType, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VETAggregateCaseMatrixReportRecord_DELETEResult>> USP_CONF_VETAggregateCaseMatrixReportRecord_DELETEAsync(long? idfAggrVetCaseMTX, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrVetCaseMTX",
                    Value = idfAggrVetCaseMTX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VETAggregateCaseMatrixReportRecord_DELETEResult>("EXEC @returnValue = [dbo].[USP_CONF_VETAggregateCaseMatrixReportRecord_DELETE] @idfAggrVetCaseMTX, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VetDiagnosisMatrixReportRecord_DELETEResult>> USP_CONF_VetDiagnosisMatrixReportRecord_DELETEAsync(long? idfAggrDiagnosticActionMTX, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrDiagnosticActionMTX",
                    Value = idfAggrDiagnosticActionMTX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VetDiagnosisMatrixReportRecord_DELETEResult>("EXEC @returnValue = [dbo].[USP_CONF_VetDiagnosisMatrixReportRecord_DELETE] @idfAggrDiagnosticActionMTX, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VeterinaryAggregateCaseMatrixReport_SETResult>> USP_CONF_VeterinaryAggregateCaseMatrixReport_SETAsync(long? idfAggrVetCaseMTX, long? idfVersion, string inJsonString, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrVetCaseMTX",
                    Value = idfAggrVetCaseMTX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "inJsonString",
                    Size = -1,
                    Value = inJsonString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VeterinaryAggregateCaseMatrixReport_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_VeterinaryAggregateCaseMatrixReport_SET] @idfAggrVetCaseMTX, @idfVersion, @inJsonString, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SETResult>> USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SETAsync(long? idfAggrDiagnosticActionMTX, long? idfVersion, string inJsonString, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrDiagnosticActionMTX",
                    Value = idfAggrDiagnosticActionMTX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "inJsonString",
                    Size = -1,
                    Value = inJsonString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET] @idfAggrDiagnosticActionMTX, @idfVersion, @inJsonString, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VeterinaryProphylacticMatrixReport_SETResult>> USP_CONF_VeterinaryProphylacticMatrixReport_SETAsync(long? idfAggrProphylacticActionMTX, long? idfVersion, string inJsonString, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrProphylacticActionMTX",
                    Value = idfAggrProphylacticActionMTX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "inJsonString",
                    Size = -1,
                    Value = inJsonString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VeterinaryProphylacticMatrixReport_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_VeterinaryProphylacticMatrixReport_SET] @idfAggrProphylacticActionMTX, @idfVersion, @inJsonString, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_CONF_VeterinarySanitaryActionMatrixReport_SETResult>> USP_CONF_VeterinarySanitaryActionMatrixReport_SETAsync(long? idfAggrSanitaryActionMTX, long? idfVersion, string inJsonString, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggrSanitaryActionMTX",
                    Value = idfAggrSanitaryActionMTX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVersion",
                    Value = idfVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "inJsonString",
                    Size = -1,
                    Value = inJsonString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_CONF_VeterinarySanitaryActionMatrixReport_SETResult>("EXEC @returnValue = [dbo].[USP_CONF_VeterinarySanitaryActionMatrixReport_SET] @idfAggrSanitaryActionMTX, @idfVersion, @inJsonString, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_DAS_APPROVALS_GETListResult>> USP_DAS_APPROVALS_GETListAsync(string LanguageID, string SiteList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteList",
                    Size = -1,
                    Value = SiteList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_DAS_APPROVALS_GETListResult>("EXEC @returnValue = [dbo].[USP_DAS_APPROVALS_GETList] @LanguageID, @SiteList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_DAS_DASHBOARD_GETListResult>> USP_DAS_DASHBOARD_GETListAsync(string LanguageID, long? PersonID, string DashboardItemType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PersonID",
                    Value = PersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DashboardItemType",
                    Size = 100,
                    Value = DashboardItemType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_DAS_DASHBOARD_GETListResult>("EXEC @returnValue = [dbo].[USP_DAS_DASHBOARD_GETList] @LanguageID, @PersonID, @DashboardItemType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_DAS_INVESTIGATIONS_GETListResult>> USP_DAS_INVESTIGATIONS_GETListAsync(string LanguageID, string SiteList, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteList",
                    Size = -1,
                    Value = SiteList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_DAS_INVESTIGATIONS_GETListResult>("EXEC @returnValue = [dbo].[USP_DAS_INVESTIGATIONS_GETList] @LanguageID, @SiteList, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_DAS_MYCOLLECTIONS_GETListResult>> USP_DAS_MYCOLLECTIONS_GETListAsync(string LanguageID, long? PersonID, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PersonID",
                    Value = PersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_DAS_MYCOLLECTIONS_GETListResult>("EXEC @returnValue = [dbo].[USP_DAS_MYCOLLECTIONS_GETList] @LanguageID, @PersonID, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_DAS_MYINVESTIGATIONS_GETListResult>> USP_DAS_MYINVESTIGATIONS_GETListAsync(string LanguageID, long? PersonID, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PersonID",
                    Value = PersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_DAS_MYINVESTIGATIONS_GETListResult>("EXEC @returnValue = [dbo].[USP_DAS_MYINVESTIGATIONS_GETList] @LanguageID, @PersonID, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_DAS_MYNOTIFICATIONS_GETListResult>> USP_DAS_MYNOTIFICATIONS_GETListAsync(string LanguageID, long? PersonID, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PersonID",
                    Value = PersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_DAS_MYNOTIFICATIONS_GETListResult>("EXEC @returnValue = [dbo].[USP_DAS_MYNOTIFICATIONS_GETList] @LanguageID, @PersonID, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_DAS_NOTIFICATIONS_GETListResult>> USP_DAS_NOTIFICATIONS_GETListAsync(string LanguageID, string SiteList, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteList",
                    Size = -1,
                    Value = SiteList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_DAS_NOTIFICATIONS_GETListResult>("EXEC @returnValue = [dbo].[USP_DAS_NOTIFICATIONS_GETList] @LanguageID, @SiteList, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_DAS_USERS_GETListResult>> USP_DAS_USERS_GETListAsync(string LanguageID, string SiteList, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteList",
                    Size = -1,
                    Value = SiteList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_DAS_USERS_GETListResult>("EXEC @returnValue = [dbo].[USP_DAS_USERS_GETList] @LanguageID, @SiteList, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_DataAudit_AuditEvents_GetListResult>> USP_DataAudit_AuditEvents_GetListAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_DataAudit_AuditEvents_GetListResult>("EXEC @returnValue = [dbo].[USP_DataAudit_AuditEvents_GetList]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_Employee_ValidateResult>> usp_Employee_ValidateAsync(long? RootId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "RootId",
                    Value = RootId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_Employee_ValidateResult>("EXEC @returnValue = [dbo].[usp_Employee_Validate] @RootId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_AuditEventSystemLog_SETResult>> USP_GBL_AuditEventSystemLog_SETAsync(string AuditPrimaryTable, string AuditDataPreXML, string AuditDataPostXML, string AuditCreateDBObjectName, string AuditUpdateDBObjectName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "AuditPrimaryTable",
                    Size = 200,
                    Value = AuditPrimaryTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditDataPreXML",
                    Value = AuditDataPreXML ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Xml,
                },
                new SqlParameter
                {
                    ParameterName = "AuditDataPostXML",
                    Value = AuditDataPostXML ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Xml,
                },
                new SqlParameter
                {
                    ParameterName = "AuditCreateDBObjectName",
                    Size = 200,
                    Value = AuditCreateDBObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUpdateDBObjectName",
                    Size = -1,
                    Value = AuditUpdateDBObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_AuditEventSystemLog_SETResult>("EXEC @returnValue = [dbo].[USP_GBL_AuditEventSystemLog_SET] @AuditPrimaryTable, @AuditDataPreXML, @AuditDataPostXML, @AuditCreateDBObjectName, @AuditUpdateDBObjectName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_BASE_REFERENCE_Advanced_GETListResult>> USP_GBL_BASE_REFERENCE_Advanced_GETListAsync(string LangID, string ReferenceTypeName, long? intHACode, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceTypeName",
                    Size = 400,
                    Value = ReferenceTypeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_BASE_REFERENCE_Advanced_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_BASE_REFERENCE_Advanced_GETList] @LangID, @ReferenceTypeName, @intHACode, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_BASE_REFERENCE_GETListResult>> USP_GBL_BASE_REFERENCE_GETListAsync(string LangID, string ReferenceTypeName, long? intHACode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceTypeName",
                    Size = 400,
                    Value = ReferenceTypeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_BASE_REFERENCE_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_BASE_REFERENCE_GETList] @LangID, @ReferenceTypeName, @intHACode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_BaseReferenceTranslation_GetResult>> USP_GBL_BaseReferenceTranslation_GetAsync(string LanguageID, long? idfsBaseReference, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 5,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsBaseReference",
                    Value = idfsBaseReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_BaseReferenceTranslation_GetResult>("EXEC @returnValue = [dbo].[USP_GBL_BaseReferenceTranslation_Get] @LanguageID, @idfsBaseReference", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_DataAuditEvent_DeleteResult>> USP_GBL_DataAuditEvent_DeleteAsync(string userName, string JSONUpdates, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "userName",
                    Size = 512,
                    Value = userName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "JSONUpdates",
                    Size = -1,
                    Value = JSONUpdates ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_DataAuditEvent_DeleteResult>("EXEC @returnValue = [dbo].[USP_GBL_DataAuditEvent_Delete] @userName, @JSONUpdates", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_DataAuditEvent_RestoreResult>> USP_GBL_DataAuditEvent_RestoreAsync(long? UserId, long? SiteId, long? idfDataAuditEvent, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfDataAuditEvent",
                    Value = idfDataAuditEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_DataAuditEvent_RestoreResult>("EXEC @returnValue = [dbo].[USP_GBL_DataAuditEvent_Restore] @UserId, @SiteId, @idfDataAuditEvent", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_DataAuditEvent_SETResult>> USP_GBL_DataAuditEvent_SETAsync(string userName, long? idfSiteId, string JSONUpdates, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "userName",
                    Size = 5152,
                    Value = userName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfSiteId",
                    Value = idfSiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "JSONUpdates",
                    Size = -1,
                    Value = JSONUpdates ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_DataAuditEvent_SETResult>("EXEC @returnValue = [dbo].[USP_GBL_DataAuditEvent_SET] @userName, @idfSiteId, @JSONUpdates", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_DataAuditEvent_UpdateResult>> USP_GBL_DataAuditEvent_UpdateAsync(long? idfUserID, string JSONUpdates, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfUserID",
                    Value = idfUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "JSONUpdates",
                    Size = -1,
                    Value = JSONUpdates ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_DataAuditEvent_UpdateResult>("EXEC @returnValue = [dbo].[USP_GBL_DataAuditEvent_Update] @idfUserID, @JSONUpdates", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_Department_GetListResult>> USP_GBL_Department_GetListAsync(string LanguageID, long? OrganizationID, long? DepartmentID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentID",
                    Value = DepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_Department_GetListResult>("EXEC @returnValue = [dbo].[USP_GBL_Department_GetList] @LanguageID, @OrganizationID, @DepartmentID, @PageNumber, @PageSize, @SortColumn, @SortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_DISEASE_MTX_GETResult>> USP_GBL_DISEASE_MTX_GETAsync(long? idfsBaseReference, long? intHACode, string strLanguageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsBaseReference",
                    Value = idfsBaseReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strLanguageID",
                    Size = 5,
                    Value = strLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_DISEASE_MTX_GETResult>("EXEC @returnValue = [dbo].[USP_GBL_DISEASE_MTX_GET] @idfsBaseReference, @intHACode, @strLanguageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_DISEASE_MTX_GET_BY_UsingTypeResult>> USP_GBL_DISEASE_MTX_GET_BY_UsingTypeAsync(long? UsingType, long? intHACode, string strLanguageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "UsingType",
                    Value = UsingType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strLanguageID",
                    Size = 5,
                    Value = strLanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_DISEASE_MTX_GET_BY_UsingTypeResult>("EXEC @returnValue = [dbo].[USP_GBL_DISEASE_MTX_GET_BY_UsingType] @UsingType, @intHACode, @strLanguageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_EMPLOYEE_GROUP_GETListResult>> USP_GBL_EMPLOYEE_GROUP_GETListAsync(string LangID, long? idfsSite, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_EMPLOYEE_GROUP_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_EMPLOYEE_GROUP_GETList] @LangID, @idfsSite", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_EMPLOYEEGROUPSFOREMPLOYEE_GETLISTResult>> USP_GBL_EMPLOYEEGROUPSFOREMPLOYEE_GETLISTAsync(long? idfPerson, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPerson",
                    Value = idfPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_EMPLOYEEGROUPSFOREMPLOYEE_GETLISTResult>("EXEC @returnValue = [dbo].[USP_GBL_EMPLOYEEGROUPSFOREMPLOYEE_GETLIST] @idfPerson, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_EMPLOYEESITE_GETDETAILResult>> USP_GBL_EMPLOYEESITE_GETDETAILAsync(long? idfPerson, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPerson",
                    Value = idfPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_EMPLOYEESITE_GETDETAILResult>("EXEC @returnValue = [dbo].[USP_GBL_EMPLOYEESITE_GETDETAIL] @idfPerson, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_GIS_Location_ChildLevel_GetResult>> USP_GBL_GIS_Location_ChildLevel_GetAsync(string LangID, string Parent_idfsReference, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 20,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Parent_idfsReference",
                    Size = -1,
                    Value = Parent_idfsReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_GIS_Location_ChildLevel_GetResult>("EXEC @returnValue = [dbo].[USP_GBL_GIS_Location_ChildLevel_Get] @LangID, @Parent_idfsReference", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_GIS_Location_CurrentLevel_GetResult>> USP_GBL_GIS_Location_CurrentLevel_GetAsync(string LangID, int? CurrentLevel, bool? AllCountries, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 20,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentLevel",
                    Value = CurrentLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AllCountries",
                    Value = AllCountries ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_GIS_Location_CurrentLevel_GetResult>("EXEC @returnValue = [dbo].[USP_GBL_GIS_Location_CurrentLevel_Get] @LangID, @CurrentLevel, @AllCountries", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_GIS_Location_Levels_GetResult>> USP_GBL_GIS_Location_Levels_GetAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 20,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_GIS_Location_Levels_GetResult>("EXEC @returnValue = [dbo].[USP_GBL_GIS_Location_Levels_Get] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_GIS_LocationAncestry_GETListResult>> USP_GBL_GIS_LocationAncestry_GETListAsync(string languageId, long? locationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "languageId",
                    Size = 20,
                    Value = languageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "locationId",
                    Value = locationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_GIS_LocationAncestry_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_GIS_LocationAncestry_GETList] @languageId, @locationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_Languages_GETListResult>> USP_GBL_Languages_GETListAsync(string LanguageID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_Languages_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_Languages_GETList] @LanguageID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_LKUP_DISEASE_GETListResult>> USP_GBL_LKUP_DISEASE_GETListAsync(string LanguageID, int? AccessoryCode, long? UsingType, string AdvancedSearchTerm, long? UserEmployeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessoryCode",
                    Value = AccessoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UsingType",
                    Value = UsingType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AdvancedSearchTerm",
                    Size = 400,
                    Value = AdvancedSearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_LKUP_DISEASE_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_LKUP_DISEASE_GETList] @LanguageID, @AccessoryCode, @UsingType, @AdvancedSearchTerm, @UserEmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_LKUP_DISEASE_GETList_PagedResult>> USP_GBL_LKUP_DISEASE_GETList_PagedAsync(string LanguageID, long? intHACode, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_LKUP_DISEASE_GETList_PagedResult>("EXEC @returnValue = [dbo].[USP_GBL_LKUP_DISEASE_GETList_Paged] @LanguageID, @intHACode, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_LKUP_ORG_GETListResult>> USP_GBL_LKUP_ORG_GETListAsync(string LangID, int? SiteFlag, int? AccessoryCode, long? OrganizationTypeID, string AdvancedSearch, int? RowStatus, long? LocationID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteFlag",
                    Value = SiteFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AccessoryCode",
                    Value = AccessoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationTypeID",
                    Value = OrganizationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AdvancedSearch",
                    Size = 400,
                    Value = AdvancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LocationID",
                    Value = LocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_LKUP_ORG_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_LKUP_ORG_GETList] @LangID, @SiteFlag, @AccessoryCode, @OrganizationTypeID, @AdvancedSearch, @RowStatus, @LocationID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_LKUP_PERSON_GETListResult>> USP_GBL_LKUP_PERSON_GETListAsync(string LangID, long? OfficeID, long? ID, bool? ShowUsersOnly, int? intHACode, string AdvancedSearch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OfficeID",
                    Value = OfficeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID",
                    Value = ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ShowUsersOnly",
                    Value = ShowUsersOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AdvancedSearch",
                    Size = 400,
                    Value = AdvancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_LKUP_PERSON_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_LKUP_PERSON_GETList] @LangID, @OfficeID, @ID, @ShowUsersOnly, @intHACode, @AdvancedSearch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST_PagedResult>> USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST_PagedAsync(string referenceTypeIds, string languageId, int? intHACode, int? PaginationSet, int? PageSize, int? MaxPagesPerFetch, string Term, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "referenceTypeIds",
                    Size = -1,
                    Value = referenceTypeIds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "languageId",
                    Size = 100,
                    Value = languageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PaginationSet",
                    Value = PaginationSet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MaxPagesPerFetch",
                    Value = MaxPagesPerFetch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Term",
                    Size = -1,
                    Value = Term ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST_PagedResult>("EXEC @returnValue = [dbo].[USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST_Paged] @referenceTypeIds, @languageId, @intHACode, @PaginationSet, @PageSize, @MaxPagesPerFetch, @Term", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLISTResult>> USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLISTAsync(string LangId, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLISTResult>("EXEC @returnValue = [dbo].[USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLIST] @LangId, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_LKUP_REFERENCETYPE_GETLISTResult>> USP_GBL_LKUP_REFERENCETYPE_GETLISTAsync(string LangId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_LKUP_REFERENCETYPE_GETLISTResult>("EXEC @returnValue = [dbo].[USP_GBL_LKUP_REFERENCETYPE_GETLIST] @LangId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_LKUP_SAMPLESFORDISEASESResult>> USP_GBL_LKUP_SAMPLESFORDISEASESAsync(string LangId, long? idfsDiagnosis, int? AccessoryCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AccessoryCode",
                    Value = AccessoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_LKUP_SAMPLESFORDISEASESResult>("EXEC @returnValue = [dbo].[USP_GBL_LKUP_SAMPLESFORDISEASES] @LangId, @idfsDiagnosis, @AccessoryCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_LKUP_SITE_FROM_ORGResult>> USP_GBL_LKUP_SITE_FROM_ORGAsync(long? idfOffice, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfOffice",
                    Value = idfOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_LKUP_SITE_FROM_ORGResult>("EXEC @returnValue = [dbo].[USP_GBL_LKUP_SITE_FROM_ORG] @idfOffice", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_LogSecurityEvent_SETResult>> USP_GBL_LogSecurityEvent_SETAsync(long? idfUserID, long? idfsAction, bool? success, string strErrorText, string strDescription, long? idfObjectID, long? idfsProcessType, long? idfSiteId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfUserID",
                    Value = idfUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsAction",
                    Value = idfsAction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "success",
                    Value = success ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "strErrorText",
                    Size = 400,
                    Value = strErrorText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strDescription",
                    Size = 400,
                    Value = strDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfObjectID",
                    Value = idfObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsProcessType",
                    Value = idfsProcessType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfSiteId",
                    Value = idfSiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_LogSecurityEvent_SETResult>("EXEC @returnValue = [dbo].[USP_GBL_LogSecurityEvent_SET] @idfUserID, @idfsAction, @success, @strErrorText, @strDescription, @idfObjectID, @idfsProcessType, @idfSiteId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_MENU_ByUser_GETListResult>> USP_GBL_MENU_ByUser_GETListAsync(long? idfUserId, string LangID, long? EmployeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfUserId",
                    Value = idfUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Value = EmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_MENU_ByUser_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_MENU_ByUser_GETList] @idfUserId, @LangID, @EmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_MENU_GETListResult>> USP_GBL_MENU_GETListAsync(long? idfUserId, string LangID, long? EmployeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfUserId",
                    Value = idfUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Value = EmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_MENU_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_MENU_GETList] @idfUserId, @LangID, @EmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_OBSERVATION_SETResult>> USP_GBL_OBSERVATION_SETAsync(long? idfObservation, long? idfsFormTemplate, int? intRowStatus, string strMaintenanceFlag, long? idfsSite, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfObservation",
                    Value = idfObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "strMaintenanceFlag",
                    Size = 40,
                    Value = strMaintenanceFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_OBSERVATION_SETResult>("EXEC @returnValue = [dbo].[USP_GBL_OBSERVATION_SET] @idfObservation, @idfsFormTemplate, @intRowStatus, @strMaintenanceFlag, @idfsSite", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_PERSON_GETDetailResult>> USP_GBL_PERSON_GETDetailAsync(long? idfPerson, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPerson",
                    Value = idfPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_PERSON_GETDetailResult>("EXEC @returnValue = [dbo].[USP_GBL_PERSON_GETDetail] @idfPerson, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_POSTAL_CODE_GETLISTResult>> USP_GBL_POSTAL_CODE_GETLISTAsync(long? idfsLocation, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsLocation",
                    Value = idfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_POSTAL_CODE_GETLISTResult>("EXEC @returnValue = [dbo].[USP_GBL_POSTAL_CODE_GETLIST] @idfsLocation", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_POSTALCODE_SETResult>> USP_GBL_POSTALCODE_SETAsync(string strPostCode, long? idfsLocation, long? idfPostalCode, string user, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strPostCode",
                    Size = 400,
                    Value = strPostCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocation",
                    Value = idfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfPostalCode",
                    Value = idfPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 200,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_POSTALCODE_SETResult>("EXEC @returnValue = [dbo].[USP_GBL_POSTALCODE_SET] @strPostCode, @idfsLocation, @idfPostalCode, @user", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_ReportForm_DELETEResult>> USP_GBL_ReportForm_DELETEAsync(long? ID, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "ID",
                    Value = ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 400,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_ReportForm_DELETEResult>("EXEC @returnValue = [dbo].[USP_GBL_ReportForm_DELETE] @ID, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_ReportForm_GETDETAILResult>> USP_GBL_ReportForm_GETDETAILAsync(string LangID, long? idfsReportFormType, long? idfReportForm, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsReportFormType",
                    Value = idfsReportFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfReportForm",
                    Value = idfReportForm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_ReportForm_GETDETAILResult>("EXEC @returnValue = [dbo].[USP_GBL_ReportForm_GETDETAIL] @LangID, @idfsReportFormType, @idfReportForm", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_ReportForm_GetListResult>> USP_GBL_ReportForm_GetListAsync(string LanguageID, int? pageNo, int? PageSize, string SortColumn, string SortOrder, long? SiteID, long? ReportFormTypeID, string EIDSSReportID, long? AdministrativeUnitTypeID, long? TimeIntervalTypeID, DateTime? StartDate, DateTime? EndDate, long? AdministrativeLevelID, long? OrganizationID, string SiteList, bool? SelectAllIndicator, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportFormTypeID",
                    Value = ReportFormTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSReportID",
                    Size = 800,
                    Value = EIDSSReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeUnitTypeID",
                    Value = AdministrativeUnitTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TimeIntervalTypeID",
                    Value = TimeIntervalTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelID",
                    Value = AdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteList",
                    Size = -1,
                    Value = SiteList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SelectAllIndicator",
                    Value = SelectAllIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_ReportForm_GetListResult>("EXEC @returnValue = [dbo].[USP_GBL_ReportForm_GetList] @LanguageID, @pageNo, @PageSize, @SortColumn, @SortOrder, @SiteID, @ReportFormTypeID, @EIDSSReportID, @AdministrativeUnitTypeID, @TimeIntervalTypeID, @StartDate, @EndDate, @AdministrativeLevelID, @OrganizationID, @SiteList, @SelectAllIndicator, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplySiteFiltrationIndicator", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_ReportForm_SETResult>> USP_GBL_ReportForm_SETAsync(long? idfReportForm, string strReportFormID, long? idfsReportFormType, long? GeographicalAdministrativeUnitID, long? idfSentByOffice, long? idfSentByPerson, long? idfEnteredByOffice, long? idfEnteredByPerson, DateTime? datSentByDate, DateTime? datEnteredByDate, DateTime? datStartDate, DateTime? datFinishDate, long? idfDiagnosis, int? total, long? SiteID, long? UserID, int? notified, string comments, DateTime? datModificationForArchiveDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfReportForm",
                    Value = idfReportForm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strReportFormID",
                    Size = 400,
                    Value = strReportFormID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsReportFormType",
                    Value = idfsReportFormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "GeographicalAdministrativeUnitID",
                    Value = GeographicalAdministrativeUnitID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfSentByOffice",
                    Value = idfSentByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfSentByPerson",
                    Value = idfSentByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfEnteredByOffice",
                    Value = idfEnteredByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfEnteredByPerson",
                    Value = idfEnteredByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datSentByDate",
                    Value = datSentByDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datEnteredByDate",
                    Value = datEnteredByDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datStartDate",
                    Value = datStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datFinishDate",
                    Value = datFinishDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfDiagnosis",
                    Value = idfDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "total",
                    Value = total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "notified",
                    Value = notified ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comments",
                    Size = 500,
                    Value = comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "datModificationForArchiveDate",
                    Value = datModificationForArchiveDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_ReportForm_SETResult>("EXEC @returnValue = [dbo].[USP_GBL_ReportForm_SET] @idfReportForm, @strReportFormID, @idfsReportFormType, @GeographicalAdministrativeUnitID, @idfSentByOffice, @idfSentByPerson, @idfEnteredByOffice, @idfEnteredByPerson, @datSentByDate, @datEnteredByDate, @datStartDate, @datFinishDate, @idfDiagnosis, @total, @SiteID, @UserID, @notified, @comments, @datModificationForArchiveDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_ReportFormSummary_GetListResult>> USP_GBL_ReportFormSummary_GetListAsync(string LanguageID, long? ReportFormTypeID, long? AdministrativeUnitTypeID, long? TimeIntervalTypeID, DateTime? StartDate, DateTime? EndDate, long? AdministrativeUnitID, long? OrganizationID, string SiteList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportFormTypeID",
                    Value = ReportFormTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeUnitTypeID",
                    Value = AdministrativeUnitTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TimeIntervalTypeID",
                    Value = TimeIntervalTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeUnitID",
                    Value = AdministrativeUnitID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteList",
                    Size = -1,
                    Value = SiteList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_ReportFormSummary_GetListResult>("EXEC @returnValue = [dbo].[USP_GBL_ReportFormSummary_GetList] @LanguageID, @ReportFormTypeID, @AdministrativeUnitTypeID, @TimeIntervalTypeID, @StartDate, @EndDate, @AdministrativeUnitID, @OrganizationID, @SiteList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_Resource_GETListResult>> USP_GBL_Resource_GETListAsync(string CultureName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "CultureName",
                    Size = 100,
                    Value = CultureName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_Resource_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_Resource_GETList] @CultureName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_SAMPLE_IMPORT_GETListResult>> USP_GBL_SAMPLE_IMPORT_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, string EIDSSLocalOrFieldSampleID, long? FarmMasterID, string SpeciesTypeIDList, long? DiseaseID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLocalOrFieldSampleID",
                    Size = 400,
                    Value = EIDSSLocalOrFieldSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmMasterID",
                    Value = FarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SpeciesTypeIDList",
                    Size = -1,
                    Value = SpeciesTypeIDList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_SAMPLE_IMPORT_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_SAMPLE_IMPORT_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @EIDSSLocalOrFieldSampleID, @FarmMasterID, @SpeciesTypeIDList, @DiseaseID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_SecurityEventLog_GetListResult>> USP_GBL_SecurityEventLog_GetListAsync(string LangID, DateTime? ActionStartDate, DateTime? ActionEndDate, long? Action, long? ProcessType, long? ResultType, long? ObjectId, long? UserId, string ErrorText, string ProcessId, string Description, string SortColumn, string SortOrder, int? Page, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ActionStartDate",
                    Value = ActionStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ActionEndDate",
                    Value = ActionEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Action",
                    Value = Action ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessType",
                    Value = ProcessType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ResultType",
                    Value = ResultType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectId",
                    Value = ObjectId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ErrorText",
                    Size = 510,
                    Value = ErrorText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessId",
                    Size = 510,
                    Value = ProcessId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 510,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Page",
                    Value = Page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_SecurityEventLog_GetListResult>("EXEC @returnValue = [dbo].[USP_GBL_SecurityEventLog_GetList] @LangID, @ActionStartDate, @ActionEndDate, @Action, @ProcessType, @ResultType, @ObjectId, @UserId, @ErrorText, @ProcessId, @Description, @SortColumn, @SortOrder, @Page, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_Site_GETListResult>> USP_GBL_Site_GETListAsync(string languageId, long? UserId, bool? ApplySiteFiltrationIndicator, string SortColumn, string SortOrder, int? Page, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "languageId",
                    Size = 100,
                    Value = languageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Page",
                    Value = Page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_Site_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_Site_GETList] @languageId, @UserId, @ApplySiteFiltrationIndicator, @SortColumn, @SortOrder, @Page, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_SITE_GROUP_DELResult>> USP_GBL_SITE_GROUP_DELAsync(string LanguageID, long? SiteGroupID, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteGroupID",
                    Value = SiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 400,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_SITE_GROUP_DELResult>("EXEC @returnValue = [dbo].[USP_GBL_SITE_GROUP_DEL] @LanguageID, @SiteGroupID, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_SITE_GROUP_GETDetailResult>> USP_GBL_SITE_GROUP_GETDetailAsync(string LanguageID, long? SiteGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteGroupID",
                    Value = SiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_SITE_GROUP_GETDetailResult>("EXEC @returnValue = [dbo].[USP_GBL_SITE_GROUP_GETDetail] @LanguageID, @SiteGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_SITE_GROUP_GETListResult>> USP_GBL_SITE_GROUP_GETListAsync(string LanguageID, long? SiteGroupTypeID, string SiteGroupName, long? AdministrativeLevelID, long? CentralSiteID, long? SiteID, string EIDSSSiteID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteGroupTypeID",
                    Value = SiteGroupTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteGroupName",
                    Size = 80,
                    Value = SiteGroupName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelID",
                    Value = AdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CentralSiteID",
                    Value = CentralSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSSiteID",
                    Size = 72,
                    Value = EIDSSSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_SITE_GROUP_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_SITE_GROUP_GETList] @LanguageID, @SiteGroupTypeID, @SiteGroupName, @AdministrativeLevelID, @CentralSiteID, @SiteID, @EIDSSSiteID, @PageNumber, @PageSize, @SortColumn, @SortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_SITE_GROUP_SETResult>> USP_GBL_SITE_GROUP_SETAsync(string LanguageID, long? SiteGroupID, long? LocationID, string SiteGroupName, long? SiteGroupTypeID, long? CentralSiteID, string SiteGroupDescription, int? RowStatus, string AuditUserName, string Sites, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteGroupID",
                    Value = SiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationID",
                    Value = LocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteGroupName",
                    Size = 80,
                    Value = SiteGroupName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteGroupTypeID",
                    Value = SiteGroupTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CentralSiteID",
                    Value = CentralSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteGroupDescription",
                    Size = 200,
                    Value = SiteGroupDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Sites",
                    Size = -1,
                    Value = Sites ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_SITE_GROUP_SETResult>("EXEC @returnValue = [dbo].[USP_GBL_SITE_GROUP_SET] @LanguageID, @SiteGroupID, @LocationID, @SiteGroupName, @SiteGroupTypeID, @CentralSiteID, @SiteGroupDescription, @RowStatus, @AuditUserName, @Sites", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_STREET_GETListResult>> USP_GBL_STREET_GETListAsync(long? idfsLocation, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsLocation",
                    Value = idfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_STREET_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_STREET_GETList] @idfsLocation", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_STREET_SETResult>> USP_GBL_STREET_SETAsync(string strStreetName, long? idfsLocation, long? idfStreet, string user, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strStreetName",
                    Size = 400,
                    Value = strStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocation",
                    Value = idfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfStreet",
                    Value = idfStreet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 200,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_STREET_SETResult>("EXEC @returnValue = [dbo].[USP_GBL_STREET_SET] @strStreetName, @idfsLocation, @idfStreet, @user", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_TEST_DISEASE_GETListResult>> USP_GBL_TEST_DISEASE_GETListAsync(string LanguageID, string DiseaseIDList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseIDList",
                    Size = -1,
                    Value = DiseaseIDList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_TEST_DISEASE_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_TEST_DISEASE_GETList] @LanguageID, @DiseaseIDList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_TEST_INTERPRETATION_GETListResult>> USP_GBL_TEST_INTERPRETATION_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? DiseaseReportID, long? MonitoringSessionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReportID",
                    Value = DiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_TEST_INTERPRETATION_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_TEST_INTERPRETATION_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @DiseaseReportID, @MonitoringSessionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_USER_GETListResult>> USP_GBL_USER_GETListAsync(string languageId, long? siteId, bool? ApplySiteFiltrationIndicator, string SortColumn, string SortOrder, int? Page, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "languageId",
                    Size = 100,
                    Value = languageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "siteId",
                    Value = siteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Page",
                    Value = Page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_USER_GETListResult>("EXEC @returnValue = [dbo].[USP_GBL_USER_GETList] @languageId, @siteId, @ApplySiteFiltrationIndicator, @SortColumn, @SortOrder, @Page, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_USER_PREFERENCE_GETDetailResult>> USP_GBL_USER_PREFERENCE_GETDetailAsync(long? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_USER_PREFERENCE_GETDetailResult>("EXEC @returnValue = [dbo].[USP_GBL_USER_PREFERENCE_GETDetail] @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_GBL_USER_PREFERENCE_SETResult>> USP_GBL_USER_PREFERENCE_SETAsync(long? UserPreferenceID, long? UserID, long? ModuleConstantID, string PreferenceDetail, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "UserPreferenceID",
                    Value = UserPreferenceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ModuleConstantID",
                    Value = ModuleConstantID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PreferenceDetail",
                    Value = PreferenceDetail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Xml,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_GBL_USER_PREFERENCE_SETResult>("EXEC @returnValue = [dbo].[USP_GBL_USER_PREFERENCE_SET] @UserPreferenceID, @UserID, @ModuleConstantID, @PreferenceDetail, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HACode_GetCheckListResult>> USP_HACode_GetCheckListAsync(string LangID, int? intHACodeMask, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intHACodeMask",
                    Value = intHACodeMask ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HACode_GetCheckListResult>("EXEC @returnValue = [dbo].[USP_HACode_GetCheckList] @LangID, @intHACodeMask", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_CAMPAIGN_DELResult>> USP_HAS_CAMPAIGN_DELAsync(string LanguageID, long? CampaignID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_CAMPAIGN_DELResult>("EXEC @returnValue = [dbo].[USP_HAS_CAMPAIGN_DEL] @LanguageID, @CampaignID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_CAMPAIGN_GETDetailResult>> USP_HAS_CAMPAIGN_GETDetailAsync(string LanguageID, long? CampaignID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_CAMPAIGN_GETDetailResult>("EXEC @returnValue = [dbo].[USP_HAS_CAMPAIGN_GETDetail] @LanguageID, @CampaignID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_CAMPAIGN_GETListResult>> USP_HAS_CAMPAIGN_GETListAsync(string LanguageID, string CampaignID, string CampaignName, long? CampaignTypeID, long? CampaignStatusTypeID, DateTime? StartDateFrom, DateTime? StartDateTo, long? DiseaseID, long? AdministrativeLevelID, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, string SortColumn, string SortOrder, int? Page, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Size = 400,
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignName",
                    Size = 400,
                    Value = CampaignName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignTypeID",
                    Value = CampaignTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignStatusTypeID",
                    Value = CampaignStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StartDateFrom",
                    Value = StartDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "StartDateTo",
                    Value = StartDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelID",
                    Value = AdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Page",
                    Value = Page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_CAMPAIGN_GETListResult>("EXEC @returnValue = [dbo].[USP_HAS_CAMPAIGN_GETList] @LanguageID, @CampaignID, @CampaignName, @CampaignTypeID, @CampaignStatusTypeID, @StartDateFrom, @StartDateTo, @DiseaseID, @AdministrativeLevelID, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplySiteFiltrationIndicator, @SortColumn, @SortOrder, @Page, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_CAMPAIGN_SETResult>> USP_HAS_CAMPAIGN_SETAsync(string LanguageID, long? idfCampaign, long? CampaignTypeID, long? CampaignStatusTypeID, DateTime? CampaignDateStart, DateTime? CampaignDateEnd, string strCampaignID, string CampaignName, string CampaignAdministrator, string Conclusion, long? SiteID, long? CampaignCategoryTypeID, string AuditUserName, string CampaignToDiagnosisCombo, string MonitoringSessions, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfCampaign",
                    Value = idfCampaign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignTypeID",
                    Value = CampaignTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignStatusTypeID",
                    Value = CampaignStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignDateStart",
                    Value = CampaignDateStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignDateEnd",
                    Value = CampaignDateEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCampaignID",
                    Size = 100,
                    Value = strCampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignName",
                    Size = 400,
                    Value = CampaignName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignAdministrator",
                    Size = 400,
                    Value = CampaignAdministrator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Conclusion",
                    Size = -1,
                    Value = Conclusion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignCategoryTypeID",
                    Value = CampaignCategoryTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignToDiagnosisCombo",
                    Size = -1,
                    Value = CampaignToDiagnosisCombo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessions",
                    Size = -1,
                    Value = MonitoringSessions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_CAMPAIGN_SETResult>("EXEC @returnValue = [dbo].[USP_HAS_CAMPAIGN_SET] @LanguageID, @idfCampaign, @CampaignTypeID, @CampaignStatusTypeID, @CampaignDateStart, @CampaignDateEnd, @strCampaignID, @CampaignName, @CampaignAdministrator, @Conclusion, @SiteID, @CampaignCategoryTypeID, @AuditUserName, @CampaignToDiagnosisCombo, @MonitoringSessions", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_CAMPAIGN_TO_SAMPLE_TYPE_GETListResult>> USP_HAS_CAMPAIGN_TO_SAMPLE_TYPE_GETListAsync(string LanguageID, long? CampaignID, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_CAMPAIGN_TO_SAMPLE_TYPE_GETListResult>("EXEC @returnValue = [dbo].[USP_HAS_CAMPAIGN_TO_SAMPLE_TYPE_GETList] @LanguageID, @CampaignID, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_DetailedInformation_GetListResult>> USP_HAS_DetailedInformation_GetListAsync(string LanguageId, long? idfMonitoringSession, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageId",
                    Size = 100,
                    Value = LanguageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfMonitoringSession",
                    Value = idfMonitoringSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_DetailedInformation_GetListResult>("EXEC @returnValue = [dbo].[USP_HAS_DetailedInformation_GetList] @LanguageId, @idfMonitoringSession, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_DISEASE_REPORT_GETListResult>> USP_HAS_DISEASE_REPORT_GETListAsync(string LanguageID, long? SessionKey, bool? ApplySiteFiltrationIndicator, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, string SortColumn, string SortOrder, int? Page, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionKey",
                    Value = SessionKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Page",
                    Value = Page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_DISEASE_REPORT_GETListResult>("EXEC @returnValue = [dbo].[USP_HAS_DISEASE_REPORT_GETList] @LanguageID, @SessionKey, @ApplySiteFiltrationIndicator, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @SortColumn, @SortOrder, @Page, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_MONITORING_SESSION_ACTION_GETListResult>> USP_HAS_MONITORING_SESSION_ACTION_GETListAsync(string LanguageID, long? MonitoringSessionID, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_MONITORING_SESSION_ACTION_GETListResult>("EXEC @returnValue = [dbo].[USP_HAS_MONITORING_SESSION_ACTION_GETList] @LanguageID, @MonitoringSessionID, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_MONITORING_SESSION_DELResult>> USP_HAS_MONITORING_SESSION_DELAsync(long? MonitoringSessionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_MONITORING_SESSION_DELResult>("EXEC @returnValue = [dbo].[USP_HAS_MONITORING_SESSION_DEL] @MonitoringSessionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_MONITORING_SESSION_GETDetailResult>> USP_HAS_MONITORING_SESSION_GETDetailAsync(string LanguageID, long? MonitoringSessionID, bool? ApplyFiltrationIndicator, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplyFiltrationIndicator",
                    Value = ApplyFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_MONITORING_SESSION_GETDetailResult>("EXEC @returnValue = [dbo].[USP_HAS_MONITORING_SESSION_GETDetail] @LanguageID, @MonitoringSessionID, @ApplyFiltrationIndicator, @UserSiteID, @UserOrganizationID, @UserEmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_MONITORING_SESSION_GETListResult>> USP_HAS_MONITORING_SESSION_GETListAsync(string LanguageID, string SessionID, string LegacySessionID, string CampaignID, long? CampaignKey, long? SessionStatusTypeID, DateTime? DateEnteredFrom, DateTime? DateEnteredTo, long? AdministrativeLevelID, long? DiseaseID, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, string SortColumn, string SortOrder, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Size = 400,
                    Value = SessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LegacySessionID",
                    Size = 100,
                    Value = LegacySessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Size = 400,
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignKey",
                    Value = CampaignKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SessionStatusTypeID",
                    Value = SessionStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateEnteredFrom",
                    Value = DateEnteredFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateEnteredTo",
                    Value = DateEnteredTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelID",
                    Value = AdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_MONITORING_SESSION_GETListResult>("EXEC @returnValue = [dbo].[USP_HAS_MONITORING_SESSION_GETList] @LanguageID, @SessionID, @LegacySessionID, @CampaignID, @CampaignKey, @SessionStatusTypeID, @DateEnteredFrom, @DateEnteredTo, @AdministrativeLevelID, @DiseaseID, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplySiteFiltrationIndicator, @SortColumn, @SortOrder, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_MONITORING_SESSION_SETResult>> USP_HAS_MONITORING_SESSION_SETAsync(string LanguageID, long? MonitoringSessionID, long? MonitoringSessionStatusTypeID, long? idfsLocation, long? EnteredByPersonID, long? CampaignID, long? SiteID, string EIDSSSessionID, DateTime? StartDate, DateTime? EndDate, long? SessionCategoryTypeID, int? RowStatus, long? CreateDiseaseReportHumanID, string AuditUserName, string DiseaseCombinations, string SampleTypeCombinations, string Samples, string SamplesToDiseases, string Tests, string Actions, string Events, long? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionStatusTypeID",
                    Value = MonitoringSessionStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocation",
                    Value = idfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EnteredByPersonID",
                    Value = EnteredByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSSessionID",
                    Size = 100,
                    Value = EIDSSSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SessionCategoryTypeID",
                    Value = SessionCategoryTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreateDiseaseReportHumanID",
                    Value = CreateDiseaseReportHumanID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseCombinations",
                    Size = -1,
                    Value = DiseaseCombinations ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleTypeCombinations",
                    Size = -1,
                    Value = SampleTypeCombinations ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Samples",
                    Size = -1,
                    Value = Samples ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SamplesToDiseases",
                    Size = -1,
                    Value = SamplesToDiseases ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Tests",
                    Size = -1,
                    Value = Tests ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Actions",
                    Size = -1,
                    Value = Actions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_MONITORING_SESSION_SETResult>("EXEC @returnValue = [dbo].[USP_HAS_MONITORING_SESSION_SET] @LanguageID, @MonitoringSessionID, @MonitoringSessionStatusTypeID, @idfsLocation, @EnteredByPersonID, @CampaignID, @SiteID, @EIDSSSessionID, @StartDate, @EndDate, @SessionCategoryTypeID, @RowStatus, @CreateDiseaseReportHumanID, @AuditUserName, @DiseaseCombinations, @SampleTypeCombinations, @Samples, @SamplesToDiseases, @Tests, @Actions, @Events, @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_MONITORING_SESSION_TO_DISEASE_GETListResult>> USP_HAS_MONITORING_SESSION_TO_DISEASE_GETListAsync(string LanguageID, long? MonitoringSessionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_MONITORING_SESSION_TO_DISEASE_GETListResult>("EXEC @returnValue = [dbo].[USP_HAS_MONITORING_SESSION_TO_DISEASE_GETList] @LanguageID, @MonitoringSessionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_GETListResult>> USP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_GETListAsync(string LanguageID, long? MonitoringSessionID, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_GETListResult>("EXEC @returnValue = [dbo].[USP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_GETList] @LanguageID, @MonitoringSessionID, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HAS_Tests_GetListResult>> USP_HAS_Tests_GetListAsync(string LanguageId, long? idfMonitoringSession, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageId",
                    Size = 100,
                    Value = LanguageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfMonitoringSession",
                    Value = idfMonitoringSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HAS_Tests_GetListResult>("EXEC @returnValue = [dbo].[USP_HAS_Tests_GetList] @LanguageId, @idfMonitoringSession, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_DISEASE_AdvanceSearch_REPORT_GETListResult>> USP_HUM_DISEASE_AdvanceSearch_REPORT_GETListAsync(string LanguageID, long? HumanDiseaseReportID, string LegacyID, long? PatientID, string EIDSSPersonID, long? DiseaseID, long? ReportStatusTypeID, long? RegionID, long? RayonID, DateTime? DateEnteredFrom, DateTime? DateEnteredTo, long? ClassificationTypeID, long? HospitalizationStatusTypeID, string EIDSSReportID, string PatientFirstOrGivenName, string PatientMiddleName, string PatientLastOrSurname, string SentByFacility, string ReceivedByFacility, DateTime? DiagnosisDateFrom, DateTime? DiagnosisDateTo, string LocalSampleID, long? DataEntrySite, DateTime? DateOfSymptomsOnset, DateTime? NotificationDate, DateTime? DateOfFinalCaseClassification, long? LocationOfExposureRegion, long? LocationOfExposureRayon, string SiteList, long? EmployeeID, string EmployeeGroupList, long? SiteGroupID, bool? ApplyNonConfigurableFiltration, bool? ApplyConfigurableFiltration, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanDiseaseReportID",
                    Value = HumanDiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LegacyID",
                    Size = 400,
                    Value = LegacyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSPersonID",
                    Size = 400,
                    Value = EIDSSPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportStatusTypeID",
                    Value = ReportStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RayonID",
                    Value = RayonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateEnteredFrom",
                    Value = DateEnteredFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateEnteredTo",
                    Value = DateEnteredTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ClassificationTypeID",
                    Value = ClassificationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HospitalizationStatusTypeID",
                    Value = HospitalizationStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSReportID",
                    Size = 400,
                    Value = EIDSSReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientFirstOrGivenName",
                    Size = 400,
                    Value = PatientFirstOrGivenName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientMiddleName",
                    Size = 400,
                    Value = PatientMiddleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientLastOrSurname",
                    Size = 400,
                    Value = PatientLastOrSurname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SentByFacility",
                    Size = 400,
                    Value = SentByFacility ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivedByFacility",
                    Size = 400,
                    Value = ReceivedByFacility ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisDateFrom",
                    Value = DiagnosisDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisDateTo",
                    Value = DiagnosisDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LocalSampleID",
                    Size = 400,
                    Value = LocalSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataEntrySite",
                    Value = DataEntrySite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfSymptomsOnset",
                    Value = DateOfSymptomsOnset ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NotificationDate",
                    Value = NotificationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfFinalCaseClassification",
                    Value = DateOfFinalCaseClassification ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LocationOfExposureRegion",
                    Value = LocationOfExposureRegion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationOfExposureRayon",
                    Value = LocationOfExposureRayon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteList",
                    Size = -1,
                    Value = SiteList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Value = EmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeGroupList",
                    Size = -1,
                    Value = EmployeeGroupList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteGroupID",
                    Value = SiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplyNonConfigurableFiltration",
                    Value = ApplyNonConfigurableFiltration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ApplyConfigurableFiltration",
                    Value = ApplyConfigurableFiltration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_DISEASE_AdvanceSearch_REPORT_GETListResult>("EXEC @returnValue = [dbo].[USP_HUM_DISEASE_AdvanceSearch_REPORT_GETList] @LanguageID, @HumanDiseaseReportID, @LegacyID, @PatientID, @EIDSSPersonID, @DiseaseID, @ReportStatusTypeID, @RegionID, @RayonID, @DateEnteredFrom, @DateEnteredTo, @ClassificationTypeID, @HospitalizationStatusTypeID, @EIDSSReportID, @PatientFirstOrGivenName, @PatientMiddleName, @PatientLastOrSurname, @SentByFacility, @ReceivedByFacility, @DiagnosisDateFrom, @DiagnosisDateTo, @LocalSampleID, @DataEntrySite, @DateOfSymptomsOnset, @NotificationDate, @DateOfFinalCaseClassification, @LocationOfExposureRegion, @LocationOfExposureRayon, @SiteList, @EmployeeID, @EmployeeGroupList, @SiteGroupID, @ApplyNonConfigurableFiltration, @ApplyConfigurableFiltration, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_DISEASE_ANTIVIRALTHERAPIES_GetListResult>> USP_HUM_DISEASE_ANTIVIRALTHERAPIES_GetListAsync(long? idfHumanCase, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfHumanCase",
                    Value = idfHumanCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_DISEASE_ANTIVIRALTHERAPIES_GetListResult>("EXEC @returnValue = [dbo].[USP_HUM_DISEASE_ANTIVIRALTHERAPIES_GetList] @idfHumanCase, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_DISEASE_CONTACTS_GetListResult>> USP_HUM_DISEASE_CONTACTS_GetListAsync(long? idfHumanCase, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfHumanCase",
                    Value = idfHumanCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_DISEASE_CONTACTS_GetListResult>("EXEC @returnValue = [dbo].[USP_HUM_DISEASE_CONTACTS_GetList] @idfHumanCase, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_DISEASE_GETDetailResult>> USP_HUM_DISEASE_GETDetailAsync(string LangID, long? SearchHumanCaseId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchHumanCaseId",
                    Value = SearchHumanCaseId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_DISEASE_GETDetailResult>("EXEC @returnValue = [dbo].[USP_HUM_DISEASE_GETDetail] @LangID, @SearchHumanCaseId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_DISEASE_REPORT_GETListResult>> USP_HUM_DISEASE_REPORT_GETListAsync(string LanguageID, long? ReportKey, string ReportID, string LegacyReportID, long? SessionKey, long? PatientID, string PersonID, long? DiseaseID, long? ReportStatusTypeID, long? AdministrativeLevelID, DateTime? DateEnteredFrom, DateTime? DateEnteredTo, long? ClassificationTypeID, long? HospitalizationYNID, string PatientFirstName, string PatientMiddleName, string PatientLastName, long? SentByFacilityID, long? ReceivedByFacilityID, DateTime? DiagnosisDateFrom, DateTime? DiagnosisDateTo, string LocalOrFieldSampleID, long? DataEntrySiteID, DateTime? DateOfSymptomsOnsetFrom, DateTime? DateOfSymptomsOnsetTo, DateTime? NotificationDateFrom, DateTime? NotificationDateTo, DateTime? DateOfFinalCaseClassificationFrom, DateTime? DateOfFinalCaseClassificationTo, long? LocationOfExposureAdministrativeLevelID, long? OutcomeID, int? FilterOutbreakTiedReports, bool? OutbreakCasesIndicator, bool? RecordIdentifierSearchIndicator, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, string SortColumn, string SortOrder, int? Page, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportKey",
                    Value = ReportKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportID",
                    Size = 400,
                    Value = ReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LegacyReportID",
                    Size = 400,
                    Value = LegacyReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionKey",
                    Value = SessionKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PatientID",
                    Value = PatientID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PersonID",
                    Size = 400,
                    Value = PersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportStatusTypeID",
                    Value = ReportStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelID",
                    Value = AdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateEnteredFrom",
                    Value = DateEnteredFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateEnteredTo",
                    Value = DateEnteredTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ClassificationTypeID",
                    Value = ClassificationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HospitalizationYNID",
                    Value = HospitalizationYNID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PatientFirstName",
                    Size = 400,
                    Value = PatientFirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientMiddleName",
                    Size = 400,
                    Value = PatientMiddleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PatientLastName",
                    Size = 400,
                    Value = PatientLastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SentByFacilityID",
                    Value = SentByFacilityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivedByFacilityID",
                    Value = ReceivedByFacilityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisDateFrom",
                    Value = DiagnosisDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisDateTo",
                    Value = DiagnosisDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LocalOrFieldSampleID",
                    Size = 400,
                    Value = LocalOrFieldSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataEntrySiteID",
                    Value = DataEntrySiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfSymptomsOnsetFrom",
                    Value = DateOfSymptomsOnsetFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfSymptomsOnsetTo",
                    Value = DateOfSymptomsOnsetTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NotificationDateFrom",
                    Value = NotificationDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NotificationDateTo",
                    Value = NotificationDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfFinalCaseClassificationFrom",
                    Value = DateOfFinalCaseClassificationFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfFinalCaseClassificationTo",
                    Value = DateOfFinalCaseClassificationTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LocationOfExposureAdministrativeLevelID",
                    Value = LocationOfExposureAdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OutcomeID",
                    Value = OutcomeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FilterOutbreakTiedReports",
                    Value = FilterOutbreakTiedReports ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCasesIndicator",
                    Value = OutbreakCasesIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "RecordIdentifierSearchIndicator",
                    Value = RecordIdentifierSearchIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Page",
                    Value = Page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_DISEASE_REPORT_GETListResult>("EXEC @returnValue = [dbo].[USP_HUM_DISEASE_REPORT_GETList] @LanguageID, @ReportKey, @ReportID, @LegacyReportID, @SessionKey, @PatientID, @PersonID, @DiseaseID, @ReportStatusTypeID, @AdministrativeLevelID, @DateEnteredFrom, @DateEnteredTo, @ClassificationTypeID, @HospitalizationYNID, @PatientFirstName, @PatientMiddleName, @PatientLastName, @SentByFacilityID, @ReceivedByFacilityID, @DiagnosisDateFrom, @DiagnosisDateTo, @LocalOrFieldSampleID, @DataEntrySiteID, @DateOfSymptomsOnsetFrom, @DateOfSymptomsOnsetTo, @NotificationDateFrom, @NotificationDateTo, @DateOfFinalCaseClassificationFrom, @DateOfFinalCaseClassificationTo, @LocationOfExposureAdministrativeLevelID, @OutcomeID, @FilterOutbreakTiedReports, @OutbreakCasesIndicator, @RecordIdentifierSearchIndicator, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplySiteFiltrationIndicator, @SortColumn, @SortOrder, @Page, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_DISEASE_REPORT_PERMISSION_GETDetailResult>> USP_HUM_DISEASE_REPORT_PERMISSION_GETDetailAsync(string LanguageID, long? RecordID, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RecordID",
                    Value = RecordID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_DISEASE_REPORT_PERMISSION_GETDetailResult>("EXEC @returnValue = [dbo].[USP_HUM_DISEASE_REPORT_PERMISSION_GETDetail] @LanguageID, @RecordID, @UserSiteID, @UserOrganizationID, @UserEmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_DISEASE_VACCINATIONS_GetListResult>> USP_HUM_DISEASE_VACCINATIONS_GetListAsync(long? idfHumanCase, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfHumanCase",
                    Value = idfHumanCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_DISEASE_VACCINATIONS_GetListResult>("EXEC @returnValue = [dbo].[USP_HUM_DISEASE_VACCINATIONS_GetList] @idfHumanCase, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_HUMAN_DISEASE_DELResult>> USP_HUM_HUMAN_DISEASE_DELAsync(long? idfHumanCase, long? idfUserID, long? idfSiteId, bool? DeduplicationIndicator, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfHumanCase",
                    Value = idfHumanCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfUserID",
                    Value = idfUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfSiteId",
                    Value = idfSiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeduplicationIndicator",
                    Value = DeduplicationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_HUMAN_DISEASE_DELResult>("EXEC @returnValue = [dbo].[USP_HUM_HUMAN_DISEASE_DEL] @idfHumanCase, @idfUserID, @idfSiteId, @DeduplicationIndicator", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_HUMAN_DISEASE_INVESTIGATEDBY_UPDATEResult>> USP_HUM_HUMAN_DISEASE_INVESTIGATEDBY_UPDATEAsync(long? IdfHumanCase, long? IdfInvestigatedByPerson, string StrEpidemiologistsName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "IdfHumanCase",
                    Value = IdfHumanCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdfInvestigatedByPerson",
                    Value = IdfInvestigatedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StrEpidemiologistsName",
                    Size = 4000,
                    Value = StrEpidemiologistsName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_HUMAN_DISEASE_INVESTIGATEDBY_UPDATEResult>("EXEC @returnValue = [dbo].[USP_HUM_HUMAN_DISEASE_INVESTIGATEDBY_UPDATE] @IdfHumanCase, @IdfInvestigatedByPerson, @StrEpidemiologistsName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_HUMAN_DISEASE_SETResult>> USP_HUM_HUMAN_DISEASE_SETAsync(string LanguageID, long? idfHumanCase, long? idfHuman, long? idfHumanActual, string strHumanCaseId, long? idfsFinalDiagnosis, DateTime? datDateOfDiagnosis, DateTime? datNotificationDate, long? idfsFinalState, string strLocalIdentifier, long? idfSentByOffice, string strSentByFirstName, string strSentByPatronymicName, string strSentByLastName, long? idfSentByPerson, long? idfReceivedByOffice, string strReceivedByFirstName, string strReceivedByPatronymicName, string strReceivedByLastName, long? idfReceivedByPerson, long? idfsHospitalizationStatus, long? idfHospital, string strCurrentLocation, DateTime? datOnSetDate, long? idfsInitialCaseStatus, long? idfsYNPreviouslySoughtCare, DateTime? datFirstSoughtCareDate, long? idfSoughtCareFacility, long? idfsNonNotIFiableDiagnosis, long? idfsYNHospitalization, DateTime? datHospitalizationDate, DateTime? datDischargeDate, string strHospitalName, long? idfsYNAntimicrobialTherapy, string strAntibioticName, string strDosage, DateTime? datFirstAdministeredDate, string strAntibioticComments, long? idfsYNSpecIFicVaccinationAdministered, long? idfInvestigatedByOffice, DateTime? StartDateofInvestigation, long? idfsYNRelatedToOutbreak, long? idfOutbreak, long? idfsYNExposureLocationKnown, long? idfPointGeoLocation, DateTime? datExposureDate, long? idfsGeoLocationType, string strLocationDescription, long? idfsLocationCountry, long? idfsLocationRegion, long? idfsLocationRayon, long? idfsLocationSettlement, double? intLocationLatitude, double? intLocationLongitude, long? intElevation, long? idfsLocationGroundType, double? intLocationDistance, double? intLocationDirection, string strForeignAddress, string strNote, long? idfsFinalCaseStatus, long? idfsOutcome, DateTime? DateOfBirth, DateTime? datDateofDeath, long? idfsCaseProgressStatus, long? idfPersonEnteredBy, string strClinicalNotes, long? idfsYNSpecimenCollected, long? idfsYNTestsConducted, long? DiseaseReportTypeID, bool? blnClinicalDiagBasis, bool? blnLabDiagBasis, bool? blnEpiDiagBasis, DateTime? DateofClassification, string strSummaryNotes, long? idfEpiObservation, long? idfCSObservation, long? idfInvestigatedByPerson, string strEpidemiologistsName, long? idfsNotCollectedReason, string strNotCollectedReason, string SamplesParameters, string TestsParameters, string TestsInterpretationParameters, string AntiviralTherapiesParameters, string VaccinationsParameters, string ContactsParameters, string Events, long? idfsHumanAgeType, int? intPatientAge, DateTime? datCompletionPaperFormDate, int? RowStatus, long? idfsSite, string AuditUser, long? idfParentMonitoringSession, long? ConnectedTestId, long? DiseaseId, DateTime? DateOfDiagnosis, long? ChangedDiseaseId, DateTime? DateOfChangedDiagnosis, long? ChangeDiagnosisReasonId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfHumanCase",
                    Value = idfHumanCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfHuman",
                    Value = idfHuman ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfHumanActual",
                    Value = idfHumanActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strHumanCaseId",
                    Size = 400,
                    Value = strHumanCaseId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFinalDiagnosis",
                    Value = idfsFinalDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datDateOfDiagnosis",
                    Value = datDateOfDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datNotificationDate",
                    Value = datNotificationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFinalState",
                    Value = idfsFinalState ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strLocalIdentifier",
                    Size = 400,
                    Value = strLocalIdentifier ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfSentByOffice",
                    Value = idfSentByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strSentByFirstName",
                    Size = 400,
                    Value = strSentByFirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSentByPatronymicName",
                    Size = 400,
                    Value = strSentByPatronymicName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSentByLastName",
                    Size = 400,
                    Value = strSentByLastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfSentByPerson",
                    Value = idfSentByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfReceivedByOffice",
                    Value = idfReceivedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strReceivedByFirstName",
                    Size = 400,
                    Value = strReceivedByFirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strReceivedByPatronymicName",
                    Size = 400,
                    Value = strReceivedByPatronymicName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strReceivedByLastName",
                    Size = 400,
                    Value = strReceivedByLastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfReceivedByPerson",
                    Value = idfReceivedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsHospitalizationStatus",
                    Value = idfsHospitalizationStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfHospital",
                    Value = idfHospital ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strCurrentLocation",
                    Size = 400,
                    Value = strCurrentLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "datOnSetDate",
                    Value = datOnSetDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsInitialCaseStatus",
                    Value = idfsInitialCaseStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNPreviouslySoughtCare",
                    Value = idfsYNPreviouslySoughtCare ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datFirstSoughtCareDate",
                    Value = datFirstSoughtCareDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfSoughtCareFacility",
                    Value = idfSoughtCareFacility ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsNonNotIFiableDiagnosis",
                    Value = idfsNonNotIFiableDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNHospitalization",
                    Value = idfsYNHospitalization ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datHospitalizationDate",
                    Value = datHospitalizationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datDischargeDate",
                    Value = datDischargeDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strHospitalName",
                    Size = 400,
                    Value = strHospitalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNAntimicrobialTherapy",
                    Value = idfsYNAntimicrobialTherapy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strAntibioticName",
                    Size = 400,
                    Value = strAntibioticName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strDosage",
                    Size = 400,
                    Value = strDosage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "datFirstAdministeredDate",
                    Value = datFirstAdministeredDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strAntibioticComments",
                    Size = -1,
                    Value = strAntibioticComments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNSpecIFicVaccinationAdministered",
                    Value = idfsYNSpecIFicVaccinationAdministered ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfInvestigatedByOffice",
                    Value = idfInvestigatedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StartDateofInvestigation",
                    Value = StartDateofInvestigation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNRelatedToOutbreak",
                    Value = idfsYNRelatedToOutbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfOutbreak",
                    Value = idfOutbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNExposureLocationKnown",
                    Value = idfsYNExposureLocationKnown ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfPointGeoLocation",
                    Value = idfPointGeoLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datExposureDate",
                    Value = datExposureDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsGeoLocationType",
                    Value = idfsGeoLocationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strLocationDescription",
                    Size = -1,
                    Value = strLocationDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocationCountry",
                    Value = idfsLocationCountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocationRegion",
                    Value = idfsLocationRegion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocationRayon",
                    Value = idfsLocationRayon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocationSettlement",
                    Value = idfsLocationSettlement ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intLocationLatitude",
                    Value = intLocationLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "intLocationLongitude",
                    Value = intLocationLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "intElevation",
                    Value = intElevation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocationGroundType",
                    Value = idfsLocationGroundType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intLocationDistance",
                    Value = intLocationDistance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "intLocationDirection",
                    Value = intLocationDirection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "strForeignAddress",
                    Size = -1,
                    Value = strForeignAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strNote",
                    Size = -1,
                    Value = strNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFinalCaseStatus",
                    Value = idfsFinalCaseStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsOutcome",
                    Value = idfsOutcome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfBirth",
                    Value = DateOfBirth ?? Convert.DBNull,
                    DbType = DbType.DateTime
                },
                new SqlParameter
                {
                    ParameterName = "datDateofDeath",
                    Value = datDateofDeath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCaseProgressStatus",
                    Value = idfsCaseProgressStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfPersonEnteredBy",
                    Value = idfPersonEnteredBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strClinicalNotes",
                    Size = 4000,
                    Value = strClinicalNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNSpecimenCollected",
                    Value = idfsYNSpecimenCollected ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNTestsConducted",
                    Value = idfsYNTestsConducted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReportTypeID",
                    Value = DiseaseReportTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "blnClinicalDiagBasis",
                    Value = blnClinicalDiagBasis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "blnLabDiagBasis",
                    Value = blnLabDiagBasis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "blnEpiDiagBasis",
                    Value = blnEpiDiagBasis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DateofClassification",
                    Value = DateofClassification ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strSummaryNotes",
                    Size = -1,
                    Value = strSummaryNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfEpiObservation",
                    Value = idfEpiObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfCSObservation",
                    Value = idfCSObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfInvestigatedByPerson",
                    Value = idfInvestigatedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strEpidemiologistsName",
                    Size = -1,
                    Value = strEpidemiologistsName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsNotCollectedReason",
                    Value = idfsNotCollectedReason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strNotCollectedReason",
                    Size = 400,
                    Value = strNotCollectedReason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SamplesParameters",
                    Size = -1,
                    Value = SamplesParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestsParameters",
                    Size = -1,
                    Value = TestsParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestsInterpretationParameters",
                    Size = -1,
                    Value = TestsInterpretationParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AntiviralTherapiesParameters",
                    Size = -1,
                    Value = AntiviralTherapiesParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VaccinationsParameters",
                    Size = -1,
                    Value = VaccinationsParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactsParameters",
                    Size = -1,
                    Value = ContactsParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsHumanAgeType",
                    Value = idfsHumanAgeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intPatientAge",
                    Value = intPatientAge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "datCompletionPaperFormDate",
                    Value = datCompletionPaperFormDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfParentMonitoringSession",
                    Value = idfParentMonitoringSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ConnectedTestId",
                    Value = ConnectedTestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseId",
                    Value = DiseaseId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfDiagnosis",
                    Value = DateOfDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ChangedDiseaseId",
                    Value = ChangedDiseaseId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfChangedDiagnosis",
                    Value = DateOfChangedDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ChangeDiagnosisReasonId",
                    Value = ChangeDiagnosisReasonId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_HUMAN_DISEASE_SETResult>("EXEC @returnValue = [dbo].[USP_HUM_HUMAN_DISEASE_SET] @LanguageID, @idfHumanCase, @idfHuman, @idfHumanActual, @strHumanCaseId, @idfsFinalDiagnosis, @datDateOfDiagnosis, @datNotificationDate, @idfsFinalState, @strLocalIdentifier, @idfSentByOffice, @strSentByFirstName, @strSentByPatronymicName, @strSentByLastName, @idfSentByPerson, @idfReceivedByOffice, @strReceivedByFirstName, @strReceivedByPatronymicName, @strReceivedByLastName, @idfReceivedByPerson, @idfsHospitalizationStatus, @idfHospital, @strCurrentLocation, @datOnSetDate, @idfsInitialCaseStatus, @idfsYNPreviouslySoughtCare, @datFirstSoughtCareDate, @idfSoughtCareFacility, @idfsNonNotIFiableDiagnosis, @idfsYNHospitalization, @datHospitalizationDate, @datDischargeDate, @strHospitalName, @idfsYNAntimicrobialTherapy, @strAntibioticName, @strDosage, @datFirstAdministeredDate, @strAntibioticComments, @idfsYNSpecIFicVaccinationAdministered, @idfInvestigatedByOffice, @StartDateofInvestigation, @idfsYNRelatedToOutbreak, @idfOutbreak, @idfsYNExposureLocationKnown, @idfPointGeoLocation, @datExposureDate, @idfsGeoLocationType, @strLocationDescription, @idfsLocationCountry, @idfsLocationRegion, @idfsLocationRayon, @idfsLocationSettlement, @intLocationLatitude, @intLocationLongitude, @intElevation, @idfsLocationGroundType, @intLocationDistance, @intLocationDirection, @strForeignAddress, @strNote, @idfsFinalCaseStatus, @idfsOutcome, @DateOfBirth, @datDateofDeath, @idfsCaseProgressStatus, @idfPersonEnteredBy, @strClinicalNotes, @idfsYNSpecimenCollected, @idfsYNTestsConducted, @DiseaseReportTypeID, @blnClinicalDiagBasis, @blnLabDiagBasis, @blnEpiDiagBasis, @DateofClassification, @strSummaryNotes, @idfEpiObservation, @idfCSObservation, @idfInvestigatedByPerson, @strEpidemiologistsName, @idfsNotCollectedReason, @strNotCollectedReason, @SamplesParameters, @TestsParameters, @TestsInterpretationParameters, @AntiviralTherapiesParameters, @VaccinationsParameters, @ContactsParameters, @Events, @idfsHumanAgeType, @intPatientAge, @datCompletionPaperFormDate, @RowStatus, @idfsSite, @AuditUser, @idfParentMonitoringSession, @ConnectedTestId, @DiseaseId, @DateOfDiagnosis, @ChangedDiseaseId, @DateOfChangedDiagnosis, @ChangeDiagnosisReasonId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_HUMAN_GETDetailResult>> USP_HUM_HUMAN_GETDetailAsync(string LangId, long? idfHumanActual, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 40,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfHumanActual",
                    Value = idfHumanActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_HUMAN_GETDetailResult>("EXEC @returnValue = [dbo].[USP_HUM_HUMAN_GETDetail] @LangId, @idfHumanActual", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_HUMAN_MASTER_DELResult>> USP_HUM_HUMAN_MASTER_DELAsync(long? HumanMasterID, long? idfDataAuditEvent, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "HumanMasterID",
                    Value = HumanMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfDataAuditEvent",
                    Value = idfDataAuditEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 200,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_HUMAN_MASTER_DELResult>("EXEC @returnValue = [dbo].[USP_HUM_HUMAN_MASTER_DEL] @HumanMasterID, @idfDataAuditEvent, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_HUMAN_MASTER_GETDetailResult>> USP_HUM_HUMAN_MASTER_GETDetailAsync(string LangID, long? HumanMasterID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 40,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanMasterID",
                    Value = HumanMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_HUMAN_MASTER_GETDetailResult>("EXEC @returnValue = [dbo].[USP_HUM_HUMAN_MASTER_GETDetail] @LangID, @HumanMasterID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_IDResult>> USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_IDAsync(string LanguageID, long? HumanID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 40,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanID",
                    Value = HumanID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_IDResult>("EXEC @returnValue = [dbo].[USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_ID] @LanguageID, @HumanID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_HUMAN_MASTER_GETListResult>> USP_HUM_HUMAN_MASTER_GETListAsync(string LangID, string EIDSSPersonID, long? PersonalIDType, string PersonalID, string FirstOrGivenName, string SecondName, string LastOrSurname, DateTime? DateOfBirthFrom, DateTime? DateOfBirthTo, long? GenderTypeID, long? idfsLocation, long? MonitoringSessionID, long? SettlementTypeID, bool? RecordIdentifierSearchIndicator, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSPersonID",
                    Size = 400,
                    Value = EIDSSPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalIDType",
                    Value = PersonalIDType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalID",
                    Size = 200,
                    Value = PersonalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstOrGivenName",
                    Size = 400,
                    Value = FirstOrGivenName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SecondName",
                    Size = 400,
                    Value = SecondName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastOrSurname",
                    Size = 400,
                    Value = LastOrSurname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfBirthFrom",
                    Value = DateOfBirthFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfBirthTo",
                    Value = DateOfBirthTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "GenderTypeID",
                    Value = GenderTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocation",
                    Value = idfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SettlementTypeID",
                    Value = SettlementTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RecordIdentifierSearchIndicator",
                    Value = RecordIdentifierSearchIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_HUMAN_MASTER_GETListResult>("EXEC @returnValue = [dbo].[USP_HUM_HUMAN_MASTER_GETList] @LangID, @EIDSSPersonID, @PersonalIDType, @PersonalID, @FirstOrGivenName, @SecondName, @LastOrSurname, @DateOfBirthFrom, @DateOfBirthTo, @GenderTypeID, @idfsLocation, @MonitoringSessionID, @SettlementTypeID, @RecordIdentifierSearchIndicator, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_HUMAN_MASTER_SETResult>> USP_HUM_HUMAN_MASTER_SETAsync(
            long? HumanMasterID, bool? CopyToHumanIndicator, long? PersonalIDType, string EIDSSPersonID,
            string PersonalID, string FirstName, string SecondName, string LastName, DateTime? DateOfBirth,
            DateTime? DateOfDeath, long? HumanGenderTypeID, long? OccupationTypeID, long? CitizenshipTypeID,
            string PassportNumber, long? IsEmployedTypeID, string EmployerName, DateTime? EmployedDateLastPresent,
            bool? EmployerForeignAddressIndicator, string EmployerForeignAddressString, long? EmployerGeoLocationID,
            long? EmployeridfsLocation, string EmployerstrStreetName, string EmployerstrApartment,
            string EmployerstrBuilding, string EmployerstrHouse, string EmployeridfsPostalCode, string EmployerPhone,
            long? IsStudentTypeID, string SchoolName, DateTime? SchoolDateLastAttended,
            bool? SchoolForeignAddressIndicator, string SchoolForeignAddressString, long? SchoolGeoLocationID,
            long? SchoolidfsLocation, string SchoolstrStreetName, string SchoolstrApartment, string SchoolstrBuilding,
            string SchoolstrHouse, string SchoolidfsPostalCode, string SchoolPhone, long? HumanGeoLocationID,
            long? HumanidfsLocation, string HumanstrStreetName, string HumanstrApartment, string HumanstrBuilding,
            string HumanstrHouse, string HumanidfsPostalCode, double? HumanstrLatitude, double? HumanstrLongitude,
            double? HumanstrElevation, long? HumanPermGeoLocationID, long? HumanPermidfsLocation,
            string HumanPermstrStreetName, string HumanPermstrApartment, string HumanPermstrBuilding,
            string HumanPermstrHouse, string HumanPermidfsPostalCode, long? HumanAltGeoLocationID,
            bool? HumanAltForeignAddressIndicator, string HumanAltForeignAddressString, long? HumanAltidfsLocation,
            string HumanAltstrStreetName, string HumanAltstrApartment, string HumanAltstrBuilding,
            string HumanAltstrHouse, string HumanAltidfsPostalCode, string RegistrationPhone, string HomePhone,
            string WorkPhone, int? ContactPhoneCountryCode, string ContactPhone, long? ContactPhoneTypeID,
            int? ContactPhone2CountryCode, string ContactPhone2, long? ContactPhone2TypeID, long? idfDataAuditEvent,
            string AuditUser, long? isAnotherPhoneTypeID, long? isAnotherAddressTypeID,
            OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "HumanMasterID",
                    Value = HumanMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CopyToHumanIndicator",
                    Value = CopyToHumanIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalIDType",
                    Value = PersonalIDType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSPersonID",
                    Size = 400,
                    Value = EIDSSPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalID",
                    Size = 200,
                    Value = PersonalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 400,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SecondName",
                    Size = 400,
                    Value = SecondName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 400,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfBirth",
                    Value = DateOfBirth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfDeath",
                    Value = DateOfDeath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "HumanGenderTypeID",
                    Value = HumanGenderTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OccupationTypeID",
                    Value = OccupationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CitizenshipTypeID",
                    Value = CitizenshipTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PassportNumber",
                    Size = 40,
                    Value = PassportNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsEmployedTypeID",
                    Value = IsEmployedTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerName",
                    Size = 400,
                    Value = EmployerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployedDateLastPresent",
                    Value = EmployedDateLastPresent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerForeignAddressIndicator",
                    Value = EmployerForeignAddressIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerForeignAddressString",
                    Size = 400,
                    Value = EmployerForeignAddressString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerGeoLocationID",
                    Value = EmployerGeoLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeridfsLocation",
                    Value = EmployeridfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerstrStreetName",
                    Size = 400,
                    Value = EmployerstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerstrApartment",
                    Size = 400,
                    Value = EmployerstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerstrBuilding",
                    Size = 400,
                    Value = EmployerstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerstrHouse",
                    Size = 400,
                    Value = EmployerstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeridfsPostalCode",
                    Size = 400,
                    Value = EmployeridfsPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployerPhone",
                    Size = 200,
                    Value = EmployerPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsStudentTypeID",
                    Value = IsStudentTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolName",
                    Size = 400,
                    Value = SchoolName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolDateLastAttended",
                    Value = SchoolDateLastAttended ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolForeignAddressIndicator",
                    Value = SchoolForeignAddressIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolForeignAddressString",
                    Size = 400,
                    Value = SchoolForeignAddressString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolGeoLocationID",
                    Value = SchoolGeoLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolidfsLocation",
                    Value = SchoolidfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolstrStreetName",
                    Size = 400,
                    Value = SchoolstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolstrApartment",
                    Size = 400,
                    Value = SchoolstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolstrBuilding",
                    Size = 400,
                    Value = SchoolstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolstrHouse",
                    Size = 400,
                    Value = SchoolstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolidfsPostalCode",
                    Size = 400,
                    Value = SchoolidfsPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SchoolPhone",
                    Size = 200,
                    Value = SchoolPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanGeoLocationID",
                    Value = HumanGeoLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanidfsLocation",
                    Value = HumanidfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrStreetName",
                    Size = 400,
                    Value = HumanstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrApartment",
                    Size = 400,
                    Value = HumanstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrBuilding",
                    Size = 400,
                    Value = HumanstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrHouse",
                    Size = 400,
                    Value = HumanstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanidfsPostalCode",
                    Size = 400,
                    Value = HumanidfsPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrLatitude",
                    Value = HumanstrLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrLongitude",
                    Value = HumanstrLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "HumanstrElevation",
                    Value = HumanstrElevation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermGeoLocationID",
                    Value = HumanPermGeoLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermidfsLocation",
                    Value = HumanPermidfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermstrStreetName",
                    Size = 400,
                    Value = HumanPermstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermstrApartment",
                    Size = 400,
                    Value = HumanPermstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermstrBuilding",
                    Size = 400,
                    Value = HumanPermstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermstrHouse",
                    Size = 400,
                    Value = HumanPermstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanPermidfsPostalCode",
                    Size = 400,
                    Value = HumanPermidfsPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltGeoLocationID",
                    Value = HumanAltGeoLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltForeignAddressIndicator",
                    Value = HumanAltForeignAddressIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltForeignAddressString",
                    Size = 400,
                    Value = HumanAltForeignAddressString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltidfsLocation",
                    Value = HumanAltidfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltstrStreetName",
                    Size = 400,
                    Value = HumanAltstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltstrApartment",
                    Size = 400,
                    Value = HumanAltstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltstrBuilding",
                    Size = 400,
                    Value = HumanAltstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltstrHouse",
                    Size = 400,
                    Value = HumanAltstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanAltidfsPostalCode",
                    Size = 400,
                    Value = HumanAltidfsPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RegistrationPhone",
                    Size = 400,
                    Value = RegistrationPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HomePhone",
                    Size = 400,
                    Value = HomePhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WorkPhone",
                    Size = 400,
                    Value = WorkPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhoneCountryCode",
                    Value = ContactPhoneCountryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhone",
                    Size = 400,
                    Value = ContactPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhoneTypeID",
                    Value = ContactPhoneTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhone2CountryCode",
                    Value = ContactPhone2CountryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhone2",
                    Size = 400,
                    Value = ContactPhone2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactPhone2TypeID",
                    Value = ContactPhone2TypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfDataAuditEvent",
                    Value = idfDataAuditEvent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsAnotherPhoneTypeID",
                    Size = 200,
                    Value = isAnotherPhoneTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsAnotherAddressTypeID",
                    Size = 200,
                    Value = isAnotherAddressTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_HUMAN_MASTER_SETResult>("EXEC @returnValue = [dbo].[USP_HUM_HUMAN_MASTER_SET] @HumanMasterID, @CopyToHumanIndicator, @PersonalIDType, @EIDSSPersonID, @PersonalID, @FirstName, @SecondName, @LastName, @DateOfBirth, @DateOfDeath, @HumanGenderTypeID, @OccupationTypeID, @CitizenshipTypeID, @PassportNumber, @IsEmployedTypeID, @EmployerName, @EmployedDateLastPresent, @EmployerForeignAddressIndicator, @EmployerForeignAddressString, @EmployerGeoLocationID, @EmployeridfsLocation, @EmployerstrStreetName, @EmployerstrApartment, @EmployerstrBuilding, @EmployerstrHouse, @EmployeridfsPostalCode, @EmployerPhone, @IsStudentTypeID, @SchoolName, @SchoolDateLastAttended, @SchoolForeignAddressIndicator, @SchoolForeignAddressString, @SchoolGeoLocationID, @SchoolidfsLocation, @SchoolstrStreetName, @SchoolstrApartment, @SchoolstrBuilding, @SchoolstrHouse, @SchoolidfsPostalCode, @SchoolPhone, @HumanGeoLocationID, @HumanidfsLocation, @HumanstrStreetName, @HumanstrApartment, @HumanstrBuilding, @HumanstrHouse, @HumanidfsPostalCode, @HumanstrLatitude, @HumanstrLongitude, @HumanstrElevation, @HumanPermGeoLocationID, @HumanPermidfsLocation, @HumanPermstrStreetName, @HumanPermstrApartment, @HumanPermstrBuilding, @HumanPermstrHouse, @HumanPermidfsPostalCode, @HumanAltGeoLocationID, @HumanAltForeignAddressIndicator, @HumanAltForeignAddressString, @HumanAltidfsLocation, @HumanAltstrStreetName, @HumanAltstrApartment, @HumanAltstrBuilding, @HumanAltstrHouse, @HumanAltidfsPostalCode, @RegistrationPhone, @HomePhone, @WorkPhone, @ContactPhoneCountryCode, @ContactPhone, @ContactPhoneTypeID, @ContactPhone2CountryCode, @ContactPhone2, @ContactPhone2TypeID, @idfDataAuditEvent, @AuditUser, @IsAnotherPhoneTypeID, @IsAnotherAddressTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_REP_WHOEXPORTResult>> USP_HUM_REP_WHOEXPORTAsync(string LangID, DateTime? DateFrom, DateTime? DateTo, long? DiseaseID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_REP_WHOEXPORTResult>("EXEC @returnValue = [dbo].[USP_HUM_REP_WHOEXPORT] @LangID, @DateFrom, @DateTo, @DiseaseID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_SAMPLES_GetList_With_DerivatesResult>> USP_HUM_SAMPLES_GetList_With_DerivatesAsync(string LangID, long? idfHumanCase, long? SearchDiagnosis, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfHumanCase",
                    Value = idfHumanCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchDiagnosis",
                    Value = SearchDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_SAMPLES_GetList_With_DerivatesResult>("EXEC @returnValue = [dbo].[USP_HUM_SAMPLES_GetList_With_Derivates] @LangID, @idfHumanCase, @SearchDiagnosis", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUM_TESTS_GetListResult>> USP_HUM_TESTS_GetListAsync(string LangID, long? idfHumanCase, long? SearchDiagnosis, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfHumanCase",
                    Value = idfHumanCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchDiagnosis",
                    Value = SearchDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUM_TESTS_GetListResult>("EXEC @returnValue = [dbo].[USP_HUM_TESTS_GetList] @LangID, @idfHumanCase, @SearchDiagnosis", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_HUMAN_DISEASELABTESTMATRIX_BY_DISEASE_GETLISTResult>> USP_HUMAN_DISEASELABTESTMATRIX_BY_DISEASE_GETLISTAsync(string langId, long? idfsDiagnosis, int? PaginationSet, int? PageSize, int? MaxPagesPerFetch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langId",
                    Size = 20,
                    Value = langId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PaginationSet",
                    Value = PaginationSet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MaxPagesPerFetch",
                    Value = MaxPagesPerFetch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_HUMAN_DISEASELABTESTMATRIX_BY_DISEASE_GETLISTResult>("EXEC @returnValue = [dbo].[USP_HUMAN_DISEASELABTESTMATRIX_BY_DISEASE_GETLIST] @langId, @idfsDiagnosis, @PaginationSet, @PageSize, @MaxPagesPerFetch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ILI_Aggregate_DeleteResult>> USP_ILI_Aggregate_DeleteAsync(long? idfAggregateHeader, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggregateHeader",
                    Value = idfAggregateHeader ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ILI_Aggregate_DeleteResult>("EXEC @returnValue = [dbo].[USP_ILI_Aggregate_Delete] @idfAggregateHeader, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ILI_Aggregate_Detail_GetListResult>> USP_ILI_Aggregate_Detail_GetListAsync(string LanguageID, long? idfAggregateHeader, string FormID, string SortColumn, string SortOrder, int? pageNo, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfAggregateHeader",
                    Value = idfAggregateHeader ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FormID",
                    Size = 400,
                    Value = FormID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ILI_Aggregate_Detail_GetListResult>("EXEC @returnValue = [dbo].[USP_ILI_Aggregate_Detail_GetList] @LanguageID, @idfAggregateHeader, @FormID, @SortColumn, @SortOrder, @pageNo, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> USP_ILI_Aggregate_Detail_SETAsync(long? idfAggregateDetail, long? idfAggregateHeader, int? RowStatus, long? idfHospital, int? intAge0_4, int? intAge5_14, int? intAge15_29, int? intAge30_64, int? intAge65, int? inTotalILI, int? intTotalAdmissions, int? intILISamples, string AuditUserName, long? DataAuditEventID, string EIDSSObjectID, string RowAction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggregateDetail",
                    Value = idfAggregateDetail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfAggregateHeader",
                    Value = idfAggregateHeader ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfHospital",
                    Value = idfHospital ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intAge0_4",
                    Value = intAge0_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intAge5_14",
                    Value = intAge5_14 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intAge15_29",
                    Value = intAge15_29 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intAge30_64",
                    Value = intAge30_64 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intAge65",
                    Value = intAge65 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inTotalILI",
                    Value = inTotalILI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intTotalAdmissions",
                    Value = intTotalAdmissions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intILISamples",
                    Value = intILISamples ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataAuditEventID",
                    Value = DataAuditEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSObjectID",
                    Size = 400,
                    Value = EIDSSObjectID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RowAction",
                    Size = 1,
                    Value = RowAction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[USP_ILI_Aggregate_Detail_SET] @idfAggregateDetail, @idfAggregateHeader, @RowStatus, @idfHospital, @intAge0_4, @intAge5_14, @intAge15_29, @intAge30_64, @intAge65, @inTotalILI, @intTotalAdmissions, @intILISamples, @AuditUserName, @DataAuditEventID, @EIDSSObjectID, @RowAction", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ILI_Aggregate_Form_DeleteResult>> USP_ILI_Aggregate_Form_DeleteAsync(string UserId, long? idfAggregateDetail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Size = -1,
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfAggregateDetail",
                    Value = idfAggregateDetail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ILI_Aggregate_Form_DeleteResult>("EXEC @returnValue = [dbo].[USP_ILI_Aggregate_Form_Delete] @UserId, @idfAggregateDetail", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ILI_Aggregate_GetListResult>> USP_ILI_Aggregate_GetListAsync(string LanguageID, string FormID, string LegacyFormID, long? AggregateHeaderID, long? HospitalID, DateTime? StartDate, DateTime? FinishDate, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, string SortColumn, string SortOrder, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FormID",
                    Size = 400,
                    Value = FormID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LegacyFormID",
                    Size = 400,
                    Value = LegacyFormID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AggregateHeaderID",
                    Value = AggregateHeaderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "HospitalID",
                    Value = HospitalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FinishDate",
                    Value = FinishDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ILI_Aggregate_GetListResult>("EXEC @returnValue = [dbo].[USP_ILI_Aggregate_GetList] @LanguageID, @FormID, @LegacyFormID, @AggregateHeaderID, @HospitalID, @StartDate, @FinishDate, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplySiteFiltrationIndicator, @SortColumn, @SortOrder, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_ILI_Aggregate_SetResult>> USP_ILI_Aggregate_SetAsync(long? idfAggregateHeader, long? idfEnteredBy, long? idfsSite, int? intYear, int? intWeek, DateTime? datStartDate, DateTime? datFinishDate, string strFormId, int? RowStatus, string AuditUserName, string ILITables, string Events, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfAggregateHeader",
                    Value = idfAggregateHeader ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfEnteredBy",
                    Value = idfEnteredBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intYear",
                    Value = intYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intWeek",
                    Value = intWeek ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "datStartDate",
                    Value = datStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datFinishDate",
                    Value = datFinishDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strFormId",
                    Size = -1,
                    Value = strFormId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ILITables",
                    Size = -1,
                    Value = ILITables ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_ILI_Aggregate_SetResult>("EXEC @returnValue = [dbo].[USP_ILI_Aggregate_Set] @idfAggregateHeader, @idfEnteredBy, @idfsSite, @intYear, @intWeek, @datStartDate, @datFinishDate, @strFormId, @RowStatus, @AuditUserName, @ILITables, @Events", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_APPROVAL_ADVANCED_SEARCH_GETListResult>> USP_LAB_APPROVAL_ADVANCED_SEARCH_GETListAsync(string LanguageID, long? ReportOrSessionTypeID, long? SurveillanceTypeID, string SampleStatusTypeList, string AccessionedIndicatorList, string EIDSSLocalOrFieldSampleID, string EIDSSReportCampaignOrSessionID, long? SentToOrganizationID, long? SentToOrganizationSiteID, long? TransferredToOrganizationID, string EIDSSTransferID, long? ResultsReceivedFromID, DateTime? DateFrom, DateTime? DateTo, string EIDSSLaboratorySampleID, long? SampleTypeID, long? TestNameTypeID, long? DiseaseID, long? TestStatusTypeID, long? TestResultTypeID, DateTime? TestResultDateFrom, DateTime? TestResultDateTo, string PatientName, string FarmOwnerName, long? SpeciesTypeID, string SampleList, string TestList, long? UserID, long? UserEmployeeID, long? UserSiteID, long? UserOrganizationID, long? UserSiteGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportOrSessionTypeID",
                    Value = ReportOrSessionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SurveillanceTypeID",
                    Value = SurveillanceTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SampleStatusTypeList",
                    Size = -1,
                    Value = SampleStatusTypeList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessionedIndicatorList",
                    Size = 3,
                    Value = AccessionedIndicatorList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLocalOrFieldSampleID",
                    Size = 400,
                    Value = EIDSSLocalOrFieldSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSReportCampaignOrSessionID",
                    Size = 400,
                    Value = EIDSSReportCampaignOrSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SentToOrganizationID",
                    Value = SentToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SentToOrganizationSiteID",
                    Value = SentToOrganizationSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TransferredToOrganizationID",
                    Value = TransferredToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSTransferID",
                    Size = 400,
                    Value = EIDSSTransferID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ResultsReceivedFromID",
                    Value = ResultsReceivedFromID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLaboratorySampleID",
                    Size = 400,
                    Value = EIDSSLaboratorySampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleTypeID",
                    Value = SampleTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestNameTypeID",
                    Value = TestNameTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestStatusTypeID",
                    Value = TestStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultTypeID",
                    Value = TestResultTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultDateFrom",
                    Value = TestResultDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultDateTo",
                    Value = TestResultDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 400,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerName",
                    Size = 400,
                    Value = FarmOwnerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SpeciesTypeID",
                    Value = SpeciesTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SampleList",
                    Size = -1,
                    Value = SampleList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestList",
                    Size = -1,
                    Value = TestList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_APPROVAL_ADVANCED_SEARCH_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList] @LanguageID, @ReportOrSessionTypeID, @SurveillanceTypeID, @SampleStatusTypeList, @AccessionedIndicatorList, @EIDSSLocalOrFieldSampleID, @EIDSSReportCampaignOrSessionID, @SentToOrganizationID, @SentToOrganizationSiteID, @TransferredToOrganizationID, @EIDSSTransferID, @ResultsReceivedFromID, @DateFrom, @DateTo, @EIDSSLaboratorySampleID, @SampleTypeID, @TestNameTypeID, @DiseaseID, @TestStatusTypeID, @TestResultTypeID, @TestResultDateFrom, @TestResultDateTo, @PatientName, @FarmOwnerName, @SpeciesTypeID, @SampleList, @TestList, @UserID, @UserEmployeeID, @UserSiteID, @UserOrganizationID, @UserSiteGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_APPROVAL_GETListResult>> USP_LAB_APPROVAL_GETListAsync(string LanguageID, long? SampleID, long? TestID, long? UserOrganizationID, long? UserEmployeeID, long? UserSiteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleID",
                    Value = SampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestID",
                    Value = TestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_APPROVAL_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_APPROVAL_GETList] @LanguageID, @SampleID, @TestID, @UserOrganizationID, @UserEmployeeID, @UserSiteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_APPROVAL_SEARCH_GETListResult>> USP_LAB_APPROVAL_SEARCH_GETListAsync(string LanguageID, string SearchString, bool? AccessionedIndicator, long? UserID, long? UserEmployeeID, long? UserOrganizationID, long? UserSiteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchString",
                    Size = 4000,
                    Value = SearchString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessionedIndicator",
                    Value = AccessionedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_APPROVAL_SEARCH_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_APPROVAL_SEARCH_GETList] @LanguageID, @SearchString, @AccessionedIndicator, @UserID, @UserEmployeeID, @UserOrganizationID, @UserSiteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_BATCH_ADVANCED_SEARCH_GETListResult>> USP_LAB_BATCH_ADVANCED_SEARCH_GETListAsync(string LanguageID, long? ReportOrSessionTypeID, long? SurveillanceTypeID, string SampleStatusTypeList, string AccessionedIndicatorList, string EIDSSLocalOrFieldSampleID, string EIDSSReportCampaignOrSessionID, long? SentToOrganizationID, long? TransferredToOrganizationID, string EIDSSTransferID, long? ResultsReceivedFromID, DateTime? DateFrom, DateTime? DateTo, string EIDSSLaboratorySampleID, long? SampleTypeID, long? TestNameTypeID, long? DiseaseID, long? TestStatusTypeID, long? TestResultTypeID, DateTime? TestResultDateFrom, DateTime? TestResultDateTo, string PatientName, string FarmOwnerName, long? SpeciesTypeID, string BatchTestList, bool? FiltrationIndicator, long? UserID, long? UserEmployeeID, long? UserSiteID, long? UserOrganizationID, long? UserSiteGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportOrSessionTypeID",
                    Value = ReportOrSessionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SurveillanceTypeID",
                    Value = SurveillanceTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SampleStatusTypeList",
                    Size = -1,
                    Value = SampleStatusTypeList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessionedIndicatorList",
                    Size = 3,
                    Value = AccessionedIndicatorList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLocalOrFieldSampleID",
                    Size = 400,
                    Value = EIDSSLocalOrFieldSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSReportCampaignOrSessionID",
                    Size = 400,
                    Value = EIDSSReportCampaignOrSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SentToOrganizationID",
                    Value = SentToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TransferredToOrganizationID",
                    Value = TransferredToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSTransferID",
                    Size = 400,
                    Value = EIDSSTransferID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ResultsReceivedFromID",
                    Value = ResultsReceivedFromID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLaboratorySampleID",
                    Size = 400,
                    Value = EIDSSLaboratorySampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleTypeID",
                    Value = SampleTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestNameTypeID",
                    Value = TestNameTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestStatusTypeID",
                    Value = TestStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultTypeID",
                    Value = TestResultTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultDateFrom",
                    Value = TestResultDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultDateTo",
                    Value = TestResultDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 400,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerName",
                    Size = 400,
                    Value = FarmOwnerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SpeciesTypeID",
                    Value = SpeciesTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BatchTestList",
                    Size = -1,
                    Value = BatchTestList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FiltrationIndicator",
                    Value = FiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_BATCH_ADVANCED_SEARCH_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_BATCH_ADVANCED_SEARCH_GETList] @LanguageID, @ReportOrSessionTypeID, @SurveillanceTypeID, @SampleStatusTypeList, @AccessionedIndicatorList, @EIDSSLocalOrFieldSampleID, @EIDSSReportCampaignOrSessionID, @SentToOrganizationID, @TransferredToOrganizationID, @EIDSSTransferID, @ResultsReceivedFromID, @DateFrom, @DateTo, @EIDSSLaboratorySampleID, @SampleTypeID, @TestNameTypeID, @DiseaseID, @TestStatusTypeID, @TestResultTypeID, @TestResultDateFrom, @TestResultDateTo, @PatientName, @FarmOwnerName, @SpeciesTypeID, @BatchTestList, @FiltrationIndicator, @UserID, @UserEmployeeID, @UserSiteID, @UserOrganizationID, @UserSiteGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_BATCH_GETListResult>> USP_LAB_BATCH_GETListAsync(string LanguageID, long? UserID, long? UserEmployeeID, long? UserOrganizationID, long? UserSiteID, long? UserSiteGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_BATCH_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_BATCH_GETList] @LanguageID, @UserID, @UserEmployeeID, @UserOrganizationID, @UserSiteID, @UserSiteGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_FAVORITE_ADVANCED_SEARCH_GETListResult>> USP_LAB_FAVORITE_ADVANCED_SEARCH_GETListAsync(string LanguageID, long? ReportOrSessionTypeID, long? SurveillanceTypeID, string SampleStatusTypeList, string AccessionedIndicatorList, string EIDSSLocalOrFieldSampleID, string EIDSSReportCampaignOrSessionID, long? SentToOrganizationID, long? SentToOrganizationSiteID, long? TransferredToOrganizationID, string EIDSSTransferID, long? ResultsReceivedFromID, DateTime? DateFrom, DateTime? DateTo, string EIDSSLaboratorySampleID, long? SampleTypeID, long? TestNameTypeID, long? DiseaseID, long? TestStatusTypeID, long? TestResultTypeID, DateTime? TestResultDateFrom, DateTime? TestResultDateTo, string PatientName, string FarmOwnerName, long? SpeciesTypeID, string SampleList, string TestList, bool? FiltrationIndicator, long? UserID, long? UserEmployeeID, long? UserSiteID, long? UserOrganizationID, long? UserSiteGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportOrSessionTypeID",
                    Value = ReportOrSessionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SurveillanceTypeID",
                    Value = SurveillanceTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SampleStatusTypeList",
                    Size = -1,
                    Value = SampleStatusTypeList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessionedIndicatorList",
                    Size = 3,
                    Value = AccessionedIndicatorList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLocalOrFieldSampleID",
                    Size = 400,
                    Value = EIDSSLocalOrFieldSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSReportCampaignOrSessionID",
                    Size = 400,
                    Value = EIDSSReportCampaignOrSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SentToOrganizationID",
                    Value = SentToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SentToOrganizationSiteID",
                    Value = SentToOrganizationSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TransferredToOrganizationID",
                    Value = TransferredToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSTransferID",
                    Size = 400,
                    Value = EIDSSTransferID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ResultsReceivedFromID",
                    Value = ResultsReceivedFromID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLaboratorySampleID",
                    Size = 400,
                    Value = EIDSSLaboratorySampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleTypeID",
                    Value = SampleTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestNameTypeID",
                    Value = TestNameTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestStatusTypeID",
                    Value = TestStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultTypeID",
                    Value = TestResultTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultDateFrom",
                    Value = TestResultDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultDateTo",
                    Value = TestResultDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 400,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerName",
                    Size = 400,
                    Value = FarmOwnerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SpeciesTypeID",
                    Value = SpeciesTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SampleList",
                    Size = -1,
                    Value = SampleList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestList",
                    Size = -1,
                    Value = TestList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FiltrationIndicator",
                    Value = FiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_FAVORITE_ADVANCED_SEARCH_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList] @LanguageID, @ReportOrSessionTypeID, @SurveillanceTypeID, @SampleStatusTypeList, @AccessionedIndicatorList, @EIDSSLocalOrFieldSampleID, @EIDSSReportCampaignOrSessionID, @SentToOrganizationID, @SentToOrganizationSiteID, @TransferredToOrganizationID, @EIDSSTransferID, @ResultsReceivedFromID, @DateFrom, @DateTo, @EIDSSLaboratorySampleID, @SampleTypeID, @TestNameTypeID, @DiseaseID, @TestStatusTypeID, @TestResultTypeID, @TestResultDateFrom, @TestResultDateTo, @PatientName, @FarmOwnerName, @SpeciesTypeID, @SampleList, @TestList, @FiltrationIndicator, @UserID, @UserEmployeeID, @UserSiteID, @UserOrganizationID, @UserSiteGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_FAVORITE_GETListResult>> USP_LAB_FAVORITE_GETListAsync(string LanguageID, long? SampleID, long? UserID, long? UserEmployeeID, long? UserSiteID, long? UserOrganizationID, long? UserSiteGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleID",
                    Value = SampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_FAVORITE_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_FAVORITE_GETList] @LanguageID, @SampleID, @UserID, @UserEmployeeID, @UserSiteID, @UserOrganizationID, @UserSiteGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_FAVORITE_SEARCH_GETListResult>> USP_LAB_FAVORITE_SEARCH_GETListAsync(string LanguageID, string SearchString, bool? AccessionedIndicator, long? UserID, long? UserEmployeeID, long? UserOrganizationID, long? UserSiteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchString",
                    Size = 4000,
                    Value = SearchString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessionedIndicator",
                    Value = AccessionedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_FAVORITE_SEARCH_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_FAVORITE_SEARCH_GETList] @LanguageID, @SearchString, @AccessionedIndicator, @UserID, @UserEmployeeID, @UserOrganizationID, @UserSiteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_FREEZER_GETListResult>> USP_LAB_FREEZER_GETListAsync(string LanguageID, string SiteList, string FreezerName, string Note, long? StorageTypeID, string Building, string Room, string SearchString, int? PaginationSet, int? PageSize, int? MaxPagesPerFetch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteList",
                    Size = -1,
                    Value = SiteList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FreezerName",
                    Size = 400,
                    Value = FreezerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Note",
                    Size = 400,
                    Value = Note ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StorageTypeID",
                    Value = StorageTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Building",
                    Size = 400,
                    Value = Building ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Room",
                    Size = 400,
                    Value = Room ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchString",
                    Size = 4000,
                    Value = SearchString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PaginationSet",
                    Value = PaginationSet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MaxPagesPerFetch",
                    Value = MaxPagesPerFetch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_FREEZER_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_FREEZER_GETList] @LanguageID, @SiteList, @FreezerName, @Note, @StorageTypeID, @Building, @Room, @SearchString, @PaginationSet, @PageSize, @MaxPagesPerFetch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_FREEZER_SETResult>> USP_LAB_FREEZER_SETAsync(string LanguageID, long? FreezerID, long? StorageTypeID, long? OrganizationID, string FreezerName, string FreezerNote, string EIDSSFreezerID, string Building, string Room, int? RowStatus, string FreezerSubdivisions, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FreezerID",
                    Value = FreezerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StorageTypeID",
                    Value = StorageTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationID",
                    Value = OrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FreezerName",
                    Size = 400,
                    Value = FreezerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FreezerNote",
                    Size = 400,
                    Value = FreezerNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSFreezerID",
                    Size = 400,
                    Value = EIDSSFreezerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Building",
                    Size = 400,
                    Value = Building ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Room",
                    Size = 400,
                    Value = Room ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FreezerSubdivisions",
                    Size = -1,
                    Value = FreezerSubdivisions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_FREEZER_SETResult>("EXEC @returnValue = [dbo].[USP_LAB_FREEZER_SET] @LanguageID, @FreezerID, @StorageTypeID, @OrganizationID, @FreezerName, @FreezerNote, @EIDSSFreezerID, @Building, @Room, @RowStatus, @FreezerSubdivisions, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_FREEZER_SUBDIVISION_GETListResult>> USP_LAB_FREEZER_SUBDIVISION_GETListAsync(string LanguageID, long? FreezerID, long? SiteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FreezerID",
                    Value = FreezerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_FREEZER_SUBDIVISION_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_FREEZER_SUBDIVISION_GETList] @LanguageID, @FreezerID, @SiteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_SAMPLE_ADVANCED_SEARCH_GETListResult>> USP_LAB_SAMPLE_ADVANCED_SEARCH_GETListAsync(string LanguageID, long? ReportOrSessionTypeID, long? SurveillanceTypeID, string SampleStatusTypeList, string AccessionedIndicatorList, string EIDSSLocalOrFieldSampleID, string EIDSSReportCampaignOrSessionID, long? SentToOrganizationID, long? SentToOrganizationSiteID, long? TransferredToOrganizationID, string EIDSSTransferID, long? ResultsReceivedFromID, DateTime? DateFrom, DateTime? DateTo, string EIDSSLaboratorySampleID, long? SampleTypeID, long? TestNameTypeID, long? DiseaseID, long? TestStatusTypeID, long? TestResultTypeID, DateTime? TestResultDateFrom, DateTime? TestResultDateTo, string PatientName, string FarmOwnerName, long? SpeciesTypeID, string SampleList, bool? TestUnassignedIndicator, bool? TestCompletedIndicator, bool? FiltrationIndicator, long? UserID, long? UserEmployeeID, long? UserSiteID, long? UserOrganizationID, long? UserSiteGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportOrSessionTypeID",
                    Value = ReportOrSessionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SurveillanceTypeID",
                    Value = SurveillanceTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SampleStatusTypeList",
                    Size = -1,
                    Value = SampleStatusTypeList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessionedIndicatorList",
                    Size = 3,
                    Value = AccessionedIndicatorList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLocalOrFieldSampleID",
                    Size = 400,
                    Value = EIDSSLocalOrFieldSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSReportCampaignOrSessionID",
                    Size = 400,
                    Value = EIDSSReportCampaignOrSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SentToOrganizationID",
                    Value = SentToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SentToOrganizationSiteID",
                    Value = SentToOrganizationSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TransferredToOrganizationID",
                    Value = TransferredToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSTransferID",
                    Size = 400,
                    Value = EIDSSTransferID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ResultsReceivedFromID",
                    Value = ResultsReceivedFromID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLaboratorySampleID",
                    Size = 400,
                    Value = EIDSSLaboratorySampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleTypeID",
                    Value = SampleTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestNameTypeID",
                    Value = TestNameTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestStatusTypeID",
                    Value = TestStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultTypeID",
                    Value = TestResultTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultDateFrom",
                    Value = TestResultDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultDateTo",
                    Value = TestResultDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 400,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerName",
                    Size = 400,
                    Value = FarmOwnerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SpeciesTypeID",
                    Value = SpeciesTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SampleList",
                    Size = -1,
                    Value = SampleList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestUnassignedIndicator",
                    Value = TestUnassignedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "TestCompletedIndicator",
                    Value = TestCompletedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FiltrationIndicator",
                    Value = FiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_SAMPLE_ADVANCED_SEARCH_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList] @LanguageID, @ReportOrSessionTypeID, @SurveillanceTypeID, @SampleStatusTypeList, @AccessionedIndicatorList, @EIDSSLocalOrFieldSampleID, @EIDSSReportCampaignOrSessionID, @SentToOrganizationID, @SentToOrganizationSiteID, @TransferredToOrganizationID, @EIDSSTransferID, @ResultsReceivedFromID, @DateFrom, @DateTo, @EIDSSLaboratorySampleID, @SampleTypeID, @TestNameTypeID, @DiseaseID, @TestStatusTypeID, @TestResultTypeID, @TestResultDateFrom, @TestResultDateTo, @PatientName, @FarmOwnerName, @SpeciesTypeID, @SampleList, @TestUnassignedIndicator, @TestCompletedIndicator, @FiltrationIndicator, @UserID, @UserEmployeeID, @UserSiteID, @UserOrganizationID, @UserSiteGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_SAMPLE_BAR_CODE_GETListResult>> USP_LAB_SAMPLE_BAR_CODE_GETListAsync(string LanguageID, string SampleList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleList",
                    Size = -1,
                    Value = SampleList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_SAMPLE_BAR_CODE_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_SAMPLE_BAR_CODE_GETList] @LanguageID, @SampleList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_SAMPLE_GETDetailResult>> USP_LAB_SAMPLE_GETDetailAsync(string LanguageID, long? SampleID, long? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleID",
                    Value = SampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_SAMPLE_GETDetailResult>("EXEC @returnValue = [dbo].[USP_LAB_SAMPLE_GETDetail] @LanguageID, @SampleID, @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_SAMPLE_GETListResult>> USP_LAB_SAMPLE_GETListAsync(string LanguageID, long? SampleID, long? ParentSampleID, int? DaysFromAccessionDate, string SampleList, bool? TestUnassignedIndicator, bool? TestCompletedIndicator, bool? FiltrationIndicator, long? UserID, long? UserEmployeeID, long? UserSiteID, long? UserOrganizationID, long? UserSiteGroupID, string SortColumn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleID",
                    Value = SampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ParentSampleID",
                    Value = ParentSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DaysFromAccessionDate",
                    Value = DaysFromAccessionDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SampleList",
                    Size = -1,
                    Value = SampleList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestUnassignedIndicator",
                    Value = TestUnassignedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "TestCompletedIndicator",
                    Value = TestCompletedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FiltrationIndicator",
                    Value = FiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 200,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_SAMPLE_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_SAMPLE_GETList] @LanguageID, @SampleID, @ParentSampleID, @DaysFromAccessionDate, @SampleList, @TestUnassignedIndicator, @TestCompletedIndicator, @FiltrationIndicator, @UserID, @UserEmployeeID, @UserSiteID, @UserOrganizationID, @UserSiteGroupID, @SortColumn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_SAMPLE_GetListByBarCodesResult>> USP_LAB_SAMPLE_GetListByBarCodesAsync(string BarcodeList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "BarcodeList",
                    Size = -1,
                    Value = BarcodeList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_SAMPLE_GetListByBarCodesResult>("EXEC @returnValue = [dbo].[USP_LAB_SAMPLE_GetListByBarCodes] @BarcodeList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_SAMPLE_GROUP_ACCESSION_GETListResult>> USP_LAB_SAMPLE_GROUP_ACCESSION_GETListAsync(string LanguageID, string EIDSSLocalOrFieldSampleIDList, long? SentToOrganizationID, long? UserID, long? UserEmployeeID, long? UserSiteID, long? UserOrganizationID, long? UserSiteGroupID, int? Page, int? PageSize, string SortColumn, string SortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLocalOrFieldSampleIDList",
                    Size = -1,
                    Value = EIDSSLocalOrFieldSampleIDList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SentToOrganizationID",
                    Value = SentToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Page",
                    Value = Page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 200,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 4,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_SAMPLE_GROUP_ACCESSION_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_SAMPLE_GROUP_ACCESSION_GETList] @LanguageID, @EIDSSLocalOrFieldSampleIDList, @SentToOrganizationID, @UserID, @UserEmployeeID, @UserSiteID, @UserOrganizationID, @UserSiteGroupID, @Page, @PageSize, @SortColumn, @SortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_SAMPLE_ID_GETListResult>> USP_LAB_SAMPLE_ID_GETListAsync(string Samples, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "Samples",
                    Size = -1,
                    Value = Samples ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_SAMPLE_ID_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_SAMPLE_ID_GETList] @Samples", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_SAMPLE_SEARCH_GETListResult>> USP_LAB_SAMPLE_SEARCH_GETListAsync(string LanguageID, string SearchString, bool? AccessionedIndicator, bool? TestUnassignedIndicator, bool? TestCompletedIndicator, long? UserID, long? UserEmployeeID, long? UserOrganizationID, long? UserSiteID, int? DaysFromAccessionDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchString",
                    Size = 4000,
                    Value = SearchString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessionedIndicator",
                    Value = AccessionedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "TestUnassignedIndicator",
                    Value = TestUnassignedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "TestCompletedIndicator",
                    Value = TestCompletedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DaysFromAccessionDate",
                    Value = DaysFromAccessionDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_SAMPLE_SEARCH_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_SAMPLE_SEARCH_GETList] @LanguageID, @SearchString, @AccessionedIndicator, @TestUnassignedIndicator, @TestCompletedIndicator, @UserID, @UserEmployeeID, @UserOrganizationID, @UserSiteID, @DaysFromAccessionDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_SETResult>> USP_LAB_SETAsync(string Samples, string BatchTests, string Tests, string TestAmendments, string Transfers, string FreezerBoxLocationAvailabilities, string Events, long? UserID, string Favorites, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "Samples",
                    Size = -1,
                    Value = Samples ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BatchTests",
                    Size = -1,
                    Value = BatchTests ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Tests",
                    Size = -1,
                    Value = Tests ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestAmendments",
                    Size = -1,
                    Value = TestAmendments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Transfers",
                    Size = -1,
                    Value = Transfers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FreezerBoxLocationAvailabilities",
                    Size = -1,
                    Value = FreezerBoxLocationAvailabilities ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Favorites",
                    Value = Favorites ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Xml,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_SETResult>("EXEC @returnValue = [dbo].[USP_LAB_SET] @Samples, @BatchTests, @Tests, @TestAmendments, @Transfers, @FreezerBoxLocationAvailabilities, @Events, @UserID, @Favorites, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_TAB_COUNTS_GETListResult>> USP_LAB_TAB_COUNTS_GETListAsync(int? DaysFromAccessionDate, long? UserID, long? UserEmployeeID, long? UserSiteID, long? UserOrganizationID, long? UserSiteGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "DaysFromAccessionDate",
                    Value = DaysFromAccessionDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_TAB_COUNTS_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_TAB_COUNTS_GETList] @DaysFromAccessionDate, @UserID, @UserEmployeeID, @UserSiteID, @UserOrganizationID, @UserSiteGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_TEST_ADVANCED_SEARCH_GETListResult>> USP_LAB_TEST_ADVANCED_SEARCH_GETListAsync(string LanguageID, long? ReportOrSessionTypeID, long? SurveillanceTypeID, string SampleStatusTypeList, string AccessionedIndicatorList, string EIDSSLocalOrFieldSampleID, string EIDSSReportCampaignOrSessionID, long? SentToOrganizationID, long? SentToOrganizationSiteID, long? TransferredToOrganizationID, string EIDSSTransferID, long? ResultsReceivedFromID, DateTime? DateFrom, DateTime? DateTo, string EIDSSLaboratorySampleID, long? SampleTypeID, long? TestNameTypeID, long? DiseaseID, long? TestStatusTypeID, long? TestResultTypeID, DateTime? TestResultDateFrom, DateTime? TestResultDateTo, string PatientName, string FarmOwnerName, long? SpeciesTypeID, string TestList, bool? BatchTestAssociationIndicator, bool? FiltrationIndicator, long? UserID, long? UserEmployeeID, long? UserSiteID, long? UserOrganizationID, long? UserSiteGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportOrSessionTypeID",
                    Value = ReportOrSessionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SurveillanceTypeID",
                    Value = SurveillanceTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SampleStatusTypeList",
                    Size = -1,
                    Value = SampleStatusTypeList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessionedIndicatorList",
                    Size = 3,
                    Value = AccessionedIndicatorList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLocalOrFieldSampleID",
                    Size = 400,
                    Value = EIDSSLocalOrFieldSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSReportCampaignOrSessionID",
                    Size = 400,
                    Value = EIDSSReportCampaignOrSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SentToOrganizationID",
                    Value = SentToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SentToOrganizationSiteID",
                    Value = SentToOrganizationSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TransferredToOrganizationID",
                    Value = TransferredToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSTransferID",
                    Size = 400,
                    Value = EIDSSTransferID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ResultsReceivedFromID",
                    Value = ResultsReceivedFromID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLaboratorySampleID",
                    Size = 400,
                    Value = EIDSSLaboratorySampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleTypeID",
                    Value = SampleTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestNameTypeID",
                    Value = TestNameTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestStatusTypeID",
                    Value = TestStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultTypeID",
                    Value = TestResultTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultDateFrom",
                    Value = TestResultDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultDateTo",
                    Value = TestResultDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 400,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerName",
                    Size = 400,
                    Value = FarmOwnerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SpeciesTypeID",
                    Value = SpeciesTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestList",
                    Size = -1,
                    Value = TestList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BatchTestAssociationIndicator",
                    Value = BatchTestAssociationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FiltrationIndicator",
                    Value = FiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_TEST_ADVANCED_SEARCH_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList] @LanguageID, @ReportOrSessionTypeID, @SurveillanceTypeID, @SampleStatusTypeList, @AccessionedIndicatorList, @EIDSSLocalOrFieldSampleID, @EIDSSReportCampaignOrSessionID, @SentToOrganizationID, @SentToOrganizationSiteID, @TransferredToOrganizationID, @EIDSSTransferID, @ResultsReceivedFromID, @DateFrom, @DateTo, @EIDSSLaboratorySampleID, @SampleTypeID, @TestNameTypeID, @DiseaseID, @TestStatusTypeID, @TestResultTypeID, @TestResultDateFrom, @TestResultDateTo, @PatientName, @FarmOwnerName, @SpeciesTypeID, @TestList, @BatchTestAssociationIndicator, @FiltrationIndicator, @UserID, @UserEmployeeID, @UserSiteID, @UserOrganizationID, @UserSiteGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_TEST_AMENDMENT_GETListResult>> USP_LAB_TEST_AMENDMENT_GETListAsync(string LanguageID, long? TestID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestID",
                    Value = TestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_TEST_AMENDMENT_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_TEST_AMENDMENT_GETList] @LanguageID, @TestID, @PageNumber, @PageSize, @SortColumn, @SortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_TEST_GETDetailResult>> USP_LAB_TEST_GETDetailAsync(string LanguageID, long? TestID, long? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestID",
                    Value = TestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_TEST_GETDetailResult>("EXEC @returnValue = [dbo].[USP_LAB_TEST_GETDetail] @LanguageID, @TestID, @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_TEST_GETListResult>> USP_LAB_TEST_GETListAsync(string LanguageID, long? TestStatusTypeID, long? SampleID, long? TestID, long? BatchTestID, string TestList, int? DaysFromAccessionDate, bool? FiltrationIndicator, long? UserID, long? UserEmployeeID, long? UserOrganizationID, long? UserSiteID, long? UserSiteGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TestStatusTypeID",
                    Value = TestStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SampleID",
                    Value = SampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestID",
                    Value = TestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BatchTestID",
                    Value = BatchTestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestList",
                    Size = -1,
                    Value = TestList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DaysFromAccessionDate",
                    Value = DaysFromAccessionDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FiltrationIndicator",
                    Value = FiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_TEST_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_TEST_GETList] @LanguageID, @TestStatusTypeID, @SampleID, @TestID, @BatchTestID, @TestList, @DaysFromAccessionDate, @FiltrationIndicator, @UserID, @UserEmployeeID, @UserOrganizationID, @UserSiteID, @UserSiteGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_TEST_SEARCH_GETListResult>> USP_LAB_TEST_SEARCH_GETListAsync(string LanguageID, string SearchString, bool? AccessionedIndicator, long? UserID, long? UserEmployeeID, long? UserOrganizationID, long? UserSiteID, int? DaysFromAccessionDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchString",
                    Size = 4000,
                    Value = SearchString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessionedIndicator",
                    Value = AccessionedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DaysFromAccessionDate",
                    Value = DaysFromAccessionDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_TEST_SEARCH_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_TEST_SEARCH_GETList] @LanguageID, @SearchString, @AccessionedIndicator, @UserID, @UserEmployeeID, @UserOrganizationID, @UserSiteID, @DaysFromAccessionDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_TRANSFER_ADVANCED_SEARCH_GETListResult>> USP_LAB_TRANSFER_ADVANCED_SEARCH_GETListAsync(string LanguageID, long? ReportOrSessionTypeID, long? SurveillanceTypeID, string SampleStatusTypeList, string AccessionedIndicatorList, string EIDSSLocalOrFieldSampleID, string EIDSSReportCampaignOrSessionID, long? SentToOrganizationID, long? SentToOrganizationSiteID, long? TransferredToOrganizationID, string EIDSSTransferID, long? ResultsReceivedFromID, DateTime? DateFrom, DateTime? DateTo, string EIDSSLaboratorySampleID, long? SampleTypeID, long? TestNameTypeID, string TestNameTypeName, long? DiseaseID, long? TestStatusTypeID, long? TestResultTypeID, DateTime? TestResultDateFrom, DateTime? TestResultDateTo, string PatientName, string FarmOwnerName, long? SpeciesTypeID, string TransferList, bool? FiltrationIndicator, long? UserID, long? UserEmployeeID, long? UserSiteID, long? UserOrganizationID, long? UserSiteGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportOrSessionTypeID",
                    Value = ReportOrSessionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SurveillanceTypeID",
                    Value = SurveillanceTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SampleStatusTypeList",
                    Size = -1,
                    Value = SampleStatusTypeList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessionedIndicatorList",
                    Size = 3,
                    Value = AccessionedIndicatorList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLocalOrFieldSampleID",
                    Size = 400,
                    Value = EIDSSLocalOrFieldSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSReportCampaignOrSessionID",
                    Size = 400,
                    Value = EIDSSReportCampaignOrSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SentToOrganizationID",
                    Value = SentToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SentToOrganizationSiteID",
                    Value = SentToOrganizationSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TransferredToOrganizationID",
                    Value = TransferredToOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSTransferID",
                    Size = 400,
                    Value = EIDSSTransferID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ResultsReceivedFromID",
                    Value = ResultsReceivedFromID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSLaboratorySampleID",
                    Size = 400,
                    Value = EIDSSLaboratorySampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleTypeID",
                    Value = SampleTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestNameTypeID",
                    Value = TestNameTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestNameTypeName",
                    Size = 400,
                    Value = TestNameTypeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestStatusTypeID",
                    Value = TestStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultTypeID",
                    Value = TestResultTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultDateFrom",
                    Value = TestResultDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TestResultDateTo",
                    Value = TestResultDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PatientName",
                    Size = 400,
                    Value = PatientName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerName",
                    Size = 400,
                    Value = FarmOwnerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SpeciesTypeID",
                    Value = SpeciesTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TransferList",
                    Size = -1,
                    Value = TransferList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FiltrationIndicator",
                    Value = FiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_TRANSFER_ADVANCED_SEARCH_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList] @LanguageID, @ReportOrSessionTypeID, @SurveillanceTypeID, @SampleStatusTypeList, @AccessionedIndicatorList, @EIDSSLocalOrFieldSampleID, @EIDSSReportCampaignOrSessionID, @SentToOrganizationID, @SentToOrganizationSiteID, @TransferredToOrganizationID, @EIDSSTransferID, @ResultsReceivedFromID, @DateFrom, @DateTo, @EIDSSLaboratorySampleID, @SampleTypeID, @TestNameTypeID, @TestNameTypeName, @DiseaseID, @TestStatusTypeID, @TestResultTypeID, @TestResultDateFrom, @TestResultDateTo, @PatientName, @FarmOwnerName, @SpeciesTypeID, @TransferList, @FiltrationIndicator, @UserID, @UserEmployeeID, @UserSiteID, @UserOrganizationID, @UserSiteGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_TRANSFER_GETDetailResult>> USP_LAB_TRANSFER_GETDetailAsync(string LanguageID, long? TransferID, long? UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransferID",
                    Value = TransferID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_TRANSFER_GETDetailResult>("EXEC @returnValue = [dbo].[USP_LAB_TRANSFER_GETDetail] @LanguageID, @TransferID, @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_TRANSFER_GETListResult>> USP_LAB_TRANSFER_GETListAsync(string LanguageID, long? SampleID, bool? FiltrationIndicator, long? UserID, long? UserEmployeeID, long? UserSiteID, long? UserOrganizationID, long? UserSiteGroupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleID",
                    Value = SampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FiltrationIndicator",
                    Value = FiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteGroupID",
                    Value = UserSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_TRANSFER_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_TRANSFER_GETList] @LanguageID, @SampleID, @FiltrationIndicator, @UserID, @UserEmployeeID, @UserSiteID, @UserOrganizationID, @UserSiteGroupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_LAB_TRANSFER_SEARCH_GETListResult>> USP_LAB_TRANSFER_SEARCH_GETListAsync(string LanguageID, string SearchString, bool? AccessionedIndicator, long? UserID, long? UserEmployeeID, long? UserOrganizationID, long? UserSiteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchString",
                    Size = 4000,
                    Value = SearchString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessionedIndicator",
                    Value = AccessionedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_LAB_TRANSFER_SEARCH_GETListResult>("EXEC @returnValue = [dbo].[USP_LAB_TRANSFER_SEARCH_GETList] @LanguageID, @SearchString, @AccessionedIndicator, @UserID, @UserEmployeeID, @UserOrganizationID, @UserSiteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Case_GetDetailResult>> USP_OMM_Case_GetDetailAsync(string LanguageID, long? OutbreakCaseReportUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseReportUID",
                    Value = OutbreakCaseReportUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Case_GetDetailResult>("EXEC @returnValue = [dbo].[USP_OMM_Case_GetDetail] @LanguageID, @OutbreakCaseReportUID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Case_GetListResult>> USP_OMM_Case_GetListAsync(string LanguageID, long? OutbreakID, string SearchTerm, long? HumanMasterID, long? FarmMasterID, bool? TodaysFollowUpsIndicator, int? Page, int? PageSize, string SortColumn, string SortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakID",
                    Value = OutbreakID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 200,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HumanMasterID",
                    Value = HumanMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmMasterID",
                    Value = FarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TodaysFollowUpsIndicator",
                    Value = TodaysFollowUpsIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Page",
                    Value = Page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Case_GetListResult>("EXEC @returnValue = [dbo].[USP_OMM_Case_GetList] @LanguageID, @OutbreakID, @SearchTerm, @HumanMasterID, @FarmMasterID, @TodaysFollowUpsIndicator, @Page, @PageSize, @SortColumn, @SortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_CASE_MONITORING_GETListResult>> USP_OMM_CASE_MONITORING_GETListAsync(string LanguageId, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? CaseId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageId",
                    Size = 100,
                    Value = LanguageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaseId",
                    Value = CaseId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_CASE_MONITORING_GETListResult>("EXEC @returnValue = [dbo].[USP_OMM_CASE_MONITORING_GETList] @LanguageId, @PageNumber, @PageSize, @SortColumn, @SortOrder, @CaseId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Case_QuickSetResult>> USP_OMM_Case_QuickSetAsync(string CaseIdentifiers, long? StatusTypeId, long? ClassificationTypeId, string CaseMonitorings, string Events, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "CaseIdentifiers",
                    Size = -1,
                    Value = CaseIdentifiers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusTypeId",
                    Value = StatusTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ClassificationTypeId",
                    Value = ClassificationTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CaseMonitorings",
                    Size = -1,
                    Value = CaseMonitorings ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Case_QuickSetResult>("EXEC @returnValue = [dbo].[USP_OMM_Case_QuickSet] @CaseIdentifiers, @StatusTypeId, @ClassificationTypeId, @CaseMonitorings, @Events, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Case_SetResult>> USP_OMM_Case_SetAsync(string LangID, int? intRowStatus, string User, long? OutbreakCaseReportUID, long? idfOutbreak, long? idfHumanCase, long? idfVetCase, long? OutbreakCaseObservationID, long? idfHumanActual, long? idfsDiagnosisOrDiagnosisGroup, DateTime? datNotificationDate, long? idfSentByOffice, long? idfSentByPerson, long? idfReceivedByOffice, long? idfReceivedByPerson, long? CaseGeoLocationID, long? CaseidfsLocation, string CasestrStreetName, string CasestrApartment, string CasestrBuilding, string CasestrHouse, string CaseidfsPostalCode, double? CasestrLatitude, double? CasestrLongitude, double? CasestrElevation, long? CaseStatusID, DateTime? datOnSetDate, DateTime? datFinalDiagnosisDate, long? idfHospital, string? strHospitalName, DateTime? datHospitalizationDate, DateTime? datDischargeDate, string Antimicrobials, string vaccinations, string strClinicalNotes, long? idfsYNHospitalization, long? idfsYNAntimicrobialTherapy, long? idfsYNSpecIFicVaccinationAdministered, DateTime? StartDateofInvestigation, long? idfCSObservation, long? OutbreakCaseClassificationID, long? idfInvestigatedByOffice, long? idfInvestigatedByPerson, DateTime? datInvestigationStartDate, string IsPrimaryCaseFlag, string strNote, long? idfEpiObservation, string CaseMonitorings, string CaseContacts, long? idfsYNSpecimenCollected, string CaseSamples, long? idfsYNTestsConducted, string CaseTests, string Events, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 200,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseReportUID",
                    Value = OutbreakCaseReportUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfOutbreak",
                    Value = idfOutbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfHumanCase",
                    Value = idfHumanCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVetCase",
                    Value = idfVetCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseObservationID",
                    Value = OutbreakCaseObservationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfHumanActual",
                    Value = idfHumanActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosisOrDiagnosisGroup",
                    Value = idfsDiagnosisOrDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datNotificationDate",
                    Value = datNotificationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfSentByOffice",
                    Value = idfSentByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfSentByPerson",
                    Value = idfSentByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfReceivedByOffice",
                    Value = idfReceivedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfReceivedByPerson",
                    Value = idfReceivedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CaseGeoLocationID",
                    Value = CaseGeoLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CaseidfsLocation",
                    Value = CaseidfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CasestrStreetName",
                    Size = 400,
                    Value = CasestrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CasestrApartment",
                    Size = 400,
                    Value = CasestrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CasestrBuilding",
                    Size = 400,
                    Value = CasestrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CasestrHouse",
                    Size = 400,
                    Value = CasestrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaseidfsPostalCode",
                    Size = 400,
                    Value = CaseidfsPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CasestrLatitude",
                    Value = CasestrLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "CasestrLongitude",
                    Value = CasestrLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "CasestrElevation",
                    Value = CasestrElevation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "CaseStatusID",
                    Value = CaseStatusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datOnSetDate",
                    Value = datOnSetDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datFinalDiagnosisDate",
                    Value = datFinalDiagnosisDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfHospital",
                    Value = idfHospital ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strHospitalName",
                    Size = 200,
                    Value = strHospitalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "datHospitalizationDate",
                    Value = datHospitalizationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datDischargeDate",
                    Value = datDischargeDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Antimicrobials",
                    Size = -1,
                    Value = Antimicrobials ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vaccinations",
                    Size = -1,
                    Value = vaccinations ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strClinicalNotes",
                    Size = 1000,
                    Value = strClinicalNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNHospitalization",
                    Value = idfsYNHospitalization ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNAntimicrobialTherapy",
                    Value = idfsYNAntimicrobialTherapy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNSpecIFicVaccinationAdministered",
                    Value = idfsYNSpecIFicVaccinationAdministered ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StartDateofInvestigation",
                    Value = StartDateofInvestigation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfCSObservation",
                    Value = idfCSObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseClassificationID",
                    Value = OutbreakCaseClassificationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfInvestigatedByOffice",
                    Value = idfInvestigatedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfInvestigatedByPerson",
                    Value = idfInvestigatedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datInvestigationStartDate",
                    Value = datInvestigationStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IsPrimaryCaseFlag",
                    Size = 2,
                    Value = IsPrimaryCaseFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strNote",
                    Size = 1000,
                    Value = strNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfEpiObservation",
                    Value = idfEpiObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CaseMonitorings",
                    Size = -1,
                    Value = CaseMonitorings ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaseContacts",
                    Size = -1,
                    Value = CaseContacts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNSpecimenCollected",
                    Value = idfsYNSpecimenCollected ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CaseSamples",
                    Size = -1,
                    Value = CaseSamples ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsYNTestsConducted",
                    Value = idfsYNTestsConducted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CaseTests",
                    Size = -1,
                    Value = CaseTests ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Case_SetResult>("EXEC @returnValue = [dbo].[USP_OMM_Case_Set] @LangID, @intRowStatus, @User, @OutbreakCaseReportUID, @idfOutbreak, @idfHumanCase, @idfVetCase, @OutbreakCaseObservationID, @idfHumanActual, @idfsDiagnosisOrDiagnosisGroup, @datNotificationDate, @idfSentByOffice, @idfSentByPerson, @idfReceivedByOffice, @idfReceivedByPerson, @CaseGeoLocationID, @CaseidfsLocation, @CasestrStreetName, @CasestrApartment, @CasestrBuilding, @CasestrHouse, @CaseidfsPostalCode, @CasestrLatitude, @CasestrLongitude, @CasestrElevation, @CaseStatusID, @datOnSetDate, @datFinalDiagnosisDate, @idfHospital, @strHospitalName, @datHospitalizationDate, @datDischargeDate, @Antimicrobials, @vaccinations, @strClinicalNotes, @idfsYNHospitalization, @idfsYNAntimicrobialTherapy, @idfsYNSpecIFicVaccinationAdministered, @StartDateofInvestigation, @idfCSObservation, @OutbreakCaseClassificationID, @idfInvestigatedByOffice, @idfInvestigatedByPerson, @datInvestigationStartDate, @IsPrimaryCaseFlag, @strNote, @idfEpiObservation, @CaseMonitorings, @CaseContacts, @idfsYNSpecimenCollected, @CaseSamples, @idfsYNTestsConducted, @CaseTests, @Events", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_CaseSummary_GetDetailResult>> USP_OMM_CaseSummary_GetDetailAsync(string LangID, long? OutbreakCaseReportUID, long? idfHumanActual, long? idfFarmActual, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseReportUID",
                    Value = OutbreakCaseReportUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfHumanActual",
                    Value = idfHumanActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfFarmActual",
                    Value = idfFarmActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_CaseSummary_GetDetailResult>("EXEC @returnValue = [dbo].[USP_OMM_CaseSummary_GetDetail] @LangID, @OutbreakCaseReportUID, @idfHumanActual, @idfFarmActual", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Contact_GetDetailResult>> USP_OMM_Contact_GetDetailAsync(string LangID, long? OutbreakCaseContactUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseContactUID",
                    Value = OutbreakCaseContactUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Contact_GetDetailResult>("EXEC @returnValue = [dbo].[USP_OMM_Contact_GetDetail] @LangID, @OutbreakCaseContactUID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Contact_GetListResult>> USP_OMM_Contact_GetListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? CaseID, long? OutbreakID, string SearchTerm, bool? TodaysFollowUpsIndicator, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaseID",
                    Value = CaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakID",
                    Value = OutbreakID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 200,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TodaysFollowUpsIndicator",
                    Value = TodaysFollowUpsIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Contact_GetListResult>("EXEC @returnValue = [dbo].[USP_OMM_Contact_GetList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @CaseID, @OutbreakID, @SearchTerm, @TodaysFollowUpsIndicator", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Contact_SetResult>> USP_OMM_Contact_SetAsync(string Contacts, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "Contacts",
                    Size = -1,
                    Value = Contacts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Contact_SetResult>("EXEC @returnValue = [dbo].[USP_OMM_Contact_Set] @Contacts, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_FlexForm_SetResult>> USP_OMM_FlexForm_SetAsync(long? idfsFormTemplate, long? idfOutbreakSpeciesParameterUID, string strFormCategory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfOutbreakSpeciesParameterUID",
                    Value = idfOutbreakSpeciesParameterUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strFormCategory",
                    Size = 40,
                    Value = strFormCategory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_FlexForm_SetResult>("EXEC @returnValue = [dbo].[USP_OMM_FlexForm_Set] @idfsFormTemplate, @idfOutbreakSpeciesParameterUID, @strFormCategory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_HeatMapResult>> USP_OMM_HeatMapAsync(long? OutbreakId, string CaseType, long? DiseaseReportId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "OutbreakId",
                    Value = OutbreakId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CaseType",
                    Size = 3,
                    Value = CaseType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReportId",
                    Value = DiseaseReportId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_HeatMapResult>("EXEC @returnValue = [dbo].[USP_OMM_HeatMap] @OutbreakId, @CaseType, @DiseaseReportId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Herd_GetListResult>> USP_OMM_Herd_GetListAsync(string LangID, long? idfFarmActual, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfFarmActual",
                    Value = idfFarmActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Herd_GetListResult>("EXEC @returnValue = [dbo].[USP_OMM_Herd_GetList] @LangID, @idfFarmActual", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_HerdSpecies_SetResult>> USP_OMM_HerdSpecies_SetAsync(string LangID, long? idfFarmActual, string Herds, string Species, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfFarmActual",
                    Value = idfFarmActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Herds",
                    Size = -1,
                    Value = Herds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Species",
                    Size = -1,
                    Value = Species ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_HerdSpecies_SetResult>("EXEC @returnValue = [dbo].[USP_OMM_HerdSpecies_Set] @LangID, @idfFarmActual, @Herds, @Species", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_HUMAN_Case_GetDetailResult>> USP_OMM_HUMAN_Case_GetDetailAsync(string LangID, long? OutbreakCaseReportUID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseReportUID",
                    Value = OutbreakCaseReportUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_HUMAN_Case_GetDetailResult>("EXEC @returnValue = [dbo].[USP_OMM_HUMAN_Case_GetDetail] @LangID, @OutbreakCaseReportUID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Note_File_GetResult>> USP_OMM_Note_File_GetAsync(long? idfOutbreakNote, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfOutbreakNote",
                    Value = idfOutbreakNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Note_File_GetResult>("EXEC @returnValue = [dbo].[USP_OMM_Note_File_Get] @idfOutbreakNote", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Session_DelResult>> USP_OMM_Session_DelAsync(long? idfOutbreak, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfOutbreak",
                    Value = idfOutbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Session_DelResult>("EXEC @returnValue = [dbo].[USP_OMM_Session_Del] @idfOutbreak", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Session_GetDetailResult>> USP_OMM_Session_GetDetailAsync(string LangID, long? idfOutbreak, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfOutbreak",
                    Value = idfOutbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Session_GetDetailResult>("EXEC @returnValue = [dbo].[USP_OMM_Session_GetDetail] @LangID, @idfOutbreak", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Session_GetListResult>> USP_OMM_Session_GetListAsync(string LanguageID, string OutbreakID, long? OutbreakTypeID, long? SearchDiagnosesGroup, DateTime? StartDateFrom, DateTime? StartDateTo, long? OutbreakStatusTypeID, long? AdministrativeLevelID, string QuickSearch, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, string SortColumn, string SortOrder, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakID",
                    Size = 400,
                    Value = OutbreakID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakTypeID",
                    Value = OutbreakTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchDiagnosesGroup",
                    Value = SearchDiagnosesGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StartDateFrom",
                    Value = StartDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "StartDateTo",
                    Value = StartDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakStatusTypeID",
                    Value = OutbreakStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelID",
                    Value = AdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "QuickSearch",
                    Size = 400,
                    Value = QuickSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Session_GetListResult>("EXEC @returnValue = [dbo].[USP_OMM_Session_GetList] @LanguageID, @OutbreakID, @OutbreakTypeID, @SearchDiagnosesGroup, @StartDateFrom, @StartDateTo, @OutbreakStatusTypeID, @AdministrativeLevelID, @QuickSearch, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplySiteFiltrationIndicator, @SortColumn, @SortOrder, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_SESSION_Note_DeleteResult>> USP_OMM_SESSION_Note_DeleteAsync(long? idfOutbreakNote, bool? deleteFileObjectOnly, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfOutbreakNote",
                    Value = idfOutbreakNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteFileObjectOnly",
                    Value = deleteFileObjectOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 100,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_SESSION_Note_DeleteResult>("EXEC @returnValue = [dbo].[USP_OMM_SESSION_Note_Delete] @idfOutbreakNote, @deleteFileObjectOnly, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Session_Note_GetDetailResult>> USP_OMM_Session_Note_GetDetailAsync(string LangID, long? idfOutbreakNote, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfOutbreakNote",
                    Value = idfOutbreakNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Session_Note_GetDetailResult>("EXEC @returnValue = [dbo].[USP_OMM_Session_Note_GetDetail] @LangID, @idfOutbreakNote", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Session_Note_GetListResult>> USP_OMM_Session_Note_GetListAsync(string LangID, long? idfOutbreak, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfOutbreak",
                    Value = idfOutbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Session_Note_GetListResult>("EXEC @returnValue = [dbo].[USP_OMM_Session_Note_GetList] @LangID, @idfOutbreak", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_SESSION_Note_SetResult>> USP_OMM_SESSION_Note_SetAsync(string LangID, long? idfOutbreakNote, long? idfOutbreak, string strNote, long? idfPerson, int? intRowStatus, string strMaintenanceFlag, string strReservedAttribute, long? UpdatePriorityID, string UpdateRecordTitle, string UploadFileName, string UploadFileDescription, byte[] UploadFileObject, string DeleteAttachment, string User, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfOutbreakNote",
                    Value = idfOutbreakNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfOutbreak",
                    Value = idfOutbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strNote",
                    Size = 4000,
                    Value = strNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfPerson",
                    Value = idfPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "strMaintenanceFlag",
                    Size = 40,
                    Value = strMaintenanceFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strReservedAttribute",
                    Size = -1,
                    Value = strReservedAttribute ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatePriorityID",
                    Value = UpdatePriorityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UpdateRecordTitle",
                    Size = 400,
                    Value = UpdateRecordTitle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UploadFileName",
                    Size = 400,
                    Value = UploadFileName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UploadFileDescription",
                    Size = 400,
                    Value = UploadFileDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UploadFileObject",
                    Size = -1,
                    Value = UploadFileObject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteAttachment",
                    Size = 1,
                    Value = DeleteAttachment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 400,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_SESSION_Note_SetResult>("EXEC @returnValue = [dbo].[USP_OMM_SESSION_Note_Set] @LangID, @idfOutbreakNote, @idfOutbreak, @strNote, @idfPerson, @intRowStatus, @strMaintenanceFlag, @strReservedAttribute, @UpdatePriorityID, @UpdateRecordTitle, @UploadFileName, @UploadFileDescription, @UploadFileObject, @DeleteAttachment, @User", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Session_Parameters_GetListResult>> USP_OMM_Session_Parameters_GetListAsync(string LangID, long? idfOutbreak, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfOutbreak",
                    Value = idfOutbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Session_Parameters_GetListResult>("EXEC @returnValue = [dbo].[USP_OMM_Session_Parameters_GetList] @LangID, @idfOutbreak", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Session_SetResult>> USP_OMM_Session_SetAsync(long? idfOutbreak, long? idfsDiagnosisOrDiagnosisGroup, long? idfsOutbreakStatus, long? OutbreakTypeId, long? idfsLocation, DateTime? datStartDate, DateTime? datCloseDate, string strOutbreakID, string strDescription, int? intRowStatus, DateTime? datModificationForArchiveDate, long? idfPrimaryCaseOrSession, long? idfsSite, string outbreakParameters, string User, string Events, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfOutbreak",
                    Value = idfOutbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosisOrDiagnosisGroup",
                    Value = idfsDiagnosisOrDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsOutbreakStatus",
                    Value = idfsOutbreakStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakTypeId",
                    Value = OutbreakTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocation",
                    Value = idfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datStartDate",
                    Value = datStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datCloseDate",
                    Value = datCloseDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strOutbreakID",
                    Size = 400,
                    Value = strOutbreakID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strDescription",
                    Size = 4000,
                    Value = strDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intRowStatus",
                    Value = intRowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "datModificationForArchiveDate",
                    Value = datModificationForArchiveDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfPrimaryCaseOrSession",
                    Value = idfPrimaryCaseOrSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "outbreakParameters",
                    Size = -1,
                    Value = outbreakParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "User",
                    Size = 400,
                    Value = User ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Session_SetResult>("EXEC @returnValue = [dbo].[USP_OMM_Session_Set] @idfOutbreak, @idfsDiagnosisOrDiagnosisGroup, @idfsOutbreakStatus, @OutbreakTypeId, @idfsLocation, @datStartDate, @datCloseDate, @strOutbreakID, @strDescription, @intRowStatus, @datModificationForArchiveDate, @idfPrimaryCaseOrSession, @idfsSite, @outbreakParameters, @User, @Events", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Species_GetListResult>> USP_OMM_Species_GetListAsync(string LangID, long? idfFarmActual, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfFarmActual",
                    Value = idfFarmActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Species_GetListResult>("EXEC @returnValue = [dbo].[USP_OMM_Species_GetList] @LangID, @idfFarmActual", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_Vector_GetListResult>> USP_OMM_Vector_GetListAsync(string LanguageID, long? OutbreakKey, string SearchTerm, string SortColumn, string SortOrder, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakKey",
                    Value = OutbreakKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = -1,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_Vector_GetListResult>("EXEC @returnValue = [dbo].[USP_OMM_Vector_GetList] @LanguageID, @OutbreakKey, @SearchTerm, @SortColumn, @SortOrder, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_OMM_VET_CASE_GETListResult>> USP_OMM_VET_CASE_GETListAsync(string LanguageID, long? CaseKey, string CaseID, string LegacyCaseID, long? SessionKey, long? FarmMasterID, long? DiseaseID, long? ReportStatusTypeID, long? AdministrativeLevelID, DateTime? DateEnteredFrom, DateTime? DateEnteredTo, long? ClassificationTypeID, string PersonID, long? ReportTypeID, long? SpeciesTypeID, DateTime? DiagnosisDateFrom, DateTime? DiagnosisDateTo, DateTime? InvestigationDateFrom, DateTime? InvestigationDateTo, string LocalOrFieldSampleID, int? TotalAnimalQuantityFrom, int? TotalAnimalQuantityTo, string SessionID, long? DataEntrySiteID, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, string SortColumn, string SortOrder, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaseKey",
                    Value = CaseKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CaseID",
                    Size = 400,
                    Value = CaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LegacyCaseID",
                    Size = 400,
                    Value = LegacyCaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionKey",
                    Value = SessionKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmMasterID",
                    Value = FarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportStatusTypeID",
                    Value = ReportStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelID",
                    Value = AdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateEnteredFrom",
                    Value = DateEnteredFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DateEnteredTo",
                    Value = DateEnteredTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ClassificationTypeID",
                    Value = ClassificationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PersonID",
                    Size = 400,
                    Value = PersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportTypeID",
                    Value = ReportTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SpeciesTypeID",
                    Value = SpeciesTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisDateFrom",
                    Value = DiagnosisDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisDateTo",
                    Value = DiagnosisDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "InvestigationDateFrom",
                    Value = InvestigationDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "InvestigationDateTo",
                    Value = InvestigationDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "LocalOrFieldSampleID",
                    Size = 400,
                    Value = LocalOrFieldSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TotalAnimalQuantityFrom",
                    Value = TotalAnimalQuantityFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TotalAnimalQuantityTo",
                    Value = TotalAnimalQuantityTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Size = 400,
                    Value = SessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataEntrySiteID",
                    Value = DataEntrySiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_OMM_VET_CASE_GETListResult>("EXEC @returnValue = [dbo].[USP_OMM_VET_CASE_GETList] @LanguageID, @CaseKey, @CaseID, @LegacyCaseID, @SessionKey, @FarmMasterID, @DiseaseID, @ReportStatusTypeID, @AdministrativeLevelID, @DateEnteredFrom, @DateEnteredTo, @ClassificationTypeID, @PersonID, @ReportTypeID, @SpeciesTypeID, @DiagnosisDateFrom, @DiagnosisDateTo, @InvestigationDateFrom, @InvestigationDateTo, @LocalOrFieldSampleID, @TotalAnimalQuantityFrom, @TotalAnimalQuantityTo, @SessionID, @DataEntrySiteID, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplySiteFiltrationIndicator, @SortColumn, @SortOrder, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_PersonGetListResult>> usp_PersonGetListAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_PersonGetListResult>("EXEC @returnValue = [dbo].[usp_PersonGetList] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_PIN_Audit_SetResult>> USP_PIN_Audit_SetAsync(string strPIN, long? idfUser, long? idfsSite, long? idfHumanCase, long? idfH0Form, DateTime? datEIDSSAccessAttempt, DateTime? datPINAccessAttempt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strPIN",
                    Size = 11,
                    Value = strPIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "idfUser",
                    Value = idfUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSite",
                    Value = idfsSite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfHumanCase",
                    Value = idfHumanCase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfH0Form",
                    Value = idfH0Form ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datEIDSSAccessAttempt",
                    Value = datEIDSSAccessAttempt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datPINAccessAttempt",
                    Value = datPINAccessAttempt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_PIN_Audit_SetResult>("EXEC @returnValue = [dbo].[USP_PIN_Audit_Set] @strPIN, @idfUser, @idfsSite, @idfHumanCase, @idfH0Form, @datEIDSSAccessAttempt, @datPINAccessAttempt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_AccessRule_SETResult>> USP_REF_AccessRule_SETAsync(long? AccessRuleID, string AccessRuleName, string strNationalName, string LangId, int? intOrder, bool? BorderingAreaRuleIndicator, bool? DefaultRuleIndicator, bool? ReciprocalRuleIndicator, long? GrantingActorSiteGroupID, long? GrantingActorSiteID, bool? AccessToPersonalDataPermissionIndicator, bool? AccessToGenderAndAgeDataPermissionIndicator, bool? CreatePermissionIndicator, bool? DeletePermissionIndicator, bool? ReadPermissionIndicator, bool? WritePermissionIndicator, long? AdministrativeLevelTypeID, int? RowStatus, string ReceivingActors, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "AccessRuleID",
                    Value = AccessRuleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AccessRuleName",
                    Size = 200,
                    Value = AccessRuleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strNationalName",
                    Size = 400,
                    Value = strNationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BorderingAreaRuleIndicator",
                    Value = BorderingAreaRuleIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultRuleIndicator",
                    Value = DefaultRuleIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalRuleIndicator",
                    Value = ReciprocalRuleIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GrantingActorSiteGroupID",
                    Value = GrantingActorSiteGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "GrantingActorSiteID",
                    Value = GrantingActorSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AccessToPersonalDataPermissionIndicator",
                    Value = AccessToPersonalDataPermissionIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "AccessToGenderAndAgeDataPermissionIndicator",
                    Value = AccessToGenderAndAgeDataPermissionIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatePermissionIndicator",
                    Value = CreatePermissionIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DeletePermissionIndicator",
                    Value = DeletePermissionIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ReadPermissionIndicator",
                    Value = ReadPermissionIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "WritePermissionIndicator",
                    Value = WritePermissionIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelTypeID",
                    Value = AdministrativeLevelTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivingActors",
                    Size = -1,
                    Value = ReceivingActors ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 400,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_AccessRule_SETResult>("EXEC @returnValue = [dbo].[USP_REF_AccessRule_SET] @AccessRuleID, @AccessRuleName, @strNationalName, @LangId, @intOrder, @BorderingAreaRuleIndicator, @DefaultRuleIndicator, @ReciprocalRuleIndicator, @GrantingActorSiteGroupID, @GrantingActorSiteID, @AccessToPersonalDataPermissionIndicator, @AccessToGenderAndAgeDataPermissionIndicator, @CreatePermissionIndicator, @DeletePermissionIndicator, @ReadPermissionIndicator, @WritePermissionIndicator, @AdministrativeLevelTypeID, @RowStatus, @ReceivingActors, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_AGEGROUP_CANDELResult>> USP_REF_AGEGROUP_CANDELAsync(long? idfsAgeGroup, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsAgeGroup",
                    Value = idfsAgeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_AGEGROUP_CANDELResult>("EXEC @returnValue = [dbo].[USP_REF_AGEGROUP_CANDEL] @idfsAgeGroup", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_AGEGROUP_DELResult>> USP_REF_AGEGROUP_DELAsync(long? idfsAgeGroup, bool? deleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsAgeGroup",
                    Value = idfsAgeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_AGEGROUP_DELResult>("EXEC @returnValue = [dbo].[USP_REF_AGEGROUP_DEL] @idfsAgeGroup, @deleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_AGEGROUP_DOESEXISTResult>> USP_REF_AGEGROUP_DOESEXISTAsync(string strName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 100,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_AGEGROUP_DOESEXISTResult>("EXEC @returnValue = [dbo].[USP_REF_AGEGROUP_DOESEXIST] @strName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_AGEGROUP_GETListResult>> USP_REF_AGEGROUP_GETListAsync(string langID, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langID",
                    Size = 100,
                    Value = langID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_AGEGROUP_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_AGEGROUP_GETList] @langID, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_AGEGROUP_SETResult>> USP_REF_AGEGROUP_SETAsync(long? idfsAgeGroup, string strDefault, string strName, int? intLowerBoundary, int? intUpperBoundary, long? idfsAgeType, string LangID, int? intOrder, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsAgeGroup",
                    Value = idfsAgeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 400,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 400,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intLowerBoundary",
                    Value = intLowerBoundary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intUpperBoundary",
                    Value = intUpperBoundary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfsAgeType",
                    Value = idfsAgeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_AGEGROUP_SETResult>("EXEC @returnValue = [dbo].[USP_REF_AGEGROUP_SET] @idfsAgeGroup, @strDefault, @strName, @intLowerBoundary, @intUpperBoundary, @idfsAgeType, @LangID, @intOrder, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_BASEREFERENCE_DELResult>> USP_REF_BASEREFERENCE_DELAsync(long? idfsBaseReference, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsBaseReference",
                    Value = idfsBaseReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_BASEREFERENCE_DELResult>("EXEC @returnValue = [dbo].[USP_REF_BASEREFERENCE_DEL] @idfsBaseReference, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_BASEREFERENCE_Filtered_GETListResult>> USP_REF_BASEREFERENCE_Filtered_GETListAsync(long? idfsReferenceType, string langID, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsReferenceType",
                    Value = idfsReferenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "langID",
                    Size = 100,
                    Value = langID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_BASEREFERENCE_Filtered_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_BASEREFERENCE_Filtered_GETList] @idfsReferenceType, @langID, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_BASEREFERENCE_GETListResult>> USP_REF_BASEREFERENCE_GETListAsync(long? idfsReferenceType, string langID, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsReferenceType",
                    Value = idfsReferenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "langID",
                    Size = 100,
                    Value = langID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_BASEREFERENCE_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_BASEREFERENCE_GETList] @idfsReferenceType, @langID, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_BASEREFERENCE_SETResult>> USP_REF_BASEREFERENCE_SETAsync(long? idfsBaseReference, long? idfsReferenceType, string LangID, string strDefault, string strName, int? HACode, int? Order, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, string LOINC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsBaseReference",
                    Value = idfsBaseReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsReferenceType",
                    Value = idfsReferenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 200,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 400,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HACode",
                    Value = HACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Order",
                    Value = Order ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LOINC",
                    Size = 400,
                    Value = LOINC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_BASEREFERENCE_SETResult>("EXEC @returnValue = [dbo].[USP_REF_BASEREFERENCE_SET] @idfsBaseReference, @idfsReferenceType, @LangID, @strDefault, @strName, @HACode, @Order, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName, @LOINC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_CASECLASSIFICATION_CANDELResult>> USP_REF_CASECLASSIFICATION_CANDELAsync(long? idfsCaseClassification, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsCaseClassification",
                    Value = idfsCaseClassification ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_CASECLASSIFICATION_CANDELResult>("EXEC @returnValue = [dbo].[USP_REF_CASECLASSIFICATION_CANDEL] @idfsCaseClassification", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_CASECLASSIFICATION_DELResult>> USP_REF_CASECLASSIFICATION_DELAsync(long? IdfsCaseClassification, bool? DeleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "IdfsCaseClassification",
                    Value = IdfsCaseClassification ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteAnyway",
                    Value = DeleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_CASECLASSIFICATION_DELResult>("EXEC @returnValue = [dbo].[USP_REF_CASECLASSIFICATION_DEL] @IdfsCaseClassification, @DeleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_CASECLASSIFICATION_DOESEXISTResult>> USP_REF_CASECLASSIFICATION_DOESEXISTAsync(string strName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 100,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_CASECLASSIFICATION_DOESEXISTResult>("EXEC @returnValue = [dbo].[USP_REF_CASECLASSIFICATION_DOESEXIST] @strName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_CASECLASSIFICATION_GETListResult>> USP_REF_CASECLASSIFICATION_GETListAsync(string langID, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langID",
                    Size = 100,
                    Value = langID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_CASECLASSIFICATION_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_CASECLASSIFICATION_GETList] @langID, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_CASECLASSIFICATION_SETResult>> USP_REF_CASECLASSIFICATION_SETAsync(long? idfsCaseClassification, string strDefault, string strName, bool? blnInitialHumanCaseClassification, bool? blnFinalHumanCaseClassification, string LangID, int? intOrder, int? intHACode, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsCaseClassification",
                    Value = idfsCaseClassification ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 400,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 400,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "blnInitialHumanCaseClassification",
                    Value = blnInitialHumanCaseClassification ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "blnFinalHumanCaseClassification",
                    Value = blnFinalHumanCaseClassification ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_CASECLASSIFICATION_SETResult>("EXEC @returnValue = [dbo].[USP_REF_CASECLASSIFICATION_SET] @idfsCaseClassification, @strDefault, @strName, @blnInitialHumanCaseClassification, @blnFinalHumanCaseClassification, @LangID, @intOrder, @intHACode, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_DIAGNOSISREFERENCE_CANDELResult>> USP_REF_DIAGNOSISREFERENCE_CANDELAsync(long? idfsDiagnosis, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_DIAGNOSISREFERENCE_CANDELResult>("EXEC @returnValue = [dbo].[USP_REF_DIAGNOSISREFERENCE_CANDEL] @idfsDiagnosis", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_DIAGNOSISREFERENCE_DELResult>> USP_REF_DIAGNOSISREFERENCE_DELAsync(long? IdfsDiagnosis, bool? ForceDelete, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "IdfsDiagnosis",
                    Value = IdfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ForceDelete",
                    Value = ForceDelete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_DIAGNOSISREFERENCE_DELResult>("EXEC @returnValue = [dbo].[USP_REF_DIAGNOSISREFERENCE_DEL] @IdfsDiagnosis, @ForceDelete, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_DIAGNOSISREFERENCE_DOESEXISTResult>> USP_REF_DIAGNOSISREFERENCE_DOESEXISTAsync(string strName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 100,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_DIAGNOSISREFERENCE_DOESEXISTResult>("EXEC @returnValue = [dbo].[USP_REF_DIAGNOSISREFERENCE_DOESEXIST] @strName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_DIAGNOSISREFERENCE_GETDetailResult>> USP_REF_DIAGNOSISREFERENCE_GETDetailAsync(long? idfsDiagnosis, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_DIAGNOSISREFERENCE_GETDetailResult>("EXEC @returnValue = [dbo].[USP_REF_DIAGNOSISREFERENCE_GETDetail] @idfsDiagnosis, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_DIAGNOSISREFERENCE_GETListResult>> USP_REF_DIAGNOSISREFERENCE_GETListAsync(string LangID, string search, long? AccessoryCode, int? pageNo, int? pageSize, string sortColumn, string sortOrder, string advancedSearch, long? UserEmployeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "search",
                    Size = 100,
                    Value = search ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessoryCode",
                    Value = AccessoryCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_DIAGNOSISREFERENCE_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_DIAGNOSISREFERENCE_GETList] @LangID, @search, @AccessoryCode, @pageNo, @pageSize, @sortColumn, @sortOrder, @advancedSearch, @UserEmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_DIAGNOSISREFERENCE_SETResult>> USP_REF_DIAGNOSISREFERENCE_SETAsync(long? idfsDiagnosis, string strDefault, string strName, string strOIECode, string strIDC10, int? intHACode, long? idfsUsingType, string strPensideTest, string strLabTest, string strSampleType, bool? blnZoonotic, bool? blnSyndrome, string LangId, int? intOrder, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 200,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 400,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strOIECode",
                    Size = 400,
                    Value = strOIECode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strIDC10",
                    Size = 400,
                    Value = strIDC10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfsUsingType",
                    Value = idfsUsingType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strPensideTest",
                    Size = -1,
                    Value = strPensideTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strLabTest",
                    Size = -1,
                    Value = strLabTest ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSampleType",
                    Size = -1,
                    Value = strSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "blnZoonotic",
                    Value = blnZoonotic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "blnSyndrome",
                    Value = blnSyndrome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_DIAGNOSISREFERENCE_SETResult>("EXEC @returnValue = [dbo].[USP_REF_DIAGNOSISREFERENCE_SET] @idfsDiagnosis, @strDefault, @strName, @strOIECode, @strIDC10, @intHACode, @idfsUsingType, @strPensideTest, @strLabTest, @strSampleType, @blnZoonotic, @blnSyndrome, @LangId, @intOrder, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_LKUP_BASE_REFERENCE_GETListResult>> USP_REF_LKUP_BASE_REFERENCE_GETListAsync(long? idfsReferenceType, string langID, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsReferenceType",
                    Value = idfsReferenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "langID",
                    Size = 100,
                    Value = langID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_LKUP_BASE_REFERENCE_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_LKUP_BASE_REFERENCE_GETList] @idfsReferenceType, @langID, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_LKUP_CASECLASSIFICATIONResult>> USP_REF_LKUP_CASECLASSIFICATIONAsync(string langID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langID",
                    Size = 100,
                    Value = langID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_LKUP_CASECLASSIFICATIONResult>("EXEC @returnValue = [dbo].[USP_REF_LKUP_CASECLASSIFICATION] @langID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_MEASURELIST_DOESEXISTResult>> USP_REF_MEASURELIST_DOESEXISTAsync(string strName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 100,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_MEASURELIST_DOESEXISTResult>("EXEC @returnValue = [dbo].[USP_REF_MEASURELIST_DOESEXIST] @strName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_MEASURELIST_GETListResult>> USP_REF_MEASURELIST_GETListAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_MEASURELIST_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_MEASURELIST_GETList] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_MEASUREREFEFENCE_CANDELResult>> USP_REF_MEASUREREFEFENCE_CANDELAsync(long? idfsAction, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsAction",
                    Value = idfsAction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_MEASUREREFEFENCE_CANDELResult>("EXEC @returnValue = [dbo].[USP_REF_MEASUREREFEFENCE_CANDEL] @idfsAction", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_MEASUREREFEFENCE_DELResult>> USP_REF_MEASUREREFEFENCE_DELAsync(long? IdfsAction, long? IdfsMeasureList, bool? DeleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "IdfsAction",
                    Value = IdfsAction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdfsMeasureList",
                    Value = IdfsMeasureList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteAnyway",
                    Value = DeleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_MEASUREREFEFENCE_DELResult>("EXEC @returnValue = [dbo].[USP_REF_MEASUREREFEFENCE_DEL] @IdfsAction, @IdfsMeasureList, @DeleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_MEASUREREFERENCE_GETListResult>> USP_REF_MEASUREREFERENCE_GETListAsync(string LangID, long? idfsActionList, int? pageNo, int? pageSize, string sortColumn, string sortOrder, string advancedSearch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsActionList",
                    Value = idfsActionList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_MEASUREREFERENCE_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_MEASUREREFERENCE_GETList] @LangID, @idfsActionList, @pageNo, @pageSize, @sortColumn, @sortOrder, @advancedSearch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_MEASUREREFERENCE_SETResult>> USP_REF_MEASUREREFERENCE_SETAsync(long? idfsBaseReference, long? idfsReferenceType, string strDefault, string strName, string strActionCode, int? intOrder, string LangID, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsBaseReference",
                    Value = idfsBaseReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsReferenceType",
                    Value = idfsReferenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 200,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 400,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strActionCode",
                    Size = 400,
                    Value = strActionCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_MEASUREREFERENCE_SETResult>("EXEC @returnValue = [dbo].[USP_REF_MEASUREREFERENCE_SET] @idfsBaseReference, @idfsReferenceType, @strDefault, @strName, @strActionCode, @intOrder, @LangID, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_REPORTDIAGNOSISGROUP_CANDELResult>> USP_REF_REPORTDIAGNOSISGROUP_CANDELAsync(long? idfsReportDiagnosisGroup, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsReportDiagnosisGroup",
                    Value = idfsReportDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_REPORTDIAGNOSISGROUP_CANDELResult>("EXEC @returnValue = [dbo].[USP_REF_REPORTDIAGNOSISGROUP_CANDEL] @idfsReportDiagnosisGroup", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_REPORTDIAGNOSISGROUP_DELResult>> USP_REF_REPORTDIAGNOSISGROUP_DELAsync(long? idfsReportDiagnosisGroup, bool? DeleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsReportDiagnosisGroup",
                    Value = idfsReportDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteAnyway",
                    Value = DeleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_REPORTDIAGNOSISGROUP_DELResult>("EXEC @returnValue = [dbo].[USP_REF_REPORTDIAGNOSISGROUP_DEL] @idfsReportDiagnosisGroup, @DeleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_REPORTDIAGNOSISGROUP_DOESEXISTResult>> USP_REF_REPORTDIAGNOSISGROUP_DOESEXISTAsync(string strName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 100,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_REPORTDIAGNOSISGROUP_DOESEXISTResult>("EXEC @returnValue = [dbo].[USP_REF_REPORTDIAGNOSISGROUP_DOESEXIST] @strName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_ReportDiagnosisGroup_GETListResult>> USP_REF_ReportDiagnosisGroup_GETListAsync(string langID, string strSearch, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langID",
                    Size = 100,
                    Value = langID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSearch",
                    Size = 200,
                    Value = strSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_ReportDiagnosisGroup_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_ReportDiagnosisGroup_GETList] @langID, @strSearch, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_REPORTDIAGNOSISGROUP_SETResult>> USP_REF_REPORTDIAGNOSISGROUP_SETAsync(long? idfsReportDiagnosisGroup, string strDefault, string strName, string strCode, string LangID, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsReportDiagnosisGroup",
                    Value = idfsReportDiagnosisGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = -1,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = -1,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strCode",
                    Size = 1000,
                    Value = strCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_REPORTDIAGNOSISGROUP_SETResult>("EXEC @returnValue = [dbo].[USP_REF_REPORTDIAGNOSISGROUP_SET] @idfsReportDiagnosisGroup, @strDefault, @strName, @strCode, @LangID, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SampleType_GetDetailResult>> USP_REF_SampleType_GetDetailAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SampleType_GetDetailResult>("EXEC @returnValue = [dbo].[USP_REF_SampleType_GetDetail] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SAMPLETYPEREFERENCE_CANDELResult>> USP_REF_SAMPLETYPEREFERENCE_CANDELAsync(long? idfsSampleType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsSampleType",
                    Value = idfsSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SAMPLETYPEREFERENCE_CANDELResult>("EXEC @returnValue = [dbo].[USP_REF_SAMPLETYPEREFERENCE_CANDEL] @idfsSampleType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SAMPLETYPEREFERENCE_DELResult>> USP_REF_SAMPLETYPEREFERENCE_DELAsync(long? IdfsSampleType, bool? DeleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "IdfsSampleType",
                    Value = IdfsSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteAnyway",
                    Value = DeleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SAMPLETYPEREFERENCE_DELResult>("EXEC @returnValue = [dbo].[USP_REF_SAMPLETYPEREFERENCE_DEL] @IdfsSampleType, @DeleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SAMPLETYPEREFERENCE_DOESEXISTResult>> USP_REF_SAMPLETYPEREFERENCE_DOESEXISTAsync(string strName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 100,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SAMPLETYPEREFERENCE_DOESEXISTResult>("EXEC @returnValue = [dbo].[USP_REF_SAMPLETYPEREFERENCE_DOESEXIST] @strName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SampleTypeReference_GetListResult>> USP_REF_SampleTypeReference_GetListAsync(string langID, string strSearchSampleType, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, int? intHACode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langID",
                    Size = 100,
                    Value = langID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSearchSampleType",
                    Size = 100,
                    Value = strSearchSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SampleTypeReference_GetListResult>("EXEC @returnValue = [dbo].[USP_REF_SampleTypeReference_GetList] @langID, @strSearchSampleType, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder, @intHACode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SAMPLETYPEREFERENCE_SETResult>> USP_REF_SAMPLETYPEREFERENCE_SETAsync(long? IdfsSampleType, string strDefault, string strName, string strSampleCode, string LOINC_NUM, int? intHACode, int? intOrder, string LangID, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "IdfsSampleType",
                    Value = IdfsSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 200,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 400,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSampleCode",
                    Size = 100,
                    Value = strSampleCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LOINC_NUM",
                    Size = 510,
                    Value = LOINC_NUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SAMPLETYPEREFERENCE_SETResult>("EXEC @returnValue = [dbo].[USP_REF_SAMPLETYPEREFERENCE_SET] @IdfsSampleType, @strDefault, @strName, @strSampleCode, @LOINC_NUM, @intHACode, @intOrder, @LangID, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SearchDuplicates_GetListResult>> USP_REF_SearchDuplicates_GetListAsync(string LangId, long? idfsBaseReferenceType, string strDefault, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangId",
                    Size = 100,
                    Value = LangId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsBaseReferenceType",
                    Value = idfsBaseReferenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 400,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SearchDuplicates_GetListResult>("EXEC @returnValue = [dbo].[USP_REF_SearchDuplicates_GetList] @LangId, @idfsBaseReferenceType, @strDefault", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SPECIESTYPE_DELResult>> USP_REF_SPECIESTYPE_DELAsync(long? IdfsSpeciesType, bool? DeleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "IdfsSpeciesType",
                    Value = IdfsSpeciesType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteAnyway",
                    Value = DeleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SPECIESTYPE_DELResult>("EXEC @returnValue = [dbo].[USP_REF_SPECIESTYPE_DEL] @IdfsSpeciesType, @DeleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SPECIESTYPE_DOESEXISTResult>> USP_REF_SPECIESTYPE_DOESEXISTAsync(string strName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 100,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SPECIESTYPE_DOESEXISTResult>("EXEC @returnValue = [dbo].[USP_REF_SPECIESTYPE_DOESEXIST] @strName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SPECIESTYPE_GETListResult>> USP_REF_SPECIESTYPE_GETListAsync(string langID, string strSpeciesType, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langID",
                    Size = 100,
                    Value = langID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSpeciesType",
                    Size = 100,
                    Value = strSpeciesType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SPECIESTYPE_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_SPECIESTYPE_GETList] @langID, @strSpeciesType, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SPECIESTYPE_SETResult>> USP_REF_SPECIESTYPE_SETAsync(long? IdfsSpeciesType, string strDefault, string strName, string strCode, int? intHACode, int? intOrder, string LangID, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "IdfsSpeciesType",
                    Value = IdfsSpeciesType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 200,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 400,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strCode",
                    Size = 100,
                    Value = strCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SPECIESTYPE_SETResult>("EXEC @returnValue = [dbo].[USP_REF_SPECIESTYPE_SET] @IdfsSpeciesType, @strDefault, @strName, @strCode, @intHACode, @intOrder, @LangID, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SPECIESTYPEREFERENCE_CANDELResult>> USP_REF_SPECIESTYPEREFERENCE_CANDELAsync(long? idfsSpeciesType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsSpeciesType",
                    Value = idfsSpeciesType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SPECIESTYPEREFERENCE_CANDELResult>("EXEC @returnValue = [dbo].[USP_REF_SPECIESTYPEREFERENCE_CANDEL] @idfsSpeciesType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SPECIESTYPEREFERENCE_SETResult>> USP_REF_SPECIESTYPEREFERENCE_SETAsync(long? idfsSpeciesType, string strDefault, string strName, string strCode, int? intHACode, int? intOrder, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsSpeciesType",
                    Value = idfsSpeciesType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 200,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 400,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strCode",
                    Size = 100,
                    Value = strCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intHACode",
                    Value = intHACode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SPECIESTYPEREFERENCE_SETResult>("EXEC @returnValue = [dbo].[USP_REF_SPECIESTYPEREFERENCE_SET] @idfsSpeciesType, @strDefault, @strName, @strCode, @intHACode, @intOrder, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_SPECIETYPE_DELResult>> USP_REF_SPECIETYPE_DELAsync(long? idfsSpeciesType, bool? deleteAnyway, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsSpeciesType",
                    Value = idfsSpeciesType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "deleteAnyway",
                    Value = deleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_SPECIETYPE_DELResult>("EXEC @returnValue = [dbo].[USP_REF_SPECIETYPE_DEL] @idfsSpeciesType, @deleteAnyway", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_STATISTICDATATYPE_CANDELResult>> USP_REF_STATISTICDATATYPE_CANDELAsync(long? idfsStatisticDataType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsStatisticDataType",
                    Value = idfsStatisticDataType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_STATISTICDATATYPE_CANDELResult>("EXEC @returnValue = [dbo].[USP_REF_STATISTICDATATYPE_CANDEL] @idfsStatisticDataType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_STATISTICDATATYPE_DELResult>> USP_REF_STATISTICDATATYPE_DELAsync(long? idfsStatisticDataType, bool? DeleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsStatisticDataType",
                    Value = idfsStatisticDataType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteAnyway",
                    Value = DeleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_STATISTICDATATYPE_DELResult>("EXEC @returnValue = [dbo].[USP_REF_STATISTICDATATYPE_DEL] @idfsStatisticDataType, @DeleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_STATISTICDATATYPE_DOESEXISTResult>> USP_REF_STATISTICDATATYPE_DOESEXISTAsync(string strName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 100,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_STATISTICDATATYPE_DOESEXISTResult>("EXEC @returnValue = [dbo].[USP_REF_STATISTICDATATYPE_DOESEXIST] @strName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_STATISTICDATATYPE_GETDetailResult>> USP_REF_STATISTICDATATYPE_GETDetailAsync(string LangID, long? idfsStatisticDataType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsStatisticDataType",
                    Value = idfsStatisticDataType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_STATISTICDATATYPE_GETDetailResult>("EXEC @returnValue = [dbo].[USP_REF_STATISTICDATATYPE_GETDetail] @LangID, @idfsStatisticDataType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_STATISTICDATATYPE_GETListResult>> USP_REF_STATISTICDATATYPE_GETListAsync(string langID, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, long? idfsStatisticDataType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langID",
                    Size = 100,
                    Value = langID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsStatisticDataType",
                    Value = idfsStatisticDataType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_STATISTICDATATYPE_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_STATISTICDATATYPE_GETList] @langID, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder, @idfsStatisticDataType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_STATISTICDATATYPE_SETResult>> USP_REF_STATISTICDATATYPE_SETAsync(long? idfsStatisticDataType, string strDefault, string strName, long? idfsReferenceType, long? idfsStatisticPeriodType, long? idfsStatisticAreaType, bool? blnRelatedWithAgeGroup, string LangID, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsStatisticDataType",
                    Value = idfsStatisticDataType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 400,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 400,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsReferenceType",
                    Value = idfsReferenceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsStatisticPeriodType",
                    Value = idfsStatisticPeriodType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsStatisticAreaType",
                    Value = idfsStatisticAreaType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "blnRelatedWithAgeGroup",
                    Value = blnRelatedWithAgeGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_STATISTICDATATYPE_SETResult>("EXEC @returnValue = [dbo].[USP_REF_STATISTICDATATYPE_SET] @idfsStatisticDataType, @strDefault, @strName, @idfsReferenceType, @idfsStatisticPeriodType, @idfsStatisticAreaType, @blnRelatedWithAgeGroup, @LangID, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_StatisticType_GetDetailResult>> USP_REF_StatisticType_GetDetailAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_StatisticType_GetDetailResult>("EXEC @returnValue = [dbo].[USP_REF_StatisticType_GetDetail] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_VectorSubType_CANDELResult>> USP_REF_VectorSubType_CANDELAsync(long? idfsVectorSubType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVectorSubType",
                    Value = idfsVectorSubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_VectorSubType_CANDELResult>("EXEC @returnValue = [dbo].[USP_REF_VectorSubType_CANDEL] @idfsVectorSubType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_VectorSubType_DELResult>> USP_REF_VectorSubType_DELAsync(long? idfsVectorSubType, bool? DeleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVectorSubType",
                    Value = idfsVectorSubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteAnyway",
                    Value = DeleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_VectorSubType_DELResult>("EXEC @returnValue = [dbo].[USP_REF_VectorSubType_DEL] @idfsVectorSubType, @DeleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_VECTORSUBTYPE_DOESEXISTResult>> USP_REF_VECTORSUBTYPE_DOESEXISTAsync(string strName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 100,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_VECTORSUBTYPE_DOESEXISTResult>("EXEC @returnValue = [dbo].[USP_REF_VECTORSUBTYPE_DOESEXIST] @strName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_VectorSubType_GETListResult>> USP_REF_VectorSubType_GETListAsync(string LangID, long? idfsVectorType, string strVectorSubType, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVectorType",
                    Value = idfsVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strVectorSubType",
                    Size = 100,
                    Value = strVectorSubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_VectorSubType_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_VectorSubType_GETList] @LangID, @idfsVectorType, @strVectorSubType, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_VectorSubType_SETResult>> USP_REF_VectorSubType_SETAsync(long? idfsVectorSubType, long? idfsVectorType, string strName, string strDefault, string strCode, int? intOrder, string LangID, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVectorSubType",
                    Value = idfsVectorSubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVectorType",
                    Value = idfsVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 400,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 200,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strCode",
                    Size = 50,
                    Value = strCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_VectorSubType_SETResult>("EXEC @returnValue = [dbo].[USP_REF_VectorSubType_SET] @idfsVectorSubType, @idfsVectorType, @strName, @strDefault, @strCode, @intOrder, @LangID, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_VECTORTYPE_DOESEXISTResult>> USP_REF_VECTORTYPE_DOESEXISTAsync(string strName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 100,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_VECTORTYPE_DOESEXISTResult>("EXEC @returnValue = [dbo].[USP_REF_VECTORTYPE_DOESEXIST] @strName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_VECTORTYPEREFERENCE_CANDELResult>> USP_REF_VECTORTYPEREFERENCE_CANDELAsync(long? idfsVectorType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVectorType",
                    Value = idfsVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_VECTORTYPEREFERENCE_CANDELResult>("EXEC @returnValue = [dbo].[USP_REF_VECTORTYPEREFERENCE_CANDEL] @idfsVectorType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_VECTORTYPEREFERENCE_DELResult>> USP_REF_VECTORTYPEREFERENCE_DELAsync(long? idfsVectorType, bool? DeleteAnyway, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVectorType",
                    Value = idfsVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteAnyway",
                    Value = DeleteAnyway ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_VECTORTYPEREFERENCE_DELResult>("EXEC @returnValue = [dbo].[USP_REF_VECTORTYPEREFERENCE_DEL] @idfsVectorType, @DeleteAnyway, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_VectorTypeReference_GetDetailResult>> USP_REF_VectorTypeReference_GetDetailAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_VectorTypeReference_GetDetailResult>("EXEC @returnValue = [dbo].[USP_REF_VectorTypeReference_GetDetail] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_VECTORTYPEREFERENCE_GETListResult>> USP_REF_VECTORTYPEREFERENCE_GETListAsync(string langID, string strSearchVectorType, string advancedSearch, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "langID",
                    Size = 100,
                    Value = langID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strSearchVectorType",
                    Size = 100,
                    Value = strSearchVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advancedSearch",
                    Size = 200,
                    Value = advancedSearch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 60,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_VECTORTYPEREFERENCE_GETListResult>("EXEC @returnValue = [dbo].[USP_REF_VECTORTYPEREFERENCE_GETList] @langID, @strSearchVectorType, @advancedSearch, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REF_VECTORTYPEREFERENCE_SETResult>> USP_REF_VECTORTYPEREFERENCE_SETAsync(long? idfsVectorType, string strDefault, string strName, string strCode, bool? bitCollectionByPool, int? intOrder, string LangID, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVectorType",
                    Value = idfsVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strDefault",
                    Size = 200,
                    Value = strDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strName",
                    Size = 400,
                    Value = strName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strCode",
                    Size = 400,
                    Value = strCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bitCollectionByPool",
                    Value = bitCollectionByPool ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REF_VECTORTYPEREFERENCE_SETResult>("EXEC @returnValue = [dbo].[USP_REF_VECTORTYPEREFERENCE_SET] @idfsVectorType, @strDefault, @strName, @strCode, @bitCollectionByPool, @intOrder, @LangID, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_CurrentCountry_GETResult>> USP_REP_CurrentCountry_GETAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_CurrentCountry_GETResult>("EXEC @returnValue = [Report].[USP_REP_CurrentCountry_GET] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_GetCurrentCountryResult>> USP_REP_GetCurrentCountryAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 20,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_GetCurrentCountryResult>("EXEC @returnValue = [Report].[USP_REP_GetCurrentCountry] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_HUM_ComparitiveCounter_GETResult>> USP_REP_HUM_ComparitiveCounter_GETAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_HUM_ComparitiveCounter_GETResult>("EXEC @returnValue = [Report].[USP_REP_HUM_ComparitiveCounter_GET] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_HUM_ComparitiveCounter_GET_GGResult>> USP_REP_HUM_ComparitiveCounter_GET_GGAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_HUM_ComparitiveCounter_GET_GGResult>("EXEC @returnValue = [Report].[USP_REP_HUM_ComparitiveCounter_GET_GG] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_HUM_DateFieldSource_GETResult>> USP_REP_HUM_DateFieldSource_GETAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_HUM_DateFieldSource_GETResult>("EXEC @returnValue = [Report].[USP_REP_HUM_DateFieldSource_GET] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_HUM_TuberculosisDiagnosisSelectLookupResult>> USP_REP_HUM_TuberculosisDiagnosisSelectLookupAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 36,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_HUM_TuberculosisDiagnosisSelectLookupResult>("EXEC @returnValue = [Report].[USP_REP_HUM_TuberculosisDiagnosisSelectLookup] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_HUM_WhoMeaslesRubella_DiagnosisResult>> USP_REP_HUM_WhoMeaslesRubella_DiagnosisAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_HUM_WhoMeaslesRubella_DiagnosisResult>("EXEC @returnValue = [Report].[USP_REP_HUM_WhoMeaslesRubella_Diagnosis]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_Human_Aggregate_Disease_Summary_Report_DetailResult>> USP_REP_Human_Aggregate_Disease_Summary_Report_DetailAsync(string LangID, long? idfsAggrCaseType, string idfAggrCaseList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsAggrCaseType",
                    Value = idfsAggrCaseType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfAggrCaseList",
                    Size = -1,
                    Value = idfAggrCaseList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_Human_Aggregate_Disease_Summary_Report_DetailResult>("EXEC @returnValue = [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail] @LangID, @idfsAggrCaseType, @idfAggrCaseList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_LAB_AssignmentDiagnosticAZSendToLookupResult>> USP_REP_LAB_AssignmentDiagnosticAZSendToLookupAsync(string LangID, string CaseID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 20,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaseID",
                    Size = 36,
                    Value = CaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_LAB_AssignmentDiagnosticAZSendToLookupResult>("EXEC @returnValue = [Report].[USP_REP_LAB_AssignmentDiagnosticAZSendToLookup] @LangID, @CaseID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_LAB_TestingResultsDepartmentLookupResult>> USP_REP_LAB_TestingResultsDepartmentLookupAsync(string LangID, string SampleID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 20,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SampleID",
                    Size = 36,
                    Value = SampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_LAB_TestingResultsDepartmentLookupResult>("EXEC @returnValue = [Report].[USP_REP_LAB_TestingResultsDepartmentLookup] @LangID, @SampleID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_Languages_GETResult>> USP_REP_Languages_GETAsync(string strLanguage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "strLanguage",
                    Size = 100,
                    Value = strLanguage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_Languages_GETResult>("EXEC @returnValue = [dbo].[USP_REP_Languages_GET] @strLanguage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_MonthNames_GETResult>> USP_REP_MonthNames_GETAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_MonthNames_GETResult>("EXEC @returnValue = [dbo].[USP_REP_MonthNames_GET] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_Organization_GETResult>> USP_REP_Organization_GETAsync(long? idfPerson, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfPerson",
                    Value = idfPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_Organization_GETResult>("EXEC @returnValue = [Report].[USP_REP_Organization_GET] @idfPerson, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_Quarter_GGResult>> USP_REP_Quarter_GGAsync(string LangID, string Year, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 20,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Size = 4,
                    Value = Year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_Quarter_GGResult>("EXEC @returnValue = [Report].[USP_REP_Quarter_GG] @LangID, @Year", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_REPORT_AUDIT_SETResult>> USP_REP_REPORT_AUDIT_SETAsync(long? idfUserID, string strFirstName, string strMiddleName, string strLastName, string UserRole, string strOrganization, string strReportName, bool? idfIsSignatureIncluded, DateTime? datGeneratedDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfUserID",
                    Value = idfUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strFirstName",
                    Size = 512,
                    Value = strFirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strMiddleName",
                    Size = 512,
                    Value = strMiddleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strLastName",
                    Size = 512,
                    Value = strLastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserRole",
                    Size = 512,
                    Value = UserRole ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strOrganization",
                    Size = 512,
                    Value = strOrganization ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strReportName",
                    Size = 512,
                    Value = strReportName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfIsSignatureIncluded",
                    Value = idfIsSignatureIncluded ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "datGeneratedDate",
                    Value = datGeneratedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_REPORT_AUDIT_SETResult>("EXEC @returnValue = [dbo].[USP_REP_REPORT_AUDIT_SET] @idfUserID, @strFirstName, @strMiddleName, @strLastName, @UserRole, @strOrganization, @strReportName, @idfIsSignatureIncluded, @datGeneratedDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_ReportingPeriodResult>> USP_REP_ReportingPeriodAsync(string LangID, string Year, string ReportingPeriodType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 20,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Size = 4,
                    Value = Year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportingPeriodType",
                    Size = 20,
                    Value = ReportingPeriodType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_ReportingPeriodResult>("EXEC @returnValue = [Report].[USP_REP_ReportingPeriod] @LangID, @Year, @ReportingPeriodType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_ReportingPeriodTypeResult>> USP_REP_ReportingPeriodTypeAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 20,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_ReportingPeriodTypeResult>("EXEC @returnValue = [Report].[USP_REP_ReportingPeriodType] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_Reports_GetListResult>> USP_REP_Reports_GetListAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_Reports_GetListResult>("EXEC @returnValue = [Report].[USP_REP_Reports_GetList]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_SpeciesType_GetListResult>> USP_REP_SpeciesType_GetListAsync(string LangID, long? idfsDiagnosis, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_SpeciesType_GetListResult>("EXEC @returnValue = [dbo].[USP_REP_SpeciesType_GetList] @LangID, @idfsDiagnosis", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_VET_DateFieldSource_GETResult>> USP_REP_VET_DateFieldSource_GETAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_VET_DateFieldSource_GETResult>("EXEC @returnValue = [Report].[USP_REP_VET_DateFieldSource_GET] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_VET_NameOfInvestigationOrMeasureSelectLookupResult>> USP_REP_VET_NameOfInvestigationOrMeasureSelectLookupAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 36,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_VET_NameOfInvestigationOrMeasureSelectLookupResult>("EXEC @returnValue = [Report].[USP_REP_VET_NameOfInvestigationOrMeasureSelectLookup] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_VET_SummarySurveillanceTypeResult>> USP_REP_VET_SummarySurveillanceTypeAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_VET_SummarySurveillanceTypeResult>("EXEC @returnValue = [Report].[USP_REP_VET_SummarySurveillanceType] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_DetailResult>> USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_DetailAsync(string LangID, string idfAggrCaseList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfAggrCaseList",
                    Size = -1,
                    Value = idfAggrCaseList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_DetailResult>("EXEC @returnValue = [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail] @LangID, @idfAggrCaseList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_Veterinary_Aggregate_Disease_Summary_Report_DetailResult>> USP_REP_Veterinary_Aggregate_Disease_Summary_Report_DetailAsync(string LangID, long? idfsAggrCaseType, string idfAggrCaseList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsAggrCaseType",
                    Value = idfsAggrCaseType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfAggrCaseList",
                    Size = -1,
                    Value = idfAggrCaseList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_Veterinary_Aggregate_Disease_Summary_Report_DetailResult>("EXEC @returnValue = [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail] @LangID, @idfsAggrCaseType, @idfAggrCaseList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_DetailResult>> USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_DetailAsync(string LangID, string idfAggrCaseList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfAggrCaseList",
                    Size = -1,
                    Value = idfAggrCaseList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_DetailResult>("EXEC @returnValue = [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail] @LangID, @idfAggrCaseList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_DetailResult>> USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_DetailAsync(string LangID, string idfAggrCaseList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfAggrCaseList",
                    Size = -1,
                    Value = idfAggrCaseList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_DetailResult>("EXEC @returnValue = [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail] @LangID, @idfAggrCaseList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_REP_Years_GETResult>> USP_REP_Years_GETAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_REP_Years_GETResult>("EXEC @returnValue = [dbo].[USP_REP_Years_GET]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_SecurityConfiguration_GetResult>> USP_SecurityConfiguration_GetAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_SecurityConfiguration_GetResult>("EXEC @returnValue = [dbo].[USP_SecurityConfiguration_Get]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_SecurityConfiguration_SetResult>> USP_SecurityConfiguration_SetAsync(int? Id, int? MinPasswordLength, int? EnforcePasswordHistoryCount, int? MinPasswordAgeDays, bool? ForceUppercaseFlag, bool? ForceLowercaseFlag, bool? ForceNumberUsageFlag, bool? ForceSpecialCharactersFlag, bool? AllowUseOfSpaceFlag, bool? PreventSequentialCharacterFlag, bool? PreventUsernameUsageFlag, int? LockoutThld, int? MaxSessionLength, int? SesnIdleTimeoutWarnThldMins, int? SesnIdleCloseoutThldMins, int? SesnInactivityTimeOutMins, long? EventTypeId, long? SiteId, long? UserId, long? LocationId, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MinPasswordLength",
                    Value = MinPasswordLength ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EnforcePasswordHistoryCount",
                    Value = EnforcePasswordHistoryCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MinPasswordAgeDays",
                    Value = MinPasswordAgeDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ForceUppercaseFlag",
                    Value = ForceUppercaseFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ForceLowercaseFlag",
                    Value = ForceLowercaseFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ForceNumberUsageFlag",
                    Value = ForceNumberUsageFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ForceSpecialCharactersFlag",
                    Value = ForceSpecialCharactersFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "AllowUseOfSpaceFlag",
                    Value = AllowUseOfSpaceFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PreventSequentialCharacterFlag",
                    Value = PreventSequentialCharacterFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PreventUsernameUsageFlag",
                    Value = PreventUsernameUsageFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LockoutThld",
                    Value = LockoutThld ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MaxSessionLength",
                    Value = MaxSessionLength ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SesnIdleTimeoutWarnThldMins",
                    Value = SesnIdleTimeoutWarnThldMins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SesnIdleCloseoutThldMins",
                    Value = SesnIdleCloseoutThldMins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SesnInactivityTimeOutMins",
                    Value = SesnInactivityTimeOutMins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventTypeId",
                    Value = EventTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteId",
                    Value = SiteId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_SecurityConfiguration_SetResult>("EXEC @returnValue = [dbo].[USP_SecurityConfiguration_Set] @Id, @MinPasswordLength, @EnforcePasswordHistoryCount, @MinPasswordAgeDays, @ForceUppercaseFlag, @ForceLowercaseFlag, @ForceNumberUsageFlag, @ForceSpecialCharactersFlag, @AllowUseOfSpaceFlag, @PreventSequentialCharacterFlag, @PreventUsernameUsageFlag, @LockoutThld, @MaxSessionLength, @SesnIdleTimeoutWarnThldMins, @SesnIdleCloseoutThldMins, @SesnInactivityTimeOutMins, @EventTypeId, @SiteId, @UserId, @LocationId, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_SecuritySetConfigResult>> usp_SecuritySetConfigAsync(long? ID, int? intAccountLockTimeout, int? intAccountTryCount, int? intInactivityTimeout, int? intPasswordAge, int? intPasswordHistoryLength, int? intPasswordMinimalLength, int? intForcePasswordComplexity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "ID",
                    Value = ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intAccountLockTimeout",
                    Value = intAccountLockTimeout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intAccountTryCount",
                    Value = intAccountTryCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intInactivityTimeout",
                    Value = intInactivityTimeout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intPasswordAge",
                    Value = intPasswordAge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intPasswordHistoryLength",
                    Value = intPasswordHistoryLength ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intPasswordMinimalLength",
                    Value = intPasswordMinimalLength ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intForcePasswordComplexity",
                    Value = intForcePasswordComplexity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_SecuritySetConfigResult>("EXEC @returnValue = [dbo].[usp_SecuritySetConfig] @ID, @intAccountLockTimeout, @intAccountTryCount, @intInactivityTimeout, @intPasswordAge, @intPasswordHistoryLength, @intPasswordMinimalLength, @intForcePasswordComplexity", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_Settlement_GetLookupResult>> usp_Settlement_GetLookupAsync(string LangID, long? RayonID, long? ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RayonID",
                    Value = RayonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID",
                    Value = ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_Settlement_GetLookupResult>("EXEC @returnValue = [dbo].[usp_Settlement_GetLookup] @LangID, @RayonID, @ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_SettlementType_GetLookupResult>> usp_SettlementType_GetLookupAsync(string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_SettlementType_GetLookupResult>("EXEC @returnValue = [dbo].[usp_SettlementType_GetLookup] @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_SettlementType_SetResult>> usp_SettlementType_SetAsync(long? IdfsGISBaseReference, string LangID, string StrDefault, string StrNationalName, int? IntOrder, int? RowStatus, string UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "IdfsGISBaseReference",
                    Value = IdfsGISBaseReference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StrDefault",
                    Size = 200,
                    Value = StrDefault ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StrNationalName",
                    Size = 200,
                    Value = StrNationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IntOrder",
                    Value = IntOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 200,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_SettlementType_SetResult>("EXEC @returnValue = [dbo].[usp_SettlementType_Set] @IdfsGISBaseReference, @LangID, @StrDefault, @StrNationalName, @IntOrder, @RowStatus, @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VAS_MONITORING_SESSION_ACTION_GETListResult>> USP_VAS_MONITORING_SESSION_ACTION_GETListAsync(string LanguageID, long? MonitoringSessionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VAS_MONITORING_SESSION_ACTION_GETListResult>("EXEC @returnValue = [dbo].[USP_VAS_MONITORING_SESSION_ACTION_GETList] @LanguageID, @MonitoringSessionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VAS_MONITORING_SESSION_DELResult>> USP_VAS_MONITORING_SESSION_DELAsync(string LanguageID, long? MonitoringSessionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VAS_MONITORING_SESSION_DELResult>("EXEC @returnValue = [dbo].[USP_VAS_MONITORING_SESSION_DEL] @LanguageID, @MonitoringSessionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VAS_MONITORING_SESSION_GETDetailResult>> USP_VAS_MONITORING_SESSION_GETDetailAsync(string LanguageID, long? MonitoringSessionID, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplyFiltrationIndicator, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplyFiltrationIndicator",
                    Value = ApplyFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VAS_MONITORING_SESSION_GETDetailResult>("EXEC @returnValue = [dbo].[USP_VAS_MONITORING_SESSION_GETDetail] @LanguageID, @MonitoringSessionID, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplyFiltrationIndicator", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VAS_MONITORING_SESSION_GETListResult>> USP_VAS_MONITORING_SESSION_GETListAsync(string LanguageID, string SessionID, string LegacySessionID, string CampaignID, long? CampaignKey, long? SessionStatusTypeID, DateTime? DateEnteredFrom, DateTime? DateEnteredTo, long? AdministrativeLevelID, long? DiseaseID, long? SessionCategoryTypeID, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, string SortColumn, string SortOrder, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Size = 400,
                    Value = SessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LegacySessionID",
                    Size = 100,
                    Value = LegacySessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Size = 400,
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignKey",
                    Value = CampaignKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SessionStatusTypeID",
                    Value = SessionStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateEnteredFrom",
                    Value = DateEnteredFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateEnteredTo",
                    Value = DateEnteredTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelID",
                    Value = AdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SessionCategoryTypeID",
                    Value = SessionCategoryTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VAS_MONITORING_SESSION_GETListResult>("EXEC @returnValue = [dbo].[USP_VAS_MONITORING_SESSION_GETList] @LanguageID, @SessionID, @LegacySessionID, @CampaignID, @CampaignKey, @SessionStatusTypeID, @DateEnteredFrom, @DateEnteredTo, @AdministrativeLevelID, @DiseaseID, @SessionCategoryTypeID, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplySiteFiltrationIndicator, @SortColumn, @SortOrder, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VAS_MONITORING_SESSION_SAMPLE_GETListResult>> USP_VAS_MONITORING_SESSION_SAMPLE_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? MonitoringSessionID, long? ParentSampleID, long? RootSampleID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ParentSampleID",
                    Value = ParentSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RootSampleID",
                    Value = RootSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VAS_MONITORING_SESSION_SAMPLE_GETListResult>("EXEC @returnValue = [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @MonitoringSessionID, @ParentSampleID, @RootSampleID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VAS_MONITORING_SESSION_SAMPLE_TO_DISEASE_GETListResult>> USP_VAS_MONITORING_SESSION_SAMPLE_TO_DISEASE_GETListAsync(string LanguageID, long? MonitoringSessionID, long? SampleID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SampleID",
                    Value = SampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VAS_MONITORING_SESSION_SAMPLE_TO_DISEASE_GETListResult>("EXEC @returnValue = [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_TO_DISEASE_GETList] @LanguageID, @MonitoringSessionID, @SampleID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VAS_MONITORING_SESSION_SETResult>> USP_VAS_MONITORING_SESSION_SETAsync(long? MonitoringSessionID, string SessionID, DateTime? SessionStartDate, DateTime? SessionEndDate, long? SessionStatusTypeID, long? SessionCategoryID, long? SiteID, string LegacySessionID, long? CountryID, long? RegionID, long? RayonID, long? SettlementID, long? CampaignKey, string CampaignID, DateTime? DateEntered, long? EnteredByPersonID, int? RowStatus, long? ReportTypeID, string AuditUserName, string FlocksOrHerds, string DiseaseSpeciesSamples, string Species, string Animals, string Farms, string Samples, string SamplesToDiseases, string LaboratoryTests, string LaboratoryTestInterpretations, string Actions, string AggregateSummaryInfo, string AggregateSummaryDiseases, string FarmsAggregate, string FlocksOrHerdsAggregate, string SpeciesAggregate, string DiseaseReports, string Events, long? UserID, long? LocationID, bool? LinkLocalOrFieldSampleIDToReportID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Size = 400,
                    Value = SessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionStartDate",
                    Value = SessionStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SessionEndDate",
                    Value = SessionEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SessionStatusTypeID",
                    Value = SessionStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SessionCategoryID",
                    Value = SessionCategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LegacySessionID",
                    Size = 400,
                    Value = LegacySessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CountryID",
                    Value = CountryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RayonID",
                    Value = RayonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SettlementID",
                    Value = SettlementID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignKey",
                    Value = CampaignKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Size = 400,
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateEntered",
                    Value = DateEntered ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EnteredByPersonID",
                    Value = EnteredByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ReportTypeID",
                    Value = ReportTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FlocksOrHerds",
                    Size = -1,
                    Value = FlocksOrHerds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseSpeciesSamples",
                    Size = -1,
                    Value = DiseaseSpeciesSamples ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Species",
                    Size = -1,
                    Value = Species ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Animals",
                    Size = -1,
                    Value = Animals ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Farms",
                    Size = -1,
                    Value = Farms ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Samples",
                    Size = -1,
                    Value = Samples ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SamplesToDiseases",
                    Size = -1,
                    Value = SamplesToDiseases ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LaboratoryTests",
                    Size = -1,
                    Value = LaboratoryTests ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LaboratoryTestInterpretations",
                    Size = -1,
                    Value = LaboratoryTestInterpretations ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Actions",
                    Size = -1,
                    Value = Actions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AggregateSummaryInfo",
                    Size = -1,
                    Value = AggregateSummaryInfo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AggregateSummaryDiseases",
                    Size = -1,
                    Value = AggregateSummaryDiseases ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmsAggregate",
                    Size = -1,
                    Value = FarmsAggregate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FlocksOrHerdsAggregate",
                    Size = -1,
                    Value = FlocksOrHerdsAggregate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SpeciesAggregate",
                    Size = -1,
                    Value = SpeciesAggregate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReports",
                    Size = -1,
                    Value = DiseaseReports ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LocationID",
                    Value = LocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LinkLocalOrFieldSampleIDToReportID",
                    Value = LinkLocalOrFieldSampleIDToReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VAS_MONITORING_SESSION_SETResult>("EXEC @returnValue = [dbo].[USP_VAS_MONITORING_SESSION_SET] @MonitoringSessionID, @SessionID, @SessionStartDate, @SessionEndDate, @SessionStatusTypeID, @SessionCategoryID, @SiteID, @LegacySessionID, @CountryID, @RegionID, @RayonID, @SettlementID, @CampaignKey, @CampaignID, @DateEntered, @EnteredByPersonID, @RowStatus, @ReportTypeID, @AuditUserName, @FlocksOrHerds, @DiseaseSpeciesSamples, @Species, @Animals, @Farms, @Samples, @SamplesToDiseases, @LaboratoryTests, @LaboratoryTestInterpretations, @Actions, @AggregateSummaryInfo, @AggregateSummaryDiseases, @FarmsAggregate, @FlocksOrHerdsAggregate, @SpeciesAggregate, @DiseaseReports, @Events, @UserID, @LocationID, @LinkLocalOrFieldSampleIDToReportID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VAS_MONITORING_SESSION_SPECIES_TO_SAMPLE_TYPE_GETListResult>> USP_VAS_MONITORING_SESSION_SPECIES_TO_SAMPLE_TYPE_GETListAsync(string LanguageID, long? MonitoringSessionID, long? CampaignID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CampaignID",
                    Value = CampaignID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VAS_MONITORING_SESSION_SPECIES_TO_SAMPLE_TYPE_GETListResult>("EXEC @returnValue = [dbo].[USP_VAS_MONITORING_SESSION_SPECIES_TO_SAMPLE_TYPE_GETList] @LanguageID, @MonitoringSessionID, @CampaignID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VAS_MONITORING_SESSION_SUMMARY_GETListResult>> USP_VAS_MONITORING_SESSION_SUMMARY_GETListAsync(string LanguageID, long? MonitoringSessionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VAS_MONITORING_SESSION_SUMMARY_GETListResult>("EXEC @returnValue = [dbo].[USP_VAS_MONITORING_SESSION_SUMMARY_GETList] @LanguageID, @MonitoringSessionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VAS_MONITORING_SESSION_SUMMARY_TO_DISEASE_GETListResult>> USP_VAS_MONITORING_SESSION_SUMMARY_TO_DISEASE_GETListAsync(string LanguageID, long? MonitoringSessionSummaryID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionSummaryID",
                    Value = MonitoringSessionSummaryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VAS_MONITORING_SESSION_SUMMARY_TO_DISEASE_GETListResult>("EXEC @returnValue = [dbo].[USP_VAS_MONITORING_SESSION_SUMMARY_TO_DISEASE_GETList] @LanguageID, @MonitoringSessionSummaryID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VAS_MONITORING_SESSION_TEST_GETListResult>> USP_VAS_MONITORING_SESSION_TEST_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? MonitoringSessionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VAS_MONITORING_SESSION_TEST_GETListResult>("EXEC @returnValue = [dbo].[USP_VAS_MONITORING_SESSION_TEST_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @MonitoringSessionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VAS_MONITORING_SESSION_TO_DISEASE_GETListResult>> USP_VAS_MONITORING_SESSION_TO_DISEASE_GETListAsync(string LanguageID, long? MonitoringSessionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VAS_MONITORING_SESSION_TO_DISEASE_GETListResult>("EXEC @returnValue = [dbo].[USP_VAS_MONITORING_SESSION_TO_DISEASE_GETList] @LanguageID, @MonitoringSessionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_DetailedCollections_CopyResult>> USP_VCTS_DetailedCollections_CopyAsync(long? idfVector, bool? VectorData, bool? Samples, bool? Tests, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVector",
                    Value = idfVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VectorData",
                    Value = VectorData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Samples",
                    Value = Samples ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Tests",
                    Value = Tests ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_DetailedCollections_CopyResult>("EXEC @returnValue = [dbo].[USP_VCTS_DetailedCollections_Copy] @idfVector, @VectorData, @Samples, @Tests", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_FIELDTEST_DELResult>> USP_VCTS_FIELDTEST_DELAsync(long? idfTesting, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfTesting",
                    Value = idfTesting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_FIELDTEST_DELResult>("EXEC @returnValue = [dbo].[USP_VCTS_FIELDTEST_DEL] @idfTesting", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_FIELDTEST_GetDetailResult>> USP_VCTS_FIELDTEST_GetDetailAsync(string LangID, long? idfTesting, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfTesting",
                    Value = idfTesting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_FIELDTEST_GetDetailResult>("EXEC @returnValue = [dbo].[USP_VCTS_FIELDTEST_GetDetail] @LangID, @idfTesting", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_FIELDTEST_GetListResult>> USP_VCTS_FIELDTEST_GetListAsync(long? idfVector, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVector",
                    Value = idfVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_FIELDTEST_GetListResult>("EXEC @returnValue = [dbo].[USP_VCTS_FIELDTEST_GetList] @idfVector, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_LABTEST_GetListResult>> USP_VCTS_LABTEST_GetListAsync(long? idfVector, long? idfVectorSurveillanceSession, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVector",
                    Value = idfVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVectorSurveillanceSession",
                    Value = idfVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 20,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_LABTEST_GetListResult>("EXEC @returnValue = [dbo].[USP_VCTS_LABTEST_GetList] @idfVector, @idfVectorSurveillanceSession, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SAMPLE_DELResult>> USP_VCTS_SAMPLE_DELAsync(long? idfMaterial, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfMaterial",
                    Value = idfMaterial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SAMPLE_DELResult>("EXEC @returnValue = [dbo].[USP_VCTS_SAMPLE_DEL] @idfMaterial", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SAMPLE_GetDetailResult>> USP_VCTS_SAMPLE_GetDetailAsync(string LangID, long? idfVector, long? idfMaterial, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfVector",
                    Value = idfVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfMaterial",
                    Value = idfMaterial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SAMPLE_GetDetailResult>("EXEC @returnValue = [dbo].[USP_VCTS_SAMPLE_GetDetail] @LangID, @idfVector, @idfMaterial", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SAMPLE_GetListResult>> USP_VCTS_SAMPLE_GetListAsync(long? idfVector, string LangID, long? idfMaterial, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVector",
                    Value = idfVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfMaterial",
                    Value = idfMaterial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SAMPLE_GetListResult>("EXEC @returnValue = [dbo].[USP_VCTS_SAMPLE_GetList] @idfVector, @LangID, @idfMaterial", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SESSIONSUMMARY_DELResult>> USP_VCTS_SESSIONSUMMARY_DELAsync(long? idfsVSSessionSummary, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVSSessionSummary",
                    Value = idfsVSSessionSummary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SESSIONSUMMARY_DELResult>("EXEC @returnValue = [dbo].[USP_VCTS_SESSIONSUMMARY_DEL] @idfsVSSessionSummary", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SESSIONSUMMARY_DIAGNOSIS_SETResult>> USP_VCTS_SESSIONSUMMARY_DIAGNOSIS_SETAsync(long? idfsVSSessionSummary, long? idfDiagnosisVectorSurveillanceSession, string strVSSessionSummaryID, long? DiagnosisidfGeoLocation, DateTime? datSummaryCollectionDateTime, long? SummaryInfoSpecies, long? SummaryInfoSex, long? PoolsVectors, DataTable Diagnosis, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVSSessionSummary",
                    Value = idfsVSSessionSummary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfDiagnosisVectorSurveillanceSession",
                    Value = idfDiagnosisVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strVSSessionSummaryID",
                    Size = 400,
                    Value = strVSSessionSummaryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisidfGeoLocation",
                    Value = DiagnosisidfGeoLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datSummaryCollectionDateTime",
                    Value = datSummaryCollectionDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SummaryInfoSpecies",
                    Value = SummaryInfoSpecies ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SummaryInfoSex",
                    Value = SummaryInfoSex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PoolsVectors",
                    Value = PoolsVectors ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Diagnosis",
                    Value = Diagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[tlbVectorDiagnosisGetListSPType]",
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SESSIONSUMMARY_DIAGNOSIS_SETResult>("EXEC @returnValue = [dbo].[USP_VCTS_SESSIONSUMMARY_DIAGNOSIS_SET] @idfsVSSessionSummary, @idfDiagnosisVectorSurveillanceSession, @strVSSessionSummaryID, @DiagnosisidfGeoLocation, @datSummaryCollectionDateTime, @SummaryInfoSpecies, @SummaryInfoSex, @PoolsVectors, @Diagnosis, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SESSIONSUMMARY_GETDetailResult>> USP_VCTS_SESSIONSUMMARY_GETDetailAsync(long? idfsVSSessionSummary, long? idfVectorSurveillanceSession, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVSSessionSummary",
                    Value = idfsVSSessionSummary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVectorSurveillanceSession",
                    Value = idfVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SESSIONSUMMARY_GETDetailResult>("EXEC @returnValue = [dbo].[USP_VCTS_SESSIONSUMMARY_GETDetail] @idfsVSSessionSummary, @idfVectorSurveillanceSession, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SESSIONSUMMARY_GETListResult>> USP_VCTS_SESSIONSUMMARY_GETListAsync(long? idfVectorSurveillanceSession, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVectorSurveillanceSession",
                    Value = idfVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SESSIONSUMMARY_GETListResult>("EXEC @returnValue = [dbo].[USP_VCTS_SESSIONSUMMARY_GETList] @idfVectorSurveillanceSession, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SESSIONSUMMARY_SETResult>> USP_VCTS_SESSIONSUMMARY_SETAsync(long? idfDiagnosisVectorSurveillanceSession, string strVSSessionSummaryID, long? DiagnosisidfGeoLocation, long? lucAggregateCollectionidfsResidentType, long? lucAggregateCollectionidfsGroundType, long? lucAggregateCollectionidfsGeolocationType, long? lucAggregateCollectionLocationID, string lucAggregateCollectionstrApartment, string lucAggregateCollectionstrBuilding, string lucAggregateCollectionstrStreetName, string lucAggregateCollectionstrHouse, string lucAggregateCollectionstrPostCode, string lucAggregateCollectionstrDescription, double? lucAggregateCollectiondblDistance, double? lucAggregateCollectionstrLatitude, double? lucAggregateCollectionstrLongitude, double? lucAggregateCollectiondblAccuracy, double? lucAggregateCollectiondblAlignment, double? lucAggregateCollectiondblElevation, bool? blnForeignAddress, string strForeignAddress, bool? blnGeoLocationShared, DateTime? datSummaryCollectionDateTime, long? SummaryInfoSpecies, long? SummaryInfoSex, long? PoolsVectors, string AuditUser, OutputParameter<long?> idfsVSSessionSummary, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteridfsVSSessionSummary = new SqlParameter
            {
                ParameterName = "idfsVSSessionSummary",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = idfsVSSessionSummary?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameteridfsVSSessionSummary,
                new SqlParameter
                {
                    ParameterName = "idfDiagnosisVectorSurveillanceSession",
                    Value = idfDiagnosisVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strVSSessionSummaryID",
                    Size = 400,
                    Value = strVSSessionSummaryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisidfGeoLocation",
                    Value = DiagnosisidfGeoLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectionidfsResidentType",
                    Value = lucAggregateCollectionidfsResidentType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectionidfsGroundType",
                    Value = lucAggregateCollectionidfsGroundType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectionidfsGeolocationType",
                    Value = lucAggregateCollectionidfsGeolocationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectionLocationID",
                    Value = lucAggregateCollectionLocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectionstrApartment",
                    Size = 400,
                    Value = lucAggregateCollectionstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectionstrBuilding",
                    Size = 400,
                    Value = lucAggregateCollectionstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectionstrStreetName",
                    Size = 400,
                    Value = lucAggregateCollectionstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectionstrHouse",
                    Size = 400,
                    Value = lucAggregateCollectionstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectionstrPostCode",
                    Size = 400,
                    Value = lucAggregateCollectionstrPostCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectionstrDescription",
                    Size = 400,
                    Value = lucAggregateCollectionstrDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectiondblDistance",
                    Value = lucAggregateCollectiondblDistance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectionstrLatitude",
                    Value = lucAggregateCollectionstrLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectionstrLongitude",
                    Value = lucAggregateCollectionstrLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectiondblAccuracy",
                    Value = lucAggregateCollectiondblAccuracy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectiondblAlignment",
                    Value = lucAggregateCollectiondblAlignment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucAggregateCollectiondblElevation",
                    Value = lucAggregateCollectiondblElevation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "blnForeignAddress",
                    Value = blnForeignAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "strForeignAddress",
                    Size = 400,
                    Value = strForeignAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "blnGeoLocationShared",
                    Value = blnGeoLocationShared ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "datSummaryCollectionDateTime",
                    Value = datSummaryCollectionDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SummaryInfoSpecies",
                    Value = SummaryInfoSpecies ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SummaryInfoSex",
                    Value = SummaryInfoSex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PoolsVectors",
                    Value = PoolsVectors ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SESSIONSUMMARY_SETResult>("EXEC @returnValue = [dbo].[USP_VCTS_SESSIONSUMMARY_SET] @idfsVSSessionSummary OUTPUT, @idfDiagnosisVectorSurveillanceSession, @strVSSessionSummaryID, @DiagnosisidfGeoLocation, @lucAggregateCollectionidfsResidentType, @lucAggregateCollectionidfsGroundType, @lucAggregateCollectionidfsGeolocationType, @lucAggregateCollectionLocationID, @lucAggregateCollectionstrApartment, @lucAggregateCollectionstrBuilding, @lucAggregateCollectionstrStreetName, @lucAggregateCollectionstrHouse, @lucAggregateCollectionstrPostCode, @lucAggregateCollectionstrDescription, @lucAggregateCollectiondblDistance, @lucAggregateCollectionstrLatitude, @lucAggregateCollectionstrLongitude, @lucAggregateCollectiondblAccuracy, @lucAggregateCollectiondblAlignment, @lucAggregateCollectiondblElevation, @blnForeignAddress, @strForeignAddress, @blnGeoLocationShared, @datSummaryCollectionDateTime, @SummaryInfoSpecies, @SummaryInfoSex, @PoolsVectors, @AuditUser", sqlParameters, cancellationToken);

            idfsVSSessionSummary.SetValue(parameteridfsVSSessionSummary.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SESSIONSUMMARYDIAGNOSIS_DELResult>> USP_VCTS_SESSIONSUMMARYDIAGNOSIS_DELAsync(long? idfsVSSessionSummaryDiagnosis, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVSSessionSummaryDiagnosis",
                    Value = idfsVSSessionSummaryDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SESSIONSUMMARYDIAGNOSIS_DELResult>("EXEC @returnValue = [dbo].[USP_VCTS_SESSIONSUMMARYDIAGNOSIS_DEL] @idfsVSSessionSummaryDiagnosis", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SESSIONSUMMARYDIAGNOSIS_GetDetailResult>> USP_VCTS_SESSIONSUMMARYDIAGNOSIS_GetDetailAsync(long? idfsVSSessionSummary, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVSSessionSummary",
                    Value = idfsVSSessionSummary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SESSIONSUMMARYDIAGNOSIS_GetDetailResult>("EXEC @returnValue = [dbo].[USP_VCTS_SESSIONSUMMARYDIAGNOSIS_GetDetail] @idfsVSSessionSummary, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SESSIONSUMMARYDIAGNOSIS_SETResult>> USP_VCTS_SESSIONSUMMARYDIAGNOSIS_SETAsync(long? idfsVSSessionSummaryDiagnosis, long? idfsVSSessionSummary, long? idfsDiagnosis, long? intPositiveQuantity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVSSessionSummaryDiagnosis",
                    Value = idfsVSSessionSummaryDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVSSessionSummary",
                    Value = idfsVSSessionSummary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intPositiveQuantity",
                    Value = intPositiveQuantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SESSIONSUMMARYDIAGNOSIS_SETResult>("EXEC @returnValue = [dbo].[USP_VCTS_SESSIONSUMMARYDIAGNOSIS_SET] @idfsVSSessionSummaryDiagnosis, @idfsVSSessionSummary, @idfsDiagnosis, @intPositiveQuantity", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SURVEILLANCE_SESSION_DELResult>> USP_VCTS_SURVEILLANCE_SESSION_DELAsync(long? idfVectorSurveillanceSession, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVectorSurveillanceSession",
                    Value = idfVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SURVEILLANCE_SESSION_DELResult>("EXEC @returnValue = [dbo].[USP_VCTS_SURVEILLANCE_SESSION_DEL] @idfVectorSurveillanceSession", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SURVEILLANCE_SESSION_GetListResult>> USP_VCTS_SURVEILLANCE_SESSION_GetListAsync(string LanguageID, string SessionID, string FieldSessionID, long? StatusTypeID, string VectorTypeID, long? SpeciesTypeID, long? DiseaseID, string DiseaseGroupID, long? AdministrativeLevelID, DateTime? StartDateFrom, DateTime? StartDateTo, DateTime? EndDateFrom, DateTime? EndDateTo, long? OutbreakKey, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, string SortColumn, string SortOrder, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Size = 400,
                    Value = SessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FieldSessionID",
                    Size = 400,
                    Value = FieldSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusTypeID",
                    Value = StatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VectorTypeID",
                    Size = -1,
                    Value = VectorTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SpeciesTypeID",
                    Value = SpeciesTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseGroupID",
                    Size = -1,
                    Value = DiseaseGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelID",
                    Value = AdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StartDateFrom",
                    Value = StartDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "StartDateTo",
                    Value = StartDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDateFrom",
                    Value = EndDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDateTo",
                    Value = EndDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakKey",
                    Value = OutbreakKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SURVEILLANCE_SESSION_GetListResult>("EXEC @returnValue = [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList] @LanguageID, @SessionID, @FieldSessionID, @StatusTypeID, @VectorTypeID, @SpeciesTypeID, @DiseaseID, @DiseaseGroupID, @AdministrativeLevelID, @StartDateFrom, @StartDateTo, @EndDateFrom, @EndDateTo, @OutbreakKey, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplySiteFiltrationIndicator, @SortColumn, @SortOrder, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_SURVEILLANCE_SESSION_SETResult>> USP_VCTS_SURVEILLANCE_SESSION_SETAsync(string LangID, long? idfVectorSurveillanceSession, string strSessionID, string strFieldSessionID, long? idfsVectorSurveillanceStatus, DateTime? datStartDate, DateTime? datCloseDate, long? idfOutbreak, int? intCollectionEffort, long? idfGeoLocation, long? idfsGeolocationType, long? idfsLocation, double? dblLatitude, double? dblLongitude, string strDescription, long? idfsGroundType, double? dblDistance, double? dblDirection, double? Elevation, string strStreetName, string strPostalCode, string strApartment, string strBuilding, string strHouse, bool? blnForeignAddress, string strForeignAddress, bool? blnGeoLocationShared, string strLocationDescription, long? SiteID, string AggregateCollections, string DiagnosisInfo, string DetailedCollections, string Events, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfVectorSurveillanceSession",
                    Value = idfVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strSessionID",
                    Size = 100,
                    Value = strSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strFieldSessionID",
                    Size = 100,
                    Value = strFieldSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVectorSurveillanceStatus",
                    Value = idfsVectorSurveillanceStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datStartDate",
                    Value = datStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "datCloseDate",
                    Value = datCloseDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfOutbreak",
                    Value = idfOutbreak ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intCollectionEffort",
                    Value = intCollectionEffort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfGeoLocation",
                    Value = idfGeoLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsGeolocationType",
                    Value = idfsGeolocationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocation",
                    Value = idfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "dblLatitude",
                    Value = dblLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "dblLongitude",
                    Value = dblLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "strDescription",
                    Size = 800,
                    Value = strDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsGroundType",
                    Value = idfsGroundType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "dblDistance",
                    Value = dblDistance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "dblDirection",
                    Value = dblDirection ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "Elevation",
                    Value = Elevation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "strStreetName",
                    Size = 800,
                    Value = strStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strPostalCode",
                    Size = 800,
                    Value = strPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strApartment",
                    Size = 800,
                    Value = strApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strBuilding",
                    Size = 800,
                    Value = strBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strHouse",
                    Size = 800,
                    Value = strHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "blnForeignAddress",
                    Value = blnForeignAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "strForeignAddress",
                    Size = 800,
                    Value = strForeignAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "blnGeoLocationShared",
                    Value = blnGeoLocationShared ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "strLocationDescription",
                    Size = 800,
                    Value = strLocationDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AggregateCollections",
                    Size = -1,
                    Value = AggregateCollections ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisInfo",
                    Size = -1,
                    Value = DiagnosisInfo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DetailedCollections",
                    Size = -1,
                    Value = DetailedCollections ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_SURVEILLANCE_SESSION_SETResult>("EXEC @returnValue = [dbo].[USP_VCTS_SURVEILLANCE_SESSION_SET] @LangID, @idfVectorSurveillanceSession, @strSessionID, @strFieldSessionID, @idfsVectorSurveillanceStatus, @datStartDate, @datCloseDate, @idfOutbreak, @intCollectionEffort, @idfGeoLocation, @idfsGeolocationType, @idfsLocation, @dblLatitude, @dblLongitude, @strDescription, @idfsGroundType, @dblDistance, @dblDirection, @Elevation, @strStreetName, @strPostalCode, @strApartment, @strBuilding, @strHouse, @blnForeignAddress, @strForeignAddress, @blnGeoLocationShared, @strLocationDescription, @SiteID, @AggregateCollections, @DiagnosisInfo, @DetailedCollections, @Events, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_VECT_DELResult>> USP_VCTS_VECT_DELAsync(long? IdfVector, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "IdfVector",
                    Value = IdfVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_VECT_DELResult>("EXEC @returnValue = [dbo].[USP_VCTS_VECT_DEL] @IdfVector", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_VECT_FIELDTEST_SETResult>> USP_VCTS_VECT_FIELDTEST_SETAsync(long? idfMaterial, string LangID, long? idfTesting, long? idfsTestName, long? idfsTestCategory, long? idfTestedByOffice, long? idfsTestResult, long? idfTestedByPerson, long? idfsDiagnosis, DateTime? datConcludedDate, long? idfVector, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfMaterial",
                    Value = idfMaterial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 50,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfTesting",
                    Value = idfTesting ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsTestName",
                    Value = idfsTestName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsTestCategory",
                    Value = idfsTestCategory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfTestedByOffice",
                    Value = idfTestedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsTestResult",
                    Value = idfsTestResult ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfTestedByPerson",
                    Value = idfTestedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datConcludedDate",
                    Value = datConcludedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfVector",
                    Value = idfVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_VECT_FIELDTEST_SETResult>("EXEC @returnValue = [dbo].[USP_VCTS_VECT_FIELDTEST_SET] @idfMaterial, @LangID, @idfTesting, @idfsTestName, @idfsTestCategory, @idfTestedByOffice, @idfsTestResult, @idfTestedByPerson, @idfsDiagnosis, @datConcludedDate, @idfVector", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_VECT_GetDetailResult>> USP_VCTS_VECT_GetDetailAsync(long? idfVectorSurveillanceSession, string LangID, bool? bitCollectionByPool, string SortColumn, string SortOrder, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVectorSurveillanceSession",
                    Value = idfVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bitCollectionByPool",
                    Value = bitCollectionByPool ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_VECT_GetDetailResult>("EXEC @returnValue = [dbo].[USP_VCTS_VECT_GetDetail] @idfVectorSurveillanceSession, @LangID, @bitCollectionByPool, @SortColumn, @SortOrder, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_VECT_GetSampleTypeResult>> USP_VCTS_VECT_GetSampleTypeAsync(long? idfsVectorType, long? idfsSampleType, string idfsstrSampleType, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfsVectorType",
                    Value = idfsVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSampleType",
                    Value = idfsSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsstrSampleType",
                    Size = 50,
                    Value = idfsstrSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_VECT_GetSampleTypeResult>("EXEC @returnValue = [dbo].[USP_VCTS_VECT_GetSampleType] @idfsVectorType, @idfsSampleType, @idfsstrSampleType, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_VECT_RW_SETResult>> USP_VCTS_VECT_RW_SETAsync(long? idfVector, long? idfsDetailedVectorSurveillanceSession, long? idfHostVector, string strVectorID, string strFieldVectorID, long? idfDetailedLocation, long? lucDetailedCollectionidfsResidentType, long? lucDetailedCollectionidfsGroundType, long? lucDetailedCollectionidfsGeolocationType, long? lucDetailedCollectionidfsLocation, string lucDetailedCollectionstrApartment, string lucDetailedCollectionstrBuilding, string lucDetailedCollectionstrStreetName, string lucDetailedCollectionstrHouse, string lucDetailedCollectionstrPostCode, string lucDetailedCollectionstrDescription, double? lucDetailedCollectiondblDistance, double? lucDetailedCollectionstrLatitude, double? lucDetailedCollectionstrLongitude, double? lucDetailedCollectiondblAccuracy, double? lucDetailedCollectiondblAlignment, bool? blnForeignAddress, string strForeignAddress, bool? blnGeoLocationShared, int? intDetailedElevation, long? DetailedSurroundings, string strGEOReferenceSource, long? idfCollectedByOffice, long? idfCollectedByPerson, DateTime? datCollectionDateTime, long? idfsCollectionMethod, long? idfsBasisOfRecord, long? idfDetailedVectorType, long? idfsVectorSubType, int? intQuantity, long? idfsSex, long? idfIdentIFiedByOffice, long? idfIdentIFiedByPerson, DateTime? datIdentIFiedDateTime, long? idfsIdentIFicationMethod, long? idfObservation, long? idfsFormTemplate, long? idfsDayPeriod, string strComment, long? idfsEctoparASitesCollected, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVector",
                    Value = idfVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDetailedVectorSurveillanceSession",
                    Value = idfsDetailedVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfHostVector",
                    Value = idfHostVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strVectorID",
                    Size = 100,
                    Value = strVectorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strFieldVectorID",
                    Size = 100,
                    Value = strFieldVectorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfDetailedLocation",
                    Value = idfDetailedLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionidfsResidentType",
                    Value = lucDetailedCollectionidfsResidentType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionidfsGroundType",
                    Value = lucDetailedCollectionidfsGroundType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionidfsGeolocationType",
                    Value = lucDetailedCollectionidfsGeolocationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionidfsLocation",
                    Value = lucDetailedCollectionidfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrApartment",
                    Size = 400,
                    Value = lucDetailedCollectionstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrBuilding",
                    Size = 400,
                    Value = lucDetailedCollectionstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrStreetName",
                    Size = 400,
                    Value = lucDetailedCollectionstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrHouse",
                    Size = 400,
                    Value = lucDetailedCollectionstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrPostCode",
                    Size = 400,
                    Value = lucDetailedCollectionstrPostCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrDescription",
                    Size = 400,
                    Value = lucDetailedCollectionstrDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectiondblDistance",
                    Value = lucDetailedCollectiondblDistance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrLatitude",
                    Value = lucDetailedCollectionstrLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrLongitude",
                    Value = lucDetailedCollectionstrLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectiondblAccuracy",
                    Value = lucDetailedCollectiondblAccuracy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectiondblAlignment",
                    Value = lucDetailedCollectiondblAlignment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "blnForeignAddress",
                    Value = blnForeignAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "strForeignAddress",
                    Size = 400,
                    Value = strForeignAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "blnGeoLocationShared",
                    Value = blnGeoLocationShared ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "intDetailedElevation",
                    Value = intDetailedElevation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DetailedSurroundings",
                    Value = DetailedSurroundings ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strGEOReferenceSource",
                    Size = 1000,
                    Value = strGEOReferenceSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfCollectedByOffice",
                    Value = idfCollectedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfCollectedByPerson",
                    Value = idfCollectedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datCollectionDateTime",
                    Value = datCollectionDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCollectionMethod",
                    Value = idfsCollectionMethod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsBasisOfRecord",
                    Value = idfsBasisOfRecord ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfDetailedVectorType",
                    Value = idfDetailedVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVectorSubType",
                    Value = idfsVectorSubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intQuantity",
                    Value = intQuantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSex",
                    Value = idfsSex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfIdentIFiedByOffice",
                    Value = idfIdentIFiedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfIdentIFiedByPerson",
                    Value = idfIdentIFiedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datIdentIFiedDateTime",
                    Value = datIdentIFiedDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsIdentIFicationMethod",
                    Value = idfsIdentIFicationMethod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfObservation",
                    Value = idfObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDayPeriod",
                    Value = idfsDayPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strComment",
                    Size = 1000,
                    Value = strComment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsEctoparASitesCollected",
                    Value = idfsEctoparASitesCollected ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_VECT_RW_SETResult>("EXEC @returnValue = [dbo].[USP_VCTS_VECT_RW_SET] @idfVector, @idfsDetailedVectorSurveillanceSession, @idfHostVector, @strVectorID, @strFieldVectorID, @idfDetailedLocation, @lucDetailedCollectionidfsResidentType, @lucDetailedCollectionidfsGroundType, @lucDetailedCollectionidfsGeolocationType, @lucDetailedCollectionidfsLocation, @lucDetailedCollectionstrApartment, @lucDetailedCollectionstrBuilding, @lucDetailedCollectionstrStreetName, @lucDetailedCollectionstrHouse, @lucDetailedCollectionstrPostCode, @lucDetailedCollectionstrDescription, @lucDetailedCollectiondblDistance, @lucDetailedCollectionstrLatitude, @lucDetailedCollectionstrLongitude, @lucDetailedCollectiondblAccuracy, @lucDetailedCollectiondblAlignment, @blnForeignAddress, @strForeignAddress, @blnGeoLocationShared, @intDetailedElevation, @DetailedSurroundings, @strGEOReferenceSource, @idfCollectedByOffice, @idfCollectedByPerson, @datCollectionDateTime, @idfsCollectionMethod, @idfsBasisOfRecord, @idfDetailedVectorType, @idfsVectorSubType, @intQuantity, @idfsSex, @idfIdentIFiedByOffice, @idfIdentIFiedByPerson, @datIdentIFiedDateTime, @idfsIdentIFicationMethod, @idfObservation, @idfsFormTemplate, @idfsDayPeriod, @strComment, @idfsEctoparASitesCollected, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_VECT_SAMPLES_SETResult>> USP_VCTS_VECT_SAMPLES_SETAsync(string LangID, long? idfMaterial, string strFieldBarcode, long? idfsSampleType, long? idfVectorSurveillanceSession, long? idfVector, long? idfSendToOffice, long? idfFieldCollectedByOffice, string strNote, DateTime? datFieldCollectionDate, DateTime? EnteredDate, long? SiteID, long? idfsDiagnosis, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfMaterial",
                    Value = idfMaterial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strFieldBarcode",
                    Size = 400,
                    Value = strFieldBarcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSampleType",
                    Value = idfsSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVectorSurveillanceSession",
                    Value = idfVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVector",
                    Value = idfVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfSendToOffice",
                    Value = idfSendToOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfFieldCollectedByOffice",
                    Value = idfFieldCollectedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strNote",
                    Size = 1000,
                    Value = strNote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "datFieldCollectionDate",
                    Value = datFieldCollectionDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EnteredDate",
                    Value = EnteredDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_VECT_SAMPLES_SETResult>("EXEC @returnValue = [dbo].[USP_VCTS_VECT_SAMPLES_SET] @LangID, @idfMaterial, @strFieldBarcode, @idfsSampleType, @idfVectorSurveillanceSession, @idfVector, @idfSendToOffice, @idfFieldCollectedByOffice, @strNote, @datFieldCollectionDate, @EnteredDate, @SiteID, @idfsDiagnosis", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_VECT_SETResult>> USP_VCTS_VECT_SETAsync(long? idfVector, long? idfsDetailedVectorSurveillanceSession, long? idfHostVector, string strVectorID, string strFieldVectorID, long? idfDetailedLocation, long? lucDetailedCollectionidfsResidentType, long? lucDetailedCollectionidfsGroundType, long? lucDetailedCollectionidfsGeolocationType, long? lucDetailedCollectionidfsLocation, string lucDetailedCollectionstrApartment, string lucDetailedCollectionstrBuilding, string lucDetailedCollectionstrStreetName, string lucDetailedCollectionstrHouse, string lucDetailedCollectionstrPostCode, string lucDetailedCollectionstrDescription, double? lucDetailedCollectiondblDistance, double? lucDetailedCollectionstrLatitude, double? lucDetailedCollectionstrLongitude, double? lucDetailedCollectiondblAccuracy, double? lucDetailedCollectiondblAlignment, bool? blnForeignAddress, string strForeignAddress, bool? blnGeoLocationShared, int? intDetailedElevation, long? DetailedSurroundings, string strGEOReferenceSource, long? idfCollectedByOffice, long? idfCollectedByPerson, DateTime? datCollectionDateTime, long? idfsCollectionMethod, long? idfsBasisOfRecord, long? idfDetailedVectorType, long? idfsVectorSubType, int? intQuantity, long? idfsSex, long? idfIdentIFiedByOffice, long? idfIdentIFiedByPerson, DateTime? datIdentIFiedDateTime, long? idfsIdentIFicationMethod, long? idfObservation, long? idfsFormTemplate, long? idfsDayPeriod, string strComment, long? idfsEctoparASitesCollected, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVector",
                    Value = idfVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDetailedVectorSurveillanceSession",
                    Value = idfsDetailedVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfHostVector",
                    Value = idfHostVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strVectorID",
                    Size = 100,
                    Value = strVectorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strFieldVectorID",
                    Size = 100,
                    Value = strFieldVectorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfDetailedLocation",
                    Value = idfDetailedLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionidfsResidentType",
                    Value = lucDetailedCollectionidfsResidentType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionidfsGroundType",
                    Value = lucDetailedCollectionidfsGroundType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionidfsGeolocationType",
                    Value = lucDetailedCollectionidfsGeolocationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionidfsLocation",
                    Value = lucDetailedCollectionidfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrApartment",
                    Size = 400,
                    Value = lucDetailedCollectionstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrBuilding",
                    Size = 400,
                    Value = lucDetailedCollectionstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrStreetName",
                    Size = 400,
                    Value = lucDetailedCollectionstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrHouse",
                    Size = 400,
                    Value = lucDetailedCollectionstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrPostCode",
                    Size = 400,
                    Value = lucDetailedCollectionstrPostCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrDescription",
                    Size = 400,
                    Value = lucDetailedCollectionstrDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectiondblDistance",
                    Value = lucDetailedCollectiondblDistance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrLatitude",
                    Value = lucDetailedCollectionstrLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrLongitude",
                    Value = lucDetailedCollectionstrLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectiondblAccuracy",
                    Value = lucDetailedCollectiondblAccuracy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectiondblAlignment",
                    Value = lucDetailedCollectiondblAlignment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "blnForeignAddress",
                    Value = blnForeignAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "strForeignAddress",
                    Size = 400,
                    Value = strForeignAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "blnGeoLocationShared",
                    Value = blnGeoLocationShared ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "intDetailedElevation",
                    Value = intDetailedElevation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DetailedSurroundings",
                    Value = DetailedSurroundings ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strGEOReferenceSource",
                    Size = 1000,
                    Value = strGEOReferenceSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfCollectedByOffice",
                    Value = idfCollectedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfCollectedByPerson",
                    Value = idfCollectedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datCollectionDateTime",
                    Value = datCollectionDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCollectionMethod",
                    Value = idfsCollectionMethod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsBasisOfRecord",
                    Value = idfsBasisOfRecord ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfDetailedVectorType",
                    Value = idfDetailedVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVectorSubType",
                    Value = idfsVectorSubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intQuantity",
                    Value = intQuantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSex",
                    Value = idfsSex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfIdentIFiedByOffice",
                    Value = idfIdentIFiedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfIdentIFiedByPerson",
                    Value = idfIdentIFiedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datIdentIFiedDateTime",
                    Value = datIdentIFiedDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsIdentIFicationMethod",
                    Value = idfsIdentIFicationMethod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfObservation",
                    Value = idfObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDayPeriod",
                    Value = idfsDayPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strComment",
                    Size = 1000,
                    Value = strComment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsEctoparASitesCollected",
                    Value = idfsEctoparASitesCollected ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_VECT_SETResult>("EXEC @returnValue = [dbo].[USP_VCTS_VECT_SET] @idfVector, @idfsDetailedVectorSurveillanceSession, @idfHostVector, @strVectorID, @strFieldVectorID, @idfDetailedLocation, @lucDetailedCollectionidfsResidentType, @lucDetailedCollectionidfsGroundType, @lucDetailedCollectionidfsGeolocationType, @lucDetailedCollectionidfsLocation, @lucDetailedCollectionstrApartment, @lucDetailedCollectionstrBuilding, @lucDetailedCollectionstrStreetName, @lucDetailedCollectionstrHouse, @lucDetailedCollectionstrPostCode, @lucDetailedCollectionstrDescription, @lucDetailedCollectiondblDistance, @lucDetailedCollectionstrLatitude, @lucDetailedCollectionstrLongitude, @lucDetailedCollectiondblAccuracy, @lucDetailedCollectiondblAlignment, @blnForeignAddress, @strForeignAddress, @blnGeoLocationShared, @intDetailedElevation, @DetailedSurroundings, @strGEOReferenceSource, @idfCollectedByOffice, @idfCollectedByPerson, @datCollectionDateTime, @idfsCollectionMethod, @idfsBasisOfRecord, @idfDetailedVectorType, @idfsVectorSubType, @intQuantity, @idfsSex, @idfIdentIFiedByOffice, @idfIdentIFiedByPerson, @datIdentIFiedDateTime, @idfsIdentIFicationMethod, @idfObservation, @idfsFormTemplate, @idfsDayPeriod, @strComment, @idfsEctoparASitesCollected, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_VECT_STRUCTURED_SETResult>> USP_VCTS_VECT_STRUCTURED_SETAsync(string LangID, long? idfVector, long? idfsDetailedVectorSurveillanceSession, long? idfHostVector, string strVectorID, string strFieldVectorID, long? idfDetailedLocation, long? lucDetailedCollectionidfsResidentType, long? lucDetailedCollectionidfsGroundType, long? lucDetailedCollectionidfsGeolocationType, long? lucDetailedCollectionidfsLocation, string lucDetailedCollectionstrApartment, string lucDetailedCollectionstrBuilding, string lucDetailedCollectionstrStreetName, string lucDetailedCollectionstrHouse, string lucDetailedCollectionstrPostCode, string lucDetailedCollectionstrDescription, double? lucDetailedCollectiondblDistance, double? lucDetailedCollectionstrLatitude, double? lucDetailedCollectionstrLongitude, double? lucDetailedCollectiondblAccuracy, double? lucDetailedCollectiondblAlignment, bool? blnForeignAddress, string strForeignAddress, bool? blnGeoLocationShared, int? intDetailedElevation, long? DetailedSurroundings, string strGEOReferenceSource, long? idfCollectedByOffice, long? idfCollectedByPerson, DateTime? datCollectionDateTime, long? idfsCollectionMethod, long? idfsBasisOfRecord, long? idfDetailedVectorType, long? idfsVectorSubType, int? intQuantity, long? idfsSex, long? idfIdentIFiedByOffice, long? idfIdentIFiedByPerson, DateTime? datIdentIFiedDateTime, long? idfsIdentIFicationMethod, long? idfObservation, long? idfsFormTemplate, long? idfsDayPeriod, string strComment, long? idfsEctoparASitesCollected, string Samples, string FieldTests, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfVector",
                    Value = idfVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDetailedVectorSurveillanceSession",
                    Value = idfsDetailedVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfHostVector",
                    Value = idfHostVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strVectorID",
                    Size = 100,
                    Value = strVectorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "strFieldVectorID",
                    Size = 100,
                    Value = strFieldVectorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfDetailedLocation",
                    Value = idfDetailedLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionidfsResidentType",
                    Value = lucDetailedCollectionidfsResidentType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionidfsGroundType",
                    Value = lucDetailedCollectionidfsGroundType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionidfsGeolocationType",
                    Value = lucDetailedCollectionidfsGeolocationType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionidfsLocation",
                    Value = lucDetailedCollectionidfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrApartment",
                    Size = 400,
                    Value = lucDetailedCollectionstrApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrBuilding",
                    Size = 400,
                    Value = lucDetailedCollectionstrBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrStreetName",
                    Size = 400,
                    Value = lucDetailedCollectionstrStreetName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrHouse",
                    Size = 400,
                    Value = lucDetailedCollectionstrHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrPostCode",
                    Size = 400,
                    Value = lucDetailedCollectionstrPostCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrDescription",
                    Size = 400,
                    Value = lucDetailedCollectionstrDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectiondblDistance",
                    Value = lucDetailedCollectiondblDistance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrLatitude",
                    Value = lucDetailedCollectionstrLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectionstrLongitude",
                    Value = lucDetailedCollectionstrLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectiondblAccuracy",
                    Value = lucDetailedCollectiondblAccuracy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "lucDetailedCollectiondblAlignment",
                    Value = lucDetailedCollectiondblAlignment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "blnForeignAddress",
                    Value = blnForeignAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "strForeignAddress",
                    Size = 400,
                    Value = strForeignAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "blnGeoLocationShared",
                    Value = blnGeoLocationShared ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "intDetailedElevation",
                    Value = intDetailedElevation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DetailedSurroundings",
                    Value = DetailedSurroundings ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strGEOReferenceSource",
                    Size = 1000,
                    Value = strGEOReferenceSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfCollectedByOffice",
                    Value = idfCollectedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfCollectedByPerson",
                    Value = idfCollectedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datCollectionDateTime",
                    Value = datCollectionDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsCollectionMethod",
                    Value = idfsCollectionMethod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsBasisOfRecord",
                    Value = idfsBasisOfRecord ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfDetailedVectorType",
                    Value = idfDetailedVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsVectorSubType",
                    Value = idfsVectorSubType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intQuantity",
                    Value = intQuantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSex",
                    Value = idfsSex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfIdentIFiedByOffice",
                    Value = idfIdentIFiedByOffice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfIdentIFiedByPerson",
                    Value = idfIdentIFiedByPerson ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "datIdentIFiedDateTime",
                    Value = datIdentIFiedDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idfsIdentIFicationMethod",
                    Value = idfsIdentIFicationMethod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfObservation",
                    Value = idfObservation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsFormTemplate",
                    Value = idfsFormTemplate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDayPeriod",
                    Value = idfsDayPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "strComment",
                    Size = 1000,
                    Value = strComment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idfsEctoparASitesCollected",
                    Value = idfsEctoparASitesCollected ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Samples",
                    Size = -1,
                    Value = Samples ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FieldTests",
                    Size = -1,
                    Value = FieldTests ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_VECT_STRUCTURED_SETResult>("EXEC @returnValue = [dbo].[USP_VCTS_VECT_STRUCTURED_SET] @LangID, @idfVector, @idfsDetailedVectorSurveillanceSession, @idfHostVector, @strVectorID, @strFieldVectorID, @idfDetailedLocation, @lucDetailedCollectionidfsResidentType, @lucDetailedCollectionidfsGroundType, @lucDetailedCollectionidfsGeolocationType, @lucDetailedCollectionidfsLocation, @lucDetailedCollectionstrApartment, @lucDetailedCollectionstrBuilding, @lucDetailedCollectionstrStreetName, @lucDetailedCollectionstrHouse, @lucDetailedCollectionstrPostCode, @lucDetailedCollectionstrDescription, @lucDetailedCollectiondblDistance, @lucDetailedCollectionstrLatitude, @lucDetailedCollectionstrLongitude, @lucDetailedCollectiondblAccuracy, @lucDetailedCollectiondblAlignment, @blnForeignAddress, @strForeignAddress, @blnGeoLocationShared, @intDetailedElevation, @DetailedSurroundings, @strGEOReferenceSource, @idfCollectedByOffice, @idfCollectedByPerson, @datCollectionDateTime, @idfsCollectionMethod, @idfsBasisOfRecord, @idfDetailedVectorType, @idfsVectorSubType, @intQuantity, @idfsSex, @idfIdentIFiedByOffice, @idfIdentIFiedByPerson, @datIdentIFiedDateTime, @idfsIdentIFicationMethod, @idfObservation, @idfsFormTemplate, @idfsDayPeriod, @strComment, @idfsEctoparASitesCollected, @Samples, @FieldTests, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_VECTCollection_GetDetailResult>> USP_VCTS_VECTCollection_GetDetailAsync(long? idfVector, long? idfVectorSurveillanceSession, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVector",
                    Value = idfVector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfVectorSurveillanceSession",
                    Value = idfVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_VECTCollection_GetDetailResult>("EXEC @returnValue = [dbo].[USP_VCTS_VECTCollection_GetDetail] @idfVector, @idfVectorSurveillanceSession, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_VSSESSION_GetDetailResult>> USP_VCTS_VSSESSION_GetDetailAsync(long? idfVectorSurveillanceSession, string LangID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVectorSurveillanceSession",
                    Value = idfVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_VSSESSION_GetDetailResult>("EXEC @returnValue = [dbo].[USP_VCTS_VSSESSION_GetDetail] @idfVectorSurveillanceSession, @LangID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_VSSESSION_GetListResult>> USP_VCTS_VSSESSION_GetListAsync(string LangID, string SearchSessionID, string SearchFieldSessionID, long? SearchStatus, string SearchVectorType, long? SearchSpecies, long? SearchDisease, string SearchDiagnosesGroup, long? vectorsearchFormidfsRegion, long? vectorsearchFormidfsRayon, long? vectorsearchFormidfsSettlement, DateTime? SearchStartDateFrom, DateTime? SearchStartDateTo, DateTime? SearchEndDateFrom, DateTime? SearchEndDateTo, long? OutbreakID, long? SearchDataEntrySite, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchSessionID",
                    Size = 400,
                    Value = SearchSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchFieldSessionID",
                    Size = 400,
                    Value = SearchFieldSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchStatus",
                    Value = SearchStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchVectorType",
                    Size = -1,
                    Value = SearchVectorType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchSpecies",
                    Value = SearchSpecies ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchDisease",
                    Value = SearchDisease ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchDiagnosesGroup",
                    Size = -1,
                    Value = SearchDiagnosesGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vectorsearchFormidfsRegion",
                    Value = vectorsearchFormidfsRegion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "vectorsearchFormidfsRayon",
                    Value = vectorsearchFormidfsRayon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "vectorsearchFormidfsSettlement",
                    Value = vectorsearchFormidfsSettlement ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchStartDateFrom",
                    Value = SearchStartDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchStartDateTo",
                    Value = SearchStartDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchEndDateFrom",
                    Value = SearchEndDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SearchEndDateTo",
                    Value = SearchEndDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakID",
                    Value = OutbreakID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchDataEntrySite",
                    Value = SearchDataEntrySite ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_VSSESSION_GetListResult>("EXEC @returnValue = [dbo].[USP_VCTS_VSSESSION_GetList] @LangID, @SearchSessionID, @SearchFieldSessionID, @SearchStatus, @SearchVectorType, @SearchSpecies, @SearchDisease, @SearchDiagnosesGroup, @vectorsearchFormidfsRegion, @vectorsearchFormidfsRayon, @vectorsearchFormidfsSettlement, @SearchStartDateFrom, @SearchStartDateTo, @SearchEndDateFrom, @SearchEndDateTo, @OutbreakID, @SearchDataEntrySite", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VCTS_VSSESSION_New_GetDetailResult>> USP_VCTS_VSSESSION_New_GetDetailAsync(long? idfVectorSurveillanceSession, string LangID, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplyFiltrationIndicator, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfVectorSurveillanceSession",
                    Value = idfVectorSurveillanceSession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LangID",
                    Size = 100,
                    Value = LangID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplyFiltrationIndicator",
                    Value = ApplyFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VCTS_VSSESSION_New_GetDetailResult>("EXEC @returnValue = [dbo].[USP_VCTS_VSSESSION_New_GetDetail] @idfVectorSurveillanceSession, @LangID, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplyFiltrationIndicator", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_ANIMAL_GETListResult>> USP_VET_ANIMAL_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? DiseaseReportID, long? MonitoringSessionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReportID",
                    Value = DiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_ANIMAL_GETListResult>("EXEC @returnValue = [dbo].[USP_VET_ANIMAL_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @DiseaseReportID, @MonitoringSessionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_CASE_LOG_GETListResult>> USP_VET_CASE_LOG_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? DiseaseReportID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReportID",
                    Value = DiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_CASE_LOG_GETListResult>("EXEC @returnValue = [dbo].[USP_VET_CASE_LOG_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @DiseaseReportID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_DISEASE_REPORT_DELResult>> USP_VET_DISEASE_REPORT_DELAsync(long? DiseaseReportID, bool? DeduplicationIndicator, long? DataAuditEventID, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "DiseaseReportID",
                    Value = DiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeduplicationIndicator",
                    Value = DeduplicationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DataAuditEventID",
                    Value = DataAuditEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_DISEASE_REPORT_DELResult>("EXEC @returnValue = [dbo].[USP_VET_DISEASE_REPORT_DEL] @DiseaseReportID, @DeduplicationIndicator, @DataAuditEventID, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_DISEASE_REPORT_GETDetailResult>> USP_VET_DISEASE_REPORT_GETDetailAsync(string LanguageID, long? DiseaseReportID, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplyFiltrationIndicator, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReportID",
                    Value = DiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplyFiltrationIndicator",
                    Value = ApplyFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_DISEASE_REPORT_GETDetailResult>("EXEC @returnValue = [dbo].[USP_VET_DISEASE_REPORT_GETDetail] @LanguageID, @DiseaseReportID, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplyFiltrationIndicator", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_DISEASE_REPORT_GETListResult>> USP_VET_DISEASE_REPORT_GETListAsync(string LanguageID, long? ReportKey, string ReportID, string LegacyReportID, long? SessionKey, long? FarmMasterID, long? DiseaseID, long? ReportStatusTypeID, long? AdministrativeLevelID, DateTime? DateEnteredFrom, DateTime? DateEnteredTo, long? ClassificationTypeID, string PersonID, long? ReportTypeID, long? SpeciesTypeID, bool? OutbreakCasesIndicator, DateTime? DiagnosisDateFrom, DateTime? DiagnosisDateTo, DateTime? InvestigationDateFrom, DateTime? InvestigationDateTo, string LocalOrFieldSampleID, int? TotalAnimalQuantityFrom, int? TotalAnimalQuantityTo, string SessionID, long? DataEntrySiteID, bool? RecordIdentifierSearchIndicator, long? UserSiteID, long? UserOrganizationID, long? UserEmployeeID, bool? ApplySiteFiltrationIndicator, bool? IncludeSpeciesListIndicator, string SortColumn, string SortOrder, int? PageNumber, int? PageSize, int? OutbreakCaseReportOnly, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportKey",
                    Value = ReportKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportID",
                    Size = 400,
                    Value = ReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LegacyReportID",
                    Size = 400,
                    Value = LegacyReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionKey",
                    Value = SessionKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmMasterID",
                    Value = FarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportStatusTypeID",
                    Value = ReportStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AdministrativeLevelID",
                    Value = AdministrativeLevelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DateEnteredFrom",
                    Value = DateEnteredFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DateEnteredTo",
                    Value = DateEnteredTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ClassificationTypeID",
                    Value = ClassificationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PersonID",
                    Size = 400,
                    Value = PersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReportTypeID",
                    Value = ReportTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SpeciesTypeID",
                    Value = SpeciesTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCasesIndicator",
                    Value = OutbreakCasesIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisDateFrom",
                    Value = DiagnosisDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisDateTo",
                    Value = DiagnosisDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "InvestigationDateFrom",
                    Value = InvestigationDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "InvestigationDateTo",
                    Value = InvestigationDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "LocalOrFieldSampleID",
                    Size = 400,
                    Value = LocalOrFieldSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TotalAnimalQuantityFrom",
                    Value = TotalAnimalQuantityFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TotalAnimalQuantityTo",
                    Value = TotalAnimalQuantityTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SessionID",
                    Size = 400,
                    Value = SessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataEntrySiteID",
                    Value = DataEntrySiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RecordIdentifierSearchIndicator",
                    Value = RecordIdentifierSearchIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UserSiteID",
                    Value = UserSiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserOrganizationID",
                    Value = UserOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmployeeID",
                    Value = UserEmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ApplySiteFiltrationIndicator",
                    Value = ApplySiteFiltrationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncludeSpeciesListIndicator",
                    Value = IncludeSpeciesListIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseReportOnly",
                    Value = OutbreakCaseReportOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_DISEASE_REPORT_GETListResult>("EXEC @returnValue = [dbo].[USP_VET_DISEASE_REPORT_GETList] @LanguageID, @ReportKey, @ReportID, @LegacyReportID, @SessionKey, @FarmMasterID, @DiseaseID, @ReportStatusTypeID, @AdministrativeLevelID, @DateEnteredFrom, @DateEnteredTo, @ClassificationTypeID, @PersonID, @ReportTypeID, @SpeciesTypeID, @OutbreakCasesIndicator, @DiagnosisDateFrom, @DiagnosisDateTo, @InvestigationDateFrom, @InvestigationDateTo, @LocalOrFieldSampleID, @TotalAnimalQuantityFrom, @TotalAnimalQuantityTo, @SessionID, @DataEntrySiteID, @RecordIdentifierSearchIndicator, @UserSiteID, @UserOrganizationID, @UserEmployeeID, @ApplySiteFiltrationIndicator, @IncludeSpeciesListIndicator, @SortColumn, @SortOrder, @PageNumber, @PageSize, @OutbreakCaseReportOnly", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_DISEASE_REPORT_SETResult>> USP_VET_DISEASE_REPORT_SETAsync(long? DiseaseReportID, string EIDSSReportID, long? FarmID, long? FarmMasterID, long? FarmOwnerID, long? MonitoringSessionID, long? OutbreakID, long? RelatedToDiseaseReportID, string EIDSSFieldAccessionID, long? DiseaseID, long? EnteredByPersonID, long? ReportedByOrganizationID, long? ReportedByPersonID, long? InvestigatedByOrganizationID, long? InvestigatedByPersonID, long? ReceivedByOrganizationID, long? ReceivedByPersonID, long? SiteID, DateTime? DiagnosisDate, DateTime? EnteredDate, DateTime? ReportDate, DateTime? AssignedDate, DateTime? InvestigationDate, int? RowStatus, long? ReportTypeID, long? ClassificationTypeID, long? StatusTypeID, long? ReportCategoryTypeID, int? FarmTotalAnimalQuantity, int? FarmSickAnimalQuantity, int? FarmDeadAnimalQuantity, double? FarmLatitude, double? FarmLongitude, long? FarmEpidemiologicalObservationID, long? ControlMeasuresObservationID, long? TestsConductedIndicator, long? DataAuditEventID, string AuditUserName, string FlocksOrHerds, string Species, string Animals, string Vaccinations, string Samples, string PensideTests, string LaboratoryTests, string LaboratoryTestInterpretations, string CaseLogs, string ClinicalInformation, string Contacts, string CaseMonitorings, string Events, long? UserID, bool? LinkLocalOrFieldSampleIDToReportID, bool? OutbreakCaseIndicator, long? OutbreakCaseReportUID, long? OutbreakCaseStatusTypeID, long? OutbreakCaseQuestionnaireObservationID, bool? PrimaryCaseIndicator, string Comments, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "DiseaseReportID",
                    Value = DiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSReportID",
                    Size = 400,
                    Value = EIDSSReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmID",
                    Value = FarmID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmMasterID",
                    Value = FarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerID",
                    Value = FarmOwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakID",
                    Value = OutbreakID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RelatedToDiseaseReportID",
                    Value = RelatedToDiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSFieldAccessionID",
                    Size = 400,
                    Value = EIDSSFieldAccessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseID",
                    Value = DiseaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EnteredByPersonID",
                    Value = EnteredByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportedByOrganizationID",
                    Value = ReportedByOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportedByPersonID",
                    Value = ReportedByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "InvestigatedByOrganizationID",
                    Value = InvestigatedByOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "InvestigatedByPersonID",
                    Value = InvestigatedByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivedByOrganizationID",
                    Value = ReceivedByOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReceivedByPersonID",
                    Value = ReceivedByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SiteID",
                    Value = SiteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DiagnosisDate",
                    Value = DiagnosisDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EnteredDate",
                    Value = EnteredDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ReportDate",
                    Value = ReportDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AssignedDate",
                    Value = AssignedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "InvestigationDate",
                    Value = InvestigationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ReportTypeID",
                    Value = ReportTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ClassificationTypeID",
                    Value = ClassificationTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "StatusTypeID",
                    Value = StatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReportCategoryTypeID",
                    Value = ReportCategoryTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmTotalAnimalQuantity",
                    Value = FarmTotalAnimalQuantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FarmSickAnimalQuantity",
                    Value = FarmSickAnimalQuantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FarmDeadAnimalQuantity",
                    Value = FarmDeadAnimalQuantity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FarmLatitude",
                    Value = FarmLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "FarmLongitude",
                    Value = FarmLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "FarmEpidemiologicalObservationID",
                    Value = FarmEpidemiologicalObservationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ControlMeasuresObservationID",
                    Value = ControlMeasuresObservationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "TestsConductedIndicator",
                    Value = TestsConductedIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DataAuditEventID",
                    Value = DataAuditEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FlocksOrHerds",
                    Size = -1,
                    Value = FlocksOrHerds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Species",
                    Size = -1,
                    Value = Species ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Animals",
                    Size = -1,
                    Value = Animals ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Vaccinations",
                    Size = -1,
                    Value = Vaccinations ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Samples",
                    Size = -1,
                    Value = Samples ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PensideTests",
                    Size = -1,
                    Value = PensideTests ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LaboratoryTests",
                    Size = -1,
                    Value = LaboratoryTests ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LaboratoryTestInterpretations",
                    Size = -1,
                    Value = LaboratoryTestInterpretations ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaseLogs",
                    Size = -1,
                    Value = CaseLogs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ClinicalInformation",
                    Size = -1,
                    Value = ClinicalInformation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Contacts",
                    Size = -1,
                    Value = Contacts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CaseMonitorings",
                    Size = -1,
                    Value = CaseMonitorings ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Events",
                    Size = -1,
                    Value = Events ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "LinkLocalOrFieldSampleIDToReportID",
                    Value = LinkLocalOrFieldSampleIDToReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseIndicator",
                    Value = OutbreakCaseIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseReportUID",
                    Value = OutbreakCaseReportUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseStatusTypeID",
                    Value = OutbreakCaseStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "OutbreakCaseQuestionnaireObservationID",
                    Value = OutbreakCaseQuestionnaireObservationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "PrimaryCaseIndicator",
                    Value = PrimaryCaseIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Comments",
                    Value = Comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_DISEASE_REPORT_SETResult>("EXEC @returnValue = [dbo].[USP_VET_DISEASE_REPORT_SET] @DiseaseReportID, @EIDSSReportID, @FarmID, @FarmMasterID, @FarmOwnerID, @MonitoringSessionID, @OutbreakID, @RelatedToDiseaseReportID, @EIDSSFieldAccessionID, @DiseaseID, @EnteredByPersonID, @ReportedByOrganizationID, @ReportedByPersonID, @InvestigatedByOrganizationID, @InvestigatedByPersonID, @ReceivedByOrganizationID, @ReceivedByPersonID, @SiteID, @DiagnosisDate, @EnteredDate, @ReportDate, @AssignedDate, @InvestigationDate, @RowStatus, @ReportTypeID, @ClassificationTypeID, @StatusTypeID, @ReportCategoryTypeID, @FarmTotalAnimalQuantity, @FarmSickAnimalQuantity, @FarmDeadAnimalQuantity, @FarmLatitude, @FarmLongitude, @FarmEpidemiologicalObservationID, @ControlMeasuresObservationID, @TestsConductedIndicator, @DataAuditEventID, @AuditUserName, @FlocksOrHerds, @Species, @Animals, @Vaccinations, @Samples, @PensideTests, @LaboratoryTests, @LaboratoryTestInterpretations, @CaseLogs, @ClinicalInformation, @Contacts, @CaseMonitorings, @Events, @UserID, @LinkLocalOrFieldSampleIDToReportID, @OutbreakCaseIndicator, @OutbreakCaseReportUID, @OutbreakCaseStatusTypeID, @OutbreakCaseQuestionnaireObservationID, @PrimaryCaseIndicator, @Comments", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_DISEASE_REPORT_SPECIES_GETListResult>> USP_VET_DISEASE_REPORT_SPECIES_GETListAsync(string LanguageID, long? VeterinaryDiseaseReportID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VeterinaryDiseaseReportID",
                    Value = VeterinaryDiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_DISEASE_REPORT_SPECIES_GETListResult>("EXEC @returnValue = [dbo].[USP_VET_DISEASE_REPORT_SPECIES_GETList] @LanguageID, @VeterinaryDiseaseReportID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_FARM_DELResult>> USP_VET_FARM_DELAsync(string LanguageID, long? FarmID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmID",
                    Value = FarmID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_FARM_DELResult>("EXEC @returnValue = [dbo].[USP_VET_FARM_DEL] @LanguageID, @FarmID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_FARM_GETDetailResult>> USP_VET_FARM_GETDetailAsync(string LanguageID, long? FarmID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmID",
                    Value = FarmID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_FARM_GETDetailResult>("EXEC @returnValue = [dbo].[USP_VET_FARM_GETDetail] @LanguageID, @FarmID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_FARM_GETListResult>> USP_VET_FARM_GETListAsync(string LanguageID, long? FarmID, string EIDSSFarmID, long? FarmTypeID, string FarmName, string FarmOwnerFirstName, string FarmOwnerLastName, string EIDSSPersonID, long? FarmOwnerID, long? RegionID, long? RayonID, long? SettlementID, long? SettlementTypeID, long? MonitoringSessionID, int? pageNo, int? pageSize, string sortColumn, string sortOrder, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 40,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmID",
                    Value = FarmID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSFarmID",
                    Size = 400,
                    Value = EIDSSFarmID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmTypeID",
                    Value = FarmTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmName",
                    Size = 400,
                    Value = FarmName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerFirstName",
                    Size = 400,
                    Value = FarmOwnerFirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerLastName",
                    Size = 400,
                    Value = FarmOwnerLastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSPersonID",
                    Size = 200,
                    Value = EIDSSPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerID",
                    Value = FarmOwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RegionID",
                    Value = RegionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RayonID",
                    Value = RayonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SettlementID",
                    Value = SettlementID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SettlementTypeID",
                    Value = SettlementTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 200,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_FARM_GETListResult>("EXEC @returnValue = [dbo].[USP_VET_FARM_GETList] @LanguageID, @FarmID, @EIDSSFarmID, @FarmTypeID, @FarmName, @FarmOwnerFirstName, @FarmOwnerLastName, @EIDSSPersonID, @FarmOwnerID, @RegionID, @RayonID, @SettlementID, @SettlementTypeID, @MonitoringSessionID, @pageNo, @pageSize, @sortColumn, @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_FARM_INVENTORY_GETListResult>> USP_VET_FARM_INVENTORY_GETListAsync(string LanguageID, long? DiseaseReportID, long? MonitoringSessionID, long? FarmID, long? FarmMasterID, string EIDSSFarmID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReportID",
                    Value = DiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmID",
                    Value = FarmID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmMasterID",
                    Value = FarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSFarmID",
                    Size = 400,
                    Value = EIDSSFarmID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_FARM_INVENTORY_GETListResult>("EXEC @returnValue = [dbo].[USP_VET_FARM_INVENTORY_GETList] @LanguageID, @DiseaseReportID, @MonitoringSessionID, @FarmID, @FarmMasterID, @EIDSSFarmID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_FARM_MASTER_DELResult>> USP_VET_FARM_MASTER_DELAsync(long? FarmMasterID, bool? DeduplicationIndicator, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "FarmMasterID",
                    Value = FarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "DeduplicationIndicator",
                    Value = DeduplicationIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_FARM_MASTER_DELResult>("EXEC @returnValue = [dbo].[USP_VET_FARM_MASTER_DEL] @FarmMasterID, @DeduplicationIndicator, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_FARM_MASTER_GETDetailResult>> USP_VET_FARM_MASTER_GETDetailAsync(string LanguageID, long? FarmMasterID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmMasterID",
                    Value = FarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_FARM_MASTER_GETDetailResult>("EXEC @returnValue = [dbo].[USP_VET_FARM_MASTER_GETDetail] @LanguageID, @FarmMasterID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_FARM_MASTER_GETListResult>> USP_VET_FARM_MASTER_GETListAsync(string LanguageID, long? FarmMasterID, string EIDSSFarmID, string LegacyFarmID, long? FarmTypeID, string FarmName, string FarmOwnerFirstName, string FarmOwnerLastName, string EIDSSPersonID, string EIDSSFarmOwnerID, long? FarmOwnerID, long? idfsLocation, long? SettlementTypeID, long? MonitoringSessionID, bool? RecordIdentifierSearchIndicator, string sortColumn, string sortOrder, int? pageNo, int? pageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 40,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmMasterID",
                    Value = FarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSFarmID",
                    Size = 400,
                    Value = EIDSSFarmID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LegacyFarmID",
                    Size = 400,
                    Value = LegacyFarmID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmTypeID",
                    Value = FarmTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmName",
                    Size = 400,
                    Value = FarmName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerFirstName",
                    Size = 400,
                    Value = FarmOwnerFirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerLastName",
                    Size = 400,
                    Value = FarmOwnerLastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSPersonID",
                    Size = 200,
                    Value = EIDSSPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSFarmOwnerID",
                    Size = 200,
                    Value = EIDSSFarmOwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerID",
                    Value = FarmOwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsLocation",
                    Value = idfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SettlementTypeID",
                    Value = SettlementTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RecordIdentifierSearchIndicator",
                    Value = RecordIdentifierSearchIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "sortColumn",
                    Size = 200,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Size = 8,
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNo",
                    Value = pageNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_FARM_MASTER_GETListResult>("EXEC @returnValue = [dbo].[USP_VET_FARM_MASTER_GETList] @LanguageID, @FarmMasterID, @EIDSSFarmID, @LegacyFarmID, @FarmTypeID, @FarmName, @FarmOwnerFirstName, @FarmOwnerLastName, @EIDSSPersonID, @EIDSSFarmOwnerID, @FarmOwnerID, @idfsLocation, @SettlementTypeID, @MonitoringSessionID, @RecordIdentifierSearchIndicator, @sortColumn, @sortOrder, @pageNo, @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_FARM_MASTER_SETResult>> USP_VET_FARM_MASTER_SETAsync(long? FarmMasterID, long? AvianFarmTypeID, long? AvianProductionTypeID, long? FarmCategory, long? FarmOwnerID, string FarmNationalName, string FarmInterNationalName, string EIDSSFarmID, long? OwnershipStructureTypeID, string Fax, string Email, string Phone, long? FarmAddressID, bool? ForeignAddressIndicator, long? FarmAddressIdfsLocation, string FarmAddressStreet, string FarmAddressApartment, string FarmAddressBuilding, string FarmAddressHouse, string FarmAddressPostalCode, double? FarmAddressLatitude, double? FarmAddressLongitude, int? NumberOfBuildings, int? NumberOfBirdsPerBuilding, string HerdsOrFlocks, string Species, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "FarmMasterID",
                    Value = FarmMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AvianFarmTypeID",
                    Value = AvianFarmTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "AvianProductionTypeID",
                    Value = AvianProductionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmCategory",
                    Value = FarmCategory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmOwnerID",
                    Value = FarmOwnerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmNationalName",
                    Size = 400,
                    Value = FarmNationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmInterNationalName",
                    Size = 400,
                    Value = FarmInterNationalName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EIDSSFarmID",
                    Size = 400,
                    Value = EIDSSFarmID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OwnershipStructureTypeID",
                    Value = OwnershipStructureTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Fax",
                    Size = 400,
                    Value = Fax ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 400,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Phone",
                    Size = 400,
                    Value = Phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressID",
                    Value = FarmAddressID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ForeignAddressIndicator",
                    Value = ForeignAddressIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressIdfsLocation",
                    Value = FarmAddressIdfsLocation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressStreet",
                    Size = 400,
                    Value = FarmAddressStreet ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressApartment",
                    Size = 400,
                    Value = FarmAddressApartment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressBuilding",
                    Size = 400,
                    Value = FarmAddressBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressHouse",
                    Size = 400,
                    Value = FarmAddressHouse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressPostalCode",
                    Size = 400,
                    Value = FarmAddressPostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressLatitude",
                    Value = FarmAddressLatitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "FarmAddressLongitude",
                    Value = FarmAddressLongitude ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "NumberOfBuildings",
                    Value = NumberOfBuildings ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NumberOfBirdsPerBuilding",
                    Value = NumberOfBirdsPerBuilding ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HerdsOrFlocks",
                    Size = -1,
                    Value = HerdsOrFlocks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Species",
                    Size = -1,
                    Value = Species ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_FARM_MASTER_SETResult>("EXEC @returnValue = [dbo].[USP_VET_FARM_MASTER_SET] @FarmMasterID, @AvianFarmTypeID, @AvianProductionTypeID, @FarmCategory, @FarmOwnerID, @FarmNationalName, @FarmInterNationalName, @EIDSSFarmID, @OwnershipStructureTypeID, @Fax, @Email, @Phone, @FarmAddressID, @ForeignAddressIndicator, @FarmAddressIdfsLocation, @FarmAddressStreet, @FarmAddressApartment, @FarmAddressBuilding, @FarmAddressHouse, @FarmAddressPostalCode, @FarmAddressLatitude, @FarmAddressLongitude, @NumberOfBuildings, @NumberOfBirdsPerBuilding, @HerdsOrFlocks, @Species, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_PENSIDE_TEST_GETListResult>> USP_VET_PENSIDE_TEST_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? DiseaseReportID, long? SampleID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReportID",
                    Value = DiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SampleID",
                    Value = SampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_PENSIDE_TEST_GETListResult>("EXEC @returnValue = [dbo].[USP_VET_PENSIDE_TEST_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @DiseaseReportID, @SampleID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_SAMPLE_GETListResult>> USP_VET_SAMPLE_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? DiseaseReportID, long? ParentSampleID, long? RootSampleID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReportID",
                    Value = DiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ParentSampleID",
                    Value = ParentSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RootSampleID",
                    Value = RootSampleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_SAMPLE_GETListResult>("EXEC @returnValue = [dbo].[USP_VET_SAMPLE_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @DiseaseReportID, @ParentSampleID, @RootSampleID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_TEST_GETListResult>> USP_VET_TEST_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? DiseaseReportID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReportID",
                    Value = DiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_TEST_GETListResult>("EXEC @returnValue = [dbo].[USP_VET_TEST_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @DiseaseReportID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_VET_VACCINATION_GETListResult>> USP_VET_VACCINATION_GETListAsync(string LanguageID, int? PageNumber, int? PageSize, string SortColumn, string SortOrder, long? DiseaseReportID, long? SpeciesID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "LanguageID",
                    Size = 100,
                    Value = LanguageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 60,
                    Value = SortColumn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 8,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DiseaseReportID",
                    Value = DiseaseReportID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SpeciesID",
                    Value = SpeciesID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_VET_VACCINATION_GETListResult>("EXEC @returnValue = [dbo].[USP_VET_VACCINATION_GETList] @LanguageID, @PageNumber, @PageSize, @SortColumn, @SortOrder, @DiseaseReportID, @SpeciesID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USP_xSiteDocumentListGetResult>> USP_xSiteDocumentListGetAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USP_xSiteDocumentListGetResult>("EXEC @returnValue = [dbo].[USP_xSiteDocumentListGet]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> USSP_HAS_CampaignToDiagnosis_SETAsync(long? idfCampaignToDiagnosis, long? idfCampaign, long? idfsDiagnosis, int? intOrder, int? intPlannedNumber, long? idfsSpeciesType, long? idfsSampleType, string Comments, string AuditUserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "idfCampaignToDiagnosis",
                    Value = idfCampaignToDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfCampaign",
                    Value = idfCampaign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsDiagnosis",
                    Value = idfsDiagnosis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "intOrder",
                    Value = intOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "intPlannedNumber",
                    Value = intPlannedNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSpeciesType",
                    Value = idfsSpeciesType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "idfsSampleType",
                    Value = idfsSampleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "Comments",
                    Size = -1,
                    Value = Comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[USSP_HAS_CampaignToDiagnosis_SET] @idfCampaignToDiagnosis, @idfCampaign, @idfsDiagnosis, @intOrder, @intPlannedNumber, @idfsSpeciesType, @idfsSampleType, @Comments, @AuditUserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> USSP_VAS_MONITORING_SESSION_ACTION_SETAsync(long? DataAuditEventID, long? MonitoringSessionID, long? EnteredByPersonID, long? MonitoringSessionActionTypeID, long? MonitoringSessionActionStatusTypeID, DateTime? ActionDate, string Comments, int? RowStatus, int? RowAction, string AuditUserName, OutputParameter<long?> MonitoringSessionActionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterMonitoringSessionActionID = new SqlParameter
            {
                ParameterName = "MonitoringSessionActionID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = MonitoringSessionActionID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterMonitoringSessionActionID,
                new SqlParameter
                {
                    ParameterName = "DataAuditEventID",
                    Value = DataAuditEventID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionID",
                    Value = MonitoringSessionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "EnteredByPersonID",
                    Value = EnteredByPersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionActionTypeID",
                    Value = MonitoringSessionActionTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "MonitoringSessionActionStatusTypeID",
                    Value = MonitoringSessionActionStatusTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ActionDate",
                    Value = ActionDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Comments",
                    Size = 1000,
                    Value = Comments ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RowStatus",
                    Value = RowStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowAction",
                    Value = RowAction ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUserName",
                    Size = 400,
                    Value = AuditUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[USSP_VAS_MONITORING_SESSION_ACTION_SET] @MonitoringSessionActionID OUTPUT, @DataAuditEventID, @MonitoringSessionID, @EnteredByPersonID, @MonitoringSessionActionTypeID, @MonitoringSessionActionStatusTypeID, @ActionDate, @Comments, @RowStatus, @RowAction, @AuditUserName", sqlParameters, cancellationToken);

            MonitoringSessionActionID.SetValue(parameterMonitoringSessionActionID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USSP_VCT_AGGREGATE_DISEASEDIAGNOSIS_SETResult>> USSP_VCT_AGGREGATE_DISEASEDIAGNOSIS_SETAsync(string DiseaseDiagnosisParameters, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "DiseaseDiagnosisParameters",
                    Size = -1,
                    Value = DiseaseDiagnosisParameters ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USSP_VCT_AGGREGATE_DISEASEDIAGNOSIS_SETResult>("EXEC @returnValue = [dbo].[USSP_VCT_AGGREGATE_DISEASEDIAGNOSIS_SET] @DiseaseDiagnosisParameters, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<USSP_VCT_SAMPLE_DETAILEDCOLLECTIONS_SETResult>> USSP_VCT_SAMPLE_DETAILEDCOLLECTIONS_SETAsync(string SAMPLEPARAMETERS, string AuditUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "SAMPLEPARAMETERS",
                    Size = -1,
                    Value = SAMPLEPARAMETERS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditUser",
                    Size = 200,
                    Value = AuditUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<USSP_VCT_SAMPLE_DETAILEDCOLLECTIONS_SETResult>("EXEC @returnValue = [dbo].[USSP_VCT_SAMPLE_DETAILEDCOLLECTIONS_SET] @SAMPLEPARAMETERS, @AuditUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
