// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using EIDSS.Repository.ReturnModels;

namespace EIDSS.Repository.Contexts
{
    public partial class EIDSSContext : DbContext
    {
        public EIDSSContext()
        {
        }

        public EIDSSContext(DbContextOptions<EIDSSContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccessRule> AccessRule { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<EmployeeToInstitution> EmployeeToInstitution { get; set; }
        public virtual DbSet<TlbEmployee> TlbEmployee { get; set; }
        public virtual DbSet<TlbEmployeeGroupMember> TlbEmployeeGroupMember { get; set; }
        public virtual DbSet<TlbOffice> TlbOffice { get; set; }
        public virtual DbSet<TlbPerson> TlbPerson { get; set; }
        public virtual DbSet<TrtBaseReference> TrtBaseReference { get; set; }
        public virtual DbSet<TrtReferenceType> TrtReferenceType { get; set; }
        public virtual DbSet<TrtStringNameTranslation> TrtStringNameTranslation { get; set; }
        public virtual DbSet<TrtVectorType> TrtVectorType { get; set; }
        public virtual DbSet<TstObjectAccess> TstObjectAccess { get; set; }
        public virtual DbSet<TstUserTable> TstUserTable { get; set; }
        public virtual DbSet<TlbHumanActual> TlbHumanActual { get; set; }
        public virtual DbSet<TlbChangeDiagnosisHistory> TlbChangeDiagnosisHistory { get; set; }
        public virtual DbSet<TrtDiagnosis> TrtDiagnosis { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccessRule>(entity =>
            {
                entity.HasIndex(e => e.GrantingActorSiteId)
                    .HasName("NonClusteredIndex-20211029-132912");

                entity.Property(e => e.AccessRuleId)
                    .HasColumnName("AccessRuleID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AdministrativeLevelTypeId).HasColumnName("AdministrativeLevelTypeID");

                entity.Property(e => e.AuditCreateDtm)
                    .HasColumnName("AuditCreateDTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuditCreateUser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.AuditUpdateDtm)
                    .HasColumnName("AuditUpdateDTM")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdateUser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.GrantingActorSiteGroupId).HasColumnName("GrantingActorSiteGroupID");

                entity.Property(e => e.GrantingActorSiteId).HasColumnName("GrantingActorSiteID");

                entity.Property(e => e.IntRowStatus).HasColumnName("intRowStatus");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.SourceSystemNameId).HasColumnName("SourceSystemNameID");

                entity.HasOne(d => d.AccessRuleNavigation)
                    .WithOne(p => p.AccessRuleAccessRuleNavigation)
                    .HasForeignKey<AccessRule>(d => d.AccessRuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccessRule_trtBaseReference");

                entity.HasOne(d => d.SourceSystemName)
                    .WithMany(p => p.AccessRuleSourceSystemName)
                    .HasForeignKey(d => d.SourceSystemNameId);
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.BlnDisabled).HasColumnName("blnDisabled");

                entity.Property(e => e.DatPasswordLastChanged)
                    .HasColumnName("datPasswordLastChanged")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateDisabled).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.IdfUserId).HasColumnName("idfUserID");

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUsername).HasMaxLength(256);

                entity.Property(e => e.StrDisabledReason)
                    .HasColumnName("strDisabledReason")
                    .HasMaxLength(256);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.HasOne(d => d.IdfUser)
                    .WithMany(p => p.AspNetUsers)
                    .HasForeignKey(d => d.IdfUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AspNetUsers_tstUserTable_UserID");
            });

            modelBuilder.Entity<EmployeeToInstitution>(entity =>
            {
                entity.HasKey(e => e.EmployeeToInstitution1)
                    .HasName("XPKEmployeeToInstitution");

                entity.HasIndex(e => e.IdfUserId);

                entity.HasIndex(e => new { e.AspNetUserId, e.IdfUserId })
                    .HasName("UK_EmployeeToInstitution_aspNetUserId_idfUserId")
                    .IsUnique();

                entity.Property(e => e.EmployeeToInstitution1)
                    .HasColumnName("EmployeeToInstitution")
                    .ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("('FALSE')");

                entity.Property(e => e.AspNetUserId)
                    .IsRequired()
                    .HasColumnName("aspNetUserId")
                    .HasMaxLength(128);

                entity.Property(e => e.AuditCreateDtm)
                    .HasColumnName("AuditCreateDTM")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreateUser)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.AuditUpdateDtm)
                    .HasColumnName("AuditUpdateDTM")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdateUser)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(user_name())");

                entity.Property(e => e.IdfInstitution).HasColumnName("idfInstitution");

                entity.Property(e => e.IdfUserId).HasColumnName("idfUserId");

                entity.Property(e => e.IntRowStatus).HasColumnName("intRowStatus");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.SourceSystemNameId)
                    .HasColumnName("SourceSystemNameID")
                    .HasDefaultValueSql("((10519001))");

                entity.Property(e => e.StrMaintenanceFlag)
                    .HasColumnName("strMaintenanceFlag")
                    .HasMaxLength(20);

                entity.Property(e => e.StrReservedAttribute).HasColumnName("strReservedAttribute");

                entity.HasOne(d => d.AspNetUser)
                    .WithMany(p => p.EmployeeToInstitution)
                    .HasForeignKey(d => d.AspNetUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeToInstitution_AspNetUserId");

                entity.HasOne(d => d.IdfInstitutionNavigation)
                    .WithMany(p => p.EmployeeToInstitution)
                    .HasForeignKey(d => d.IdfInstitution)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeToInstitution_Office");

                entity.HasOne(d => d.IdfUser)
                    .WithMany(p => p.EmployeeToInstitution)
                    .HasForeignKey(d => d.IdfUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeToInstitution_UserId");
            });

            modelBuilder.Entity<TlbEmployee>(entity =>
            {
                entity.HasKey(e => e.IdfEmployee)
                    .HasName("XPKtlbEmployee");

                entity.ToTable("tlbEmployee");

                entity.HasComment("Employees");

                entity.HasIndex(e => new { e.IntRowStatus, e.IdfsEmployeeCategory });

                entity.HasIndex(e => new { e.IdfsEmployeeType, e.IntRowStatus, e.IdfsSite })
                    .HasName("IX_tlbEmployee_idfsEmployeeType");

                entity.HasIndex(e => new { e.IdfsSite, e.IntRowStatus, e.IdfsEmployeeType })
                    .HasName("IX_tlbEmployee_intRowStatus_idfsEmployeeType");

                entity.Property(e => e.IdfEmployee)
                    .HasColumnName("idfEmployee")
                    .HasComment("Employee/group identifier")
                    .ValueGeneratedNever();

                entity.Property(e => e.AuditCreateDtm)
                    .HasColumnName("AuditCreateDTM")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreateUser).HasMaxLength(200);

                entity.Property(e => e.AuditUpdateDtm)
                    .HasColumnName("AuditUpdateDTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuditUpdateUser).HasMaxLength(200);

                entity.Property(e => e.IdfsEmployeeCategory)
                    .HasColumnName("idfsEmployeeCategory")
                    .HasDefaultValueSql("((10526002))");

                entity.Property(e => e.IdfsEmployeeType)
                    .HasColumnName("idfsEmployeeType")
                    .HasComment("Employee/group type identifier");

                entity.Property(e => e.IdfsSite)
                    .HasColumnName("idfsSite")
                    .HasDefaultValueSql("([dbo].[fnSiteID]())")
                    .HasComment("Site identifier");

                entity.Property(e => e.IntRowStatus).HasColumnName("intRowStatus");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.SourceSystemNameId)
                    .HasColumnName("SourceSystemNameID")
                    .HasDefaultValueSql("((10519001))");

                entity.Property(e => e.StrMaintenanceFlag)
                    .HasColumnName("strMaintenanceFlag")
                    .HasMaxLength(20);

                entity.Property(e => e.StrReservedAttribute).HasColumnName("strReservedAttribute");

                entity.HasOne(d => d.IdfsEmployeeCategoryNavigation)
                    .WithMany(p => p.TlbEmployeeIdfsEmployeeCategoryNavigation)
                    .HasForeignKey(d => d.IdfsEmployeeCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdfsEmployeeTypeNavigation)
                    .WithMany(p => p.TlbEmployeeIdfsEmployeeTypeNavigation)
                    .HasForeignKey(d => d.IdfsEmployeeType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tlbEmployee_trtBaseReference__idfsEmployeeType_R_1250");

                entity.HasOne(d => d.SourceSystemName)
                    .WithMany(p => p.TlbEmployeeSourceSystemName)
                    .HasForeignKey(d => d.SourceSystemNameId);
            });

            modelBuilder.Entity<TlbEmployeeGroupMember>(entity =>
            {
                entity.HasKey(e => new { e.IdfEmployeeGroup, e.IdfEmployee });

                entity.ToTable("tlbEmployeeGroupMember");

                entity.HasComment("Employee Group Members");

                entity.HasIndex(e => new { e.IdfEmployee, e.IntRowStatus })
                    .HasName("IX_tlbEmployeeGroupMember");

                entity.Property(e => e.IdfEmployeeGroup)
                    .HasColumnName("idfEmployeeGroup")
                    .HasComment("Group identifier");

                entity.Property(e => e.IdfEmployee).HasColumnName("idfEmployee");

                entity.Property(e => e.AuditCreateDtm)
                    .HasColumnName("AuditCreateDTM")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreateUser).HasMaxLength(200);

                entity.Property(e => e.AuditUpdateDtm)
                    .HasColumnName("AuditUpdateDTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuditUpdateUser).HasMaxLength(200);

                entity.Property(e => e.IntRowStatus).HasColumnName("intRowStatus");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.SourceSystemNameId)
                    .HasColumnName("SourceSystemNameID")
                    .HasDefaultValueSql("((10519001))");

                entity.Property(e => e.StrMaintenanceFlag)
                    .HasColumnName("strMaintenanceFlag")
                    .HasMaxLength(20);

                entity.Property(e => e.StrReservedAttribute).HasColumnName("strReservedAttribute");

                entity.HasOne(d => d.IdfEmployeeNavigation)
                    .WithMany(p => p.TlbEmployeeGroupMember)
                    .HasForeignKey(d => d.IdfEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tlbEmployeeGroupMember_tlbEmployee__idfEmployee_R_1668");

                entity.HasOne(d => d.SourceSystemName)
                    .WithMany(p => p.TlbEmployeeGroupMember)
                    .HasForeignKey(d => d.SourceSystemNameId);
            });

            modelBuilder.Entity<TlbOffice>(entity =>
            {
                entity.HasKey(e => e.IdfOffice)
                    .HasName("XPKtlbOffice");

                entity.ToTable("tlbOffice");

                entity.HasComment("Offices");

                entity.HasIndex(e => new { e.IdfOffice, e.IdfLocation })
                    .HasName("IX_tlbOffice_idfLocation");

                entity.Property(e => e.IdfOffice)
                    .HasColumnName("idfOffice")
                    .HasComment("Office identifier")
                    .ValueGeneratedNever();

                entity.Property(e => e.AuditCreateDtm)
                    .HasColumnName("AuditCreateDTM")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreateUser).HasMaxLength(200);

                entity.Property(e => e.AuditUpdateDtm)
                    .HasColumnName("AuditUpdateDTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuditUpdateUser).HasMaxLength(200);

                entity.Property(e => e.IdfCustomizationPackage)
                    .HasColumnName("idfCustomizationPackage")
                    .HasComment("Country identifier");

                entity.Property(e => e.IdfLocation).HasColumnName("idfLocation");

                entity.Property(e => e.IdfsOfficeAbbreviation)
                    .HasColumnName("idfsOfficeAbbreviation")
                    .HasComment("Office abbreviation identifier");

                entity.Property(e => e.IdfsOfficeName)
                    .HasColumnName("idfsOfficeName")
                    .HasComment("Office name identifier");

                entity.Property(e => e.IdfsSite)
                    .HasColumnName("idfsSite")
                    .HasDefaultValueSql("([dbo].[fnSiteID]())")
                    .HasComment("Site identifier");

                entity.Property(e => e.IntHacode).HasColumnName("intHACode");

                entity.Property(e => e.IntRowStatus).HasColumnName("intRowStatus");

                entity.Property(e => e.LegalFormId).HasColumnName("LegalFormID");

                entity.Property(e => e.MainFormOfActivityId).HasColumnName("MainFormOfActivityID");

                entity.Property(e => e.OrganizationTypeId).HasColumnName("OrganizationTypeID");

                entity.Property(e => e.OwnershipFormId).HasColumnName("OwnershipFormID");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.SourceSystemNameId)
                    .HasColumnName("SourceSystemNameID")
                    .HasDefaultValueSql("((10519001))");

                entity.Property(e => e.StrContactPhone)
                    .HasColumnName("strContactPhone")
                    .HasMaxLength(200)
                    .HasComment("Office Contact phone number");

                entity.Property(e => e.StrMaintenanceFlag)
                    .HasColumnName("strMaintenanceFlag")
                    .HasMaxLength(20);

                entity.Property(e => e.StrOrganizationId)
                    .HasColumnName("strOrganizationID")
                    .HasMaxLength(100);

                entity.Property(e => e.StrReservedAttribute).HasColumnName("strReservedAttribute");

                entity.HasOne(d => d.IdfsOfficeAbbreviationNavigation)
                    .WithMany(p => p.TlbOfficeIdfsOfficeAbbreviationNavigation)
                    .HasForeignKey(d => d.IdfsOfficeAbbreviation)
                    .HasConstraintName("FK_tlbOffice_trtBaseReference__idfsOfficeAbbreviation_R_704");

                entity.HasOne(d => d.IdfsOfficeNameNavigation)
                    .WithMany(p => p.TlbOfficeIdfsOfficeNameNavigation)
                    .HasForeignKey(d => d.IdfsOfficeName)
                    .HasConstraintName("FK_tlbOffice_trtBaseReference__idfsOfficeName_R_703");

                entity.HasOne(d => d.LegalForm)
                    .WithMany(p => p.TlbOfficeLegalForm)
                    .HasForeignKey(d => d.LegalFormId);

                entity.HasOne(d => d.MainFormOfActivity)
                    .WithMany(p => p.TlbOfficeMainFormOfActivity)
                    .HasForeignKey(d => d.MainFormOfActivityId);

                entity.HasOne(d => d.OrganizationType)
                    .WithMany(p => p.TlbOfficeOrganizationType)
                    .HasForeignKey(d => d.OrganizationTypeId)
                    .HasConstraintName("FK_tlbOffice_BaseRef_");

                entity.HasOne(d => d.OwnershipForm)
                    .WithMany(p => p.TlbOfficeOwnershipForm)
                    .HasForeignKey(d => d.OwnershipFormId);

                entity.HasOne(d => d.SourceSystemName)
                    .WithMany(p => p.TlbOfficeSourceSystemName)
                    .HasForeignKey(d => d.SourceSystemNameId);
            });

            modelBuilder.Entity<TlbPerson>(entity =>
            {
                entity.HasKey(e => e.IdfPerson)
                    .HasName("XPKtlbPerson");

                entity.ToTable("tlbPerson");

                entity.HasComment("Staff Persons (Officers)");

                entity.Property(e => e.IdfPerson)
                    .HasColumnName("idfPerson")
                    .HasComment("Officer identifier")
                    .ValueGeneratedNever();

                entity.Property(e => e.AuditCreateDtm)
                    .HasColumnName("AuditCreateDTM")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreateUser).HasMaxLength(200);

                entity.Property(e => e.AuditUpdateDtm)
                    .HasColumnName("AuditUpdateDTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuditUpdateUser).HasMaxLength(200);

                entity.Property(e => e.IdfDepartment)
                    .HasColumnName("idfDepartment")
                    .HasComment("Department identifier");

                entity.Property(e => e.IdfInstitution)
                    .HasColumnName("idfInstitution")
                    .HasComment("Institution identifier");

                entity.Property(e => e.IdfsStaffPosition)
                    .HasColumnName("idfsStaffPosition")
                    .HasComment("Staff position identifier");

                entity.Property(e => e.IntRowStatus).HasColumnName("intRowStatus");

                entity.Property(e => e.PersonalIdtypeId).HasColumnName("PersonalIDTypeID");

                entity.Property(e => e.PersonalIdvalue)
                    .HasColumnName("PersonalIDValue")
                    .HasMaxLength(100);

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.SourceSystemNameId)
                    .HasColumnName("SourceSystemNameID")
                    .HasDefaultValueSql("((10519001))");

                entity.Property(e => e.StrBarcode)
                    .HasColumnName("strBarcode")
                    .HasMaxLength(200)
                    .HasComment("Barcode (alphanumeric badge code)");

                entity.Property(e => e.StrContactPhone)
                    .HasColumnName("strContactPhone")
                    .HasMaxLength(200)
                    .HasComment("Officer contact phone number");

                entity.Property(e => e.StrFamilyName)
                    .HasColumnName("strFamilyName")
                    .HasMaxLength(200)
                    .HasComment("Officer Last name");

                entity.Property(e => e.StrFirstName)
                    .HasColumnName("strFirstName")
                    .HasMaxLength(200)
                    .HasComment("Officer First name");

                entity.Property(e => e.StrMaintenanceFlag)
                    .HasColumnName("strMaintenanceFlag")
                    .HasMaxLength(20);

                entity.Property(e => e.StrReservedAttribute).HasColumnName("strReservedAttribute");

                entity.Property(e => e.StrSecondName)
                    .HasColumnName("strSecondName")
                    .HasMaxLength(200)
                    .HasComment("Officer Middle name");

                entity.HasOne(d => d.IdfInstitutionNavigation)
                    .WithMany(p => p.TlbPerson)
                    .HasForeignKey(d => d.IdfInstitution)
                    .HasConstraintName("FK_tlbPerson_tlbOffice__idfInstitution_R_1509");

                entity.HasOne(d => d.IdfPersonNavigation)
                    .WithOne(p => p.TlbPerson)
                    .HasForeignKey<TlbPerson>(d => d.IdfPerson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tlbPerson_tlbEmployee__idfPerson_R_1498");

                entity.HasOne(d => d.IdfsStaffPositionNavigation)
                    .WithMany(p => p.TlbPersonIdfsStaffPositionNavigation)
                    .HasForeignKey(d => d.IdfsStaffPosition)
                    .HasConstraintName("FK_tlbPerson_trtBaseReference__idfsStaffPosition_R_1511");

                entity.HasOne(d => d.PersonalIdtype)
                    .WithMany(p => p.TlbPersonPersonalIdtype)
                    .HasForeignKey(d => d.PersonalIdtypeId);

                entity.HasOne(d => d.SourceSystemName)
                    .WithMany(p => p.TlbPersonSourceSystemName)
                    .HasForeignKey(d => d.SourceSystemNameId);
            });

            modelBuilder.Entity<TrtBaseReference>(entity =>
            {
                entity.HasKey(e => e.IdfsBaseReference)
                    .HasName("XPKtrtBaseReference");

                entity.ToTable("trtBaseReference");

                entity.HasComment("Base Reference (translatable) table ");

                entity.HasIndex(e => e.StrBaseReferenceCode);

                entity.HasIndex(e => new { e.StrDefault, e.IdfsReferenceType, e.IntRowStatus })
                    .HasName("IX_trtBaseReference_RS1");

                entity.HasIndex(e => new { e.IdfsBaseReference, e.IntHacode, e.IntOrder, e.StrBaseReferenceCode, e.StrDefault, e.IdfsReferenceType, e.IntRowStatus })
                    .HasName("IX_trtBaseReference_RR");

                entity.Property(e => e.IdfsBaseReference)
                    .HasColumnName("idfsBaseReference")
                    .HasComment("Base reference value identifier")
                    .ValueGeneratedNever();

                entity.Property(e => e.AuditCreateDtm)
                    .HasColumnName("AuditCreateDTM")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreateUser).HasMaxLength(200);

                entity.Property(e => e.AuditUpdateDtm)
                    .HasColumnName("AuditUpdateDTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuditUpdateUser).HasMaxLength(200);

                entity.Property(e => e.BlnSystem)
                    .HasColumnName("blnSystem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdfsReferenceType)
                    .HasColumnName("idfsReferenceType")
                    .HasComment("Reference type identifier");

                entity.Property(e => e.IntHacode)
                    .HasColumnName("intHACode")
                    .HasComment("Human/Animal Code");

                entity.Property(e => e.IntOrder)
                    .HasColumnName("intOrder")
                    .HasComment("Listing order");

                entity.Property(e => e.IntRowStatus).HasColumnName("intRowStatus");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.SourceSystemNameId).HasColumnName("SourceSystemNameID");

                entity.Property(e => e.StrBaseReferenceCode)
                    .HasColumnName("strBaseReferenceCode")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasComment("Base reference code (from version 2)");

                entity.Property(e => e.StrDefault)
                    .HasColumnName("strDefault")
                    .HasMaxLength(2000)
                    .HasComment("Default value");

                entity.Property(e => e.StrMaintenanceFlag)
                    .HasColumnName("strMaintenanceFlag")
                    .HasMaxLength(20);

                entity.Property(e => e.StrReservedAttribute).HasColumnName("strReservedAttribute");

                entity.HasOne(d => d.IdfsReferenceTypeNavigation)
                    .WithMany(p => p.TrtBaseReference)
                    .HasForeignKey(d => d.IdfsReferenceType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_trtBaseReference_trtReferenceType__idfsReferenceType_R_381");

                entity.HasOne(d => d.SourceSystemName)
                    .WithMany(p => p.InverseSourceSystemName)
                    .HasForeignKey(d => d.SourceSystemNameId);
            });

            modelBuilder.Entity<TrtReferenceType>(entity =>
            {
                entity.HasKey(e => e.IdfsReferenceType)
                    .HasName("XPKtrtReferenceType");

                entity.ToTable("trtReferenceType");

                entity.HasComment("Reference types");

                entity.Property(e => e.IdfsReferenceType)
                    .HasColumnName("idfsReferenceType")
                    .HasComment("Reference type identifier")
                    .ValueGeneratedNever();

                entity.Property(e => e.AuditCreateDtm)
                    .HasColumnName("AuditCreateDTM")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreateUser).HasMaxLength(200);

                entity.Property(e => e.AuditUpdateDtm)
                    .HasColumnName("AuditUpdateDTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuditUpdateUser).HasMaxLength(200);

                entity.Property(e => e.IdfMaxId)
                    .HasColumnName("idfMaxID")
                    .HasComment("Maximum identifier value reserved ");

                entity.Property(e => e.IdfMinId)
                    .HasColumnName("idfMinID")
                    .HasComment("Minimum identifier value reserved ");

                entity.Property(e => e.IntDefaultHacode).HasColumnName("intDefaultHACode");

                entity.Property(e => e.IntHacodeMask).HasColumnName("intHACodeMask");

                entity.Property(e => e.IntRowStatus).HasColumnName("intRowStatus");

                entity.Property(e => e.IntStandard).HasColumnName("intStandard");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.SourceSystemNameId).HasColumnName("SourceSystemNameID");

                entity.Property(e => e.StrChildTableColumnName)
                    .HasColumnName("strChildTableColumnName")
                    .HasMaxLength(100);

                entity.Property(e => e.StrEditorName)
                    .HasColumnName("strEditorName")
                    .HasMaxLength(100);

                entity.Property(e => e.StrMaintenanceFlag)
                    .HasColumnName("strMaintenanceFlag")
                    .HasMaxLength(20);

                entity.Property(e => e.StrReferenceTypeCode)
                    .HasColumnName("strReferenceTypeCode")
                    .HasMaxLength(36)
                    .HasComment("Reference type code");

                entity.Property(e => e.StrReferenceTypeName)
                    .HasColumnName("strReferenceTypeName")
                    .HasMaxLength(200)
                    .HasComment("Reference type name");

                entity.Property(e => e.StrReservedAttribute).HasColumnName("strReservedAttribute");

                entity.HasOne(d => d.SourceSystemName)
                    .WithMany(p => p.TrtReferenceType)
                    .HasForeignKey(d => d.SourceSystemNameId);
            });

            modelBuilder.Entity<TrtStringNameTranslation>(entity =>
            {
                entity.HasKey(e => new { e.IdfsBaseReference, e.IdfsLanguage })
                    .HasName("XPKtrtStringNameTranslation");

                entity.ToTable("trtStringNameTranslation");

                entity.HasComment("Base reference translated values");

                entity.HasIndex(e => new { e.StrTextString, e.IdfsBaseReference, e.IdfsLanguage })
                    .HasName("IX_trtStringNameTranslation_BL");

                entity.HasIndex(e => new { e.StrTextString, e.IdfsLanguage, e.IntRowStatus })
                    .HasName("IX_trtStringNameTranslation_RS1");

                entity.Property(e => e.IdfsBaseReference)
                    .HasColumnName("idfsBaseReference")
                    .HasComment("Base reference value identifier");

                entity.Property(e => e.IdfsLanguage)
                    .HasColumnName("idfsLanguage")
                    .HasComment("Language identifier");

                entity.Property(e => e.AuditCreateDtm)
                    .HasColumnName("AuditCreateDTM")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreateUser).HasMaxLength(200);

                entity.Property(e => e.AuditUpdateDtm)
                    .HasColumnName("AuditUpdateDTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuditUpdateUser).HasMaxLength(200);

                entity.Property(e => e.IntRowStatus).HasColumnName("intRowStatus");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.SourceSystemNameId).HasColumnName("SourceSystemNameID");

                entity.Property(e => e.StrMaintenanceFlag)
                    .HasColumnName("strMaintenanceFlag")
                    .HasMaxLength(20);

                entity.Property(e => e.StrReservedAttribute).HasColumnName("strReservedAttribute");

                entity.Property(e => e.StrTextString)
                    .HasColumnName("strTextString")
                    .HasMaxLength(2000)
                    .HasComment("Translated value in specified language ");

                entity.HasOne(d => d.IdfsBaseReferenceNavigation)
                    .WithMany(p => p.TrtStringNameTranslationIdfsBaseReferenceNavigation)
                    .HasForeignKey(d => d.IdfsBaseReference)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_trtStringNameTranslation_trtBaseReference__idfsBaseReference_R_385");

                entity.HasOne(d => d.IdfsLanguageNavigation)
                    .WithMany(p => p.TrtStringNameTranslationIdfsLanguageNavigation)
                    .HasForeignKey(d => d.IdfsLanguage)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_trtStringNameTranslation_trtBaseReference__idfsLanguage_R_1584");

                entity.HasOne(d => d.SourceSystemName)
                    .WithMany(p => p.TrtStringNameTranslationSourceSystemName)
                    .HasForeignKey(d => d.SourceSystemNameId);
            });

            modelBuilder.Entity<TrtVectorType>(entity =>
            {
                entity.HasKey(e => e.IdfsVectorType);

                entity.ToTable("trtVectorType");

                entity.Property(e => e.IdfsVectorType)
                    .HasColumnName("idfsVectorType")
                    .ValueGeneratedNever();

                entity.Property(e => e.AuditCreateDtm)
                    .HasColumnName("AuditCreateDTM")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreateUser).HasMaxLength(200);

                entity.Property(e => e.AuditUpdateDtm)
                    .HasColumnName("AuditUpdateDTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuditUpdateUser).HasMaxLength(200);

                entity.Property(e => e.BitCollectionByPool).HasColumnName("bitCollectionByPool");

                entity.Property(e => e.IntRowStatus).HasColumnName("intRowStatus");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.SourceSystemNameId).HasColumnName("SourceSystemNameID");

                entity.Property(e => e.StrCode)
                    .HasColumnName("strCode")
                    .HasMaxLength(50);

                entity.Property(e => e.StrMaintenanceFlag)
                    .HasColumnName("strMaintenanceFlag")
                    .HasMaxLength(20);

                entity.Property(e => e.StrReservedAttribute).HasColumnName("strReservedAttribute");

                entity.HasOne(d => d.IdfsVectorTypeNavigation)
                    .WithOne(p => p.TrtVectorTypeIdfsVectorTypeNavigation)
                    .HasForeignKey<TrtVectorType>(d => d.IdfsVectorType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_trtVectorType_trtBaseReference__idfsVectorType");

                entity.HasOne(d => d.SourceSystemName)
                    .WithMany(p => p.TrtVectorTypeSourceSystemName)
                    .HasForeignKey(d => d.SourceSystemNameId);
            });

            modelBuilder.Entity<TstObjectAccess>(entity =>
            {
                entity.HasKey(e => e.IdfObjectAccess)
                    .HasName("XPKtstObjectAccess");

                entity.ToTable("tstObjectAccess");

                entity.HasComment("Object access");

                entity.HasIndex(e => e.IdfsObjectId);

                entity.HasIndex(e => new { e.IdfActor, e.IdfsOnSite })
                    .HasName("IX_tstObjectAccess_idfsOnSiteidfActor");

                entity.Property(e => e.IdfObjectAccess)
                    .HasColumnName("idfObjectAccess")
                    .ValueGeneratedNever();

                entity.Property(e => e.IdfActor)
                    .HasColumnName("idfActor")
                    .HasComment("Actor identifier");

                entity.Property(e => e.IdfsObjectId)
                    .HasColumnName("idfsObjectID")
                    .HasComment("Object identifier");

                entity.Property(e => e.IdfsObjectOperation)
                    .HasColumnName("idfsObjectOperation")
                    .HasComment("Object Operation identifier");

                entity.Property(e => e.IdfsObjectType)
                    .HasColumnName("idfsObjectType")
                    .HasComment("Object Type identifier");

                entity.Property(e => e.IdfsOnSite)
                    .HasColumnName("idfsOnSite")
                    .HasComment("Site identifier");

                entity.Property(e => e.IntPermission)
                    .HasColumnName("intPermission")
                    .HasComment("Permission (0/1)");

                entity.Property(e => e.IntRowStatus).HasColumnName("intRowStatus");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.SourceSystemNameId).HasColumnName("SourceSystemNameID");

                entity.Property(e => e.StrMaintenanceFlag)
                    .HasColumnName("strMaintenanceFlag")
                    .HasMaxLength(20);

                entity.HasOne(d => d.IdfActorNavigation)
                    .WithMany(p => p.TstObjectAccess)
                    .HasForeignKey(d => d.IdfActor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tstObjectAccess_tlbEmployee__idfActor_R_1618");

                entity.HasOne(d => d.IdfsObjectOperationNavigation)
                    .WithMany(p => p.TstObjectAccessIdfsObjectOperationNavigation)
                    .HasForeignKey(d => d.IdfsObjectOperation)
                    .HasConstraintName("FK_tstObjectAccess_trtBaseReference__idfsObjectOperation_R_1586");

                entity.HasOne(d => d.IdfsObjectTypeNavigation)
                    .WithMany(p => p.TstObjectAccessIdfsObjectTypeNavigation)
                    .HasForeignKey(d => d.IdfsObjectType)
                    .HasConstraintName("FK_tstObjectAccess_trtBaseReference__idfsObjectType_R_1580");

                entity.HasOne(d => d.SourceSystemName)
                    .WithMany(p => p.TstObjectAccessSourceSystemName)
                    .HasForeignKey(d => d.SourceSystemNameId);
            });

            modelBuilder.Entity<TstUserTable>(entity =>
            {
                entity.HasKey(e => e.IdfUserId)
                    .HasName("XPKtstUserTable");

                entity.ToTable("tstUserTable");

                entity.HasComment("Users");

                entity.HasIndex(e => e.IdfPerson)
                    .HasName("IX_tstUserTable_idfPersonId");

                entity.Property(e => e.IdfUserId)
                    .HasColumnName("idfUserID")
                    .HasComment("User identifier")
                    .ValueGeneratedNever();

                entity.Property(e => e.AuditCreateDtm)
                    .HasColumnName("AuditCreateDTM")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreateUser)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AppUser')");

                entity.Property(e => e.AuditUpdateDtm)
                    .HasColumnName("AuditUpdateDTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuditUpdateUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BinPassword)
                    .HasColumnName("binPassword")
                    .HasMaxLength(50)
                    .HasComment("Password");

                entity.Property(e => e.BlnDisabled).HasColumnName("blnDisabled");

                entity.Property(e => e.DatPasswordSet)
                    .HasColumnName("datPasswordSet")
                    .HasColumnType("datetime");

                entity.Property(e => e.DatTryDate)
                    .HasColumnName("datTryDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailAddress).HasMaxLength(256);

                entity.Property(e => e.IdfPerson)
                    .HasColumnName("idfPerson")
                    .HasComment("Person identifier");

                entity.Property(e => e.IdfsSite)
                    .HasColumnName("idfsSite")
                    .HasDefaultValueSql("([dbo].[FN_GBL_SITEID_GET]())")
                    .HasComment("Site identifier");

                entity.Property(e => e.IntRowStatus).HasColumnName("intRowStatus");

                entity.Property(e => e.IntTry).HasColumnName("intTry");

                entity.Property(e => e.LockoutEndDtm)
                    .HasColumnName("LockoutEndDTM")
                    .HasColumnType("datetime");

                entity.Property(e => e.PreferredLanguageId)
                    .HasColumnName("PreferredLanguageID")
                    .HasDefaultValueSql("([dbo].[FN_GBL_LanguageCode_GET]('en-US'))");

                entity.Property(e => e.Rowguid)
                    .HasColumnName("rowguid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.SourceSystemNameId).HasColumnName("SourceSystemNameID");

                entity.Property(e => e.StrAccountName)
                    .HasColumnName("strAccountName")
                    .HasMaxLength(200);

                entity.Property(e => e.StrMaintenanceFlag)
                    .HasColumnName("strMaintenanceFlag")
                    .HasMaxLength(20);

                entity.HasOne(d => d.IdfPersonNavigation)
                    .WithMany(p => p.TstUserTable)
                    .HasForeignKey(d => d.IdfPerson);

                entity.HasOne(d => d.PreferredLanguage)
                    .WithMany(p => p.TstUserTablePreferredLanguage)
                    .HasForeignKey(d => d.PreferredLanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tstUserTable_trtBaseReference_idfsBaseReference");

                entity.HasOne(d => d.SourceSystemName)
                    .WithMany(p => p.TstUserTableSourceSystemName)
                    .HasForeignKey(d => d.SourceSystemNameId);
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}