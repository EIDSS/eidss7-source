/*
Deployment script for EIDSS7_GG_UAT

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

UPDATE  tstAggrSetting 
SET     idfsSite = 1100 
WHERE   idfsSite IS NULL
GO

PRINT N'Dropping Trigger [dbo].[TR_tstAggrSetting_I_Delete]...';


GO
DROP TRIGGER [dbo].[TR_tstAggrSetting_I_Delete];


GO
PRINT N'Dropping Default Constraint [dbo].[newid__2026]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [newid__2026];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_tstAggrSetting_CreateDTM]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [DF_tstAggrSetting_CreateDTM];


GO
PRINT N'Dropping Default Constraint [dbo].[Def_0_2023]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [Def_0_2023];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [Migr70].[DisabledForeignKeys]...';


GO
ALTER TABLE [Migr70].[DisabledForeignKeys] DROP CONSTRAINT [DF__DisabledF__FK_DI__0C5E2320];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObj_EIDSSMenu_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_AppObj_EIDSSMenu_MenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObj_ObjName]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_AppObj_ObjName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObj_ObjType]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_AppObj_ObjType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObj_PageToolTip]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_AppObj_PageToolTip];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetTranslation__idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] DROP CONSTRAINT [FK_trtResourceSetTranslation__idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] DROP CONSTRAINT [FK_trtResourceSetTranslation_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetTranslation_trtResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] DROP CONSTRAINT [FK_trtResourceSetTranslation_trtResourceSet];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceTranslation_idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] DROP CONSTRAINT [FK_trtResourceTranslation_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] DROP CONSTRAINT [FK_trtResourceTranslation_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceTranslation_trtResource]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] DROP CONSTRAINT [FK_trtResourceTranslation_trtResource];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuery_tlbEmployee]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP CONSTRAINT [FK_tasQuery_tlbEmployee];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuery_tlbOffice]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP CONSTRAINT [FK_tasQuery_tlbOffice];


GO
PRINT N'Dropping Unique Constraint [dbo].[UK_tlbPostalCode]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] DROP CONSTRAINT [UK_tlbPostalCode];


GO

PRINT N'Altering Table [dbo].[tasQuery]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP COLUMN [idfEmployee], COLUMN [idfOffice];


GO
PRINT N'Altering Table [dbo].[trtReferenceType]...';


GO
ALTER TABLE [dbo].[trtReferenceType] DROP COLUMN [EditorSettings];


GO
PRINT N'Starting rebuilding table [dbo].[tstAggrSetting]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tstAggrSetting] (
    [idfsAggrCaseType]        BIGINT           NOT NULL,
    [idfCustomizationPackage] BIGINT           NOT NULL,
    [idfsStatisticAreaType]   BIGINT           NOT NULL,
    [idfsStatisticPeriodType] BIGINT           NOT NULL,
    [strValue]                NVARCHAR (200)   NULL,
    [intRowStatus]            INT              CONSTRAINT [Def_0_2023] DEFAULT ((0)) NOT NULL,
    [rowguid]                 UNIQUEIDENTIFIER CONSTRAINT [newid__2026] DEFAULT (newid()) ROWGUIDCOL NOT NULL,
    [SourceSystemNameID]      BIGINT           NULL,
    [SourceSystemKeyValue]    NVARCHAR (MAX)   NULL,
    [AuditCreateUser]         NVARCHAR (200)   NULL,
    [AuditCreateDTM]          DATETIME         CONSTRAINT [DF_tstAggrSetting_CreateDTM] DEFAULT (getdate()) NULL,
    [AuditUpdateUser]         NVARCHAR (200)   NULL,
    [AuditUpdateDTM]          DATETIME         NULL,
    [idfsSite]                BIGINT           NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_XPKtstAggrSetting1] PRIMARY KEY CLUSTERED ([idfsAggrCaseType] ASC, [idfCustomizationPackage] ASC, [idfsSite] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tstAggrSetting])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tstAggrSetting] ([idfsAggrCaseType], [idfCustomizationPackage], [idfsStatisticAreaType], [idfsStatisticPeriodType], [strValue], [intRowStatus], [rowguid], [SourceSystemNameID], [SourceSystemKeyValue], [AuditCreateUser], [AuditCreateDTM], [AuditUpdateUser], [AuditUpdateDTM])
        SELECT   [idfsAggrCaseType],
                 [idfCustomizationPackage],
                 [idfsStatisticAreaType],
                 [idfsStatisticPeriodType],
                 [strValue],
                 [intRowStatus],
                 [rowguid],
                 [SourceSystemNameID],
                 [SourceSystemKeyValue],
                 [AuditCreateUser],
                 [AuditCreateDTM],
                 [AuditUpdateUser],
                 [AuditUpdateDTM]
        FROM     [dbo].[tstAggrSetting]
        ORDER BY [idfsAggrCaseType] ASC, [idfCustomizationPackage] ASC;
    END

DROP TABLE [dbo].[tstAggrSetting];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tstAggrSetting]', N'tstAggrSetting';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_XPKtstAggrSetting1]', N'XPKtstAggrSetting', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Unique Constraint [dbo].[UK_tlbPostalCode]...';


GO
ALTER TABLE [dbo].[tlbPostalCode]
    ADD CONSTRAINT [UK_tlbPostalCode] UNIQUE NONCLUSTERED ([strPostCode] ASC, [idfsLocation] ASC);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_EIDSSMenu_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_EIDSSMenu_MenuID] FOREIGN KEY ([RelatedEIDSSMenuID]) REFERENCES [dbo].[LkupEIDSSMenu] ([EIDSSMenuID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_ObjName]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_ObjName] FOREIGN KEY ([AppObjectNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_ObjType]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_ObjType] FOREIGN KEY ([AppObjectTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_PageToolTip]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_PageToolTip] FOREIGN KEY ([PageTitleID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetTranslation__idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetTranslation__idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetTranslation_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetTranslation_trtResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetTranslation_trtResourceSet] FOREIGN KEY ([idfsResourceSet]) REFERENCES [dbo].[trtResourceSet] ([idfsResourceSet]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceTranslation_idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceTranslation_idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceTranslation_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceTranslation_trtResource]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceTranslation_trtResource] FOREIGN KEY ([idfsResource]) REFERENCES [dbo].[trtResource] ([idfsResource]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941] FOREIGN KEY ([idfsAggrCaseType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612] FOREIGN KEY ([idfsStatisticAreaType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613] FOREIGN KEY ([idfsStatisticPeriodType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Altering Trigger [dbo].[TR_gisLocation_UpdateDenormalizedHierarchy]...';


GO

-- =============================================
-- Author:		Steven Verner
-- Create date: 1/4/2021
-- Description:	Rebuilds gisLocationDenormalized when:
	-- 1.  When a new location is inserted.
	-- 2.  When a location is re-parented (moved)
	-- 3.  When the location is deleted (intRowStatus = 1)
-- History:
--	Date		Developer			Comments
--	03/17/2022	Steven Verner		Fixed the issue where the incorrect level type was specified.
--  10/31/2022  Mani Govindarajan   Update the idfsLocation based on location Node and Node.ToString(), Updated the Final Insert-Selct Condition.
--  01/09/2023  Steven Verner		Modified gisStringNameTranslation joins to use left joins.
-- =============================================
ALTER TRIGGER [dbo].[TR_gisLocation_UpdateDenormalizedHierarchy]
   ON  [dbo].[gisLocation] 
   AFTER INSERT,DELETE,UPDATE
AS
BEGIN
	SET NOCOUNT ON;

		DECLARE 
			@current INT, 
			@max INT, 
			@languageId BIGINT, 
			@hi HIERARCHYID ,
			@hiString varchar(255);


		DECLARE @t TABLE(
			L1ID BIGINT, L2ID BIGINT, L3ID BIGINT, L4ID BIGINT, L5ID BIGINT, L6ID BIGINT, L7ID BIGINT,
			L1NAME NVARCHAR(255),L2NAME NVARCHAR(255),L3NAME NVARCHAR(255),L4NAME NVARCHAR(255),L5NAME NVARCHAR(255),L6NAME NVARCHAR(255),L7NAME NVARCHAR(255),
			Node HIERARCHYID, 
			[Level] INT,
			idfsLocation BIGINT,
			LanguageId BIGINT )
		
		DECLARE @Languages TABLE(id INT IDENTITY, idfsLanguage BIGINT)
		INSERT INTO @Languages(idfsLanguage)
		SELECT idfsLanguage
		FROM dbo.gisLocationDenormalized ld
		GROUP BY idfsLanguage 
		
		DECLARE @idfsLocation BIGINT = NULL,
			@newParent HIERARCHYID,
			@oldParent HIERARCHYID,
			@newDeleted BIT,
			@oldDeleted BIT

			-- The following use cases must be captured:
			-- 1.  When a new location is inserted.
			-- 2.  When a location is re-parented (moved)
			-- 3.  When the location is deleted (intRowStatus = 1)
			-- 4.  When the location name changes...  (This use case cannot be captured here; it must be captured on the trtBaseReference table trigger...

	IF EXISTS(SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted) -- This is an update
	BEGIN

		--	====================================================
		--  Test to see if the location moved...
		--	====================================================
		SELECT 
		 @idfsLocation = idfsLocation
		,@newDeleted = CASE WHEN intRowStatus=1 THEN 1 ELSE 0 END
		,@newParent = NODE.GetAncestor(1)
		FROM Inserted 

		SELECT @oldDeleted = intRowStatus,  @oldParent = Node.GetAncestor(1) 
		FROM DELETED

		-- We always remove all references of the location in the gislocationDenormalized table,
		-- then generate a new entry...
		-- This handles both when a record was deleted (intRowStatus=1) and the need to remove the existing recordsprior to generating a new one for reparenting...

		-- When the location has moved or the record is reactivated (intRowStatus = 0)...
		IF(@newParent != @oldParent) 
		BEGIN 
			DELETE FROM gisLocationDenormalized WHERE idfsLocation = @idfsLocation
			GOTO GenerateNewReference
		END ELSE IF( @newDeleted = 1 )
			DELETE FROM gisLocationDenormalized WHERE idfsLocation = @idfsLocation

		ELSE IF(@oldDeleted =1 and @newDeleted = 0 )
			BEGIN
				DELETE FROM gisLocationDenormalized WHERE idfsLocation = @idfsLocation
				GOTO GenerateNewReference
			END

		GOTO Fini
	END

	IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted) -- This is an insert
	BEGIN
		-- New location was inserted...
		SELECT @idfsLocation = idfsLocation FROM inserted;
		GOTO GenerateNewReference
	END

	IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted) -- this is a delete
	BEGIN
		-- Location was deleted...
		SELECT @idfsLocation = idfsLocation FROM deleted;
		DELETE FROM dbo.gisLocationDenormalized WHERE idfsLocation = @idfsLocation
	END

	GOTO Fini
	
	GenerateNewReference:  
	--	====================================================


		SELECT @current = 1, @max= COUNT(*) FROM @Languages
		
		SELECT @hi = Node, @hiString=Node.ToString()  FROM gisLocation l WHERE l.idfsLocation = @idfsLocation


		-- iterate thru all the languages and insert the hierarchy record for each...
		WHILE (@current <= @max)
		BEGIN
			
			--	Select a language...
			SELECT @languageId = idfsLanguage FROM @Languages WHERE id = @current

			-- Perform the insert...
			-- 1st into table variable...
			INSERT INTO @t(
						 L1ID
						,L2ID
						,L3ID
						,L4ID
						,L5ID
						,L6ID
						,L7ID
						,L1NAME
						,L2NAME
						,L3NAME
						,L4NAME
						,L5NAME
						,L6NAME
						,L7NAME
						,Node
						,[Level]
						--,idfsLocation
						,LanguageId)

			-- PIVOT!!!!!
			-- Flatten the hierarchy and insert into gisLocationDenormalized...
			SELECT 
				-- LevelIDs 1 thru 7...
				MAX(CASE WHEN [Level]=1 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=2 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=3 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=4 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=5 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=6 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=7 THEN idfsLocation END ),
				-- LevelNames 1 thru 7...
				MAX(CASE WHEN [Level]=1 THEN LevelName END ),
				MAX(CASE WHEN [Level]=2 THEN LevelName END ),
				MAX(CASE WHEN [Level]=3 THEN LevelName END ),
				MAX(CASE WHEN [Level]=4 THEN LevelName END ),
				MAX(CASE WHEN [Level]=5 THEN LevelName END ),
				MAX(CASE WHEN [Level]=6 THEN LevelName END ),
				MAX(CASE WHEN [Level]=7 THEN LevelName END ),
				-- Node...
				MAX(Node),
				MAX(level),
				--MAX(idfsLocation),
				@languageId
			FROM 
				(
				SELECT 
					l.Node.GetLevel() [Level]
					,COALESCE(snt.strTextString, b.strDefault) [LevelName]
					,b.strDefault [LevelNameDefault]
					,idfsLocation
					,Node
					--,LevelType.strTextString
					 ,rn=ROW_NUMBER() OVER (PARTITION BY 0 ORDER BY node.GetLevel())
				FROM gisLocation l
				JOIN gisBaseReference b ON b.idfsGISBaseReference = l.idfsLocation
				LEFT JOIN dbo.gisStringNameTranslation snt ON snt.idfsGISBaseReference = l.idfsLocation AND 
					snt.idfsLanguage = @languageId
				WHERE @hi.IsDescendantOf(node) = 1
				) a

				-- Reset...
				SET @current = @current+1
				SELECT @languageId = NULL
		END

		-- Update the idfsLocation...
		UPDATE @t 
		SET idfsLocation = 
		CASE
			WHEN level =1 AND  Node =@hiString THEN L1ID
			WHEN level =2 AND  Node =@hiString THEN L2ID
			WHEN level =3 AND  Node =@hiString THEN L3ID
			WHEN level =4 AND  Node =@hiString THEN  L4ID
			WHEN level =5 AND  Node =@hiString THEN   L5ID 
			WHEN level =6 AND  Node =@hiString THEN   L6ID
			WHEN level =7 AND  Node =@hiString THEN   L7ID 
		END
		

		-- Finally, insert into gis table...
		INSERT INTO dbo.gisLocationDenormalized
			(
				Level1ID, 
				Level2ID, 
				Level3ID, 
				Level4ID, 
				Level5ID, 
				Level6ID, 
				Level7ID,
				Level1Name,
				Level2Name, 
				Level3Name, 
				Level4Name, 
				Level5Name, 
				Level6Name, 
				Level7Name,
				Node,
				Level,
				idfsLocation,
				LevelType,
				idfsLanguage
			)
		SELECT  L1ID,L2ID,L3ID,L4ID,L5ID,L6ID,L7ID,
				L1NAME,L2NAME,L3NAME,L4NAME,L5NAME,L6NAME,L7NAME,
				node,[level],l.idfsLocation,COALESCE(lt.strTextString, T.strGISReferenceTypeName),l.LanguageId
		FROM @t l
		JOIN gisBaseReference b ON b.idfsGISBaseReference = l.idfsLocation
		JOIN gisReferenceType t ON t.idfsGISReferenceType = b.idfsGISReferenceType
		LEFT JOIN dbo.trtStringNameTranslation lt ON 
		lt.idfsLanguage = l.LanguageId AND lt.idfsBaseReference = 
		case l.level
			WHEN 1 THEN 10003001 
			WHEN 2 THEN 10003003
			WHEN 3 THEN 10003002 
			WHEN 4 THEN 10003004 
			WHEN 5 THEN 0
			WHEN 6 THEN 0
			WHEN 7 THEN 0
		ELSE 0 END



	Fini:
		-- Bye!
		RETURN

END
GO
PRINT N'Altering Function [dbo].[FN_GBL_TriggersWork]...';


GO

ALTER	FUNCTION [dbo].[FN_GBL_TriggersWork] ()
RETURNS BIT
AS
BEGIN
RETURN 1
--RETURN 0
END
GO
PRINT N'Altering Trigger [dbo].[TR_tlbTransferOutMaterial_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTransferOutMaterial_I_Delete]
    ON [dbo].[tlbTransferOutMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBaseReference_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBaseReference_I_Delete]
    ON [dbo].[trtBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_trtStringNameTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtStringNameTranslation_A_Update]
    ON [dbo].[trtStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtStringNameTranslation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtStringNameTranslation_I_Delete]
    ON [dbo].[trtStringNameTranslation];


GO
PRINT N'Creating Trigger [dbo].[TR_tstAggrSetting_A_Update]...';


GO

CREATE TRIGGER [dbo].[TR_tstAggrSetting_A_Update] ON [dbo].[tstAggrSetting]
FOR UPDATE
NOT FOR REPLICATION
AS
BEGIN

	IF (dbo.FN_GBL_TriggersWork() = 1 AND (UPDATE([idfsAggrCaseType]) OR UPDATE([idfCustomizationPackage])))  -- update to Primary Key is not allowed.
	BEGIN
		RAISERROR('Update Trigger: Not allowed to update PK.',16,1);
		ROLLBACK TRANSACTION;
	END

END
GO
PRINT N'Creating Trigger [dbo].[TR_tstAggrSetting_I_Delete]...';


GO


CREATE TRIGGER [dbo].[TR_tstAggrSetting_I_Delete] on [dbo].[tstAggrSetting]
INSTEAD OF DELETE
NOT FOR REPLICATION
AS
BEGIN

	IF (dbo.FN_GBL_TriggersWork() = 1)
	BEGIN

		WITH cteOnlyDeletedRecords([idfsAggrCaseType], [idfCustomizationPackage]) as
		(
			SELECT [idfsAggrCaseType], [idfCustomizationPackage] FROM deleted
			EXCEPT
			SELECT [idfsAggrCaseType], [idfCustomizationPackage] FROM inserted
		)

		UPDATE a
		SET  intRowStatus = 1
		FROM dbo.tstAggrSetting as a 
		INNER JOIN cteOnlyDeletedRecords as b 
			ON a.idfsAggrCaseType = b.idfsAggrCaseType
			AND a.idfCustomizationPackage = b.idfCustomizationPackage;

	END

END
GO
PRINT N'Refreshing Function [dbo].[FN_ADMIN_STAT_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FN_ADMIN_STAT_GetList]';


GO
PRINT N'Refreshing Function [dbo].[fn_Statistic_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_Statistic_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_GetRayonStatInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_GetRayonStatInfo]';


GO
PRINT N'Refreshing Function [Report].[FN_AggregateSettings_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[FN_AggregateSettings_GET]';


GO
PRINT N'Refreshing Function [dbo].[fnAggregateSettings]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnAggregateSettings]';


GO
PRINT N'Refreshing Function [Report].[FN_GBL_AggregateSettings_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[FN_GBL_AggregateSettings_GET]';


GO
PRINT N'Altering Function [dbo].[fn_DataAudit_SelectList]...';


GO


--##SUMMARY Returns list of data audit events.

--##REMARKS Author: Zurin M.
--##REMARKS Create date: 12.04.2010

--##RETURNS Returns list of data audit events.
-- Manickandan Govindarajan 01/24/2023 Added more columns



/*
Example of function call:

SELECT * FROM fn_DataAudit_SelectList ('en') 

*/


ALTER   FUNCTION [dbo].[fn_DataAudit_SelectList](
	@LangID as nvarchar(50) --##PARAM @LangID - language ID
)
returns table 
as
return

SELECT idfDataAuditEvent
	  ,idfsDataAuditObjectType AS idfsObjectType
      ,ObjectType.name AS ObjectType
      ,tauDataAuditEvent.idfsDataAuditEventType AS idfsActionName
      ,EventType.name AS ActionName
      ,tstSite.idfsSite
      ,tstSite.idfOffice
      ,tstSite.strSiteID
      ,datEnteringDate
      ,dbo.tauDataAuditEvent.idfMainObject
      ,dbo.tauDataAuditEvent.idfMainObjectTable
      ,tauDataAuditEvent.idfUserID
      ,tlbPerson.idfPerson
	  ,dbo.fnConcatFullName(strFamilyName, strFirstName, strSecondName)  AS strPersonName,
	  tauDataAuditEvent.idfsDataAuditEventType,
	  tauDataAuditEvent.idfsDataAuditObjectType,
	  tauDataAuditEvent.strMainObject,
	  tstSite.strSiteName,
	  tlbPerson.strFirstName,
	  tlbPerson.strFamilyName,
	  tlbPerson.strSecondName


FROM			dbo.tauDataAuditEvent
INNER JOIN		fnReferenceRepair(@LangID,19000016) AS EventType --'rftDataAuditEventType'
		ON		tauDataAuditEvent.idfsDataAuditEventType = EventType.idfsReference
				
INNER JOIN		fnReferenceRepair(@LangID,19000017) AS ObjectType --'rftDataAuditObjectType'
		ON		tauDataAuditEvent.idfsDataAuditObjectType = ObjectType.idfsReference
				
LEFT OUTER JOIN	(
							tstUserTable 
				INNER JOIN	tlbPerson 
					ON		tlbPerson.idfPerson = tstUserTable.idfPerson
				)
		ON		tstUserTable.idfUserID = tauDataAuditEvent.idfUserID

INNER JOIN		tstSite
		ON		tauDataAuditEvent.idfsSite = tstSite.idfsSite
GO
PRINT N'Altering Function [dbo].[fnEvaluatePermissions]...';


GO


/*
	select * from fnEvaluatePermissions(1)
*/

ALTER FUNCTION [dbo].[fnEvaluatePermissions]
(	
	@idfEmployee bigint
)
RETURNS TABLE 
AS
RETURN 
(
select		trtSystemFunction.idfsSystemFunction,
			trtBaseReference.strBaseReferenceCode,
			trtObjectTypeToObjectOperation.idfsObjectOperation,
			COALESCE(
						nullif(min(isnull(InstanceUser.intPermission,999)),999),
						nullif(min(isnull(InstanceDefault.intPermission,999)),999),
						nullif(min(isnull(TypeUser.intPermission,999)),999),
						nullif(min(isnull(TypeDefault.intPermission,999)),999),
						2
					) as intPermission
from		trtSystemFunction
inner join	trtBaseReference
on			trtBaseReference.idfsBaseReference=trtSystemFunction.idfsSystemFunction
inner join	trtObjectTypeToObjectOperation
on			trtSystemFunction.idfsObjectType=trtObjectTypeToObjectOperation.idfsObjectType
--user rights on instance
left join
(
			select		tstObjectAccess.idfsObjectID,
						tstObjectAccess.idfsObjectOperation,
						tstObjectAccess.intPermission
			from		tstObjectAccess
			inner join	fn_ObjectActorRelations(@idfEmployee) Groups
			on			tstObjectAccess.idfActor=Groups.idfEmployee and
						tstObjectAccess.intRowStatus=0 and
						tstObjectAccess.intPermission in (1,2) and 
						tstObjectAccess.idfsOnSite=dbo.fnPermissionSite()
)InstanceUser
on			trtSystemFunction.idfsSystemFunction=InstanceUser.idfsObjectID and
			trtObjectTypeToObjectOperation.idfsObjectOperation=InstanceUser.idfsObjectOperation
--default rights on instance
left join
(
			select		tstObjectAccess.idfsObjectID,
						tstObjectAccess.idfsObjectOperation,
						tstObjectAccess.intPermission
			from		tstObjectAccess
			where		tstObjectAccess.idfActor=-1 and
						tstObjectAccess.intRowStatus=0 and 
						tstObjectAccess.idfsOnSite=dbo.fnPermissionSite()
)InstanceDefault
on			trtSystemFunction.idfsSystemFunction=InstanceDefault.idfsObjectID and
			trtObjectTypeToObjectOperation.idfsObjectOperation=InstanceDefault.idfsObjectOperation
--user rights on Type
left join
(
			select		tstObjectAccess.idfsObjectOperation,
						tstObjectAccess.idfsObjectType,
						tstObjectAccess.intPermission
			from		tstObjectAccess
			inner join	fn_ObjectActorRelations(@idfEmployee) Groups
			on			tstObjectAccess.idfActor=Groups.idfEmployee and
						tstObjectAccess.intRowStatus=0 and
						tstObjectAccess.idfsObjectID is null and 
						tstObjectAccess.idfsOnSite=dbo.fnPermissionSite()

)TypeUser
on			trtSystemFunction.idfsObjectType=TypeUser.idfsObjectType and
			trtObjectTypeToObjectOperation.idfsObjectOperation=TypeUser.idfsObjectOperation
--default rights on Type
left join
(
			select		tstObjectAccess.idfsObjectOperation,
						tstObjectAccess.idfsObjectType,
						tstObjectAccess.intPermission
			from		tstObjectAccess
			WHERE		tstObjectAccess.idfActor=-1 and
						tstObjectAccess.intRowStatus=0 and
						tstObjectAccess.idfsObjectID is null and 
						tstObjectAccess.idfsOnSite=dbo.fnPermissionSite()
)TypeDefault
on			trtSystemFunction.idfsObjectType=TypeDefault.idfsObjectType and
			trtObjectTypeToObjectOperation.idfsObjectOperation=TypeDefault.idfsObjectOperation

where		trtBaseReference.intRowStatus=0
	AND trtSystemFunction.intRowStatus = 0

group by	trtSystemFunction.idfsSystemFunction,
			trtBaseReference.strBaseReferenceCode,
			trtObjectTypeToObjectOperation.idfsObjectOperation
)
GO
PRINT N'Altering Function [Report].[FN_GBL_AdressAsRow]...';


GO

--=====================================================================================================
-- Created by:				Mark Wilson
-- Description:				06/21/2017: check usp_HumanCaseDeduplication_GetDetail call this  V7 USP77: 
--                          Selects data from these tables: tlbGeoLocation(triggers);gisSettlement(triggers);
--							02/03/2023: Updated by Srini Goli To Improve performance 60B Genral Report
/*
----testing code:
select * from report.FN_GBL_AdressAsRow('ka')
*/
--=====================================================================================================
ALTER FUNCTION [Report].[FN_GBL_AdressAsRow](@LangID NVARCHAR(50))
RETURNS TABLE
AS
RETURN(

SELECT		tlbGeoLocation.idfGeoLocation,
			ISNULL(Country.[name], '') AS Country,
			ISNULL(Region.[name], '') AS Region,
			ISNULL(Rayon.[name], '') AS Rayon,
			ISNULL(tlbGeoLocation.strPostCode, '') AS PostalCode,
			ISNULL(SettlementType.[name], '') AS SettlementType,
			ISNULL(Settlement.[name], '') AS Settlement,
			ISNULL(tlbGeoLocation.strStreetName, '') AS Street,
			ISNULL(tlbGeoLocation.strHouse, '') AS House,
			ISNULL(tlbGeoLocation.strBuilding, '') AS Building,
			ISNULL(tlbGeoLocation.strApartment, '') AS Appartment,
			blnForeignAddress,
			ISNULL(tlbGeoLocation.strForeignAddress, '') AS strForeignAddress


FROM		(
		tlbGeoLocation 

		LEFT JOIN	dbo.FN_GBL_GIS_ReferenceRepair(@LangID,19000001 ) Country ON Country.idfsReference = tlbGeoLocation.idfsCountry
		LEFT JOIN	dbo.FN_GBL_GIS_ReferenceRepair(@LangID, 19000003) Region ON	Region.idfsReference = tlbGeoLocation.idfsRegion
		LEFT JOIN	dbo.FN_GBL_GIS_ReferenceRepair(@LangID, 19000002) Rayon ON Rayon.idfsReference = tlbGeoLocation.idfsRayon
		LEFT JOIN	dbo.FN_GBL_GIS_ReferenceRepair(@LangID, 19000004) Settlement ON	Settlement.idfsReference = tlbGeoLocation.idfsSettlement

		LEFT JOIN	dbo.FN_GBL_ReferenceRepair(@LangID, 19000038) GroundType ON GroundType.idfsReference = tlbGeoLocation.idfsGroundType
	)
	LEFT JOIN	(
		gisSettlement 
		INNER JOIN dbo.FN_GBL_GIS_ReferenceRepair(@LangID, 19000005) SettlementType	ON SettlementType.idfsReference = gisSettlement.idfsSettlementType
	)ON			gisSettlement.idfsSettlement = tlbGeoLocation.idfsSettlement

WHERE		tlbGeoLocation.intRowStatus = 0

)
GO
PRINT N'Altering Function [Report].[FN_REP_HumanCaseForAge_Get]...';


GO
--*************************************************************************************************
-- Name 				: FN_REP_HumanCaseForAge_Get
-- Description			: Returns Table of Human Cases for Age 
--                        span and dates  
--						
-- Author               : Mark Wilson
-- Revision History
-- June 2019 updated E6 code to E7 standards
--
--		Name       Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Stephen Long    01/31/2023 Fix for bug 5455.
--
-- Testing code:
-- SELECT * FROM report.FN_REP_HumanCaseForAge_Get (2009-01-01, '2011-01-01', 1, 100, NULL)
--
--*************************************************************************************************
ALTER FUNCTION [Report].[FN_REP_HumanCaseForAge_Get]
(
	@StartDate AS DATETIME, 
	@EndDate AS DATETIME,
	@StartAge AS INT,
	@EndAge AS INT,
	@FinalState AS BIGINT = NULL
)
RETURNS TABLE
AS

RETURN
	SELECT 
		COALESCE(HC.idfsFinalDiagnosis, HC.idfsTentativeDiagnosis) AS idfsDiagnosis,
		COUNT(HC.idfHumanCase) AS intCount
	FROM dbo.tlbHumanCase HC
         LEFT JOIN dbo.tlbGeoLocation cgl
              ON HC.idfPointGeoLocation = cgl.idfGeoLocation
                   AND cgl.intRowStatus = 0 -- added by MCW to ensure non-foreign address
	WHERE (COALESCE(HC.datOnsetDate, HC.datFinalDiagnosisDate, HC.datTentativeDiagnosisDate, HC.datNotificationDate, HC.datEnteredDate) >= @StartDate AND 
	    COALESCE(HC.datOnsetDate, HC.datFinalDiagnosisDate, HC.datTentativeDiagnosisDate, HC.datNotificationDate, HC.datEnteredDate) < @EndDate)
	AND HC.intRowStatus = 0
	AND (
	     ISNULL(cgl.idfsGeoLocationType, -1) <> 10036001 -- Foreign Address          
	     OR cgl.idfsCountry IS NULL 
		 OR cgl.idfsCountry = 780000000
    )
	AND (@FinalState IS NULL OR HC.idfsFinalState = @FinalState OR (@FinalState = 10035001 /* Deceased */ AND HC.idfsOutcome = 10770000000 /* Died */))
	AND COALESCE(HC.idfsFinalCaseStatus, HC.idfsInitialCaseStatus, 370000000) <> 370000000 -- Added to filter on case refused
	AND	((@StartAge = 0 AND @EndAge = 0)
		 OR	((@StartAge >= 1 and @EndAge >= 1) 
		     AND (HC.idfsHumanAgeType = 10042003 /* Years */ OR HC.idfsHumanAgeType IS NULL) 
			 AND (HC.intPatientAge BETWEEN @StartAge and @EndAge))
		 OR ((@StartAge <= 1 AND @EndAge <= 1)  
		     AND ((HC.intPatientAge < 12 AND HC.idfsHumanAgeType = 10042002 /* Month */) 
			      OR (HC.intPatientAge <= 31 and HC.idfsHumanAgeType = 10042001 /* Days */)))
         OR ((@StartAge >= 1 AND @EndAge >= 1) AND (HC.idfsHumanAgeType = 10042002 /* Month */) 
		     AND (HC.intPatientAge >= 12 AND CAST(HC.intPatientAge / 12 AS INT) BETWEEN @StartAge AND @EndAge))					
		)
	GROUP BY COALESCE(HC.idfsFinalDiagnosis, HC.idfsTentativeDiagnosis)
GO
PRINT N'Creating Function [dbo].[FN_GBL_CONFIGURABLE_FILTRATION_GETList]...';


GO
-- ================================================================================================
-- Name: FN_GBL_CONFIGURABLE_FILTRATION_GETList
--
-- Description: Returns a table of permissions based on configurable filtration rules. 
--          
-- Author: Stephen Long
--
-- Revision History:
-- Name               Date       Change Detail
-- ------------------ ---------- -----------------------------------------------------------------
-- Stephen Long       01/24/2023 Initial release
-- ================================================================================================
CREATE FUNCTION [dbo].[FN_GBL_CONFIGURABLE_FILTRATION_GETList]
(
    @ObjectSiteID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT
)
RETURNS @T TABLE
(
    SiteID BIGINT NOT NULL, 
    ReadPermissionIndicator INT NOT NULL,
    AccessToPersonalDataPermissionIndicator INT NOT NULL,
    AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
    WritePermissionIndicator INT NOT NULL,
    DeletePermissionIndicator INT NOT NULL
)
AS
BEGIN
    --
    -- Apply at the user's site group level, granted by a site group.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup grantingSGS
        INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
            ON userSiteGroup.idfsSite = @UserSiteID
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.DefaultRuleIndicator = 0
    WHERE grantingSGS.idfsSite = @ObjectSiteID
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup userSiteGroup
        INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
            ON grantingSGS.idfsSite = @ObjectSiteID
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorSiteGroupID = grantingSGS.idfSiteGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE userSiteGroup.idfsSite = @UserSiteID
          AND a.GrantingActorSiteGroupID = userSiteGroup.idfSiteGroup;

    --
    -- Apply at the user's site level, granted by a site group.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup grantingSGS
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorSiteID = @UserSiteID
               AND ara.ActorEmployeeGroupID IS NULL
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.DefaultRuleIndicator = 0
    WHERE grantingSGS.idfsSite = @ObjectSiteID
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.AccessRuleActor ara
        INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
            ON grantingSGS.idfsSite = @UserSiteID
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE ara.ActorSiteID = @ObjectSiteID
          AND ara.ActorEmployeeGroupID IS NULL
          AND ara.intRowStatus = 0
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    -- 
    -- Apply at the user's employee group level, granted by a site group.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup grantingSGS
        INNER JOIN dbo.tlbEmployeeGroupMember egm
            ON egm.idfEmployee = @UserEmployeeID
               AND egm.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.DefaultRuleIndicator = 0
    WHERE grantingSGS.idfsSite = @ObjectSiteID
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup grantingSGS
        INNER JOIN dbo.tlbEmployeeGroup eg 
            ON eg.idfsSite = @ObjectSiteID 
               AND eg.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorEmployeeGroupID = eg.idfEmployeeGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE grantingSGS.idfsSite = @UserSiteID
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    -- 
    -- Apply at the user's ID level, granted by a site group.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup grantingSGS
        INNER JOIN dbo.tstUserTable u
            ON u.idfPerson = @UserEmployeeID
               AND u.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorUserID = u.idfUserID
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.DefaultRuleIndicator = 0
    WHERE grantingSGS.idfsSite = @ObjectSiteID
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup grantingSGS
        INNER JOIN dbo.tlbEmployee e 
            ON e.idfsSite = @ObjectSiteID
        INNER JOIN dbo.tstUserTable u
            ON u.idfPerson = e.idfEmployee 
               AND u.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorUserID = u.idfUserID
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE grantingSGS.idfsSite = @UserSiteID
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    --
    -- Apply at the user's site group level, granted by a site.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup sgs
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorSiteGroupID = sgs.idfSiteGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.DefaultRuleIndicator = 0
    WHERE a.GrantingActorSiteID = @UserSiteID
          AND sgs.idfsSite = @ObjectSiteID;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup sgs
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorSiteGroupID = sgs.idfSiteGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE sgs.idfsSite = @UserSiteID
          AND a.GrantingActorSiteID = @ObjectSiteID;

    -- 
    -- Apply at the user's site level, granted by a site.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.AccessRule a
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorSiteID = @UserSiteID
               AND ara.ActorEmployeeGroupID IS NULL
               AND ara.intRowStatus = 0
               AND a.AccessRuleID = ara.AccessRuleID
    WHERE a.intRowStatus = 0
          AND a.DefaultRuleIndicator = 0
          AND a.GrantingActorSiteID = @ObjectSiteID;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.AccessRuleActor ara
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE ara.ActorSiteID = @ObjectSiteID
          AND ara.ActorEmployeeGroupID IS NULL
          AND ara.intRowStatus = 0
          AND a.GrantingActorSiteID = @UserSiteID;

    -- 
    -- Apply at the user's employee group level, granted by a site.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.AccessRule a
        INNER JOIN dbo.tlbEmployeeGroupMember egm
            ON egm.idfEmployee = @UserEmployeeID
               AND egm.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
               AND ara.intRowStatus = 0
               AND a.AccessRuleID = ara.AccessRuleID
    WHERE a.intRowStatus = 0
          AND a.DefaultRuleIndicator = 0
          AND a.GrantingActorSiteID = @ObjectSiteID;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tlbEmployeeGroup eg
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorEmployeeGroupID = eg.idfEmployeeGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE eg.idfsSite = @ObjectSiteID
          AND eg.intRowStatus = 0
          AND a.GrantingActorSiteID = @UserSiteID;

    -- 
    -- Apply at the user's ID level, granted by a site.
    ----
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.AccessRule a
        INNER JOIN dbo.tstUserTable u
            ON u.idfPerson = @UserEmployeeID
               AND u.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorUserID = u.idfUserID
               AND ara.intRowStatus = 0
               AND a.AccessRuleID = ara.AccessRuleID
    WHERE a.intRowStatus = 0
          AND a.DefaultRuleIndicator = 0
          AND a.GrantingActorSiteID = @ObjectSiteID;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tlbEmployee e
        INNER JOIN dbo.tstUserTable u
            ON u.idfPerson = e.idfEmployee
               AND u.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorUserID = u.idfUserID
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE e.idfsSite = @ObjectSiteID
          AND e.intRowStatus = 0
          AND a.GrantingActorSiteID = @UserSiteID;

    RETURN;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ASPNetUser_GetRolesAndPermissions]...';


GO
--================================================================================================
-- Author:		Steven L. Verner
-- Create date: 05.07.2019
-- Description:	Retrieve a list of Roles and Permissions for the given user by role and by employee
-- 
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Stephen Long    10/03/2019 Added check for row status; only return active employee group 
--                            memberships.
-- Stephen Long    05/23/2020 Added intRowStatus check on system function table.
-- Stephen Long    12/10/2020 Added employee ID parameter as optional parameter, and union for 
--                            users that are employees of multiple organizations.
-- Mani			   01/05/2021	Changed the join to use LkupRoleSystemFunctionAccess fa ON fa.RoleID = r.idfsEmployeeGroupName
-- Mani			   03/12/2021	Added employee level pemission
-- Stephen Long    01/13/2023 Updated for site filtration queries/permissions.
-- Mike Kornegay   02/07/2023 Changed Permission field in @Results to NVARCHAR(2000) because some environments fail at 200.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ASPNetUser_GetRolesAndPermissions]
    @idfuserid BIGINT,
    @EmployeeID BIGINT = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SiteID BIGINT = (
                                 SELECT idfsSite FROM dbo.tlbEmployee WHERE idfEmployee = @EmployeeID
                             );
    DECLARE @Results TABLE
    (
        idfEmployee BIGINT NOT NULL,
        PermissionId BIGINT NOT NULL,
        [Role] NVARCHAR(MAX) NOT NULL,
        Permission NVARCHAR(2000) NOT NULL,
        PermissionLevelId BIGINT NOT NULL,
        PermissionLevel NVARCHAR(200) NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    INSERT INTO @UserGroupSitePermissions
    SELECT oa.idfsOnSite,
           oa.idfsObjectOperation,
           CASE
               WHEN oa.intPermission = 2 THEN
                   3
               ELSE
                   2
           END
    FROM dbo.tstObjectAccess oa
        INNER JOIN dbo.tlbEmployeeGroupMember egm
            ON egm.idfEmployee = @EmployeeID
               AND egm.intRowStatus = 0
    WHERE oa.intRowStatus = 0
          AND oa.idfsObjectType = 10060011 -- Site
          AND oa.idfActor = egm.idfEmployeeGroup;

    INSERT INTO @UserSitePermissions
    SELECT oa.idfsOnSite,
           oa.idfsObjectOperation,
           CASE
               WHEN oa.intPermission = 2 THEN
                   5
               ELSE
                   4
           END
    FROM dbo.tstObjectAccess oa
    WHERE oa.intRowStatus = 0
          AND oa.idfsObjectType = 10060011 -- Site
          AND oa.idfActor = @EmployeeID;

    -- Returned on login - user's default organization permissions.
    INSERT INTO @Results
    SELECT fa.idfEmployee,
           r1.idfsBaseReference PermissionId,
           'Employee' AS [Role],
           r1.strDefault Permission,
           r2.idfsBaseReference PermissionLevelId,
           r2.strDefault PermissionLevel
    FROM dbo.tstUserTable ut
        JOIN dbo.tlbPerson p
            ON p.idfPerson = ut.idfPerson
        Join dbo.tlbEmployee e
            on e.idfEmployee = p.idfPerson
        JOIN dbo.LkupRoleSystemFunctionAccess fa
            ON fa.idfEmployee = e.idfEmployee
        JOIN dbo.trtBaseReference r1
            ON r1.idfsBaseReference = fa.SystemFunctionID
        JOIN dbo.trtReferenceType r11
            ON r11.idfsReferenceType = r1.idfsReferenceType
        JOIN dbo.trtBaseReference r2
            ON r2.idfsBaseReference = fa.SystemFunctionOperationID
    WHERE ut.idfUserID = @idfuserid
          AND p.intRowStatus = 0
          AND e.intRowStatus = 0
          AND fa.intRowStatus = 0
          AND @EmployeeID IS NULL
    UNION

    -- Returned when user switches to another assigned organization outside of the default one.
    SELECT fa.idfEmployee,
           r1.idfsBaseReference PermissionId,
           'Employee' AS [Role],
           r1.strDefault Permission,
           r2.idfsBaseReference PermissionLevelId,
           r2.strDefault PermissionLevel
    FROM dbo.tstUserTable ut
        JOIN dbo.LkupRoleSystemFunctionAccess fa
            ON fa.idfEmployee = ut.idfPerson
               and ut.intRowStatus = 0
        JOIN dbo.trtBaseReference r1
            ON r1.idfsBaseReference = fa.SystemFunctionID
        JOIN dbo.trtReferenceType r11
            ON r11.idfsReferenceType = r1.idfsReferenceType
        JOIN dbo.trtBaseReference r2
            ON r2.idfsBaseReference = fa.SystemFunctionOperationID
    WHERE ut.idfUserID = @idfuserid
          AND fa.intRowStatus = 0
          AND (
                  fa.idfEmployee = @EmployeeID
                  AND @EmployeeID IS NOT NULL
              )
    ORDER BY r1.strDefault;

    -- =======================================================================================
    -- SITE FILTRATION RULES
    --
    -- Apply site filtration rules from use case SAUC29.
    -- =======================================================================================
    -- 
    -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
    -- as all records have been pulled above with or without site filtration rules applied.
    --
    DELETE FROM @Results
    WHERE EXISTS
    (
        SELECT e.idfEmployee
        FROM dbo.tlbEmployee e
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = @SiteID
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroup eg
                ON eg.idfsSite = @SiteID
                   AND eg.intRowStatus = 0
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = eg.idfEmployeeGroup
                   AND br.intRowStatus = 0
                   AND br.blnSystem = 1
        WHERE e.intRowStatus = 0
              AND oa.idfsObjectOperation = 10059003 -- Read permission
              AND oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = eg.idfEmployeeGroup
    );

    --
    -- Apply level 1 site filtration rules for an employee's associated user group(s).  
    -- Allows and denies will supersede level 0.
    --
    INSERT INTO @Results
    SELECT @EmployeeID,
           r1.idfsBaseReference PermissionId,
           'Employee' AS [Role],
           r1.strDefault Permission,
           r2.idfsBaseReference PermissionLevelId,
           r2.strDefault PermissionLevel
    FROM dbo.LkupRoleSystemFunctionAccess fa
        JOIN dbo.trtBaseReference r1
            ON r1.idfsBaseReference = fa.SystemFunctionID
        JOIN dbo.trtReferenceType r11
            ON r11.idfsReferenceType = r1.idfsReferenceType
        JOIN dbo.trtBaseReference r2
            ON r2.idfsBaseReference = fa.SystemFunctionOperationID
    WHERE fa.intRowStatus = 0
          AND @EmployeeID IS NOT NULL
          AND EXISTS
    (
        SELECT *
        FROM @UserGroupSitePermissions
        WHERE SiteID = @SiteID
              AND Permission = 1 -- Allow permission
    );

    DELETE res
    FROM @Results res
        INNER JOIN @UserGroupSitePermissions ugsp
            ON ugsp.SiteID = @SiteID
    WHERE ugsp.Permission = 3
          AND res.PermissionLevelId = ugsp.PermissionTypeID; -- Deny permission

    --
    -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
    -- will supersede level 1.
    --
    INSERT INTO @Results
    SELECT @EmployeeID,
           r1.idfsBaseReference PermissionId,
           'Employee' AS [Role],
           r1.strDefault Permission,
           r2.idfsBaseReference PermissionLevelId,
           r2.strDefault PermissionLevel
    FROM dbo.LkupRoleSystemFunctionAccess fa
        JOIN dbo.trtBaseReference r1
            ON r1.idfsBaseReference = fa.SystemFunctionID
        JOIN dbo.trtReferenceType r11
            ON r11.idfsReferenceType = r1.idfsReferenceType
        JOIN dbo.trtBaseReference r2
            ON r2.idfsBaseReference = fa.SystemFunctionOperationID
    WHERE fa.intRowStatus = 0
          AND @EmployeeID IS NOT NULL
          AND EXISTS
    (
        SELECT *
        FROM @UserSitePermissions
        WHERE SiteID = @SiteID
              AND Permission = 1 -- Allow permission
    );

    DELETE res
    FROM @Results res
        INNER JOIN @UserSitePermissions usp
            ON usp.SiteID = @SiteID
    WHERE usp.Permission = 4
          AND res.PermissionLevelId = usp.PermissionTypeID; -- Deny permission

    SELECT idfEmployee,
           PermissionId,
           [Role],
           Permission,
           PermissionLevelId,
           PermissionLevel
    FROM @Results
    GROUP BY idfEmployee,
             PermissionId,
             [Role],
             Permission,
             PermissionLevelId,
             PermissionLevel;
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLIST]...';


GO
--=================================================================================================
-- Name: USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLIST
--
-- Description: Returns a list of base reference types WITH PAGING AND FILTERING
--
-- Author: Ricky Moss
--
-- Revision History:
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		06/20/2019	Initial Release
-- Stephen Long     12/26/2019	Replaced 'en' with @LangID on reference call.
-- Doug Albanese	9/4/2020	Added field to obtain language translation
-- Lamont Mitchell	7/16/2021	Added Paging and Filtering, copied from USP_GBL_LKUP_REFERENCETYPE_GETLIST
-- Michael Brown	03/16/2022	Bug #3127 Changed @sortColumn to 'name'. Added OR br.name... to WHERE clause
-- Steven Verner	10/21/2022	Removed duplicate base reference types where there currently is an editor for those types
--								Like Age Group, Case Classification,etc.
--								This change fixes bugs 3865,4757,4756,4755,4750...
-- Mike Kornegay	12/13/2022	Added reference type 19000538 (AS Species Type) to the list of excluded (system) types.
-- Mike Kornegay	12/23/2022	Removed reference type 19000538 (AS Species Type)
--
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLIST] (
@LangId NVARCHAR(50),
@advancedSearch NVARCHAR(100) = NULL,
@pageNo INT = 1,
@pageSize INT = 10, 
@sortColumn NVARCHAR(30) = 'name', 
@sortOrder NVARCHAR(4) = 'asc'
)
AS
BEGIN
	BEGIN TRY

		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE( 
			idfsBaseReference bigint,
			idfsReferenceType bigint, 
			strDefault nvarchar(2000), 
			strName nvarchar(2000), 
			intHACode int,
			intOrder int
			)
		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		IF( @advancedSearch IS NOT NULL)
		BEGIN
			INSERT INTO @T
			SELECT 
				br.idfsReference,
				trtReferenceType.idfsReferenceType,
				strDefault,
				br.name AS strName,
				intHACode,
				intOrder
			FROM dbo.FN_GBL_ReferenceRepairSplit(@LangId, '19000076,19000536') br
			INNER JOIN dbo.trtReferenceType
				ON trtReferenceType.idfsReferenceType = br.idfsReferenceType
			WHERE (intStandard & 4) <> 0
				AND br.idfsReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
											 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
											 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
											 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
											 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
											 19000140)

				AND trtReferenceType.intRowStatus = 0
				and (br.strDefault like '%' + @advancedSearch +'%' OR br.name like '%' + @advancedSearch +'%')
			ORDER BY strReferenceTypeName;
		
			WITH CTEResults AS
			(
				SELECT ROW_NUMBER() OVER ( ORDER BY 
					CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
					CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
					CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
					CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
					CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
					CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
					CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
					CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC
			) AS ROWNUM,
			COUNT(*) OVER () AS 
					TotalRowCount,
					idfsBaseReference,
					idfsReferenceType,
					strDefault,
					strName,
					intHACode,
					intOrder
				FROM @T
			)
			SELECT
					TotalRowCount, 
					idfsBaseReference 'BaseReferenceId',
					idfsReferenceType 'ReferenceId',
					strDefault 'Default',
					strName 'Name',	
					intOrder,
					intHACode,
					TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
					CurrentPage = @pageNo 
			FROM CTEResults
			WHERE RowNum > @firstRec AND RowNum < @lastRec 
		END
		ELSE
		BEGIN
		INSERT INTO @T
		SELECT 
			br.idfsReference,
			trtReferenceType.idfsReferenceType,
			strDefault,
			br.name AS strName,
			intHACode,
			intOrder
		FROM dbo.FN_GBL_ReferenceRepair(@LangId, 19000076) br
		INNER JOIN dbo.trtReferenceType
			ON trtReferenceType.idfsReferenceType = br.idfsReferenceType
		WHERE (intStandard & 4) <> 0
			AND br.idfsReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
										 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
										 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
										 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
										 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
										 19000140)
			AND trtReferenceType.intRowStatus = 0
		ORDER BY strReferenceTypeName;




		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount, 
				idfsBaseReference,
				idfsReferenceType,
				strDefault,
				strName,
				intHACode,
				intOrder
			FROM @T
		)
		SELECT
				TotalRowCount,
				idfsBaseReference 'BaseReferenceId',
				idfsReferenceType 'ReferenceId',
				strDefault 'Default',
				strName 'Name',	
				intOrder,
				intHACode,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 

		END
	
	
	END TRY

	BEGIN CATCH
		THROW
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_AggregateSetting_GetList_WithName]...';


GO
-- ================================================================================================
-- Name: USP_CONF_AggregateSetting_GetList_WithName		
--
-- Description: Retreives Entries from [tstAggrSetting] based on Customization Package
-- 
-- Author: Lamont Mitchell
-- 
-- Revision History:
-- Name                     Date       Change Detail
-- ------------------------ ---------- -----------------------------------------------------------
-- Lamont Mitchell          11/27/2018 Initial Created
-- Lamont Mitchell          01/10/2019 Added check for IntrowStatus = 0 in Where Clause
-- Steven Verner            05/16/2021 Paging enabled
-- Stephen Long             08/23/2021 Added to TFS.  Changed base reference calls to use 
--                                     reference get list to get correct language translations, 
--                                     and added language ID parameter.
-- Ann Xiong				01/19/2022 Added idfsSite parameter
-- Ann Xiong				01/31/2022 Updated to return Parent Site or top level site aggregate settings if passed in site does not have any aggregate settings
-- Mike Kornegay			02/10/2023 Add final branch so that if sites for the customization are null, it will still get the aggregate settings.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_AggregateSetting_GetList_WithName] (
	@LanguageID NVARCHAR(50)
	,@idfCustomizationPackage BIGINT
	,@idfsSite BIGINT = NULL
	,@pageNo INT = 1
	,@pageSize INT = 10
	,@sortColumn NVARCHAR(30) = 'idfsAggrCaseType'
	,@sortOrder NVARCHAR(4) = 'asc'
	)
AS
BEGIN
	DECLARE @returnMsg VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode BIGINT = 0;
	DECLARE @idfsReferenceType BIGINT;

	SET NOCOUNT ON;

	BEGIN TRY
		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE (
			idfsAggrCaseType BIGINT
			,idfCustomizationPackage BIGINT
			,idfsSite BIGINT
			,idfsStatisticAreaType BIGINT
			,idfsStatisticPeriodType BIGINT
			,StrCaseType NVARCHAR(4000)
			,StrAreaType NVARCHAR(4000)
			,StrPeriodType NVARCHAR(4000)
			);

		SET @firstRec = (@pageNo - 1) * @pagesize;
		SET @lastRec = (@pageNo * @pageSize + 1);

         IF EXISTS
         (
                SELECT 	idfsAggrCaseType,
                       	idfCustomizationPackage,
			     		idfsSite,
                       	idfsStatisticAreaType,
                       	idfsStatisticPeriodType
                FROM 	dbo.tstAggrSetting
                WHERE 	idfCustomizationPackage = @idfCustomizationPackage
			    	AND idfsSite = @idfsSite
                    AND intRowStatus = 0
            )
            BEGIN
				INSERT INTO @T
				SELECT	AGR.[idfsAggrCaseType]
						,AGR.[idfCustomizationPackage]
						,AGR.[idfsSite]
						,AGR.[idfsStatisticAreaType]
						,AGR.[idfsStatisticPeriodType]
						,AGRC.[name] AS StrCaseType
						,ART.[name] AS StrAreaType
						,PRT.[name] AS StrPeriodType
				FROM	dbo.tstAggrSetting AS AGR
						LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000102) AGRC ON AGRC.idfsReference = AGR.idfsAggrCaseType
						LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000089) ART ON ART.idfsReference = AGR.idfsStatisticAreaType
						LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000091) PRT ON PRT.idfsReference = AGR.idfsStatisticPeriodType
						INNER JOIN dbo.tstSite s ON s.idfsSite = @idfsSite
				WHERE	AGR.[idfCustomizationPackage] = @idfCustomizationPackage
						AND AGR.[idfsSite] = @idfsSite
						AND AGR.intRowStatus = 0;
            END
            ELSE
            BEGIN
				IF EXISTS
				(
					SELECT 	a.idfsAggrCaseType,
                       		a.idfCustomizationPackage,
			     			a.idfsSite,
                       		a.idfsStatisticAreaType,
                       		a.idfsStatisticPeriodType
					FROM 	dbo.tstAggrSetting a
							INNER JOIN dbo.tstSite s ON s.idfsSite = @idfsSite
					WHERE 	a.idfCustomizationPackage = @idfCustomizationPackage
			    			AND a.idfsSite = s.idfsParentSite
                      		AND a.intRowStatus = 0
				)
				BEGIN
					INSERT INTO @T
					SELECT	AGR.[idfsAggrCaseType]
							,AGR.[idfCustomizationPackage]
							,AGR.[idfsSite]
							,AGR.[idfsStatisticAreaType]
							,AGR.[idfsStatisticPeriodType]
							,AGRC.[name] AS StrCaseType
							,ART.[name] AS StrAreaType
							,PRT.[name] AS StrPeriodType
					FROM	dbo.tstAggrSetting AS AGR
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000102) AGRC ON AGRC.idfsReference = AGR.idfsAggrCaseType
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000089) ART ON ART.idfsReference = AGR.idfsStatisticAreaType
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000091) PRT ON PRT.idfsReference = AGR.idfsStatisticPeriodType
							INNER JOIN dbo.tstSite s ON s.idfsSite = @idfsSite
					WHERE	AGR.[idfCustomizationPackage] = @idfCustomizationPackage
							AND AGR.[idfsSite] = s.idfsParentSite
							AND AGR.intRowStatus = 0;
				END
				ELSE
				BEGIN
					DECLARE @idfsSiteTop BIGINT;

					SELECT TOP 1	
							@idfsSiteTop = idfsSite
					FROM 	dbo.tstAggrSetting
					WHERE 	idfCustomizationPackage = @idfCustomizationPackage
                      		AND intRowStatus = 0;

					IF (@idfsSiteTop IS NOT NULL)
						BEGIN
							INSERT INTO @T
							SELECT	AGR.[idfsAggrCaseType]
									,AGR.[idfCustomizationPackage]
									,AGR.[idfsSite]
									,AGR.[idfsStatisticAreaType]
									,AGR.[idfsStatisticPeriodType]
									,AGRC.[name] AS StrCaseType
									,ART.[name] AS StrAreaType
									,PRT.[name] AS StrPeriodType
							FROM	dbo.tstAggrSetting AS AGR
									LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000102) AGRC ON AGRC.idfsReference = AGR.idfsAggrCaseType
									LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000089) ART ON ART.idfsReference = AGR.idfsStatisticAreaType
									LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000091) PRT ON PRT.idfsReference = AGR.idfsStatisticPeriodType
									--INNER JOIN dbo.tstSite s ON s.idfsSite = @idfsSite
							WHERE	AGR.[idfCustomizationPackage] = @idfCustomizationPackage
									AND AGR.[idfsSite] = @idfsSiteTop
									AND AGR.intRowStatus = 0;
						END
					ELSE
						BEGIN
							INSERT INTO @T
							SELECT	AGR.[idfsAggrCaseType]
									,AGR.[idfCustomizationPackage]
									,AGR.[idfsSite]
									,AGR.[idfsStatisticAreaType]
									,AGR.[idfsStatisticPeriodType]
									,AGRC.[name] AS StrCaseType
									,ART.[name] AS StrAreaType
									,PRT.[name] AS StrPeriodType
							FROM	dbo.tstAggrSetting AS AGR
									LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000102) AGRC ON AGRC.idfsReference = AGR.idfsAggrCaseType
									LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000089) ART ON ART.idfsReference = AGR.idfsStatisticAreaType
									LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000091) PRT ON PRT.idfsReference = AGR.idfsStatisticPeriodType
									--INNER JOIN dbo.tstSite s ON s.idfsSite = @idfsSite
							WHERE	AGR.[idfCustomizationPackage] = @idfCustomizationPackage
									AND AGR.[idfsSite] IS NULL
									AND AGR.intRowStatus = 0;
						END
				END
            END
			;
		WITH CTEResults
		AS (
			SELECT ROW_NUMBER() OVER (
					ORDER BY CASE 
							WHEN @sortColumn = 'idfsAggrCaseType'
								AND @SortOrder = 'asc'
								THEN idfsAggrCaseType
							END ASC
						,CASE 
							WHEN @sortColumn = 'idfsAggrCaseType'
								AND @SortOrder = 'desc'
								THEN idfsAggrCaseType
							END DESC
						,CASE 
							WHEN @sortColumn = 'idfCustomizationPackage'
								AND @SortOrder = 'asc'
								THEN idfCustomizationPackage
							END ASC
						,CASE 
							WHEN @sortColumn = 'idfCustomizationPackage'
								AND @SortOrder = 'desc'
								THEN idfCustomizationPackage
							END DESC
						,CASE 
							WHEN @sortColumn = 'idfsSite'
								AND @SortOrder = 'asc'
								THEN idfsSite
							END ASC
						,CASE 
							WHEN @sortColumn = 'idfsSite'
								AND @SortOrder = 'desc'
								THEN idfsSite
							END DESC
						,CASE 
							WHEN @sortColumn = 'idfsStatisticAreaType'
								AND @SortOrder = 'asc'
								THEN idfsStatisticAreaType
							END ASC
						,CASE 
							WHEN @sortColumn = 'idfsStatisticAreaType'
								AND @SortOrder = 'desc'
								THEN idfsStatisticAreaType
							END DESC
						,CASE 
							WHEN @sortColumn = 'idfsStatisticPeriodType'
								AND @SortOrder = 'asc'
								THEN idfsStatisticPeriodType
							END ASC
						,CASE 
							WHEN @sortColumn = 'idfsStatisticPeriodType'
								AND @SortOrder = 'desc'
								THEN idfsStatisticPeriodType
							END DESC
						,CASE 
							WHEN @sortColumn = 'StrCaseType'
								AND @SortOrder = 'asc'
								THEN StrCaseType
							END ASC
						,CASE 
							WHEN @sortColumn = 'StrCaseType'
								AND @SortOrder = 'desc'
								THEN StrCaseType
							END DESC
						,CASE 
							WHEN @sortColumn = 'StrAreaType'
								AND @SortOrder = 'asc'
								THEN StrAreaType
							END ASC
						,CASE 
							WHEN @sortColumn = 'StrAreaType'
								AND @SortOrder = 'desc'
								THEN StrAreaType
							END DESC
						,CASE 
							WHEN @sortColumn = 'StrPeriodType'
								AND @SortOrder = 'asc'
								THEN StrPeriodType
							END ASC
						,CASE 
							WHEN @sortColumn = 'StrPeriodType'
								AND @SortOrder = 'desc'
								THEN StrPeriodType
							END DESC
					) AS ROWNUM
				,COUNT(*) OVER () AS TotalRowCount
				,idfsAggrCaseType
				,idfCustomizationPackage
				,idfsStatisticAreaType
				,idfsStatisticPeriodType
				,StrCaseType
				,StrAreaType
				,StrPeriodType
			FROM @T
			)
		SELECT TotalRowCount
			,idfsAggrCaseType
			,idfCustomizationPackage
			,idfsStatisticAreaType
			,idfsStatisticPeriodType
			,StrCaseType
			,StrAreaType
			,StrPeriodType
			,TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0)
			,CurrentPage = @pageNo
		FROM CTEResults
		WHERE RowNum > @firstRec
			AND RowNum < @lastRec;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_AggregateSetting_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_AggregateSetting_SET		
--
-- Description: Creates and updates entries for aggregate settings.
-- 
-- Author: Lamont Mitchell
-- 
-- Revision History:
-- Name							Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              11/27/2018 Initial Created
-- Stephen Long                 07/08/2022 Added site alert and audit logic.
-- Ann Xiong					01/19/2022 Added scripts to allow each site to define its own Aggregate Settings
-- Ann Xiong					01/31/2022 Updated to insert second and third level site aggregate settings.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_AggregateSetting_SET]
    @AggregateSettingRecords NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @AggregateDiseaseReportTypeId BIGINT = NULL,
            @CustomizationPackageId BIGINT = NULL,
			@SiteId BIGINT = NULL,
            @StatisticalAreaTypeId BIGINT = NULL,
            @StatisticalPeriodTypeId BIGINT = NULL,
            @idfsReferenceType BIGINT,
            @EventId BIGINT,
            @EventTypeId BIGINT = NULL,
            @EventSiteId BIGINT = NULL,
            @EventObjectId BIGINT = NULL,
            @EventUserId BIGINT = NULL,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = NULL;
    DECLARE @AggregateSettingRecordsTemp TABLE
    (
        AggregateDiseaseReportTypeId BIGINT NOT NULL,
        CustomizationPackageId BIGINT NOT NULL,
		SiteId BIGINT NULL,
        StatisticalAreaTypeId BIGINT NOT NULL,
        StatisticalPeriodTypeId BIGINT NOT NULL
    );
    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );

	--Data Audit--
	declare @idfUserId BIGINT =NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint =NULL;
	declare @idfsObjectType bigint = 10017007;
	declare @idfObject bigint = NULL;
	declare @idfObjectTable_tlbAggrSettings bigint = 76030000000;
	declare @idfDataAuditEvent bigint= NULL; 

	DECLARE @tlbAggrSettings_BeforeEdit TABLE
	(
	  SiteId bigint,
	  idfsAggrCaseType bigint,
	  idfCustomizationPackage bigint, 
      idfsStatisticAreaType bigint, 
      idfsStatisticPeriodType bigint
	)
	DECLARE @tlbAggrSettings_AfterEdit TABLE
	(
	  SiteId bigint,
	  idfsAggrCaseType bigint,
	  idfCustomizationPackage bigint, 
      idfsStatisticAreaType bigint, 
      idfsStatisticPeriodType bigint
	)
	
	--Data Audit--
	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@AuditUserName) userInfo
	--Data Audit--

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO @AggregateSettingRecordsTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSettingRecords)
            WITH
            (
                AggregateDiseaseReportTypeId BIGINT,
                CustomizationPackageId BIGINT,
				SiteId BIGINT,
                StatisticalAreaTypeId BIGINT,
                StatisticalPeriodTypeId BIGINT
            );

        WHILE EXISTS (SELECT * FROM @AggregateSettingRecordsTemp)
        BEGIN
            SELECT TOP 1
                @AggregateDiseaseReportTypeId = AggregateDiseaseReportTypeId,
                @CustomizationPackageId = CustomizationPackageId,
				@SiteId = SiteId,
                @StatisticalAreaTypeId = StatisticalAreaTypeId,
                @StatisticalPeriodTypeId = StatisticalPeriodTypeId
            FROM @AggregateSettingRecordsTemp;

			SET @idfObject = @AggregateDiseaseReportTypeId --CONVERT(NVARCHAR,@SiteId) + CONVERT(NVARCHAR,@AggregateDiseaseReportTypeId);

            IF EXISTS
            (
                SELECT idfsAggrCaseType,
                       idfCustomizationPackage,
					   idfsSite,
                       idfsStatisticAreaType,
                       idfsStatisticPeriodType
                FROM dbo.tstAggrSetting
                WHERE idfsAggrCaseType = @AggregateDiseaseReportTypeId
                      AND idfCustomizationPackage = @CustomizationPackageId
					  AND idfsSite = @SiteId
                      AND intRowStatus = 0
            )
            BEGIN

				Delete from @tlbAggrSettings_BeforeEdit
				insert into @tlbAggrSettings_BeforeEdit (SiteId, idfsAggrCaseType ,idfCustomizationPackage, idfsStatisticAreaType,idfsStatisticPeriodType)
				select idfsSite, idfsAggrCaseType, idfCustomizationPackage, idfsStatisticAreaType, idfsStatisticPeriodType 
					from tstAggrSetting where idfsAggrCaseType = @AggregateDiseaseReportTypeId AND idfCustomizationPackage = @CustomizationPackageId AND idfsSite = @SiteId AND intRowStatus = 0

                UPDATE dbo.tstAggrSetting
                SET idfsStatisticAreaType = @StatisticalAreaTypeId,
                    idfsStatisticPeriodType = @StatisticalPeriodTypeId,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsAggrCaseType = @AggregateDiseaseReportTypeId
                      AND idfCustomizationPackage = @CustomizationPackageId
					  AND idfsSite = @SiteId
                      AND intRowStatus = 0;
					  
				Delete from @tlbAggrSettings_AfterEdit
				insert into @tlbAggrSettings_AfterEdit (SiteId, idfsAggrCaseType ,idfCustomizationPackage, idfsStatisticAreaType,idfsStatisticPeriodType)
				select idfsSite, idfsAggrCaseType, idfCustomizationPackage, idfsStatisticAreaType, idfsStatisticPeriodType 
					from tstAggrSetting where idfsAggrCaseType = @AggregateDiseaseReportTypeId AND idfCustomizationPackage = @CustomizationPackageId AND idfsSite = @SiteId AND intRowStatus = 0
				
				--DataAudit-- 
				IF EXISTS 
				(
					select *
					from @tlbAggrSettings_BeforeEdit a  inner join @tlbAggrSettings_AfterEdit b on a.SiteId = b.SiteId 
						and a.idfsAggrCaseType = b.idfsAggrCaseType and a.idfCustomizationPackage = b.idfCustomizationPackage
					where ((a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
						or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
						or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null))
						OR
						((a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
						or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
						or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null))
				)
				BEGIN
					--  tauDataAuditEvent  Event Type- Edit 
					set @idfsDataAuditEventType = 10016003;
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrSettings, @idfDataAuditEvent OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, idfObjectTable, idfColumn, 
						idfObject, idfObjectDetail, 
						strOldValue, strNewValue)
					select @idfDataAuditEvent,@idfObjectTable_tlbAggrSettings, 4578190000000,
						@idfObject,null,
						a.idfsStatisticAreaType,b.idfsStatisticAreaType 
					from @tlbAggrSettings_BeforeEdit a  inner join @tlbAggrSettings_AfterEdit b on a.SiteId = b.SiteId 
						and a.idfsAggrCaseType = b.idfsAggrCaseType and a.idfCustomizationPackage = b.idfCustomizationPackage
					where (a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
						or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
						or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null)
				
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, idfObjectTable, idfColumn, 
						idfObject, idfObjectDetail, 
						strOldValue, strNewValue)
					select @idfDataAuditEvent,@idfObjectTable_tlbAggrSettings, 4578200000000,
						@idfObject,null,
						a.idfsStatisticPeriodType,b.idfsStatisticPeriodType 
					from @tlbAggrSettings_BeforeEdit a  inner join @tlbAggrSettings_AfterEdit b on a.SiteId = b.SiteId 
						and a.idfsAggrCaseType = b.idfsAggrCaseType and a.idfCustomizationPackage = b.idfCustomizationPackage
					where (a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
						or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
						or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null)
				END
				--DataAudit-- 
            END
            ELSE
            BEGIN
                --INSERT INTO @SuppressSelect
                --EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstAggrSetting',
                --                                  @AggregateDiseaseReportTypeId OUTPUT;

                INSERT INTO dbo.tstAggrSetting
                (
                    idfsAggrCaseType,
                    idfCustomizationPackage,
					idfsSite,
                    idfsStatisticAreaType,
                    idfsStatisticPeriodType,
                    AuditCreateDTM,
                    AuditCreateUser,
                    SourceSystemKeyValue,
                    SourceSystemNameID
                )
                VALUES
                (@AggregateDiseaseReportTypeId,
                 @CustomizationPackageId,
				 @SiteId,
                 @StatisticalAreaTypeId,
                 @StatisticalPeriodTypeId,
                 GETDATE(),
                 @AuditUserName,
                 '[{"idfsAggrCaseType":' + CAST(@AggregateDiseaseReportTypeId AS NVARCHAR(300))
                 + ',"idfCustomizationPackage":' + CAST(@CustomizationPackageId AS NVARCHAR(300)) + '}]',
                 10519001
                );

				
				--Data Audit--
				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrSettings, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEvent, @idfObjectTable_tlbAggrSettings, @idfObject)
				--Data Audit--

                UPDATE @EventsTemp
                SET ObjectId = @AggregateDiseaseReportTypeId
                WHERE ObjectId = 0;
            END

            DELETE FROM @AggregateSettingRecordsTemp
            WHERE AggregateDiseaseReportTypeId = @AggregateDiseaseReportTypeId;
        END

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseV61]...';


GO


--*************************************************************************
-- Name 				: report.USP_REP_HUM_MonthlyInfectiousDiseaseV61
-- DescriptiON			: SELECT data for Reportable Infectious Diseases (Monthly Form IV03) for Order 01-2N.
-- 
-- Author               : Srini Goli
-- RevisiON History
--		Name			Date       Change Detail
--	Srini Goli			2/13/2023	Added missing No_LAB_TESTED,No_LAB_CONFIRMED,TOTAL_CONFIRMED Diseases
/*
@idfsCustomReportType as bigint, 
-- 10290049 = "Form 03 by MoLHSA Order 01-02N", 10290050 = "Intermediary Form 03 by MoLHSA Order 01-2N"
-- 10290037 = "Form 03 by MoLHSA Order 01-82N", 10290038 = "Intermediate Form 03 by MoLHSA Order 01-82N"
-- 10290009 = "Form 03 by MoLHSA Order 01-27N", 10290009 = "Intermediate Form 03 by MoLHSA Order 01-27N"
*/		
-- Testing code:
/*

EXEC report.USP_REP_HUM_MonthlyInfectiousDiseaseV61 'en-US', 10290050, '2015-06-01', '2015-06-30',  37060000000, 3580000000

EXEC report.USP_REP_HUM_MonthlyInfectiousDiseaseV61 'en-US', 10290050, '2015-06-01', '2015-06-30',  37060000000, 3550000000

DECLARE @RegionID BIGINT = 37060000000
DECLARE @RayonID BIGINT = 3580000000
DECLARE @StartDate DATETIME = '20090601'
DECLARE @FinishDate DATETIME = '20090630'

EXEC report.USP_REP_HUM_MonthlyInfectiousDiseaseV61 'en-US', 10290050, '2009-06-01', '2009-06-30',  37060000000, 3580000000

EXEC report.USP_REP_HUM_MonthlyInfectiousDiseaseV61 'ka-GE', 10290050, '2015-04-01', '2015-04-30',  null, null
*/

ALTER PROCEDURE [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseV61]
	(
		@LangID		AS NVARCHAR(10), 
		@idfsCustomReportType AS BIGINT, -- 10290049 = "Official Form 03 by MoLHSA Order 01-02N", 10290050 = "Intermediary Form 03 by MoLHSA Order 01-2N"
		@StartDate	AS DATETIME,	 
		@FinishDate	AS DATETIME,
		@RegionID	AS BIGINT = NULL,
		@RayonID	AS BIGINT = NULL,
		@SiteID		AS BIGINT = NULL,
		@UseArchiveData	AS BIT = 0 --if User selected Use Archive Data then 1
	)
AS	

EXEC dbo.USP_GBL_FIRSTDAY_SET
IF @RegionID IS NULL
BEGIN
	SET @RegionID = (SELECT idfsRegion FROM report.FN_GBL_GIS_Rayon_GET(@LangID, 19000002 /*Rayon*/) WHERE idfsRayon = @RayonID)
END

DECLARE	@ReportTable	TABLE
(	idfsBaseReference	BIGINT NOT NULL PRIMARY KEY,
	strDiseaseName		NVARCHAR(300) COLLATE database_default NOT NULL, --46
	strICD10			NVARCHAR(200) COLLATE database_default NULL,	--47
	intAge_0_1			FLOAT NULL,	--7
	intAge_1_4			FLOAT NULL, --8
	intAge_5_14			FLOAT NULL, --9
	intAge_15_19		FLOAT NULL, --10
	intAge_20_29		FLOAT NULL, --11
	intAge_30_59		FLOAT NULL, --12
	intAge_60_more		FLOAT NULL, --13
	intTotal			FLOAT NOT NULL, --14
	intLabTested		FLOAT NULL,		--15
	intLabConfirmed		FLOAT NULL,		--16
	intTotalConfirmed	FLOAT NULL,		--18
	intOrder			INT NOT NULL
)



DECLARE 
    
    @idfsLanguage BIGINT,
    @strICD10CodeAdaptatiON NVARCHAR(200),
    @na NVARCHAR(10),

    @FFP_Age_0_1 BIGINT,--7
    @FFP_Age_1_4 BIGINT, --8
    @FFP_Age_5_14 BIGINT, --9
    @FFP_Age_15_19 BIGINT, --10
    @FFP_Age_20_29 BIGINT, --11
    @FFP_Age_30_59 BIGINT, --12
    @FFP_Age_60_more BIGINT, --13
    @FFP_Total BIGINT, --14
    @FFP_LabTested BIGINT,		--15
    @FFP_LabConfirmed BIGINT,		--18
    @FFP_TotalConfirmed BIGINT --21
    
    
SET @idfsLanguage = report.FN_GBL_LanguageCode_GET(@LangID) 

SELECT @FFP_Age_0_1 = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_0_1'
AND intRowStatus = 0

SELECT @FFP_Age_1_4 = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_1_4'
AND intRowStatus = 0

SELECT @FFP_Age_5_14 = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_5_14'
AND intRowStatus = 0

SELECT @FFP_Age_15_19 = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_15_19'
AND intRowStatus = 0

SELECT @FFP_Age_20_29 = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_20_29'
AND intRowStatus = 0

SELECT @FFP_Age_30_59= idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_30_59'
AND intRowStatus = 0

SELECT @FFP_Age_60_more= idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_60_more'
AND intRowStatus = 0

SELECT @FFP_Total= idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Total'
AND intRowStatus = 0

SELECT @FFP_LabTested= idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_LabTested'
AND intRowStatus = 0

SELECT @FFP_LabConfirmed= idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_LabConfirmed'
AND intRowStatus = 0

SELECT @FFP_TotalConfirmed= idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_TotalConfirmed'
AND intRowStatus = 0




INSERT INTO @ReportTable (
	idfsBaseReference,
	strDiseaseName,
	strICD10,
	intAge_0_1,
	intAge_1_4,
	intAge_5_14,
	intAge_15_19,
	intAge_20_29,
	intAge_30_59,
	intAge_60_more,
	intTotal,
	intLabTested,
	intLabConfirmed,
	intTotalConfirmed,
	intOrder
) 
SELECT 
  rr.idfsDiagnosisOrReportDiagnosisGroup,
  ISNULL(ISNULL(snt1.strTextString, br1.strDefault) +  ' ','')  + ISNULL(snt.strTextString, br.strDefault)  ,
  ISNULL(d.strIDC10, dg.strCode) +  ISNULL(ISNULL(' ' + snt2.strTextString, br2.strDefault), ''),
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  rr.intRowOrder

  
FROM   dbo.trtReportRows rr
    LEFT JOIN trtBaseReference br
        LEFT JOIN trtStringNameTranslatiON snt
        ON br.idfsBaseReference = snt.idfsBaseReference
        AND snt.idfsLanguage = @idfsLanguage

        LEFT OUTER JOIN trtDiagnosis d
        ON br.idfsBaseReference = d.idfsDiagnosis
        
        LEFT OUTER JOIN trtReportDiagnosisGroup dg
        ON br.idfsBaseReference = dg.idfsReportDiagnosisGroup
    ON rr.idfsDiagnosisOrReportDiagnosisGroup = br.idfsBaseReference
   
    LEFT OUTER JOIN trtBaseReference br1
        LEFT OUTER JOIN trtStringNameTranslatiON snt1
        ON br1.idfsBaseReference = snt1.idfsBaseReference
        AND snt1.idfsLanguage = @idfsLanguage
    ON rr.idfsReportAdditionalText = br1.idfsBaseReference
    
    LEFT OUTER JOIN trtBaseReference br2
        LEFT OUTER JOIN trtStringNameTranslatiON snt2
        ON br2.idfsBaseReference = snt2.idfsBaseReference
        AND snt2.idfsLanguage = @idfsLanguage
    ON rr.idfsICDReportAdditionalText = br2.idfsBaseReference    
WHERE rr.idfsCustomReportType = @idfsCustomReportType 
ORDER BY rr.intRowOrder


DECLARE	@MonthlyReportDiagnosisTable	TABLE
(	idfsDiagnosis	BIGINT NOT NULL PRIMARY KEY,
  blnIsAggregate BIT,
	intAge_0_1			INT NOT NULL,	--7
	intAge_1_4			INT NOT NULL, --8
	intAge_5_14			INT NOT NULL, --9
	intAge_15_19		INT NOT NULL, --10
	intAge_20_29		INT NOT NULL, --11
	intAge_30_59		INT NOT NULL, --12
	intAge_60_more		INT NOT NULL, --13
	intTotal			INT NOT NULL, --14
	intLabTested		INT NULL,		--15
	intLabConfirmed		INT NULL,		--18
	intTotalConfirmed	INT NULL		--21
)

INSERT INTO @MonthlyReportDiagnosisTable (
	idfsDiagnosis,
  blnIsAggregate,
	intAge_0_1,
	intAge_1_4,
	intAge_5_14,
	intAge_15_19,
	intAge_20_29,
	intAge_30_59,
	intAge_60_more,
	intTotal,
	intLabTested,
	intLabConfirmed,
	intTotalConfirmed
) 
SELECT DISTINCT
  fdt.idfsDiagnosis,
  CASE WHEN  trtd.idfsUsingType = 10020002  --dutAggregatedCase
    THEN 1
    ELSE 0
  END,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0

FROM dbo.trtDiagnosisToGroupForReportType fdt
    INNER JOIN trtDiagnosis trtd
    ON trtd.idfsDiagnosis = fdt.idfsDiagnosis
    -- AND trtd.intRowStatus = 0
WHERE  fdt.idfsCustomReportType = @idfsCustomReportType 
       
       
INSERT INTO @MonthlyReportDiagnosisTable (
	idfsDiagnosis,
  blnIsAggregate,
	intAge_0_1,
	intAge_1_4,
	intAge_5_14,
	intAge_15_19,
	intAge_20_29,
	intAge_30_59,
	intAge_60_more,
	intTotal,
	intLabTested,
	intLabConfirmed,
	intTotalConfirmed
) 
SELECT 
  trtd.idfsDiagnosis,
  CASE WHEN  trtd.idfsUsingType = 10020002  --dutAggregatedCase
    THEN 1
    ELSE 0
  END,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0

FROM dbo.trtReportRows rr
    INNER JOIN trtBaseReference br
    ON br.idfsBaseReference = rr.idfsDiagnosisOrReportDiagnosisGroup
        AND br.idfsReferenceType = 19000019 --'rftDiagnosis'
    INNER JOIN trtDiagnosis trtd
    ON trtd.idfsDiagnosis = rr.idfsDiagnosisOrReportDiagnosisGroup 
        --AND trtd.intRowStatus = 0
WHERE  rr.idfsCustomReportType = @idfsCustomReportType 
       AND  rr.intRowStatus = 0 
       AND NOT EXISTS 
       (
       SELECT * FROM @MonthlyReportDiagnosisTable
       WHERE idfsDiagnosis = rr.idfsDiagnosisOrReportDiagnosisGroup
       )     

       

DECLARE @MinAdminLevel BIGINT
DECLARE @MinTimeInterval BIGINT
DECLARE @AggrCaseType BIGINT


/*

19000091	rftStatisticPeriodType:
    10091001	sptMonth	Month
    10091002	sptOnday	Day
    10091003	sptQuarter	Quarter
    10091004	sptWeek	Week
    10091005	sptYear	Year

19000089	rftStatisticAreaType
    10089001	satCountry	Country
    10089002	satRayon	Rayon
    10089003	satRegion	Region
    10089004	satSettlement	Settlement


19000102	rftAggregateCaseType:
    10102001  Aggregate Case

*/

SET @AggrCaseType = 10102001

SELECT	@MinAdminLevel = idfsStatisticAreaType,
		@MinTimeInterval = idfsStatisticPeriodType
FROM report.FN_AggregateSettings_GET (@AggrCaseType)--@AggrCaseType



DECLARE	@MonthlyReportHumanAggregateCase	TABLE
(	idfAggrCase	BIGINT NOT NULL PRIMARY KEY,
  idfCaseObservatiON BIGINT,
  datStartDate DATETIME,
  idfVersiON BIGINT
)


INSERT INTO	@MonthlyReportHumanAggregateCase
(	idfAggrCase,
  idfCaseObservation,
  datStartDate,
  idfVersion
)
SELECT		a.idfAggrCase,
          a.idfCaseObservation,
		  a.datStartDate,
		  a.idfVersion
FROM		tlbAggrCase a
LEFT JOIN	report.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001 /*Country*/) c
ON			c.idfsReference = a.idfsAdministrativeUnit
LEFT JOIN	report.FN_GBL_GIS_Region_GET(@LangID, 19000003 /*Region*/) r
ON			r.idfsRegion = a.idfsAdministrativeUnit 
LEFT JOIN	report.FN_GBL_GIS_Rayon_GET(@LangID, 19000002 /*Rayon*/) rr
ON			rr.idfsRayon = a.idfsAdministrativeUnit
LEFT JOIN	report.FN_GBL_GIS_Settlement_GET(@LangID, 19000004 /*Settlement*/) s
ON			s.idfsSettlement = a.idfsAdministrativeUnit

WHERE 			
			a.idfsAggrCaseType = @AggrCaseType
			AND (	@StartDate <= a.datStartDate
					AND a.datFinishDate < DATEADD(day, 1, @FinishDate)
				)
			AND (	(	@MinTimeInterval = 10091005 --'sptYear'
						AND DateDiff(year, a.datStartDate, a.datFinishDate) = 0
						AND DateDiff(quarter, a.datStartDate, a.datFinishDate) > 1
						AND DateDiff(month, a.datStartDate, a.datFinishDate) > 1
						AND report.FN_GBL_WeekDateDiff_GET(a.datStartDate, a.datFinishDate) > 1
						AND DateDiff(day, a.datStartDate, a.datFinishDate) > 1
					)
					or	(	@MinTimeInterval = 10091003 --'sptQuarter'
							AND DateDiff(quarter, a.datStartDate, a.datFinishDate) = 0
							AND DateDiff(month, a.datStartDate, a.datFinishDate) > 1
							AND report.FN_GBL_WeekDateDiff_GET(a.datStartDate, a.datFinishDate) > 1
							AND DateDiff(day, a.datStartDate, a.datFinishDate) > 1
						)
					or (	@MinTimeInterval = 10091001 --'sptMonth'
							AND DateDiff(month, a.datStartDate, a.datFinishDate) = 0
							AND report.FN_GBL_WeekDateDiff_GET(a.datStartDate, a.datFinishDate) > 1
							AND DateDiff(day, a.datStartDate, a.datFinishDate) > 1
						)
					or (	@MinTimeInterval = 10091004 --'sptWeek'
							AND report.FN_GBL_WeekDateDiff_GET(a.datStartDate, a.datFinishDate) = 0
							AND DateDiff(day, a.datStartDate, a.datFinishDate) > 1
						)
					or (	@MinTimeInterval = 10091002--'sptOnday'
						AND DateDiff(day, a.datStartDate, a.datFinishDate) = 0)
				)    AND		
        (	(	@MinAdminLevel = 10089001 --'satCountry' 
			    AND a.idfsAdministrativeUnit = c.idfsReference
		      )
		    or	(	@MinAdminLevel = 10089003 --'satRegion' 
				    AND a.idfsAdministrativeUnit = r.idfsRegion
				    AND (r.idfsRegiON = @RegionID OR @RegionID IS NULL)
			    )
		    or	(	@MinAdminLevel = 10089002 --'satRayon' 
				    AND a.idfsAdministrativeUnit = rr.idfsRayon
				    AND (rr.idfsRayON = @RayonID OR @RayonID IS NULL) 
				    AND (rr.idfsRegiON = @RegionID OR @RegionID IS NULL)
			    )
		    or	(	@MinAdminLevel = 10089004 --'satSettlement' 
				    AND a.idfsAdministrativeUnit = s.idfsSettlement
				    AND (s.idfsRayON = @RayonID OR @RayonID IS NULL) 
				    AND (s.idfsRegiON = @RegionID OR @RegionID IS NULL)

			    )
	      )
AND a.intRowStatus = 0	       
	      
	      


DECLARE	@MonthlyReportAggregateDiagnosisValuesTable	TABLE
(	idfsBaseReference	BIGINT NOT NULL PRIMARY KEY,
	intAge_0_1			INT NOT NULL,	--7
	intAge_1_4			INT NOT NULL, --8
	intAge_5_14			INT NOT NULL, --9
	intAge_15_19		INT NOT NULL, --10
	intAge_20_29		INT NOT NULL, --11
	intAge_30_59		INT NOT NULL, --12
	intAge_60_more		INT NOT NULL, --13
	intTotal			INT NOT NULL, --14
	intLabTested		INT NULL,		--15
	intLabConfirmed		INT NULL,		--18
	intTotalConfirmed	INT NULL		--21
)


INSERT INTO	@MonthlyReportAggregateDiagnosisValuesTable
(	idfsBaseReference,
	intAge_0_1,	--7
	intAge_1_4, --8
	intAge_5_14, --9
	intAge_15_19, --10
	intAge_20_29, --11
	intAge_30_59, --12
	intAge_60_more, --13
	intTotal, --14
	intLabTested,		--15
	intLabConfirmed,		--18
	intTotalConfirmed--21
)
SELECT		
      fdt.idfsDiagnosis      ,
			sum(CAST(ISNULL(agp_Age_0_1.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Age_1_4.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Age_5_14.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Age_15_19.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Age_20_29.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Age_30_59.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Age_60_more.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Total.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_LabTested.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_LabConfirmed.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_TotalConfirmed.varValue, 0)AS INT))

FROM		@MonthlyReportHumanAggregateCase fhac
-- UPDATEd for versiON 6

-- Matrix version
INNER JOIN	tlbAggrMatrixVersionHeader h
ON			h.idfsMatrixType = 71190000000	-- Human Aggregate Case
			AND (	-- Get matrix versiON selected by the user in aggregate case
					h.idfVersiON = fhac.idfVersiON 
					-- If matrix versiON is not selected by the user in aggregate case, 
					-- then SELECT active matrix with the latest date activatiON that is earlier than aggregate case start date
					or (	fhac.idfVersiON is null 
							AND	h.datStartDate <= fhac.datStartDate
							AND	h.blnIsActive = 1
							AND not exists	(
										SELECT	*
										FROM	tlbAggrMatrixVersionHeader h_later
										where	h_later.idfsMatrixType = 71190000000	-- Human Aggregate Case
												AND	h_later.datStartDate <= fhac.datStartDate
												AND	h_later.blnIsActive = 1
												AND h_later.intRowStatus = 0
												AND	h_later.datStartDate > h.datStartDate
											)
						))
			AND h.intRowStatus = 0

-- Matrix row
INNER JOIN	tlbAggrHumanCaseMTX mtx
ON			mtx.idfVersiON = h.idfVersion
			AND mtx.intRowStatus = 0
INNER JOIN	@MonthlyReportDiagnosisTable fdt
ON			fdt.idfsDiagnosis = mtx.idfsDiagnosis

--Age_0_1
LEFT JOIN	dbo.tlbActivityParameters agp_Age_0_1
ON			agp_Age_0_1.idfObservatiON = fhac.idfCaseObservation
			AND	agp_Age_0_1.idfsParameter = @FFP_Age_0_1
			AND agp_Age_0_1.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_0_1.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_0_1.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')
			
--	Age_1_4
LEFT JOIN	dbo.tlbActivityParameters agp_Age_1_4
ON			agp_Age_1_4.idfObservation= fhac.idfCaseObservation
			AND	agp_Age_1_4.idfsParameter = @FFP_Age_1_4
			AND agp_Age_1_4.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_1_4.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_1_4.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')
			

--	Age_5_14		
LEFT JOIN	dbo.tlbActivityParameters agp_Age_5_14
ON			agp_Age_5_14.idfObservation= fhac.idfCaseObservation
			AND	agp_Age_5_14.idfsParameter = @FFP_Age_5_14
			AND agp_Age_5_14.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_5_14.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_5_14.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')

--	Age_15_19		
LEFT JOIN	dbo.tlbActivityParameters agp_Age_15_19
ON			agp_Age_15_19.idfObservation= fhac.idfCaseObservation
			AND	agp_Age_15_19.idfsParameter = @FFP_Age_15_19
			AND agp_Age_15_19.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_15_19.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_15_19.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')


--	Age_20_29		
LEFT JOIN	dbo.tlbActivityParameters agp_Age_20_29
ON			agp_Age_20_29.idfObservation= fhac.idfCaseObservation
			AND	agp_Age_20_29.idfsParameter = @FFP_Age_20_29
			AND agp_Age_20_29.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_20_29.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_20_29.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')


--	Age_30_59		
LEFT JOIN	dbo.tlbActivityParameters agp_Age_30_59
ON			agp_Age_30_59.idfObservation= fhac.idfCaseObservation
			AND	agp_Age_30_59.idfsParameter = @FFP_Age_30_59
			AND agp_Age_30_59.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_30_59.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_30_59.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')

--	Age_60_more		
LEFT JOIN	dbo.tlbActivityParameters agp_Age_60_more
ON			agp_Age_60_more.idfObservation= fhac.idfCaseObservation
			AND	agp_Age_60_more.idfsParameter = @FFP_Age_60_more
			AND agp_Age_60_more.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_60_more.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_60_more.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')


--	Total		
LEFT JOIN	dbo.tlbActivityParameters agp_Total
ON			agp_Total.idfObservation= fhac.idfCaseObservation
			AND	agp_Total.idfsParameter = @FFP_Total
			AND agp_Total.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Total.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Total.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')


--	LabTested		
LEFT JOIN	dbo.tlbActivityParameters agp_LabTested
ON			agp_LabTested.idfObservatiON = fhac.idfCaseObservation
			AND	agp_LabTested.idfsParameter = @FFP_LabTested
			AND agp_LabTested.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_LabTested.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_LabTested.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')


--	LabConfirmed		
LEFT JOIN	dbo.tlbActivityParameters agp_LabConfirmed
ON			agp_LabConfirmed.idfObservatiON = fhac.idfCaseObservation
			AND	agp_LabConfirmed.idfsParameter = @FFP_LabConfirmed
			AND agp_LabConfirmed.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_LabConfirmed.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_LabConfirmed.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')



--	TotalConfirmed		
LEFT JOIN	dbo.tlbActivityParameters agp_TotalConfirmed
ON			agp_TotalConfirmed.idfObservatiON = fhac.idfCaseObservation
			AND	agp_TotalConfirmed.idfsParameter = @FFP_TotalConfirmed
			AND agp_TotalConfirmed.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_TotalConfirmed.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_TotalConfirmed.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')

group by	fdt.idfsDiagnosis



DECLARE	@MonthlyReportCaseTable	TABLE
(	idfsDiagnosis			BIGINT  NOT NULL,
	idfCase				BIGINT NOT NULL PRIMARY KEY,
	intYear					int NULL,
	blnLabTested  BIT,
	blnLabConfirmed   BIT,
	blnLabEpiConfirmed BIT
)

INSERT INTO	@MonthlyReportCaseTable
(	idfsDiagnosis,
	idfCase,
	intYear,
	blnLabTested,
	blnLabConfirmed,
	blnLabEpiConfirmed
)
SELECT DISTINCT
			fdt.idfsDiagnosis,
			hc.idfHumanCase AS idfCase,
			CASE
				WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042003	-- Years 
						AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 200)
					THEN	hc.intPatientAge
				WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042002	-- Months
						AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 60)
					THEN	cast(hc.intPatientAge / 12 as int)
				WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042001	-- Days
						AND (ISNULL(hc.intPatientAge, -1) >= 0)
					THEN	0
				ELSE	null
			END,
			CASE WHEN hc.idfsYNTestsConducted = 10100001 THEN 1 ELSE 0 END,
			CASE 
			  WHEN  hc.blnLabDiagBasis = 1 AND 
			        hc.idfsYNTestsConducted = 10100001 AND 
			        (
			          hc.idfsFinalCaseStatus = 350000000 /*Confirmed Case*/ or
			          (hc.idfsFinalCaseStatus is null AND 
			          hc.idfsInitialCaseStatus = 350000000 /*Confirmed Case*/) 
			        )
			  THEN 1 ELSE 0 
			END,
			CASE 
			  WHEN ( (hc.blnLabDiagBasis = 1 AND hc.idfsYNTestsConducted = 10100001)  or  
			          hc.blnEpiDiagBasis = 1) 
			       and
			        (
			          hc.idfsFinalCaseStatus = 350000000 /*Confirmed Case*/ or
			          (hc.idfsFinalCaseStatus is null AND 
			          hc.idfsInitialCaseStatus = 350000000 /*Confirmed Case*/) 
			        )			        
			  THEN 1 ELSE 0 
			END
			
FROM tlbHumanCase hc     

    INNER JOIN	@MonthlyReportDiagnosisTable fdt
    ON	fdt.idfsDiagnosis = COALESCE(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis)

    INNER JOIN tlbHuman h
      LEFT OUTER JOIN tlbGeoLocatiON gl
      ON h.idfCurrentResidenceAddress = gl.idfGeoLocation
    	AND gl.intRowStatus = 0
    ON hc.idfHuman = h.idfHuman
       AND h.intRowStatus = 0
    			
    LEFT OUTER JOIN  tlbGeoLocatiON cgl
    ON hc.idfPointGeoLocatiON = cgl.idfGeoLocation
    AND cgl.intRowStatus = 0
			
WHERE	
		(	@StartDate <= ISNULL(hc.datOnSetDate, ISNULL(hc.datFinalDiagnosisDate, ISNULL(hc.datTentativeDiagnosisDate, ISNULL(hc.datNotificationDate, hc.datEnteredDate))))
				AND ISNULL(hc.datOnSetDate, ISNULL(hc.datFinalDiagnosisDate, ISNULL(hc.datTentativeDiagnosisDate, ISNULL(hc.datNotificationDate, hc.datEnteredDate)))) < DATEADD(day, 1, @FinishDate)
		) AND
		(	ISNULL(cgl.idfsGeoLocationType, -1) <> 10036001 --Foreign Address
			or cgl.idfsCountry is NULL or cgl.idfsCountry = 780000000
		) AND
		(	
			(	cgl.idfsRegiON is NOT NULL /*AND cgl.idfsRayON is NOT NULL*/ AND @RegionID is NOT NULL
				AND (cgl.idfsRegiON = @RegionID)
				AND (cgl.idfsRayON = @RayonID or @RayonID is NULL)
			)
			or	(	cgl.idfsRegiON is NULL AND gl.idfsRegiON is NOT NULL /*AND gl.idfsRayON is NOT NULL*/ AND @RegionID is NOT NULL
					AND (gl.idfsRegiON = @RegionID)
					AND (gl.idfsRayON = @RayonID or @RayonID is NULL)
				)
			or @RegionID is NULL
		)
		AND hc.intRowStatus = 0 
		AND COALESCE(hc.idfsFinalCaseStatus, hc.idfsInitialCaseStatus, 370000000) <> 370000000 --'casRefused'
    

--Total
DECLARE	@MonthlyReportCaseDiagnosisTotalValuesTable	TABLE
(	idfsDiagnosis		BIGINT NOT NULL PRIMARY KEY,
	intTotal				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosisTotalValuesTable
(	idfsDiagnosis,
	intTotal
)
SELECT fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
group by	fct.idfsDiagnosis



--Total Age_0_1
DECLARE	@MonthlyReportCaseDiagnosis_Age_0_1_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_0_1				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_0_1_TotalValuesTable
(	idfsDiagnosis,
	intAge_0_1
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 0 AND fct.intYear < 1)
group by	fct.idfsDiagnosis


--Total Age_1_4
DECLARE	@MonthlyReportCaseDiagnosis_Age_1_4_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_1_4				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_1_4_TotalValuesTable
(	idfsDiagnosis,
	intAge_1_4
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 1 AND fct.intYear <= 4)
group by	fct.idfsDiagnosis


--Total Age_5_14
DECLARE	@MonthlyReportCaseDiagnosis_Age_5_14_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_5_14				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_5_14_TotalValuesTable
(	idfsDiagnosis,
	intAge_5_14
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 5 AND fct.intYear <= 14)
group by	fct.idfsDiagnosis


--Total Age_15_19
DECLARE	@MonthlyReportCaseDiagnosis_Age_15_19_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_15_19				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_15_19_TotalValuesTable
(	idfsDiagnosis,
	intAge_15_19
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 15 AND fct.intYear <= 19)
group by	fct.idfsDiagnosis


--Total Age_20_29
DECLARE	@MonthlyReportCaseDiagnosis_Age_20_29_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_20_29				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_20_29_TotalValuesTable
(	idfsDiagnosis,
	intAge_20_29
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 20 AND fct.intYear <= 29)
group by	fct.idfsDiagnosis


--Total Age_30_59
DECLARE	@MonthlyReportCaseDiagnosis_Age_30_59_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_30_59				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_30_59_TotalValuesTable
(	idfsDiagnosis,
	intAge_30_59
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 30 AND fct.intYear <= 59)
group by	fct.idfsDiagnosis


--Total Age_60_more
DECLARE	@MonthlyReportCaseDiagnosis_Age_60_more_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_60_more				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_60_more_TotalValuesTable
(	idfsDiagnosis,
	intAge_60_more
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 60)
group by	fct.idfsDiagnosis


--Total LabTested 
DECLARE	@MonthlyReportCaseDiagnosis_LabTested_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intLabTested				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_LabTested_TotalValuesTable
(	idfsDiagnosis,
	intLabTested
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		fct.blnLabTested = 1
group by	fct.idfsDiagnosis



--Total LabConfirmed 
DECLARE	@MonthlyReportCaseDiagnosis_LabConfirmed_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intLabConfirmed				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_LabConfirmed_TotalValuesTable
(	idfsDiagnosis,
	intLabConfirmed
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		fct.blnLabConfirmed = 1
group by	fct.idfsDiagnosis

--Total TotalConfirmed
DECLARE	@MonthlyReportCaseDiagnosis_TotalConfirmed_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intTotalConfirmed				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_TotalConfirmed_TotalValuesTable
(	idfsDiagnosis,
	intTotalConfirmed
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		fct.blnLabEpiConfirmed = 1
group by	fct.idfsDiagnosis

--aggregate cases
UPDATE		fdt
SET				
	fdt.intAge_0_1 = fadvt.intAge_0_1,
	fdt.intAge_1_4 = fadvt.intAge_1_4,
	fdt.intAge_5_14 = fadvt.intAge_5_14,	
	fdt.intAge_15_19 = fadvt.intAge_15_19,	
	fdt.intAge_20_29 = fadvt.intAge_20_29,	
	fdt.intAge_30_59 = fadvt.intAge_30_59,
	fdt.intAge_60_more = fadvt.intAge_60_more,	
	fdt.intTotal = fadvt.intTotal,	
	fdt.intLabTested = fadvt.intLabTested,	
	fdt.intLabConfirmed = fadvt.intLabConfirmed,	
	fdt.intTotalConfirmed = fadvt.intTotalConfirmed		
FROM		@MonthlyReportDiagnosisTable fdt
    INNER JOIN	@MonthlyReportAggregateDiagnosisValuesTable fadvt
    ON			fadvt.idfsBaseReference = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 1


--standard cases
UPDATE		fdt
SET			fdt.intTotal = ISNULL (fdt.intTotal, 0) + fcdvt.intTotal
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosisTotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0

UPDATE		fdt
SET			fdt.intAge_0_1 = ISNULL (fdt.intAge_0_1, 0) + fcdvt.intAge_0_1
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_0_1_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0

UPDATE		fdt
SET			fdt.intAge_1_4 = ISNULL (fdt.intAge_1_4, 0) + fcdvt.intAge_1_4
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_1_4_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0

UPDATE		fdt
SET			fdt.intAge_5_14 = ISNULL (fdt.intAge_5_14, 0) + fcdvt.intAge_5_14
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_5_14_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0
	
UPDATE		fdt
SET			fdt.intAge_15_19 =  ISNULL (fdt.intAge_15_19, 0) +fcdvt.intAge_15_19
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_15_19_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0	
	
UPDATE		fdt
SET			fdt.intAge_20_29 =  ISNULL (fdt.intAge_20_29, 0) +fcdvt.intAge_20_29
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_20_29_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0		
	
UPDATE		fdt
SET			fdt.intAge_30_59 = ISNULL (fdt.intAge_30_59, 0) + fcdvt.intAge_30_59
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_30_59_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0		
	
UPDATE		fdt
SET			fdt.intAge_60_more = ISNULL (fdt.intAge_60_more, 0) + fcdvt.intAge_60_more
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_60_more_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0		
	
	
UPDATE		fdt
SET			fdt.intLabTested = ISNULL (fdt.intLabTested, 0) + fcdvt.intLabTested
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_LabTested_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0		
	
	
UPDATE		fdt
SET			fdt.intLabConfirmed = ISNULL (fdt.intLabConfirmed, 0) + fcdvt.intLabConfirmed
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_LabConfirmed_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0		
	
	
UPDATE		fdt
SET			fdt.intTotalConfirmed =  ISNULL (fdt.intTotalConfirmed, 0) +fcdvt.intTotalConfirmed
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_TotalConfirmed_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0		
	
	
	

	

DECLARE	@MonthlyReportDiagnosisGroupTable	TABLE
(	idfsDiagnosisGroup	BIGINT NOT NULL PRIMARY KEY,
	intAge_0_1			INT NOT NULL,	--7
	intAge_1_4			INT NOT NULL, --8
	intAge_5_14			INT NOT NULL, --9
	intAge_15_19		INT NOT NULL, --10
	intAge_20_29		INT NOT NULL, --11
	intAge_30_59		INT NOT NULL, --12
	intAge_60_more		INT NOT NULL, --13
	intTotal			INT NOT NULL, --14
	intLabTested		INT NULL,		--15
	intLabConfirmed		INT NULL,		--18
	intTotalConfirmed	INT NULL		--21
)
	
	
INSERT INTO	@MonthlyReportDiagnosisGroupTable
(	idfsDiagnosisGroup,
	intAge_0_1,	
	intAge_1_4, 
	intAge_5_14, 
	intAge_15_19, 
	intAge_20_29, 
	intAge_30_59, 
	intAge_60_more, 
	intTotal, 
	intLabTested,		
	intLabConfirmed,		
	intTotalConfirmed
)
SELECT		dtg.idfsReportDiagnosisGroup,
	    sum(intAge_0_1),	
	    sum(intAge_1_4), 
	    sum(intAge_5_14), 
	    sum(intAge_15_19), 
	    sum(intAge_20_29), 
	    sum(intAge_30_59), 
	    sum(intAge_60_more), 
	    sum(intTotal), 
	    sum(intLabTested),		
	    sum(intLabConfirmed),		
	    sum(intTotalConfirmed)
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	dbo.trtDiagnosisToGroupForReportType dtg
ON			dtg.idfsDiagnosis = fdt.idfsDiagnosis AND
dtg.idfsCustomReportType = @idfsCustomReportType
group by	dtg.idfsReportDiagnosisGroup	
	
	

  	
UPDATE		ft
SET	
  ft.intAge_0_1 = CASE WHEN fdt.intAge_0_1 = 0 THEN NULL ELSE fdt.intAge_0_1 END,
	ft.intAge_1_4 = CASE WHEN fdt.intAge_1_4 = 0 THEN NULL ELSE fdt.intAge_1_4 END, 
	ft.intAge_5_14 = CASE WHEN fdt.intAge_5_14 = 0 THEN NULL ELSE fdt.intAge_5_14 END, 
	ft.intAge_15_19 = CASE WHEN fdt.intAge_15_19 = 0 THEN NULL ELSE fdt.intAge_15_19 END, 
	ft.intAge_20_29 = CASE WHEN fdt.intAge_20_29 = 0 THEN NULL ELSE fdt.intAge_20_29 END, 
	ft.intAge_30_59 = CASE WHEN fdt.intAge_30_59 = 0 THEN NULL ELSE fdt.intAge_30_59 END, 
	ft.intAge_60_more = CASE WHEN fdt.intAge_60_more = 0 THEN NULL ELSE fdt.intAge_60_more END, 
	ft.intTotal = fdt.intTotal, 
	ft.intLabTested = CASE WHEN fdt.intLabTested = 0 THEN NULL ELSE fdt.intLabTested END,
	ft.intLabConfirmed = CASE WHEN fdt.intLabConfirmed = 0 THEN NULL ELSE fdt.intLabConfirmed END,
	ft.intTotalConfirmed = CASE WHEN fdt.intTotalConfirmed = 0 THEN NULL ELSE fdt.intTotalConfirmed END 
FROM		@ReportTable ft
INNER JOIN	@MonthlyReportDiagnosisTable fdt
ON			fdt.idfsDiagnosis = ft.idfsBaseReference	
	
	
UPDATE		ft
SET	
  ft.intAge_0_1 = CASE WHEN fdgt.intAge_0_1 = 0 THEN NULL ELSE fdgt.intAge_0_1 END,	
	ft.intAge_1_4 = CASE WHEN fdgt.intAge_1_4 = 0 THEN NULL ELSE fdgt.intAge_1_4 END,  
	ft.intAge_5_14 = CASE WHEN fdgt.intAge_5_14 = 0 THEN NULL ELSE fdgt.intAge_5_14 END, 
	ft.intAge_15_19 = CASE WHEN fdgt.intAge_15_19 = 0 THEN NULL ELSE fdgt.intAge_15_19 END, 
	ft.intAge_20_29 = CASE WHEN fdgt.intAge_20_29 = 0 THEN NULL ELSE fdgt.intAge_20_29 END, 
	ft.intAge_30_59 = CASE WHEN fdgt.intAge_30_59 = 0 THEN NULL ELSE fdgt.intAge_30_59 END , 
	ft.intAge_60_more = CASE WHEN fdgt.intAge_60_more = 0 THEN NULL ELSE fdgt.intAge_60_more END, 
	ft.intTotal = fdgt.intTotal, 
	ft.intLabTested = CASE WHEN fdgt.intLabTested = 0 THEN NULL ELSE fdgt.intLabTested END,	
	ft.intLabConfirmed = CASE WHEN fdgt.intLabConfirmed = 0 THEN NULL ELSE fdgt.intLabConfirmed END,	
	ft.intTotalConfirmed = CASE WHEN fdgt.intTotalConfirmed = 0 THEN NULL ELSE fdgt.intTotalConfirmed END 
FROM		@ReportTable ft
INNER JOIN	@MonthlyReportDiagnosisGroupTable fdgt
ON			fdgt.idfsDiagnosisGroup = ft.idfsBaseReference		
	
	
	




SELECT	@na = ISNULL(RTrim(r.[name]) + N' ', N'')
FROM	report.FN_GBL_ReferenceRepair_GET(@LangID, 19000132) r	-- Additional report Text
where	r.strDefault = N'N/A'


SELECT	@strICD10CodeAdaptatiON = ISNULL(RTrim(r.[name]) + N' ', N'')
FROM	report.FN_GBL_ReferenceRepair_GET(@LangID, 19000132) r	-- Additional report Text
  INNER JOIN trtBaseReference br
  ON br.idfsBaseReference = r.idfsReference
WHERE	br.strBaseReferenceCode = N'ICD-10 Code Adaptation'


UPDATE		ft
SET	
	 ft.strICD10 = CASE WHEN rr.intNullValueInsteadZero & 1 > 0 THEN ft.strICD10 + ISNULL(' ' + @strICD10CodeAdaptation, '') ELSE ft.strICD10 END		
	,ft.intLabTested = CASE WHEN rr.intNullValueInsteadZero & 2 > 0 THEN null /*@na*/ ELSE ft.intLabTested END		
	,ft.intLabConfirmed = CASE WHEN rr.intNullValueInsteadZero & 4 > 0 THEN null /*@na*/ ELSE ft.intLabConfirmed END		
  ,ft.intTotalConfirmed = CASE WHEN rr.intNullValueInsteadZero & 8 > 0  THEN null /*@na*/ ELSE ft.intTotalConfirmed END 
FROM		@ReportTable ft
  INNER JOIN 	dbo.trtReportRows rr
  ON rr.idfsCustomReportType = @idfsCustomReportType
  AND rr.idfsDiagnosisOrReportDiagnosisGroup = ft.idfsBaseReference	
  	

DECLARE	@NA_DiseaseTable	TABLE
(	strDiseaseName		NVARCHAR(300) collate database_default NOT NULL, --46
	No_LAB_TESTED		smallint,
	No_LAB_CONFIRMED	smallint,
	TOTAL_CONFIRMED		smallint
)

INSERT INTO @NA_DiseaseTable(strDiseaseName,No_LAB_TESTED,No_LAB_CONFIRMED,TOTAL_CONFIRMED) 	
SELECT Disease,No_LAB_TESTED,No_LAB_CONFIRMED,TOTAL_CONFIRMED 
FROM (
SELECT N'Tetanus' AS Disease,1 AS No_LAB_TESTED,1 AS No_LAB_CONFIRMED,1 AS TOTAL_CONFIRMED,'en-US' strLanguage UNION ALL
SELECT N'AFP/Acute poliomyelitis',0,0,1,'en-US' UNION ALL
SELECT N'Probable food-borne intoxication',0,1,1,'en-US' UNION ALL
SELECT N'Unspecified infectious diarrheal diseases',0,1,1,'en-US' UNION ALL
SELECT N'Arthropods transmitted viral fevers and viral hemorrhagic fevers',0,1,1,'en-US' UNION ALL
SELECT N'15-49 Female Mortality',1,1,1,'en-US' UNION ALL
SELECT N'0-5 Children Mortality',1,1,1,'en-US' UNION ALL
SELECT N'Contact with and exposure to rabies',1,1,1,'en-US' UNION ALL
SELECT N'Contact with venomous snakes and lizards',1,1,1,'en-US' UNION ALL
SELECT N'Contact with venomous insects',1,1,1,'en-US' UNION ALL
SELECT N'HIV - AIDS Tested',1,1,1,'en-US' UNION ALL
SELECT N'HIV - AIDS Tested Pregnant',1,1,1,'en-US' UNION ALL
SELECT N'ტეტანუსი',1,1,1,'ka-GE' UNION ALL
SELECT N'მდდ/მწვავე პოლიომიელიტი',0,0,1,'ka-GE' UNION ALL
SELECT N'სავარაუდო საკვებისმიერი მოშხამვა',0,1,1,'ka-GE' UNION ALL
SELECT N'სავარაუდო ინფექციური წარმოშობის დიარეები',0,1,1,'ka-GE' UNION ALL
SELECT N'სავარაუდო ვირუსული ჰემორაგიული ცხელებები',0,1,1,'ka-GE' UNION ALL
SELECT N'15-49 წლის ასაკის ქალის სიკვდილი',1,1,1,'ka-GE' UNION ALL
SELECT N'0-5 წლამდე ბავშვის სიკვდილი',1,1,1,'ka-GE' UNION ALL
SELECT N'ცოფის რისკის მქონე ექსპოზიცია ',1,1,1,'ka-GE' UNION ALL
SELECT N'შხამიანი ქვეწარმავლის ნაკბენი',1,1,1,'ka-GE' UNION ALL
SELECT N'შხამიანი მწერის ნაკბენი',1,1,1,'ka-GE' UNION ALL
SELECT N'აივ - შიდსზე ტესტირებული',1,1,1,'ka-GE' UNION ALL
SELECT N'აივ - შიდსზე ტესტირებული ორსულები',1,1,1,'ka-GE' UNION ALL
SELECT N'Столбняк' AS Disease,1 AS No_LAB_TESTED,1 AS No_LAB_CONFIRMED,1 AS TOTAL_CONFIRMED,'ru-RU' strLanguage UNION ALL
SELECT N'ОВП/острый полиомиелит',0,0,1,'ru-RU' UNION ALL
SELECT N'Возможные пищевые отравления',0,1,1,'ru-RU' UNION ALL
SELECT N'Диарея и гастроэнтерит предположительно инфекционного происхождения',0,1,1,'ru-RU' UNION ALL
SELECT N'Вирусные лихорадки, передаваемые членистоногими и вирусные геморрагические лихорадки',0,1,1,'ru-RU' UNION ALL
SELECT N'Смерть женщины в возрасте от 15 до 49 лет',1,1,1,'ru-RU' UNION ALL
SELECT N'Смерть ребенка в возрасте от 0 до 5 лет',1,1,1,'ru-RU' UNION ALL
SELECT N'Контакт с больным и возможность заражения бешенством',1,1,1,'ru-RU' UNION ALL
SELECT N'Контакт с ядовитыми змеями и ящерицами',1,1,1,'ru-RU' UNION ALL
SELECT N'Контакт с ядовитыми насекомыми',1,1,1,'ru-RU' UNION ALL
SELECT N'Протестированные на ВИЧ - СПИД',1,1,1,'ru-RU' UNION ALL
SELECT N'Протестированные на ВИЧ - СПИД беременные',1,1,1,'ru-RU'
) A
WHERE strLanguage=@LangID

DECLARE @NAVALUE AS NVARCHAR(10)
SELECT @NAVALUE=CASE WHEN @LangID='ka-GE' THEN N'ა/შ' ELSE 'N/A' END  	

SELECT 
	R.idfsBaseReference,
	R.strDiseaseName,
	R.strICD10,
	R.intAge_0_1,
	R.intAge_1_4,
	R.intAge_5_14,
	R.intAge_15_19,
	R.intAge_20_29,
	R.intAge_30_59,
	R.intAge_60_more,
	R.intTotal,
	CASE WHEN ISNULL(NA.No_LAB_TESTED,0)=1 THEN @NAVALUE ELSE CAST(R.intLabTested AS NVARCHAR(5)) END intLabTested,
	CASE WHEN ISNULL(NA.No_LAB_CONFIRMED,0)=1 THEN @NAVALUE ELSE CAST(R.intLabConfirmed  AS NVARCHAR(5)) END intLabConfirmed,
	CASE WHEN ISNULL(NA.TOTAL_CONFIRMED,0)=1 THEN @NAVALUE ELSE CAST(R.intTotalConfirmed AS NVARCHAR(5))END intTotalConfirmed,
	R.intOrder
FROM @ReportTable R
LEFT JOIN @NA_DiseaseTable NA ON NA.strDiseaseName=R.strDiseaseName
order by intOrder
GO
PRINT N'Altering Procedure [report].[USP_REP_LAB_Journal60B]...';


GO


--*************************************************************************
-- Name 				: report.USP_REP_LAB_Journal60B
-- Description			: Select data for 60B Journal.
--                  
-- Author               : Srini Goli
-- Revision History
--		Name			Date            Change Detail
--		Srini Goli      02/07/2023      Data not pulling correctly and Concentrated on Performance

-- Testing code:
/*
 EXEC report.USP_REP_LAB_Journal60B 'ka', '20150101', '20151231', 9844050000000, 1101
 
 EXEC report.USP_REP_LAB_Journal60B 'en-US', '20150101', '20151231', 9844050000000, 1101

 EXEC report.USP_REP_LAB_Journal60B 'en-US', '20150101', '20150630', NULL,NULL

 EXEC report.USP_REP_LAB_Journal60B 'en-US', '20230101', '20230201', NULL,NULL
 */
  --*************************************************************************
 
 ALTER Procedure [report].[USP_REP_LAB_Journal60B]
 	(
 		@LangID		AS NVARCHAR(10), 
 		@StartDate	AS DATETIME,	 
 		@FinishDate	AS DATETIME,
 		@Diagnosis	AS BIGINT	=NULL,		-- filter value ofa drop-down list of all diseases accounted in EIDSS as case-based diseases with HA Code �Human� or �Human, Livestock� or �Human, Avian� or �Human, Avian, Livestock� (non-mandatory field).
 		@SiteID		AS BIGINT = NULL
 	)
 AS	
 
 -- Field description may be found here
 -- "https://repos.btrp.net/BTRP/Project_Documents/08x-Implementation/Customizations/GG/Reports/Specification for report development - 60B Journal Human GG v1.0.doc"
 -- by number marked red at screen form prototype 
 
 DECLARE	@ReportTable 	TABLE
 (	
 	strName						NVARCHAR(2000), --2	
	LegacyCaseID				NVARCHAR(100),
	intRow						NVARCHAR(100),
 	strAge						NVARCHAR(2000), --3
 	strGender					NVARCHAR(2000), --4
 	strAddress					NVARCHAR(2000), --5
 	strPlaceOfStudyWork			NVARCHAR(2000), --6
 	datDiseaseOnsetDate			DATETIME, --7
 	datDateOfFirstPresentation		DATETIME, --8
 	strFacilityThatSentNotification NVARCHAR(2000), --9
 	strProvisionalDiagnosis			NVARCHAR(2000), --10
 	datDateProvisionalDiagnosis		DATETIME, --11
 	datDateSpecificTreatment		DATETIME, --12
 	datDateSpecimenTaken			NVARCHAR(MAX), --13
 	strResultAndDate			NVARCHAR(MAX), --14
 	strVaccinationStatus		NVARCHAR(2000), --15
 	datDateCaseInvestigation	DATETIME, --16
 	strFinalDS					NVARCHAR(2000), --17
 	strFinalClassification		NVARCHAR(2000), --18
 	datDateFinalDS				DATETIME, --19
 	strOutcome					NVARCHAR(2000), --20
 	strCaseStatus				NVARCHAR(2000), --24
 	strComments					NVARCHAR(MAX), --25
 	strCaseID					NVARCHAR(200),
 	-- todo: fill this new field:
 	datEnteredDate				DATETIME  -- for sorting in EIDSS
 )	
 
 PRINT ISNULL(@SiteID, dbo.FN_GBL_SITEID_GET())
 
 DECLARE	@OutbreakID	NVARCHAR(300)
 SELECT	@OutbreakID = ISNULL(RTRIM(r.[name]) + N' ', N'')
 FROM	dbo.FN_GBL_ReferenceRepair(@LangID, 19000132) r	-- Additional report Text
 WHERE	r.strDefault = N'Outbreak ID'
 PRINT @OutbreakID
 
 DECLARE	@CurrentResidence	NVARCHAR(300)
 SELECT	@CurrentResidence = ISNULL(RTRIM(r.[name]) + N' ' , N'') 
 FROM	dbo.FN_GBL_ReferenceRepair(@LangID, 19000132) r	-- Additional report Text
 WHERE	r.strDefault = N'Current Residence:'
 
 --PRINT @CurrentResidence
 
 DECLARE	@PermanentResidence	NVARCHAR(300)
 SELECT	@PermanentResidence = ISNULL(RTRIM(r.[name]) + N' ' , N'') 
 FROM	dbo.FN_GBL_ReferenceRepair(@LangID, 19000132) r	-- Additional report Text
 WHERE	r.strDefault = N'Permanent Residence:'
 
 --PRINT @PermanentResidence
 
 DECLARE 
	 @OPV5field BIGINT
	,@OPV4field BIGINT
	,@OPV3field BIGINT
	,@OPV2field BIGINT
	,@OPV1field BIGINT
	,@Thirdfield BIGINT
	,@Secondfield BIGINT
	,@Firstfield BIGINT 
	,@NumberOfImmunizationsReceived BIGINT
	,@ArePatientsImmunizationRecordsAvailable BIGINT
	,@WasSpecificVaccinationAdministered BIGINT
	,@VaccinatedAgainstRubella BIGINT
	,@NumberOfReceivedDoses_WithDiphtheriaComponent BIGINT
	,@RabiesVaccineGiven BIGINT
	,@NumberOfReceivedDoses_WithMeaslesComponent BIGINT
	,@HibVaccinationStatus BIGINT
	,@NumberOfReceivedDoses_WithMumpsComponent BIGINT
	,@MothersTetanusToxoidHistoryPriorToChildsDisease BIGINT
	,@NumberOfReceivedDoses_WithPertussisComponent BIGINT
	,@NumberOfReceivedDoses_WithRubellaComponent BIGINT
	,@IncludeDosesOfALLTetanusContainingToxoids BIGINT
	,@WasVaccinationAdministered BIGINT
	,@Revaccination BIGINT
	,@DateOfVaccination BIGINT
	,@DateOfRevaccination BIGINT
	,@ImmunizationHistory_DateOfLastVaccination BIGINT
	,@SpecificVaccination_DateOfLastVaccination BIGINT
	,@IfYes_IndicateDatesOfDoses BIGINT
	,@IfYes_NumberOfVaccinesReceived BIGINT
	,@IntervalSinceLastTetanusToxoidDose BIGINT
	,@DateOfLastOPVDoseReceived BIGINT
	,@NameVaccine BIGINT
	
	--NEW!!!
	--Is patient vaccinated against leptospirosis?
	,@IsPatientVaccinatedAgainstLeptospirosis BIGINT
	
	--Date of vaccination of patient against leptospirosis
	,@DateOfVaccinationOfPatientAgainstLeptospirosis BIGINT


	--NEW!!! 22.06.2016
	--Rabies vaccine dose
	,@RabiesVaccineDose BIGINT
	
	--Rabies vaccination date
	,@RabiesVaccinationDate BIGINT

	--HEI S. pneumonae caused infection GG: S. pneumonae vaccination status
	,@PneumonaeVaccinationStatus BIGINT
	
	--HEI S. pneumonae caused infection GG: Number of received doses of S. pneumonae vaccine
	,@PneumonaeNumberReceivedDoses BIGINT
	
	--HEI S. pneumonae caused infection GG: Date of last vaccination
	,@PneumonaeDateLastVaccination BIGINT
	
	--HEI Acute Viral Hepatitis A GG: Number of received doses of Hepatitis A vaccine
	,@HepatitisANumberReceivedDoses BIGINT
	
	--HEI Acute Viral Hepatitis A GG: Date of last vaccination
	,@HepatitisADateLastVaccination BIGINT


	,@Section_AdditionalOPVdoses BIGINT
	,@Section_Maternalhistory BIGINT

	,@PVT_Immunization3 BIGINT
	,@PVT_Immunization5 BIGINT
	,@PVT_VaccineTypes BIGINT
	,@PVT_OPVDoses BIGINT
	,@PVT_Y_N_Unk BIGINT
     
     
	,@ft_HEI_Acute_viral_hepatitis_B_GG BIGINT
	,@ft_HEI_AFP_Acute_poliomyelitis_GG BIGINT
	,@ft_HEI_Anthrax_GG BIGINT
	,@ft_HEI_Botulism_GG BIGINT
	,@ft_HEI_Brucellosis_GG BIGINT
	,@ft_HEI_CRS_GG BIGINT
	,@ft_HEI_Congenital_Syphilis_GG BIGINT
	,@ft_HEI_CCHF_GG BIGINT
	,@ft_HEI_Diphtheria_GG BIGINT
	,@ft_HEI_Gonococcal_Infection_GG BIGINT
	,@ft_HEI_Bacterial_Meningitis_GG BIGINT
	,@ft_HEI_HFRS_GG BIGINT
	,@ft_HEI_Influenza_Virus_GG BIGINT
	,@ft_HEI_Measles_GG BIGINT
	,@ft_HEI_Mumps_GG BIGINT
	,@ft_HEI_Pertussis_GG BIGINT
	,@ft_HEI_Plague_GG BIGINT
	,@ft_HEI_Post_vaccination_unusual_reactions_and_complications_GG BIGINT
	,@ft_HEI_Rabies_GG BIGINT
	,@ft_HEI_Rubella_GG BIGINT
	,@ft_HEI_Smallpox_GG BIGINT
	,@ft_HEI_Syphilis_GG BIGINT
	,@ft_HEI_Tetanus_GG BIGINT
	,@ft_HEI_TBE_GG BIGINT
	,@ft_HEI_Tularemia_GG BIGINT
	,@ft_UNI_HEI_GG BIGINT
	--NEW!!!
	,@ft_HEI_Leptospirosis_GG BIGINT
	--NEW!!! 22.06.2016
	,@ft_HEI_Pneumonae_GG BIGINT
	,@ft_HEI_Acute_Viral_Hepatitis_A_GG BIGINT

    
	,@DG_MotherTtetanusToxoidHistoryPriorToChildDisease BIGINT

	,@idfsCustomReportType BIGINT
 
 
SET @idfsCustomReportType = 10290013 --GG 60B Journal


SELECT @OPV5field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV5field'
AND intRowStatus = 0

SELECT @OPV4field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV4field'
AND intRowStatus = 0

SELECT @OPV3field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV3field'
AND intRowStatus = 0

SELECT @OPV2field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV2field'
AND intRowStatus = 0

SELECT @OPV1field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV1field'
AND intRowStatus = 0

SELECT @Thirdfield = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Thirdfield'
AND intRowStatus = 0

SELECT @Secondfield = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Secondfield'
AND intRowStatus = 0

SELECT @Firstfield = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Firstfield'
AND intRowStatus = 0

SELECT @NumberOfImmunizationsReceived = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfImmunizationsReceived'
AND intRowStatus = 0

SELECT @ArePatientsImmunizationRecordsAvailable = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ArePatientsImmunizationRecordsAvailable'
AND intRowStatus = 0

SELECT @WasSpecificVaccinationAdministered = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'WasSpecificVaccinationAdministered'
AND intRowStatus = 0

SELECT @VaccinatedAgainstRubella = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'VaccinatedAgainstRubella'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithDiphtheriaComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithDiphtheriaComponent'
AND intRowStatus = 0

SELECT @RabiesVaccineGiven = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'RabiesVaccineGiven'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithMeaslesComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithMeaslesComponent'
AND intRowStatus = 0

SELECT @HibVaccinationStatus = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'HibVaccinationStatus'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithMumpsComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithMumpsComponent'
AND intRowStatus = 0

SELECT @MothersTetanusToxoidHistoryPriorToChildsDisease = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'MothersTetanusToxoidHistoryPriorToChildsDisease'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithPertussisComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithPertussisComponent'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithRubellaComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithRubellaComponent'
AND intRowStatus = 0

SELECT @IncludeDosesOfALLTetanusContainingToxoids = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IncludeDosesOfALLTetanusContainingToxoids'
AND intRowStatus = 0

SELECT @WasVaccinationAdministered = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'WasVaccinationAdministered'
AND intRowStatus = 0

SELECT @Revaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Revaccination'
AND intRowStatus = 0

SELECT @DateOfVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'DateOfVaccination'
AND intRowStatus = 0

SELECT @DateOfRevaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'DateOfRevaccination'
AND intRowStatus = 0

SELECT @ImmunizationHistory_DateOfLastVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ImmunizationHistory_DateOfLastVaccination'
AND intRowStatus = 0

SELECT @SpecificVaccination_DateOfLastVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'SpecificVaccination_DateOfLastVaccination'
AND intRowStatus = 0

SELECT @IfYes_IndicateDatesOfDoses = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IfYes_IndicateDatesOfDoses'
AND intRowStatus = 0

SELECT @IfYes_NumberOfVaccinesReceived = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IfYes_NumberOfVaccinesReceived'
AND intRowStatus = 0

SELECT @IntervalSinceLastTetanusToxoidDose = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IntervalSinceLastTetanusToxoidDose'
AND intRowStatus = 0

SELECT @DateOfLastOPVDoseReceived = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'DateOfLastOPVDoseReceived'
AND intRowStatus = 0

SELECT @NameVaccine = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NameVaccine' --Vaccine type that caused post vaccination complications: Name of vaccine
AND intRowStatus = 0

--NEW!!!
SELECT @IsPatientVaccinatedAgainstLeptospirosis = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IsPatientVaccinatedAgainstLeptospirosis'
AND intRowStatus = 0

SELECT @DateOfVaccinationOfPatientAgainstLeptospirosis = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'DateOfVaccinationOfPatientAgainstLeptospirosis'
AND intRowStatus = 0

--NEW!!! 22.06.2016
SELECT @RabiesVaccineDose = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'RabiesVaccineDose'
AND intRowStatus = 0	

SELECT @RabiesVaccinationDate = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'RabiesVaccinationDate'
AND intRowStatus = 0		

SELECT @PneumonaeVaccinationStatus = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PneumonaeVaccinationStatus'
AND intRowStatus = 0	
	
SELECT @PneumonaeNumberReceivedDoses = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PneumonaeNumberReceivedDoses'
AND intRowStatus = 0	
	
SELECT @PneumonaeDateLastVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PneumonaeDateLastVaccination'
AND intRowStatus = 0	
	
SELECT @HepatitisANumberReceivedDoses = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'HepatitisANumberReceivedDoses'
AND intRowStatus = 0		
	
SELECT @HepatitisADateLastVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'HepatitisADateLastVaccination'
AND intRowStatus = 0	

--SELECT 
--@RabiesVaccineDose as RabiesVaccineDose
--,@RabiesVaccinationDate as RabiesVaccinationDate
--,@PneumonaeVaccinationStatus as PneumonaeVaccinationStatus
--,@PneumonaeNumberReceivedDoses as PneumonaeNumberReceivedDoses
--,@PneumonaeDateLastVaccination as PneumonaeDateLastVaccination
--,@HepatitisANumberReceivedDoses as HepatitisANumberReceivedDoses
--,@HepatitisADateLastVaccination as HepatitisADateLastVaccination




-- sections
SELECT @Section_AdditionalOPVdoses = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Section_AdditionalOPVdoses'
AND intRowStatus = 0    
 
SELECT @Section_Maternalhistory = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Section_Maternalhistory'
AND intRowStatus = 0

--parameter values type
SELECT @PVT_Immunization3 = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_Immunization3'
AND pfc.intRowStatus = 0

SELECT @PVT_Immunization5 = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_Immunization5'
AND pfc.intRowStatus = 0

SELECT @PVT_VaccineTypes = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_VaccineTypes'
AND pfc.intRowStatus = 0

SELECT @PVT_OPVDoses = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_OPVDoses'
AND pfc.intRowStatus = 0

SELECT @PVT_Y_N_Unk = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_Y_N_Unk'
AND pfc.intRowStatus = 0
     

--Templates
--ft_HEI_Acute_viral_hepatitis_B_GG
SELECT @ft_HEI_Acute_viral_hepatitis_B_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Acute_viral_hepatitis_B_GG'
AND pfc.intRowStatus = 0

--ft_HEI_AFP_Acute_poliomyelitis_GG
SELECT @ft_HEI_AFP_Acute_poliomyelitis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_AFP_Acute_poliomyelitis_GG'
AND pfc.intRowStatus = 0
	
--ft_HEI_Anthrax_GG
SELECT @ft_HEI_Anthrax_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Anthrax_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Botulism_GG
SELECT @ft_HEI_Botulism_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Botulism_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Brucellosis_GG
SELECT @ft_HEI_Brucellosis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Brucellosis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_CRS_GG
SELECT @ft_HEI_CRS_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_CRS_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Congenital_Syphilis_GG
SELECT @ft_HEI_Congenital_Syphilis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Congenital_Syphilis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_CCHF_GG
SELECT @ft_HEI_CCHF_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_CCHF_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Diphtheria_GG
SELECT @ft_HEI_Diphtheria_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Diphtheria_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Gonococcal_Infection_GG
SELECT @ft_HEI_Gonococcal_Infection_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Gonococcal_Infection_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Bacterial_Meningitis_GG
SELECT @ft_HEI_Bacterial_Meningitis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Bacterial_Meningitis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_HFRS_GG
SELECT @ft_HEI_HFRS_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_HFRS_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Influenza_Virus_GG
SELECT @ft_HEI_Influenza_Virus_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Influenza_Virus_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Measles_GG
SELECT @ft_HEI_Measles_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Measles_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Mumps_GG
SELECT @ft_HEI_Mumps_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Mumps_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Pertussis_GG
SELECT @ft_HEI_Pertussis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Pertussis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Plague_GG
SELECT @ft_HEI_Plague_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Plague_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Post_vaccination_unusual_reactions_and_comp
SELECT @ft_HEI_Post_vaccination_unusual_reactions_and_complications_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Post_vaccination_unusual_reactions_and_comp'
AND pfc.intRowStatus = 0

--ft_HEI_Rabies_GG
SELECT @ft_HEI_Rabies_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Rabies_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Rubella_GG
SELECT @ft_HEI_Rubella_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Rubella_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Smallpox_GG
SELECT @ft_HEI_Smallpox_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Smallpox_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Syphilis_GG
SELECT @ft_HEI_Syphilis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Syphilis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Tetanus_GG
SELECT @ft_HEI_Tetanus_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Tetanus_GG'
AND pfc.intRowStatus = 0

--ft_HEI_TBE_GG
SELECT @ft_HEI_TBE_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_TBE_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Tularemia_GG
SELECT @ft_HEI_Tularemia_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Tularemia_GG'
AND pfc.intRowStatus = 0

--ft_UNI_HEI_GG
SELECT @ft_UNI_HEI_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_UNI_HEI_GG'
AND pfc.intRowStatus = 0

--NEW!!!
--ft_HEI_Leptospirosis_GG
SELECT @ft_HEI_Leptospirosis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Leptospirosis_GG'
AND pfc.intRowStatus = 0


--NEW!!! 22.06.2016
--@ft_HEI_Pneumonae_GG 
SELECT @ft_HEI_Pneumonae_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Pneumonae_GG'
AND pfc.intRowStatus = 0
	
--@ft_HEI_Acute_Viral_Hepatitis_A_GG 
SELECT @ft_HEI_Acute_Viral_Hepatitis_A_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Acute_Viral_Hepatitis_A_GG'
AND pfc.intRowStatus = 0	

--SELECT 
--	 @ft_HEI_Acute_viral_hepatitis_B_GG 
--	,@ft_HEI_AFP_Acute_poliomyelitis_GG 
--	,@ft_HEI_Anthrax_GG 
--	,@ft_HEI_Botulism_GG 
--	,@ft_HEI_Brucellosis_GG 
--	,@ft_HEI_CRS_GG 
--	,@ft_HEI_Congenital_Syphilis_GG 
--	,@ft_HEI_CCHF_GG 
--	,@ft_HEI_Diphtheria_GG 
--	,@ft_HEI_Gonococcal_Infection_GG 
--	,@ft_HEI_Bacterial_Meningitis_GG 
--	,@ft_HEI_HFRS_GG 
--	,@ft_HEI_Influenza_Virus_GG 
--	,@ft_HEI_Measles_GG 
--	,@ft_HEI_Mumps_GG 
--	,@ft_HEI_Pertussis_GG 
--	,@ft_HEI_Plague_GG 
--	,@ft_HEI_Post_vaccination_unusual_reactions_AND_complications_GG 
--	,@ft_HEI_Rabies_GG 
--	,@ft_HEI_Rubella_GG 
--	,@ft_HEI_Smallpox_GG 
--	,@ft_HEI_Syphilis_GG 
--	,@ft_HEI_Tetanus_GG 
--	,@ft_HEI_TBE_GG 
--	,@ft_HEI_Tularemia_GG 
--	,@ft_UNI_HEI_GG 
--	,@ft_HEI_Leptospirosis_GG  as ft_HEI_Leptospirosis_GG
--	,@ft_HEI_Pneumonae_GG as ft_HEI_Pneumonae_GG
--	,@ft_HEI_Acute_Viral_Hepatitis_A_GG as ft_HEI_Acute_Viral_Hepatitis_A_GG
	

---- Diagnosis groups
  
--DG_MotherTtetanusToxoidHistoryPriorToChildDisease
SELECT @DG_MotherTtetanusToxoidHistoryPriorToChildDisease = dg.idfsReportDiagnosisGroup
FROM dbo.trtReportDiagnosisGroup dg
WHERE dg.intRowStatus = 0 AND
   dg.strDiagnosisGroupAlias = 'DG_MotherTtetanusToxoidHistoryPriorToChildDisease'      
    

      
      
 
 INSERT INTO @ReportTable (
 	strName,
	LegacyCaseID,
	intRow,
 	strAge,
 	strGender,
 	strAddress,
 	strPlaceOfStudyWork,
 	datDiseaseOnsetDate,
 	datDateOfFirstPresentation,
 	strFacilityThatSentNotification,
 	strProvisionalDiagnosis,
 	datDateProvisionalDiagnosis,
 	datDateSpecificTreatment,
 	datDateSpecimenTaken,
 	strResultAndDate,
 	strVaccinationStatus,
 	datDateCaseInvestigation,
 	strFinalDS,
 	strFinalClassification,
 	datDateFinalDS,
 	strOutcome,
 	strCaseStatus,
 	strComments,
 	strCaseID
 ) 
 SELECT
   dbo.FN_GBL_ConcatFullName(h.strLastName, h.strFirstName, h.strSecondName) AS strName,
   hc.LegacyCaseID,
   ROW_NUMBER() OVER (PARTITION BY hc.LegacyCaseID ORDER BY hc.idfHumanCase),
   CAST(hc.intPatientAge AS VARCHAR(10)) + N' (' + ref_AgeType.[name] + N')' +
     CASE WHEN	(ISNULL(hc.intPatientAge, 100) < 15 AND ISNULL(hc.idfsHumanAgeType, 10042003) = 10042003 /*years*/)
 				or (ISNULL(hc.idfsHumanAgeType, 10042003) <> 10042003 /*years*/)
          THEN ISNULL(N', ' + CONVERT(VARCHAR(10), h.datDateofBirth , 104), N'')
          ELSE N'' 
     END AS strAge,
   ref_hg.[name] AS strGender,
   ISNULL(@CurrentResidence, N'') + 
 		report.FN_REP_CreateAddressString
 				(	gl_cr.Country,
 					gl_cr.Region,
 					gl_cr.Rayon,
 					gl_cr.PostalCode,
 					gl_cr.SettlementType,
 					gl_cr.Settlement,
 					gl_cr.Street,
 					gl_cr.House,
 					gl_cr.Building,
 					gl_cr.Appartment,
 					gl_cr.blnForeignAddress,
 					gl_cr.strForeignAddress
 				) +
     CASE WHEN report.FN_REP_CreateAddressString
 				(	gl_cr.Country,
 					gl_cr.Region,
 					gl_cr.Rayon,
 					gl_cr.PostalCode,
 					gl_cr.SettlementType,
 					gl_cr.Settlement,
 					gl_cr.Street,
 					gl_cr.House,
 					gl_cr.Building,
 					gl_cr.Appartment,
 					gl_cr.blnForeignAddress,
 					gl_cr.strForeignAddress
 				) <> 
 			report.FN_REP_CreateAddressString
 				(	gl_r.Country,
 					gl_r.Region,
 					gl_r.Rayon,
 					gl_r.PostalCode,
 					gl_r.SettlementType,
 					gl_r.Settlement,
 					gl_r.Street,
 					gl_r.House,
 					gl_r.Building,
 					gl_r.Appartment,
 					gl_r.blnForeignAddress,
 					gl_r.strForeignAddress
 				)
 				AND ISNULL(gl_r.Region, N'') <> N''
          THEN '; ' +  ISNULL(@PermanentResidence, N'') + 
 				report.FN_REP_CreateAddressString
 						(	gl_r.Country,
 							gl_r.Region,
 							gl_r.Rayon,
 							gl_r.PostalCode,
 							gl_r.SettlementType,
 							gl_r.Settlement,
 							gl_r.Street,
 							gl_r.House,
 							gl_r.Building,
 							gl_r.Appartment,
 							gl_r.blnForeignAddress,
 							gl_r.strForeignAddress
 						)
 		ELSE N''
     END AS strAddress,
   ISNULL(CASE WHEN h.strEmployerName = '' THEN NULL ELSE h.strEmployerName END + '; ', N'') + 
     CASE WHEN ISNULL(gl_em.Region, N'') <> N''
          THEN 		ISNULL(report.FN_REP_CreateAddressString
 					(	gl_em.Country,
 						gl_em.Region,
 						gl_em.Rayon,
 						gl_em.PostalCode,
 						gl_em.SettlementType,
 						gl_em.Settlement,
 						gl_em.Street,
 						gl_em.House,
 						gl_em.Building,
 						gl_em.Appartment,
 						gl_em.blnForeignAddress,
 						gl_em.strForeignAddress
 					), '')
 		ELSE N''
 	END AS   strPlaceOfStudyWork,
   hc.datOnSetDate AS datDiseaseOnsetDate,
   hc.datFirstSoughtCareDate AS datDateOfFirstPresentation,
   ISNULL(fi.name, '') + 
 	ISNULL(', ' + tp.strFamilyName, '') + ISNULL(' ' + tp.strFirstName, '') + ISNULL(' ' + tp.strSecondName, '') + 
     ISNULL(', ' + CONVERT(VARCHAR(10),hc.datNotificationDate, 104),'') AS strFacilityThatSentNotification,
   ref_diag.[name] AS strProvisionalDiagnosis,
   hc.datTentativeDiagnosisDate AS datDateProvisionalDiagnosis,
   CASE WHEN hc.idfsYNAntimicrobialTherapy = 10100001 THEN
         (SELECT TOP 1 a.datFirstAdministeredDate 
           FROM tlbAntimicrobialTherapy a
           WHERE a.idfHumanCase = hc.idfHumanCase 
 				AND a.intRowStatus = 0
           ORDER BY 1 ASC)
      ELSE NULL END AS datDateSpecificTreatment,
 	CAST((SELECT 	
   	          ref_st_collected.[name] +
   	          ISNULL(', ' + CONVERT(VARCHAR, m_collected.datFieldCollectionDate, 103), '') + '; '
 			FROM tlbMaterial m_collected
 			INNER JOIN	dbo.FN_GBL_ReferenceRepair(@LangID, 19000087 /*rftSpecimenType*/) ref_st_collected
   						ON ref_st_collected.idfsReference = m_collected.idfsSampleType
 			WHERE m_collected.idfHuman = h.idfHuman
 				AND m_collected.idfHumanCase = hc.idfHumanCase
 				AND m_collected.blnShowInLabList = 1
 					AND m_collected.intRowStatus = 0
 					
 			ORDER BY	m_collected.datFieldCollectionDate 	                
   	        FOR XML PATH('')		
     ) AS NVARCHAR(MAX))  AS datDateSpecimenTaken,
 	CAST((SELECT 	
   	          ref_st.[name] +
   	          ISNULL(', ' + ref_tt.[name], '') +
   	          ISNULL(', ' + ref_tr.[name], '') +
   	          ISNULL(', ' + CONVERT(VARCHAR, b.datValidatedDate, 103), '') + '; '
   	        FROM	(
 				tlbTesting t
   	            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000097 /*rftTestName*/)  AS ref_tt
   	            ON ref_tt.idfsReference = t.idfsTestName
 					)
 			INNER JOIN	(
 				tlbMaterial m
   	                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000087 /*rftSpecimenType*/) ref_st
   	                ON ref_st.idfsReference = m.idfsSampleType
 						)
   	            ON m.idfMaterial = t.idfMaterial AND
   	               m.intRowStatus = 0
   	            LEFT OUTER JOIN tlbBatchTest b
   	            ON t.idfBatchTest = b.idfBatchTest
 					AND b.intRowStatus = 0
   	            
   	            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000096 /*rftTestResult*/)  AS ref_tr
   	            ON ref_tr.idfsReference = t.idfsTestResult
   	         WHERE t.intRowStatus = 0 AND
   	                m.idfHuman = h.idfHuman
   	        ORDER BY	b.datValidatedDate
   	        FOR XML PATH('')		
     ) AS NVARCHAR(MAX))  AS strResultANDDate,
   --------------------------------------------------------------------------------------------------------------------
   CASE 
 --------------------
     /*Number of immunizations received + Date of last vaccination*/ 
     WHEN obs.idfsFormTemplate in (@ft_HEI_Acute_viral_hepatitis_B_GG) 
         THEN ISNULL(ref_ap1.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103) 
 --------------------    
     /*Are patient is immunization records available*/    
     WHEN obs.idfsFormTemplate in (@ft_HEI_AFP_Acute_poliomyelitis_GG) 
         /*
			Show the following string "{1} [- {2} - {3}; ][[{4}: {5} - {6}; ]]{7}", 
			WHERE {1} is the value of the parameter with tooltip "Are patient's immunization records available";
			{2} is the tooltip of the first not blank parameter with a value different 
				from "Unknown", which is taken from the following list 
				in specified order: "OPV-5", "OPV-4", "OPV-3", "OPV-2", and "OPV-1";
			{3} is the value of the parameter SELECTed for {2};
			{4} is the name of the section with full 
				path “Immunization history>Additional OPV doses received during mass campaigns”;
			{5} is the tooltip of the first not blank parameter with a value different 
				from "Unknown", which is taken from the following list in specified order: 
				"Third additional OPV dose", "Second additional OPV dose", "First additional OPV dose";
			{6} is the value of the parameter SELECTed for {5};
			{7} is the value of the parameter with tooltip "Date of last OPV dose received";
			and the parts [...] and [[...]] are optional and depend on the following conditions:
			- the part [...] shall be displayed if {1} is equal to "Yes"
			- the part [[...]] shall be displayed if {6} is not blank;
			the square brackets that indicate the beginning and end of the optional parts 
			shall not be displayed in the report
		*/
         THEN 
             /*{1} -*/
              ISNULL(ref_ap2.name + '- ', '')
             /*{2} - {3};*/  
              +
              CASE WHEN ref_ap2.idfsReference = 10100001 /*yes*/
                   THEN 
                     CASE WHEN ref_ap26.name IS NOT NULL AND ref_ap26.idfsReference <> 995360000000 /*Unknown*/ 
                          THEN (SELECT [name] 
                                 FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                 WHERE idfsReference = @OPV5field -- /*"OPV-5" field*/
                                ) + '-' + ref_ap26.name + '; '
                          ELSE
                          CASE WHEN ref_ap25.name IS NOT NULL AND ref_ap25.idfsReference <> 995360000000 /*Unknown*/ 
                              THEN (SELECT [name] 
                                     FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                     WHERE idfsReference = @OPV4field -- /*"OPV-4" field*/
                                    ) + '-' + ref_ap25.name + '; '
                              ELSE
                              CASE WHEN ref_ap24.name IS NOT NULL AND ref_ap24.idfsReference <> 995360000000 /*Unknown*/ 
                                  THEN (SELECT [name] 
                                         FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                         WHERE idfsReference = @OPV3field -- /*"OPV-3" field*/
                                        ) + '-' + ref_ap24.name + '; '
                                  ELSE
                                  CASE WHEN ref_ap23.name IS NOT NULL AND ref_ap23.idfsReference <> 995360000000 /*Unknown*/ 
                                      THEN (SELECT [name] 
                                             FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                             WHERE idfsReference = @OPV2field -- /*"OPV-2" field*/
                                            ) + '-' + ref_ap23.name + '; '
                                      ELSE
                                      CASE WHEN ref_ap22.name IS NOT NULL AND ref_ap22.idfsReference <> 995360000000 /*Unknown*/ 
                                          THEN (SELECT [name] 
                                                 FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                                 WHERE idfsReference = @OPV1field -- /*"OPV-1" field*/
                                                ) + '-' + ref_ap22.name + '; '
                                          ELSE ''
                                      END /*OPV-1*/                                      
                                  END /*OPV-2*/                              
                              END /*OPV-3*/                              
                          END /*OPV-4*/   
                      END /*OPV-5*/          
                   ELSE ''
              END --CASE WHEN ref_ap2.idfsReference = 10100001 /*yes*/    
             /* {4} : */  
              +
              CASE WHEN ref_ap29.name /*"Third" field*/ IS NOT NULL OR 
                        ref_ap28.name /*"Second" field*/ IS NOT NULL OR
                        ref_ap27.name /*"First" field*/ IS NOT NULL
                   THEN (SELECT snt.strTextString FROM trtStringNameTranslation snt
                            WHERE snt.idfsBaseReference = @Section_AdditionalOPVdoses /*section name - Additional OPV doses received during mass campaigns*/
                                   AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID) 
                                   AND snt.intRowStatus = 0                
                         ) + ':' +
                             /*{5} - {6}; */  
                             CASE WHEN ref_ap29.name IS NOT NULL AND ref_ap29.idfsReference <> 995360000000 /*Unknown*/ 
                                  THEN (SELECT [name] 
                                         FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                         WHERE idfsReference = @Thirdfield -- /*"Third" field*/
                                        ) + '-' + ref_ap29.name
                                  ELSE
                                  CASE WHEN ref_ap28.name IS NOT NULL AND ref_ap28.idfsReference <> 995360000000 /*Unknown*/ 
                                      THEN (SELECT [name] 
                                             FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                             WHERE idfsReference = @Secondfield -- /*"Second" field*/
                                            ) + '-' + ref_ap28.name
                                      ELSE
                                      CASE WHEN ref_ap27.name IS NOT NULL AND ref_ap27.idfsReference <> 995360000000 /*Unknown*/ 
                                          THEN (SELECT [name] 
                                                 FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                                 WHERE idfsReference = @Firstfield -- /*"First" field*/
                                                ) + '-' + ref_ap27.name
                                          ELSE ''
                                      END /*First*/               
                                  END /*Second*/
                              END /*Third*/  
                              /*7)*/
                              + '; '                       
                   ELSE ''
              END  
             /* {7} */  
              +    
             CONVERT(VARCHAR(10), CAST(ap30.varValue AS DATETIME), 103) 
 
 --------------------    
     /*Was specific vaccination administered? + Date of last vaccination*/
     WHEN  obs.idfsFormTemplate IN  (
     									@ft_HEI_Anthrax_GG,
     									@ft_HEI_Botulism_GG,
     									@ft_HEI_Brucellosis_GG,
     									@ft_HEI_Congenital_Syphilis_GG,
     									@ft_HEI_CCHF_GG,    
     									@ft_HEI_Gonococcal_Infection_GG, 
     									@ft_HEI_HFRS_GG,
     									@ft_HEI_Plague_GG ,
     									@ft_HEI_Smallpox_GG,
     									@ft_HEI_Syphilis_GG,
     									@ft_HEI_TBE_GG,
     									@ft_HEI_Tularemia_GG   
     
									)
         THEN ISNULL(ref_ap3.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap18_2.varValue AS DATETIME), 103) 
 --------------------    
     /*Vaccinated against rubella
		 name of section "Maternal history" then ":" then name of "Vaccinated against rubella" 
		 then "-" and value in "Vaccinated against rubella".*/    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_CRS_GG         
									)
         THEN (SELECT snt.strTextString FROM trtStringNameTranslation snt
                 WHERE snt.idfsBaseReference = @Section_Maternalhistory /*name of section "Maternal history"*/
                       AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID) 
                       AND snt.intRowStatus = 0                
               ) + ':' + 
               (SELECT [name] 
                 FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                 WHERE idfsReference = @VaccinatedAgainstRubella
                ) + '-' +  ref_ap4.name
 --------------------    
     /* Number of received doses (any vaccine with diphtheria component) + Date of last vaccination
        1) value in "Number of received doses (any vaccine with diphtheria component)"; 
        2) if value in 1) is not blank then "," otherwise nothing; 
        3) value in "Immunization history: Date of last vaccination". 
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Diphtheria_GG         
									)
         
         THEN ISNULL(ref_ap5.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103) 
 --------------------    
     /*Hib vaccination status + If "Yes", number of vaccines received + Date of last vaccination
      1) value in "Hib vaccination status"; 
      2) if value in 1) is not blank then "," otherwise nothing;
      3) value in "Number of Hib vaccines received"; 
      4) if value in 3) is not blank then "," otherwise nothing; 
      5) value in "Immunization history: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Bacterial_Meningitis_GG         
									)
         THEN ISNULL(ref_ap8.name + ', ','') + 
              ISNULL(ref_ap20.name + ', ','') + 
              CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103) 
 --------------------    
     /*Number of received doses (any vaccine with measles component) + Date of last vaccination
     1) value in "Number of received doses (any vaccine with measles component)"; 
     2) if value in 1) is not blank then "," otherwise nothing; 
     3) value in "Immunization history: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Measles_GG         
									)
         THEN ISNULL(ref_ap7.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103) 
--------------------    
     /*Number of received doses (any vaccine with mumps component) + Date of last vaccination
     1) value in "Number of received doses (any vaccine with mumps component)"; 
     2) if value in 1) is not blank then "," otherwise nothing; 
     3) value in "Immunization history: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Mumps_GG         
									)
         THEN ISNULL(ref_ap9.name+ ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103)  
--------------------    
     /*Number of received doses (any vaccine with pertussis component) + Date of last vaccination
     1) value in "Number of received doses (any vaccine with pertussis component)";
     2) if value in 1) is not blank then "," otherwise nothing; 
     3) value in "Immunization history: Date of last vaccination".
     */    
     WHEN  obs.idfsFormTemplate IN  (
     									@ft_HEI_Pertussis_GG         
									)
         THEN ISNULL(ref_ap11.name+ ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103)
 --------------------    
     /*Vaccine type that caused post vaccination complications: Name of vaccine
     Show all distinct values from the column of the table section, 
     which is linked to the parameter tooltip "Vaccine type that caused post vaccination complications: Name of vaccine", 
     combined in the string of the following format: "{1};{2};{3}", WHERE {n} is a unique value from the specified column.
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Post_vaccination_unusual_reactions_and_complications_GG         
									)
         THEN 
			cast(	(	SELECT distinct
							ISNULL(ref_ap34.name + '; ', '') 
     	 				FROM	tlbObservation obs34
							 INNER JOIN tlbActivityParameters ap34
							 ON ap34.idfObservation = obs34.idfObservation AND
								ap34.idfsParameter = @NameVaccine /* Vaccine type that caused post vaccination complications: Name of vaccine*/ AND 
								ap34.intRowStatus = 0   
				 
							 LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_VaccineTypes /*Vaccine types*/)  ref_ap34
							 ON ref_ap34.idfsReference = ap34.varValue
			     	 	WHERE	obs34.idfObservation = hc.idfEpiObservation AND
								obs34.intRowStatus = 0  
					FOR	XML PATH('')
					) AS NVARCHAR(MAX)
				)         	
 --------------------    
	-- UPDATED
     /*Show combination of following: 
     *	1) value in "Rabies vaccine given?"; 
     *	2) if value in 1) is not blank then ";" otherwise nothing; 
     *	3) value from "Rabies vaccine dose" field that corresponds the latest value in "Rabies vaccination date" field of table 
     *	section "Rabies Immunization Details" followed by ","; 
     *	4) respective value in "Rabies vaccination date" field.
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Rabies_GG         
									)
         THEN ISNULL(ref_ap6.name+ '; ','') + ISNULL(RabiesVacination.RabiesVaccinationDate + ', ', '') + ISNULL(RabiesVacination.RabiesVaccineDose, '')
---------------------   
     /*Number of received doses (any vaccine with rubella component) + Date of last vaccination
     1) value in "Number of received doses (any vaccine with rubella component)"; 
     2) if value in 1) is not blank then "," otherwise nothing; 
     3) value in "Immunization history: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Rubella_GG         
									)
         THEN ISNULL(ref_ap12.name+ ', ','')  + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103)       
                 
 --------------------    
     /*Mother's tetanus toxoid history prior to child's disease (known doses only) + Interval since last tetanus toxoid dose (years)
     For cases, WHERE "Final Diagnosis" = "Neonatal Tetanus": show combination of following: 
     1) value in "Mother's tetanus toxoid history prior to child's disease (known doses only)"; 
     2) if value in 1) is not blank then ";" otherwise nothing; 
     3) value in "Interval since last tetanus toxoid dose (years) (mother's)"
     */    
     when	obs.idfsFormTemplate in		(
     										@ft_HEI_Tetanus_GG         
										) 
			AND				
			COALESCE(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) IN
			(SELECT idfsDiagnosis 
				FROM dbo.trtDiagnosisToGroupForReportType 
				WHERE idfsCustomReportType = @idfsCustomReportType
				AND idfsReportDiagnosisGroup = @DG_MotherTtetanusToxoidHistoryPriorToChildDisease --"Final Diagnosis" = "Neonatal Tetanus"
			)
         THEN ISNULL(ref_ap10.name + '; ', '') + CAST(ap21.varValue AS NVARCHAR(300))
 --------------------    
     /*Include doses of ALL tetanus-containing toxoids. Exclude doses received after this particular injury + 
      Interval since last tetanus toxoid dose (years)
     For cases, WHERE "Final Diagnosis" does not equal to "Neonatal Tetanus": show combination of following: 
     1) value in "Include doses of ALL tetanus-containing toxoids. Exclude doses received after this particular injury"; 
     2) if value in 1) is not blank then "," otherwise nothing 
     3) value in "Interval since last tetanus toxoid dose (years)".
     */    
     WHEN obs.idfsFormTemplate in		(
     										@ft_HEI_Tetanus_GG         
										) 
			AND				
			COALESCE(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) not IN
			(SELECT idfsDiagnosis 
				FROM dbo.trtDiagnosisToGroupForReportType 
				WHERE idfsCustomReportType = @idfsCustomReportType
				AND idfsReportDiagnosisGroup = @DG_MotherTtetanusToxoidHistoryPriorToChildDisease --"Final Diagnosis" = "Neonatal Tetanus"
			)
         THEN ISNULL(ref_ap13.name  + '; ','') + CAST(ap21.varValue AS NVARCHAR(300))
         
 --------------------    
     /*Revaccination + Date of revaccination
     1)  if the value in "Revaccination" is "Yes" show the combination of the following:
     a) the value in "Revaccination"
     b) if the value in 1a) is not blank then "," otherwise nothing
     c) the value in "Date of revaccination" 
     */    
     WHEN  obs.idfsFormTemplate in		(
     										@ft_UNI_HEI_GG         
										)
         AND ref_ap15.idfsReference = 10100001
         THEN ISNULL(ref_ap15.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap17.varValue AS DATETIME), 103)
 
 --------------------    
     /*Was vaccination administered? + Date of vaccination
     if the value in "Revaccination" is empty, or equals to "No", or "Unknown" show the combination of the following:
     a) the value in "Was vaccination administered?"
     b) if the value in 2a) is not blank then "," otherwise nothing
     c) the value in "Date of vaccination"
     */    
     WHEN obs.idfsFormTemplate in		(
     										@ft_UNI_HEI_GG         
										)
         AND ref_ap15.idfsReference <> 10100001
         THEN ISNULL(ref_ap14.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap16.varValue AS DATETIME), 103)        
         
  
 
  --------------------    
  --NEW!!!
     /*Show combination of following: 
     *			1) value in "Is patient vaccinated against leptospirosis?"; 
     *			2) if value in 1) is not blank then "," otherwise nothing; 
     *			3) value in "Date of vaccination of patient against leptospirosis".
     */    
     WHEN obs.idfsFormTemplate IN		(
     										@ft_HEI_Leptospirosis_GG         
										)
         THEN ISNULL(ref_ap31.name,'') + CASE WHEN ref_ap31.name IS NOT NULL AND ap32.varValue IS NOT NULL THEN ',' ELSE '' END +   ISNULL( CONVERT(VARCHAR(10),CAST(ap32.varValue AS DATETIME), 103), '')      
         
  
 
  --------------------      
  --NEW!!!
     /*Show combination of following: 
     * 1) value in "HEI S. pneumonae caused infection GG: S. pneumonae vaccination status"; 
     * 2) if value in 1) is not blank then "," otherwise nothing; 
     * 3) value in "HEI S. pneumonae caused infection GG: Number of received doses of S. pneumonae vaccine"; 
     * 4) if value in 3) is not blank then "," otherwise nothing; 
     * 5) value in "HEI S. pneumonae caused infection GG: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate in		(
     										@ft_HEI_Pneumonae_GG         
										)
         THEN ISNULL(ref_ap37.name, '') + ISNULL(', ' + ref_ap38.name, '') + ISNULL( ', ' + CONVERT(VARCHAR(10),CAST(ap39.varValue AS DATETIME), 103), '')      

  --------------------    
  --NEW!!!
     /*Show combination of following: 
     * 1) value in "HEI Acute Viral Hepatitis A GG: Number of received doses of Hepatitis A vaccine"; 
     * 2) if value in 1) is not blank then "," otherwise nothing; 
     * 3) value in "HEI Acute Viral Hepatitis A GG: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate in		(
     										@ft_HEI_Acute_Viral_Hepatitis_A_GG         
										)
         THEN ISNULL(ref_ap40.name,'') + CASE WHEN ref_ap40.name IS NOT NULL AND ap41.varValue IS NOT NULL THEN ',' ELSE '' END +   ISNULL( CONVERT(VARCHAR(10),CAST(ap41.varValue AS DATETIME), 103), '')      
         

  --------------------      
  
  
     ELSE NULL
   END AS strVaccinationStatus,
  
 ----------------------------------------------------------------------------------------------
   hc.datInvestigationStartDate AS datDateCaseInvestigation,
   ISNULL(ref_diag_f.[name], ref_diag.[name]) AS strFinalDS,
   ISNULL(ref_final_cs.[name], ref_init_cs.[name]) AS strFinalClassification,
   CASE WHEN hc.datFinalDiagnosisDate IS NULL AND ref_diag_f.idfsReference IS NULL 
         THEN hc.datTentativeDiagnosisDate
         ELSE hc.datFinalDiagnosisDate 
        END AS datDateFinalDS,
   ref_outcome.[name] +  CASE WHEN hc.idfsOutcome = 10760000000 /*outRecovered*/ 
                                 THEN ISNULL(', ' + CONVERT(VARCHAR(10),hc.datDischargeDate, 104), '')
                              WHEN hc.idfsOutcome = 10770000000 /*outDied*/ 
                                 THEN ISNULL(', ' + CONVERT(VARCHAR(10),h.datDateOfDeath, 104), '')
                              ELSE ''
                          END AS strOutcome      ,
   ISNULL(@OutbreakID, N'') + o.strOutbreakID  AS  strCaseStatus,
 	ISNULL(CASE WHEN hc.strNote = '' THEN NULL ELSE hc.strNote END + N'; ', N'') + 
 		ISNULL(CASE WHEN hc.strClinicalNotes = '' THEN NULL ELSE hc.strClinicalNotes END + N'; ', N'') + 
 		ISNULL(CASE WHEN hc.strSummaryNotes = '' THEN NULL ELSE hc.strSummaryNotes END + N';', N'') AS strComments,
 ----------------------------------------------------------------------------------------------
          
   hc.strCaseID
   
 FROM tlbHumanCase hc
		INNER JOIN 
		(tlbHuman h
		   LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043/*rftHumanGender*/) ref_hg
		   ON ref_hg.idfsReference = h.idfsHumanGender
		    
		   LEFT JOIN		report.FN_GBL_AdressAsRow(@LangID) gl_cr
					on			gl_cr.idfGeoLocation = h.idfCurrentResidenceAddress
		    
		   LEFT JOIN		report.FN_GBL_AdressAsRow(@LangID) gl_r
					on			gl_r.idfGeoLocation = h.idfRegistrationAddress
		    
		   LEFT JOIN		report.FN_GBL_AdressAsRow(@LangID) gl_em
					on			gl_em.idfGeoLocation = h.idfEmployerAddress
		)
		ON hc.idfHuman = h.idfHuman AND
		  h.intRowStatus = 0
             
             
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042/*rftHumanAgeType*/) ref_AgeType
         ON ref_AgeType.idfsReference = hc.idfsHumanAgeType
         
         INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019/*rftDiagnosis*/) ref_diag
         ON ref_diag.idfsReference = hc.idfsTentativeDiagnosis
         
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019/*rftDiagnosis*/) ref_diag_f
         ON ref_diag_f.idfsReference = hc.idfsFinalDiagnosis
         
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011/*rftCaseStatus*/) ref_final_cs
         ON ref_final_cs.idfsReference = hc.idfsFinalCaseStatus
         
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011/*rftCaseStatus*/) ref_init_cs
         ON ref_init_cs.idfsReference = hc.idfsInitialCaseStatus
 
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000064 /*rftOutcome*/) ref_outcome
         ON ref_outcome.idfsReference = hc.idfsOutcome
         
         LEFT OUTER JOIN tlbObservation obs
         ON obs.idfObservation = hc.idfEpiObservation AND
            obs.intRowStatus = 0
                     
         LEFT OUTER JOIN 
         (tlbObservation obs1
             INNER JOIN tlbActivityParameters ap1
             ON ap1.idfObservation = obs1.idfObservation AND
                ap1.idfsParameter = @NumberOfImmunizationsReceived --  /*Number of immunizations received*/ 
                AND ap1.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap1
             ON ref_ap1.idfsReference = ap1.varValue 
         )
         ON obs1.idfObservation = hc.idfEpiObservation AND
            obs1.intRowStatus = 0
            
         LEFT OUTER JOIN 
         (tlbObservation obs2
             INNER JOIN tlbActivityParameters ap2
             ON ap2.idfObservation = obs2.idfObservation AND
                ap2.idfsParameter =  @ArePatientsImmunizationRecordsAvailable/* Are patient�s immunization records available*/ AND 
                ap2.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap2
             ON ref_ap2.idfsReference = ap2.varValue 
         )
         ON obs2.idfObservation = hc.idfEpiObservation AND
            obs2.intRowStatus = 0
      
         LEFT OUTER JOIN 
         (tlbObservation obs3
             INNER JOIN tlbActivityParameters ap3
             ON ap3.idfObservation = obs3.idfObservation AND
                ap3.idfsParameter =  @WasSpecificVaccinationAdministered/* Was specific vaccination administered?*/ AND 
                ap3.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap3
             ON ref_ap3.idfsReference = ap3.varValue 
         )
         ON obs3.idfObservation = hc.idfEpiObservation AND
            obs3.intRowStatus = 0  
               
         LEFT OUTER JOIN 
         (tlbObservation obs4
             INNER JOIN tlbActivityParameters ap4
             ON ap4.idfObservation = obs4.idfObservation AND
                ap4.idfsParameter =  @VaccinatedAgainstRubella/* Vaccinated against rubella*/ AND 
                ap4.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap4
             ON ref_ap4.idfsReference = ap4.varValue 
         )
         ON obs4.idfObservation = hc.idfEpiObservation AND
            obs4.intRowStatus = 0     
            
         LEFT OUTER JOIN 
         (tlbObservation obs5
             INNER JOIN tlbActivityParameters ap5
             ON ap5.idfObservation = obs5.idfObservation AND
                ap5.idfsParameter =  @NumberOfReceivedDoses_WithDiphtheriaComponent/* Number of received doses (any vaccine with diphtheria component)*/ AND 
                ap5.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap5
             ON ref_ap5.idfsReference = ap5.varValue 
         )
         ON obs5.idfObservation = hc.idfEpiObservation AND
            obs5.intRowStatus = 0             
            
         LEFT OUTER JOIN 
         (tlbObservation obs6
             INNER JOIN tlbActivityParameters ap6
             ON ap6.idfObservation = obs6.idfObservation AND
                ap6.idfsParameter =  @RabiesVaccineGiven/* Rabies vaccine given?*/ AND 
                ap6.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap6
             ON ref_ap6.idfsReference = ap6.varValue 
         )
         ON obs6.idfObservation = hc.idfEpiObservation AND
            obs6.intRowStatus = 0             
            
            
         LEFT OUTER JOIN 
         (tlbObservation obs7
             INNER JOIN tlbActivityParameters ap7
             ON ap7.idfObservation = obs7.idfObservation AND
                ap7.idfsParameter =  @NumberOfReceivedDoses_WithMeaslesComponent/* Number of received doses (any vaccine with measles component)*/ AND 
                ap7.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization3 /*Immunization 3+*/)  ref_ap7
             ON ref_ap7.idfsReference = ap7.varValue 
         )
         ON obs7.idfObservation = hc.idfEpiObservation AND
            obs7.intRowStatus = 0             
            
            
         LEFT OUTER JOIN 
         (tlbObservation obs8
             INNER JOIN tlbActivityParameters ap8
             ON ap8.idfObservation = obs8.idfObservation AND
                ap8.idfsParameter =  @HibVaccinationStatus/* Hib vaccination status*/ AND 
                ap8.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap8
             ON ref_ap8.idfsReference = ap8.varValue 
         )
         ON obs8.idfObservation = hc.idfEpiObservation AND
            obs8.intRowStatus = 0                 
            
         LEFT OUTER JOIN 
         (tlbObservation obs9
             INNER JOIN tlbActivityParameters ap9
             ON ap9.idfObservation = obs9.idfObservation AND
                ap9.idfsParameter =  @NumberOfReceivedDoses_WithMumpsComponent/* Number of received doses (any vaccine with mumps component)*/ AND 
                ap9.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization3 /*Immunization 3+*/)  ref_ap9
             ON ref_ap9.idfsReference = ap9.varValue 
         )
         ON obs9.idfObservation = hc.idfEpiObservation AND
            obs9.intRowStatus = 0      
                    
         LEFT OUTER JOIN 
         (tlbObservation obs10
             INNER JOIN tlbActivityParameters ap10
             ON ap10.idfObservation = obs10.idfObservation AND
                ap10.idfsParameter =  @MothersTetanusToxoidHistoryPriorToChildsDisease/* Mother's tetanus toxoid history prior to child's disease (known doses only)*/ AND 
                ap10.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap10
             ON ref_ap10.idfsReference = ap10.varValue 
         )
         ON obs10.idfObservation = hc.idfEpiObservation AND
            obs10.intRowStatus = 0      
               
         LEFT OUTER JOIN 
         (tlbObservation obs11
             INNER JOIN tlbActivityParameters ap11
             ON ap11.idfObservation = obs11.idfObservation AND
                ap11.idfsParameter =  @NumberOfReceivedDoses_WithPertussisComponent/* Number of received doses (any vaccine with pertussis component)*/ AND 
                ap11.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap11
             ON ref_ap11.idfsReference = ap11.varValue 
         )
         ON obs11.idfObservation = hc.idfEpiObservation AND
            obs11.intRowStatus = 0      
                             
         LEFT OUTER JOIN 
         (tlbObservation obs12
             INNER JOIN tlbActivityParameters ap12
             ON ap12.idfObservation = obs12.idfObservation AND
                ap12.idfsParameter =  @NumberOfReceivedDoses_WithRubellaComponent/* Number of received doses (any vaccine with rubella component)*/ AND 
                ap12.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization3 /*Immunization 3+*/)  ref_ap12
             ON ref_ap12.idfsReference = ap12.varValue 
         )
         ON obs12.idfObservation = hc.idfEpiObservation AND
            obs12.intRowStatus = 0      
                
         LEFT OUTER JOIN 
         (tlbObservation obs13
             INNER JOIN tlbActivityParameters ap13
             ON ap13.idfObservation = obs13.idfObservation AND
                ap13.idfsParameter = @IncludeDosesOfALLTetanusContainingToxoids /* Include doses of ALL tetanus-containing toxoids. Exclude doses received after this particular injury*/ AND 
                ap13.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap13
             ON ref_ap13.idfsReference = ap13.varValue 
         )
         ON obs13.idfObservation = hc.idfEpiObservation AND
            obs13.intRowStatus = 0                 
                
         LEFT OUTER JOIN 
         (tlbObservation obs14
             INNER JOIN tlbActivityParameters ap14
             ON ap14.idfObservation = obs14.idfObservation AND
                ap14.idfsParameter =  @WasVaccinationAdministered /* Was vaccination administered?*/ AND 
                ap14.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap14
             ON ref_ap14.idfsReference = ap14.varValue 
         )
         ON obs14.idfObservation = hc.idfEpiObservation AND
            obs14.intRowStatus = 0                      
                      
         LEFT OUTER JOIN 
         (tlbObservation obs15
             INNER JOIN tlbActivityParameters ap15
             ON ap15.idfObservation = obs15.idfObservation AND
                ap15.idfsParameter = @Revaccination /*Revaccination*/ AND 
                ap15.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap15
             ON ref_ap15.idfsReference = ap15.varValue 
         )
         ON obs15.idfObservation = hc.idfEpiObservation AND
            obs15.intRowStatus = 0 
         LEFT OUTER JOIN 
         (tlbObservation obs16
             INNER JOIN tlbActivityParameters ap16
             ON ap16.idfObservation = obs16.idfObservation AND
                ap16.idfsParameter = @DateOfVaccination /* Date of vaccination*/ AND 
                ap16.intRowStatus = 0
         )
         ON obs16.idfObservation = hc.idfEpiObservation AND
            obs16.intRowStatus = 0            
            
                         
         LEFT OUTER JOIN 
         (tlbObservation obs17
             INNER JOIN tlbActivityParameters ap17
             ON ap17.idfObservation = obs17.idfObservation AND
                ap17.idfsParameter = @DateOfRevaccination /* Date of revaccination*/ AND 
                ap17.intRowStatus = 0
         )
         ON obs17.idfObservation = hc.idfEpiObservation AND
            obs17.intRowStatus = 0     
         LEFT OUTER JOIN 
         (tlbObservation obs18
             INNER JOIN tlbActivityParameters ap18
             ON ap18.idfObservation = obs18.idfObservation AND
                ap18.idfsParameter = @ImmunizationHistory_DateOfLastVaccination /* Date of last vaccination*/ AND 
                ap18.intRowStatus = 0
         )
         ON obs18.idfObservation = hc.idfEpiObservation AND
            obs18.intRowStatus = 0   
                      
         LEFT OUTER JOIN 
         (tlbObservation obs18_2
             INNER JOIN tlbActivityParameters ap18_2
             ON ap18_2.idfObservation = obs18_2.idfObservation AND
                ap18_2.idfsParameter =  @SpecificVaccination_DateOfLastVaccination /* Date of last vaccination*/ AND 
                ap18_2.intRowStatus = 0
         )
         ON obs18_2.idfObservation = hc.idfEpiObservation AND
            obs18_2.intRowStatus = 0             
 
         --LEFT OUTER JOIN 
         --(tlbObservation obs19
         --    INNER JOIN tlbActivityParameters ap19
         --    ON ap19.idfObservation = obs19.idfObservation AND
         --       ap19.idfsParameter = @IfYes_IndicateDatesOfDoses /* Dates and doses of rabies vaccine given*/ AND 
         --       ap19.intRowStatus = 0
         --)
         --ON obs19.idfObservation = hc.idfEpiObservation AND
         --   obs19.intRowStatus = 0     
         
         OUTER APPLY(
         		SELECT TOP 1
         					convert(VARCHAR(10),cast(ap35.varValue as DATETIME), 104) as RabiesVaccinationDate,
         					cast(ap36.varValue as NVARCHAR(20)) as RabiesVaccineDose
     	 				FROM	tlbObservation obs35
							 INNER JOIN tlbActivityParameters ap35
							 on ap35.idfObservation = obs35.idfObservation AND
								ap35.idfsParameter = @RabiesVaccinationDate /* Rabies vaccination date*/ AND 
								ap35.intRowStatus = 0   
								AND (cast(SQL_VARIANT_PROPERTY(ap35.varValue, 'BaseType') as NVARCHAR) like N'%date%' or
									(
										cast(SQL_VARIANT_PROPERTY(ap35.varValue, 'BaseType') as NVARCHAR) like N'%char%' AND ISDATE(cast(ap35.varValue as NVARCHAR)) = 1 )	)
							 left  JOIN tlbActivityParameters ap36
							 on ap36.idfObservation = obs35.idfObservation AND
								ap36.idfsParameter = @RabiesVaccineDose /* Rabies vaccination dose*/ AND 
								ap36.intRowStatus = 0   
								AND ap35.idfRow = ap36.idfRow
			     	 	WHERE	obs35.idfObservation = hc.idfEpiObservation AND
								obs35.intRowStatus = 0  
         		ORDER BY cast(ap35.varValue as DATETIME) desc
         ) as RabiesVacination
 
         LEFT OUTER JOIN 
         (tlbObservation obs20
             INNER JOIN tlbActivityParameters ap20
             ON ap20.idfObservation = obs20.idfObservation AND
                ap20.idfsParameter = @IfYes_NumberOfVaccinesReceived /* Number of vaccines received*/ AND 
                ap20.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap20
             ON ref_ap20.idfsReference = ap20.varValue 
         )
         ON obs20.idfObservation = hc.idfEpiObservation AND
            obs20.intRowStatus = 0 
 
         LEFT OUTER JOIN 
         (tlbObservation obs21
             INNER JOIN tlbActivityParameters ap21
             ON ap21.idfObservation = obs21.idfObservation AND
                ap21.idfsParameter = @IntervalSinceLastTetanusToxoidDose /* Interval since last tetanus toxoid dose (years)*/ AND 
                ap21.intRowStatus = 0     
         )
         ON obs21.idfObservation = hc.idfEpiObservation AND
            obs21.intRowStatus = 0  
 
         --LEFT OUTER JOIN 
         --(tlbObservation obs21_2
         --    INNER JOIN tlbActivityParameters ap21_2
         --    ON ap21_2.idfObservation = obs21_2.idfObservation AND
         --       ap21_2.idfsParameter = @IntervalSinceLastTetanusToxoidDose1 /* Interval since last tetanus toxoid dose (years)*/ AND 
         --       ap21_2.intRowStatus = 0     
         --)
         --ON obs21_2.idfObservation = hc.idfEpiObservation AND
         --   obs21_2.intRowStatus = 0  
 
         LEFT OUTER JOIN 
         (tlbObservation obs22
             INNER JOIN tlbActivityParameters ap22
             ON ap22.idfObservation = obs22.idfObservation AND
                ap22.idfsParameter = @OPV1field   /* OPV-1*/ 
                AND ap22.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap22
             ON ref_ap22.idfsReference = ap22.varValue 
         )
         ON obs22.idfObservation = hc.idfEpiObservation AND
            obs22.intRowStatus = 0 
 
         LEFT OUTER JOIN 
         (tlbObservation obs23
             INNER JOIN tlbActivityParameters ap23
             ON ap23.idfObservation = obs23.idfObservation AND
                ap23.idfsParameter = @OPV2field  /* OPV-2*/ 
                AND ap23.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap23
             ON ref_ap23.idfsReference = ap23.varValue 
         )
         ON obs23.idfObservation = hc.idfEpiObservation AND
            obs23.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs24
             INNER JOIN tlbActivityParameters ap24
             ON ap24.idfObservation = obs24.idfObservation AND
                ap24.idfsParameter = @OPV3field  /* OPV-3*/ 
                AND ap24.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap24
             ON ref_ap24.idfsReference = ap24.varValue 
         )
         ON obs24.idfObservation = hc.idfEpiObservation AND
            obs24.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs25
             INNER JOIN tlbActivityParameters ap25
             ON ap25.idfObservation = obs25.idfObservation AND
                ap25.idfsParameter = @OPV4field  /* OPV-4*/  
                AND ap25.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap25
             ON ref_ap25.idfsReference = ap25.varValue 
         )
         ON obs25.idfObservation = hc.idfEpiObservation AND
            obs25.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs26
             INNER JOIN tlbActivityParameters ap26
             ON ap26.idfObservation = obs26.idfObservation AND
                ap26.idfsParameter = @OPV5field  /* OPV-5*/  
                AND ap26.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap26
             ON ref_ap26.idfsReference = ap26.varValue 
         )
         ON obs26.idfObservation = hc.idfEpiObservation AND
            obs26.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs27
             INNER JOIN tlbActivityParameters ap27
             ON ap27.idfObservation = obs27.idfObservation AND
                ap27.idfsParameter = @Firstfield  /* First*/ 
                AND ap27.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap27
             ON ref_ap27.idfsReference = ap27.varValue 
         )
         ON obs27.idfObservation = hc.idfEpiObservation AND
            obs27.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs28
             INNER JOIN tlbActivityParameters ap28
             ON ap28.idfObservation = obs28.idfObservation AND
                ap28.idfsParameter = @Secondfield  /* Second*/ 
                AND ap28.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap28
             ON ref_ap28.idfsReference = ap28.varValue 
         )
         ON obs28.idfObservation = hc.idfEpiObservation AND
            obs28.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs29
             INNER JOIN tlbActivityParameters ap29
             ON ap29.idfObservation = obs29.idfObservation AND
                ap29.idfsParameter = @Thirdfield   /* Third*/ 
                AND ap29.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap29
             ON ref_ap29.idfsReference = ap29.varValue 
         )
         ON obs29.idfObservation = hc.idfEpiObservation AND
            obs29.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs30
             INNER JOIN tlbActivityParameters ap30
             ON ap30.idfObservation = obs30.idfObservation AND
                ap30.idfsParameter = @DateOfLastOPVDoseReceived /* Date of last OPV dose received*/ AND 
                ap30.intRowStatus = 0     
         )
         ON obs30.idfObservation = hc.idfEpiObservation AND
            obs30.intRowStatus = 0  
		
		--NEW!!!
		 LEFT OUTER JOIN 
         (tlbObservation obs31
             INNER JOIN tlbActivityParameters ap31
             ON ap31.idfObservation = obs31.idfObservation AND
                ap31.idfsParameter =  @IsPatientVaccinatedAgainstLeptospirosis /*Is patient vaccinated against leptospirosis?*/ AND 
                ap31.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap31
             ON ref_ap31.idfsReference = ap31.varValue 
         )
         ON obs31.idfObservation = hc.idfEpiObservation AND
            obs31.intRowStatus = 0   
            
         LEFT OUTER JOIN 
         (tlbObservation obs32
             INNER JOIN tlbActivityParameters ap32
             ON ap32.idfObservation = obs32.idfObservation AND
                ap32.idfsParameter = @DateOfVaccinationOfPatientAgainstLeptospirosis /*Date of vaccination of patient against leptospirosis*/ AND 
                ap32.intRowStatus = 0     
         )
         ON obs32.idfObservation = hc.idfEpiObservation AND
            obs32.intRowStatus = 0              
 
         --LEFT OUTER JOIN 
         --(tlbObservation obs31
         --    INNER JOIN tlbActivityParameters ap31
         --    ON ap31.idfObservation = obs31.idfObservation AND
         --       ap31.idfsParameter = @NameVaccine1 /* Vaccine 1: Name of vaccine*/ AND 
         --       ap31.intRowStatus = 0   
 
         --    LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_VaccineTypes /*Vaccine types*/)  ref_ap31
         --    ON ref_ap31.idfsReference = ap31.varValue 
                  
         --)
         --ON obs31.idfObservation = hc.idfEpiObservation AND
         --   obs31.intRowStatus = 0  
 
         --LEFT OUTER JOIN 
         --(tlbObservation obs32
         --    INNER JOIN tlbActivityParameters ap32
         --    ON ap32.idfObservation = obs32.idfObservation AND
         --       ap32.idfsParameter = @NameVaccine2 /* Vaccine 2: Name of vaccine*/ AND 
         --       ap32.intRowStatus = 0   
 
         --    LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_VaccineTypes /*Vaccine types*/)  ref_ap32
         --    ON ref_ap32.idfsReference = ap32.varValue 
                  
         --)
         --ON obs32.idfObservation = hc.idfEpiObservation AND
         --   obs32.intRowStatus = 0  
            
         --LEFT OUTER JOIN 
         --(tlbObservation obs33
         --    INNER JOIN tlbActivityParameters ap33
         --    ON ap33.idfObservation = obs33.idfObservation AND
         --       ap33.idfsParameter = @NameVaccine3 /* Vaccine 3: Name of vaccine*/ AND 
         --       ap33.intRowStatus = 0   
 
         --    LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_VaccineTypes /*Vaccine types*/)  ref_ap33
         --    ON ref_ap33.idfsReference = ap33.varValue 
                  
         --)
         --ON obs33.idfObservation = hc.idfEpiObservation AND
         --   obs33.intRowStatus = 0         
         
     LEFT OUTER JOIN 
         (tlbObservation obs37
             INNER JOIN tlbActivityParameters ap37
             ON ap37.idfObservation = obs37.idfObservation AND
                ap37.idfsParameter =  @PneumonaeNumberReceivedDoses/*HEI S. pneumonae caused infection GG: Number of received doses of S. pneumonae vaccine*/ AND 
                ap37.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization3 /*Immunization 3+*/)  ref_ap37
             ON ref_ap37.idfsReference = ap37.varValue 
         )
         ON obs37.idfObservation = hc.idfEpiObservation AND
            obs37.intRowStatus = 0    
     
     LEFT OUTER JOIN 
         (tlbObservation obs38
             INNER JOIN tlbActivityParameters ap38
             ON ap38.idfObservation = obs38.idfObservation AND
                ap38.idfsParameter =  @PneumonaeVaccinationStatus /*HEI S. pneumonae caused infection GG: S. pneumonae vaccination status*/ AND 
                ap38.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap38
             ON ref_ap38.idfsReference = ap38.varValue 
         )
         ON obs38.idfObservation = hc.idfEpiObservation AND
            obs38.intRowStatus = 0     
            
     LEFT OUTER JOIN 
         (tlbObservation obs39
             INNER JOIN tlbActivityParameters ap39
             ON ap39.idfObservation = obs39.idfObservation AND
                ap39.idfsParameter = @PneumonaeDateLastVaccination /*HEI S. pneumonae caused infection GG: Date of last vaccination*/ AND 
                ap39.intRowStatus = 0     
                AND (cast(SQL_VARIANT_PROPERTY(ap39.varValue, 'BaseType') as NVARCHAR) like N'%date%' or
					(cast(SQL_VARIANT_PROPERTY(ap39.varValue, 'BaseType') as NVARCHAR) like N'%char%' AND ISDATE(cast(ap39.varValue as NVARCHAR)) = 1 )	)
         )
         ON obs39.idfObservation = hc.idfEpiObservation AND
            obs39.intRowStatus = 0         

         LEFT OUTER JOIN 
         (tlbObservation obs40
             INNER JOIN tlbActivityParameters ap40
             ON ap40.idfObservation = obs40.idfObservation AND
                ap40.idfsParameter = @HepatitisANumberReceivedDoses /* HEI Acute Viral Hepatitis A GG: Number of received doses of Hepatitis A vaccine*/ AND 
                ap40.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap40
             ON ref_ap40.idfsReference = ap40.varValue 
         )
         ON obs40.idfObservation = hc.idfEpiObservation AND
            obs40.intRowStatus = 0             
            
      LEFT OUTER JOIN 
         (tlbObservation obs41
             INNER JOIN tlbActivityParameters ap41
             ON ap41.idfObservation = obs41.idfObservation AND
                ap41.idfsParameter = @HepatitisADateLastVaccination /*HEI Acute Viral Hepatitis A GG: Date of last vaccination*/ AND 
                ap41.intRowStatus = 0     
                AND (cast(SQL_VARIANT_PROPERTY(ap41.varValue, 'BaseType') as NVARCHAR) like N'%date%' or
					(cast(SQL_VARIANT_PROPERTY(ap41.varValue, 'BaseType') as NVARCHAR) like N'%char%' AND ISDATE(cast(ap41.varValue as NVARCHAR)) = 1 )	)
         )
         ON obs41.idfObservation = hc.idfEpiObservation AND
            obs41.intRowStatus = 0   
 
 
 
 
     LEFT OUTER JOIN tlbOutbreak o
     ON hc.idfOutbreak = o.idfOutbreak
 		AND o.intRowStatus = 0
 		
 	LEFT JOIN tlbPerson tp ON
 		tp.idfPerson = hc.idfSentByPerson
 
 	LEFT JOIN dbo.FN_GBL_Institution(@LangID) fi ON
 		fi.idfOffice = hc.idfSentByOffice
 		
 		
 		
 WHERE    hc.idfsSite = ISNULL(@SiteID, dbo.FN_GBL_SITEID_GET()) AND
          hc.intRowStatus = 0 AND 
          DATEDIFF(D, @StartDate, ISNULL(hc.datNotificationDate ,hc.datEnteredDate)) >= 0 AND
          DATEDIFF(D, @FinishDate, ISNULL(hc.datNotificationDate ,hc.datEnteredDate)) <= 0 AND
 			(ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) = @Diagnosis OR @Diagnosis is null)
 		
 		
SELECT
	strName,	
 	strAge, 
 	strGender,
 	strAddress,
 	strPlaceOfStudyWork,
 	datDiseaseOnsetDate,
 	datDateOfFirstPresentation,
 	strFacilityThatSentNotification,
 	strProvisionalDiagnosis,
 	datDateProvisionalDiagnosis,
 	datDateSpecificTreatment,
 	datDateSpecimenTaken,
 	strResultAndDate,
 	strVaccinationStatus,
 	datDateCaseInvestigation,
 	strFinalDS,
 	strFinalClassification,
 	datDateFinalDS,
 	strOutcome,
 	strCaseStatus,
 	strComments,
 	strCaseID,
	datEnteredDate
FROM @ReportTable
ORDER BY datEnteredDate
GO
PRINT N'Altering Procedure [Report].[USP_REP_HUM_MonthlyMorbidityMortality]...';


GO

-- This stored proc is to be used for the report:
--
--	Human Monthly Morbidity and Mortality
--
--  Mark Wilson updated for EIDSS7 standards
--  Srini Goli: renamed to maintain similarity object names.
--  Mark Wilson updated to sort diseases by intOrder 21July2020
--  Mark Wilson updated to update counts for labtested 12Jan2023
--  Stephen Long - added additional dates for 5455 - 30Jan2023

/*
--Example of a call of procedure:
EXEC report.USP_REP_HUM_MonthlyMorbidityMortality @LangID=N'en-US', @Year=2021,@Month=5,@IsDeceased=NULL --Morbidity
EXEC report.USP_REP_HUM_MonthlyMorbidityMortality @LangID=N'en', @Year=2017,@Month=2,@IsDeceased=1 --Mortality

*/
ALTER PROCEDURE [Report].[USP_REP_HUM_MonthlyMorbidityMortality]
(
    @LangID AS NVARCHAR(50),
    @Year AS INT,
    @Month AS INT = NULL,
    @IsDeceased AS BIT = NULL,
    @UseArchiveData AS BIT = 0 --if User selected Use Archive Data then 1
)
AS
DECLARE @FinalState AS BIGINT
IF (@IsDeceased = 1)
    SET @FinalState = 10035001; /*fstDeceased*/

DECLARE @StartDate AS DATETIME,
        @EndDate AS DATETIME;

IF @Month IS NULL
BEGIN
    SET @StartDate = CAST(CAST(@Year AS VARCHAR(4)) + '0101' AS DATETIME);
    SET @EndDate = DATEADD(ms, -2, DATEADD(YEAR, 1, @StartDate));
END
ELSE
BEGIN
    SET @StartDate = DATEADD(MONTH, @Month - 1, CAST(CAST(@Year AS VARCHAR(4)) + '0101' AS DATETIME));
    SET @EndDate = DATEADD(ms, -2, DATEADD(MONTH, 1, @StartDate));
END

SELECT tDiagnosisList.idfsDiagnosis AS DiagnosisID,
       tDiagnosisList.strIDC10 AS ICD10,
       tDiagnosisList.strDiseaseName AS Disease,
       Age0_1.intCount AS Age_1,
       Age1_4.intCount AS Age1_4,
       Age5_14.intCount AS Age5_14,
       Age15_19.intCount AS Age15_19,
       Age20_29.intCount AS Age20_29,
       Age30_54.intCount AS Age30_54,
       Age55_.intCount AS Age55_,
       fnTotal.intCount AS TotalCases,
       --tLabConfirmed.intCount AS TotalLabTested,
       tLabTested.intCount AS TotalLabTested,
       tTotalConfirmed.intCount AS TotalConfirmed
FROM
(
    SELECT tDiagnosis.idfsDiagnosis,
           tDiagnosis.strIDC10,
           rfDiagnosis.name AS strDiseaseName,
           rfDiagnosis.intOrder
    FROM dbo.trtDiagnosis AS tDiagnosis
        INNER JOIN report.FN_GBL_ReferenceRepair_GET(@LangID, 19000019 /*'rftDiagnosis' */) AS rfDiagnosis
            ON rfDiagnosis.idfsReference = tDiagnosis.idfsDiagnosis
               AND rfDiagnosis.intHACode & 2 > 0
               AND idfsUsingType = 10020001 /*Human */
) AS tDiagnosisList
    -- Get age statistics
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 0, 1, @FinalState) AS Age0_1
        ON tDiagnosisList.idfsDiagnosis = Age0_1.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 1, 4, @FinalState) AS Age1_4
        ON tDiagnosisList.idfsDiagnosis = Age1_4.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 5, 14, @FinalState) AS Age5_14
        ON tDiagnosisList.idfsDiagnosis = Age5_14.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 15, 19, @FinalState) AS Age15_19
        ON tDiagnosisList.idfsDiagnosis = Age15_19.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 20, 29, @FinalState) AS Age20_29
        ON tDiagnosisList.idfsDiagnosis = Age20_29.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 30, 54, @FinalState) AS Age30_54
        ON tDiagnosisList.idfsDiagnosis = Age30_54.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 55, 2147483647, @FinalState) AS Age55_
        ON tDiagnosisList.idfsDiagnosis = Age55_.idfsDiagnosis
    LEFT JOIN report.FN_REP_HumanCaseForAge_Get(@StartDate, @EndDate, 0, 0, @FinalState) AS fnTotal
        ON tDiagnosisList.idfsDiagnosis = fnTotal.idfsDiagnosis
    LEFT JOIN
    (
		SELECT COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis) AS idfsDiagnosis,
               COUNT(tHumanCase.idfHumanCase) AS intCount
        FROM dbo.tlbHumanCase AS tHumanCase
            INNER JOIN dbo.tlbHuman h
                LEFT OUTER JOIN dbo.tlbGeoLocation gl
                    ON h.idfCurrentResidenceAddress = gl.idfGeoLocation
                       AND gl.intRowStatus = 0
                ON tHumanCase.idfHuman = h.idfHuman
                   AND h.intRowStatus = 0 -- Added by MCW
            LEFT JOIN dbo.tlbGeoLocation cgl
                ON tHumanCase.idfPointGeoLocation = cgl.idfGeoLocation
                   AND cgl.intRowStatus = 0 -- added by MCW to ensure non-foreign address
        -- MCW changed to BETWEEN instead of >= and <
        -- SHL added additional dates for bug 5455.
		WHERE COALESCE(tHumanCase.datOnsetDate, tHumanCase.datFinalDiagnosisDate, tHumanCase.datTentativeDiagnosisDate, tHumanCase.datNotificationDate, tHumanCase.datEnteredDate) BETWEEN @StartDate AND @EndDate -- Added tHumanCase.datOnsetDate, tHumanCase.datFinalDiagnosisDate,  to COALESCE
              AND tHumanCase.intRowStatus = 0
              AND ISNULL(tHumanCase.idfsFinalCaseStatus, tHumanCase.idfsInitialCaseStatus) = 350000000 /* Confirmed*/
              AND (
                      @FinalState IS NULL
                      OR tHumanCase.idfsFinalState = @FinalState
                  )
              AND (
                      ISNULL(cgl.idfsGeoLocationType, -1) <> 10036001 --Foreign Address
                      OR cgl.idfsCountry IS NULL
                      OR cgl.idfsCountry = 780000000
                  )
              AND (
                      @IsDeceased IS NULL
                      OR @IsDeceased = 0
                      OR (
                             @IsDeceased = 1
                             AND (
                                     tHumanCase.idfsFinalState = 10035001
                                     OR (tHumanCase.idfsOutcome = 10770000000 /*Died*/ * @IsDeceased)
                                 )
                         )
                  )
        GROUP BY COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis)
    ) AS tTotalConfirmed
        ON tDiagnosisList.idfsDiagnosis = tTotalConfirmed.idfsDiagnosis
    --LEFT JOIN (			
    --			SELECT
    --				COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis) AS idfsDiagnosis,
    --				COUNT(tHumanCase.idfHumanCase) AS intCount
    --			FROM dbo.tlbHumanCase AS tHumanCase
    --			WHERE COALESCE(tHumanCase.datTentativeDiagnosisDate, tHumanCase.datNotificationDate, tHumanCase.datEnteredDate) BETWEEN @StartDate AND @EndDate
    --			AND tHumanCase.intRowStatus = 0
    --			AND tHumanCase.blnLabDiagBasis = 1
    --			AND (@FinalState IS NULL OR tHumanCase.idfsFinalState = @FinalState)
    --			GROUP BY COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis)
    --		  ) AS tLabConfirmed ON tDiagnosisList.idfsDiagnosis = tLabConfirmed.idfsDiagnosis				
    LEFT JOIN
    (
        SELECT COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis) AS idfsDiagnosis,
               COUNT(tHumanCase.idfHumanCase) AS intCount
        FROM dbo.tlbHumanCase AS tHumanCase
            INNER JOIN dbo.tlbHuman h
                LEFT OUTER JOIN dbo.tlbGeoLocation gl
                    ON h.idfCurrentResidenceAddress = gl.idfGeoLocation
                       AND gl.intRowStatus = 0
                ON tHumanCase.idfHuman = h.idfHuman
                   AND h.intRowStatus = 0 -- Added by MCW
            LEFT JOIN dbo.tlbGeoLocation cgl
                ON tHumanCase.idfPointGeoLocation = cgl.idfGeoLocation
                   AND cgl.intRowStatus = 0 -- added by MCW to ensure non-foreign address

        WHERE (
                  DATEPART(
                              MONTH,
                              COALESCE(ISNULL(tHumanCase.datOnsetDate, tHumanCase.datFinalDiagnosisDate), ISNULL(
                                                                                                                    tHumanCase.datFinalDiagnosisDate,
                                                                                                                    tHumanCase.datTentativeDiagnosisDate
                                                                                                                ), ISNULL(
                                                                                                                             tHumanCase.datTentativeDiagnosisDate,
                                                                                                                             tHumanCase.datNotificationDate
                                                                                                                         ), ISNULL(
                                                                                                                                      tHumanCase.datNotificationDate,
                                                                                                                                      tHumanCase.datEnteredDate
                                                                                                                                  ))
                          ) = @Month
                  OR @Month IS NULL
              )
              AND DATEPART(
                              YEAR,
                              COALESCE(ISNULL(tHumanCase.datOnsetDate, tHumanCase.datFinalDiagnosisDate), ISNULL(
                                                                                                                    tHumanCase.datFinalDiagnosisDate,
                                                                                                                    tHumanCase.datTentativeDiagnosisDate
                                                                                                                ), ISNULL(
                                                                                                                             tHumanCase.datTentativeDiagnosisDate,
                                                                                                                             tHumanCase.datNotificationDate
                                                                                                                         ), ISNULL(
                                                                                                                                      tHumanCase.datNotificationDate,
                                                                                                                                      tHumanCase.datEnteredDate
                                                                                                                                  ))
                          ) = @Year
              AND tHumanCase.intRowStatus = 0
              AND (
                      ISNULL(cgl.idfsGeoLocationType, -1) <> 10036001 --Foreign Address
                      OR cgl.idfsCountry IS NULL
                      OR cgl.idfsCountry = 780000000
                  )
              AND tHumanCase.idfsYNTestsConducted = 10100001 -- Added by MCW to check that tests were conducted.
              AND (
                      @IsDeceased IS NULL
                      OR @IsDeceased = 0
                      OR ( --TODO: comment if necessary - start
                             @IsDeceased = 1
                             AND
                             --TODO: comment if necessary - end
                             (
                                 tHumanCase.idfsFinalState = 10035001 /*Dead*/ --TODO: uncomment if necessary--* @IsDeceased + 10035002 /*Alive*/ * (1 - @IsDeceased)
                                 OR ( -- TODO: uncomment if not necessary - start
                                 --(	tHumanCase.idfsFinalState is null 
                                 --	or tHumanCase.idfsFinalState <> 10035001 /*Dead*/ --TODO: uncomment if necessary--* @IsDeceased + 10035002 /*Alive*/ * (1 - @IsDeceased)
                                 --)
                                 -- and 
                                 -- TODO: uncomment if not necessary - end
                                 tHumanCase.idfsOutcome = 10770000000 /*Died*/ * @IsDeceased --TODO: uncomment if necessary-- + 10760000000 /*Recovered*/ * (1 - @IsDeceased)
                                    )
                             )
                         )
                  )
              AND COALESCE(tHumanCase.idfsFinalCaseStatus, tHumanCase.idfsInitialCaseStatus, 370000000) IN ( 350000000, /*Confirmed*/
                                                                                                             360000000, /*Probable*/
                                                                                                             380000000  /*Suspect*/
                                                                                                           )
        GROUP BY COALESCE(tHumanCase.idfsFinalDiagnosis, tHumanCase.idfsTentativeDiagnosis)
    ) AS tLabTested
        ON tDiagnosisList.idfsDiagnosis = tLabTested.idfsDiagnosis
ORDER BY tDiagnosisList.strDiseaseName
OPTION (RECOMPILE);
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ACTOR_GETList]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_ACTOR_GETList
--
-- Description: Gets data for sites, site groups, users and user groups for use case SAUC62 and
-- configurable filtration user stories.
--          
-- Revision History:
-- Name               Date       Change Detail
-- ------------------ ---------- -----------------------------------------------------------------
-- Stephen Long       05/13/2020 Initial release.
-- Stephen Long       11/10/2020 Added object access ID to the query.
-- Stephen Long       11/20/2020 Added search capability for site groups, sites and employee 
--                               groups for configurable site filtration.
-- Stephen Long       11/23/2020 Added actor name.
-- Stephen Long       11/24/2020 Corrected organization name for employee group type.
-- Ann Xiong          01/27/2021 Modified to return a list of Employee/Employee Group records for 
--                               disease filtration.
-- Ann Xiong          02/10/2021 Modified to return records when search by Name, Organization, and 
--                               Description.
-- Stephen Long       04/10/2021 Added pagination and sort logic.
-- Stephen Long       05/28/2021 Added disease filtration search indicator.
-- Stephen Long       06/09/2021 Added site filtration to filter search results.
-- Stephen Long       10/29/2021 Changed actor name on search results table to be nullable.
-- Michael Brown	  05/19/2021 Changed to assign the Family Name for the Actor Name Changed 
--								 And's to Or's at/around line 339
-- Stephen Long       12/15/2022 Modified to only return users when bringing back employee records.
--                               Non-users don't use EIDSS, so don't need to be included for 
--                               adding/denying permissions.  Fix on actor name search.
-- Stephen Long       12/20/2022 Changed employee group name to use base reference instead of name 
--                               on employee group table.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_ACTOR_GETList] (
	@LanguageID AS NVARCHAR(50)
	,@PageNumber INT = 1
	,@PageSize INT = 10
	,@SortColumn NVARCHAR(30) = 'ActorName'
	,@SortOrder NVARCHAR(4) = 'ASC'
	,@ActorTypeID AS BIGINT = NULL -- Site, Site Group, User or User Group
	,@ActorName AS NVARCHAR(200) = NULL
	,@OrganizationName AS NVARCHAR(200) = NULL
	,@UserGroupDescription AS NVARCHAR(200) = NULL
	,@DiseaseID AS BIGINT = NULL
	,@DiseaseFiltrationSearchIndicator AS BIT = 0
	,@UserSiteID BIGINT
	,@UserOrganizationID BIGINT
	,@UserEmployeeID BIGINT
	,@ApplySiteFiltrationIndicator BIT = 0
	)
AS
BEGIN
	SET NOCOUNT ON;
			
	BEGIN TRY
		DECLARE @Results TABLE (
			ID BIGINT NOT NULL
			,ReadPermissionIndicator BIT NOT NULL
			,AccessToPersonalDataPermissionIndicator BIT NOT NULL
			,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
			,WritePermissionIndicator BIT NOT NULL
			,DeletePermissionIndicator BIT NOT NULL
			);
		DECLARE @SearchResults TABLE (
			ActorID BIGINT NOT NULL
			,ActorTypeID BIGINT NOT NULL
			,ActorTypeName NVARCHAR(MAX) NOT NULL
			,ActorName NVARCHAR(MAX) NULL
			,ActorNameFirstLast NVARCHAR(MAX) NULL
			,OrganizationName NVARCHAR(MAX) NULL
			,EmployeeUserID BIGINT NULL
			,EmployeeSiteID BIGINT NULL
			,EmployeeSiteName NVARCHAR(MAX) NULL
			,UserGroupSiteID BIGINT NULL
			,UserGroupSiteName NVARCHAR(MAX) NULL
			,UserGroupDescription NVARCHAR(MAX) NULL
			,ObjectAccessID BIGINT NULL
			);
		DECLARE @FinalSearchResults TABLE (
			ActorID BIGINT NOT NULL
			,ActorTypeID BIGINT NOT NULL
			,ActorTypeName NVARCHAR(MAX) NOT NULL
			,ActorName NVARCHAR(MAX) NULL
			,ActorNameFirstLast NVARCHAR(MAX) NULL
			,OrganizationName NVARCHAR(MAX) NULL
			,EmployeeUserID BIGINT NULL
			,EmployeeSiteID BIGINT NULL
			,EmployeeSiteName NVARCHAR(MAX) NULL
			,UserGroupSiteID BIGINT NULL
			,UserGroupSiteName NVARCHAR(MAX) NULL
			,UserGroupDescription NVARCHAR(MAX) NULL
			,ObjectAccessID BIGINT NULL
			);

		SET NOCOUNT ON;

		IF @ApplySiteFiltrationIndicator = 1
		BEGIN
			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,INDEX IDX_ID(ID)
				);

			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbEmployee e
			WHERE e.intRowStatus = 0
				AND e.idfsSite = @UserSiteID;

			-- =======================================================================================
			-- CONFIGURABLE SITE FILTRATION RULES
			-- 
			-- Apply configurable site filtration rules for use case SAUC34.
			-- =======================================================================================
			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND sgs.idfsSite = e.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteID = e.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteID = e.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteID = e.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
			FROM @FilteredResults
			INNER JOIN dbo.tlbEmployee e ON e.idfEmployee = ID
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType ON e.idfsEmployeeType = actorType.idfsReference
			LEFT JOIN dbo.tlbPerson p ON p.idfPerson = e.idfEmployee
				AND p.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) organizationName ON p.idfInstitution = organizationName.idfOffice
			LEFT JOIN dbo.tlbEmployeeGroup eg ON e.idfEmployee = eg.idfEmployeeGroup
			LEFT JOIN dbo.tstSite employeeSite ON employeeSite.idfsSite = e.idfsSite
				AND employeeSite.intRowStatus = 0
			LEFT JOIN dbo.tstSite userGroupSite ON userGroupSite.idfsSite = eg.idfsSite
				AND userGroupSite.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000022) userGroupType ON eg.idfsEmployeeGroupName = userGroupType.idfsReference
			LEFT JOIN dbo.tstObjectAccess oa ON oa.idfActor = e.idfEmployee
				AND oa.intRowStatus = 0
				AND (
					oa.idfsObjectType = 10060001 -- Disease Record
					AND oa.idfsObjectOperation = 10059003 -- Read 
					AND @DiseaseID IS NOT NULL
					)
			WHERE (
					(
						-- User
						e.idfsEmployeeCategory = 10526001 -- User
						AND e.idfsEmployeeType = 10023002 -- User
						)
					OR (
						-- User Group
						e.idfsEmployeeCategory = 10526002 -- User
						AND e.idfsEmployeeType = 10023001 -- User Group
						AND eg.intRowStatus = 0
						)
					)
				AND (
					idfsEmployeeType = @ActorTypeID
					OR @ActorTypeID IS NULL
					)
				AND (
					oa.idfsObjectID = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					organizationName.name LIKE '%' + @OrganizationName + '%'
					OR @OrganizationName IS NULL
					)
				AND (
					eg.strDescription LIKE '%' + @UserGroupDescription + '%'
					OR @UserGroupDescription IS NULL
					)
			GROUP BY ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator;
		END
		ELSE
		BEGIN
			INSERT INTO @Results
			SELECT DISTINCT e.idfEmployee
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbEmployee e
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType ON e.idfsEmployeeType = actorType.idfsReference
			LEFT JOIN dbo.tlbPerson p ON p.idfPerson = e.idfEmployee
				AND p.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) organizationName ON p.idfInstitution = organizationName.idfOffice
			LEFT JOIN dbo.tlbEmployeeGroup eg ON e.idfEmployee = eg.idfEmployeeGroup
			LEFT JOIN dbo.tstSite employeeSite ON employeeSite.idfsSite = e.idfsSite
				AND employeeSite.intRowStatus = 0
			LEFT JOIN dbo.tstSite userGroupSite ON userGroupSite.idfsSite = eg.idfsSite
				AND userGroupSite.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000022) userGroupType ON eg.idfsEmployeeGroupName = userGroupType.idfsReference
			LEFT JOIN dbo.tstObjectAccess oa ON oa.idfActor = e.idfEmployee
				AND oa.intRowStatus = 0
				AND (
					oa.idfsObjectType = 10060001 -- Disease Record
					AND oa.idfsObjectOperation = 10059003 -- Read 
					AND @DiseaseID IS NOT NULL
					)
			WHERE e.intRowStatus = 0
				AND (
					(
						-- User
						e.idfsEmployeeCategory = 10526001 -- User
						AND e.idfsEmployeeType = 10023002 -- User
						)
					OR (
						-- User Group
						e.idfsEmployeeCategory = 10526002 -- User
						AND e.idfsEmployeeType = 10023001 -- User Group
						AND eg.intRowStatus = 0
						)
					)
				AND (
					idfsEmployeeType = @ActorTypeID
					OR @ActorTypeID IS NULL
					)
				AND (
					oa.idfsObjectID = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					organizationName.name LIKE '%' + @OrganizationName + '%'
					OR @OrganizationName IS NULL
					)
				AND (
					eg.strDescription LIKE '%' + @UserGroupDescription + '%'
					OR @UserGroupDescription IS NULL
					);
		END;

		INSERT INTO @SearchResults (
			ActorID
			,ActorTypeID
			,ActorTypeName
			,ActorName
			,ActorNameFirstLast
			,OrganizationName
			,EmployeeUserID
			,EmployeeSiteID
			,EmployeeSiteName
			,UserGroupSiteID
			,UserGroupSiteName
			,UserGroupDescription
			,ObjectAccessID
			)
		SELECT DISTINCT e.idfEmployee AS ActorID
			,e.idfsEmployeeType AS ActorTypeID
			,actorType.name AS ActorTypeName
			,(
				CASE 
					WHEN e.idfsEmployeeType = 10023001 -- User Group
						THEN employeeGroupType.name
					ELSE dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName)
					END
				) AS ActorName
			,(
				CASE 
					WHEN e.idfsEmployeeType = 10023001 -- User Group
						THEN NULL
					ELSE p.strFirstName + ' ' + p.strFamilyName 
					END
				) AS ActorNameFirstLast
			,(
				CASE 
					WHEN e.idfsEmployeeType = 10023001 -- User Group
						THEN userGroupSite.strSiteName
					ELSE organizationName.name
					END
				) AS OrganizationName
			,u.idfUserID AS EmployeeUserID
			,employeeSite.idfsSite AS EmployeeSiteID
			,employeeSite.strSiteName AS EmployeeSiteName
			,userGroupSite.idfsSite AS UserGroupSiteID
			,userGroupSite.strSiteName AS UserGroupSiteName
			,eg.strDescription AS UserGroupDescription
			,oa.idfObjectAccess AS ObjectAccessID
		FROM @Results res
		INNER JOIN dbo.tlbEmployee e ON e.idfEmployee = res.ID
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType ON e.idfsEmployeeType = actorType.idfsReference
		LEFT JOIN dbo.tlbPerson p ON p.idfPerson = e.idfEmployee
			AND p.intRowStatus = 0
		LEFT JOIN dbo.tstUserTable u ON u.idfPerson = p.idfPerson
			AND u.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) organizationName ON p.idfInstitution = organizationName.idfOffice
		LEFT JOIN dbo.tlbEmployeeGroup eg ON e.idfEmployee = eg.idfEmployeeGroup
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000022) employeeGroupType ON eg.idfsEmployeeGroupName = employeeGroupType.idfsReference
		LEFT JOIN dbo.tstSite employeeSite ON employeeSite.idfsSite = e.idfsSite
			AND employeeSite.intRowStatus = 0
		LEFT JOIN dbo.tstSite userGroupSite ON userGroupSite.idfsSite = eg.idfsSite
			AND userGroupSite.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000022) userGroupType ON eg.idfsEmployeeGroupName = userGroupType.idfsReference
		LEFT JOIN dbo.tstObjectAccess oa ON oa.idfActor = e.idfEmployee
			AND oa.idfsObjectID = @DiseaseID
			AND oa.intRowStatus = 0
			AND (
				oa.idfsObjectType = 10060001 -- Disease Record
				AND oa.idfsObjectOperation = 10059003 -- Read 
				AND @DiseaseID IS NOT NULL
				);

		IF @DiseaseFiltrationSearchIndicator = 0
		BEGIN
		    DECLARE @LanguageCode BIGINT = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
			DECLARE @Site NVARCHAR(MAX) = (SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 549), 
			    @SiteGroup NVARCHAR(MAX) = (SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 550);

			INSERT INTO @SearchResults
			SELECT s.idfSiteGroup AS ActorID
				,4 AS ActorTypeID
				,@SiteGroup AS ActorTypeName
				,s.strSiteGroupName AS ActorName
				,NULL AS ActorNameFirstLast
				,NULL AS OrganizationName
				,NULL AS EmployeeUserID
				,NULL AS EmployeeSiteID
				,NULL AS EmployeeSiteName
				,NULL AS UserGroupSiteID
				,NULL AS UserGroupSiteName
				,NULL AS UserGroupDescription
				,NULL AS ObjectAccessID
			FROM dbo.tflSiteGroup s
			WHERE s.intRowStatus = 0
				AND (
					@ActorTypeID = 4
					OR @ActorTypeID IS NULL
					)
				AND (
					s.strSiteGroupName LIKE '%' + @ActorName + '%'
					OR @ActorName IS NULL
					);

			INSERT INTO @SearchResults
			SELECT s.idfsSite AS ActorID
				,3 AS ActorTypeID
				,@Site AS ActorTypeName
				,s.strSiteName AS ActorName
				,NULL AS ActorNameFirstLast
				,organization.name AS OrganizationName
				,NULL AS EmployeeUserID
				,NULL AS EmployeeSiteID
				,NULL AS EmployeeSiteName
				,NULL AS UserGroupSiteID
				,NULL AS UserGroupSiteName
				,NULL AS UserGroupDescription
				,NULL AS ObjectAccessID
			FROM dbo.tstSite s
			LEFT JOIN dbo.FN_GBL_INSTITUTION(@LanguageID) organization ON organization.idfOffice = s.idfOffice
				AND organization.intRowStatus = 0
			WHERE s.intRowStatus = 0
				AND (
					@ActorTypeID = 3 -- Site
					OR @ActorTypeID IS NULL
					)
				AND (
					s.strSiteName LIKE '%' + @ActorName + '%'
					OR @ActorName IS NULL
					);
		END;

		INSERT INTO @FinalSearchResults
		SELECT * FROM @SearchResults
		WHERE ActorName LIKE + '%' + @ActorName + '%'
		       OR ActorNameFirstLast LIKE + '%' + @ActorName + '%' 
				OR @ActorName IS NULL;

		WITH paging
		AS (
			SELECT ActorID
				,c = COUNT(*) OVER ()
			FROM @FinalSearchResults res
			ORDER BY CASE 
					WHEN @SortColumn = 'ActorTypeName'
						AND @SortOrder = 'ASC'
						THEN ActorTypeName
					END ASC
				,CASE 
					WHEN @SortColumn = 'ActorTypeName'
						AND @SortOrder = 'DESC'
						THEN ActorTypeName
					END DESC
				,CASE 
					WHEN @SortColumn = 'ActorName'
						AND @SortOrder = 'ASC'
						THEN ActorName
					END ASC
				,CASE 
					WHEN @SortColumn = 'ActorName'
						AND @SortOrder = 'DESC'
						THEN ActorName
					END DESC
				,CASE 
					WHEN @SortColumn = 'OrganizationName'
						AND @SortOrder = 'ASC'
						THEN OrganizationName
					END ASC
				,CASE 
					WHEN @SortColumn = 'OrganizationName'
						AND @SortOrder = 'DESC'
						THEN OrganizationName
					END DESC
				,CASE 
					WHEN @SortColumn = 'UserGroupDescription'
						AND @SortOrder = 'ASC'
						THEN UserGroupDescription
					END ASC
				,CASE 
					WHEN @SortColumn = 'UserGroupDescription'
						AND @SortOrder = 'DESC'
						THEN UserGroupDescription
					END DESC OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
			)
		SELECT res.ActorID
			,ActorTypeID
			,ActorTypeName
			,ActorName
			,OrganizationName
			,EmployeeUserID
			,EmployeeSiteID
			,EmployeeSiteName
			,UserGroupSiteID
			,UserGroupSiteName
			,UserGroupDescription
			,ObjectAccessID
			,0 AS RowSelectionIndicator
			,c AS RecordCount
			,(
				(
					SELECT COUNT(*)
					FROM dbo.tlbEmployee
					WHERE intRowStatus = 0
					) + (
					SELECT COUNT(*)
					FROM dbo.tstSite
					WHERE intRowStatus = 0
						AND @DiseaseFiltrationSearchIndicator = 0
					) + (
					SELECT COUNT(*)
					FROM dbo.tflSiteGroup
					WHERE intRowStatus = 0
						AND @DiseaseFiltrationSearchIndicator = 0
					)
				) AS TotalRowCount
			,CurrentPage = @PageNumber
			,TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
		FROM @FinalSearchResults res
		INNER JOIN paging ON paging.ActorID = res.ActorID;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ADMINLEVEL_GETLIST]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_ADMINLEVEL_GETLIST
--
-- Description: Get the list of admin level units based on search criteria entered.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni   11292021          Initial release.
-- Manickandan Govindarajan 03/16/2022   Fixed Rayan  National name and Default Name          
-- Manickandan Govindarajan 10/27/2022  Added strSettlementHASC as retrun type         
-- Manickandan Govindarajan 11/09/2022  Added strCode paramter and pulling hascode and strcode for all the levels.
-- Testing Code:
/*

EXEC	[dbo].[USP_ADMIN_ADMINLEVEL_GETLIST]
N'en-US',10003005,NULL,NULL,NULL,NULL,N'BAKU',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,10,NULL,NULL

*/
-- ================================================================================================
ALTER       PROCEDURE [dbo].[USP_ADMIN_ADMINLEVEL_GETLIST] 
(
	@LangId NVARCHAR(20),
	@idfsAdminLevel BIGINT,
	@idfsCountry BIGINT,
	@idfsRegion BIGINT,
	@idfsRayon BIGINT,
	@idfsSettlement BIGINT,
	@strDefaultName NVARCHAR(100),
	@strNationalName NVARCHAR(100),
	@idfsSettlementType BIGINT,
	@LatFrom FLOAT,
	@LatTo FLOAT,
	@LongFrom FLOAT,
	@LongTo FLOAT,
	@ElevationFrom FLOAT,
	@ElevationTo FLOAT,
	@pageNo INT = 1,
	@pageSize INT = 10, 
	@sortColumn NVARCHAR(30) = '', 
	@sortOrder NVARCHAR(4) = 'asc',
	@strHASC NVARCHAR(6) = NULL,
	@strCode NVARCHAR(200) = NULL

)
AS
BEGIN
	BEGIN TRY
		DECLARE @firstRec INT, @lastRec INT,@idfsLangId BIGINT 
		
		SELECT @idfsLangId = idfsBaseReference 
		FROM dbo.trtBaseReference a 
		WHERE a.strBaseReferenceCode = @LangId 
		AND a.idfsReferenceType = 19000049

		DECLARE @Results TABLE
		( 
			idfKey BIGINT PRIMARY KEY IDENTITY(1,1),
			idfsAdministrativeLevel BIGINT,
			idfsCountry BIGINT,
			strCountryHASC NVARCHAR(255),
			strCountryCode NVARCHAR(255),
			strDefaultCountryName NVARCHAR(200),
			strNationalCountryName NVARCHAR(200),
			idfsRegion BIGINT,
			strRegionHASC NVARCHAR(255),
			strRegionCode NVARCHAR(255),
			strDefaultRegionName NVARCHAR(200),
			strNationalRegionName NVARCHAR(200),
			idfsRayon BIGINT,
			strRayonHASC NVARCHAR(255),
			strRayonCode NVARCHAR(255),
			strDefaultRayonName NVARCHAR(200),
			strNationalRayonName NVARCHAR(200),
			idfsSettlement NVARCHAR(200),
			strSettlementHASC NVARCHAR(255),
			strSettlementCode NVARCHAR(255),
			strDefaultSettlementName NVARCHAR(200),
			strNationalSettlementName NVARCHAR(200),
			idfsSettlementType BIGINT,
			strSettlementTypeDefaultName NVARCHAR(200),
			strSettlementTypeNationalName NVARCHAR(200),
			Latitude FLOAT,
			Longitude FLOAT,
			Elevation FLOAT
		)
		IF @idfsAdminLevel = 10003001
			BEGIN
				SET @idfsRegion = NULL
				SET @idfsRayon = NULL
				SET @idfsSettlement = NULL
			END

		IF @idfsAdminLevel = 10003003
			BEGIN
				SET @idfsRayon = NULL
				SET @idfsSettlement = NULL
			END

		IF @idfsAdminLevel = 10003002
			BEGIN
				SET @idfsSettlement = NULL
			END

		-- Populate country names if Administrative Level is for the country
		IF ((@idfsAdminLevel = 10003001 OR @idfsCountry IS NOT NULL) AND (@idfsAdminLevel = 10003001  AND @idfsRegion IS NULL AND @idfsRayon IS NULL AND @idfsSettlement IS NULL))
			OR @idfsAdminLevel IS NULL
			BEGIN 
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strCountryCode,
					strNationalCountryName,
					strDefaultCountryName
				)
				SELECT @idfsAdminLevel, 
						a.idfsCountry,
						a.strHASC,
						a.strCode,
						c.strTextString,
						b.strDefault
				FROM dbo.gisCountry a
				INNER JOIN dbo.gisBaseReference b ON a.idfsCountry = b.idfsGISBaseReference AND b.intRowStatus = 0 
				INNER JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND b.intRowStatus = 0  AND c.idfsLanguage = @idfsLangId
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%')
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND (a.idfsCountry = @idfsCountry OR @idfsCountry IS NULL)
				AND (a.strHASC = @strHASC OR @strHASC IS NULL)
				AND (a.strCode = @strCode OR @strCode IS NULL)
			END

		-- Populate region names if Administrative Level is for the region
		IF ((@idfsAdminLevel = 10003003 OR @idfsRegion IS NOT NULL) AND (@idfsAdminLevel = 10003003 AND @idfsRayon IS NULL AND @idfsSettlement IS NULL))
			OR @idfsAdminLevel IS NULL
			BEGIN 
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strCountryCode,
					strNationalCountryName,
					strDefaultCountryName,
					idfsRegion,
					strRegionHASC,
					strRegionCode,
					strNationalRegionName,
					strDefaultRegionName,
					Longitude,
					Latitude,
					Elevation
				)
				SELECT	@idfsAdminLevel, 
						a.idfsCountry,
						f.strHASC,
						f.strCode,
						e.strTextString,
						d.strDefault,
						a.idfsRegion,
						a.strHASC,
						a.strCode,
						c.strTextString,
						b.strDefault,
						a.dbllongitude,
						a.dbllatitude,
						a.intelevation
				FROM dbo.gisRegion a
				INNER JOIN dbo.gisBaseReference b ON a.idfsRegion = b.idfsGISBaseReference AND b.intRowStatus =0
				INNER JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND c.intRowStatus = 0 AND c.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference d ON a.idfsCountry = d.idfsGISBaseReference AND d.intRowStatus = 0
				INNER JOIN dbo.gisStringNameTranslation e ON d.idfsGISBaseReference = e.idfsGISBaseReference AND e.intRowStatus = 0 AND e.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisCountry f ON a.idfsCountry = f.idfsCountry AND f.intRowStatus =0
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%')
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND ((a.dblLatitude BETWEEN @LatFrom AND @LatTo) OR (@LatFrom IS NULL AND @LatTo IS NULL))
				AND ((a.dblLongitude BETWEEN @LongFrom AND @LongTo) OR (@LongFrom IS NULL AND @LongTo IS NULL))
				AND ((a.intElevation BETWEEN @ElevationFrom AND @ElevationTo) OR (@ElevationFrom IS NULL AND @ElevationTo IS NULL))
				AND (a.idfsRegion = @idfsRegion OR @idfsRegion IS NULL)
				AND (a.idfsCountry = @idfsCountry OR @idfsCountry IS NULL)
				AND (a.strHASC = @strHASC OR @strHASC IS NULL)
				AND (a.strCode = @strCode OR @strCode IS NULL)
			END

		-- Populate Rayon names if Administrative Level is for the rayon
		IF ((@idfsAdminLevel = 10003002 OR @idfsRayon IS NOT NULL) AND (@idfsAdminLevel = 10003002  AND @idfsSettlement IS NULL)) 
			OR @idfsAdminLevel IS NULL
			BEGIN 
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strCountryCode,
					strNationalCountryName,
					strDefaultCountryName,
					idfsRegion,
					strRegionHASC,
					strRegionCode,
					strNationalRegionName,
					strDefaultRegionName,
					idfsRayon,
					strRayonHASC,
					strRayonCode,
					strNationalRayonName,
					strDefaultRayonName,
					Latitude,
					Longitude,
					Elevation
				)
				SELECT	@idfsAdminLevel, 
						a.idfsCountry,
						i.strHASC,
						i.strCode,
						e.strTextString,
						d.strDefault,
						a.idfsRegion,
						h.strHASC,
						h.strCode,
						g.strTextString,
						f.strDefault,
						a.idfsRayon,
						a.strHASC,
						a.strCode,
						c.strTextString,
						b.strDefault,
						a.dblLatitude,
						a.dblLongitude,
						a.intElevation
				FROM dbo.gisRayon a
				INNER JOIN dbo.gisBaseReference b ON a.idfsRayon = b.idfsGISBaseReference AND b.intRowStatus =0
				LEFT JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND c.intRowStatus = 0 AND c.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference d ON a.idfsCountry = d.idfsGISBaseReference AND d.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation e ON d.idfsGISBaseReference = e.idfsGISBaseReference AND e.intRowStatus = 0 AND e.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference f ON a.idfsRegion = f.idfsGISBaseReference AND f.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation g ON f.idfsGISBaseReference = g.idfsGISBaseReference AND g.intRowStatus = 0 AND g.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisRegion h ON a.idfsRegion = h.idfsRegion AND h.intRowStatus = 0
				INNER JOIN dbo.gisCountry i ON a.idfsCountry = i.idfsCountry AND i.intRowStatus = 0
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%') 
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND ((a.dblLatitude BETWEEN @LatFrom AND @LatTo) OR (@LatFrom IS NULL AND @LatTo IS NULL))
				AND ((a.dblLongitude BETWEEN @LongFrom AND @LongTo) OR (@LongFrom IS NULL AND @LongTo IS NULL))
				AND ((a.intElevation BETWEEN @ElevationFrom AND @ElevationTo) OR (@ElevationFrom IS NULL AND @ElevationTo IS NULL))
				AND ((a.idfsRayon = @idfsRayon OR @idfsRayon IS NULL)
					AND ((@idfsRegion IS NOT NULL AND a.idfsRegion= @idfsRegion) OR @idfsRegion IS NULL)
					AND ((@idfsCountry IS NOT NULL AND a.idfsCountry = @idfsCountry) OR @idfsCountry IS NULL)
					)
						AND (a.strHASC = @strHASC OR @strHASC IS NULL)
						AND (a.strCode = @strCode OR @strCode IS NULL)
			END

		-- Populate Settlement names if Administrative Level is for the Settlement
		IF (@idfsAdminLevel = 10003004 OR @idfsSettlement IS NOT NULL) OR @idfsAdminLevel IS NULL
			BEGIN 
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strCountryCode,
					strNationalCountryName,
					strDefaultCountryName,
					idfsRegion,
					strRegionHASC,
					strRegionCode,
					strNationalRegionName,
					strDefaultRegionName,
					idfsRayon,
					strRayonHASC,
					strRayonCode,
					strNationalRayonName,
					strDefaultRayonName,
					idfsSettlement,
					strSettlementHASC,
					strSettlementCode,
					strNationalSettlementName,
					strDefaultSettlementName,
					idfsSettlementType,
					strSettlementTypeNationalName,
					strSettlementTypeDefaultName,
					Latitude,
					Longitude,
					Elevation
				)
				SELECT	@idfsAdminLevel, 
						a.idfsCountry,
						n.strHASC,
						n.strCode,
						e.strTextString,
						d.strDefault,
						a.idfsRegion,
						m.strHASC,
						m.strCode,
						g.strTextString,
						f.strDefault,
						a.idfsRayon,
						l.strHASC,
						l.strCode,
						i.strTextString,
						h.strDefault,
						a.idfsSettlement,
						b.strBaseReferenceCode,
						a.strSettlementCode,
						c.strTextString,
						b.strDefault,
						a.idfsSettlementType,
						k.strTextString,
						j.strDefault,
						a.dblLatitude,
						a.dblLongitude,
						a.intElevation
				FROM dbo.gisSettlement a
				INNER JOIN dbo.gisBaseReference b ON a.idfsSettlement = b.idfsGISBaseReference AND b.intRowStatus =0
				LEFT JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND c.intRowStatus = 0 AND c.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference d ON a.idfsCountry = d.idfsGISBaseReference AND d.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation e ON d.idfsGISBaseReference = e.idfsGISBaseReference AND e.intRowStatus = 0 AND e.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference f ON a.idfsRegion = f.idfsGISBaseReference AND f.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation g ON d.idfsGISBaseReference = g.idfsGISBaseReference AND e.intRowStatus = 0 AND g.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference h ON a.idfsRayon = h.idfsGISBaseReference AND h.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation i ON h.idfsGISBaseReference = i.idfsGISBaseReference AND i.intRowStatus = 0 AND i.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference j ON a.idfsSettlementType = j.idfsGISBaseReference AND j.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation k ON j.idfsGISBaseReference = k.idfsGISBaseReference AND k.intRowStatus = 0 AND k.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisRayon l ON a.idfsRayon = l.idfsRayon AND l.intRowStatus = 0
				INNER JOIN dbo.gisRegion m ON a.idfsRegion = m.idfsRegion AND m.intRowStatus = 0
				INNER JOIN dbo.gisCountry n ON a.idfsCountry = n.idfsCountry AND n.intRowStatus = 0
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%') 
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND (a.idfsSettlementType = @idfsSettlementType OR @idfsSettlementType IS NULL)
				AND ((a.dblLatitude BETWEEN @LatFrom AND @LatTo) OR (@LatFrom IS NULL OR @LatTo IS NULL))
				AND ((a.dblLongitude BETWEEN @LongFrom AND @LongTo) OR (@LongFrom IS NULL OR @LongTo IS NULL))
				AND ((a.intElevation BETWEEN @ElevationFrom AND @ElevationTo) OR (@ElevationFrom IS NULL OR @ElevationTo IS NULL))
				AND ((a.idfsSettlement = @idfsSettlement OR @idfsSettlement IS NULL) 
					AND ((@idfsRayon IS NOT NULL AND a.idfsRayon = @idfsRayon) OR @idfsRayon IS NULL)
					AND ((@idfsRegion IS NOT NULL AND a.idfsRegion= @idfsRegion) OR @idfsRegion IS NULL)
					AND ((@idfsCountry IS NOT NULL AND a.idfsCountry = @idfsCountry) OR @idfsCountry IS NULL)
					)
				AND (b.strBaseReferenceCode = @strHASC OR @strHASC IS NULL)
				AND (a.strSettlementCode = @strCode OR @strCode IS NULL)
			END

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1);
		
		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
			CASE WHEN @sortColumn = 'strNationalCountryName' AND @SortOrder = 'asc' THEN a.strNationalCountryName END ASC,
			CASE WHEN @sortColumn = 'strNationalCountryName' AND @SortOrder = 'desc' THEN a.strNationalCountryName END DESC,
			CASE WHEN @sortColumn = 'strDefaultCountryName' AND @SortOrder = 'asc' THEN a.strDefaultCountryName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultCountryName' AND @SortOrder = 'desc' THEN a.strDefaultCountryName END DESC,
			CASE WHEN @sortColumn = 'strNationalRegionName' AND @SortOrder = 'asc' THEN a.strNationalRegionName END ASC,	
			CASE WHEN @sortColumn = 'strNationalRegionName' AND @SortOrder = 'desc' THEN a.strNationalRegionName END DESC,
			CASE WHEN @sortColumn = 'strDefaultRegionName' AND @SortOrder = 'asc' THEN a.strDefaultRegionName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultRegionName' AND @SortOrder = 'desc' THEN a.strDefaultRegionName END DESC,
			CASE WHEN @sortColumn = 'strNationalRayonName' AND @SortOrder = 'asc' THEN a.strNationalRayonName END ASC,	
			CASE WHEN @sortColumn = 'strNationalRayonName' AND @SortOrder = 'desc' THEN a.strNationalRayonName END DESC,
			CASE WHEN @sortColumn = 'strDefaultRayonName' AND @SortOrder = 'asc' THEN a.strDefaultRayonName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultRayonName' AND @SortOrder = 'desc' THEN a.strDefaultRayonName END DESC,
			CASE WHEN @sortColumn = 'strNationalSettlementName' AND @SortOrder = 'asc' THEN a.strNationalSettlementName END ASC,	
			CASE WHEN @sortColumn = 'strNationalSettlementName' AND @SortOrder = 'desc' THEN a.strNationalSettlementName END DESC,
			CASE WHEN @sortColumn = 'strDefaultSettlementName' AND @SortOrder = 'asc' THEN a.strDefaultSettlementName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultSettlementName' AND @SortOrder = 'desc' THEN a.strDefaultSettlementName END DESC,
			CASE WHEN @sortColumn = 'strSettlementTypeDefaultName' AND @SortOrder = 'asc' THEN a.strSettlementTypeDefaultName END ASC,	
			CASE WHEN @sortColumn = 'strSettlementTypeDefaultName' AND @SortOrder = 'desc' THEN a.strSettlementTypeDefaultName END DESC,
			CASE WHEN @sortColumn = 'strSettlementTypeNationalName' AND @SortOrder = 'asc' THEN a.strSettlementTypeNationalName END ASC,	
			CASE WHEN @sortColumn = 'strSettlementTypeNationalName' AND @SortOrder = 'desc' THEN a.strSettlementTypeNationalName END DESC,
			CASE WHEN @sortColumn = 'Latitude' AND @SortOrder = 'asc' THEN a.Latitude END ASC,	
			CASE WHEN @sortColumn = 'Latitude' AND @SortOrder = 'desc' THEN a.Latitude END DESC,
			CASE WHEN @sortColumn = 'Longitude' AND @SortOrder = 'asc' THEN a.Longitude END ASC,	
			CASE WHEN @sortColumn = 'Longitude' AND @SortOrder = 'desc' THEN a.Longitude END DESC,
			CASE WHEN @sortColumn = 'Elevation' AND @SortOrder = 'asc' THEN a.elevation END ASC,	
			CASE WHEN @sortColumn = 'Elevation' AND @SortOrder = 'desc' THEN a.elevation END DESC
		) AS ROWNUM,
			COUNT(*) OVER () AS TotalRowCount,
			a.idfsCountry,
			a.strCountryHASC,
			a.strCountryCode,
			a.strNationalCountryName,	
			a.strDefaultCountryName,	
			a.idfsRegion,
			a.strRegionHASC,
			a.strRegionCode,
			a.strNationalRegionName,	
			a.strDefaultRegionName,	
			a.idfsRayon,
			a.strRayonHASC,
			a.strRayonCode,
			a.strNationalRayonName,	
			a.strDefaultRayonName,	
			a.idfsSettlement,
			a.strSettlementHASC,
			a.strSettlementCode,
			a.strNationalSettlementName,	
			a.strDefaultSettlementName,	
			a.idfsSettlementType,
			a.strSettlementTypeDefaultName,	
			a.strSettlementTypeNationalName,	
			a.Latitude,	
			a.Longitude,	
			a.Elevation	
		FROM @Results a
		)

		SELECT 
				TotalRowCount,
				a.idfsCountry,
				a.strCountryHASC,
				a.strCountryCode,
				a.strNationalCountryName,	
				a.strDefaultCountryName,	
				a.idfsRegion,
				a.strRegionHASC,
				a.strRegionCode,
				a.strNationalRegionName,	
				a.strDefaultRegionName,	
				a.idfsRayon,
				a.strRayonHASC,
				a.strRayonCode,
				a.strNationalRayonName,	
				a.strDefaultRayonName,	
				a.idfsSettlement,
				a.strSettlementHASC,
				a.strSettlementCode,
				a.strNationalSettlementName,	
				a.strDefaultSettlementName,	
				a.idfsSettlementType,
				a.strSettlementTypeDefaultName,	
				strSettlementTypeNationalName,	
				a.Latitude,	
				a.Longitude,	
				a.Elevation,	
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults A
		WHERE a.ROWNUM > @firstRec AND RowNum < @lastRec 	
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DATAAUDITLOG_GETList]...';


GO

-- =============================================
-- Author:		Manickandan Govindarajan
-- Create date: 06/20/2022
-- Description:	Gets the audit event list for the given parameters
-- Manickandan Govidarajan 11/22/2022 - Added additional out columns
-- Manickandan Govindarajan 11/3/2022 - Updated condition
-- Manickandan Govindarajan 01/24/2023  - Added logic to searcg @idfObjectId in related tables

-- =============================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DATAAUDITLOG_GETList]
	@languageId AS NVARCHAR(50),
	@startDate DateTime = NULL,
	@endDate DateTime = NULL,
	@idfUserId BIGINT = NULL,
	@idfSiteId BIGINT = NULL, 
	@idfActionId BIGINT = NULL, 
	@idfObjetType BIGINT = NULL, 
	@idfObjectId NVARCHAR(50) =NULL,
	@SortColumn NVARCHAR(30) = 'TransactionDate',
	@SortOrder NVARCHAR(4) = 'DESC',
	@Page INT = 1,
	@PageSize INT = 10
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @firstRec INT;
	DECLARE @lastRec INT;

	BEGIN TRY
		SET @firstRec = (@Page-1)* @pagesize
		SET @lastRec = (@Page*@pageSize+1);

		if (@idfObjetType in (10017073, 10017006, 10017005, 10017062, 10017069,  10017077  ,10017074,10017075, 10017078 ,10017080 ,10017081 ,10017004, 10017088, 10017085, 10017059, 10017061,10017063) and @idfObjectId  is NOT NULL AND @idfObjectId ! = '')  
		BEGIN
			WITH CTEResults AS
			(
				SELECT ROW_NUMBER() OVER ( ORDER BY
				CASE WHEN @sortColumn = 'TransactionDate' AND @SortOrder = 'ASC' THEN ae.datEnteringDate END ASC,
				CASE WHEN @sortColumn = 'TransactionDate' AND @SortOrder = 'DESC' THEN ae.datEnteringDate END DESC,
				CASE WHEN @sortColumn = 'siteName' AND @SortOrder = 'ASC' THEN ae.idfsSite   END ASC,
				CASE WHEN @sortColumn = 'siteName' AND @SortOrder = 'DESC' THEN ae.idfsSite END DESC,
				CASE WHEN @sortColumn = 'UserName' AND @SortOrder = 'ASC' THEN ae.idfUserID   END ASC,
				CASE WHEN @sortColumn = 'UserName' AND @SortOrder = 'DESC' THEN ae.idfUserID END DESC,
				CASE WHEN @sortColumn = 'ActionName' AND @SortOrder = 'ASC' THEN ae.idfsDataAuditEventType   END ASC,
				CASE WHEN @sortColumn = 'ActionName' AND @SortOrder = 'DESC' THEN ae.idfsDataAuditEventType END DESC,
				CASE WHEN @sortColumn = 'ObjectType' AND @SortOrder = 'ASC' THEN ae.idfsDataAuditObjectType  END ASC,
				CASE WHEN @sortColumn = 'ObjectType' AND @SortOrder = 'DESC' THEN ae.idfsDataAuditObjectType END DESC,
				CASE WHEN @sortColumn = 'StrObject' AND @SortOrder = 'ASC' THEN ae.strMainObject  END ASC,
				CASE WHEN @sortColumn = 'StrObject' AND @SortOrder = 'DESC' THEN ae.strMainObject END DESC
				)  AS ROWNUM,
						ae.strSiteName siteName,
						ae.idfsSite siteId,
						ae.idfUserID userId,
						ae.strFirstName userFirstName,
						ae.strFamilyName userFamilyName,
						ae.datEnteringDate TransactionDate,
						ae.ActionName,
						ae.idfsDataAuditEventType actionTypeId,
						ae.ObjectType,
						ae.idfsDataAuditObjectType ObjectTypeId,
						ae.idfMainObjectTable ObjectTable,
						ae.idfMainObject ObjectId,
						ae.idfDataAuditEvent auditEventId,
						tt.strName tableName,
						ae.strMainObject,
						COUNT(*) OVER () AS TotalRowCount
					from dbo.fn_DataAudit_SelectList(@languageId) ae
					INNER join tauTable tt 
					on tt.idfTable = ae.idfMainObjectTable
					LEFT JOIN	tlbHumanCase
					ON			tlbHumanCase.idfHumanCase = ae.idfMainObject
					LEFT JOIN	tlbVetCase
					ON			tlbVetCase.idfVetCase = ae.idfMainObject
					LEFT JOIN	tlbOutbreak
					ON			tlbOutbreak.idfOutbreak = ae.idfMainObject
					LEFT JOIN	tlbCampaign
					ON			tlbCampaign.idfCampaign = ae.idfMainObject
					LEFT JOIN	tlbMonitoringSession
					ON			tlbMonitoringSession.idfMonitoringSession = ae.idfMainObject
					LEFT JOIN	tlbAggrCase
					ON			tlbAggrCase.idfAggrCase = ae.idfMainObject
					LEFT JOIN	tlbVectorSurveillanceSession
					ON			tlbVectorSurveillanceSession.idfVectorSurveillanceSession =ae.idfMainObject
					LEFT JOIN	tlbBasicSyndromicSurveillance
					ON			tlbBasicSyndromicSurveillance.idfBasicSyndromicSurveillance = ae.idfMainObject
					LEFT JOIN	tlbBasicSyndromicSurveillanceAggregateHeader
					ON			tlbBasicSyndromicSurveillanceAggregateHeader.idfAggregateHeader = ae.idfMainObject
					LEFT JOIN	tlbReportForm
					ON			tlbReportForm.idfReportForm = ae.idfMainObject
					where 0=0 and
						(ae.idfsSite = @idfSiteId OR @idfSiteId IS NULL) 
						AND (ae.idfUserID = @idfUserId OR @idfUserId IS NULL) 
						AND (ae.idfsDataAuditEventType = @idfActionId OR @idfActionId IS NULL) 
						AND (ae.idfsDataAuditObjectType = @idfObjetType OR @idfObjetType IS NULL) 
						AND
						((@startdate is null and @enddate is null)
							or
							(@startdate is null and @enddate is not null and cast(ae.datEnteringDate as date) <= cast(@enddate as date) )
							or
							(@startdate is not null and @enddate is null and cast(ae.datEnteringDate as date) >= cast(@startdate as date) )
							or
							(@startdate is not null and @enddate is not null and cast(ae.datEnteringDate as date) BETWEEN  cast(@startdate as date)  AND  cast(@enddate as date)))
						AND (CASE tt.strName	
										WHEN 'tlbVetCase' THEN tlbVetCase.strCaseID	-- Vet Disease Report
										WHEN 'tlbHumanCase'	THEN tlbHumanCase.strCaseID	 -- Humand Disease Report
										WHEN 'tlbOutbreak'	THEN tlbOutbreak.strOutbreakID	 -- OutBreak Session
										WHEN 'tlbCampaign'	THEN tlbCampaign.strCampaignID  -- Vet and Human Campaign
										WHEN 'tlbMonitoringSession'	THEN tlbMonitoringSession.strMonitoringSessionID  -- Vet and Human ASS
										WHEN 'tlbVectorSurveillanceSession'	THEN tlbVectorSurveillanceSession.strSessionID  -- Vector Surveillance Session
										WHEN 'tlbAggrCase'	THEN tlbAggrCase.strCaseID   -- Human and Vet Aggregate Case
										WHEN 'tlbBasicSyndromicSurveillance'	THEN tlbBasicSyndromicSurveillance.strFormID  -- 
										WHEN 'tlbBasicSyndromicSurveillanceAggregateHeader'	THEN tlbBasicSyndromicSurveillanceAggregateHeader.strFormID --ILI
										WHEN 'tlbReportForm'	THEN tlbReportForm.strReportFormID  -- Weekly Reporting Form

							END Like '%'+trim(@idfObjectId)+'%')

			)
			SELECT 	auditEventId, 
					siteName,	
					siteId,
					userId,
					userFirstName,
					userFamilyName,
					TransactionDate,
					ActionName,
					actionTypeId,
					ObjectType,
					ObjectTypeId,
					ObjectTable,
					ObjectId,
					tableName,
					strMainObject,
					TotalRowCount,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @Page
			FROM CTEResults WHERE RowNum > @firstRec AND RowNum < @lastRec
		END
		ELSE
		BEGIN
		WITH CTEResults AS
			(
				SELECT ROW_NUMBER() OVER ( ORDER BY
				CASE WHEN @sortColumn = 'TransactionDate' AND @SortOrder = 'ASC' THEN ae.datEnteringDate END ASC,
				CASE WHEN @sortColumn = 'TransactionDate' AND @SortOrder = 'DESC' THEN ae.datEnteringDate END DESC,
				CASE WHEN @sortColumn = 'siteName' AND @SortOrder = 'ASC' THEN ae.idfsSite   END ASC,
				CASE WHEN @sortColumn = 'siteName' AND @SortOrder = 'DESC' THEN ae.idfsSite END DESC,
				CASE WHEN @sortColumn = 'UserName' AND @SortOrder = 'ASC' THEN ae.idfUserID   END ASC,
				CASE WHEN @sortColumn = 'UserName' AND @SortOrder = 'DESC' THEN ae.idfUserID END DESC,
				CASE WHEN @sortColumn = 'ActionName' AND @SortOrder = 'ASC' THEN ae.idfsDataAuditEventType   END ASC,
				CASE WHEN @sortColumn = 'ActionName' AND @SortOrder = 'DESC' THEN ae.idfsDataAuditEventType END DESC,
				CASE WHEN @sortColumn = 'ObjectType' AND @SortOrder = 'ASC' THEN ae.idfsDataAuditObjectType  END ASC,
				CASE WHEN @sortColumn = 'ObjectType' AND @SortOrder = 'DESC' THEN ae.idfsDataAuditObjectType END DESC,
				CASE WHEN @sortColumn = 'StrObject' AND @SortOrder = 'ASC' THEN ae.strMainObject  END ASC,
				CASE WHEN @sortColumn = 'StrObject' AND @SortOrder = 'DESC' THEN ae.strMainObject END DESC
				)  AS ROWNUM,
						ae.strSiteName siteName,
						ae.idfsSite siteId,
						ae.idfUserID userId,
						ae.strFirstName userFirstName,
						ae.strFamilyName userFamilyName,
						ae.datEnteringDate TransactionDate,
						ae.ActionName,
						ae.idfsDataAuditEventType actionTypeId,
						ae.ObjectType,
						ae.idfsDataAuditObjectType ObjectTypeId,
						ae.idfMainObjectTable ObjectTable,
						ae.idfMainObject ObjectId,
						ae.idfDataAuditEvent auditEventId,
						tt.strName tableName,
						ae.strMainObject,
						COUNT(*) OVER () AS TotalRowCount
					from dbo.fn_DataAudit_SelectList(@languageId) ae
					INNER join tauTable tt 
					on tt.idfTable = ae.idfMainObjectTable
					where 0=0 and
						(ae.idfsSite = @idfSiteId OR @idfSiteId IS NULL) 
						AND (ae.idfUserID = @idfUserId OR @idfUserId IS NULL) 
						AND (ae.idfsDataAuditEventType = @idfActionId OR @idfActionId IS NULL) 
						AND (ae.idfsDataAuditObjectType = @idfObjetType OR @idfObjetType IS NULL) 
					--	AND (ae.idfMainObject = @idfObjectId OR @idfObjectId IS NULL)
						AND
						((@startdate is null and @enddate is null)
							or
							(@startdate is null and @enddate is not null and cast(ae.datEnteringDate as date) <= cast(@enddate as date) )
							or
							(@startdate is not null and @enddate is null and cast(ae.datEnteringDate as date) >= cast(@startdate as date) )
							or
							(@startdate is not null and @enddate is not null and cast(ae.datEnteringDate as date) BETWEEN  cast(@startdate as date)  AND  cast(@enddate as date)))
							)
			SELECT 	auditEventId, 
					siteName,	
					siteId,
					userId,
					userFirstName,
					userFamilyName,
					TransactionDate,
					ActionName,
					actionTypeId,
					ObjectType,
					ObjectTypeId,
					ObjectTable,
					ObjectId,
					tableName,
					strMainObject,
					TotalRowCount,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @Page
			FROM CTEResults WHERE RowNum > @firstRec AND RowNum < @lastRec
						
		END
		



END TRY

	BEGIN CATCH
		
		THROW;
	END CATCH;

	
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET
--
-- Description:	Deduplication for Livestock and Avian disease report record.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		25May2022	Initial release
-- Mark Wilson		10Jun2022	update to 
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
-- Ann Xiong		11/14/2022	Updated to pass correct parameters to USP_HUM_HUMAN_DISEASE_DEL.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]
(
    @SupersededDiseaseReportID BIGINT,
    @LanguageID NVARCHAR(50),
    @SurvivorDiseaseReportID BIGINT,
    @idfHumanCaseRelatedTo BIGINT = NULL,
    @idfHuman BIGINT = NULL,                              -- tlbHumanCase.idfHuman
    @idfHumanActual BIGINT,                               -- tlbHumanActual.idfHumanActual
    @strHumanCaseId NVARCHAR(200) = '(new)',
    @idfsFinalDiagnosis BIGINT,                           -- tlbhumancase.idfsTentativeDiagnosis/idfsFinalDiagnosis
    @datDateOfDiagnosis DATETIME = NULL,                  --tlbHumanCase.datTentativeDiagnosisDate/datFinalDiagnosisDate
    @datNotificationDate DATETIME = NULL,                 --tlbHumanCase.DatNotIFicationDate
    @idfsFinalState BIGINT = NULL,                        --tlbHumanCase.idfsFinalState
    @strLocalIdentifier NVARCHAR(200) = NULL,
    @idfSentByOffice BIGINT = NULL,                       -- tlbHumanCase.idfSentByOffice
    @strSentByFirstName NVARCHAR(200) = NULL,             --tlbHumanCase.strSentByFirstName
    @strSentByPatronymicName NVARCHAR(200) = NULL,        --tlbHumancase.strSentByPatronymicName
    @strSentByLastName NVARCHAR(200) = NULL,              --tlbHumanCase.strSentByLastName
    @idfSentByPerson BIGINT = NULL,                       --tlbHumcanCase.idfSentByPerson
    @idfReceivedByOffice BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByOffice
    @strReceivedByFirstName NVARCHAR(200) = NULL,         --tlbHumanCase.strReceivedByFirstName
    @strReceivedByPatronymicName NVARCHAR(200) = NULL,    --tlbHumanCase.strReceivedByPatronymicName
    @strReceivedByLastName NVARCHAR(200) = NULL,          --tlbHuanCase.strReceivedByLastName
    @idfReceivedByPerson BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByPerson
    @idfsHospitalizationStatus BIGINT = NULL,             -- tlbHumanCase.idfsHospitalizationStatus
    @idfHospital BIGINT = NULL,                           -- tlbHumanCase.idfHospital
    @strCurrentLocation NVARCHAR(200) = NULL,             -- tlbHumanCase.strCurrentLocation
    @datOnSetDate DATETIME = NULL,                        -- tlbHumanCase.datOnSetDate
    @idfsInitialCaseStatus BIGINT = NULL,                 -- tlbHumanCase.idfsInitialCaseStatus
    @idfsYNPreviouslySoughtCare BIGINT = NULL,            --idfsYNPreviouslySoughtCare
    @datFirstSoughtCareDate DATETIME = NULL,              --tlbHumanCase.datFirstSoughtCareDate
    @idfSoughtCareFacility BIGINT = NULL,                 --tlbHumanCase.idfSoughtCareFacility
    @idfsNonNotIFiableDiagnosis BIGINT = NULL,            --tlbHumanCase.idfsNonNotIFiableDiagnosis
    @idfsYNHospitalization BIGINT = NULL,                 -- tlbHumanCase.idfsYNHospitalization
    @datHospitalizationDate DATETIME = NULL,              --tlbHumanCase.datHospitalizationDate 
    @datDischargeDate DATETIME = NULL,                    -- tlbHumanCase.datDischargeDate
    @strHospitalName NVARCHAR(200) = NULL,                --tlbHumanCase.strHospitalizationPlace  
    @idfsYNAntimicrobialTherapy BIGINT = NULL,            --  tlbHumanCase.idfsYNAntimicrobialTherapy 
    @strAntibioticName NVARCHAR(200) = NULL,              -- tlbHumanCase.strAntimicrobialTherapyName
    @strDosage NVARCHAR(200) = NULL,                      --tlbHumanCase.strDosage
    @datFirstAdministeredDate DATETIME = NULL,            -- tlbHumanCase.datFirstAdministeredDate
    @strAntibioticComments NVARCHAR(MAX) = NULL,          -- tlbHumanCase.strClinicalNotes , or strSummaryNotes
    @idfsYNSpecificVaccinationAdministered BIGINT = NULL, --  tlbHumanCase.idfsYNSpecIFicVaccinationAdministered
    @idfInvestigatedByOffice BIGINT = NULL,               -- tlbHumanCase.idfInvestigatedByOffice 
    @StartDateofInvestigation DATETIME = NULL,            -- tlbHumanCase.datInvestigationStartDate
    @idfsYNRelatedToOutbreak BIGINT = NULL,               -- tlbHumanCase.idfsYNRelatedToOutbreak
    @idfOutbreak BIGINT = NULL,                           --idfOutbreak  
    @idfsYNExposureLocationKnown BIGINT = NULL,           --tlbHumanCase.idfsYNExposureLocationKnown
    @idfPointGeoLocation BIGINT = NULL,                   --tlbHumanCase.idfPointGeoLocation
    @datExposureDate DATETIME = NULL,                     -- tlbHumanCase.datExposureDate 
    @idfsGeoLocationType BIGINT = NULL,                   --tlbGeolocation.idfsGeoLocationType
    @strLocationDescription NVARCHAR(MAX) = NULL,         --tlbGeolocation.Description
    @idfsLocationCountry BIGINT = NULL,                   --tlbGeolocation.idfsCountry 
    @idfsLocationRegion BIGINT = NULL,                    --tlbGeolocation.idfsRegion
    @idfsLocationRayon BIGINT = NULL,                     --tlbGeolocation.idfsRayon
    @idfsLocationSettlement BIGINT = NULL,                --tlbGeolocation.idfsSettlement
    @intLocationLatitude FLOAT = NULL,                    --tlbGeolocation.Latittude
    @intLocationLongitude FLOAT = NULL,                   --tlbGeolocation.Longitude
    @intElevation BIGINT = NULL,                          --GISSettlement.intElevation
    @idfsLocationGroundType BIGINT = NULL,                --tlbGeolocation.GroundType
    @intLocationDistance FLOAT = NULL,                    --tlbGeolocation.Distance
    @intLocationDirection FLOAT = NULL,                   --tlbGeolocation.Alignment	
    @strForeignAddress NVARCHAR(MAX) = NULL,              --tlbGeolocation.strForeignAddress 
    @strNote NVARCHAR(MAX) = NULL,                        --tlbhumancase.strNote
    @idfsFinalCaseStatus BIGINT = NULL,                   --tlbHuanCase.idfsFinalCaseStatus 
    @idfsOutcome BIGINT = NULL,                           -- --tlbHumanCase.idfsOutcome 
    @datDateofDeath DATETIME = NULL,                      -- tlbHumanCase.datDateOfDeath 
    @idfsCaseProgressStatus BIGINT = 10109001,            --	tlbHumanCase.reportStatus, default = In-process
    @idfPersonEnteredBy BIGINT = NULL,
    @strClinicalNotes NVARCHAR(2000) = NULL,
    @idfsYNSpecimenCollected BIGINT = NULL,
    @idfsYNTestsConducted BIGINT = NULL,
    @DiseaseReportTypeID BIGINT = NULL,
    @blnClinicalDiagBasis BIT = NULL,
    @blnLabDiagBasis BIT = NULL,
    @blnEpiDiagBasis BIT = NULL,
    @DateofClassification DATETIME = NULL,
    @strSummaryNotes NVARCHAR(MAX) = NULL,
    @idfEpiObservation BIGINT = NULL,
    @idfCSObservation BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @strEpidemiologistsName NVARCHAR(MAX) = NULL,
    @idfsNotCollectedReason BIGINT = NULL,
    @strNotCollectedReason NVARCHAR(200) = NULL,
    @SamplesParameters NVARCHAR(MAX) = NULL,
    @TestsParameters NVARCHAR(MAX) = NULL,
    @TestsInterpretationParameters NVARCHAR(MAX) = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @VaccinationsParameters NVARCHAR(MAX) = NULL,
    @ContactsParameters NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @idfsHumanAgeType BIGINT = NULL,
    @intPatientAge INT = NULL,
    @datCompletionPaperFormDate DATETIME = NULL,
    @RowStatus INT,
    @idfsSite BIGINT = NULL,
    @AuditUser NVARCHAR(100) = '',
    @idfParentMonitoringSession BIGINT = NULL
)
AS

BEGIN --Proc variables
DECLARE @returnCode INT = 0
DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'
DECLARE @RowID BIGINT = NULL,
        @RowAction NCHAR = NULL,
        @OrderNumber INT,
        @SampleID BIGINT,
        @SampleTypeID BIGINT = NULL,
        @HumanID BIGINT,
        @HumanMasterID BIGINT = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @CollectionDate DATETIME = NULL,
        @SentDate DATETIME = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @TestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @BatchTestID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ResultDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @TestHumanCaseID BIGINT = NULL,
        @TestInterpretationID BIGINT,
        @InterpretedStatusTypeID BIGINT = NULL,
        @InterpretedByOrganizationID BIGINT = NULL,
        @InterpretedByPersonID BIGINT = NULL,
        @TestingInterpretations BIGINT,
        @ValidatedStatusIndicator BIT = NULL,
        @ReportSessionCreatedIndicator BIT = NULL,
        @ValidatedComment NVARCHAR(200) = NULL,
        @InterpretedComment NVARCHAR(200) = NULL,
        @ValidatedDate DATETIME = NULL,
        @InterpretedDate DATETIME = NULL,
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
        @MonitoringSessionActionID BIGINT,
        @ActionTypeID BIGINT,
        @ActionStatusTypeID BIGINT,
        @ActionDate DATETIME = NULL,
        @Comments NVARCHAR(500) = NULL,
        @DiseaseID BIGINT,
        @idfMonitoringSessionToDiagnosis BIGINT,
        @DateEntered DATETIME = GETDATE(),
        @DeleteID BIGINT = @SupersededDiseaseReportID,
        @SaveID BIGINT = @SurvivorDiseaseReportID
SET @AuditUser = ISNULL(@AuditUser, '')
END
BEGIN --Data Audit variables
declare @idfUserId BIGINT =NULL;
declare @idfSiteId BIGINT = NULL;
declare @idfsDataAuditEventType bigint =NULL;
-- Get and Set UserId and SiteId
select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@AuditUser) userInfo
END
BEGIN --Declare Temp tables
DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NULL,
    SampleStatusTypeID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    CollectedByOrganizationID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    SentDate DATETIME2 NULL,
    SentToOrganizationID BIGINT NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    Comments NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    CurrentSiteID BIGINT NULL,
    DiseaseID BIGINT NULL,
    ReadOnlyIndicator BIT NULL,
    HumanID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);
DECLARE @SamplesTemp2 TABLE (SampleID BIGINT NOT NULL);

DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Comments NVARCHAR NULL,
    StartedDate DATETIME2 NULL,
    ResultDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);
DECLARE @TestsInterpretationParametersTemp TABLE
(
    TestInterpretationID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    InterpretedStatusTypeID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    InterpretedByOrganizationID BIGINT NULL,
    InterpretedByPersonID BIGINT NULL,
    TestID BIGINT NOT NULL,
    ValidatedStatusIndicator BIT NULL,
    ReportSessionCreatedIndicator BIT NULL,
    ValidatedComment NVARCHAR(200) NULL,
    InterpretedComment NVARCHAR(200) NULL,
    ValidatedDate DATETIME NULL,
    InterpretedDate DATETIME NULL,
    ReadOnlyIndicator BIT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);

DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @EventsTemp2 TABLE (EventId BIGINT NOT NULL);

DECLARE @AntiViralTemp TABLE (idfAntimicrobialTherapy BIGINT);
INSERT INTO @AntiViralTemp
(
    idfAntimicrobialTherapy
)
SELECT idfAntimicrobialTherapy
FROM
    OPENJSON(@AntiviralTherapiesParameters)
    WITH
    (
        idfAntimicrobialTherapy BIGINT
    );

DECLARE @ContactsTemp TABLE (ContactedCasePersonId BIGINT NOT NULL);
INSERT INTO @ContactsTemp
(
    ContactedCasePersonId
)
SELECT ContactedCasePersonId
FROM
    OPENJSON(@ContactsParameters)
    WITH
    (
        ContactedCasePersonId BIGINT
    );
END

DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
 
BEGIN TRY --Main logic
	BEGIN --Insert temp tables with JSON data
    SET @SamplesParameters = REPLACE(@SamplesParameters, '"0001-01-01T00:00:00"', 'null')
    INSERT INTO @SamplesTemp
    SELECT *
    FROM
        OPENJSON(@SamplesParameters)
        WITH
        (
            SampleID BIGINT,
            SampleTypeID BIGINT,
            SampleStatusTypeID BIGINT,
            CollectionDate DATETIME2,
            CollectedByOrganizationID BIGINT,
            CollectedByPersonID BIGINT,
            SentDate DATETIME2,
            SentToOrganizationID BIGINT,
            EIDSSLocalOrFieldSampleID NVARCHAR(200),
            Comments NVARCHAR(200),
            SiteID BIGINT,
            CurrentSiteID BIGINT,
            DiseaseID BIGINT,
            ReadOnlyIndicator BIT,
            HumanID BIGINT,
            HumanMasterID BIGINT,
            RowStatus INT,
            RowAction CHAR(1)
        );
    INSERT INTO @SamplesTemp2
    SELECT SampleID
    FROM
        OPENJSON(@SamplesParameters)
        WITH
        (
            SampleID BIGINT,
            SampleTypeID BIGINT,
            SampleStatusTypeID BIGINT,
            CollectionDate DATETIME2,
            CollectedByOrganizationID BIGINT,
            CollectedByPersonID BIGINT,
            SentDate DATETIME2,
            SentToOrganizationID BIGINT,
            EIDSSLocalOrFieldSampleID NVARCHAR(200),
            Comments NVARCHAR(200),
            SiteID BIGINT,
            CurrentSiteID BIGINT,
            DiseaseID BIGINT,
            ReadOnlyIndicator BIT,
            HumanID BIGINT,
            HumanMasterID BIGINT,
            RowStatus INT,
            RowAction CHAR(1)
        );		

    SET @TestsParameters = REPLACE(@TestsParameters, '"0001-01-01T00:00:00"', 'null')
    INSERT INTO @TestsTemp
    SELECT *
    FROM
        OPENJSON(@TestsParameters)
        WITH
        (
            TestID BIGINT,
            TestNameTypeID BIGINT,
            TestCategoryTypeID BIGINT,
            TestResultTypeID BIGINT,
            TestStatusTypeID BIGINT,
            DiseaseID BIGINT,
            SampleID BIGINT,
            BatchTestID BIGINT,
            ObservationID BIGINT,
            TestNumber INT,
            Comments NVARCHAR(500),
            StartedDate DATETIME2,
            ResultDate DATETIME2,
            TestedByOrganizationID BIGINT,
            TestedByPersonID BIGINT,
            ResultEnteredByOrganizationID BIGINT,
            ResultEnteredByPersonID BIGINT,
            ValidatedByOrganizationID BIGINT,
            ValidatedByPersonID BIGINT,
            ReadOnlyIndicator BIT,
            NonLaboratoryTestIndicator BIT,
            ExternalTestIndicator BIT,
            PerformedByOrganizationID BIGINT,
            ReceivedDate DATETIME2,
            ContactPersonName NVARCHAR(200),
            RowStatus INT,
            RowAction CHAR(1)
        );
	
    INSERT INTO @TestsInterpretationParametersTemp
    SELECT *
    FROM
        OPENJSON(@TestsInterpretationParameters)
        WITH
        (
            TestInterpretationID BIGINT,
            DiseaseID BIGINT,
            InterpretedStatusTypeID BIGINT,
            ValidatedByOrganizationID BIGINT,
            ValidatedByPersonID BIGINT,
            InterpretedByOrganizationID BIGINT,
            InterpretedByPersonID BIGINT,
            TestID BIGINT,
            ValidatedStatusIndicator BIT,
            ReportSessionCreatedIndicator BIT,
            ValidatedComment NVARCHAR(200),
            InterpretedComment NVARCHAR(200),
            ValidatedDate DATETIME2,
            InterpretedDate DATETIME2,
            ReadOnlyIndicator BIT,
            RowStatus INT,
            RowAction INT
        );

    INSERT INTO @EventsTemp
    SELECT *
    FROM
        OPENJSON(@Events)
        WITH
        (
            EventId BIGINT,
            EventTypeId BIGINT,
            UserId BIGINT,
            SiteId BIGINT,
            LoginSiteId BIGINT,
            ObjectId BIGINT,
            DiseaseId BIGINT,
            LocationId BIGINT,
            InformationString NVARCHAR(MAX)
        );
    INSERT INTO @EventsTemp2
    SELECT EventId
    FROM
        OPENJSON(@Events)
        WITH
        (
            EventId BIGINT,
            EventTypeId BIGINT,
            UserId BIGINT,
            SiteId BIGINT,
            LoginSiteId BIGINT,
            ObjectId BIGINT,
            DiseaseId BIGINT,
            LocationId BIGINT,
            InformationString NVARCHAR(MAX)
        );

    DECLARE @VaccinationsTemp TABLE (humanDiseaseReportVaccinationUID BIGINT NOT NULL);
    INSERT INTO @VaccinationsTemp
    SELECT *
    FROM
        OPENJSON(@VaccinationsParameters)
        WITH
        (
            humanDiseaseReportVaccinationUID BIGINT
        )
	END

    BEGIN TRANSACTION

    DECLARE @SupressSELECT TABLE
    (
        retrunCode INT,
        returnMessage VARCHAR(200)
    )
    DECLARE @SupressSELECTHumanCase TABLE
    (
        retrunCode INT,
        returnMessage VARCHAR(200) --,
    -- idfHumanCase BIGINT
    )
    DECLARE @SupressSELECTHuman TABLE
    (
        retrunCode INT,
        returnMessage VARCHAR(200),
        idfHuman BIGINT
    )
    DECLARE @SupressSELECTGeoLocation TABLE
    (
        returnCode INT,
        returnMsg VARCHAR(200),
        idfGeoLocation BIGINT
    )		
    SET @DiseaseID = @idfsFinalDiagnosis
    DECLARE @HumanDiseasereportRelnUID BIGINT
    DECLARE @COPYHUMANACTUALTOHUMAN_ReturnCode INT = 0
		 
    -- Create a human record FROM Human Actual if not already present
    IF @idfHumanActual IS NOT NULL -- AND @idfHumanCase IS  NULL
    BEGIN	
		--Data Audit - Start
		--Variables
		DECLARE @idfsObjectTypeHuman bigint = 10017079;
		DECLARE @idfObjectHuman bigint = @idfHuman;
		DECLARE @idfObjectHumanTable bigint = 75600000000;
		DECLARE @tlbHuman_BeforeEdit TABLE
		(
			idfHuman BIGINT,idfHumanActual BIGINT,idfsOccupationType BIGINT,idfsNationality BIGINT,idfsHumanGender BIGINT,datDateofBirth DATETIME,datDateOfDeath DATETIME,
			strLastName NVARCHAR(200),strSecondName NVARCHAR(200),strFirstName NVARCHAR(200),strRegistrationPhone NVARCHAR(200),strEmployerName NVARCHAR(200),strHomePhone NVARCHAR(200),
			strWorkPhone NVARCHAR(200),idfsPersonIDType BIGINT,strPersonID NVARCHAR(200),datModIFicationDate DATETIME,
			idfCurrentResidenceAddress BIGINT,idfEmployerAddress BIGINT,idfRegistrationAddress BIGINT 
		)
		DECLARE @tlbHuman_AfterEdit TABLE
		(
			idfHuman BIGINT,idfHumanActual BIGINT,idfsOccupationType BIGINT,idfsNationality BIGINT,idfsHumanGender BIGINT,datDateofBirth DATETIME,datDateOfDeath DATETIME,
			strLastName NVARCHAR(200),strSecondName NVARCHAR(200),strFirstName NVARCHAR(200),strRegistrationPhone NVARCHAR(200),strEmployerName NVARCHAR(200),strHomePhone NVARCHAR(200),
			strWorkPhone NVARCHAR(200),idfsPersonIDType BIGINT,strPersonID NVARCHAR(200),datModIFicationDate DATETIME,
			idfCurrentResidenceAddress BIGINT,idfEmployerAddress BIGINT,idfRegistrationAddress BIGINT 
		)
		DECLARE @idfDataAuditEventHuman bigint= NULL; 

		--Find Insert/Update/Delete
		IF @idfHuman IS NULL
		BEGIN
			set @idfsDataAuditEventType = 10016001; --Insert
		END 
		ELSE 
		BEGIN 
			set @idfsDataAuditEventType = 10016003; --Update
		END

		--Get values before edit
		IF @idfsDataAuditEventType = 10016003
		BEGIN 
			--Get values before edit			
			insert into @tlbHuman_BeforeEdit
			(idfHuman,idfHumanActual,idfsOccupationType,idfsNationality,idfsHumanGender,datDateofBirth,datDateOfDeath,strLastName,strSecondName,strFirstName,strRegistrationPhone,
			strEmployerName,strHomePhone,strWorkPhone,idfsPersonIDType,strPersonID,datModIFicationDate,idfCurrentResidenceAddress,idfEmployerAddress,idfRegistrationAddress)
			select idfHuman,idfHumanActual,idfsOccupationType,idfsNationality,idfsHumanGender,datDateofBirth,datDateOfDeath,strLastName,strSecondName,strFirstName,strRegistrationPhone,
			strEmployerName,strHomePhone,strWorkPhone,idfsPersonIDType,strPersonID,datModIFicationDate,idfCurrentResidenceAddress,idfEmployerAddress,idfRegistrationAddress
			from dbo.tlbHuman
			WHERE idfHuman = @idfHuman AND intRowStatus = 0 
		END
		--Data Audit - End

        INSERT INTO @SupressSELECTHumanCase
        EXEC dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @idfHumanActual,
                                                @idfHuman OUTPUT,
                                                @returnCode OUTPUT,
                                                @returnMsg OUTPUT
																	
		--Data Audit - Start
		--Get values After edit
		IF @idfsDataAuditEventType = 10016003
		BEGIN
			--Get values after edit			
			insert into @tlbHuman_AfterEdit
			(idfHuman,idfHumanActual,idfsOccupationType,idfsNationality,idfsHumanGender,datDateofBirth,datDateOfDeath,strLastName,strSecondName,strFirstName,strRegistrationPhone,
			strEmployerName,strHomePhone,strWorkPhone,idfsPersonIDType,strPersonID,datModIFicationDate,idfCurrentResidenceAddress,idfEmployerAddress,idfRegistrationAddress)
			select idfHuman,idfHumanActual,idfsOccupationType,idfsNationality,idfsHumanGender,datDateofBirth,datDateOfDeath,strLastName,strSecondName,strFirstName,strRegistrationPhone,
			strEmployerName,strHomePhone,strWorkPhone,idfsPersonIDType,strPersonID,datModIFicationDate,idfCurrentResidenceAddress,idfEmployerAddress,idfRegistrationAddress
			from dbo.tlbHuman
			WHERE idfHuman = @idfHuman AND intRowStatus = 0 
		END

		SET @idfObjectHuman = @idfHuman 
		IF @idfsDataAuditEventType = 10016001
		BEGIN 
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeHuman,@idfObjectHuman, @idfObjectHumanTable, @idfDataAuditEventHuman OUTPUT

			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				values ( @idfDataAuditEventHuman, @idfObjectHumanTable, @idfObjectHuman)
		END
		ELSE IF @idfsDataAuditEventType = 10016003			
		BEGIN
			IF EXISTS 
			(
				select *
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman  
				where (ISNULL(a.idfsOccupationType,'') <> ISNULL(b.idfsOccupationType,'')) OR (ISNULL(a.idfsNationality,'') <> ISNULL(b.idfsNationality,'')) OR 
					(ISNULL(a.idfsHumanGender,'') <> ISNULL(b.idfsHumanGender,'')) OR (ISNULL(a.datDateofBirth,'') <> ISNULL(b.datDateofBirth,'')) OR 
					(ISNULL(a.datDateOfDeath,'') <> ISNULL(b.datDateOfDeath,'')) OR (ISNULL(a.strLastName,'') <> ISNULL(b.strLastName,'')) OR 
					(ISNULL(a.strSecondName,'') <> ISNULL(b.strSecondName,'')) OR (ISNULL(a.strFirstName,'') <> ISNULL(b.strFirstName,'')) OR 
					(ISNULL(a.strRegistrationPhone,'') <> ISNULL(b.strRegistrationPhone,'')) OR (ISNULL(a.strEmployerName,'') <> ISNULL(b.strEmployerName,'')) OR 
					(ISNULL(a.strHomePhone,'') <> ISNULL(b.strHomePhone,'')) OR (ISNULL(a.strWorkPhone,'') <> ISNULL(b.strWorkPhone,'')) OR 
					(ISNULL(a.idfsPersonIDType,'') <> ISNULL(b.idfsPersonIDType,'')) OR (ISNULL(a.strPersonID,'') <> ISNULL(b.strPersonID,'')) OR 
					(ISNULL(a.datModIFicationDate,'') <> ISNULL(b.datModIFicationDate,'')) OR (ISNULL(a.idfCurrentResidenceAddress,'') <> ISNULL(b.idfCurrentResidenceAddress,'')) OR 
					(ISNULL(a.idfEmployerAddress,'') <> ISNULL(b.idfEmployerAddress,'')) OR (ISNULL(a.idfRegistrationAddress,'') <> ISNULL(b.idfRegistrationAddress,''))  
			)
			BEGIN
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeHuman,@idfObjectHuman, @idfObjectHumanTable, @idfDataAuditEventHuman OUTPUT

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79410000000,@idfObjectHuman,null,a.idfsOccupationType,b.idfsOccupationType 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfsOccupationType,'') <> ISNULL(b.idfsOccupationType,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79400000000,@idfObjectHuman,null,a.idfsNationality,b.idfsNationality 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfsNationality,'') <> ISNULL(b.idfsNationality,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79390000000,@idfObjectHuman,null,a.idfsHumanGender,b.idfsHumanGender 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfsHumanGender,'') <> ISNULL(b.idfsHumanGender,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79330000000,@idfObjectHuman,null,a.datDateofBirth,b.datDateofBirth 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.datDateofBirth,'') <> ISNULL(b.datDateofBirth,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79340000000,@idfObjectHuman,null,a.datDateOfDeath,b.datDateOfDeath 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.datDateOfDeath,'') <> ISNULL(b.datDateOfDeath,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79450000000,@idfObjectHuman,null,a.strLastName,b.strLastName 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strLastName,'') <> ISNULL(b.strLastName,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79470000000,@idfObjectHuman,null,a.strSecondName,b.strSecondName 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strSecondName,'') <> ISNULL(b.strSecondName,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79430000000,@idfObjectHuman,null,a.strFirstName,b.strFirstName 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strFirstName,'') <> ISNULL(b.strFirstName,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79460000000,@idfObjectHuman,null,a.strRegistrationPhone,b.strRegistrationPhone 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strRegistrationPhone,'') <> ISNULL(b.strRegistrationPhone,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79420000000,@idfObjectHuman,null,a.strEmployerName,b.strEmployerName 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strEmployerName,'') <> ISNULL(b.strEmployerName,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79440000000,@idfObjectHuman,null,a.strHomePhone,b.strHomePhone 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strHomePhone,'') <> ISNULL(b.strHomePhone,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79480000000,@idfObjectHuman,null,a.strWorkPhone,b.strWorkPhone 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strWorkPhone,'') <> ISNULL(b.strWorkPhone,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,12014460000000,@idfObjectHuman,null,a.idfsPersonIDType,b.idfsPersonIDType 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfsPersonIDType,'') <> ISNULL(b.idfsPersonIDType,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,12014470000000,@idfObjectHuman,null,a.strPersonID,b.strPersonID 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strPersonID,'') <> ISNULL(b.strPersonID,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,51389540000000,@idfObjectHuman,null,a.datModIFicationDate,b.datModIFicationDate 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.datModIFicationDate,'') <> ISNULL(b.datModIFicationDate,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79350000000,@idfObjectHuman,null,a.idfCurrentResidenceAddress,b.idfCurrentResidenceAddress 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfCurrentResidenceAddress,'') <> ISNULL(b.idfCurrentResidenceAddress,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79360000000,@idfObjectHuman,null,a.idfEmployerAddress,b.idfEmployerAddress 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfEmployerAddress,'') <> ISNULL(b.idfEmployerAddress,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79380000000,@idfObjectHuman,null,a.idfRegistrationAddress,b.idfRegistrationAddress 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfRegistrationAddress,'') <> ISNULL(b.idfRegistrationAddress,'')) 
			END
		END										
		--Data Audit - End

        IF @returnCode <> 0
        BEGIN
            RETURN
        END
    END 
		
	--Audit - ToDo - Location - insert
    --TODO: Needs to be refactored to use Hierarchy
    -- Insert or update geolocation record if any of the information is provided
    IF @idfsLocationGroundType IS NOT NULL
        OR @idfsGeoLocationType IS NOT NULL
        OR @idfsLocationCountry IS NOT NULL
        OR @idfsLocationRegion IS NOT NULL
        OR @idfsLocationRayon IS NOT NULL
        OR @idfsLocationSettlement IS NOT NULL
        OR @strLocationDescription IS NOT NULL
        OR @intLocationLatitude IS NOT NULL
        OR @intLocationLongitude IS NOT NULL
        OR @intLocationDistance IS NOT NULL
        OR @intLocationDirection IS NOT NULL
        OR @strForeignAddress IS NOT NULL
        OR @intElevation IS NOT NULL
    BEGIN
		--Data Audit - Location - Start
		--Variables
		DECLARE @idfsObjectTypeLocation bigint = 10017079;
		DECLARE @idfObjectLocation bigint = @idfPointGeoLocation;
		DECLARE @idfObjectLocationTable bigint = 75600000000;
		DECLARE @tlbLocation_BeforeEdit TABLE
		(
			idfGeoLocation BIGINT,idfsGroundType BIGINT,idfsGeoLocationType BIGINT,idfsCountry BIGINT,idfsRegion BIGINT,idfsRayon BIGINT,
			idfsSettlement BIGINT,idfsLocation BIGINT,strDescription NVARCHAR(200),dblDistance FLOAT,dblLatitude FLOAT,dblLongitude FLOAT,
			dblAccuracy FLOAT,dblAlignment FLOAT,strForeignAddress NVARCHAR(200), blnForeignAddress BIT,dblElevation FLOAT
		)
		DECLARE @tlbLocation_AfterEdit TABLE
		(
			idfGeoLocation BIGINT,idfsGroundType BIGINT,idfsGeoLocationType BIGINT,idfsCountry BIGINT,idfsRegion BIGINT,idfsRayon BIGINT,
			idfsSettlement BIGINT,idfsLocation BIGINT,strDescription NVARCHAR(200),dblDistance FLOAT,dblLatitude FLOAT,dblLongitude FLOAT,
			dblAccuracy FLOAT,dblAlignment FLOAT,strForeignAddress NVARCHAR(200), blnForeignAddress BIT,dblElevation FLOAT
		)
		DECLARE @idfDataAuditEventLocation bigint= NULL; 

		--Find Insert/Update/Delete
		IF @idfPointGeoLocation IS NULL
		BEGIN
			set @idfsDataAuditEventType = 10016001; --Insert
		END 
		ELSE 
		BEGIN 
			set @idfsDataAuditEventType = 10016003; --Update
		END 
			
		--Get values before edit
		IF @idfsDataAuditEventType = 10016003
		BEGIN 
			--Get values before edit			
			insert into @tlbLocation_BeforeEdit
			(idfGeoLocation,idfsGroundType,idfsGeoLocationType,idfsCountry,idfsRegion,idfsRayon,idfsSettlement,idfsLocation,strDescription,
			dblDistance,dblLatitude,dblLongitude,dblAccuracy,dblAlignment,strForeignAddress,blnForeignAddress,dblElevation)
			select idfGeoLocation,idfsGroundType,idfsGeoLocationType,idfsCountry,idfsRegion,idfsRayon,idfsSettlement,idfsLocation,strDescription,
			dblDistance,dblLatitude,dblLongitude,dblAccuracy,dblAlignment,strForeignAddress,blnForeignAddress,dblElevation
			from dbo.tlbGeoLocation
			WHERE idfGeoLocation = @idfPointGeoLocation --AND intRowStatus = 0 
		END
		--Data Audit - End
			
        -- Set geo location 
        IF @idfPointGeoLocation IS NULL
        BEGIN
            INSERT INTO @SupressSELECT
            EXEC dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbGeoLocation',
                                            @idfsKey = @idfPointGeoLocation OUTPUT
        END
        BEGIN
            INSERT INTO @SupressSELECTGeoLocation
            EXECUTE [dbo].[USP_HUMAN_DISEASE_GEOLOCATION_SET] @idfPointGeoLocation,
                                                                @idfsLocationGroundType,
                                                                @idfsGeoLocationType,
                                                                @idfsLocationCountry,
                                                                @idfsLocationRegion,
                                                                @idfsLocationRayon,
                                                                @idfsLocationSettlement,
                                                                @strLocationDescription,
                                                                @intLocationLatitude,
                                                                @intLocationLongitude,
                                                                NULL,
                                                                @intLocationDistance,
                                                                @intLocationDirection,
                                                                @strForeignAddress,
                                                                1,
                                                                @intElevation,
                                                                @AuditUser
        END

		--Data Audit - Start
		--Get values After edit
		IF @idfsDataAuditEventType = 10016003
		BEGIN
			--Get values after edit			
			insert into @tlbLocation_AfterEdit
			(idfGeoLocation,idfsGroundType,idfsGeoLocationType,idfsCountry,idfsRegion,idfsRayon,idfsSettlement,idfsLocation,strDescription,
			dblDistance,dblLatitude,dblLongitude,dblAccuracy,dblAlignment,strForeignAddress,blnForeignAddress,dblElevation)
			select idfGeoLocation,idfsGroundType,idfsGeoLocationType,idfsCountry,idfsRegion,idfsRayon,idfsSettlement,idfsLocation,strDescription,
			dblDistance,dblLatitude,dblLongitude,dblAccuracy,dblAlignment,strForeignAddress,blnForeignAddress,dblElevation
			from dbo.tlbGeoLocation
			WHERE idfGeoLocation = @idfPointGeoLocation --AND intRowStatus = 0
		END

		SET @idfObjectLocation = @idfPointGeoLocation 
		IF @idfsDataAuditEventType = 10016001
		BEGIN 
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeLocation,@idfObjectLocation, @idfObjectLocationTable, @idfDataAuditEventLocation OUTPUT

			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				values ( @idfDataAuditEventLocation, @idfObjectLocationTable, @idfObjectLocation)
		END
		ELSE IF @idfsDataAuditEventType = 10016003			
		BEGIN
			IF EXISTS 
			(
				select *
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsGroundType,'') <> ISNULL(b.idfsGroundType,'')) OR (ISNULL(a.idfsGeoLocationType,'') <> ISNULL(b.idfsGeoLocationType,'')) OR 
					(ISNULL(a.idfsCountry,'') <> ISNULL(b.idfsCountry,'')) OR (ISNULL(a.idfsRegion,'') <> ISNULL(b.idfsRegion,'')) OR 
					(ISNULL(a.idfsRayon,'') <> ISNULL(b.idfsRayon,'')) OR (ISNULL(a.idfsSettlement,'') <> ISNULL(b.idfsSettlement,'')) OR 
					(ISNULL(a.idfsLocation,'') <> ISNULL(b.idfsLocation,'')) OR (ISNULL(a.strDescription,'') <> ISNULL(b.strDescription,'')) OR 
					(ISNULL(a.dblDistance,'') <> ISNULL(b.dblDistance,'')) OR (ISNULL(a.dblLatitude,'') <> ISNULL(b.dblLatitude,'')) OR 
					(ISNULL(a.dblLongitude,'') <> ISNULL(b.dblLongitude,'')) OR (ISNULL(a.dblAccuracy,'') <> ISNULL(b.dblAccuracy,'')) OR 
					(ISNULL(a.dblAlignment,'') <> ISNULL(b.dblAlignment,'')) OR (ISNULL(a.strForeignAddress,'') <> ISNULL(b.strForeignAddress,'')) OR 
					(ISNULL(a.blnForeignAddress,'') <> ISNULL(b.blnForeignAddress,'')) OR (ISNULL(a.dblElevation,'') <> ISNULL(b.dblElevation,'')) 
			)
			BEGIN
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeLocation,@idfObjectLocation
					, @idfObjectLocationTable, @idfDataAuditEventLocation OUTPUT

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsGroundType,b.idfsGroundType 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsGroundType,'') <> ISNULL(b.idfsGroundType,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsGeoLocationType,b.idfsGeoLocationType 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsGeoLocationType,'') <> ISNULL(b.idfsGeoLocationType,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsCountry,b.idfsCountry 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsCountry,'') <> ISNULL(b.idfsCountry,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsRegion,b.idfsRegion 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsRegion,'') <> ISNULL(b.idfsRegion,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsRayon,b.idfsRayon 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsRayon,'') <> ISNULL(b.idfsRayon,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsSettlement,b.idfsSettlement 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsSettlement,'') <> ISNULL(b.idfsSettlement,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsLocation,b.idfsLocation 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsLocation,'') <> ISNULL(b.idfsLocation,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.strDescription,b.strDescription 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.strDescription,'') <> ISNULL(b.strDescription,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.dblDistance,b.dblDistance 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.dblDistance,'') <> ISNULL(b.dblDistance,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.dblLatitude,b.dblLatitude 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.dblLatitude,'') <> ISNULL(b.dblLatitude,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.dblLongitude,b.dblLongitude 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.dblLongitude,'') <> ISNULL(b.dblLongitude,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.dblAlignment,b.dblAlignment 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.dblAlignment,'') <> ISNULL(b.dblAlignment,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.strForeignAddress,b.strForeignAddress 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.strForeignAddress,'') <> ISNULL(b.strForeignAddress,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.blnForeignAddress,b.blnForeignAddress 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.blnForeignAddress,'') <> ISNULL(b.blnForeignAddress,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.dblElevation,b.dblElevation 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.dblElevation,'') <> ISNULL(b.dblElevation,'')) 
			END
		END										
		--Data Audit - End
    END
		
	--HumanCase
	BEGIN
		--Data Audit - HumanCase - Start
		--Variables
		DECLARE @idfsObjectTypeHumanCase bigint = 10017079;
		DECLARE @idfObjectHumanCase bigint = @SaveID;
		DECLARE @idfObjectHumanCaseTable bigint = 75610000000;
		DECLARE @tlbHumanCase_BeforeEdit TABLE
		(
			strCaseId NVARCHAR(200),idfsTentativeDiagnosis BIGINT,idfsFinalDiagnosis BIGINT,datTentativeDiagnosisDate DATETIME,datFinalDiagnosisDate DATETIME,datNotIFicationDate DATETIME,
			idfsFinalState BIGINT,idfSentByOffice BIGINT,strSentByFirstName NVARCHAR(200),strSentByPatronymicName NVARCHAR(200),strSentByLastName NVARCHAR(200),idfSentByPerson BIGINT,
			idfReceivedByOffice BIGINT,strReceivedByFirstName NVARCHAR(200),strReceivedByPatronymicName NVARCHAR(200),strReceivedByLastName NVARCHAR(200),idfReceivedByPerson BIGINT,
			strLocalIdentifier NVARCHAR(200),idfsHospitalizationStatus BIGINT,idfHospital BIGINT,strCurrentLocation NVARCHAR(200),datOnSetDate DATETIME,idfsInitialCaseStatus BIGINT,
			idfsYNPreviouslySoughtCare BIGINT,datFirstSoughtCareDate DATETIME,idfSoughtCareFacility BIGINT,idfsNonNotIFiableDiagnosis BIGINT,idfsYNHospitalization BIGINT,
			datHospitalizationDate DATETIME,datDischargeDate DATETIME,strHospitalizationPlace NVARCHAR(200),idfsYNAntimicrobialTherapy BIGINT,strClinicalNotes NVARCHAR(2000),
			idfsYNSpecificVaccinationAdministered BIGINT,idfInvestigatedByOffice BIGINT,datInvestigationStartDate DATETIME,idfsYNRelatedToOutbreak BIGINT,idfOutbreak BIGINT,
			idfsYNExposureLocationKnown BIGINT,idfPointGeoLocation BIGINT,datExposureDate DATETIME,strNote NVARCHAR(2000),idfsFinalCaseStatus BIGINT,idfsOutcome BIGINT,
			idfsCaseProgressStatus BIGINT,datModificationDate DATETIME,idfsYNSpecimenCollected BIGINT,idfsYNTestsConducted BIGINT,DiseaseReportTypeID BIGINT,blnClinicalDiagBasis BIT,
			blnLabDiagBasis BIT,blnEpiDiagBasis BIT,datFinalCaseClassificationDate DATETIME,strsummarynotes NVARCHAR(2000),idfEpiObservation BIGINT,idfCSObservation BIGINT,
			strEpidemiologistsName NVARCHAR(2000),idfsNotCollectedReason BIGINT,strNotCollectedReason NVARCHAR(200),idfsHumanAgeType BIGINT,intPatientAge INT,datCompletionPaperFormDate DATETIME,
			idfInvestigatedByPerson BIGINT,idfPersonEnteredBy BIGINT,idfsSite BIGINT,idfHumanCase BIGINT
		)
		DECLARE @tlbHumanCase_AfterEdit TABLE
		(
			strCaseId NVARCHAR(200),idfsTentativeDiagnosis BIGINT,idfsFinalDiagnosis BIGINT,datTentativeDiagnosisDate DATETIME,datFinalDiagnosisDate DATETIME,datNotIFicationDate DATETIME,
			idfsFinalState BIGINT,idfSentByOffice BIGINT,strSentByFirstName NVARCHAR(200),strSentByPatronymicName NVARCHAR(200),strSentByLastName NVARCHAR(200),idfSentByPerson BIGINT,
			idfReceivedByOffice BIGINT,strReceivedByFirstName NVARCHAR(200),strReceivedByPatronymicName NVARCHAR(200),strReceivedByLastName NVARCHAR(200),idfReceivedByPerson BIGINT,
			strLocalIdentifier NVARCHAR(200),idfsHospitalizationStatus BIGINT,idfHospital BIGINT,strCurrentLocation NVARCHAR(200),datOnSetDate DATETIME,idfsInitialCaseStatus BIGINT,
			idfsYNPreviouslySoughtCare BIGINT,datFirstSoughtCareDate DATETIME,idfSoughtCareFacility BIGINT,idfsNonNotIFiableDiagnosis BIGINT,idfsYNHospitalization BIGINT,
			datHospitalizationDate DATETIME,datDischargeDate DATETIME,strHospitalizationPlace NVARCHAR(200),idfsYNAntimicrobialTherapy BIGINT,strClinicalNotes NVARCHAR(2000),
			idfsYNSpecificVaccinationAdministered BIGINT,idfInvestigatedByOffice BIGINT,datInvestigationStartDate DATETIME,idfsYNRelatedToOutbreak BIGINT,idfOutbreak BIGINT,
			idfsYNExposureLocationKnown BIGINT,idfPointGeoLocation BIGINT,datExposureDate DATETIME,strNote NVARCHAR(2000),idfsFinalCaseStatus BIGINT,idfsOutcome BIGINT,
			idfsCaseProgressStatus BIGINT,datModificationDate DATETIME,idfsYNSpecimenCollected BIGINT,idfsYNTestsConducted BIGINT,DiseaseReportTypeID BIGINT,blnClinicalDiagBasis BIT,
			blnLabDiagBasis BIT,blnEpiDiagBasis BIT,datFinalCaseClassificationDate DATETIME,strsummarynotes NVARCHAR(2000),idfEpiObservation BIGINT,idfCSObservation BIGINT,
			strEpidemiologistsName NVARCHAR(2000),idfsNotCollectedReason BIGINT,strNotCollectedReason NVARCHAR(200),idfsHumanAgeType BIGINT,intPatientAge INT,datCompletionPaperFormDate DATETIME,
			idfInvestigatedByPerson BIGINT,idfPersonEnteredBy BIGINT,idfsSite BIGINT,idfHumanCase BIGINT
		)
		DECLARE @idfDataAuditEventHumanCase bigint= NULL; 
		set @idfsDataAuditEventType = 10016003;
		--Get values before edit			
		insert into @tlbHumanCase_BeforeEdit
		(strCaseId,idfsTentativeDiagnosis,idfsFinalDiagnosis,datTentativeDiagnosisDate,datFinalDiagnosisDate,datNotIFicationDate,idfsFinalState,idfSentByOffice,strSentByFirstName
		,strSentByPatronymicName,strSentByLastName,idfSentByPerson,idfReceivedByOffice,strReceivedByFirstName,strReceivedByPatronymicName,strReceivedByLastName,idfReceivedByPerson,strLocalIdentifier 
		,idfsHospitalizationStatus,idfHospital,strCurrentLocation,datOnSetDate,idfsInitialCaseStatus,idfsYNPreviouslySoughtCare,datFirstSoughtCareDate,idfSoughtCareFacility
		,idfsNonNotIFiableDiagnosis,idfsYNHospitalization,datHospitalizationDate,datDischargeDate,strHospitalizationPlace,idfsYNAntimicrobialTherapy,strClinicalNotes
		,idfsYNSpecificVaccinationAdministered,idfInvestigatedByOffice,datInvestigationStartDate,idfsYNRelatedToOutbreak,idfOutbreak,idfsYNExposureLocationKnown,idfPointGeoLocation,datExposureDate
		,strNote,idfsFinalCaseStatus,idfsOutcome,idfsCaseProgressStatus,datModificationDate,idfsYNSpecimenCollected,idfsYNTestsConducted,DiseaseReportTypeID,blnClinicalDiagBasis
		,blnLabDiagBasis,blnEpiDiagBasis,datFinalCaseClassificationDate,strsummarynotes,idfEpiObservation,idfCSObservation,strEpidemiologistsName,idfsNotCollectedReason,strNotCollectedReason
		,idfsHumanAgeType,intPatientAge,datCompletionPaperFormDate,idfInvestigatedByPerson,idfPersonEnteredBy,idfsSite,idfHumanCase)
		select strCaseId,idfsTentativeDiagnosis,idfsFinalDiagnosis,datTentativeDiagnosisDate,datFinalDiagnosisDate,datNotIFicationDate,idfsFinalState,idfSentByOffice,strSentByFirstName
		,strSentByPatronymicName,strSentByLastName,idfSentByPerson,idfReceivedByOffice,strReceivedByFirstName,strReceivedByPatronymicName,strReceivedByLastName,idfReceivedByPerson,strLocalIdentifier 
		,idfsHospitalizationStatus,idfHospital,strCurrentLocation,datOnSetDate,idfsInitialCaseStatus,idfsYNPreviouslySoughtCare,datFirstSoughtCareDate,idfSoughtCareFacility
		,idfsNonNotIFiableDiagnosis,idfsYNHospitalization,datHospitalizationDate,datDischargeDate,strHospitalizationPlace,idfsYNAntimicrobialTherapy,strClinicalNotes
		,idfsYNSpecificVaccinationAdministered,idfInvestigatedByOffice,datInvestigationStartDate,idfsYNRelatedToOutbreak,idfOutbreak,idfsYNExposureLocationKnown,idfPointGeoLocation,datExposureDate
		,strNote,idfsFinalCaseStatus,idfsOutcome,idfsCaseProgressStatus,datModificationDate,idfsYNSpecimenCollected,idfsYNTestsConducted,DiseaseReportTypeID,blnClinicalDiagBasis
		,blnLabDiagBasis,blnEpiDiagBasis,datFinalCaseClassificationDate,strsummarynotes,idfEpiObservation,idfCSObservation,strEpidemiologistsName,idfsNotCollectedReason,strNotCollectedReason
		,idfsHumanAgeType,intPatientAge,datCompletionPaperFormDate,idfInvestigatedByPerson,idfPersonEnteredBy,idfsSite,idfHumanCase
		from dbo.tlbHumanCase 
		WHERE idfHumanCase = @SaveID AND intRowStatus = 0
		--Data Audit - End
		 
		BEGIN --Update Survivor report data
			UPDATE dbo.tlbHumanCase
			SET strCaseId = @strHumanCaseId,
				idfsTentativeDiagnosis = @idfsFinalDiagnosis,
				idfsFinalDiagnosis = @idfsFinalDiagnosis,
				datTentativeDiagnosisDate = @datDateOfDiagnosis,
				datFinalDiagnosisDate = @datDateOfDiagnosis,
				datNotIFicationDate = @datNotificationDate,
				idfsFinalState = @idfsFinalState,
				idfSentByOffice = @idfSentByOffice,
				strSentByFirstName = @strSentByFirstName,
				strSentByPatronymicName = @strSentByPatronymicName,
				strSentByLastName = @strSentByLastName,
				idfSentByPerson = @idfSentByPerson,
				idfReceivedByOffice = @idfReceivedByOffice,
				strReceivedByFirstName = @strReceivedByFirstName,
				strReceivedByPatronymicName = @strReceivedByPatronymicName,
				strReceivedByLastName = @strReceivedByLastName,
				idfReceivedByPerson = @idfReceivedByPerson,
				strLocalIdentifier = @strLocalIdentifier,
				idfsHospitalizationStatus = @idfsHospitalizationStatus,
				idfHospital = @idfHospital,
				strCurrentLocation = @strCurrentLocation,
				datOnSetDate = @datOnSetDate,
				idfsInitialCaseStatus = @idfsInitialCaseStatus,
				idfsYNPreviouslySoughtCare = @idfsYNPreviouslySoughtCare,
				datFirstSoughtCareDate = @datFirstSoughtCareDate,
				idfSoughtCareFacility = @idfSoughtCareFacility,
				idfsNonNotIFiableDiagnosis = @idfsNonNotIFiableDiagnosis,
				idfsYNHospitalization = @idfsYNHospitalization,
				datHospitalizationDate = @datHospitalizationDate,
				datDischargeDate = @datDischargeDate,
				strHospitalizationPlace = @strHospitalName,
				idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
				strClinicalNotes = @strClinicalNotes,
				idfsYNSpecificVaccinationAdministered = @idfsYNSpecificVaccinationAdministered,
				idfInvestigatedByOffice = @idfInvestigatedByOffice,
				datInvestigationStartDate = @StartDateofInvestigation,
				idfsYNRelatedToOutbreak = @idfsYNRelatedToOutbreak,
				idfOutbreak = @idfOutbreak,
				idfsYNExposureLocationKnown = @idfsYNExposureLocationKnown,
				idfPointGeoLocation = @idfPointGeoLocation,
				datExposureDate = @datExposureDate,
				strNote = @strNote,
				idfsFinalCaseStatus = @idfsFinalCaseStatus,
				idfsOutcome = @idfsOutcome,
				idfsCaseProgressStatus = @idfsCaseProgressStatus,
				datModificationDate = GETDATE(),
				idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
				idfsYNTestsConducted = @idfsYNTestsConducted,
				DiseaseReportTypeID = @DiseaseReportTypeID,
				blnClinicalDiagBasis = @blnClinicalDiagBasis,
				blnLabDiagBasis = @blnLabDiagBasis,
				blnEpiDiagBasis = @blnEpiDiagBasis,
				datFinalCaseClassificationDate = @DateofClassification,
				strsummarynotes = @strSummaryNotes,
				idfEpiObservation = @idfEpiObservation,
				idfCSObservation = @idfCSObservation,
				strEpidemiologistsName = @strEpidemiologistsName,
				idfsNotCollectedReason = @idfsNotCollectedReason,
				strNotCollectedReason = @strNotCollectedReason,
				idfsHumanAgeType = @idfsHumanAgeType,
				intPatientAge = @intPatientAge,
				datCompletionPaperFormDate = @datCompletionPaperFormDate,
				idfInvestigatedByPerson = @idfInvestigatedByPerson,
				idfPersonEnteredBy = @idfPersonEnteredBy,
				idfsSite = @idfsSite,
				AuditUpdateUser = @AuditUser,
				AuditUpdateDTM = GETDATE(),
				idfParentMonitoringSession = @idfParentMonitoringSession
			WHERE idfHumanCase = @SaveID
					AND intRowStatus = 0
		END
		 
		--Data Audit - Start
		--Get values before edit			
		insert into @tlbHumanCase_AfterEdit
		(strCaseId,idfsTentativeDiagnosis,idfsFinalDiagnosis,datTentativeDiagnosisDate,datFinalDiagnosisDate,datNotIFicationDate,idfsFinalState,idfSentByOffice,strSentByFirstName
		,strSentByPatronymicName,strSentByLastName,idfSentByPerson,idfReceivedByOffice,strReceivedByFirstName,strReceivedByPatronymicName,strReceivedByLastName,idfReceivedByPerson,strLocalIdentifier 
		,idfsHospitalizationStatus,idfHospital,strCurrentLocation,datOnSetDate,idfsInitialCaseStatus,idfsYNPreviouslySoughtCare,datFirstSoughtCareDate,idfSoughtCareFacility
		,idfsNonNotIFiableDiagnosis,idfsYNHospitalization,datHospitalizationDate,datDischargeDate,strHospitalizationPlace,idfsYNAntimicrobialTherapy,strClinicalNotes
		,idfsYNSpecificVaccinationAdministered,idfInvestigatedByOffice,datInvestigationStartDate,idfsYNRelatedToOutbreak,idfOutbreak,idfsYNExposureLocationKnown,idfPointGeoLocation,datExposureDate
		,strNote,idfsFinalCaseStatus,idfsOutcome,idfsCaseProgressStatus,datModificationDate,idfsYNSpecimenCollected,idfsYNTestsConducted,DiseaseReportTypeID,blnClinicalDiagBasis
		,blnLabDiagBasis,blnEpiDiagBasis,datFinalCaseClassificationDate,strsummarynotes,idfEpiObservation,idfCSObservation,strEpidemiologistsName,idfsNotCollectedReason,strNotCollectedReason
		,idfsHumanAgeType,intPatientAge,datCompletionPaperFormDate,idfInvestigatedByPerson,idfPersonEnteredBy,idfsSite,idfHumanCase)
		select strCaseId,idfsTentativeDiagnosis,idfsFinalDiagnosis,datTentativeDiagnosisDate,datFinalDiagnosisDate,datNotIFicationDate,idfsFinalState,idfSentByOffice,strSentByFirstName
		,strSentByPatronymicName,strSentByLastName,idfSentByPerson,idfReceivedByOffice,strReceivedByFirstName,strReceivedByPatronymicName,strReceivedByLastName,idfReceivedByPerson,strLocalIdentifier 
		,idfsHospitalizationStatus,idfHospital,strCurrentLocation,datOnSetDate,idfsInitialCaseStatus,idfsYNPreviouslySoughtCare,datFirstSoughtCareDate,idfSoughtCareFacility
		,idfsNonNotIFiableDiagnosis,idfsYNHospitalization,datHospitalizationDate,datDischargeDate,strHospitalizationPlace,idfsYNAntimicrobialTherapy,strClinicalNotes
		,idfsYNSpecificVaccinationAdministered,idfInvestigatedByOffice,datInvestigationStartDate,idfsYNRelatedToOutbreak,idfOutbreak,idfsYNExposureLocationKnown,idfPointGeoLocation,datExposureDate
		,strNote,idfsFinalCaseStatus,idfsOutcome,idfsCaseProgressStatus,datModificationDate,idfsYNSpecimenCollected,idfsYNTestsConducted,DiseaseReportTypeID,blnClinicalDiagBasis
		,blnLabDiagBasis,blnEpiDiagBasis,datFinalCaseClassificationDate,strsummarynotes,idfEpiObservation,idfCSObservation,strEpidemiologistsName,idfsNotCollectedReason,strNotCollectedReason
		,idfsHumanAgeType,intPatientAge,datCompletionPaperFormDate,idfInvestigatedByPerson,idfPersonEnteredBy,idfsSite,idfHumanCase
		from dbo.tlbHumanCase 
		WHERE idfHumanCase = @SaveID AND intRowStatus = 0
		IF EXISTS 
		(
			select *
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase  
			where (ISNULL(a.strCaseId,'') <> ISNULL(b.strCaseId,'')) OR (ISNULL(a.idfsTentativeDiagnosis,'') <> ISNULL(b.idfsTentativeDiagnosis,'')) OR 
				(ISNULL(a.idfsFinalDiagnosis,'') <> ISNULL(b.idfsFinalDiagnosis,'')) OR (ISNULL(a.datTentativeDiagnosisDate,'') <> ISNULL(b.datTentativeDiagnosisDate,'')) OR 
				(ISNULL(a.datFinalDiagnosisDate,'') <> ISNULL(b.datFinalDiagnosisDate,'')) OR (ISNULL(a.datNotIFicationDate,'') <> ISNULL(b.datNotIFicationDate,'')) OR 
				(ISNULL(a.idfsFinalState,'') <> ISNULL(b.idfsFinalState,'')) OR (ISNULL(a.idfSentByOffice,'') <> ISNULL(b.idfSentByOffice,'')) OR 
				(ISNULL(a.strSentByFirstName,'') <> ISNULL(b.strSentByFirstName,'')) OR (ISNULL(a.strSentByPatronymicName,'') <> ISNULL(b.strSentByPatronymicName,'')) OR 
				(ISNULL(a.strSentByLastName,'') <> ISNULL(b.strSentByLastName,'')) OR (ISNULL(a.idfSentByPerson,'') <> ISNULL(b.idfSentByPerson,'')) OR 
				(ISNULL(a.idfReceivedByOffice,'') <> ISNULL(b.idfReceivedByOffice,'')) OR (ISNULL(a.strReceivedByFirstName,'') <> ISNULL(b.strReceivedByFirstName,'')) OR 
				(ISNULL(a.strReceivedByPatronymicName,'') <> ISNULL(b.strReceivedByPatronymicName,'')) OR (ISNULL(a.strReceivedByLastName,'') <> ISNULL(b.strReceivedByLastName,'')) OR 
				(ISNULL(a.idfReceivedByPerson,'') <> ISNULL(b.idfReceivedByPerson,'')) OR (ISNULL(a.strLocalIdentifier,'') <> ISNULL(b.strLocalIdentifier,'')) OR 
				(ISNULL(a.idfsHospitalizationStatus,'') <> ISNULL(b.idfsHospitalizationStatus,'')) OR (ISNULL(a.idfHospital,'') <> ISNULL(b.idfHospital,''))OR 
				(ISNULL(a.strCurrentLocation,'') <> ISNULL(b.strCurrentLocation,'')) OR (ISNULL(a.datOnSetDate,'') <> ISNULL(b.datOnSetDate,''))OR 
				(ISNULL(a.idfsInitialCaseStatus,'') <> ISNULL(b.idfsInitialCaseStatus,'')) OR (ISNULL(a.idfsYNPreviouslySoughtCare,'') <> ISNULL(b.idfsYNPreviouslySoughtCare,''))OR 
				(ISNULL(a.datFirstSoughtCareDate,'') <> ISNULL(b.datFirstSoughtCareDate,'')) OR (ISNULL(a.idfSoughtCareFacility,'') <> ISNULL(b.idfSoughtCareFacility,''))OR 
				(ISNULL(a.idfsNonNotIFiableDiagnosis,'') <> ISNULL(b.idfsNonNotIFiableDiagnosis,'')) OR (ISNULL(a.idfsYNHospitalization,'') <> ISNULL(b.idfsYNHospitalization,''))OR 
				(ISNULL(a.datHospitalizationDate,'') <> ISNULL(b.datHospitalizationDate,'')) OR (ISNULL(a.datDischargeDate,'') <> ISNULL(b.datDischargeDate,''))OR 
				(ISNULL(a.strHospitalizationPlace,'') <> ISNULL(b.strHospitalizationPlace,'')) OR (ISNULL(a.idfsYNAntimicrobialTherapy,'') <> ISNULL(b.idfsYNAntimicrobialTherapy,''))OR 
				(ISNULL(a.strClinicalNotes,'') <> ISNULL(b.strClinicalNotes,'')) OR (ISNULL(a.idfsYNSpecificVaccinationAdministered,'') <> ISNULL(b.idfsYNSpecificVaccinationAdministered,''))OR 
				(ISNULL(a.idfInvestigatedByOffice,'') <> ISNULL(b.idfInvestigatedByOffice,'')) OR (ISNULL(a.datInvestigationStartDate,'') <> ISNULL(b.datInvestigationStartDate,''))OR 
				(ISNULL(a.idfsYNRelatedToOutbreak,'') <> ISNULL(b.idfsYNRelatedToOutbreak,'')) OR (ISNULL(a.idfOutbreak,'') <> ISNULL(b.idfOutbreak,''))OR 
				(ISNULL(a.idfsYNExposureLocationKnown,'') <> ISNULL(b.idfsYNExposureLocationKnown,'')) OR (ISNULL(a.idfPointGeoLocation,'') <> ISNULL(b.idfPointGeoLocation,'')) OR 
				(ISNULL(a.datExposureDate,'') <> ISNULL(b.datExposureDate,'')) OR (ISNULL(a.strNote,'') <> ISNULL(b.strNote,'')) OR (ISNULL(a.idfsFinalCaseStatus,'') <> ISNULL(b.idfsFinalCaseStatus,'')) OR 
				(ISNULL(a.idfsOutcome,'') <> ISNULL(b.idfsOutcome,'')) OR (ISNULL(a.idfsCaseProgressStatus,'') <> ISNULL(b.idfsCaseProgressStatus,''))OR 
				(ISNULL(a.datModificationDate,'') <> ISNULL(b.datModificationDate,'')) OR (ISNULL(a.idfsYNSpecimenCollected,'') <> ISNULL(b.idfsYNSpecimenCollected,''))OR 
				(ISNULL(a.idfsYNTestsConducted,'') <> ISNULL(b.idfsYNTestsConducted,'')) OR (ISNULL(a.DiseaseReportTypeID,'') <> ISNULL(b.DiseaseReportTypeID,''))OR 
				(ISNULL(a.blnClinicalDiagBasis,'') <> ISNULL(b.blnClinicalDiagBasis,'')) OR (ISNULL(a.blnLabDiagBasis,'') <> ISNULL(b.blnLabDiagBasis,''))OR 
				(ISNULL(a.blnEpiDiagBasis,'') <> ISNULL(b.blnEpiDiagBasis,'')) OR (ISNULL(a.datFinalCaseClassificationDate,'') <> ISNULL(b.datFinalCaseClassificationDate,''))OR 
				(ISNULL(a.strsummarynotes,'') <> ISNULL(b.strsummarynotes,'')) OR (ISNULL(a.idfEpiObservation,'') <> ISNULL(b.idfEpiObservation,''))OR 
				(ISNULL(a.idfCSObservation,'') <> ISNULL(b.idfCSObservation,'')) OR (ISNULL(a.strEpidemiologistsName,'') <> ISNULL(b.strEpidemiologistsName,''))OR 
				(ISNULL(a.idfsNotCollectedReason,'') <> ISNULL(b.idfsNotCollectedReason,'')) OR (ISNULL(a.strNotCollectedReason,'') <> ISNULL(b.strNotCollectedReason,'')) OR 
				(ISNULL(a.idfsHumanAgeType,'') <> ISNULL(b.idfsHumanAgeType,'')) OR (ISNULL(a.intPatientAge,'') <> ISNULL(b.intPatientAge,'')) OR 
				(ISNULL(a.datCompletionPaperFormDate,'') <> ISNULL(b.datCompletionPaperFormDate,'')) OR (ISNULL(a.idfInvestigatedByPerson,'') <> ISNULL(b.idfInvestigatedByPerson,'')) OR 
				(ISNULL(a.idfPersonEnteredBy,'') <> ISNULL(b.idfPersonEnteredBy,'')) OR (ISNULL(a.idfsSite,'') <> ISNULL(b.idfsSite,''))
		)
		BEGIN
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeHumanCase,@idfObjectHumanCase, @idfObjectHumanCaseTable, @idfDataAuditEventHumanCase OUTPUT

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,12665430000000,@idfObjectHumanCase,null,a.strCaseId,b.strCaseId 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strCaseId,'') <> ISNULL(b.strCaseId,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79720000000,@idfObjectHumanCase,null,a.idfsTentativeDiagnosis,b.idfsTentativeDiagnosis 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsTentativeDiagnosis,'') <> ISNULL(b.idfsTentativeDiagnosis,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79660000000,@idfObjectHumanCase,null,a.idfsFinalDiagnosis,b.idfsFinalDiagnosis 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsFinalDiagnosis,'') <> ISNULL(b.idfsFinalDiagnosis,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79600000000,@idfObjectHumanCase,null,a.datTentativeDiagnosisDate,b.datTentativeDiagnosisDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datTentativeDiagnosisDate,'') <> ISNULL(b.datTentativeDiagnosisDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855740000000,@idfObjectHumanCase,null,a.datNotIFicationDate,b.datNotIFicationDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datNotIFicationDate,'') <> ISNULL(b.datNotIFicationDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79560000000,@idfObjectHumanCase,null,a.datFinalDiagnosisDate,b.datFinalDiagnosisDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datFinalDiagnosisDate,'') <> ISNULL(b.datFinalDiagnosisDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79670000000,@idfObjectHumanCase,null,a.idfsFinalState,b.idfsFinalState 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsFinalState,'') <> ISNULL(b.idfsFinalState,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855700000000,@idfObjectHumanCase,null,a.idfSentByOffice,b.idfSentByOffice 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfSentByOffice,'') <> ISNULL(b.idfSentByOffice,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79880000000,@idfObjectHumanCase,null,a.strSentByFirstName,b.strSentByFirstName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strSentByFirstName,'') <> ISNULL(b.strSentByFirstName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79900000000,@idfObjectHumanCase,null,a.strSentByPatronymicName,b.strSentByPatronymicName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strSentByPatronymicName,'') <> ISNULL(b.strSentByPatronymicName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,4578390000000,@idfObjectHumanCase,null,a.idfSentByPerson,b.idfSentByPerson 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfSentByPerson,'') <> ISNULL(b.idfSentByPerson,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79890000000,@idfObjectHumanCase,null,a.strSentByLastName,b.strSentByLastName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strSentByLastName,'') <> ISNULL(b.strSentByLastName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79640000000,@idfObjectHumanCase,null,a.idfReceivedByOffice,b.idfReceivedByOffice 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfReceivedByOffice,'') <> ISNULL(b.idfReceivedByOffice,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79850000000,@idfObjectHumanCase,null,a.strReceivedByFirstName,b.strReceivedByFirstName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strReceivedByFirstName,'') <> ISNULL(b.strReceivedByFirstName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79870000000,@idfObjectHumanCase,null,a.strReceivedByPatronymicName,b.strReceivedByPatronymicName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strReceivedByPatronymicName,'') <> ISNULL(b.strReceivedByPatronymicName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79860000000,@idfObjectHumanCase,null,a.strReceivedByLastName,b.strReceivedByLastName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strReceivedByLastName,'') <> ISNULL(b.strReceivedByLastName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,4578400000000,@idfObjectHumanCase,null,a.idfReceivedByPerson,b.idfReceivedByPerson 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfReceivedByPerson,'') <> ISNULL(b.idfReceivedByPerson,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79820000000,@idfObjectHumanCase,null,a.strLocalIdentifier,b.strLocalIdentifier 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strLocalIdentifier,'') <> ISNULL(b.strLocalIdentifier,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79680000000,@idfObjectHumanCase,null,a.idfsHospitalizationStatus,b.idfsHospitalizationStatus 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsHospitalizationStatus,'') <> ISNULL(b.idfsHospitalizationStatus,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,51523420000000,@idfObjectHumanCase,null,a.idfHospital,b.idfHospital 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfHospital,'') <> ISNULL(b.idfHospital,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79790000000,@idfObjectHumanCase,null,a.strCurrentLocation,b.strCurrentLocation 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strCurrentLocation,'') <> ISNULL(b.strCurrentLocation,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855760000000,@idfObjectHumanCase,null,a.datOnSetDate,b.datOnSetDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datOnSetDate,'') <> ISNULL(b.datOnSetDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79700000000,@idfObjectHumanCase,null,a.idfsInitialCaseStatus,b.idfsInitialCaseStatus 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsInitialCaseStatus,'') <> ISNULL(b.idfsInitialCaseStatus,''))

			--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			--select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,49545390000000,@idfObjectHumanCase,null,a.idfsYNPreviouslySoughtCare,b.idfsYNPreviouslySoughtCare 
			--from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			--where (ISNULL(a.idfsYNPreviouslySoughtCare,'') <> ISNULL(b.idfsYNPreviouslySoughtCare,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855750000000,@idfObjectHumanCase,null,a.datFirstSoughtCareDate,b.datFirstSoughtCareDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datFirstSoughtCareDate,'') <> ISNULL(b.datFirstSoughtCareDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,12014650000000,@idfObjectHumanCase,null,a.idfSoughtCareFacility,b.idfSoughtCareFacility 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfSoughtCareFacility,'') <> ISNULL(b.idfSoughtCareFacility,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,12014660000000,@idfObjectHumanCase,null,a.idfsNonNotIFiableDiagnosis,b.idfsNonNotIFiableDiagnosis 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsNonNotIFiableDiagnosis,'') <> ISNULL(b.idfsNonNotIFiableDiagnosis,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79740000000,@idfObjectHumanCase,null,a.idfsYNHospitalization,b.idfsYNHospitalization 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsYNHospitalization,'') <> ISNULL(b.idfsYNHospitalization,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79570000000,@idfObjectHumanCase,null,a.datHospitalizationDate,b.datHospitalizationDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datHospitalizationDate,'') <> ISNULL(b.datHospitalizationDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79530000000,@idfObjectHumanCase,null,a.datDischargeDate,b.datDischargeDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datDischargeDate,'') <> ISNULL(b.datDischargeDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79810000000,@idfObjectHumanCase,null,a.strHospitalizationPlace,b.strHospitalizationPlace 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strHospitalizationPlace,'') <> ISNULL(b.strHospitalizationPlace,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79730000000,@idfObjectHumanCase,null,a.idfsYNAntimicrobialTherapy,b.idfsYNAntimicrobialTherapy 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsYNAntimicrobialTherapy,'') <> ISNULL(b.idfsYNAntimicrobialTherapy,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855770000000,@idfObjectHumanCase,null,a.strClinicalNotes,b.strClinicalNotes 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strClinicalNotes,'') <> ISNULL(b.strClinicalNotes,''))

			--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			--select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,49545390000000,@idfObjectHumanCase,null,a.idfsYNSpecificVaccinationAdministered,b.idfsYNSpecificVaccinationAdministered 
			--from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			--where (ISNULL(a.idfsYNSpecificVaccinationAdministered,'') <> ISNULL(b.idfsYNSpecificVaccinationAdministered,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79620000000,@idfObjectHumanCase,null,a.idfInvestigatedByOffice,b.idfInvestigatedByOffice 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfInvestigatedByOffice,'') <> ISNULL(b.idfInvestigatedByOffice,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79580000000,@idfObjectHumanCase,null,a.datInvestigationStartDate,b.datInvestigationStartDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datInvestigationStartDate,'') <> ISNULL(b.datInvestigationStartDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79750000000,@idfObjectHumanCase,null,a.idfsYNRelatedToOutbreak,b.idfsYNRelatedToOutbreak 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsYNRelatedToOutbreak,'') <> ISNULL(b.idfsYNRelatedToOutbreak,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,12665410000000,@idfObjectHumanCase,null,a.idfOutbreak,b.idfOutbreak 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfOutbreak,'') <> ISNULL(b.idfOutbreak,''))

			--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			--select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,49545390000000,@idfObjectHumanCase,null,a.idfsYNExposureLocationKnown,b.idfsYNExposureLocationKnown 
			--from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			--where (ISNULL(a.idfsYNExposureLocationKnown,'') <> ISNULL(b.idfsYNExposureLocationKnown,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79630000000,@idfObjectHumanCase,null,a.idfPointGeoLocation,b.idfPointGeoLocation 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfPointGeoLocation,'') <> ISNULL(b.idfPointGeoLocation,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79540000000,@idfObjectHumanCase,null,a.datExposureDate,b.datExposureDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datExposureDate,'') <> ISNULL(b.datExposureDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79840000000,@idfObjectHumanCase,null,a.strNote,b.strNote 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strNote,'') <> ISNULL(b.strNote,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855690000000,@idfObjectHumanCase,null,a.idfsFinalCaseStatus,b.idfsFinalCaseStatus 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsFinalCaseStatus,'') <> ISNULL(b.idfsFinalCaseStatus,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79710000000,@idfObjectHumanCase,null,a.idfsOutcome,b.idfsOutcome 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsOutcome,'') <> ISNULL(b.idfsOutcome,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,12665440000000,@idfObjectHumanCase,null,a.idfsCaseProgressStatus,b.idfsCaseProgressStatus 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsCaseProgressStatus,'') <> ISNULL(b.idfsCaseProgressStatus,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79590000000,@idfObjectHumanCase,null,a.datModificationDate,b.datModificationDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datModificationDate,'') <> ISNULL(b.datModificationDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79760000000,@idfObjectHumanCase,null,a.idfsYNSpecimenCollected,b.idfsYNSpecimenCollected 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsYNSpecimenCollected,'') <> ISNULL(b.idfsYNSpecimenCollected,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,4578420000000,@idfObjectHumanCase,null,a.idfsYNTestsConducted,b.idfsYNTestsConducted 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsYNTestsConducted,'') <> ISNULL(b.idfsYNTestsConducted,''))

			--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			--select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,49545390000000,@idfObjectHumanCase,null,a.DiseaseReportTypeID,b.DiseaseReportTypeID 
			--from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			--where (ISNULL(a.DiseaseReportTypeID,'') <> ISNULL(b.DiseaseReportTypeID,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79490000000,@idfObjectHumanCase,null,a.blnClinicalDiagBasis,b.blnClinicalDiagBasis 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.blnClinicalDiagBasis,'') <> ISNULL(b.blnClinicalDiagBasis,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79510000000,@idfObjectHumanCase,null,a.blnLabDiagBasis,b.blnLabDiagBasis 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.blnLabDiagBasis,'') <> ISNULL(b.blnLabDiagBasis,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79500000000,@idfObjectHumanCase,null,a.blnEpiDiagBasis,b.blnEpiDiagBasis 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.blnEpiDiagBasis,'') <> ISNULL(b.blnEpiDiagBasis,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,51389570000000,@idfObjectHumanCase,null,a.datFinalCaseClassificationDate,b.datFinalCaseClassificationDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datFinalCaseClassificationDate,'') <> ISNULL(b.datFinalCaseClassificationDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855780000000,@idfObjectHumanCase,null,a.strsummarynotes,b.strsummarynotes 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strsummarynotes,'') <> ISNULL(b.strsummarynotes,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855710000000,@idfObjectHumanCase,null,a.idfEpiObservation,b.idfEpiObservation 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfEpiObservation,'') <> ISNULL(b.idfEpiObservation,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855720000000,@idfObjectHumanCase,null,a.idfCSObservation,b.idfCSObservation 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfCSObservation,'') <> ISNULL(b.idfCSObservation,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79800000000,@idfObjectHumanCase,null,a.strEpidemiologistsName,b.strEpidemiologistsName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strEpidemiologistsName,'') <> ISNULL(b.strEpidemiologistsName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,12014670000000,@idfObjectHumanCase,null,a.idfsNotCollectedReason,b.idfsNotCollectedReason 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsNotCollectedReason,'') <> ISNULL(b.idfsNotCollectedReason,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79830000000,@idfObjectHumanCase,null,a.strNotCollectedReason,b.strNotCollectedReason 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strNotCollectedReason,'') <> ISNULL(b.strNotCollectedReason,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79690000000,@idfObjectHumanCase,null,a.idfsHumanAgeType,b.idfsHumanAgeType 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsHumanAgeType,'') <> ISNULL(b.idfsHumanAgeType,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79770000000,@idfObjectHumanCase,null,a.intPatientAge,b.intPatientAge 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.intPatientAge,'') <> ISNULL(b.intPatientAge,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79520000000,@idfObjectHumanCase,null,a.datCompletionPaperFormDate,b.datCompletionPaperFormDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datCompletionPaperFormDate,'') <> ISNULL(b.datCompletionPaperFormDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,4578410000000,@idfObjectHumanCase,null,a.idfInvestigatedByPerson,b.idfInvestigatedByPerson 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfInvestigatedByPerson,'') <> ISNULL(b.idfInvestigatedByPerson,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,4577910000000,@idfObjectHumanCase,null,a.idfPersonEnteredBy,b.idfPersonEnteredBy 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfPersonEnteredBy,'') <> ISNULL(b.idfPersonEnteredBy,''))

			--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			--select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,49545390000000,@idfObjectHumanCase,null,a.idfsSite,b.idfsSite 
			--from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			--where (ISNULL(a.idfsSite,'') <> ISNULL(b.idfsSite,''))
		END
		--Data Audit - End
	END
	
    --Set Samples for this idfHumanCase	
    IF @SamplesParameters IS NOT NULL
    BEGIN
		--Data Audit - Samples - Start
		--Variables
		DECLARE @idfsObjectTypeSamples bigint = 10017079;
		DECLARE @idfObjectSamples bigint = NULL;
		DECLARE @idfObjectSamplesTable bigint = 75620000000;
		DECLARE @tlbSamples_BeforeEdit TABLE
		(
			idfMaterial BIGINT,
			idfsSampleType BIGINT,
			idfHuman BIGINT,
			idfSpecies BIGINT,
			idfAnimal BIGINT,
			idfMonitoringSession BIGINT,
			idfFieldCollectedByPerson BIGINT,
			idfFieldCollectedByOffice BIGINT,
			datFieldCollectionDate DATETIME,
			datFieldSentDate DATETIME,
			strFieldBarcode NVARCHAR(200),
			idfVectorSurveillanceSession BIGINT,
			idfVector BIGINT,
			strNote NVARCHAR(500),
			idfsSite BIGINT,
			idfSendToOffice BIGINT,
			blnReadOnly BIT,
			idfHumanCase BIGINT,
			idfVetCase BIGINT,
			DiseaseID BIGINT,
			idfsBirdStatus BIGINT
		)
		DECLARE @tlbSamples_AfterEdit TABLE
		(
			idfMaterial BIGINT,
			idfsSampleType BIGINT,
			idfHuman BIGINT,
			idfSpecies BIGINT,
			idfAnimal BIGINT,
			idfMonitoringSession BIGINT,
			idfFieldCollectedByPerson BIGINT,
			idfFieldCollectedByOffice BIGINT,
			datFieldCollectionDate DATETIME,
			datFieldSentDate DATETIME,
			strFieldBarcode NVARCHAR(200),
			idfVectorSurveillanceSession BIGINT,
			idfVector BIGINT,
			strNote NVARCHAR(500),
			idfsSite BIGINT,
			idfSendToOffice BIGINT,
			blnReadOnly BIT,
			idfHumanCase BIGINT,
			idfVetCase BIGINT,
			DiseaseID BIGINT,
			idfsBirdStatus BIGINT
		) 
		DECLARE @idfDataAuditEventSamples bigint= NULL; 
		--Data Audit - End

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CAST(CollectionDate AS DATETIME),
                @SentDate = CAST(SentDate AS DATETIME),
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @Comments = Comments,
                @idfsSite = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @DiseaseID = DiseaseID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @HumanID = HumanID,
                @HumanMasterID = HumanMasterID,
                @RowAction = RowAction
            FROM @SamplesTemp;
				
			--Data Audit - Start
			--Find Insert/Update/Delete
			IF @RowAction = 1
			BEGIN
				set @idfsDataAuditEventType = 10016001; --Insert
			END
			ELSE IF @RowAction <> 1 and @RowStatus = 1
			BEGIN  
				set @idfsDataAuditEventType = 10016002; --Delete
			END
			ELSE 
			BEGIN 
				set @idfsDataAuditEventType = 10016003; --Update
			END
			--Get values before edit
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				insert into @tlbSamples_BeforeEdit
				(idfMaterial,idfsSampleType,idfHuman,idfSpecies,idfAnimal,idfMonitoringSession,idfFieldCollectedByPerson,idfFieldCollectedByOffice
				,datFieldCollectionDate,datFieldSentDate,strFieldBarcode,idfVectorSurveillanceSession,idfVector,strNote,idfsSite,idfSendToOffice,blnReadOnly 
				,idfHumanCase,idfVetCase,DiseaseID,idfsBirdStatus)
				select idfMaterial,idfsSampleType,idfHuman,idfSpecies,idfAnimal,idfMonitoringSession,idfFieldCollectedByPerson,idfFieldCollectedByOffice
				,datFieldCollectionDate,datFieldSentDate,strFieldBarcode,idfVectorSurveillanceSession,idfVector,strNote,idfsSite,idfSendToOffice,blnReadOnly 
				,idfHumanCase,idfVetCase,DiseaseID,idfsBirdStatus
				from tlbMaterial 
				where idfMaterial = @SampleID;
			END
			--Data Audit - End

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLE_SET @AuditUserName = @AuditUser,
                                            @SampleID = @SampleID OUTPUT,
                                            @SampleTypeID = @SampleTypeID,
                                            @RootSampleID = NULL,
                                            @ParentSampleID = NULL,
                                            @HumanID = @idfHuman,
                                            @SpeciesID = NULL,
                                            @AnimalID = NULL,
                                            @VectorID = NULL,
                                            @MonitoringSessionID = NULL,
                                            @VectorSessionID = NULL,
                                            @HumanDiseaseReportID = @SaveID,
                                            @VeterinaryDiseaseReportID = NULL,
                                            @CollectionDate = @CollectionDate,
                                            @CollectedByPersonID = @CollectedByPersonID,
                                            @CollectedByOrganizationID = @CollectedByOrganizationID,
                                            @SentDate = @SentDate,
                                            @SentToOrganizationID = @SentToOrganizationID,
                                            @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                            @SiteID = @idfsSite,
                                            @EnteredDate = @DateEntered,
                                            @ReadOnlyIndicator = @ReadOnlyIndicator,
                                            @SampleStatusTypeID = @SampleStatusTypeID,
                                            @Comments = @Comments,
                                            @CurrentSiteID = @CurrentSiteID,
                                            @DiseaseID = @DiseaseID,
                                            @BirdStatusTypeID = NULL,
                                            @RowStatus = @RowStatus,
                                            @RowAction = @RowAction
												
			--Data Audit - Start
			--Get values After edit
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				insert into @tlbSamples_AfterEdit
				(idfMaterial,idfsSampleType,idfHuman,idfSpecies,idfAnimal,idfMonitoringSession,idfFieldCollectedByPerson,idfFieldCollectedByOffice
				,datFieldCollectionDate,datFieldSentDate,strFieldBarcode,idfVectorSurveillanceSession,idfVector,strNote,idfsSite,idfSendToOffice,blnReadOnly 
				,idfHumanCase,idfVetCase,DiseaseID,idfsBirdStatus)
				select idfMaterial,idfsSampleType,idfHuman,idfSpecies,idfAnimal,idfMonitoringSession,idfFieldCollectedByPerson,idfFieldCollectedByOffice
				,datFieldCollectionDate,datFieldSentDate,strFieldBarcode,idfVectorSurveillanceSession,idfVector,strNote,idfsSite,idfSendToOffice,blnReadOnly 
				,idfHumanCase,idfVetCase,DiseaseID,idfsBirdStatus
				from tlbMaterial 
				where idfMaterial = @SampleID;
			END 

			SET @idfObjectSamples = @SampleID 
			IF @idfsDataAuditEventType =10016001
			Begin
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeSamples,@idfObjectSamples, @idfObjectSamplesTable, @idfDataAuditEventSamples OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEventSamples, @idfObjectSamplesTable, @idfObjectSamples)
			END
			ELSE IF @idfsDataAuditEventType =10016002
			BEGIN
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeSamples,@idfObjectSamples, @idfObjectSamplesTable, @idfDataAuditEventSamples OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject) VALUES (@idfDataAuditEventSamples, @idfObjectSamplesTable, @idfObjectSamples)
			END
			ELSE IF @idfsDataAuditEventType =10016003
			BEGIN
				IF EXISTS 
				(
					select *
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial  
					where (ISNULL(a.idfsSampleType,'') <> ISNULL(b.idfsSampleType,'')) OR (ISNULL(a.idfHuman,'') <> ISNULL(b.idfHuman,'')) OR 
						(ISNULL(a.idfSpecies,'') <> ISNULL(b.idfSpecies,'')) OR (ISNULL(a.idfAnimal,'') <> ISNULL(b.idfAnimal,'')) OR 
						(ISNULL(a.idfMonitoringSession,'') <> ISNULL(b.idfMonitoringSession,'')) OR (ISNULL(a.idfFieldCollectedByPerson,'') <> ISNULL(b.idfFieldCollectedByPerson,'')) OR 
						(ISNULL(a.idfFieldCollectedByOffice,'') <> ISNULL(b.idfFieldCollectedByOffice,'')) OR (ISNULL(a.datFieldCollectionDate,'') <> ISNULL(b.datFieldCollectionDate,'')) OR 
						(ISNULL(a.datFieldSentDate,'') <> ISNULL(b.datFieldSentDate,'')) OR (ISNULL(a.strFieldBarcode,'') <> ISNULL(b.strFieldBarcode,'')) OR 
						(ISNULL(a.idfVectorSurveillanceSession,'') <> ISNULL(b.idfVectorSurveillanceSession,'')) OR (ISNULL(a.idfVector,'') <> ISNULL(b.idfVector,'')) OR 
						(ISNULL(a.strNote,'') <> ISNULL(b.strNote,'')) OR (ISNULL(a.idfsSite,'') <> ISNULL(b.idfsSite,'')) OR 
						(ISNULL(a.idfSendToOffice,'') <> ISNULL(b.idfSendToOffice,'')) OR (ISNULL(a.blnReadOnly,'') <> ISNULL(b.blnReadOnly,'')) OR 
						(ISNULL(a.idfHumanCase,'') <> ISNULL(b.idfHumanCase,'')) OR (ISNULL(a.idfVetCase,'') <> ISNULL(b.idfVetCase,'')) OR 
						(ISNULL(a.DiseaseID,'') <> ISNULL(b.DiseaseID,'')) OR (ISNULL(a.idfsBirdStatus,'') <> ISNULL(b.idfsBirdStatus,''))
				)
				BEGIN
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeSamples,@idfObjectSamples, @idfObjectSamplesTable, @idfDataAuditEventSamples OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,49545390000000,@idfObjectSamples,null,a.idfsSampleType,b.idfsSampleType 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfsSampleType,'') <> ISNULL(b.idfsSampleType,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4572430000000,@idfObjectSamples,null,a.idfHuman,b.idfHuman 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfHuman,'') <> ISNULL(b.idfHuman,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4572440000000,@idfObjectSamples,null,a.idfSpecies,b.idfSpecies 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfSpecies,'') <> ISNULL(b.idfSpecies,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4572450000000,@idfObjectSamples,null,a.idfAnimal,b.idfAnimal 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfAnimal,'') <> ISNULL(b.idfAnimal,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4572470000000,@idfObjectSamples,null,a.idfMonitoringSession,b.idfMonitoringSession 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfMonitoringSession,'') <> ISNULL(b.idfMonitoringSession,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,79950000000,@idfObjectSamples,null,a.idfFieldCollectedByPerson,b.idfFieldCollectedByPerson 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfFieldCollectedByPerson,'') <> ISNULL(b.idfFieldCollectedByPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,79940000000,@idfObjectSamples,null,a.idfFieldCollectedByOffice,b.idfFieldCollectedByOffice 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfFieldCollectedByOffice,'') <> ISNULL(b.idfFieldCollectedByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,79920000000,@idfObjectSamples,null,a.datFieldCollectionDate,b.datFieldCollectionDate 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.datFieldCollectionDate,'') <> ISNULL(b.datFieldCollectionDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,79930000000,@idfObjectSamples,null,a.datFieldSentDate,b.datFieldSentDate 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.datFieldSentDate,'') <> ISNULL(b.datFieldSentDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,80030000000,@idfObjectSamples,null,a.strFieldBarcode,b.strFieldBarcode 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.strFieldBarcode,'') <> ISNULL(b.strFieldBarcode,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4575190000000,@idfObjectSamples,null,a.idfVectorSurveillanceSession,b.idfVectorSurveillanceSession 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfVectorSurveillanceSession,'') <> ISNULL(b.idfVectorSurveillanceSession,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4575200000000,@idfObjectSamples,null,a.idfVector,b.idfVector 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfVector,'') <> ISNULL(b.idfVector,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4576420000000,@idfObjectSamples,null,a.strNote,b.strNote 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.strNote,'') <> ISNULL(b.strNote,''))

					--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					--select @idfDataAuditEventSamples,@idfObjectSamplesTable,49545430000000,@idfObjectSamples,null,a.idfsSite,b.idfsSite 
					--from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					--where (ISNULL(a.idfsSite,'') <> ISNULL(b.idfsSite,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4578720000000,@idfObjectSamples,null,a.idfSendToOffice,b.idfSendToOffice 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfSendToOffice,'') <> ISNULL(b.idfSendToOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4578730000000,@idfObjectSamples,null,a.blnReadOnly,b.blnReadOnly 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.blnReadOnly,'') <> ISNULL(b.blnReadOnly,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,12665570000000,@idfObjectSamples,null,a.idfHumanCase,b.idfHumanCase 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfHumanCase,'') <> ISNULL(b.idfHumanCase,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,12665580000000,@idfObjectSamples,null,a.idfVetCase,b.idfVetCase 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfVetCase,'') <> ISNULL(b.idfVetCase,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,51586990000035,@idfObjectSamples,null,a.DiseaseID,b.DiseaseID 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.DiseaseID,'') <> ISNULL(b.DiseaseID,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,12014480000000,@idfObjectSamples,null,a.idfsBirdStatus,b.idfsBirdStatus 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfsBirdStatus,'') <> ISNULL(b.idfsBirdStatus,''))
				END
			END
			--Data Audit - End

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID
        END
    END
		
    --Set Tests for this idfHumanCase	
    IF @TestsParameters IS NOT NULL
    BEGIN		
		--Data Audit - Tests - Start
		-- Variables
		DECLARE @idfsObjectTypeTests bigint = 10017079;
		DECLARE @idfObjectTests bigint = NULL;
		DECLARE @idfObjectTestsTable bigint = 75740000000;
		DECLARE @tlbTests_BeforeEdit TABLE
		(
			idfTesting BIGINT,
			idfsTestName BIGINT,
			idfsTestCategory BIGINT,
			idfsTestResult BIGINT,
			idfsTestStatus BIGINT,
			idfsDiagnosis BIGINT,
			idfMaterial BIGINT,
			idfBatchTest BIGINT,
			idfObservation BIGINT,
			intTestNumber INT,
			strNote NVARCHAR(500),
			intRowStatus INT,
			datStartedDate DATETIME,
			datConcludedDate DATETIME,
			idfTestedByOffice BIGINT,
			idfTestedByPerson BIGINT,
			idfResultEnteredByOffice BIGINT,
			idfResultEnteredByPerson BIGINT,
			idfValidatedByOffice BIGINT,
			idfValidatedByPerson BIGINT,
			blnReadOnly BIT,
			blnNonLaboratoryTest BIT,
			blnExternalTest BIT,
			idfPerformedByOffice BIGINT,
			datReceivedDate DATETIME,
			strContactPerson NVARCHAR(200),
			idfMonitoringSession BIGINT,
			idfVector BIGINT,
			idfHumanCase BIGINT,
			idfVetCase BIGINT
		)
		DECLARE @tlbTests_AfterEdit TABLE
		(
			idfTesting BIGINT,
			idfsTestName BIGINT,
			idfsTestCategory BIGINT,
			idfsTestResult BIGINT,
			idfsTestStatus BIGINT,
			idfsDiagnosis BIGINT,
			idfMaterial BIGINT,
			idfBatchTest BIGINT,
			idfObservation BIGINT,
			intTestNumber INT,
			strNote NVARCHAR(500),
			intRowStatus INT,
			datStartedDate DATETIME,
			datConcludedDate DATETIME,
			idfTestedByOffice BIGINT,
			idfTestedByPerson BIGINT,
			idfResultEnteredByOffice BIGINT,
			idfResultEnteredByPerson BIGINT,
			idfValidatedByOffice BIGINT,
			idfValidatedByPerson BIGINT,
			blnReadOnly BIT,
			blnNonLaboratoryTest BIT,
			blnExternalTest BIT,
			idfPerformedByOffice BIGINT,
			datReceivedDate DATETIME,
			strContactPerson NVARCHAR(200),
			idfMonitoringSession BIGINT,
			idfVector BIGINT,
			idfHumanCase BIGINT,
			idfVetCase BIGINT
		)
		DECLARE @idfDataAuditEventTests bigint= NULL; 
		--Data Audit - End
	
        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @TestsTemp;
				
            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --human monitoring session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
                AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
            END
            ELSE
            BEGIN
                SET @TestHumanCaseID = @TestHumanCaseId
            END;
				
			--Data Audit - Start
			--Find Insert/Update/Delete
			IF @RowAction = 1
			BEGIN
				set @idfsDataAuditEventType = 10016001; --Insert
			END
			ELSE IF @RowAction <> 1 and @RowStatus = 1
			BEGIN  
				set @idfsDataAuditEventType = 10016002; --Delete
			END
			ELSE 
			BEGIN 
				set @idfsDataAuditEventType = 10016003; --Update
			END
			--Get values before edit
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				insert into @tlbTests_BeforeEdit
				(idfTesting,idfsTestName,idfsTestCategory,idfsTestResult,idfsTestStatus,idfsDiagnosis,idfMaterial,idfBatchTest,idfObservation,intTestNumber,strNote,intRowStatus
				,datStartedDate,datConcludedDate,idfTestedByOffice,idfTestedByPerson,idfResultEnteredByOffice,idfResultEnteredByPerson,idfValidatedByOffice
				,idfValidatedByPerson,blnReadOnly,blnNonLaboratoryTest,blnExternalTest,idfPerformedByOffice,datReceivedDate,strContactPerson
				,idfMonitoringSession,idfVector,idfHumanCase,idfVetCase)
				select idfTesting,idfsTestName,idfsTestCategory,idfsTestResult,idfsTestStatus,idfsDiagnosis,idfMaterial,idfBatchTest,idfObservation,intTestNumber,strNote,intRowStatus
				,datStartedDate,datConcludedDate,idfTestedByOffice,idfTestedByPerson,idfResultEnteredByOffice,idfResultEnteredByPerson,idfValidatedByOffice
				,idfValidatedByPerson,blnReadOnly,blnNonLaboratoryTest,blnExternalTest,idfPerformedByOffice,datReceivedDate,strContactPerson
				,idfMonitoringSession,idfVector,idfHumanCase,idfVetCase
				from tlbTesting 
				where idfTesting = @TestID
			END
			--Data Audit - End

            --Set Tests for this idfHumanCase
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_SET @LanguageID = @LanguageID,
                                            @TestID = @TestID OUTPUT,
                                            @TestNameTypeID = @TestNameTypeID,
                                            @TestCategoryTypeID = @TestCategoryTypeID,
                                            @TestResultTypeID = @TestResultTypeID,
                                            @TestStatusTypeID = @TestStatusTypeID,
                                            @DiseaseID = @DiseaseID,
                                            @SampleID = @SampleID,
                                            @BatchTestID = NULL,
                                            @ObservationID = NULL,
                                            @TestNumber = NULL,
                                            @Comments = @Comments,
                                            @RowStatus = @RowStatus,
                                            @StartedDate = @StartedDate,
                                            @ResultDate = @ResultDate,
                                            @TestedByOrganizationID = @TestedByOrganizationID,
                                            @TestedByPersonID = @TestedByPersonID,
                                            @ResultEnteredByOrganizationID = @ResultEnteredByOrganizationID,
                                            @ResultEnteredByPersonID = @ResultEnteredByPersonID,
                                            @ValidatedByOrganizationID = @ValidatedByOrganizationID,
                                            @ValidatedByPersonID = @ValidatedByPersonID,
                                            @ReadOnlyIndicator = @ReadOnlyIndicator,
                                            @NonLaboratoryTestIndicator = @NonLaboratoryTestIndicator,
                                            @ExternalTestIndicator = @ExternalTestIndicator,
                                            @PerformedByOrganizationID = @PerformedByOrganizationID,
                                            @ReceivedDate = @ReceivedDate,
                                            @ContactPerson = @ContactPersonName,
                                            @MonitoringSessionID = NULL,
                                            @VectorSessionID = NULL,
                                            @HumanDiseaseReportID = @SaveID,
                                            @VeterinaryDiseaseReportID = NULL,
                                            @AuditUserName = @AuditUser,
                                            @RowAction = @RowAction;
						  
			--Data Audit - Start
			--Get values After edit
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				insert into @tlbTests_AfterEdit
				(idfTesting,idfsTestName,idfsTestCategory,idfsTestResult,idfsTestStatus,idfsDiagnosis,idfMaterial,idfBatchTest,idfObservation,intTestNumber,strNote,intRowStatus
				,datStartedDate,datConcludedDate,idfTestedByOffice,idfTestedByPerson,idfResultEnteredByOffice,idfResultEnteredByPerson,idfValidatedByOffice
				,idfValidatedByPerson,blnReadOnly,blnNonLaboratoryTest,blnExternalTest,idfPerformedByOffice,datReceivedDate,strContactPerson
				,idfMonitoringSession,idfVector,idfHumanCase,idfVetCase)
				select idfTesting,idfsTestName,idfsTestCategory,idfsTestResult,idfsTestStatus,idfsDiagnosis,idfMaterial,idfBatchTest,idfObservation,intTestNumber,strNote,intRowStatus
				,datStartedDate,datConcludedDate,idfTestedByOffice,idfTestedByPerson,idfResultEnteredByOffice,idfResultEnteredByPerson,idfValidatedByOffice
				,idfValidatedByPerson,blnReadOnly,blnNonLaboratoryTest,blnExternalTest,idfPerformedByOffice,datReceivedDate,strContactPerson
				,idfMonitoringSession,idfVector,idfHumanCase,idfVetCase
				from tlbTesting 
				where idfTesting = @TestID
			END 

			SET @idfObjectTests = @TestID 
			IF @idfsDataAuditEventType =10016001
			Begin
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeTests,@idfObjectTests, @idfObjectTestsTable, @idfDataAuditEventTests OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEventTests, @idfObjectTestsTable, @idfObjectTests)
			END
			ELSE IF @idfsDataAuditEventType =10016002
			BEGIN
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeTests,@idfObjectTests, @idfObjectTestsTable, @idfDataAuditEventTests OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject) VALUES (@idfDataAuditEventTests, @idfObjectTestsTable, @idfObjectTests)
			END
			ELSE IF @idfsDataAuditEventType =10016003
			BEGIN
				IF EXISTS 
				(
					select *
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting  
					where (ISNULL(a.idfsTestName,'') <> ISNULL(b.idfsTestName,'')) OR (ISNULL(a.idfsTestCategory,'') <> ISNULL(b.idfsTestCategory,'')) OR 
						(ISNULL(a.idfsTestResult,'') <> ISNULL(b.idfsTestResult,'')) OR (ISNULL(a.idfsTestStatus,'') <> ISNULL(b.idfsTestStatus,'')) OR 
						(ISNULL(a.idfsDiagnosis,'') <> ISNULL(b.idfsDiagnosis,'')) OR (ISNULL(a.idfMaterial,'') <> ISNULL(b.idfMaterial,'')) OR 
						(ISNULL(a.idfBatchTest,'') <> ISNULL(b.idfBatchTest,'')) OR (ISNULL(a.idfObservation,'') <> ISNULL(b.idfObservation,'')) OR 
						(ISNULL(a.intTestNumber,'') <> ISNULL(b.intTestNumber,'')) OR (ISNULL(a.strNote,'') <> ISNULL(b.strNote,'')) OR 
						(ISNULL(a.intRowStatus,'') <> ISNULL(b.intRowStatus,'')) OR (ISNULL(a.datStartedDate,'') <> ISNULL(b.datStartedDate,'')) OR 
						(ISNULL(a.datConcludedDate,'') <> ISNULL(b.datConcludedDate,'')) OR (ISNULL(a.idfTestedByOffice,'') <> ISNULL(b.idfTestedByOffice,'')) OR 
						(ISNULL(a.idfTestedByPerson,'') <> ISNULL(b.idfTestedByPerson,'')) OR (ISNULL(a.idfResultEnteredByOffice,'') <> ISNULL(b.idfResultEnteredByOffice,'')) OR 
						(ISNULL(a.idfResultEnteredByPerson,'') <> ISNULL(b.idfResultEnteredByPerson,'')) OR (ISNULL(a.idfValidatedByOffice,'') <> ISNULL(b.idfValidatedByOffice,'')) OR 
						(ISNULL(a.idfValidatedByPerson,'') <> ISNULL(b.idfValidatedByPerson,'')) OR (ISNULL(a.blnReadOnly,'') <> ISNULL(b.blnReadOnly,'')) OR 
						(ISNULL(a.blnNonLaboratoryTest,'') <> ISNULL(b.blnNonLaboratoryTest,'')) OR (ISNULL(a.blnExternalTest,'') <> ISNULL(b.blnExternalTest,'')) OR 
						(ISNULL(a.idfPerformedByOffice,'') <> ISNULL(b.idfPerformedByOffice,'')) OR (ISNULL(a.datReceivedDate,'') <> ISNULL(b.datReceivedDate,'')) OR 
						(ISNULL(a.strContactPerson,'') <> ISNULL(b.strContactPerson,'')) OR (ISNULL(a.idfMonitoringSession,'') <> ISNULL(b.idfMonitoringSession,'')) OR 
						(ISNULL(a.idfVector,'') <> ISNULL(b.idfVector,'')) OR (ISNULL(a.idfHumanCase,'') <> ISNULL(b.idfHumanCase,'')) OR (ISNULL(a.idfVetCase,'') <> ISNULL(b.idfVetCase,''))
				)
				BEGIN
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeTests,@idfObjectTests, @idfObjectTestsTable, @idfDataAuditEventTests OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,49545430000000,@idfObjectTests,null,a.idfsTestName,b.idfsTestName 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfsTestName,'') <> ISNULL(b.idfsTestName,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,49545440000000,@idfObjectTests,null,a.idfsTestCategory,b.idfsTestCategory 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfsTestCategory,'') <> ISNULL(b.idfsTestCategory,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,80510000000,@idfObjectTests,null,a.idfsTestResult,b.idfsTestResult 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfsTestResult,'') <> ISNULL(b.idfsTestResult,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4572510000000,@idfObjectTests,null,a.idfsTestStatus,b.idfsTestStatus 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfsTestStatus,'') <> ISNULL(b.idfsTestStatus,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4572520000000,@idfObjectTests,null,a.idfsDiagnosis,b.idfsDiagnosis 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfsDiagnosis,'') <> ISNULL(b.idfsDiagnosis,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4576430000000,@idfObjectTests,null,a.idfMaterial,b.idfMaterial 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfMaterial,'') <> ISNULL(b.idfMaterial,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,80470000000,@idfObjectTests,null,a.idfBatchTest,b.idfBatchTest 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfBatchTest,'') <> ISNULL(b.idfBatchTest,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,80500000000,@idfObjectTests,null,a.idfObservation,b.idfObservation 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfObservation,'') <> ISNULL(b.idfObservation,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,80540000000,@idfObjectTests,null,a.intTestNumber,b.intTestNumber 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.intTestNumber,'') <> ISNULL(b.intTestNumber,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4572540000000,@idfObjectTests,null,a.strNote,b.strNote 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.strNote,'') <> ISNULL(b.strNote,''))

					--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					--select @idfDataAuditEventTests,@idfObjectTestsTable,51586990000032,@idfObjectTests,null,a.intRowStatus,b.intRowStatus 
					--from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					--where (ISNULL(a.intRowStatus,'') <> ISNULL(b.intRowStatus,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578540000000,@idfObjectTests,null,a.datStartedDate,b.datStartedDate 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.datStartedDate,'') <> ISNULL(b.datStartedDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578550000000,@idfObjectTests,null,a.datConcludedDate,b.datConcludedDate 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.datConcludedDate,'') <> ISNULL(b.datConcludedDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578560000000,@idfObjectTests,null,a.idfTestedByOffice,b.idfTestedByOffice 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfTestedByOffice,'') <> ISNULL(b.idfTestedByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578570000000,@idfObjectTests,null,a.idfTestedByPerson,b.idfTestedByPerson 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfTestedByPerson,'') <> ISNULL(b.idfTestedByPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578580000000,@idfObjectTests,null,a.idfResultEnteredByOffice,b.idfResultEnteredByOffice 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfResultEnteredByOffice,'') <> ISNULL(b.idfResultEnteredByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578590000000,@idfObjectTests,null,a.idfResultEnteredByPerson,b.idfResultEnteredByPerson 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfResultEnteredByPerson,'') <> ISNULL(b.idfResultEnteredByPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578600000000,@idfObjectTests,null,a.idfValidatedByOffice,b.idfValidatedByOffice 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfValidatedByOffice,'') <> ISNULL(b.idfValidatedByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578610000000,@idfObjectTests,null,a.idfValidatedByPerson,b.idfValidatedByPerson 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfValidatedByPerson,'') <> ISNULL(b.idfValidatedByPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578740000000,@idfObjectTests,null,a.blnReadOnly,b.blnReadOnly 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.blnReadOnly,'') <> ISNULL(b.blnReadOnly,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578760000000,@idfObjectTests,null,a.blnNonLaboratoryTest,b.blnNonLaboratoryTest 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.blnNonLaboratoryTest,'') <> ISNULL(b.blnNonLaboratoryTest,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,50815850000000,@idfObjectTests,null,a.blnExternalTest,b.blnExternalTest 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.blnExternalTest,'') <> ISNULL(b.blnExternalTest,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,50815860000000,@idfObjectTests,null,a.idfPerformedByOffice,b.idfPerformedByOffice 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfPerformedByOffice,'') <> ISNULL(b.idfPerformedByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,50815870000000,@idfObjectTests,null,a.datReceivedDate,b.datReceivedDate 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.datReceivedDate,'') <> ISNULL(b.datReceivedDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,50815880000000,@idfObjectTests,null,a.strContactPerson,b.strContactPerson 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.strContactPerson,'') <> ISNULL(b.strContactPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,51586990000028,@idfObjectTests,null,a.idfMonitoringSession,b.idfMonitoringSession 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfMonitoringSession,'') <> ISNULL(b.idfMonitoringSession,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,51586990000031,@idfObjectTests,null,a.idfVector,b.idfVector 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfVector,'') <> ISNULL(b.idfVector,''))

					--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					--select @idfDataAuditEventTests,@idfObjectTestsTable,51586790000001,@idfObjectTests,null,a.idfHumanCase,b.idfHumanCase 
					--from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					--where (ISNULL(a.idfHumanCase,'') <> ISNULL(b.idfHumanCase,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,51586990000030,@idfObjectTests,null,a.idfVetCase,b.idfVetCase 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfVetCase,'') <> ISNULL(b.idfVetCase,''))
				END
			END
			--Data Audit - End

            UPDATE @TestsInterpretationParametersTemp
            SET TestID = @TestID
            WHERE TestID = @RowID

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;
    END

	BEGIN --Data Audit - No need.
    Declare @sampleCount int
    Set @sampleCount =
    (
        SELECT Count(*)
        FROM dbo.tlbMaterial
        WHERE intRowStatus = 0
                and idfHumanCase = @SurvivorDiseaseReportID
    )

    IF EXISTS
    (
        SELECT *
        FROM dbo.tlbHumanCase
        WHERE idfHumanCase = @SaveID
                AND idfsYNSpecimenCollected = 10100002
    )
    Begin
        UPDATE dbo.tlbMaterial
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser
        WHERE idfHumanCase = @SaveID
    END
    ELSE IF EXISTS
    (
        SELECT *
        FROM dbo.tlbHumanCase
        WHERE idfHumanCase = @SaveID
                AND idfsYNSpecimenCollected = 10100003
    )
    BEGIN
        UPDATE dbo.tlbHumanCase
        SET idfsNotCollectedReason = NULL,
            AuditUpdateUser = @AuditUser
        WHERE idfHumanCase = @SaveID;

        UPDATE dbo.tlbMaterial
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser
        WHERE idfHumanCase = @SaveID;
    END
    ELSE IF EXISTS
    (
        SELECT *
        FROM dbo.tlbHumanCase
        WHERE idfHumanCase = @SaveID
                AND idfsYNSpecimenCollected = 10100001
    )
    BEGIN
        UPDATE dbo.tlbHumanCase
        SET idfsNotCollectedReason = NULL,
            AuditUpdateUser = @AuditUser
        WHERE idfHumanCase = @SaveID
        IF (@sampleCount = 0)
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsYNSpecimenCollected = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @SaveID
        END
    END
	END
		 
    --Set TestsInterpretation for this idfHumanCase
    IF @TestsInterpretationParameters IS NOT NULL
    BEGIN 
		--Data Audit - TestsInterpretation - Start
		-- Variables
		DECLARE @idfsObjectTypeTestInterpretations bigint = 10017079;
		DECLARE @idfObjectTestInterpretations bigint = NULL;
		DECLARE @idfObjectTestInterpretationsTable bigint = 75750000000;
		DECLARE @tlbTestInterpretations_BeforeEdit TABLE
		(
			idfTestValidation BIGINT,
			idfsDiagnosis BIGINT,
			idfsInterpretedStatus BIGINT,
			idfValidatedByOffice BIGINT,
			idfValidatedByPerson BIGINT,
			idfInterpretedByOffice BIGINT,
			idfInterpretedByPerson BIGINT,
			idfTesting BIGINT,
			blnValidateStatus BIT,
			blnCaseCreated BIT,
			strValidateComment NVARCHAR(200),
			strInterpretedComment NVARCHAR(200),
			datValidationDate DATETIME,
			datInterpretationDate DATETIME,
			intRowStatus INT,
			blnReadOnly BIT 
		)
		DECLARE @tlbTestInterpretations_AfterEdit TABLE
		(
			idfTestValidation BIGINT,
			idfsDiagnosis BIGINT,
			idfsInterpretedStatus BIGINT,
			idfValidatedByOffice BIGINT,
			idfValidatedByPerson BIGINT,
			idfInterpretedByOffice BIGINT,
			idfInterpretedByPerson BIGINT,
			idfTesting BIGINT,
			blnValidateStatus BIT,
			blnCaseCreated BIT,
			strValidateComment NVARCHAR(200),
			strInterpretedComment NVARCHAR(200),
			datValidationDate DATETIME,
			datInterpretationDate DATETIME,
			intRowStatus INT,
			blnReadOnly BIT
		)
		DECLARE @idfDataAuditEventTestInterpretations bigint= NULL; 
		--Data Audit - End
	
        WHILE EXISTS (SELECT * FROM @TestsInterpretationParametersTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @TestsInterpretationParametersTemp;
				
			--Data Audit - Start
			--Find Insert/Update/Delete
			IF @RowAction = 1
			BEGIN
				set @idfsDataAuditEventType = 10016001; --Insert
			END
			ELSE IF @RowAction <> 1 and @RowStatus = 1
			BEGIN  
				set @idfsDataAuditEventType = 10016002; --Delete
			END
			ELSE 
			BEGIN 
				set @idfsDataAuditEventType = 10016003; --Update
			END

			--Get values before edit
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				insert into @tlbTestInterpretations_BeforeEdit
				(idfTestValidation,idfsDiagnosis,idfsInterpretedStatus,idfValidatedByOffice,idfValidatedByPerson,idfInterpretedByOffice,idfInterpretedByPerson,idfTesting
				,blnValidateStatus,blnCaseCreated,strValidateComment,strInterpretedComment,datValidationDate,datInterpretationDate,intRowStatus,blnReadOnly)
				select idfTestValidation,idfsDiagnosis,idfsInterpretedStatus,idfValidatedByOffice,idfValidatedByPerson,idfInterpretedByOffice,idfInterpretedByPerson,idfTesting
				,blnValidateStatus,blnCaseCreated,strValidateComment,strInterpretedComment,datValidationDate,datInterpretationDate,intRowStatus,blnReadOnly
				from tlbTestValidation 
				where idfTestValidation = @TestInterpretationID
			END
			--Data Audit - End

            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_TEST_INTERPRETATION_SET @AuditUserName = @AuditUser,
                                                        @TestInterpretationID = @TestInterpretationID OUTPUT,
                                                        @DiseaseID = @DiseaseID,
                                                        @InterpretedStatusTypeID = @InterpretedStatusTypeID,
                                                        @ValidatedByOrganizationID = @ValidatedByOrganizationID,
                                                        @ValidatedByPersonID = @ValidatedByPersonID,
                                                        @InterpretedByOrganizationID = @InterpretedByOrganizationID,
                                                        @InterpretedByPersonID = @InterpretedByPersonID,
                                                        @TestID = @TestID,
                                                        @ValidateStatusIndicator = @ValidatedStatusIndicator,
                                                        @ReportSessionCreatedIndicator = @ReportSessionCreatedIndicator,
                                                        @ValidationComment = @ValidatedComment,
                                                        @InterpretationComment = @InterpretedComment,
                                                        @ValidationDate = @ValidatedDate,
                                                        @InterpretationDate = @InterpretedDate,
                                                        @RowStatus = @RowStatus,
                                                        @ReadOnlyIndicator = @ReadOnlyIndicator,
                                                        @RowAction = @RowAction;

			--Data Audit - Start
			--Get values after edit
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				insert into @tlbTestInterpretations_AfterEdit
				(idfTestValidation,idfsDiagnosis,idfsInterpretedStatus,idfValidatedByOffice,idfValidatedByPerson,idfInterpretedByOffice,idfInterpretedByPerson,idfTesting
				,blnValidateStatus,blnCaseCreated,strValidateComment,strInterpretedComment,datValidationDate,datInterpretationDate,intRowStatus,blnReadOnly)
				select idfTestValidation,idfsDiagnosis,idfsInterpretedStatus,idfValidatedByOffice,idfValidatedByPerson,idfInterpretedByOffice,idfInterpretedByPerson,idfTesting
				,blnValidateStatus,blnCaseCreated,strValidateComment,strInterpretedComment,datValidationDate,datInterpretationDate,intRowStatus,blnReadOnly
				from tlbTestValidation 
				where idfTestValidation = @TestInterpretationID
			END 

			SET @idfObjectTestInterpretations = @TestID 
			IF @idfsDataAuditEventType =10016001
			Begin
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeTestInterpretations,@idfObjectTestInterpretations, 
					@idfObjectTestInterpretationsTable, @idfDataAuditEventTestInterpretations OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEventTestInterpretations, @idfObjectTestInterpretationsTable, @idfObjectTestInterpretations)
			END
			ELSE IF @idfsDataAuditEventType =10016002
			BEGIN
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeTestInterpretations,@idfObjectTestInterpretations
					, @idfObjectTestInterpretationsTable, @idfDataAuditEventTestInterpretations OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject) 
				VALUES (@idfDataAuditEventTestInterpretations, @idfObjectTestInterpretationsTable, @idfObjectTestInterpretations)
			END
			ELSE IF @idfsDataAuditEventType =10016003
			BEGIN
				IF EXISTS 
				(
					select *
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation  
					where (ISNULL(a.idfsDiagnosis,'') <> ISNULL(b.idfsDiagnosis,'')) OR (ISNULL(a.idfsInterpretedStatus,'') <> ISNULL(b.idfsInterpretedStatus,'')) OR 
						(ISNULL(a.idfValidatedByOffice,'') <> ISNULL(b.idfValidatedByOffice,'')) OR (ISNULL(a.idfValidatedByPerson,'') <> ISNULL(b.idfValidatedByPerson,'')) OR 
						(ISNULL(a.idfInterpretedByOffice,'') <> ISNULL(b.idfInterpretedByOffice,'')) OR (ISNULL(a.idfInterpretedByPerson,'') <> ISNULL(b.idfInterpretedByPerson,'')) OR 
						(ISNULL(a.idfTesting,'') <> ISNULL(b.idfTesting,'')) OR (ISNULL(a.blnValidateStatus,'') <> ISNULL(b.blnValidateStatus,'')) OR 
						(ISNULL(a.blnCaseCreated,'') <> ISNULL(b.blnCaseCreated,'')) OR (ISNULL(a.strValidateComment,'') <> ISNULL(b.strValidateComment,'')) OR 
						(ISNULL(a.strInterpretedComment,'') <> ISNULL(b.strInterpretedComment,'')) OR (ISNULL(a.datValidationDate,'') <> ISNULL(b.datValidationDate,'')) OR 
						(ISNULL(a.datInterpretationDate,'') <> ISNULL(b.datInterpretationDate,'')) OR (ISNULL(a.intRowStatus,'') <> ISNULL(b.intRowStatus,'')) OR 
						(ISNULL(a.blnReadOnly,'') <> ISNULL(b.blnReadOnly,''))
				)
				BEGIN
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeTestInterpretations,@idfObjectTestInterpretations, 
						@idfObjectTestInterpretationsTable, @idfDataAuditEventTestInterpretations OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80580000000,@idfObjectTestInterpretations,null,a.idfsDiagnosis,b.idfsDiagnosis 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfsDiagnosis,'') <> ISNULL(b.idfsDiagnosis,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80590000000,@idfObjectTestInterpretations,null,a.idfsInterpretedStatus,b.idfsInterpretedStatus 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfsInterpretedStatus,'') <> ISNULL(b.idfsInterpretedStatus,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80610000000,@idfObjectTestInterpretations,null,a.idfValidatedByOffice,b.idfValidatedByOffice 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfValidatedByOffice,'') <> ISNULL(b.idfValidatedByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80620000000,@idfObjectTestInterpretations,null,a.idfValidatedByPerson,b.idfValidatedByPerson 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfValidatedByPerson,'') <> ISNULL(b.idfValidatedByPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80560000000,@idfObjectTestInterpretations,null,a.idfInterpretedByOffice,b.idfInterpretedByOffice 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfInterpretedByOffice,'') <> ISNULL(b.idfInterpretedByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80570000000,@idfObjectTestInterpretations,null,a.idfInterpretedByPerson,b.idfInterpretedByPerson 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfInterpretedByPerson,'') <> ISNULL(b.idfInterpretedByPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80600000000,@idfObjectTestInterpretations,null,a.idfTesting,b.idfTesting 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfTesting,'') <> ISNULL(b.idfTesting,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80550000000,@idfObjectTestInterpretations,null,a.blnValidateStatus,b.blnValidateStatus 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.blnValidateStatus,'') <> ISNULL(b.blnValidateStatus,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,4572560000000,@idfObjectTestInterpretations,null,a.blnCaseCreated,b.blnCaseCreated 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.blnCaseCreated,'') <> ISNULL(b.blnCaseCreated,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80640000000,@idfObjectTestInterpretations,null,a.strValidateComment,b.strValidateComment 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.strValidateComment,'') <> ISNULL(b.strValidateComment,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80630000000,@idfObjectTestInterpretations,null,a.strInterpretedComment,b.strInterpretedComment 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.strInterpretedComment,'') <> ISNULL(b.strInterpretedComment,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,4572570000000,@idfObjectTestInterpretations,null,a.datValidationDate,b.datValidationDate 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.datValidationDate,'') <> ISNULL(b.datValidationDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,4572580000000,@idfObjectTestInterpretations,null,a.datInterpretationDate,b.datInterpretationDate 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.datInterpretationDate,'') <> ISNULL(b.datInterpretationDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,6617410000000,@idfObjectTestInterpretations,null,a.blnReadOnly,b.blnReadOnly 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.blnReadOnly,'') <> ISNULL(b.blnReadOnly,''))
				END
			END
			--Data Audit - End

            DELETE FROM @TestsInterpretationParametersTemp
            WHERE TestInterpretationID = @RowID;
        END;
    END

	--Data Audit - No need.
    WHILE EXISTS (SELECT * FROM @EventsTemp)
    BEGIN
        SELECT TOP 1
            @EventId = EventId,
            @EventTypeId = EventTypeId,
            @EventUserId = UserId,
            @EventObjectId = ObjectId,
            @EventSiteId = SiteId,
            @EventDiseaseId = DiseaseId,
            @EventLocationId = LocationId,
            @EventInformationString = InformationString,
            @EventLoginSiteId = LoginSiteId
        FROM @EventsTemp;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @EventObjectId,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUser;

        DELETE FROM @EventsTemp
        WHERE EventId = @EventId;
    END;

	BEGIN --Data Audit - No need. 
    --------set AntiviralTherapies for this idfHumanCase
    IF @AntiviralTherapiesParameters IS NOT NULL
    BEGIN

        EXEC dbo.USSP_HUMAN_DISEASE_ANTIVIRALTHERAPIES_SET @idfHumanCase = @SaveID,
                                                            @AntiviralTherapiesParameters = @AntiviralTherapiesParameters,
                                                            @outbreakCall = 0,
                                                            @User = @AuditUser
    END
    --------set Vaccinations for this idfHumanCase
    IF @VaccinationsParameters IS NOT NULL
    BEGIN
        EXEC dbo.USSP_HUMAN_DISEASE_VACCINATIONS_DEDUP_SET @idfHumanCase = @SaveID,
                                                            @VaccinationsParameters = @VaccinationsParameters,
                                                            @outbreakCall = 0,
                                                            @User = @AuditUser
    END
	--------set Contacts for this idfHumanCase
    IF @ContactsParameters IS NOT NULL
    BEGIN
        EXEC dbo.USSP_GBL_CONTACT_DEDUP_SET @Contacts = @ContactsParameters,
                                            @SiteID = @CurrentSiteID,
                                            @AuditUSerName = @AuditUser,
                                            @idfHumanCase = @SaveID
    END
    ------ UPDATE tlbHuman IF datDateofDeath is provided.
    IF @datDateofDeath IS NOT NULL
    BEGIN
        UPDATE dbo.tlbHuman
        SET datDateofDeath = @datDateofDeath,
            AuditUpdateUser = @AuditUser
        WHERE idfHuman = @idfHuman
    END
    ----------------------------------------------------------------------------------------------------------------
    ------ delete the Superseded disease report
    BEGIN
        PRINT 'Delete superseded record'

        INSERT INTO @SuppressSelect
        (
            ReturnCode,
            ReturnMessage
        )
        EXEC dbo.USP_HUM_HUMAN_DISEASE_DEL @idfHumanCase = @SupersededDiseaseReportID,
				@idfUserID = @EventUserId,
				@idfSiteId = @idfsSite,
				@DeduplicationIndicator = 1 -- deduplication
    END;
    ----------------------------------------------------------------------------------------------------------------
    ------ remove tests associated with samples that aren't associated with survivor disease report
    UPDATE dbo.tlbTesting
    SET intRowStatus = 1,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE idfMaterial IN (
                                SELECT idfMaterial
                                FROM dbo.tlbMaterial
                                WHERE (
                                        idfHumanCase = @SaveID
                                        OR idfHumanCase = @DeleteID
                                    )
                                    AND idfMaterial NOT IN (
                                                                SELECT SampleID FROM @SamplesTemp2
                                                            )
                            )
    ----------------------------------------------------------------------------------------------------------------
    ------ remove test interpretations associated with samples that aren't associated with survivor disease report
    UPDATE dbo.tlbTestValidation
    SET intRowStatus = 1,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE idfTesting IN (
                            SELECT idfTesting
                            FROM dbo.tlbTesting
                            WHERE idfMaterial IN (
                                                        SELECT idfMaterial
                                                        FROM dbo.tlbMaterial
                                                        WHERE (
                                                                idfHumanCase = @SaveID
                                                                OR idfHumanCase = @DeleteID
                                                            )
                                                            AND idfMaterial NOT IN (
                                                                                        SELECT SampleID FROM @SamplesTemp2
                                                                                    )
                                                    )
                        )
    ----------------------------------------------------------------------------------------------------------------
    ------ remove penside tests associated with samples that aren't associated with survivor disease report
    UPDATE dbo.tlbPensideTest
    SET intRowStatus = 1,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE idfMaterial IN (
                                SELECT idfMaterial
                                FROM dbo.tlbMaterial
                                WHERE (
                                        idfHumanCase = @SaveID
                                        OR idfHumanCase = @DeleteID
                                    )
                                    AND idfMaterial NOT IN (
                                                                SELECT SampleID FROM @SamplesTemp2
                                                            )
                            )
    ------ disease report samples that are no longer needed
    UPDATE dbo.tlbMaterial
    SET idfHumanCase = NULL,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE (
                idfHumanCase = @SaveID
                OR idfHumanCase = @DeleteID
            )
            AND idfMaterial NOT IN (
                                        SELECT SampleID FROM @SamplesTemp2
                                    )
    ------ remove AntiMicrobialTherapy records from superseded report
    UPDATE dbo.tlbAntimicrobialTherapy
    SET intRowStatus = 1,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE (
                idfHumanCase = @SaveID
                OR idfHumanCase = @DeleteID
            )
            AND idfAntimicrobialTherapy NOT IN (
                                                    SELECT idfAntimicrobialTherapy FROM @AntiViralTemp
                                                )
    ------ remove vaccination records from superseded report
    UPDATE dbo.HumanDiseaseReportVaccination
    SET intRowStatus = 1,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE (
                idfHumanCase = @SaveID
                OR idfHumanCase = @DeleteID
            )
            AND humanDiseaseReportVaccinationUID NOT IN (
                                                            SELECT humanDiseaseReportVaccinationUID FROM @VaccinationsTemp
                                                        )
    ------ remove vaccination records from superseded report
    UPDATE dbo.tlbContactedCasePerson
    SET intRowStatus = 1,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE (
                idfHumanCase = @SaveID
                OR idfHumanCase = @DeleteID
            )
            AND idfContactedCasePerson NOT IN (
                                                SELECT ContactedCasePersonId FROM @ContactsTemp
                                            )
		
	END

    IF @@TRANCOUNT > 0
        COMMIT TRAN

    SELECT @ReturnCode AS ReturnCode,
            @ReturnMsg AS ReturnMessage,
            @SurvivorDiseaseReportID AS SurvivorDiseaseReportID,
            @strHumanCaseId AS strHumanCaseID,
            @HumanID AS idfHuman

END TRY
BEGIN CATCH
    SELECT @ReturnCode AS ReturnCode,
            @ReturnMsg AS ReturnMessage,
            @SurvivorDiseaseReportID AS SurvivorDiseaseReportID,
            @strHumanCaseId AS strHumanCaseID,
            @HumanID AS idfHuman
    IF @@Trancount > 0
        ROLLBACK TRAN;

    THROW;

END CATCH
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEE_GETLIST]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EMPLOYEE_GETLIST
--
-- Description:	Get a list of employees for the various EIDSS use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/09/2019 Initial release for new API.
-- Stephen Long     06/20/2019 Fixed where clause to be and's instead of or's.
-- Stephen Long     09/29/2020 Removed employee group join.
-- Mandar Kulkarni  03/22/2022 Removed join for tstUserTable for non-user employee category
-- Ann Xiong		11/07/2022 Changed FirstOrGivenName, SecondName, LastOrSurName, ContactPhone of @t 
--								from nvarchar(100) to nvarchar(200) to fix the error "String or binary data would be truncated."
-- Leo Tracchia     11/08/2022 added change for better performance (using FN_GBL_Institution_Min)
-- Ann Xiong		02/02/2023 Changed OrganizationAbbreviatedName, OrganizationFullName, PositionTypeName, EmployeeCategory of @t 
--								from nvarchar(100) to nvarchar(2000) to fix the error "String or binary data would be truncated."
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEE_GETLIST] (
	@LanguageID AS NVARCHAR(50),
	@EmployeeID AS BIGINT = NULL,
	@FirstOrGivenName AS NVARCHAR(100) = NULL,
	@SecondName AS NVARCHAR(100) = NULL,
	@LastOrSurName AS NVARCHAR(100) = NULL,
	@ContactPhone AS NVARCHAR(100) = NULL,
	@EIDSSOrganizationID AS NVARCHAR(100) = NULL,
	@OrganizationID AS BIGINT = NULL,
	@PositionTypeID AS BIGINT = NULL,
	@EmployeeCategoryID AS BIGINT = NULL,
	@AccountState AS BIGINT = NULL,
	@PersonalIdType AS BIGINT = NULL,
	@PersonalIDValue  AS NVARCHAR(100) = NULL,
	@pageNo INT = 1,
	@pageSize INT = 10 ,
	@sortColumn NVARCHAR(30) = 'EmployeeID',
	@sortOrder NVARCHAR(4) = 'asc'  
	)
AS
BEGIN
	DECLARE @OrganizationAbbreviatedName AS NVARCHAR(4000) = NULL
	DECLARE @OrganizationFullName AS NVARCHAR(4000) = NULL
	SET NOCOUNT ON;

	BEGIN TRY

	DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE( 
			EmployeeID BIGINT PRIMARY KEY, 
			FirstOrGivenName nvarchar(200)	INDEX IDX1 NONCLUSTERED(FirstOrGivenName),
			SecondName nvarchar(200),
			LastOrSurName nvarchar(200) INDEX IDX2 NONCLUSTERED(LastOrSurName), 
			EmployeeFullName nvarchar(100),
			ContactPhone nvarchar(200),
			OrganizationAbbreviatedName nvarchar(2000)INDEX IDX7 NONCLUSTERED(OrganizationAbbreviatedName),
			OrganizationFullName nvarchar(2000) INDEX IDX3 NONCLUSTERED(OrganizationFullName),
			EIDSSOrganizationID nvarchar(100) 	INDEX IDX4 NONCLUSTERED(EIDSSOrganizationID),
			OrganizationID bigint,
			PositionTypeName nvarchar(2000),
			PositionTypeID bigint,
			EmployeeCategoryID BIGINT INDEX IDX5 NONCLUSTERED(EmployeeCategoryID),
			EmployeeCategory nvarchar(2000),
			AccountDisabled nvarchar(100),
			AccountLocked nvarchar(100),
			PersonalIdType bigint,
			PersonalIDValue  nvarchar(100) INDEX IDX8 NONCLUSTERED(PersonalIDValue)
			)

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)


		INSERT INTO @T

		SELECT p.idfPerson AS EmployeeID,
			p.strFirstName AS FirstOrGivenName,
			p.strSecondName AS SecondName,
			p.strFamilyName AS LastOrSurName,
			p.strContactPhone AS ContactPhone,
			'' AS EmployeeFullName,
			organization.AbbreviatedName AS OrganizationAbbreviatedName,
			organization.EnglishFullName AS OrganizationFullName,
			organization.strOrganizationID AS EIDSSOrganizationID,
			p.idfInstitution AS OrganizationID,
			positionType.[name] AS PositionTypeName,
			positionType.idfsReference AS PositionTypeID,
			employeeCategory.idfsReference AS EmployeeCategoryID,
			employeeCategory.[name] AS EmployeeCategory,
			CASE 
				WHEN u.blnDisabled = 1
				THEN 'Disabled'
				ELSE ''
			END AS 'AccountDisabled',
			CASE    
				WHEN dbo.FN_GBL_ISACCOUNTLOCKED(u.idfUserId) = 1 THEN 'AccountLocked'
                WHEN (u.LockoutEnabled = 1 and u.LockoutEnd IS NULL) OR (u.LockoutEnabled = 0 ) THEN ''
				ELSE ''
			END AS 'AccountLocked',
			p.PersonalIDTypeID AS PersonalIdType,
			p.PersonalIDValue AS PersonalIDValue
		FROM dbo.tlbPerson p
		INNER JOIN dbo.tlbEmployee AS e	ON e.idfEmployee = p.idfPerson AND e.intRowStatus = 0
		INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) AS organization
			ON organization.idfOffice = p.idfInstitution
		INNER JOIN dbo.tstUserTable ut ON ut.idfPerson = p.idfPerson AND ut.intRowStatus = 0
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000526) AS employeeCategory ON e.idfsEmployeeCategory = employeeCategory.idfsReference
		INNER JOIN dbo.AspNetUsers u ON u.idfUserID = ut.idfUserID 
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000073) AS positionType
			ON p.idfsStaffPosition = positionType.idfsReference
		WHERE p.intRowStatus = 0
		AND e.idfsEmployeeCategory = 10526001
		AND ((u.LockoutEnabled = CASE @AccountState WHEN  10527001 THEN dbo.FN_GBL_ISACCOUNTLOCKED(u.idfUserID) ELSE 2 END) 
		OR (u.blnDisabled = CASE @AccountState WHEN  10527002 THEN 1 ELSE 2 END) OR @AccountState IS NULL)
	UNION
		SELECT p.idfPerson AS EmployeeID,
			p.strFirstName AS FirstOrGivenName,
			p.strSecondName AS SecondName,
			p.strFamilyName AS LastOrSurName,
			p.strContactPhone AS ContactPhone,
			'' AS EmployeeFullName,
			organization.AbbreviatedName AS OrganizationAbbreviatedName,
			organization.EnglishFullName AS OrganizationFullName,
			organization.strOrganizationID AS EIDSSOrganizationID,
			p.idfInstitution AS OrganizationID,
			positionType.[name] AS PositionTypeName,
			positionType.idfsReference AS PositionTypeID,
			employeeCategory.idfsReference AS EmployeeCategoryID,
			employeeCategory.[name] AS EmployeeCategory,
			''AS 'AccountDisabled',
			''AS 'AccountLocked',
			p.PersonalIDTypeID AS PersonalIdType,
			p.PersonalIDValue AS PersonalIDValue
		FROM dbo.tlbPerson p
		INNER JOIN dbo.tlbEmployee AS e	ON e.idfEmployee = p.idfPerson AND e.intRowStatus = 0
		INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) AS organization
			ON organization.idfOffice = p.idfInstitution
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000526) AS employeeCategory ON e.idfsEmployeeCategory = employeeCategory.idfsReference 
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000073) AS positionType
			ON p.idfsStaffPosition = positionType.idfsReference
		WHERE p.intRowStatus = 0
		AND e.idfsEmployeeCategory = 10526002;

	WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'EmployeeID' AND @SortOrder = 'asc' THEN EmployeeID END ASC,
				CASE WHEN @sortColumn = 'EmployeeID' AND @SortOrder = 'desc' THEN EmployeeID END DESC,
				CASE WHEN @sortColumn = 'FirstOrGivenName' AND @SortOrder = 'asc' THEN FirstOrGivenName END ASC,
				CASE WHEN @sortColumn = 'FirstOrGivenName' AND @SortOrder = 'desc' THEN FirstOrGivenName END DESC,
				CASE WHEN @sortColumn = 'SecondName' AND @SortOrder = 'asc' THEN SecondName END ASC,
				CASE WHEN @sortColumn = 'SecondName' AND @SortOrder = 'desc' THEN SecondName END DESC,
				CASE WHEN @sortColumn = 'LastOrSurName' AND @SortOrder = 'asc' THEN LastOrSurName END ASC,
				CASE WHEN @sortColumn = 'LastOrSurName' AND @SortOrder = 'desc' THEN LastOrSurName END DESC,
				CASE WHEN @sortColumn = 'EmployeeFullName' AND @SortOrder = 'asc' THEN EmployeeFullName END ASC,
				CASE WHEN @sortColumn = 'EmployeeFullName' AND @SortOrder = 'desc' THEN EmployeeFullName END DESC,
				CASE WHEN @sortColumn = 'ContactPhone' AND @SortOrder = 'asc' THEN ContactPhone END ASC,
				CASE WHEN @sortColumn = 'ContactPhone' AND @SortOrder = 'desc' THEN ContactPhone END DESC,
				CASE WHEN @sortColumn = 'OrganizationAbbreviatedName' AND @SortOrder = 'asc' THEN OrganizationAbbreviatedName END ASC,
				CASE WHEN @sortColumn = 'OrganizationAbbreviatedName' AND @SortOrder = 'asc' THEN OrganizationAbbreviatedName END ASC,
				CASE WHEN @sortColumn = 'OrganizationFullName' AND @SortOrder = 'desc' THEN OrganizationFullName END DESC,
				CASE WHEN @sortColumn = 'OrganizationFullName' AND @SortOrder = 'asc' THEN OrganizationFullName END ASC,
				CASE WHEN @sortColumn = 'EIDSSOrganizationID' AND @SortOrder = 'asc' THEN EIDSSOrganizationID END ASC,
				CASE WHEN @sortColumn = 'EIDSSOrganizationID' AND @SortOrder = 'desc' THEN EIDSSOrganizationID END DESC,
				CASE WHEN @sortColumn = 'OrganizationID' AND @SortOrder = 'asc' THEN OrganizationID END ASC,
				CASE WHEN @sortColumn = 'OrganizationID' AND @SortOrder = 'desc' THEN OrganizationID END DESC,
				CASE WHEN @sortColumn = 'PositionTypeName' AND @SortOrder = 'asc' THEN PositionTypeName END ASC,
				CASE WHEN @sortColumn = 'PositionTypeName' AND @SortOrder = 'desc' THEN PositionTypeName END DESC,
				CASE WHEN @sortColumn = 'PositionTypeID' AND @SortOrder = 'asc' THEN PositionTypeID END ASC,
				CASE WHEN @sortColumn = 'PositionTypeID' AND @SortOrder = 'desc' THEN PositionTypeID END DESC,
				CASE WHEN @sortColumn = 'EmployeeCategory' AND @SortOrder = 'asc' THEN EmployeeCategory END ASC,
				CASE WHEN @sortColumn = 'EmployeeCategory' AND @SortOrder = 'desc' THEN EmployeeCategory END DESC,
				CASE WHEN @sortColumn = 'AccountDisabled' AND @SortOrder = 'asc' THEN AccountDisabled END DESC,
				CASE WHEN @sortColumn = 'AccountDisabled' AND @SortOrder = 'desc' THEN AccountDisabled END DESC,
				CASE WHEN @sortColumn = 'AccountLocked' AND @SortOrder = 'asc' THEN AccountLocked END DESC,
				CASE WHEN @sortColumn = 'AccountLocked' AND @SortOrder = 'desc' THEN AccountLocked END DESC,
				CASE WHEN @sortColumn = 'PersonalIdType' AND @SortOrder = 'asc' THEN PersonalIdType END ASC,
				CASE WHEN @sortColumn = 'PersonalIdType' AND @SortOrder = 'desc' THEN PersonalIdType END DESC,
				CASE WHEN @sortColumn = 'PersonalIDValue' AND @SortOrder = 'asc' THEN PersonalIDValue END ASC,
				CASE WHEN @sortColumn = 'PersonalIDValue' AND @SortOrder = 'desc' THEN PersonalIDValue END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount,
				EmployeeID,
				FirstOrGivenName,
				SecondName,
				LastOrSurName,
				dbo.FN_GBL_ConcatFullName(LastOrSurName,FirstOrGivenName,SecondName) AS EmployeeFullName,
				ContactPhone,
				OrganizationAbbreviatedName,
				OrganizationFullName,
				EIDSSOrganizationID,
				OrganizationID,
				PositionTypeName,
				PositionTypeID,
				EmployeeCategoryID,
				EmployeeCategory,
				AccountDisabled,
				AccountLocked,
				PersonalIdType,
				PersonalIdValue
			FROM @T
			WHERE (
					(
					(EmployeeID = @EmployeeID)
					OR (@EmployeeID IS NULL)
					)
				AND (
					(ContactPhone = @ContactPhone)
					OR (@ContactPhone IS NULL)
					)
				AND (
					(OrganizationID = @OrganizationID)
					OR (@OrganizationID IS NULL)
					)
				AND (
					(PersonalIDType = @PersonalIdType)
					OR (@PersonalIdType IS NULL)
					)
				AND (
					(PersonalIDValue = @PersonalIDValue)
					OR (@PersonalIDValue IS NULL)
					)
				AND (
					(PositionTypeID = @PositionTypeID)
					OR (@PositionTypeID IS NULL)
					)
				AND (
					(EmployeeCategoryID = @EmployeeCategoryID)
					OR (@EmployeeCategoryID IS NULL)
					)
				AND (
					(FirstOrGivenName LIKE '%' + @FirstOrGivenName + '%')
					OR (@FirstOrGivenName IS NULL)
					)
				AND (
					(SecondName LIKE '%' + @SecondName + '%')
					OR (@SecondName IS NULL)
					)
				AND (
					(LastOrSurName LIKE '%' + @LastOrSurName + '%')
					OR (@LastOrSurName IS NULL)
					)
				AND (
					(EIDSSOrganizationID LIKE '%' + @EIDSSOrganizationID + '%')
					OR (@EIDSSOrganizationID IS NULL)
					)
			)
		)	
			SELECT
			TotalRowCount,
			EmployeeID,
			FirstOrGivenName,
			SecondName,
			LastOrSurName,
			EmployeeFullName,
			ContactPhone,
			OrganizationAbbreviatedName,
			OrganizationFullName,
			EIDSSOrganizationID,
			OrganizationID,
			PositionTypeName,
			PositionTypeID,
			EmployeeCategoryID,
			EmployeeCategory,
			AccountDisabled,
			AccountLocked,
			PersonalIdType,
			PersonalIdValue
			,TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0)
			,CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 


		OPTION (RECOMPILE);

	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END;
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEEGROUP_DEL]...';


GO

-- =================================================================================================================
-- NAME:				USP_ADMIN_EMPLOYEEGROUP_DEL
-- DESCRIPTION:			Deactivates a role given an identifier
-- AUTHOR:				Ricky Moss
-- 
-- HISTORY OF CHANGES:	
-- NAME:			DATE:			DESCRIPTION OF CHANGE
-- -----------------------------------------------------------------------------------------------------------------
-- Ricky Moss		11/29/2019		Initial Release
-- Ann Xiong		12/03/2020		Modified to use @roleName instead of @roleID to update LkupRoleSystemFunctionAccess
-- Ann Xiong		05/26/2021		Changed RoleID to idfEmployee to fix issue caused by table LkupRoleSystemFunctionAccess column name change
-- Mark Wilson		09/14/2022 		updated to include auditupdatedtm and auditupdateuser
-- Ann Xiong		02/28/2023		Implemented Data Audit
-- Ann Xiong		03/01/2023		Added @idfsSite to parameter list and Used @roleID instead of @roleName for conditions
--
-- EXEC USP_ADMIN_EMPLOYEEGROUP_DEL -500, 58218970000257, NULL
-- =================================================================================================================

ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEEGROUP_DEL]
(
	@roleID BIGINT,
	@roleName BIGINT,
	@idfsSite BIGINT,
	@user NVARCHAR(50)
)
AS
	DECLARE @returnCode INT = 0
	DECLARE @returnMsg  NVARCHAR(50) = 'SUCCESS'

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017058;                         -- User Group
	declare @idfObject bigint = @roleID;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfObjectTable_tlbEmployeeGroup bigint = 75530000000;
	declare @idfObjectTable_trtBaseReference BIGINT = 75820000000;
	declare @idfObjectTable_tlbEmployeeGroupMember bigint = 75540000000;
	declare @idfObjectTable_trtStringNameTranslation bigint = 75990000000;

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@user) userInfo

	--Data Audit--

BEGIN
	BEGIN TRY
		--Data Audit

		-- tauDataAuditEvent Event Type - Delete
		set @idfsDataAuditEventType =10016002;

		-- insert record into tauDataAuditEvent
		EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbEmployeeGroup, @idfDataAuditEvent OUTPUT
		-- End data audit

		UPDATE dbo.LkupRoleSystemFunctionAccess 
		SET intRowStatus = 1,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @user
		WHERE idfEmployee = @roleID

		UPDATE dbo.tlbEmployeeGroupMember 
		SET intRowStatus = 1,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @user
		WHERE idfEmployee = @roleID

		--Data Audit
		INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbEmployeeGroupMember, @roleName
		-- End data audit

		UPDATE dbo.trtBaseReference 
		SET intRowStatus = 1,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @user
		WHERE idfsBaseReference = @roleID

				--Data Audit
		INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_trtBaseReference, @roleName
		-- End data audit

		UPDATE dbo.tlbEmployeeGroup 
		SET intRowStatus = 1,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @user
		WHERE idfEmployeeGroup = @roleID AND idfsSite = @idfsSite	

		--Data Audit
		INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbEmployeeGroup, @roleID
		-- End data audit

		UPDATE dbo.trtStringNameTranslation 
		SET intRowStatus = 1,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @user
		WHERE idfsBaseReference = @roleID

		--Data Audit
		INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @roleName
		-- End data audit

		--SELECT @returnCode AS 'returnCode', @returnMsg AS 'returnMessage'
		SELECT
			 @returnCode ReturnCode, 
			 @returnMsg AS ReturnMessage
	END TRY

	BEGIN CATCH
		THROW

	END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEEGROUP_GETDETAIL]...';


GO
-- =================================================================================================================
-- NAME:				USP_ADMIN_EMPLOYEEGROUP_GETDETAIL
-- DESCRIPTION:			Retrieves a role given a role identifier and language
-- AUTHOR:				Ricky Moss
-- 
-- HISTORY OF CHANGES:	
-- NAME:			DATE:			DESCRIPTION OF CHANGE
-- -----------------------------------------------------------------------------------------------------------------
-- Ricky Moss		12/02/2019		Initial Release
-- Ann Xiong		03/01/2023		Fixed the issue of wrong National Name returned
--
-- EXEC USP_ADMIN_EMPLOYEEGROUP_GETDETAIL -499, 'en', NULL
-- =================================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEEGROUP_GETDETAIL]
(
	@idfEmployeeGroup BIGINT,
	@langId NVARCHAR(50),
	@user NVARCHAR(100)
)
AS
BEGIN
	BEGIN TRY
		SELECT eg.idfEmployeeGroup, eg.idfsEmployeeGroupName, egbr.strDefault, eg.strName as strName, eg.strDescription FROM tlbEmployeeGroup eg
		JOIN FN_GBL_Reference_GETList(@langId, 19000022) egbr
		ON eg.idfsEmployeeGroupName = egbr.idfsReference
		WHERE idfEmployeeGroup = @idfEmployeeGroup AND intRowStatus = 0
	END TRY
	BEGIN CATCH
		THROW
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEEGROUP_GETLIST]...';


GO
-- ===============================================================================================================
-- Name: USP_EMPLOYEEGROUP_GETLIST
-- Description: 
-- Author: Ricky Moss
--
-- History of changes
--
-- Name					Date			Change
-- ---------------------------------------------------------------------------------------------------------------
-- Ricky Moss			11/25/2019		Initial Release
-- Ricky Moss			12/03/2019		Added Pagination
-- Ricky Moss			12/11/2019		Added idfsEmployeeGroupName
-- Ann Xiong			05/18/2021		Added paging
-- Mandar Kularni		07/01/2021		Replaced parameter @user with @idfsSite
-- Ann Xiong            03/01/2023	    Added intRowStaus =0 in tlbEmployeeGroup eg
--
-- EXEC USP_ADMIN_EMPLOYEEGROUP_GETLIST 'Human', NULL, 'en', 1, 1, 10, 'strDefault' , 'asc'
-- EXEC USP_ADMIN_EMPLOYEEGROUP_GETLIST 'La', null, 'ru', 871, 1, 10, 'strDefault' , 'asc'
-- ===============================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEEGROUP_GETLIST]
(

		@strName NVARCHAR(500),
		@strDescription NVARCHAR(1000),
		@langId NVARCHAR(50)
		,@idfsSite BIGINT
		,@pageNo INT = 1
		,@pageSize INT = 10 
		,@sortColumn NVARCHAR(30) = 'strDefault' 
		,@sortOrder NVARCHAR(4) = 'asc'
)
AS
BEGIN
	BEGIN TRY
		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE( 
			idfEmployeeGroup bigint,
			idfsEmployeeGroupName bigint,
			strDefault nvarchar(2000), 
			strName nvarchar(2000),
			strDescription nvarchar(2000) 
			)
	
		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		
		INSERT INTO @T
		SELECT	eg.idfEmployeeGroup, 
				eg.idfsEmployeeGroupName, 
				egbr.strDefault, 
				egbr.[name] as strName, 
				eg.strDescription 
		FROM	tlbEmployeeGroup eg
				JOIN FN_GBL_ReferenceRepair(@langId, 19000022) egbr
					ON eg.idfsEmployeeGroupName = egbr.idfsReference
		WHERE	ISNULL(strDefault, '') LIKE IIF(@strName IS NOT NULL, '%' + @strName + '%', ISNULL(strDefault,'')) 
		AND		ISNULL(strDescription, '') LIKE IIF(@strDescription IS NOT NULL, '%' + @strDescription + '%', ISNULL(strDescription,''))
		AND eg.intRowStatus =0 and egbr.intRowStatus=0 and eg.idfsEmployeeGroupName != -506 and eg.idfEmployeeGroup != -506 
		--AND		eg.idfsSite =  @idfsSite
		AND		(eg.idfsSite =  @idfsSite or @idfsSite IS NULL)

		ORDER BY strDefault 		
		;
		WITH CTEResults as
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfEmployeeGroup' AND @SortOrder = 'asc' THEN idfEmployeeGroup END ASC,
				CASE WHEN @sortColumn = 'idfEmployeeGroup' AND @SortOrder = 'desc' THEN idfEmployeeGroup END DESC,
				CASE WHEN @sortColumn = 'idfsEmployeeGroupName' AND @SortOrder = 'asc' THEN idfsEmployeeGroupName END ASC,
				CASE WHEN @sortColumn = 'idfsEmployeeGroupName' AND @SortOrder = 'desc' THEN idfsEmployeeGroupName END DESC,
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'asc' THEN strDefault END ASC,
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'desc' THEN strDefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'strDescription' AND @SortOrder = 'asc' THEN strDescription END ASC,
				CASE WHEN @sortColumn = 'strDescription' AND @SortOrder = 'desc' THEN strDescription END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount, 
				idfEmployeeGroup,
				idfsEmployeeGroupName,
				strDefault,
				strName,
				strDescription
			FROM @T
		)

			SELECT
				TotalRowCount, 
				idfEmployeeGroup,
				idfsEmployeeGroupName,
				strDefault,
				strName,
				strDescription,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 
	END TRY
	BEGIN CATCH
		THROW
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ActivityParameters_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ActivityParameters_GET
-- Description:	Retrieves the list of Activity Parameters 
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Kishore Kodru	11/28/2018	Initial release for new API.
-- Stephen Long		08/20/2019	Removed commit and rollback transaction statements.
-- Stephen Long		10/02/2019	Added parameter type to table variable.
-- Doug Albanese	07/29/2021	Added idfActivityParameters to the return list
-- Doug Albanese	08/12/2021	Had to reverse some of the changes that Mandar put in, because EF doesn't accept SQL_VARIANT datatypes
-- Mark Wilson		09/30/2021  removed the check for NULL LangID and also removed unused variables.  Added test code.
-- Doug Albanese	10/04/2022	Correction to a translation join to denote which type the data is from the SQL Variant field
-- Doug Albanese	02/24/2023	Create a patch to convert the intNumRow column to a normal sequence of numbers so that the Matrix Flex Form Control can displaying them in the right place.
-- Test code
/*

DECLARE @observationList NVARCHAR(MAX) = '34400000806;1639880000004;1685240000004;1690060000004'
EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
	@observationList = @observationList, 
	@LangID = 'en-US'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_ActivityParameters_GET] 
(
	@observationList NVARCHAR(MAX),
	@LangID NVARCHAR(50) = NULL
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE 
		@idfsLanguage BIGINT,
		@rowCount INT,
		@currentRow INT,
		@currentObservation BIGINT,
		@idfVersion BIGINT,
		@innerCurrentRow INT,
		@NumRow INT,
		@idfRow BIGINT,
		@CurrentIdfRow BIGINT,
		@type BIGINT,
		@innerRowCount INT,
		@idfsSection BIGINT,
		@idfsCurrentSection BIGINT,
		@OldType BIGINT = 0

	DECLARE @ResultTable TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[intNumRow] INT,
		[Type] BIGINT,
		[varValue] NVARCHAR(4000),
		[strNameValue] NVARCHAR(200),
		[numRow] INT,
		[ParameterType] BIGINT 
		)
	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[intRowNumber] INT
		)
	DECLARE @MatrixInfo AS TABLE (
		[idfVersion] BIGINT,
		[idfsAggrCaseType] BIGINT,
		[idfAggregateCaseSection] BIGINT
		)
	DECLARE @matrixTable AS TABLE (
		idfVersion BIGINT,
		idfRow BIGINT,
		idfsParameter BIGINT,
		strDefaultParameterName NVARCHAR(400),
		idfsParameterValue NVARCHAR(MAX),
		NumRow INT,
		[strNameValue] NVARCHAR(200),
		[idfsSection] BIGINT,
		[langid] NVARCHAR(20)
		)
	  DECLARE @DistinctNumRows TABLE (
		[OldNumRow] INT,
		[NewNumRow] INT
		)
	BEGIN TRY
		SET @idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID);

		INSERT INTO @observationsTable (
			[idfObservation],
			[intRowNumber]
			)
		SELECT CAST([Value] AS BIGINT),
			ROW_NUMBER() OVER (
				ORDER BY [Value]
				)
		FROM [dbo].[FN_GBL_SYS_SplitList](@observationList, NULL, NULL)
		
		INSERT INTO @ResultTable 
		(
			idfActivityParameters,
			idfObservation,
			idfsFormTemplate,
			idfsParameter,
			idfsSection,
			idfRow,
			varValue,
			[Type],
			numRow, 
			[ParameterType]
		)
		SELECT 
			AP.idfActivityParameters,
			AP.idfObservation,
			O.idfsFormTemplate,
			AP.idfsParameter,
			P.idfsSection,
			AP.idfRow,
			CAST(AP.varValue AS NVARCHAR(MAX)),
			dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
			ROW_NUMBER() OVER (
				PARTITION BY AP.idfObservation ORDER BY AP.idfRow
				), 
			P.idfsParameterType
		FROM dbo.tlbActivityParameters AP
		LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
		INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
		WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
		AND AP.intRowStatus = 0
		AND O.intRowStatus = 0
		ORDER BY 
			AP.idfObservation,
			P.idfsSection,
			AP.idfRow

		SELECT @rowCount = MAX([intRowNumber])
		FROM @observationsTable

		
		SET @currentRow = 1;

		WHILE (@currentRow <= @rowCount)
		BEGIN
			SELECT @currentObservation = [idfObservation]
			FROM @observationsTable
			WHERE intRowNumber = @currentRow;

			DELETE
			FROM @MatrixInfo

			INSERT INTO @MatrixInfo
			EXEC dbo.USP_ADMIN_FF_AggregateObservationMatrixVersion_GET 
				@currentObservation

			SELECT TOP 1 @idfVersion = [idfVersion]
			FROM @MatrixInfo

			IF (@idfVersion IS NULL)
			BEGIN
				SELECT TOP 1 @idfVersion = [idfVersion]
				FROM dbo.tlbAggrMatrixVersionHeader
				WHERE idfsMatrixType IN (
						SELECT TOP 1 [idfAggregateCaseSection]
						FROM @MatrixInfo
						)
					AND [blnIsActive] = 1
				ORDER BY CAST(ISNULL(blnIsDefault, 0) AS INT) + CAST(ISNULL(blnIsActive, 0) AS INT) DESC,
					datStartDate DESC
			END;

			UPDATE @observationsTable
			SET [idfVersion] = @idfVersion
			WHERE intRowNumber = @currentRow;

			SELECT @innerRowCount = NULL

			SELECT @innerRowCount = MAX([numRow])
			FROM @ResultTable
			WHERE [Type] = 1
				AND [idfObservation] = @currentObservation

			IF (@innerRowCount > 0)
			BEGIN
				SELECT @NumRow = - 1,
					@CurrentIdfRow = 0,
					@innerCurrentRow = 1;

				DECLARE curs CURSOR LOCAL FORWARD_ONLY STATIC
				FOR
				SELECT [idfRow],
					[idfsSection]
				FROM @ResultTable
				WHERE [Type] = 1
					AND [idfObservation] = @currentObservation

				OPEN curs

				FETCH NEXT
				FROM curs
				INTO @idfRow,
					@idfsSection

				WHILE @@FETCH_STATUS = 0
				BEGIN
					IF (@idfsCurrentSection IS NULL)
						SET @idfsCurrentSection = @idfsSection;

					IF (@idfsCurrentSection <> @idfsSection)
					BEGIN
						SET @idfsCurrentSection = @idfsSection;
						SET @NumRow = - 1;
					END

					IF (@CurrentIdfRow <> @idfRow)
					BEGIN
						SET @CurrentIdfRow = @idfRow;
						SET @NumRow = @NumRow + 1;

						UPDATE @ResultTable
						SET [intNumRow] = @NumRow
						WHERE [idfRow] = @idfRow
							AND [idfObservation] = @currentObservation
					END

					FETCH NEXT
					FROM curs
					INTO @idfRow,
						@idfsSection
				END

				CLOSE curs

				DEALLOCATE curs
			END
			
			SELECT @innerRowCount = NULL

			SELECT @innerRowCount = MAX([numRow])
			FROM @ResultTable
			WHERE [Type] > 1
				AND [idfObservation] = @currentObservation

			IF (@innerRowCount > 0)
			BEGIN
				SELECT @NumRow = NULL,
					@idfRow = NULL,
					@innerCurrentRow = 1;

				DECLARE curs CURSOR LOCAL FORWARD_ONLY STATIC
				FOR
				SELECT [idfRow],
					[Type]
				FROM @ResultTable
				WHERE [Type] > 1
					AND [idfObservation] = @currentObservation

				OPEN curs

				FETCH NEXT
				FROM curs
				INTO @idfRow,
					@type

				WHILE @@FETCH_STATUS = 0
				BEGIN
					IF @OldType <> ISNULL(@type, - 1)
					BEGIN
						DELETE
						FROM @matrixTable

						INSERT INTO @matrixTable
						EXEC dbo.USP_ADMIN_FF_PredefinedStub_GET 
							@type,
							@idfVersion,
							@idfsLanguage

						SET @OldType = ISNULL(@type, 0)
					END

					SET @NumRow = NULL

					SELECT @NumRow = [NumRow]
					FROM @matrixTable
					WHERE [idfRow] = @idfRow

					UPDATE @ResultTable
					SET [intNumRow] = @NumRow
					WHERE [idfRow] = @idfRow
						AND [idfObservation] = @currentObservation;

					FETCH NEXT
					FROM curs
					INTO @idfRow,
						@type
				END

				CLOSE curs

				DEALLOCATE curs
			END

			SET @currentRow = @currentRow + 1;
		END
		
		UPDATE @ResultTable
		SET [intNumRow] = 0
		WHERE [Type] = 0
		
		UPDATE RT
		SET RT.[strNameValue] = ISNULL(SNT.[strTextString], BR.[strDefault])
		FROM @ResultTable AS RT
		INNER JOIN dbo.ffParameter P ON RT.idfsParameter = P.idfsParameter AND P.idfsEditor = 10067002 AND P.[intRowStatus] = 0
		INNER JOIN dbo.trtBaseReference BR ON BR.idfsBaseReference = CASE 
																		WHEN (SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'bigint')
																			OR (
																				SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'nvarchar'
																				AND ISNUMERIC(CAST(RT.varValue AS NVARCHAR)) = 1
																				)
																			THEN CAST(RT.varValue AS BIGINT)
																		ELSE - 1
																		END
		 LEFT JOIN dbo.trtStringNameTranslation SNT ON SNT.idfsBaseReference = CASE 
																		WHEN (SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'bigint')
																			OR (
																				SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'nvarchar'
																				AND ISNUMERIC(CAST(RT.varValue AS NVARCHAR)) = 1
																				)
																			THEN CAST(RT.varValue AS BIGINT)
																		ELSE - 1
																		END AND SNT.idfsLanguage = @idfsLanguage AND SNT.[intRowStatus] = 0

/***********************************************************************/
/* Patch to renumber Row Numbers for use with Flex Form matrix control */
/***********************************************************************/
		 INSERT INTO @DistinctNumRows
		 SELECT DISTINCT intNumRow, null as NewNumRow
		 FROM @ResultTable
	
		 UPDATE
			 @ResultTable
		 SET
			 intNumRow = dnr. NewNumRow
		 FROM
			 @ResultTable rt
		 INNER JOIN
			 (SELECT 
				  OldNumRow, 
				  (ROW_NUMBER() OVER (ORDER BY OldNumRow)  - 1 ) AS NewNumRow
			   FROM   @DistinctNumRows
			) dnr
		 ON 
			 rt.intNumRow = dnr.OldNumRow;
/***********************************************************************/

		
		SELECT 
			[idfActivityParameters],
			[idfObservation],
			[idfsFormTemplate],
			[idfsParameter],
			[idfsSection],
			[idfRow],
			[intNumRow],
			[Type],
			[varValue],
			[strNameValue],
			[numRow],
			0 AS [FakeField], 
			[ParameterType] 
		FROM @ResultTable
		ORDER BY [idfObservation],
			[idfsParameter],
			[idfRow]
			
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_Copy_Observation]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_Copy_Observation
-- Description: Copies the answers of a flex form (observation) to another observation.
--          
-- Revision History:
-- Name            Date			Change
-- --------------- ----------	--------------------------------------------------------------------
-- Doug Albanese   5/6/2020		Initial release for new API.
-- Stephen Long    05/21/2022   Removed suppress select call as it is throwing a nested insert-exec
--                              exception via SQL.  Removed rollback transaction as there is no 
--                              transaction begun.
--	Doug Albanese	07/01/2022	Change the reception of @varValue to be NVARCHAR(MAX)
--  Doug Albanese   09/22/2022  Ending Select statement is not needed, since this SP is called from other SPs only.
-- Doug Albanese  12/30/2022	 the "answer" begin passed to USP_ADMIN_FF_ActivityParameters_Set needed to be set as JSON
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_Copy_Observation]
(
    @idfObservation BIGINT OUTPUT,
    @User NVARCHAR(50),
    @idfsSite BIGINT = NULL
)
AS
BEGIN
    DECLARE @returnCode				   INT = 0;
    DECLARE @returnMsg				   NVARCHAR(MAX) = 'SUCCESS';

    DECLARE @idfsParameter			   BIGINT
    DECLARE @idfActivityParameters	   BIGINT
    DECLARE @varValue				   NVARCHAR(4000)
    DECLARE @idfsFormTemplate		   BIGINT
    DECLARE @newidfObservation		   BIGINT
    DECLARE @newidfActivityParameters  BIGINT
	DECLARE @idfsEditor				   BIGINT
	DECLARE	@idfRow					   BIGINT
	
   DECLARE @answers TABLE  (
		 idfsParameter	 BIGINT,
		 idfsEditor		 BIGINT,
		 answer			 NVARCHAR(4000),
		 idfRow			 BIGINT
   )

   DECLARE @JSONAnswers NVARCHAR(MAX)

    Declare @SupressSelect TABLE
    (
        retrunCode int,
        returnMessage varchar(200)
    )

    DECLARE @ParameterAnswers TABLE
    (
        idfActivityParameters	 BIGINT,
        idfsParameter			 BIGINT,
        varValue				 NVARCHAR(4000),
		idfsEditor				 BIGINT,
		idfRow					 BIGINT
    )

    BEGIN TRY
        SELECT @idfsFormTemplate = idfsFormTemplate
        FROM tlbObservation
        WHERE idfObservation = @idfObservation

        INSERT INTO @ParameterAnswers
        SELECT CONVERT(BIGINT, AP.idfActivityParameters),
               CONVERT(BIGINT, AP.idfsParameter),
               CONVERT(NVARCHAR(4000), AP.varValue),
			   CONVERT(BIGINT, P.idfsEditor),
			   CONVERT(BIGINT, AP.idfRow)
        FROM dbo.tlbActivityParameters AP
		INNER JOIN ffParameter P
		ON P.idfsParameter = AP.idfsParameter
        WHERE idfObservation = @idfObservation

        --INSERT INTO @SupressSelect
        EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbObservation', @newidfObservation OUTPUT

        INSERT INTO dbo.tlbObservation
        (
            idfObservation,
            idfsFormTemplate,
            intRowStatus,
            idfsSite,
            AuditCreateUser,
            AuditCreateDTM
        )
        VALUES
        (
			@newidfObservation, 
			@idfsFormTemplate, 
			0, 
			@idfsSite, 
			@User, 
			GETDATE()
		)

        WHILE EXISTS (SELECT TOP 1 idfActivityParameters FROM @ParameterAnswers)
			BEGIN
				SELECT TOP 1
					@idfActivityParameters = idfActivityParameters,
					@idfsParameter = idfsParameter,
					@varValue = CAST(varValue AS NVARCHAR),
					@idfsEditor = idfsEditor,
					@idfRow = idfRow
				FROM @ParameterAnswers
				
				INSERT INTO @answers (idfsParameter, idfsEditor, answer, idfRow)
				VALUES (@idfsParameter, @idfsEditor, @varValue, @idfRow)
				
				SET ROWCOUNT 1
				DELETE FROM @ParameterAnswers
				SET ROWCOUNT 0
			END

		 SET @JSONAnswers = (SELECT * FROM @answers FOR JSON AUTO)
				
		 --EXEC dbo.USP_ADMIN_FF_ActivityParametersForCopy_Set @idfObservation = @newidfObservation,
			--										  @idfsFormTemplate = @idfsFormTemplate,
			--										  @answers = @JSONAnswers,
			--										  @User = @User

        SET @idfObservation = @newidfObservation
        
    END TRY
    BEGIN CATCH
        SET @returnCode = ERROR_NUMBER();
        SET @returnMsg
            = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: '
              + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
              + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: '
              + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Case_Set]...';


GO
-- ================================================================================================
-- Name: [USP_OMM_Case_Set]
-- Description: Insert/Update for Outbreak Case
--          
-- Author: Doug Albanese
-- Revision History
--	Name			Date		Change Detail
--  Doug Albanese	5/21/2020	Moved the Case Monitoring SP call to this SP from USP_OMM_HUMAN_DISEASE_SET
--	Doug Albanese	10/12/2020	Corrected Audit information
--	Doug Albanese	10/01/2021	Cleaned up and prepped for EF
--	Doug Albanese	04/19/2022	Refactored to use location hierarchy
--	Doug Albanese	04/21/2022	Formatted and some refactoring
--	Doug Albanese	04/27/2022	Refactored paramters to eliminate unused 
--	Doug Albanese	04/28/2022	Further Clean up to align with json array detection
--	Doug Albanese	04/30/2022	Added idfHumanCase to contacts USSP
--	Doug Albanese	05/02/2022	Refactored Antimicrobial
--	Doug Albanese	05/06/2022	Corrected "Start Date of Investigation"...wrong parameter used previously
--	Doug Albanese	05/06/2022	Corrected Street/Postalcode data types
--  Stephen Long    05/21/2022  Fix to idfsSite on call to USP_ADMIN_FF_COPY_OBSERVATION.
--                              Added begin transaction and commit transaction.
--	Doug Albanese	05/23/2022	Supression on USSP_OMM_CONTACT_SET was nested too deep. Using Functional Call only to get around
--	Doug Albanese	06/01/2022	Removal of transaction block to allow nested calls to function properly.
--	Doug Albanese	07/01/2022	Changes to fix the Copy process of an observation and flex form template for use within an outbreak case
-- Stephen Long     07/18/2022  Added site alert logic.
-- Doug Albanese    09/22/2022  Removed supression on USP_ADMIN_FF_Copy_Observation
-- Doug Albanese    10/19/2022  Corrected the "@StartDateofInvestigation" to have the right parameter passed.
-- Doug Albanese    10/25/2022  Put the Case Questionnnaire in the right location on the Outbreak Case Report side.
-- Doug Albanese    12/29/2022  Added Return Message to denote the use of an imported diseased report to an outbreak.
-- Doug Albanese    01/06/2023  Removed the copy process for the "clinical signs" flex form for the moment. It is causing POCO issues
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Case_Set]
(
    @LangID NVARCHAR(50),
    @intRowStatus INT = 0,
    @User NVARCHAR(100) = NULL,

    --Outbreak Case Details
    @OutbreakCaseReportUID BIGINT = -1,
    @idfOutbreak BIGINT = NULL,
    @idfHumanCase BIGINT = -1,
    @idfVetCase BIGINT = NULL,
    @OutbreakCaseObservationID BIGINT = NULL,

    --Human Disease related items for creation
    @idfHumanActual BIGINT = -1,
    @idfsDiagnosisOrDiagnosisGroup BIGINT = -1,

    --Notification
    @datNotificationDate DATETIME = NULL,
    @idfSentByOffice BIGINT = NULL,
    @idfSentByPerson BIGINT = NULL,
    @idfReceivedByOffice BIGINT = NULL,
    @idfReceivedByPerson BIGINT = NULL,

    --Case Location
    @CaseGeoLocationID BIGINT = NULL,
    @CaseidfsLocation BIGINT = NULL,
    @CasestrStreetName NVARCHAR(200) = NULL,
    @CasestrApartment NVARCHAR(200) = NULL,
    @CasestrBuilding NVARCHAR(200) = NULL,
    @CasestrHouse NVARCHAR(200) = NULL,
    @CaseidfsPostalCode NVARCHAR(200) = NULL,
    @CasestrLatitude FLOAT = NULL,
    @CasestrLongitude FLOAT = NULL,
    @CasestrElevation FLOAT = NULL,

    --Clinical Information
    @CaseStatusID BIGINT = NULL,
    @datOnSetDate DATETIME = NULL,
    @datFinalDiagnosisDate DATETIME = NULL,
    @idfHospital BIGINT = NULL,
    @datHospitalizationDate DATETIME = NULL,
    @datDischargeDate DATETIME = NULL,
    @Antimicrobials NVARCHAR(MAX) = NULL,
    @vaccinations NVARCHAR(MAX) = NULL,
    @strClinicalNotes NVARCHAR(500) = NULL,
    @idfsYNHospitalization BIGINT = NULL,
    @idfsYNAntimicrobialTherapy BIGINT = NULL,
    @idfsYNSpecIFicVaccinationAdministered BIGINT = NULL,
    @StartDateofInvestigation DATETIME = NULL,
    @idfCSObservation BIGINT = NULL,

    --Outbreak Investigation
    @OutbreakCaseClassificationID BIGINT = NULL,
    @idfInvestigatedByOffice BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @datInvestigationStartDate DATETIME = NULL,
    @IsPrimaryCaseFlag NVARCHAR(1) = NULL,
    @strNote NVARCHAR(500) = NULL,
    @idfEpiObservation BIGINT = NULL,

    --Case Monitoring
    @CaseMonitorings NVARCHAR(MAX) = NULL,

    --Contacts
    @CaseContacts NVARCHAR(MAX) = NULL,

    --Samples
    @idfsYNSpecimenCollected BIGINT = NULL,
    @CaseSamples NVARCHAR(MAX) = NULL,

    --Tests
    @idfsYNTestsConducted BIGINT = NULL,
    @CaseTests NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL
)
AS
BEGIN
    DECLARE @returnCode INT = 0
    DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'
    DECLARE @SiteID BIGINT = (
                                 SELECT idfsSite FROM dbo.tlbOutbreak WHERE idfOutbreak = @idfOutbreak
                             )
    DECLARE @outbreakLocation BIGINT = NULL
    DECLARE @strHospitalizationPlace NVARCHAR(200)
    DECLARE @idfHuman BIGINT = NULL
    DECLARE @strHumanCaseId NVARCHAR(200)
    DECLARE @idfsFinalState BIGINT = NULL

    DECLARE @idfContactCasePerson BIGINT
    DECLARE @ContactRelationshipTypeID BIGINT
    DECLARE @DateOfLastContact DATETIME
    DECLARE @datDateOfLastContact DATETIME2
    DECLARE @PlaceOfLastContact NVARCHAR(200)
    DECLARE @ContactStatusID BIGINT
    DECLARE @DateOfLastContact2 VARCHAR(10)
    DECLARE @idfsPersonContactType BIGINT
    DECLARE @idfContactedCasePerson BIGINT
    DECLARE @SQL VARCHAR(MAX)
    DECLARE @RowID BIGINT = NULL
    DECLARE @OutbreakCaseContactUID BIGINT = NULL
    DECLARE @ContactComments NVARCHAR(200) = NULL
    DECLARE @ContactTypeID BIGINT = NULL

    DECLARE @PrepCollections INT = 0
    DECLARE @ExecuteHumanSP INT = 0
    DECLARE @CreateOutbreakCase INT = 0
    DECLARE @ExecuteVetSP INT = 0
    DECLARE @HumanSamplesTemp NVARCHAR(MAX) = NULL
    DECLARE @HumanContactsTemp NVARCHAR(MAX) = NULL

    DECLARE @idfsFormTemplate BIGINT
    DECLARE @idfsFormTemplateNew BIGINT

    DECLARE @strCaseID NVARCHAR(50) = NULL
    DECLARE @idfObservation BIGINT = NULL

    DECLARE @EventId BIGINT,
            @EventTypeId BIGINT = NULL,
            @EventSiteId BIGINT = NULL,
            @EventObjectId BIGINT = NULL,
            @EventUserId BIGINT = NULL,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = NULL;

    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );

    SET NOCOUNT ON

    BEGIN TRY
        --BEGIN TRANSACTION;

        if (@idfCSObservation = 0)
            SET @idfCSObservation = NULL

        --Because of the JSON Table data being passed, the value of NULL is converted to a string. In these cases, they must be set to a True NULL
        IF (@Antimicrobials = 'NULL' OR @Antimicrobials = '[]')
            SET @Antimicrobials = NULL
        IF (@vaccinations = 'NULL' OR @vaccinations = '[]')
            SET @vaccinations = NULL
        IF (@CaseMonitorings = 'NULL' OR @CaseMonitorings = '[]')
            SET @CaseMonitorings = NULL
        IF (@CaseContacts = 'NULL' OR @CaseContacts = '[]')
            SET @CaseContacts = NULL
        IF (@CaseSamples = 'NULL' OR @CaseSamples = '[]')
            SET @CaseSamples = NULL
        IF (@CaseTests = 'NULL' OR @CaseTests = '[]')
            SET @CaseTests = NULL

        --Table calls for NCHAR, but we are going to need an integer to convert into boolean
        IF (@IsPrimaryCaseFlag = 't')
        BEGIN
            SET @IsPrimaryCaseFlag = 1
        END
        ELSE
        BEGIN
            SET @IsPrimaryCaseFlag = 0
        END

        Declare @SupressSelect table
        (
            retrunCode int,
            returnMsg varchar(200)
        )

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        --This condition was added later, after I found out that I created a bad architecture
        IF @idfVetCase IS NOT NULL
        BEGIN
            SET @ExecuteVetSP = 1

            IF EXISTS
            (
                SELECT OutBreakCaseReportUID
                FROM dbo.OutbreakCaseReport
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
            )
            BEGIN
                --Case is already created
                --This can only be an update of information across the outbreak and human case elements.
                UPDATE dbo.OutbreakCaseReport
                SET idfOutbreak = @idfOutbreak,
                    OutbreakCaseObservationID = @OutbreakCaseObservationID,
                    OutbreakCaseStatusID = @CaseStatusID,
                    OutbreakCaseClassificationID = @OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag = @IsPrimaryCaseFlag,
                    intRowStatus = @intRowStatus,
                    AuditUpdateUser = @User,
                    AuditUpdateDTM = GETDATE()
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID

            END
            ELSE
            BEGIN
                --At this point, the outbreak case doesn't exist.
                --This means, it could be an import or a creation from the outbreak side.
                --regardless of this situation, we need to get an idea for the Outbreak case being created.
                INSERT INTO @SupressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutBreakCaseReportUID OUTPUT;

                DECLARE @strOutbreakCaseID NVARCHAR(200)

                --If a human case id was passed, we are performing an import
                IF @idfVetCase IS NOT NULL
                   AND @idfVetCase <> -1
                BEGIN
                    --To keep duplicate imports from occuring, check to make sure a record doesn't already exist within the case listing of the outbreak session
                    IF NOT EXISTS
                    (
                        SELECT OutBreakCaseReportUID
                        FROM dbo.OutbreakCaseReport
                        WHERE idfOutbreak = @idfOutbreak
                              AND idfVetCase = @idfVetCase
                              AND intRowStatus = 0
                    )
                    BEGIN
                        INSERT INTO @SupressSelect
                        EXEC dbo.USP_GBL_NextNumber_GET 'Vet Outbreak Case',
                                                        @strOutbreakCaseID OUTPUT,
                                                        NULL;

                        INSERT INTO dbo.OutbreakCaseReport
                        (
                            OutbreakCaseReportUID,
                            idfOutbreak,
                            strOutbreakCaseID,
                            --idfHumanCase,
                            idfVetCase,
                            OutbreakCaseObservationId,
                            OutbreakCaseStatusId,
                            OutbreakCaseClassificationID,
                            isPrimaryCaseFlag,
                            introwStatus,
                            AuditCreateUser,
                            AuditCreateDTM,
                            AuditUpdateUser,
                            AuditUpdateDTM
                        )
                        VALUES
                        (   @OutBreakCaseReportUID,
                            @idfOutbreak,
                            @strOutbreakCaseID,
                            --NULL,
                            @idfVetCase,
                            @idfEpiObservation,
                            @CaseStatusID,
                            @OutbreakCaseClassificationID,
                            @IsPrimaryCaseFlag,
                            0,
                            @User,
                            GETDATE(),
                            NULL,
                            NULL
                        )
                    END
                    --Tie the outbreak case and the human case together, using the outbreak session id (idfOutbreak)
                    --This will complete the import process, as all information pertain to the case will now be
                    --joined in a "getdetails", when retrieved on the outbreak side.
                    UPDATE dbo.tlbVetCase
                    SET idfOutbreak = @idfOutbreak
                    WHERE idfVetCase = @idfVetCase

                    SELECT @idfObservation = idfObservation
                    FROM dbo.tlbVetCase
                    WHERE idfVetCase = @idfVetCase

                    --INSERT INTO @SupressSelect
                    EXEC dbo.USP_ADMIN_FF_Copy_Observation @idfObservation = @idfObservation,
                                                           @User = @User,
                                                           @idfsSite = @SiteID
                    UPDATE dbo.OutbreakCaseReport
                    SET OutbreakCaseObservationID = @idfObservation
                    WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
                END
            END
        END
        ELSE
        BEGIN
            IF EXISTS
            (
                SELECT OutBreakCaseReportUID
                FROM dbo.OutbreakCaseReport
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
            )
            BEGIN
                --Case is already created
                --This can only be an update of information across the outbreak and human case elements.
                UPDATE dbo.OutbreakCaseReport
                SET idfOutbreak = @idfOutbreak,
                    OutbreakCaseObservationID = @OutbreakCaseObservationID,
                    OutbreakCaseStatusID = @CaseStatusID,
                    OutbreakCaseClassificationID = @OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag = @IsPrimaryCaseFlag,
                    intRowStatus = @intRowStatus,
                    AuditUpdateUser = @User,
                    AuditUpdateDTM = GETDATE()
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID

                SET @PrepCollections = 1
                SET @ExecuteHumanSP = 1
            END
            ELSE
            BEGIN
                --At this point, the outbreak case doesn't exist.
                --This means, it could be an import or a creation from the outbreak side.

                --regardless of this situation, we need to get an id for the Outbreak case being created.
                INSERT INTO @SupressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutBreakCaseReportUID OUTPUT;

                --If a human case id was passed, we are performing an import
                IF @idfHumanCase IS NOT NULL
                   AND @idfHumanCase <> -1
                BEGIN
                    IF EXISTS
                    (
						SELECT
						   1
						FROM 
						   tlbHumanCase
						WHERE 
						   (idfOutbreak IS NULL OR idfOutbreak = NULL) AND
						   idfHumanCase = @idfHumanCase
                    )
					   BEGIN
						   --It doesn't exist, so we need to create a case "smart id", on the outbreak side, for the item being imported.
						   INSERT INTO @SupressSelect
						   EXEC dbo.USP_GBL_NextNumber_GET 'Human Outbreak Case',
														   @strOutbreakCaseID OUTPUT,
														   NULL;

						   --Generate a shell record in the case table to denote the item from the human case being imported
						   --Below is the minimal amount of fields needed to create the case. All other information will be entered
						   --during the editing phase
						   INSERT INTO dbo.OutbreakCaseReport
						   (
							   OutBreakCaseReportUID,
							   idfOutbreak,
							   strOutbreakCaseID,
							   idfHumanCase,
							   intRowStatus,
							   AuditCreateUser,
							   AuditCreateDTM,
							   AuditUpdateUser,
							   AuditUpdateDTM
						   )
						   VALUES
						   (@OutBreakCaseReportUID,
							@idfOutbreak,
							@strOutbreakCaseID,
							@idfHumanCase,
							0  ,
							@User,
							GETDATE(),
							NULL,
							NULL
						   )

						   /*Temp solution??? To tie in datFinalDiagnosisDate with datTentativeDiagnosisDate*/
						   UPDATE dbo.tlbHumanCase
						   SET datFinalDiagnosisDate = datTentativeDiagnosisDate,
							   AuditUpdateUser = @User
						   WHERE idfHumanCase = @idfHumanCase
								 AND datFinalDiagnosisDate IS NULL

						   UPDATE dbo.tlbHumanCase
						   SET idfOutbreak = @idfOutbreak,
							   AuditUpdateUser = @User
						   WHERE idfHumanCase = @idfHumanCase

						   SELECT @idfEPIObservation = idfEPIObservation,
								  @idfCSObservation = idfCSObservation
						   FROM dbo.tlbHumanCase
						   WHERE idfHumanCase = @idfHumanCase

						   --IF COALESCE(@idfEpiObservation, 0) > 0
						   --BEGIN
							  -- SELECT @idfsFormTemplate = idfsFormTemplate
							  -- FROM tlbObservation
							  -- WHERE idfObservation = @idfEPIObservation

							  -- INSERT INTO @SupressSelect
							  -- EXEC dbo.USP_ADMIN_FF_Copy_Observation @idfObservation = @idfEPIObservation OUTPUT,
									--								  @User = @User,
									--								  @idfsSite = @SiteID

							  -- EXEC USP_OMM_FF_Copy_Template @LangId = @LangId,
									--						 @idfsFormTemplate = @idfsFormTemplate,
									--						 @User = @User,
									--						 @idfsSite = @SiteID,
									--						 @idfsNewFormType = 10034501

							  -- SELECT @idfsFormTemplateNew = idfsFormTemplate
							  -- FROM ffFormTemplate
							  -- WHERE AuditCreateUser = @User
									-- AND idfsFormType = 10034501
									-- AND idfsFormTemplate = @idfsFormTemplate

							  -- UPDATE tlbObservation
							  -- SET idfsFormTemplate = @idfsFormTemplateNew
							  -- WHERE idfObservation = @idfObservation
									-- AND idfsFormTemplate = @idfsFormTemplate
						   --END

						   IF COALESCE(@idfCSObservation, 0) > 0
						   BEGIN
							   INSERT INTO @SupressSelect
							   EXEC dbo.USP_ADMIN_FF_Copy_Observation @idfObservation = @idfCSObservation,
																	  @User = @User,
																	  @idfsSite = @SiteID

							   UPDATE dbo.OutbreakCaseReport
							   SET OutbreakCaseObservationID = @idfCSObservation,
								   AuditUpdateUser = @User
							   WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
						   END
					   END
					ELSE
						BEGIN
						   SET @returnMsg = 'EXISTING_OUTBREAK_CASE'
						END
                END
                ELSE
                BEGIN
                    --At this point, the data being passed is only pertaining to the manual creation of
                    --a Human Case from the outbreak side.
                    SET @CreateOutbreakCase = 1
                    SET @PrepCollections = 1
                    SET @ExecuteHumanSP = 1

                END
            END
        END

		
        IF @ExecuteHumanSP = 1
        BEGIN
            INSERT INTO @SupressSelect
            EXEC dbo.USP_OMM_HUMAN_DISEASE_SET @idfHumanCase OUTPUT,
                                               @strHumanCaseId = @strHumanCaseId,
                                               @OutbreakCaseReportUID = @OutbreakCaseReportUID,
                                               @idfHumanActual = @idfHumanActual,
                                               @idfsFinalDiagnosis = @idfsDiagnosisOrDiagnosisGroup,
                                               @datDateOfDiagnosis = @datFinalDiagnosisDate,
                                               @datNotificationDate = @datNotificationDate,
                                               @idfsFinalState = @idfsFinalState,
                                               @idfSentByOffice = @idfSentByOffice,
                                               @idfSentByPerson = @idfSentByPerson,
                                               @idfReceivedByOffice = @idfReceivedByOffice,
                                               @idfReceivedByPerson = @idfReceivedByPerson,
                                               @idfHospital = @idfHospital,
                                               @datOnSetDate = @datOnSetDate,
                                               @idfsYNHospitalization = @idfsYNHospitalization,
                                               @datHospitalizationDate = @datHospitalizationDate,
                                               @datDischargeDate = @datDischargeDate,
                                               @strHospitalName = @strHospitalizationPlace,
                                               @idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
                                               @strClinicalNotes = @strClinicalNotes,
                                               @strNote = @strNote,
                                               @idfsYNSpecIFicVaccinationAdministered = @idfsYNSpecIFicVaccinationAdministered,
                                               @idfInvestigatedByOffice = @idfInvestigatedByOffice,
                                               @idfInvestigatedByPerson = @idfInvestigatedByPerson,
                                               @StartDateofInvestigation = @StartDateofInvestigation,
                                               @idfOutbreak = @idfOutbreak,
                                               @CaseGeoLocationID = @CaseGeoLocationID,
                                               @CaseidfsLocation = @CaseidfsLocation,
                                               @CasestrStreetName = @CasestrStreetName,
                                               @CasestrApartment = @CasestrApartment,
                                               @CasestrBuilding = @CasestrBuilding,
                                               @CasestrHouse = @CasestrHouse,
                                               @CaseidfsPostalCode = @CaseidfsPostalCode,
                                               @CasestrLatitude = @CasestrLatitude,
                                               @CasestrLongitude = @CasestrLongitude,
                                               @CasestrElevation = @CasestrElevation,
                                               @SamplesParameters = @CaseSamples,
                                               @idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
                                               @idfsYNTestsConducted = @idfsYNTestsConducted,
                                               @TestsParameters = @CaseTests,
                                               @AntiviralTherapiesParameters = @Antimicrobials,
                                               @VaccinationsParameters = @vaccinations,
                                               @CaseMonitoringsParameters = @CaseMonitorings,
                                               @User = @User,
                                               @idfEpiObservation = @idfEpiObservation,
                                               @idfCSObservation = @idfCSObservation

            INSERT INTO @SupressSelect
            EXEC dbo.USSP_OMM_CASE_MONITORING_SET @CaseMonitorings = @CaseMonitorings,
                                                  @HumanDiseaseReportID = @idfHumanCase,
                                                  @User = @User

            --Update the tblHumanCase with the Outbreak Id related by the import process.
            UPDATE tlbHumanCase
            SET idfOutbreak = @idfOutbreak,
                AuditUpdateUser = @User
            WHERE idfHumanCase = @idfHumanCase
        END

        IF @CreateOutbreakCase = 1
        BEGIN
            --Create the outbreak case, with full information
            INSERT INTO @SupressSelect
            EXEC dbo.USP_GBL_NextNumber_GET 'Human Outbreak Case',
                                            @strOutbreakCaseID OUTPUT,
                                            NULL;

            INSERT INTO dbo.OutbreakCaseReport
            (
                OutBreakCaseReportUID,
                idfOutbreak,
                strOutbreakCaseID,
                idfHumanCase,
                idfVetCase,
                OutbreakCaseStatusID,
                OutbreakCaseClassificationID,
                IsPrimaryCaseFlag,
                intRowStatus,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@OutBreakCaseReportUID,
             @idfOutbreak,
             @strOutbreakCaseID,
             @idfHumanCase,
             @idfVetCase,
             @CaseStatusID,
             @OutbreakCaseClassificationID,
             @IsPrimaryCaseFlag,
             COALESCE(@intRowStatus, 0),
             @User,
             GETDATE(),
             NULL,
             NULL
            )
        END

        --Add/Update any contacts
        IF @CaseContacts IS NOT NULL
        BEGIN
            --INSERT INTO @SupressSelect
            EXEC dbo.USSP_OMM_CONTACT_SET @idfHumanCase,
                                          @CaseContacts,
                                          @User = @User,
                                          @OutbreakCaseReportUID = @OutbreakCaseReportUID,
                                          @FunctionCall = 1;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SupressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @User;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        SELECT @returnCode AS ReturnCode,
               @returnMsg AS ReturnMessage,
               @strOutbreakCaseID AS strOutbreakCaseId,
               @OutbreakCaseReportUID AS OutbreakCaseReportUID;
    END TRY
    BEGIN CATCH

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_DIAGNOSISREFERENCE_GETList]...';


GO
--=================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_GETList
--
-- Description:	Returns list of diagnosis/disease references
--							
-- Author:  Philip Shaffer
--
-- Revision History:
-- Name				 Date		 Change Detail
-- ----------------	 ----------	 -------------------------------------------------------------------
-- Doug Albanese	 07/16/2021	 Initial Release
-- Doug Albanese	 07/07/2022	 Rewrote entire SP for better performance and filtering of correct diagnosises, used for the FFD Determinants
-- Doug Albanese	 09/22/2022	 Rewrite to include other determinant types that aren't disease releated
-- Doug Albanese	 02/08/2023	 Changed how exlucsions are determined for the Determinants list.
-- Doug Albanese	 02/16/2023	 Changing the method on pulling determinanta again. Found another problem that didn't work for all situations
-- Test Code:
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en', NULL, NULL
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en', 'Hu', NULL
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en', NULL, 32
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_DIAGNOSISREFERENCE_GETList] 
	@LangID				   NVARCHAR(50)
	,@idfsFormTemplate	   BIGINT
	,@idfsFormType		   BIGINT
AS
BEGIN
	DECLARE @AccessoryCode INT = 510
	DECLARE @NonDisease	   BIT = 0

	DECLARE @idfsDiagnosisExclusions TABLE (
		idfsDiagnosis		BIGINT
	)

   DECLARE @Determinants TABLE (
	  idfsDiagnosis BIGINT,
	  strName  NVARCHAR(200)
   )

   BEGIN TRY
	  IF (@idfsFormType = 10034018 or @idfsFormType = 10034019) --Test Details / Test Run
		 BEGIN
			SET @NonDisease = 1

			INSERT INTO @Determinants
			SELECT
			   BR.idfsBaseReference AS idfsDiagnosis,
			   BRT.name AS strName
			FROM 
			   trtBaseReference BR
			INNER JOIN FN_GBL_ReferenceRepair('en-us', 19000097) BRT
			ON BRT.idfsReference = BR.idfsBaseReference
			WHERE
			   BR.intRowStatus = 0
		 END

	  IF @idfsFormType = 10034025 --Vector type specific data
		 BEGIN
			SET @NonDisease = 1

			INSERT INTO @Determinants
			SELECT
			   VT.idfsVectorType AS idfsDiagnosis,
			   VTT.name AS strName
			FROM 
			   trtVectorType VT
			INNER JOIN FN_GBL_ReferenceRepair('en-us', 19000140) VTT
			ON VTT.idfsReference = VT.idfsVectorType
			WHERE
			   VT.intRowStatus = 0
		 END

	   DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS',
	   @returnCode BIGINT = 0;
	
	  IF @NonDisease = 0
		 BEGIN
			
			  SELECT
				  @AccessoryCode = intHACode 
			  FROM 
				  trtBaseReference 
			  WHERE 
				  idfsReferenceType = 19000034 AND
				  introwStatus = 0 AND
				  idfsBaseReference = @idfsFormType
		
			  IF (@AccessoryCode IS NULL) SET @AccessoryCode = 510

			  INSERT INTO @idfsDiagnosisExclusions
			  SELECT
				  dv.idfsBaseReference
			  FROM
				  ffDeterminantValue dv
			  WHERE
				  dv.idfsFormTemplate = @idfsFormTemplate AND
				  dv.intRowStatus = 0	
			
			INSERT INTO @Determinants
			  SELECT d.idfsDiagnosis,
				  dbr.[name] AS strName
			  FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
			  INNER JOIN dbo.trtDiagnosis d
				  ON d.idfsDiagnosis = dbr.idfsReference
			  LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
				  ON d.idfsUsingType = ut.idfsReference
			  WHERE (
					  dbr.intHACode IS NULL
					  OR dbr.intHACode > 0
					  )
				  AND d.intRowStatus = 0
				  AND dbr.intRowStatus = 0
				  AND (
				  (
					  @AccessoryCode IN (
						  SELECT *
						  FROM dbo.FN_GBL_SplitHACode(dbr.intHaCode, 510)
						  )
					  )
				  OR (@AccessoryCode IS NULL)
				  ) AND
				  idfsDiagnosis NOT IN (
					  SELECT idfsDiagnosis FROM @idfsDiagnosisExclusions
				  )
			  ORDER BY dbr.[name];
		 ENd


		 SELECT
			idfsDiagnosis,
			strName
		 FROM
			@Determinants
		 ORDER BY
			strName

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_FlexForm_Get]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_FlexForm_Get
-- Description: Gets list of the Parameters.
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albabese	01/06/2020	Initial release for new API.
-- Doug Albanese	07/02/2020	Added field blnGrid to denote the displaying of data in a table format
-- Doug Albanese	09/30/2020	Added filtering for language on the Design Option Tables
-- Doug Albanese	01/06/2021	Added idfsEditMode to clarify if the parameter is required or not.
-- Doug Albanese	02/02/2021	Found a static value for English in this procedure.
-- Doug Albanese	08/01/2021	Added idfsFormTemplate for ease of access
-- Mark Wilson		09/29/2021	Updated to remove E7 FN_FF_DesignLanguageForParameter_GET, 
--								removed unused parameters
-- Doug Albanese	03/17/2022	Added a "commented out" section to replace, when development is not happening during core hours
--	Doug Albanese	08/02/2022	Fix for IGAT #400. Extra parameters showing up that didn't belong to questionnnaire on matrix.
-- Doug Albanese	 01/0/2023	 Changed up a join to see if the displayed labeling will work better for the customer.
-- Doug Albanese	 02/06/2023	 Changed how Parameters, whith no sections, or ordered.
-- Doug Albanese	 02/28/2023	 Update for adding the Parent Section name
-- Doug Albanese	 03/01/2023	 Added the "Decore Element Text"
/*
DECLARE    @return_value int

 

EXEC    @return_value = [dbo].[USP_ADMIN_FF_FlexForm_Get]
        @LangID = N'en-US',
        @idfsDiagnosis = 7719020000000,
        @idfsFormType = 10034010,
        @idfsFormTemplate = NULL

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_FlexForm_Get] (
	@LangID						NVARCHAR(50) = NULL
	,@idfsDiagnosis				BIGINT = NULL
	,@idfsFormType				BIGINT = NULL
	,@idfsFormTemplate			BIGINT = NULL
	)
AS
BEGIN
	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID)
	DECLARE @tmpTemplate AS TABLE (
		idfsFormTemplate BIGINT
		,IsUNITemplate BIT
		)
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	BEGIN TRY
		IF @idfsFormTemplate IS NULL
			BEGIN
				--Obtain idfsFormTemplate, via given parameters of idfsDiagnosis and idfsFormType
				---------------------------------------------------------------------------------
				SET @idfsCountry = dbo.FN_GBL_CurrentCountry_GET()

				INSERT INTO @tmpTemplate
				EXECUTE dbo.USP_ADMIN_FF_ActualTemplate_GET 
					@idfsCountry,
					@idfsDiagnosis,
					@idfsFormType

				SELECT TOP 1 @idfsFormTemplate = idfsFormTemplate
				FROM @tmpTemplate

				IF @idfsFormTemplate = - 1
					SET @idfsFormTemplate = NULL

				---------------------------------------------------------------------------------
			END
	  
		SELECT 
			s.idfsParentSection
			,COALESCE(p.idfsSection,0) AS idfsSection
			,p.idfsParameter
			,PS.name AS ParentSectionName
			,RF.Name AS SectionName
			,PN.Name AS ParameterName
			,PTR.Name AS parameterType
			,p.idfsParameterType
			,pt.idfsReferenceType
			,p.idfsEditor
			,COALESCE(sdo.intOrder,2147483646) AS SectionOrder
			,PDO.intOrder	AS ParameterOrder
			,s.blnGrid
			,s.blnFixedRowSet
			,PFT.idfsEditMode
			,pft.idfsFormTemplate
			,DT.name AS DecoreElementText
		FROM dbo.ffParameter p
		LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
		LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) PS ON S.idfsParentSection = PS.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000070) PN ON PN.idfsReference = P.idfsParameterCaption
		LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
			AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
			AND PDO.idfsLanguage = @idfsLanguage
			AND PDO.intRowStatus = 0
		LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
			AND sdo.idfsFormTemplate = @idfsFormTemplate 
			AND sdo.idfsLanguage = @idfsLanguage
			AND sdo.intRowStatus = 0
		LEFT JOIN dbo.ffParameterType PT
			ON pt.idfsParameterType = p.idfsParameterType
		LEFT JOIN ffDecorElement DE
			ON DE.idfsFormTemplate = @idfsFormTemplate AND DE.idfsSection = s.idfsParentSection AND DE.intRowStatus = 0
	    LEFT JOIN ffDecorElementText DET
			ON DET.idfDecorElement = DE.idfDecorElement
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000131) DT ON DT.idfsReference = DET.idfsBaseReference
		WHERE PFT.idfsFormTemplate = @idfsFormTemplate
		ORDER BY  SectionOrder
			,pdo.intOrder

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]...';


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		08/10/2022	Initial release for Veterinary Aggregate Report.
-- Srini Goli		10/07/2022  used Sql Veriant data type.
-- Srini Goli		10/12/2022  Without Templete also have to display Report.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools) and correct final query
-- Mark Wilson		10/18/2022	updated to concatenate string fields
-- Mike Kornegay	10/18/2022	Change numRow field in final query to intNumRow
-- Mike Kornegay	02/02/2023	Set quoted identifiers and ansi nulls to on.

/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfsAggrCaseType = 10102002,
        @idfAggrCaseList = N'155564770002071;155564770002070'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail] (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS  BIGINT= NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		intValue INT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		--idfsReferenceType BIGINT
		)
	
	DECLARE @tmpDetails TABLE (
		idfCaseObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfVersion BIGINT
	)

	DECLARE @FinalReportTable TABLE 
	(
		ParameterName NVARCHAR(300),
		strSpecies NVARCHAR(300),
		idfsParameter BIGINT,
		ParameterOrder INT,
		idfsDiagnosis BIGINT,
		strDefault NVARCHAR(300),
		strOIECode NVARCHAR(300),
		numRow INT,
		intValue INT,
		varValue SQL_VARIANT
	)

	BEGIN TRY
			BEGIN

			--Get Selected Agg Cases
			INSERT INTO @AggrCaseTable (
					[idfAggrCase],
					[intRowNumber]
					)
				SELECT CAST([Value] AS BIGINT),
					ROW_NUMBER() OVER (
						ORDER BY [Value]
						)
				FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfCaseObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
				
				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfCaseObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					ROW_NUMBER() OVER (
						ORDER BY [idfCaseObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrVetCaseMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode

				FROM dbo.tlbAggrVetCaseMTX mtx
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form header details
				IF @idfsFormTemplate IS NOT NULL 
				BEGIN
					INSERT INTO @tempFlexForm
					EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
							@LangID =@LangID, 
							@idfsDiagnosis= NULL, 
							@idfsFormType = 10034012, 
							@idfsFormTemplate=@idfsFormTemplate
				END 
				--Get numeric values Activity Parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[intValue],
						[Type],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					SUM(CAST(AP.varValue AS INT)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(ap.varValue AS NVARCHAR)) = 1
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				GROUP BY
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Get non-numeric values
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(ap.varValue AS NVARCHAR)) = 0
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
					
				INSERT INTO @FinalReportTable
				(
				    ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    intValue
				)

				SELECT	
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,SUM(intValue)
					--,ap.varValue AS varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				GROUP BY 
					ff.ParameterName,
					sl.strSpecies,
					ff.idfsParameter,
					ff.ParameterOrder,
					m.idfsDiagnosis,
					m.strDefault,
					m.strOIECode,
					m.intNumRow
				ORDER BY intNumRow


				INSERT INTO @FinalReportTable
				(
				    ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    varValue
				)

				SELECT	
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,ap.varValue
				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				WHERE ap.varValue IS NOT NULL

				ORDER BY intNumRow

				SELECT 
				
					ParameterName,
					strSpecies,
					idfsParameter,
					ParameterOrder,
					idfsDiagnosis,
					strDefault,
					strOIECode,
					numRow AS intNumRow,
					CAST(intValue AS NVARCHAR(300)) AS varValue
					
				FROM @FinalReportTable
				WHERE varValue IS NULL

				UNION ALL 

				SELECT
					DISTINCT t.ParameterName,
					t.strSpecies,
					t.idfsParameter,
					t.ParameterOrder,
					t.idfsDiagnosis,
					t.strDefault,
					t.strOIECode,
					t.numRow AS intNumRow,
					STUFF((SELECT distinct ', ' + CAST(t1.varValue AS NVARCHAR(300))
						 FROM @FinalReportTable t1
						 WHERE t.ParameterName = t1.ParameterName
						 AND t.strSpecies = t1.strSpecies
						 AND t.idfsParameter = t1.idfsParameter
						 AND t.ParameterOrder = t1.ParameterOrder
						 AND t.idfsDiagnosis = t1.idfsDiagnosis
						 AND t.strDefault = t1.strDefault
						 AND t.strOIECode = t1.strOIECode
						 FOR XML PATH(''), TYPE
							).value('.', 'NVARCHAR(MAX)') 
						,1,2,'') varValue
				from @FinalReportTable t
				WHERE t.varValue IS NOT NULL;				

			END

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ParameterDesignOptions_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ParameterDesignOptions_SET
-- Description:	Save the ParameterDesignOptions
--          
-- Revision History:
-- Name            Date       Change
-- --------------- ---------- --------------------------------------------------------------------
-- Kishore Kodru    11/28/2018 Initial release for new API.
-- Doug Albanese	01/19/2021	Added the "Copy Only" feature, for use with the Copy Template SP
-- Doug Albanese	01/19/2021	Added "Begin Transaction"
-- Doug Albanese	07/01/2021	LangId Correction
-- Doug Albanese	03/02/2022	Removed all EIDSS 6 key id SP
-- Doug Albanese	06/02/2022	Removed debugging information that was left over. :(
-- Doug Albanese	01/21/2023	Alter SP to work with POCO. Remove return values, since they are not sued by any method
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_ParameterDesignOptions_SET] 
(	
	@idfsParameter		BIGINT
	,@idfsFormTemplate	BIGINT
	,@intLeft			INT
	,@intTop			INT
    ,@intWidth			INT
    ,@intHeight			INT    
    ,@intScheme			INT
    ,@intLabelSize		INT
    ,@intOrder			INT
    ,@LangID			NVARCHAR(50)  
	,@User				NVARCHAR(50) = ''
	,@CopyOnly			INT = 0
)	
AS
BEGIN	
	SET NOCOUNT ON;
	

	Declare
		@langid_int BIGINT,
		@LangID_intEN BIGINT,
		@idfParameterDesignOption BIGINT,
		@idfParameterDesignOptionEN BIGINT,
		@returnCode BIGINT = 0,
		@returnMsg  NVARCHAR(MAX) = 'Success' 

	Declare @SupressSelect table
		( ReturnCode int,
			ReturnMessage varchar(200)
		)

	BEGIN TRY
		BEGIN TRANSACTION

		SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);
		SET @LangID_intEN = dbo.FN_GBL_LanguageCode_GET(@LangID); 
	
	
		IF (@idfsFormTemplate IS NULL)
			BEGIN
				SELECT @idfParameterDesignOption = [idfParameterDesignOption]
				FROM dbo.ffParameterDesignOption
				WHERE [idfsParameter] = @idfsParameter
					  AND idfsFormTemplate IS NULL
					  AND [idfsLanguage] = @langid_int
					  AND [intRowStatus] = 0
			END
		ELSE
			BEGIN	         	
				SELECT @idfParameterDesignOption = [idfParameterDesignOption]
				FROM dbo.ffParameterDesignOption
				WHERE [idfsParameter] = @idfsParameter
					  AND [idfsFormTemplate] = @idfsFormTemplate
					  AND [idfsLanguage] = @langid_int
					  AND [intRowStatus] = 0    	
			END

--		SELECT @idfParameterDesignOption

		IF (@idfParameterDesignOption IS NULL)
			BEGIN
				
				--EXEC dbo.[usp_sysGetNewID] @idfParameterDesignOption OUTPUT
				INSERT INTO @SupressSelect
				EXEC	dbo.USP_GBL_NEXTKEYID_GET 'ffParameterDesignOption', @idfParameterDesignOption OUTPUT;
				INSERT [dbo].[ffParameterDesignOption]
					(
				   		[idfParameterDesignOption]
					    ,[intLeft]
					    ,[intTop]
					    ,[intWidth]
					    ,[intHeight]					   
					    ,[intScheme]
					    ,[intLabelSize]					 
					    ,[idfsParameter]
					    ,[idfsLanguage]
					    ,[idfsFormTemplate]
					    ,[intOrder]
						,strMaintenanceFlag
						,SourceSystemNameID
						,SourceSystemKeyValue
						,AuditCreateDTM
						,AuditCreateUser
				   )
				VALUES
				   (
				   		@idfParameterDesignOption
						,@intLeft
						,@intTop
					    ,@intWidth
					    ,@intHeight					   
					    ,@intScheme
					    ,@intLabelSize					  
					    ,@idfsParameter
					    ,@langid_int
					    ,@idfsFormTemplate
					    ,@intOrder
						,'V7 Reference. FF'
						,10519001
						,'[{"idfParameterDesignOption":' + CAST(@idfParameterDesignOption AS NVARCHAR(24)) + '}]'
						,GETDATE()
						,@User
				   )
				   
	
				IF (@LangID <> 'en-US')
					BEGIN
				
						IF (@idfsFormTemplate IS NULL)
							BEGIN
								SELECT @idfParameterDesignOptionEN = [idfParameterDesignOption]
								FROM dbo.ffParameterDesignOption
								WHERE [idfsParameter] = @idfsParameter
									  AND idfsFormTemplate IS NULL
									  AND [idfsLanguage] = @LangID_intEN 
									  AND intRowStatus = 0
							END
						ELSE
							BEGIN	         	
								SELECT @idfParameterDesignOptionEN = [idfParameterDesignOption]
								FROM dbo.ffParameterDesignOption
								WHERE [idfsParameter] = @idfsParameter
									  AND [idfsFormTemplate] = @idfsFormTemplate
									  AND [idfsLanguage] = @LangID_intEN 
									  AND intRowStatus = 0  	
							END
							
				
						IF (@idfParameterDesignOptionEN IS NULL)
							BEGIN
								--EXEC dbo.[usp_sysGetNewID] @idfParameterDesignOptionEN OUTPUT
								INSERT INTO @SupressSelect
								EXEC	dbo.USP_GBL_NEXTKEYID_GET 'ffParameterDesignOption', @idfParameterDesignOption OUTPUT;
								
								INSERT [dbo].[ffParameterDesignOption]
									(
				   						[idfParameterDesignOption]
										,[intLeft]
										,[intTop]
										,[intWidth]
										,[intHeight]					  
										,[intScheme]
										,[intLabelSize]						 
										,[idfsParameter]
										,[idfsLanguage]
										,[idfsFormTemplate]
										,[intOrder]
										,strMaintenanceFlag
										,SourceSystemNameID
										,SourceSystemKeyValue
										,AuditCreateDTM
										,AuditCreateUser
									)
								VALUES
									(
				   						@idfParameterDesignOptionEN
										,@intLeft
										,@intTop
										,@intWidth
										,@intHeight					   
										,@intScheme
										,@intLabelSize					 
										,@idfsParameter
										,@LangID_intEN
										,@idfsFormTemplate
										,@intOrder
										,'V7 Reference. FF'
										,10519001
										,'[{"idfParameterDesignOption":' + CAST(@idfParameterDesignOption AS NVARCHAR(24)) + '}]'
										,GETDATE()
										,@User
									)			                     	
							END
					END
			END
		ELSE
			BEGIN
	         	UPDATE [dbo].[ffParameterDesignOption]
				SET [intLeft] = @intLeft				
					,[intTop] = @intTop
					,[intWidth] = @intWidth
					,[intHeight] = @intHeight						  
					,[intScheme] = @intScheme
					,[intLabelSize] = @intLabelSize
					,[intOrder] = @intOrder
					,[intRowStatus] = 0	
					,AuditUpdateDTM = GETDATE()
					,AuditUpdateUser = @User					
				WHERE [idfParameterDesignOption] = @idfParameterDesignOption
			END	

		--IF @CopyOnly = 0
		--	BEGIN
		--		SELECT @returnCode, @returnMsg
		--	END

		COMMIT TRANSACTION;
	END TRY 
	BEGIN CATCH   
	
		IF @@TRANCOUNT > 0 AND @CopyOnly = 0
			ROLLBACK TRANSACTION;

		THROW;
	END CATCH;
   
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ParameterTemplateForCopy_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ParameterTemplate_SET
-- Description: Save the Parameter Template
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese    11/28/2018	Initial release for new API.
-- Doug Albanese	01/20/2023	Removal of "function Call" suppression
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_ParameterTemplateForCopy_SET] 
(
	@idfsParameter BIGINT
	,@idfsFormTemplate BIGINT
	,@LangID NVARCHAR(50) = NULL
	,@idfsEditMode BIGINT = NULL
	,@intLeft INT = NULL
	,@intTop INT = NULL
	,@intWidth INT = NULL
	,@intHeight INT = NULL
	,@intScheme INT = NULL
	,@intLabelSize INT = NULL
	,@intOrder INT = NULL
	,@blnFreeze BIT = NULL
	,@User NVARCHAR(50) = ''
	,@CopyOnly INT = 0
	,@FunctionCall INT = 0
)
AS
BEGIN
	SET NOCOUNT ON;	
	
	DECLARE 
		@returnCode BIGINT = 0,
		@returnMsg  NVARCHAR(MAX) = 'Success' 

	BEGIN TRY
		DECLARE @SupressSelect TABLE
		( 
			retrunCode INT,
			returnMsg NVARCHAR(200)
		)

		IF (@idfsEditMode IS NULL) SET @idfsEditMode = 10068001
		IF (@intLeft IS NULL) SET @intLeft = 0
		IF (@intTop IS NULL) SET @IntTop = 0
		IF (@intWidth IS NULL) SET @intWidth = 0
		IF (@intHeight IS NULL) SET @intHeight = 0
		IF (@intScheme IS NULL)	 SET @intScheme = 0
		IF (@blnFreeze IS NULL) SET @blnFreeze = 0
		
		IF (@intLabelSize IS NULL)
			BEGIN 
				IF (@intScheme = 0 OR @intScheme = 1)
					BEGIN
						SET @intLabelSize = @intWidth / 2
					END
			END
		ELSE
			BEGIN
				SET @intLabelSize = @intWidth
			END

		IF (@intOrder IS NULL) SET @intOrder = 0
			
		IF NOT EXISTS (SELECT TOP 1 1
					   FROM [dbo].[ffParameterForTemplate]
					   WHERE [idfsParameter] = @idfsParameter
							 AND [idfsFormTemplate] = @idfsFormTemplate)
			BEGIN
				INSERT INTO [dbo].[ffParameterForTemplate]
					(
           				[idfsParameter]
           				,[idfsFormTemplate]			  	   
						,[idfsEditMode]		
						,[blnFreeze]
						,AuditCreateDTM
						,AuditCreateUser
					)
				VALUES
					(
           				@idfsParameter
           				,@idfsFormTemplate
						,@idfsEditMode	
						,@blnFreeze	
						,GETDATE()
						,@User	
					)          
			END
		ELSE
			BEGIN
				UPDATE [dbo].[ffParameterForTemplate]
				SET [idfsEditMode] = @idfsEditMode
					,[blnFreeze] = @blnFreeze
					,[intRowStatus] = 0
					,AuditUpdateDTM = GETDATE()
					,AuditUpdateUser = @User
 				WHERE [idfsParameter] = @idfsParameter
					  AND [idfsFormTemplate] = @idfsFormTemplate 						
			END

		IF @FunctionCall = 1
			BEGIN
				--INSERT INTO @SupressSelect
				EXEC dbo.[USP_ADMIN_FF_ParameterDesignOptions_SET] 
					 @idfsParameter
					 ,@idfsFormTemplate
					 ,@intLeft
					 ,@intTop
					 ,@intWidth
					 ,@intHeight			
					 ,@intScheme
					 ,@intLabelSize
					 ,@intOrder
					 ,@LangID
					 ,@User
					 ,1
			END
		ELSE
			BEGIN
				--INSERT INTO @SupressSelect
				EXEC dbo.[USP_ADMIN_FF_ParameterDesignOptions_SET] 
					 @idfsParameter
					 ,@idfsFormTemplate
					 ,@intLeft
					 ,@intTop
					 ,@intWidth
					 ,@intHeight			
					 ,@intScheme
					 ,@intLabelSize
					 ,@intOrder
					 ,@LangID
					 ,@User
					 ,@CopyOnly
			END

		IF @CopyOnly = 0
			BEGIN
				SELECT @returnCode AS ReturnCode, @returnMsg AS ReturnMessage
			END

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ParameterTypeEditorMapping_GetList]...';


GO
--*************************************************************
-- Name 				: USP_ADMIN_FF_ParameterTypeEditorMapping_GetList
-- Description			: For generating mapping information between Parameter Types and Editors for the Flex Form Designer
--          
-- Author               : Doug Albanese
-- Revision History:
-- Name			  Date			 Change Detail
-- Doug Albanese  11/02/2022	 Initial Release
-- Doug Albanese  12/15/2022	 New mapping for numeric type
-- Doug Albanese  01/27/2023	 Added a new mapping for Total/Summing fields to use "Numeric" types
-- Testing code:
--
--EXEC	USP_ADMIN_FF_ParameterTypeEditorMapping_GetList @LanguageID = 'en-us', @idfsParameterType = 10067008
--
--*************************************************************
ALTER PROCEDURE[dbo].[USP_ADMIN_FF_ParameterTypeEditorMapping_GetList]
(		
	  @LanguageID		   NVARCHAR(50),
	  @idfsParameterType   BIGINT
)
AS
BEGIN
   BEGIN TRY


	  DECLARE @Mapping TABLE (
		 idfsBaseReference BIGINT,
		 idfsEditor NVARCHAR(200),
		 Editor NVARCHAR(MAX)
	  )

	  INSERT INTO @Mapping (idfsBaseReference, idfsEditor)
	  SELECT
		 BR.idfsBaseReference,
		 COALESCE(BR.strBaseReferenceCode, 'editCombo') AS idfsEditor
	  FROM
		 trtBaseReference BR
	  LEFT JOIN ffParameterType PT
	  ON PT.idfsParameterType = BR.idfsBaseReference
	  WHERE
		 BR.idfsReferenceType in (19000071,19000067) AND
		 (PT.idfsReferenceType IS NOT NULL OR BR.strBaseReferenceCode IS NOT NULL) AND
		 BR.idfsBaseReference = @idfsParameterType

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067001', 
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067001)
	  WHERE 
		 idfsEditor in ('parBoolean','editCheck')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067002',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067002)
	  WHERE 
		 idfsEditor in ('editCombo','parDiseaseList','parInvType','parProphAction','parSanAction','parSpecies')

	  UPDATE @Mapping
	  SET 
		 idfsEditor = '10067008,10067006',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067008) + ',' +
				  dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067006)
	  WHERE idfsEditor IN ('editText','parString')

	  UPDATE @Mapping
	  SET	  
		 idfsEditor = '10067003',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067003)
	  WHERE 
		 idfsEditor in ('editDate','parDate')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067004',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067004)
	  WHERE idfsEditor in ('editDateTime','parDatetime')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '217190000000',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,217190000000)
	  WHERE idfsEditor in ('editEmpty')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '217210000000',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,217210000000)
	  WHERE idfsEditor in ('editRadio','fpt')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067006',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067006)
	  WHERE idfsEditor in ('editMemo')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067009,10071061',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067009) + ',' +
				  dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10071061)
	  WHERE idfsEditor in ('editUpDown')

	  	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067010,10067010,10067011',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067009) + ',' +
				  dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067010) + ',' +
				  dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067011)
	  WHERE idfsEditor in ('parNumeric','parNumericPositive','parNumericInteger')

	  SELECT 
		 idfsBaseReference,
		 idfsEditor,
		 Editor
	  FROM 
		 @Mapping 

	END TRY  

	BEGIN CATCH 
		THROW;
	END CATCH; 
		
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_Templates_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_Templates_GET
-- Description: Return list of Templates
--          
-- Revision History:
-- Name            Date			Change
-- --------------- ----------	--------------------------------------------------------------------
-- Kishore Kodru    11/28/2018	Initial release for new API.
-- Stephen Long     10/02/2019	Removed commit transaction.
-- Doug Albanese	09/21/2021	Added Disease Id for filtering by Outbreak/FFD connection
-- Doug Albanese	09/29/2021	Corrected the joins to return query by idfsFormType
-- Mark Wilson		09/30/2021	Updated to use FN_GBL_ReferenceRepair_GET
-- Doug Albanese	10/28/2021	Removed disease query
-- Doug Albanese	01/20/2023	Added the determinate value on return
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_Templates_GET]
(
	@LangID								NVARCHAR(50)
	,@idfsFormTemplate					BIGINT = NULL
	,@idfsFormType						BIGINT = NULL
	,@idfOUtbreak					    BIGINT = NULL
)	
AS
BEGIN	
	SET NOCOUNT ON;

	BEGIN TRY
	  
	  IF @idfOUtbreak IS NULL or @idfOUtbreak = -1
		 BEGIN
			   SELECT
				  DISTINCT
				  FT.idfsFormTemplate,
				  FT.idfsFormType,
				  FT.blnUNI,
				  FT.rowguid,
				  FT.intRowStatus,
				  FT.strNote,
				  RF.strDefault AS DefaultName,
				  RF.[name] AS NationalName,
				  RF.[LongName] AS NationalLongName,
				  NULL AS idfsDiagnosisOrDiagnosisGroup
		
			  FROM [dbo].[ffFormTemplate] FT
			  INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000033) RF ON FT.idfsFormTemplate = RF.idfsReference
			  --LEFT JOIN dbo.ffDeterminantValue DV ON DV.idfsFormTemplate = FT.idfsFormTemplate
			  WHERE ((FT.idfsFormTemplate = @idfsFormTemplate ) OR (@idfsFormTemplate IS NULL))
			  AND ((FT.idfsFormType  = @idfsFormType) OR (@idfsFormType  IS NULL))	  
			  AND (FT.intRowStatus = 0)
			  ORDER BY NationalName;
		 END
	  ELSE
		 BEGIN
			  SELECT 
				  DISTINCT
				  FT.idfsFormTemplate,
				  FT.idfsFormType,
				  FT.blnUNI,
				  FT.rowguid,
				  FT.intRowStatus,
				  FT.strNote,
				  RF.strDefault AS DefaultName,
				  RF.[name] AS NationalName,
				  RF.[LongName] AS NationalLongName,
				  DV.idfsBaseReference AS idfsDiagnosisOrDiagnosisGroup
		
			  FROM [dbo].[ffFormTemplate] FT
			  LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000033) RF ON FT.idfsFormTemplate = RF.idfsReference
			  LEFT JOIN dbo.ffDeterminantValue DV ON DV.idfsFormTemplate = FT.idfsFormTemplate
			  WHERE ((FT.idfsFormTemplate = @idfsFormTemplate ) OR (@idfsFormTemplate IS NULL))
			  AND ((FT.idfsFormType  = @idfsFormType) OR (@idfsFormType  IS NULL))	  
			  AND (FT.intRowStatus = 0)
			  ORDER BY NationalName;
		 END

	END TRY 
	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_OBJECT_ACCESS_GETList]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_OBJECT_ACCESS_GETList
--
-- Description: Gets data for an actor's permissions for diseases for use case SAUC62.
--          
-- Revision History:
-- Name               Date       Change Detail
-- ------------------ ---------- -----------------------------------------------------------------
-- Stephen Long       05/16/2020 Initial release.
-- Ann Xiong          01/28/2021 Modified to INNER JOIN 
--                               dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000060) instead of 
--                               dbo.FN_GBL_ReferenceRepair('en', 19000094) and ON 
--                               oa.idfsObjectType = objectType.idfsReference instead of ON 
--                               oa.idfsObjectID = objectType.idfsReference.
-- Stephen Long       05/15/2021 Added pagination and sorting.
-- Stephen Long       05/28/2021 Removed allow and deny permission indicators and added read 
--                               permission indicator.
-- Stephen Long       12/22/2022 Removed join to trtObjectTypeToObjectOperation.
-- Stephen Long       01/31/2023 Changed to ensure employee groups are active.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_OBJECT_ACCESS_GETList]
(
    @LanguageID AS NVARCHAR(50),
    @ActorID AS BIGINT = NULL,
    @SiteID AS BIGINT = NULL,
    @ObjectID AS BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT oa.idfObjectAccess AS ObjectAccessID,
               oa.idfsObjectType AS ObjectTypeID,
               objectType.name AS ObjectTypeName,
               oa.idfsObjectOperation AS ObjectOperationTypeID,
               objectOperationType.name AS ObjectOperationTypeName,
               idfsObjectID AS ObjectID,
               oa.idfActor AS ActorID,
               oa.idfsOnSite AS SiteID,
               oa.intPermission AS PermissionTypeID,
               CAST(CASE oa.intPermission
                        WHEN 2 THEN
                            1
                        WHEN 1 THEN
                            0
                    END AS BIT) AS ReadPermissionIndicator,
               oa.intRowStatus AS RowStatus,
               'R' AS RowAction
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployee e
                ON e.idfEmployee = oa.idfActor
                   AND e.intRowStatus = 0
            LEFT JOIN dbo.tlbEmployeeGroup eg
                ON eg.idfEmployeeGroup = e.idfEmployee
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000060) objectType
                ON oa.idfsObjectType = objectType.idfsReference
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000059) objectOperationType
                ON oa.idfsObjectOperation = objectOperationType.idfsReference
        WHERE oa.intRowStatus = 0
              AND (
                      (
                          -- User
                          e.idfsEmployeeCategory = 10526001 -- User
                          AND e.idfsEmployeeType = 10023002 -- User
                      )
                      OR (
                             -- User Group
                             e.idfsEmployeeCategory = 10526002 -- User
                             AND e.idfsEmployeeType = 10023001 -- User Group
                             AND eg.intRowStatus = 0
                         )
                  )
              AND (
                      (oa.idfActor = @ActorID)
                      OR (@ActorID IS NULL)
                  )
              AND (
                      (oa.idfsOnSite = @SiteID)
                      OR (@SiteID IS NULL)
                  )
              AND (
                      (oa.idfsObjectID = @ObjectID)
                      OR (@ObjectID IS NULL)
                  );
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ORG_DEL]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_ORG_DEL
--
-- Description:	Set an organization record to inactive.
--                      
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		06/14/2019 Initial release.
-- Ricky Moss		06/11/2020 Set References of organization names to inactive.
-- Stephen Long     04/24/2021 Added dbo prefix.
-- Stephen Long     06/18/2021 Added check for site association; return 1 when site ID is not null.
--
-- Testing Code:
--
-- EXEC USP_ADMIN_ORG_DEL, 1
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_ORG_DEL] (@OrganizationKey BIGINT)
AS
DECLARE @ReturnCode INT = 0
	,@ReturnMessage NVARCHAR(MAX) = 'SUCCESS'
	,@OrganizationAbbreviatedNameID BIGINT
	,@OrganizationFullNameID BIGINT;

BEGIN
	BEGIN TRY
		DECLARE @SiteID BIGINT = NULL;

		SELECT @SiteID = (
				SELECT s.idfsSite
				FROM dbo.tlbOffice o
				INNER JOIN dbo.tstSite s ON s.idfOffice = o.idfOffice
				WHERE o.idfOffice = @OrganizationKey
				);

		IF @SiteID IS NULL
		BEGIN
			SELECT @OrganizationAbbreviatedNameID = (
					SELECT idfsOfficeAbbreviation
					FROM dbo.tlbOffice
					WHERE idfOffice = @OrganizationKey
					);

			SELECT @OrganizationFullNameID = (
					SELECT idfsOfficeName
					FROM dbo.tlbOffice
					WHERE idfOffice = @OrganizationKey
					);

			UPDATE dbo.trtBaseReference
			SET intRowStatus = 1
			WHERE idfsBaseReference IN (
					@OrganizationAbbreviatedNameID
					,@OrganizationFullNameID
					);

			UPDATE dbo.trtStringNameTranslation
			SET intRowStatus = 1
			WHERE idfsBaseReference IN (
					@OrganizationAbbreviatedNameID
					,@OrganizationFullNameID
					);

			UPDATE dbo.tlbOffice
			SET intRowStatus = 1
			WHERE idfOffice = @OrganizationKey;
		END
		ELSE
		BEGIN
			SET @ReturnCode = 1;
			SET @ReturnMessage = 'IN USE';
		END;

		SELECT @ReturnCode 'ReturnCode'
			,@ReturnMessage 'ReturnMessage';
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_SITE_ACTOR_GETList]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_SITE_ACTOR_GETList
--
-- Description:	Get actor list for a specific site.  Used in permissions for site filtration of the 
-- administration module - SAUC29.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/20/2022 Initial release.
-- Stephen Long     01/10/2023 Fix to null out employee group ID for an internal employee actor.
-- Stephen Long     01/17/2023 Added site ID to the model and removed employee group indicator 
--                             parameter.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_SITE_ACTOR_GETList]
(
    @LanguageID NVARCHAR(50),
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'ActorName',
    @SortOrder NVARCHAR(4) = 'ASC',
    @SiteID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @FirstRecord INT,
                @LastRecord INT,
                @TotalRowCount INT = 0;
        DECLARE @Results TABLE
        (
            ActorID BIGINT NOT NULL,
            ActorTypeID BIGINT NOT NULL,
            ActorTypeName VARCHAR(MAX) NOT NULL,
            ActorName NVARCHAR(MAX) NULL,
            SiteID BIGINT NOT NULL,
            ExternalActorIndicator BIT NOT NULL,
            DefaultEmployeeGroupIndicator BIT NOT NULL
        );

        DECLARE @FinalResults TABLE
        (
            ActorID BIGINT NOT NULL,
            ActorTypeID BIGINT NOT NULL,
            ActorTypeName VARCHAR(MAX) NOT NULL,
            ActorName NVARCHAR(MAX) NULL,
            SiteID BIGINT NOT NULL,
            ExternalActorIndicator BIT NOT NULL,
            DefaultEmployeeGroupIndicator BIT NOT NULL
        );

        -- External employee group actors
        INSERT INTO @Results
        SELECT oa.idfActor,
               10023001,
               actorType.name,
               employeeGroupName.name,
               eg.idfsSite,
               1,
               0
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroup eg
                ON eg.idfEmployeeGroup = oa.idfActor
                   AND eg.intRowStatus = 0
            INNER JOIN dbo.tlbEmployee e
                ON eg.idfEmployeeGroup = e.idfEmployee
                   AND e.intRowStatus = 0
            INNER JOIN FN_GBL_ReferenceRepair(@LanguageID, 19000022) employeeGroupName
                ON employeeGroupName.idfsReference = eg.idfsEmployeeGroupName
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND eg.idfsSite <> @SiteID
              AND oa.idfsOnSite = @SiteID;

        -- External employee actors
        INSERT INTO @Results
        SELECT oa.idfActor,
               10023002,
               actorType.name,
               dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName),
               e.idfsSite,
               1 AS ExternalActorIndicator,
               0
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployee e
                ON e.idfEmployee = oa.idfActor
                   AND e.intRowStatus = 0
            INNER JOIN dbo.tlbPerson p
                ON p.idfPerson = e.idfEmployee
                   AND p.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND e.idfsSite <> @SiteID
              AND e.idfsEmployeeType = 10023002 -- Employee
              AND oa.idfsOnSite = @SiteID;

        -- Internal employee group actors
        INSERT INTO @Results
        SELECT eg.idfEmployeeGroup,
               10023001,
               actorType.name,
               employeeGroupName.name,
               eg.idfsSite,
               0,
               CASE
                   WHEN br.blnSystem = 1 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroup eg
                ON eg.idfEmployeeGroup = oa.idfActor
                   AND eg.intRowStatus = 0
            INNER JOIN dbo.tlbEmployee e
                ON e.idfEmployee = eg.idfEmployeeGroup
                   AND e.intRowStatus = 0
            INNER JOIN FN_GBL_ReferenceRepair(@LanguageID, 19000022) employeeGroupName
                ON employeeGroupName.idfsReference = eg.idfsEmployeeGroupName
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = eg.idfsEmployeeGroupName
                   AND br.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND eg.idfsSite = @SiteID
              AND oa.idfsOnSite = @SiteID
              AND oa.idfsObjectType = 10060011; -- Site

        -- Internal employee actors
        INSERT INTO @Results
        SELECT e.idfEmployee,
               10023002,
               actorType.name,
               dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName),
               e.idfsSite,
               0,
               0
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployee e
                ON e.idfEmployee = oa.idfActor
                   AND e.intRowStatus = 0
            INNER JOIN dbo.tlbPerson p
                ON p.idfPerson = e.idfEmployee
                   AND p.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE oa.intRowStatus = 0
              AND e.idfsSite = @SiteID
              AND oa.idfsOnSite = @SiteID
              AND oa.idfsObjectType = 10060011; -- Site

        INSERT INTO @FinalResults
        SELECT *
        FROM @Results
        GROUP BY ActorID,
                 ActorTypeID,
                 ActorTypeName,
                 ActorName,
                 SiteID,
                 ExternalActorIndicator,
                 DefaultEmployeeGroupIndicator;

        SET @FirstRecord = (@PageNumber - 1) * @PageSize;
        SET @LastRecord = (@PageNumber * @PageSize + 1);
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        SELECT ActorID,
               ActorTypeID,
               ActorTypeName,
               ActorName,
               SiteID,
               ExternalActorIndicator,
               DefaultEmployeeGroupIndicator,
               RowAction,
               [RowCount],
               TotalRowCount,
               CurrentPage,
               TotalPages
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ActorName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ActorName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ActorName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ActorName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ActorTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ActorTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ActorTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ActorTypeName
                                               END DESC
                                     ) AS RowNum,
                   ActorID,
                   ActorTypeID,
                   ActorTypeName,
                   ActorName,
                   SiteID,
                   ExternalActorIndicator,
                   DefaultEmployeeGroupIndicator,
                   0 AS RowAction,
                   COUNT(*) OVER () AS [RowCount],
                   @TotalRowCount AS TotalRowCount,
                   CurrentPage = @PageNumber,
                   TotalPages = (@TotalRowCount / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
            FROM @FinalResults
            GROUP BY ActorID,
                     ActorTypeID,
                     ActorTypeName,
                     ActorName,
                     SiteID,
                     ExternalActorIndicator,
                     DefaultEmployeeGroupIndicator
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_SITE_DEL]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_SITE_DEL
--
-- Description:	Sets a site record to "inactive".
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/12/2019 Initial release.
-- Mark Wilson      02/07/2023 Removed checks for child objects per conversation with Anatoliy.
--                             Also, added code to deactivate users and roles associated with the site.

/*

EXEC dbo.USP_ADMIN_SITE_DEL 
	@LanguageID = 'en-US',
	@SiteID = 3614,
	@UserName = 'Mark'


*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_SITE_DEL] 
(
	@LanguageID NVARCHAR(50) = NULL,
	@SiteID BIGINT,
	@UserName NVARCHAR(200)
)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		DECLARE @ReturnCode INT = 0,
				@ReturnMessage NVARCHAR(MAX) = 'SUCCESS'

		-- table to hold list of Employees to delete
		DECLARE @tlbEmployee TABLE
		(
			idfEmployee BIGINT

		);
--------------------------------------------------------------------------------------------------------------------
--- Disable all users and roles associated with this site before the site is de-activated
--------------------------------------------------------------------------------------------------------------------
			INSERT INTO @tlbEmployee
			SELECT idfEmployee FROM dbo.tlbEmployee WHERE idfsSite = @SiteID;

			UPDATE dbo.tlbEmployeeGroup
			SET intRowStatus = 1,
				AuditUpdateDTM = GETDATE(),
				AuditUpdateUser = @UserName
			WHERE idfsSite = @SiteID;

			UPDATE dbo.tlbEmployee
			SET intRowStatus = 1,
				AuditUpdateDTM = GETDATE(),
				AuditUpdateUser = @UserName
			WHERE idfsSite = @SiteID;

			UPDATE dbo.LkupRoleSystemFunctionAccess
			SET intRowStatus = 1,
				AuditUpdateDTM = GETDATE(),
				AuditUpdateUser = @UserName
			WHERE idfEmployee IN (SELECT idfEmployee FROM @tlbEmployee);
			
--------------------------------------------------------------------------------------------------------------------
--- preceding lines were added to disable users and roles associated with the deleted sites
--------------------------------------------------------------------------------------------------------------------		
		
		UPDATE dbo.tstSite
		SET intRowStatus = 1,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @UserName
		WHERE idfsSite = @SiteID;
		

		IF @@TRANCOUNT > 0
			AND @returnCode = 0
			COMMIT;

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage;
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_STAT_DEL]...';


GO
--*************************************************************
-- Name 				: USP_ADMIN_STAT_DEL
-- Description			: Get Settlement details
--          
-- Author               : Ricky Moss
-- Revision History
--		Name       Date       Change Detail
-- Ricky Moss	 08/06/2019		Refactored SP to accommodate API methods
-- Ricky Moss	 08/30/2019		Returns success message
-- Leo Tracchia	 03/01/2023		Added logic for data auditing
--
-- Testing code:
-- EXECUTE USP_ADMIN_STAT_DEL 53357400000000
--*************************************************************

ALTER PROCEDURE [dbo].[USP_ADMIN_STAT_DEL]
(
	@idfStatistic BIGINT,
	@SiteId BIGINT,
    @UserId BIGINT
)

AS

BEGIN

	DECLARE @returnCode INT = 0
	DECLARE @returnMsg NVARCHAR(50) = 'SUCCESS'

	BEGIN TRY	    

		DECLARE @SuppressSelect TABLE
		(
			ReturnCode INT,
			ReturnMessage NVARCHAR(MAX)
		);

		--Begin: Data Audit--	

			DECLARE @idfUserId BIGINT = @UserId;
			DECLARE @idfSiteId BIGINT = @SiteId;
			DECLARE @idfsDataAuditEventType bigint = NULL;
			DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
			DECLARE @idfObject bigint = @idfStatistic;
			DECLARE @idfObjectTable_tlbStatistic bigint = 75720000000;		
			DECLARE @idfDataAuditEvent bigint = NULL;	

			-- tauDataAuditEvent Event Type - Delete 
			set @idfsDataAuditEventType = 10016002;
			
		--End: Data Audit--	
		
		UPDATE tlbStatistic SET intRowStatus = 1 WHERE idfStatistic = @idfStatistic 
		SELECT @returnCode 'returnCode', @returnMsg 'returnMessage'

		--Begin: Data Audit

			-- insert record into tauDataAuditEvent - 
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_tlbStatistic, @idfDataAuditEvent OUTPUT

			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
			VALUES (@idfDataAuditEvent, @idfObjectTable_tlbStatistic, @idfObject)

		--End: Data Audit, trtDiagnosis--

	END TRY
	BEGIN CATCH
		THROW
	END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_STAT_SET]...';


GO

--=================================================================================================================
-- Created by:				Joan Li
-- Last modified by:		
-- Joan Li					06/13/17	Created based on V6 spStatistic_Post:  V7 usp54 purpose: save records in tlbStatistic
-- Joan Li	                06/15/17	change action parameter
-- Lamont Mitchell			1/2/19		Added ReturnCode and ReturnMessage and changed @idfStatistic from output parameter added it to the Select output
-- Ricky Moss				3/12/20		Check for Duplicates and return a message and statistic id if record exists.
-- Ricky Moss				3/18/20		Added settlement parameter
-- Ricky Moss				3/23/20		Developed search for existing statistic data
-- LAMONT MITCHELL			6/7/2022	ADDED BULKINPORT PARAMETER TO DISTINGUISH BETWEEN BULK IMPORT AND SINGLE ENTERIES.. BULK IMPORT BYPASSES DUPLICATE CHECK
-- Leo Tracchia				9/6/2022	modified logic to handle duplicate data during bulk import
-- Leo Tracchia				10/26/2022	fix for GAT defect #472, DevOps 5259
-- Leo Tracchia				3/1/2023	added logic for data auditing
--=================================================================================================================

ALTER PROCEDURE [dbo].[USP_ADMIN_STAT_SET]
(
	@idfStatistic						BIGINT		= NULL,	--##PARAM @idfStatistic - statistic record ID
	@idfsStatisticDataType				BIGINT		= NULL,	--##PARAM @idfsStatisticDataType - statistic data Type
	@idfsMainBaseReference				BIGINT		= NULL,	--##PARAM @idfsMainBaseReference - statistic base reference
	@idfsStatisticAreaType				BIGINT		= NULL,	--##PARAM @idfsStatisticAreaType - statistic Area Type
	@idfsStatisticPeriodType			BIGINT		= NULL,	--##PARAM @idfsStatisticPeriodType - statistic period Type
	@LocationUserControlidfsCountry		BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	@LocationUserControlidfsRegion		BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	@LocationUserControlidfsRayon 		BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	@LocationUserControlidfsSettlement	BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	@datStatisticStartDate				DATETIME	= NULL,	--##PARAM @datStatisticStartDate - start date
	@datStatisticFinishDate				DATETIME	= NULL,	--##PARAM @datStatisticFinishDate - finish date 
	@varValue							INT			= NULL,	--##PARAM @varValue - statistic content
	@idfsStatisticalAgeGroup			BIGINT		= NULL,
	@idfsParameterName					BIGINT		= NULL,
	@bulkImport							BIT			= 0,
	@SiteId								BIGINT,
	@UserId								BIGINT
)
AS

DECLARE @returnCode					INT = 0 
DECLARE	@returnMsg					NVARCHAR(max) = 'SUCCESS' 
DECLARE @existingStatistic			BIGINT = null;
DECLARE @idfsArea					BIGINT

Declare @SupressSelect table
( 
	retrunCode int,
	returnMessage varchar(200)
)

--Data Audit--

	DECLARE @idfUserId BIGINT = @UserId;
	DECLARE @idfSiteId BIGINT = @SiteId;
	DECLARE @idfsDataAuditEventType bigint = NULL;
	DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
	DECLARE @idfObject bigint = @idfStatistic;
	DECLARE @idfObjectTable_tlbStatistic bigint = 75720000000;		
	DECLARE @idfDataAuditEvent bigint = NULL;		

	DECLARE @tlbStatistic_BeforeEdit TABLE
	(
		idfStatistic bigint,
		idfsStatisticDataType bigint, 
		idfsMainBaseReference bigint, 
		idfsStatisticAreaType bigint, 
		idfsStatisticPeriodType bigint, 
		idfsArea bigint,
		datStatisticStartDate datetime,
		datStatisticFinishDate datetime,
		varValue sql_variant,
		idfsStatisticalAgeGroup bigint
	)

	DECLARE @tlbStatistic_AfterEdit TABLE
	(
		idfStatistic bigint,
		idfsStatisticDataType bigint, 
		idfsMainBaseReference bigint, 
		idfsStatisticAreaType bigint, 
		idfsStatisticPeriodType bigint, 
		idfsArea bigint,
		datStatisticStartDate datetime,
		datStatisticFinishDate datetime,
		varValue sql_variant,
		idfsStatisticalAgeGroup bigint
	)	

--Data Audit--

BEGIN

	BEGIN TRY  	

		BEGIN TRANSACTION

			IF @LocationUserControlidfsSettlement IS NOT NULL
				SELECT @idfsArea = @LocationUserControlidfsSettlement
			ELSE IF @LocationUserControlidfsRayon IS NOT NULL 
				SELECT @idfsArea = @LocationUserControlidfsRayon
			ELSE IF @LocationUserControlidfsRegion IS NOT NULL
				SELECT @idfsArea = @LocationUserControlidfsRegion
			ELSE 
				SELECT @idfsArea = @LocationUserControlidfsCountry

			--SELECT @existingStatistic = (SELECT top 1(idfStatistic) from tlbStatistic WHERE idfsStatisticDataType = @idfsStatisticDataType AND idfsStatisticPeriodType = @idfsStatisticPeriodType AND ((idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup) OR (idfsStatisticalAgeGroup IS NULL AND @idfsStatisticalAgeGroup IS NULL ))AND idfsStatisticAreaType = @idfsStatisticAreaType AND idfsArea = @idfsArea AND datStatisticStartDate = @datStatisticStartDate AND ((idfsMainBaseReference = @idfsMainBaseReference ) OR idfsMainBaseReference IS NULL AND @idfsMainBaseReference IS NULL) )
			--SELECT @existingStatistic =
			--	(SELECT top 1(idfStatistic) 
			--	FROM tlbStatistic 
			--	WHERE 
			--	idfsStatisticDataType = @idfsStatisticDataType 
			--	AND idfsStatisticAreaType = @idfsStatisticAreaType 
			--	AND idfsStatisticPeriodType = @idfsStatisticPeriodType 
			--	AND idfsArea = @idfsArea --Georgia?
			--	AND datStatisticStartDate = @datStatisticStartDate 
			--	AND datStatisticFinishDate = @datStatisticFinishDate 
			--	--AND varValue = @varValue
			--	AND idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup)

			--IF(@existingStatistic IS NOT NULL AND @idfStatistic IS NULL) --AND @bulkImport = 0)
			--	BEGIN
			--		SELECT @returnMsg = 'DOES EXIST'
			--		SELECT @idfStatistic = @existingStatistic
			--	END
			--ELSE 

			-- if @idfStatistic is not passed in... (possibly a new record)
			IF NOT EXISTS (SELECT * FROM dbo.tlbStatistic WHERE  idfStatistic = @idfStatistic) 

				BEGIN

					--print 'getting existing statistic...'

					-- check if a row already exists with the same data
					SELECT @existingStatistic =
						(SELECT top 1(idfStatistic) 
						FROM tlbStatistic 
						WHERE 
						(idfsStatisticDataType = @idfsStatisticDataType or @idfsStatisticDataType is null)
						AND (idfsMainBaseReference = @idfsMainBaseReference or @idfsMainBaseReference is null)
						AND (idfsStatisticAreaType = @idfsStatisticAreaType or @idfsStatisticAreaType is null)
						AND (idfsStatisticPeriodType = @idfsStatisticPeriodType or @idfsStatisticPeriodType is null)
						AND (idfsArea = @idfsArea or @idfsArea is null)
						AND (datStatisticStartDate = @datStatisticStartDate or @datStatisticStartDate is null)
						AND (datStatisticFinishDate = @datStatisticFinishDate or @datStatisticFinishDate is null)
						--AND (varValue = @varValue or @varValue is null)
						AND (idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup or @idfsStatisticalAgeGroup is null)
						AND intRowStatus = 0)

					--print @existingStatistic

					-- if row doesn't exists, then insert new data
					IF(@existingStatistic IS NULL)
						BEGIN

							--print 'existing statistic is null, so insert'

							INSERT INTO @SupressSelect
							EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbStatistic', @idfStatistic OUTPUT

							--Data Audit--

								-- tauDataAuditEvent Event Type - Create 
								set @idfsDataAuditEventType = 10016001;
			
								-- insert record into tauDataAuditEvent - 
								INSERT INTO @SupressSelect
								EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfStatistic, @idfObjectTable_tlbStatistic, @idfDataAuditEvent OUTPUT

							--Data Audit--

							INSERT INTO tlbStatistic
								(
									idfStatistic,
									idfsStatisticDataType,
									idfsMainBaseReference,
									idfsStatisticAreaType,
									idfsStatisticPeriodType,
									idfsArea,
									datStatisticStartDate,
									datStatisticFinishDate,
									varValue,
									idfsStatisticalAgeGroup
								)
							VALUES
								(
									@idfStatistic,
									@idfsStatisticDataType,
									@idfsMainBaseReference,
									@idfsStatisticAreaType,
									@idfsStatisticPeriodType,
									CASE ISNULL(@LocationUserControlidfsSettlement , '') 
									WHEN '' THEN
										CASE ISNULL(@LocationUserControlidfsRayon, '') 
										WHEN '' THEN
											CASE ISNULL(@LocationUserControlidfsRegion,'')
												WHEN '' THEN
													@LocationUserControlidfsCountry 
												ELSE 
													@LocationUserControlidfsRegion
												END
										ELSE 
												@LocationUserControlidfsRayon 
										END 
									ELSE 
										@LocationUserControlidfsSettlement  
									END,
									@datStatisticStartDate,
									@datStatisticFinishDate,
									CAST(@varValue AS INT),
									@idfsStatisticalAgeGroup
								)

							--Data Audit--							

								INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
								VALUES (@idfDataAuditEvent, @idfObjectTable_tlbStatistic, @idfStatistic)
			
							--Data Audit--

						END
					-- else, just update it with @existingStatistic
					ELSE

						--print 'existing statistic is NOT null, so update'

						--BEGIN: DataAudit-- 
				
							--  tauDataAuditEvent  Event Type - Edit 
							set @idfsDataAuditEventType = 10016003;
			
							-- insert record into tauDataAuditEvent - 
							INSERT INTO @SupressSelect
							EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfStatistic, @idfObjectTable_tlbStatistic, @idfDataAuditEvent OUTPUT						

							INSERT INTO @tlbStatistic_BeforeEdit(
								idfStatistic,
								idfsStatisticDataType, 
								idfsMainBaseReference, 
								idfsStatisticAreaType, 
								idfsStatisticPeriodType, 
								idfsArea,
								datStatisticStartDate,
								datStatisticFinishDate,
								varValue,
								idfsStatisticalAgeGroup
								)
							SELECT 
								idfStatistic,
								idfsStatisticDataType, 
								idfsMainBaseReference, 
								idfsStatisticAreaType, 
								idfsStatisticPeriodType, 
								idfsArea,
								datStatisticStartDate,
								datStatisticFinishDate,
								varValue,
								idfsStatisticalAgeGroup				
								FROM tlbStatistic WHERE idfStatistic = @idfStatistic;

						--END: DataAudit-- 

						UPDATE	tlbStatistic
						SET		idfsStatisticDataType = @idfsStatisticDataType,
								idfsMainBaseReference = @idfsMainBaseReference,
								idfsStatisticAreaType = @idfsStatisticAreaType,
								idfsStatisticPeriodType = @idfsStatisticPeriodType,
								idfsArea = CASE ISNULL(@LocationUserControlidfsSettlement , '') 
									WHEN '' THEN
										CASE ISNULL(@LocationUserControlidfsRayon, '') 
										WHEN '' THEN
											CASE ISNULL(@LocationUserControlidfsRegion,'')
												WHEN '' THEN
													@LocationUserControlidfsCountry 
												ELSE 
													@LocationUserControlidfsRegion
												END
										ELSE 
												@LocationUserControlidfsRayon 
										END 
									ELSE 
										@LocationUserControlidfsSettlement  
									END,
								datStatisticStartDate = @datStatisticStartDate,
								datStatisticFinishDate = @datStatisticFinishDate,
								varValue = CAST(@varValue AS INT),
								idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup
						 WHERE 	idfStatistic = @existingStatistic

						 --BEGIN: DataAudit-- 

							INSERT INTO @tlbStatistic_AfterEdit(
								idfStatistic,
								idfsStatisticDataType, 
								idfsMainBaseReference, 
								idfsStatisticAreaType, 
								idfsStatisticPeriodType, 
								idfsArea,
								datStatisticStartDate,
								datStatisticFinishDate,
								varValue,
								idfsStatisticalAgeGroup
								)
							SELECT 
								idfStatistic,
								idfsStatisticDataType, 
								idfsMainBaseReference, 
								idfsStatisticAreaType, 
								idfsStatisticPeriodType, 
								idfsArea,
								datStatisticStartDate,
								datStatisticFinishDate,
								varValue,
								idfsStatisticalAgeGroup				
								FROM tlbStatistic WHERE idfStatistic = @idfStatistic;

							--idfsStatisticDataType
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80410000000,
								a.idfStatistic,
								null,
								a.idfsStatisticDataType,
								b.idfsStatisticDataType 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsStatisticDataType <> b.idfsStatisticDataType) 
								or(a.idfsStatisticDataType is not null and b.idfsStatisticDataType is null)
								or(a.idfsStatisticDataType is null and b.idfsStatisticDataType is not null)

							--idfsMainBaseReference
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								4577930000000,
								a.idfStatistic,
								null,
								a.idfsMainBaseReference,
								b.idfsMainBaseReference 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsMainBaseReference <> b.idfsMainBaseReference) 
								or(a.idfsMainBaseReference is not null and b.idfsMainBaseReference is null)
								or(a.idfsMainBaseReference is null and b.idfsMainBaseReference is not null)

							--idfsStatisticAreaType
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80400000000,
								a.idfStatistic,
								null,
								a.idfsStatisticAreaType,
								b.idfsStatisticAreaType 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
								or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
								or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null)

							--idfsStatisticPeriodType
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80420000000,
								a.idfStatistic,
								null,
								a.idfsStatisticPeriodType,
								b.idfsStatisticPeriodType 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
								or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
								or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null)

							--idfsArea
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80390000000,
								a.idfStatistic,
								null,
								a.idfsArea,
								b.idfsArea 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsArea <> b.idfsArea) 
								or(a.idfsArea is not null and b.idfsArea is null)
								or(a.idfsArea is null and b.idfsArea is not null)

							--datStatisticStartDate
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80380000000,
								a.idfStatistic,
								null,
								a.datStatisticStartDate,
								b.datStatisticStartDate 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.datStatisticStartDate <> b.datStatisticStartDate) 
								or(a.datStatisticStartDate is not null and b.datStatisticStartDate is null)
								or(a.datStatisticStartDate is null and b.datStatisticStartDate is not null)
								
							--datStatisticFinishDate
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80370000000,
								a.idfStatistic,
								null,
								a.datStatisticFinishDate,
								b.datStatisticFinishDate 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.datStatisticFinishDate <> b.datStatisticFinishDate) 
								or(a.datStatisticFinishDate is not null and b.datStatisticFinishDate is null)
								or(a.datStatisticFinishDate is null and b.datStatisticFinishDate is not null)

							--varValue
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80440000000,
								a.idfStatistic,
								null,
								a.varValue,
								b.varValue 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.varValue <> b.varValue) 
								or(a.varValue is not null and b.varValue is null)
								or(a.varValue is null and b.varValue is not null)

							--idfsStatisticalAgeGroup
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								12014500000000,
								a.idfStatistic,
								null,
								a.idfsStatisticalAgeGroup,
								b.idfsStatisticalAgeGroup 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsStatisticalAgeGroup <> b.idfsStatisticalAgeGroup) 
								or(a.idfsStatisticalAgeGroup is not null and b.idfsStatisticalAgeGroup is null)
								or(a.idfsStatisticalAgeGroup is null and b.idfsStatisticalAgeGroup is not null)

						--END: DataAudit-- 

				END

			-- update record with the passed in @idfStatistic (does not happen during bulk import)
			ELSE 

				--print '@idfStatistic was passed in (does not happen during bulk import)'

				--BEGIN: DataAudit-- 
				
					--  tauDataAuditEvent  Event Type - Edit 
					set @idfsDataAuditEventType = 10016003;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SupressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfStatistic, @idfObjectTable_tlbStatistic, @idfDataAuditEvent OUTPUT						

					INSERT INTO @tlbStatistic_BeforeEdit(
						idfStatistic,
						idfsStatisticDataType, 
						idfsMainBaseReference, 
						idfsStatisticAreaType, 
						idfsStatisticPeriodType, 
						idfsArea,
						datStatisticStartDate,
						datStatisticFinishDate,
						varValue,
						idfsStatisticalAgeGroup
						)
					SELECT 
						idfStatistic,
						idfsStatisticDataType, 
						idfsMainBaseReference, 
						idfsStatisticAreaType, 
						idfsStatisticPeriodType, 
						idfsArea,
						datStatisticStartDate,
						datStatisticFinishDate,
						varValue,
						idfsStatisticalAgeGroup				
						FROM tlbStatistic WHERE idfStatistic = @idfStatistic;

				--END: DataAudit-- 

				UPDATE	tlbStatistic
				SET		idfsStatisticDataType = @idfsStatisticDataType,
						idfsMainBaseReference = @idfsMainBaseReference,
						idfsStatisticAreaType = @idfsStatisticAreaType,
						idfsStatisticPeriodType = @idfsStatisticPeriodType,
						idfsArea = CASE ISNULL(@LocationUserControlidfsSettlement , '') 
							WHEN '' THEN
								CASE ISNULL(@LocationUserControlidfsRayon, '') 
								WHEN '' THEN
									CASE ISNULL(@LocationUserControlidfsRegion,'')
										WHEN '' THEN
											@LocationUserControlidfsCountry 
										ELSE 
											@LocationUserControlidfsRegion
										END
								ELSE 
										@LocationUserControlidfsRayon 
								END 
							ELSE 
								@LocationUserControlidfsSettlement  
							END,
						datStatisticStartDate = @datStatisticStartDate,
						datStatisticFinishDate = @datStatisticFinishDate,
						varValue = CAST(@varValue AS INT),
						idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup
				WHERE 	idfStatistic = @idfStatistic

				--BEGIN: DataAudit-- 

					INSERT INTO @tlbStatistic_AfterEdit(
						idfStatistic,
						idfsStatisticDataType, 
						idfsMainBaseReference, 
						idfsStatisticAreaType, 
						idfsStatisticPeriodType, 
						idfsArea,
						datStatisticStartDate,
						datStatisticFinishDate,
						varValue,
						idfsStatisticalAgeGroup
						)
					SELECT 
						idfStatistic,
						idfsStatisticDataType, 
						idfsMainBaseReference, 
						idfsStatisticAreaType, 
						idfsStatisticPeriodType, 
						idfsArea,
						datStatisticStartDate,
						datStatisticFinishDate,
						varValue,
						idfsStatisticalAgeGroup				
						FROM tlbStatistic WHERE idfStatistic = @idfStatistic;

					--idfsStatisticDataType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80410000000,
						a.idfStatistic,
						null,
						a.idfsStatisticDataType,
						b.idfsStatisticDataType 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsStatisticDataType <> b.idfsStatisticDataType) 
						or(a.idfsStatisticDataType is not null and b.idfsStatisticDataType is null)
						or(a.idfsStatisticDataType is null and b.idfsStatisticDataType is not null)

					--idfsMainBaseReference
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						4577930000000,
						a.idfStatistic,
						null,
						a.idfsMainBaseReference,
						b.idfsMainBaseReference 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsMainBaseReference <> b.idfsMainBaseReference) 
						or(a.idfsMainBaseReference is not null and b.idfsMainBaseReference is null)
						or(a.idfsMainBaseReference is null and b.idfsMainBaseReference is not null)

					--idfsStatisticAreaType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80400000000,
						a.idfStatistic,
						null,
						a.idfsStatisticAreaType,
						b.idfsStatisticAreaType 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
						or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
						or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null)

					--idfsStatisticPeriodType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80420000000,
						a.idfStatistic,
						null,
						a.idfsStatisticPeriodType,
						b.idfsStatisticPeriodType 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
						or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
						or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null)

					--idfsArea
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80390000000,
						a.idfStatistic,
						null,
						a.idfsArea,
						b.idfsArea 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsArea <> b.idfsArea) 
						or(a.idfsArea is not null and b.idfsArea is null)
						or(a.idfsArea is null and b.idfsArea is not null)

					--datStatisticStartDate
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80380000000,
						a.idfStatistic,
						null,
						a.datStatisticStartDate,
						b.datStatisticStartDate 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.datStatisticStartDate <> b.datStatisticStartDate) 
						or(a.datStatisticStartDate is not null and b.datStatisticStartDate is null)
						or(a.datStatisticStartDate is null and b.datStatisticStartDate is not null)
								
					--datStatisticFinishDate
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80370000000,
						a.idfStatistic,
						null,
						a.datStatisticFinishDate,
						b.datStatisticFinishDate 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.datStatisticFinishDate <> b.datStatisticFinishDate) 
						or(a.datStatisticFinishDate is not null and b.datStatisticFinishDate is null)
						or(a.datStatisticFinishDate is null and b.datStatisticFinishDate is not null)

					--varValue
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80440000000,
						a.idfStatistic,
						null,
						a.varValue,
						b.varValue 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.varValue <> b.varValue) 
						or(a.varValue is not null and b.varValue is null)
						or(a.varValue is null and b.varValue is not null)

					--idfsStatisticalAgeGroup
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						12014500000000,
						a.idfStatistic,
						null,
						a.idfsStatisticalAgeGroup,
						b.idfsStatisticalAgeGroup 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsStatisticalAgeGroup <> b.idfsStatisticalAgeGroup) 
						or(a.idfsStatisticalAgeGroup is not null and b.idfsStatisticalAgeGroup is null)
						or(a.idfsStatisticalAgeGroup is null and b.idfsStatisticalAgeGroup is not null)

				--END: DataAudit-- 

		-- Commit the transaction
		IF @@TRANCOUNT > 0
			COMMIT  
		
		Select @returnCode 'ReturnCode', @returnMsg 'ReturnMessage' , @idfStatistic 'idfStatistic'
	END TRY  

	BEGIN CATCH  

		-- Execute error retrieval routine. 
		IF @@TRANCOUNT > 0
			BEGIN
				ROLLBACK


			END;
			Throw;		
	END CATCH; 
END
GO
PRINT N'Altering Procedure [dbo].[USP_Admin_SystemFunction_PersonANDEmployeeGroup_GetList]...';


GO
-- ================================================================================================
-- Name: USP_Admin_SystemFunction_PersonANDEmployeeGroup_GetList
--
-- Description: Returns a list of permissions given as list of roles
--
-- Author: Ricky Moss
--
-- Revision Log:
-- Name					Date       Description of Change
-- -------------------- ---------- ---------------------------------------------------------------
-- Mandar Kulkarni		06/15/2021 Initial Release
-- Stephen Long         07/18/2021 Added configurable filtration rules.
--
-- exec USP_Admin_SystemFunction_PersonANDEmployeeGroup_GetList 10094004, 'en', 741
-- ================================================================================================
ALTER  PROCEDURE [dbo].[USP_Admin_SystemFunction_PersonANDEmployeeGroup_GetList] (
	@SystemFunctionID BIGINT
	,@LangID NVARCHAR(50)
	,@PageNumber INT = 1
	,@PageSize INT = 10
	,@SortColumn NVARCHAR(100) = 'Name'
	,@SortOrder NVARCHAR(4) = 'ASC'
	,@ActorTypeID AS BIGINT = NULL -- User or User Group
	,@Name AS NVARCHAR(200) = NULL
	,@OrganizationName AS NVARCHAR(200) = NULL
	,@Description AS NVARCHAR(200) = NULL
	,@UserSiteID BIGINT = NULL
	,@UserOrganizationID BIGINT
	,@UserEmployeeID BIGINT
	)
AS
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;

		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @T TABLE (
			idfEmployee BIGINT
			,idfsEmployeeType BIGINT
			,[EmployeeTypeName] NVARCHAR(255)
			,[Name] NVARCHAR(2000)
			,idfsOfficeAbbreviation NVARCHAR(255)
			,[OrganizationName] NVARCHAR(255)
			,strDescription NVARCHAR(255)
			)
		DECLARE @Results TABLE (
			ID BIGINT NOT NULL
			,ReadPermissionIndicator BIT NOT NULL
			,AccessToPersonalDataPermissionIndicator BIT NOT NULL
			,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
			,WritePermissionIndicator BIT NOT NULL
			,DeletePermissionIndicator BIT NOT NULL
			);

		SET @firstRec = (@PageNumber - 1) * @Pagesize;
		SET @lastRec = (@PageNumber * @PageSize + 1);

		INSERT INTO @Results
		SELECT e.idfEmployee
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbEmployee e
		LEFT JOIN dbo.tlbPerson Person ON Person.idfPerson = e.idfEmployee
		LEFT JOIN dbo.tlbEmployeeGroup employeeGroup ON employeeGroup.idfEmployeeGroup = e.idfEmployee
		-- translated group name
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000022) GroupName ON GroupName.idfsReference = employeeGroup.idfsEmployeeGroupName
		--rftEmployeeType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000023) Actor ON Actor.idfsReference = e.idfsEmployeeType
		LEFT JOIN dbo.tlbOffice Office ON Person.idfInstitution = Office.idfOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) OfficeName ON Office.idfsOfficeAbbreviation = OfficeName.idfsReference
		WHERE e.intRowStatus = 0
			AND (
				e.idfsSite = @UserSiteID
				OR @UserSiteID IS NULL
				)
			AND e.idfsEmployeeType IN (
				10023001
				,10023002
				) -- user or group
			AND (
				e.idfEmployee NOT IN (
					SELECT idfEmployee
					FROM dbo.LkupRoleSystemFunctionAccess lrsfa
					WHERE SystemFunctionID = @SystemFunctionID
						--AND intRowStatusForSystemFunction = 1
					)
				OR e.idfEmployee IN (
					SELECT idfEmployee
					FROM dbo.LkupRoleSystemFunctionAccess lrsfa
					WHERE SystemFunctionID = @SystemFunctionID
						AND intRowStatusForSystemFunction = 1
					)
				)
			AND (
				e.idfsEmployeeType = @ActorTypeID
				OR @ActorTypeID IS NULL
				)
			AND (
				Person.strFamilyName LIKE + '%' + @name + '%'
				OR Person.strFirstName LIKE + '%' + @name + '%'
				OR employeeGroup.strName LIKE '%' + @name + '%'
				OR @name IS NULL
				)
			AND (
				OfficeName.name LIKE '%' + @OrganizationName + '%'
				OR @OrganizationName IS NULL
				)
			AND (
				employeeGroup.strDescription LIKE '%' + @Description + '%'
				OR @Description IS NULL
				);

		IF @UserSiteID IS NOT NULL
		BEGIN
			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,INDEX IDX_ID(ID)
				);

			-- =======================================================================================
			-- CONFIGURABLE SITE FILTRATION RULES
			-- 
			-- Apply configurable site filtration rules for use case SAUC34.
			-- =======================================================================================
			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup AS userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember AS egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.tstUserTable AS u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND sgs.idfsSite = e.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteID = e.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tlbEmployeeGroupMember AS egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteID = e.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tstUserTable AS u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0
				AND a.GrantingActorSiteID = e.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
			FROM @FilteredResults
			INNER JOIN dbo.tlbEmployee e ON e.idfEmployee = ID
			LEFT JOIN dbo.tlbPerson Person ON Person.idfPerson = e.idfEmployee
			LEFT JOIN dbo.tlbEmployeeGroup employeeGroup ON employeeGroup.idfEmployeeGroup = e.idfEmployee
			-- translated group name
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000022) GroupName ON GroupName.idfsReference = employeeGroup.idfsEmployeeGroupName
			--rftEmployeeType
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000023) Actor ON Actor.idfsReference = e.idfsEmployeeType
			LEFT JOIN dbo.tlbOffice Office ON Person.idfInstitution = Office.idfOffice
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) OfficeName ON Office.idfsOfficeAbbreviation = OfficeName.idfsReference
			WHERE e.intRowStatus = 0
				--AND e.idfsSite = @UserSiteID
				AND e.idfsEmployeeType IN (
					10023001
					,10023002
					) -- user or group
				AND (
					e.idfEmployee NOT IN (
						SELECT idfEmployee
						FROM dbo.LkupRoleSystemFunctionAccess lrsfa
						WHERE SystemFunctionID = @SystemFunctionID
						)
					OR e.idfEmployee IN (
						SELECT idfEmployee
						FROM dbo.LkupRoleSystemFunctionAccess lrsfa
						WHERE SystemFunctionID = @SystemFunctionID
							AND intRowStatusForSystemFunction = 1
						)
					)
				AND (
					e.idfsEmployeeType = @ActorTypeID
					OR @ActorTypeID IS NULL
					)
				AND (
					Person.strFamilyName LIKE + '%' + @name + '%'
					OR Person.strFirstName LIKE + '%' + @name + '%'
					OR employeeGroup.strName LIKE '%' + @name + '%'
					OR @name IS NULL
					)
				AND (
					OfficeName.name LIKE '%' + @OrganizationName + '%'
					OR @OrganizationName IS NULL
					)
				AND (
					employeeGroup.strDescription LIKE '%' + @Description + '%'
					OR @Description IS NULL
					)
			GROUP BY ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator;
		END;

		INSERT INTO @T
		SELECT Employee.idfEmployee
			,Employee.idfsEmployeeType
			,Actor.name AS [EmployeeTypeName]
			,ISNULL(GroupName.name, dbo.FN_GBL_ConcatFullName(Person.strFamilyName, Person.strFirstName, Person.strSecondName)) AS 'Name'
			,Office.idfsOfficeAbbreviation
			,OfficeName.name AS [OrganizationName]
			,EmployeeGroup.strDescription
		FROM @Results res
		INNER JOIN dbo.tlbEmployee Employee ON Employee.idfEmployee = res.ID
		LEFT JOIN dbo.tlbPerson Person ON Person.idfPerson = Employee.idfEmployee
		LEFT JOIN dbo.tlbEmployeeGroup employeeGroup ON employeeGroup.idfEmployeeGroup = Employee.idfEmployee
		-- translated group name
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000022) GroupName ON GroupName.idfsReference = employeeGroup.idfsEmployeeGroupName
		--rftEmployeeType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000023) Actor ON Actor.idfsReference = Employee.idfsEmployeeType
		LEFT JOIN dbo.tlbOffice Office ON Person.idfInstitution = Office.idfOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) OfficeName ON Office.idfsOfficeAbbreviation = OfficeName.idfsReference;

		WITH CTEResults
		AS (
			SELECT ROW_NUMBER() OVER (
					ORDER BY CASE 
							WHEN (
									@sortColumn = 'ActorType'
									AND @SortOrder = 'asc'
									)
								THEN [EmployeeTypeName]
							END ASC
						,CASE 
							WHEN (
									@sortColumn = 'ActorType'
									AND @SortOrder = 'desc'
									)
								THEN [EmployeeTypeName]
							END DESC
						,CASE 
							WHEN (
									@sortColumn = 'Name'
									AND @SortOrder = 'asc'
									)
								THEN [Name]
							END ASC
						,CASE 
							WHEN (
									@sortColumn = 'Name'
									AND @SortOrder = 'desc'
									)
								THEN [Name]
							END DESC
						,CASE 
							WHEN (
									@sortColumn = 'OrganizationName'
									AND @SortOrder = 'asc'
									)
								THEN OrganizationName
							END ASC
						,CASE 
							WHEN (
									@sortColumn = 'OrganizationName'
									AND @SortOrder = 'desc'
									)
								THEN OrganizationName
							END DESC
						,CASE 
							WHEN (
									@sortColumn = 'Description'
									AND @SortOrder = 'asc'
									)
								THEN strDescription
							END ASC
						,CASE 
							WHEN (
									@sortColumn = 'Description'
									AND @SortOrder = 'desc'
									)
								THEN strDescription
							END DESC
					) AS ROWNUM
				,COUNT(*) OVER () AS TotalRowCount
				,idfEmployee
				,idfsEmployeeType
				,[EmployeeTypeName]
				,[Name]
				,idfsOfficeAbbreviation
				,[OrganizationName]
				,strDescription
			FROM @T
			)
		SELECT TotalRowCount
			,idfEmployee
			,idfsEmployeeType
			,[EmployeeTypeName]
			,[Name]
			,idfsOfficeAbbreviation
			,[OrganizationName]
			,strDescription
			,TotalPages = (TotalRowCount / @PageSize) + IIF(TotalRowCount % @PageSize > 0, 1, 0)
			,CurrentPage = @PageNumber
		FROM CTEResults
		WHERE RowNum > @firstRec
			AND RowNum < @lastRec;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_Admin_UserGoupAndUser_GetList]...';


GO

--==============================================================================================================
-- NAME:					[USP_Admin_GetUserGoupAndUserList]
-- DESCRIPTION:				Returns a list of UserGroupAndUser list
-- AUTHOR:					Manickandan Govindarajan
--
-- HISTORY OF CHANGES:
-- Name:				Date:		Description of change
-- ---------------------------------------------------------------------------------------------------------------
-- Manickandan Govindarajan			06/9/2021	Initial Release
--Manickandan Govindarajan			03/15/2022  Added to include Default Gorup -506 
--Manickandan Govindarajan	        03/17/2022  Removed the UserSiteID condition to bring all the users
--
-- EXEC [USP_Admin_UserGoupAndUser_GetList] 'en'

-- ===============================================================================================================
ALTER PROCEDURE [dbo].[USP_Admin_UserGoupAndUser_GetList]
		@LanguageId NVARCHAR(50),
		@Id BIGINT,
		@Name NVARCHAR(255) =NULL,
		@pageNo INT = 1,
		@pageSize INT = 10,
		@sortColumn NVARCHAR(30) = 'Name',
		@sortOrder NVARCHAR(4) = 'asc',
		@UserSiteID BIGINT = NULL,
		@UserOrganizationID BIGINT,
		@UserEmployeeID BIGINT
AS
BEGIN
	
	BEGIN TRY

	SET NOCOUNT ON;

		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @T TABLE (
			id BIGINT
			,idfsEmployeeType BIGINT
			,Name NVARCHAR(255)
			,TypeName NVARCHAR(2000)
			)
		DECLARE @Results TABLE (
			ID BIGINT NOT NULL
			,ReadPermissionIndicator BIT NOT NULL
			,AccessToPersonalDataPermissionIndicator BIT NOT NULL
			,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
			,WritePermissionIndicator BIT NOT NULL
			,DeletePermissionIndicator BIT NOT NULL
			,INDEX IDX_ID(ID)
			);

		SET @firstRec = (@pageNo - 1) * @pageSize;
		SET @lastRec = (@pageNo * @pageSize + 1);

		INSERT INTO @Results
		SELECT e.idfEmployee
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbEmployee e
		LEFT JOIN dbo.tlbPerson Person ON Person.idfPerson = e.idfEmployee
		LEFT JOIN dbo.tlbEmployeeGroup employeeGroup ON employeeGroup.idfEmployeeGroup = e.idfEmployee
		JOIN (SELECT idfEmployee FROM dbo.LkupRoleSystemFunctionAccess WHERE SystemFunctionID = @id AND intRowStatusForSystemFunction =0 GROUP BY idfEmployee )  rsys
		ON e.idfEmployee= rsys.idfEmployee
		-- translated group name
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000022) GroupName ON GroupName.idfsReference = employeeGroup.idfsEmployeeGroupName
		--rftEmployeeType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000023) Actor ON Actor.idfsReference = e.idfsEmployeeType
		LEFT JOIN dbo.[FN_GBL_Institution](@LanguageId) ins ON ins.idfOffice = person.idfInstitution 
		WHERE e.intRowStatus = 0
		AND (
				e.idfsSite = @UserSiteID
				OR @UserSiteID IS NULL
				)



		IF @UserSiteID IS NOT NULL
		BEGIN
			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL 
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,INDEX IDX_ID(ID)
				);

			-- =======================================================================================
			-- CONFIGURABLE SITE FILTRATION RULES
			-- 
			-- Apply configurable site filtration rules for use case SAUC34.
			-- =======================================================================================
			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup AS userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0 AND e.idfsEmployeeType=10023002
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0 AND e.idfsEmployeeType=10023002
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember AS egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0 AND e.idfsEmployeeType=10023001
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS ON grantingSGS.idfsSite = e.idfsSite
			INNER JOIN dbo.tstUserTable AS u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0  AND e.idfsEmployeeType=10023002
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0 AND e.idfsEmployeeType =10023002
				AND sgs.idfsSite = e.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0 AND e.idfsEmployeeType= 10023002
				AND a.GrantingActorSiteID = e.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tlbEmployeeGroupMember AS egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0 AND e.idfsEmployeeType= 10023001
				AND a.GrantingActorSiteID = e.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT e.idfEmployee
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbEmployee e
			INNER JOIN dbo.tstUserTable AS u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor AS ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule AS a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE e.intRowStatus = 0  AND e.idfsEmployeeType=10023002
				AND a.GrantingActorSiteID = e.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
			FROM @FilteredResults res
			INNER JOIN dbo.tlbEmployee e ON e.idfEmployee = res.ID
			LEFT JOIN dbo.tlbPerson Person ON Person.idfPerson = e.idfEmployee
			JOIN (select idfEmployee from dbo.LkupRoleSystemFunctionAccess where SystemFunctionID = @Id and intRowStatusForSystemFunction =0 group by idfEmployee )  rsys
			on e.idfEmployee= rsys.idfEmployee
			LEFT JOIN dbo.tlbEmployeeGroup employeeGroup ON employeeGroup.idfEmployeeGroup = e.idfEmployee
			-- translated group name
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000022) GroupName ON GroupName.idfsReference = employeeGroup.idfsEmployeeGroupName
			--rftEmployeeType
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000023) Actor ON Actor.idfsReference = e.idfsEmployeeType

			WHERE e.intRowStatus = 0
				
			GROUP BY ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator;
		END;

		INSERT INTO @T
		SELECT Employee.idfEmployee as id
			,Employee.idfsEmployeeType
			,ISNULL(GroupName.name, dbo.FN_GBL_ConcatFullName(Person.strFamilyName, Person.strFirstName, Person.strSecondName)) AS Name
			,Actor.name AS TypeName 
		FROM @Results res
		INNER JOIN dbo.tlbEmployee Employee ON Employee.idfEmployee = res.ID
		LEFT JOIN dbo.tlbPerson Person ON Person.idfPerson = Employee.idfEmployee
		LEFT JOIN dbo.tlbEmployeeGroup employeeGroup ON employeeGroup.idfEmployeeGroup = Employee.idfEmployee
		JOIN (select idfEmployee from dbo.LkupRoleSystemFunctionAccess where SystemFunctionID = @Id and intRowStatusForSystemFunction =0 group by idfEmployee )  rsys
		on employee.idfEmployee= rsys.idfEmployee
		-- translated group name
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000022) GroupName ON GroupName.idfsReference = employeeGroup.idfsEmployeeGroupName
		--rftEmployeeType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000023) Actor ON Actor.idfsReference = Employee.idfsEmployeeType
		WHERE 
		--(
		--	Employee.idfsSite = @UserSiteID
		--	OR @UserSiteID IS NULL OR ( Employee.idfsSite =1 AND Employee.idfEmployee=-506)
		--)
		--AND
		Employee.idfsEmployeeType IN (
			10023001
			,10023002
			) -- user or group
		AND (
			person.strFamilyName  LIKE '%' + @Name + '%'
			OR person.strFirstName  LIKE '%' + @Name + '%'
			OR person.strSecondName  LIKE '%' + @Name + '%'
			OR employeeGroup.strName  LIKE '%' + @Name + '%'
			OR employeeGroup.strDescription  LIKE '%' + @Name + '%'
			OR @Name IS NULL 
			OR @Name = ''
			); -- user name or user group name

		WITH CTEResults
		AS (
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN Name ='Default Role' and @sortColumn = 'Name' AND @SortOrder = 'asc'  THEN 0 ELSE 1 END , Name  ASC,
				CASE WHEN Name ='Default Role' and @sortColumn = 'Name' AND @SortOrder = 'desc'  THEN 0 ELSE 1 END , Name  DESC,
			    CASE WHEN Name ='Default Role' and @sortColumn = 'Type' AND @SortOrder = 'asc'  THEN 0 ELSE 1 END , TypeName  ASC,
				CASE WHEN Name ='Default Role' and @sortColumn = 'Type' AND @SortOrder = 'desc'  THEN 0 ELSE 1 END , TypeName  desc	
				) AS ROWNUM,
				COUNT(*) OVER () AS TotalRowCount,
				id, 
				idfsEmployeeType, 
				Name, 
				TypeName
			FROM @T
			)
		SELECT TotalRowCount
			,id
			,idfsEmployeeType
			,Name
			,TypeName
			,TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0)
			,CurrentPage = @pageNo
		FROM CTEResults
		WHERE RowNum > @firstRec
			AND RowNum < @lastRec;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_AGG_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name:  USP_AGG_REPORT_GETList
--
-- Description:  Returns list of aggregate reports depending on aggregate report type.
--          
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        07/01/2019 Initial release.
-- Stephen Long        07/09/2019 Updated gis string translation to sub selects instead of joins 
--                                for better performance.
-- Stephen Long        08/05/2019 Updated time period join, and changed the select all if/else. 
--                                Was throwing errors on POCO.
-- Stephen Long        08/08/2019 Added entered by person name.
-- Stephen Long        08/13/2019 Corrected administrative unit type id values.
-- Stephen Long        09/26/2019 Changed administrative where clause; reference TFS item
-- Stephen Long        01/22/2020 Added site list parameter for site filtration.
-- Stephen Long        02/18/2020 Added non-configurable site filtration rules.
-- Stephen Long        02/28/2020 Added "display" dates to handle different cultures.
-- Mark Wilson		   03/03/2020 Removed @DistinctIDs table parm and got rid of duplicates
-- Stephen Long        04/29/2020 Added organization statistical area type.
-- Stephen Long        06/30/2020 Made updates so POCO generator would better handle.
-- Stephen Long        07/06/2020 Added trim to EIDSS Report ID.
-- Stephen Long        09/18/2020 Added the four version ID's for the various matrices.
-- Stephen Long        09/21/2020 Added parameter administrative unit type ID and where 
--                                criteria.
-- Stephen Long        11/18/2020 Added site ID to the query.
-- Stephen Long        11/27/2020 Added configurable site filtration rules.
-- Stephen Long        12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long        04/04/2021 Added updated pagination and location hierarchy.
-- Ann Xiong	       10/23/2021 Fixed search by Organization issue
-- Stephen Long        05/17/2022 Added additional criteria for admin unit of organization.
-- Mike Kornegay	   05/19/2022 Updated to reflect new parameters.
-- Stephen Long        05/31/2022 Updated default rule for administrative level check, and added
--                                for organizations connected to the report.
-- Stephen Long        06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	   08/01/2022 Changed CTE for paging and sorting because sorting was not correct.
-- Stephen Long        09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Ann Xiong		   09/27/2022 Added parameter LegacyReportID
-- Stephen Long        01/09/2023 Updxates for site filtration queries.
--
-- Legends:
/*
	Aggregate disease report types:
    Human Aggregate = 10102001
    Veterinary Aggregate Disease = 10102002
    Veterinary Aggregate Action = 10102003

	Time interval types:
    None = 0
    Month = 10091001
    Day = 10091002
    Quarter = 10091003
    Week = 10091004
    Year = 10091005

	Administrative unit types:
    None = 0
    Country/Administrative Level 1 = 10089001
	Administrative Level 2 = 10089003
    Administrative Level 3 = 10089002
    Settlement = 10089004
	Organization = 10089005

	Testing Code:
	exec USP_AGG_REPORT_GETList 'en-US', 
	@AggregateReportTypeID=10102001, 
	@UserSiteID=864, 
	@UserOrganizationID=758210000000, 
	@UserEmployeeID=420664190000872
*/
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_AGG_REPORT_GETList]
(
    @LanguageID AS NVARCHAR(50),
    @AggregateReportTypeID AS BIGINT = NULL,
    @ReportID AS NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @AdministrativeUnitTypeID AS BIGINT = NULL,
    @TimeIntervalTypeID AS BIGINT = NULL,
    @StartDate AS DATETIME = NULL,
    @EndDate AS DATETIME = NULL,
    @AdministrativeUnitID AS BIGINT = NULL,
    @OrganizationID BIGINT = NULL,
    @SelectAllIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    IF @SelectAllIndicator = 1
    BEGIN
        SET @PageSize = 100000;
        SET @PageNumber = 1;
    END;

    DECLARE @firstRec INT;
    DECLARE @lastRec INT;
    SET @firstRec = (@PageNumber - 1) * @PageSize
    SET @lastRec = (@PageNumber * @PageSize + 1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        IF @AdministrativeUnitID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeUnitID;
        END;

        -- ========================================================================================
        -- NO CONFIGRUABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any configurable filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT ac.idfAggrCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbAggrCase ac
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.gisBaseReference br
                    ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit
                    ON ac.idfOffice = OrganizationAdminUnit.idfOffice
                LEFT JOIN dbo.trtBaseReference AdminUnit
                    ON AdminUnit.idfsBaseReference = CASE
                                                         WHEN ac.idfOffice IS NOT NULL THEN
                                                             10089005
                                                         WHEN br.idfsGISReferenceType = 19000001 THEN
                                                             10089001
                                                         WHEN br.idfsGISReferenceType = 19000003 THEN
                                                             10089003
                                                         WHEN br.idfsGISReferenceType = 19000002 THEN
                                                             10089002
                                                         WHEN br.idfsGISReferenceType = 19000004 THEN
                                                             10089004
                                                     END
                LEFT JOIN dbo.trtStringNameTranslation AS per
                    ON per.idfsBaseReference = CASE
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091002 /* Day */
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                       10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                                   WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091001 /* Month */
                                                   WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091003 /* Quarter */
                                                   WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091005 /* Year */
                                               END
                       AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE ac.intRowStatus = 0
                  AND (
                          ac.idfsAggrCaseType = @AggregateReportTypeID
                          OR @AggregateReportTypeID IS NULL
                      )
                  AND (
                          ac.idfOffice = @OrganizationID
                          OR @OrganizationID IS NULL
                      )
                  AND (
                          AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
                          OR @AdministrativeUnitTypeID IS NULL
                      )
                  AND (
                          per.idfsBaseReference = @TimeIntervalTypeID
                          OR @TimeIntervalTypeID IS NULL
                      )
                  AND (
                          ac.datStartDate >= @StartDate
                          OR @StartDate IS NULL
                      )
                  AND (
                          ac.datFinishDate <= @EndDate
                          OR @EndDate IS NULL
                      )
                  AND (CASE
                           WHEN @AdministrativeUnitID IS NULL THEN
                               1
                           WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                                OR (
                                       ac.idfOffice = @AdministrativeUnitID
                                       AND @AdministrativeUnitTypeID = 10089005
                                   ) THEN
                               1
                           ELSE
                               0
                       END = 1
                      )
                  AND (
                          ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          ac.strCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      );
        END
        ELSE
        BEGIN
            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));
            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply non-configurable filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE a.DefaultRuleIndicator = 1;

            --
            -- Human Aggregate Disease Report data shall be available to all sites' organizations 
            -- connected to the particular report.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537023;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Entered by and notification received by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT a.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase a
                WHERE a.intRowStatus = 0
                      AND (
                              a.idfEnteredByOffice = @UserOrganizationID
                              OR a.idfReceivedByOffice = @UserOrganizationID
                              OR a.idfSentByOffice = @UserOrganizationID
                          );
            END;

            --
            -- Human Aggregate Disease Report data shall be available to all sites of the same 
            -- administrative level specified in the rule.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537005;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537005;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the report administrative unit.
                INSERT INTO @FilteredResults
                SELECT ac.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase ac
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = ac.idfsAdministrativeUnit
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537005
                WHERE ac.intRowStatus = 0
                      AND ac.idfsAggrCaseType = 10102001
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
                      AND ac.idfAggrCase NOT IN (
                                                    SELECT ID FROM @FilteredResults
                                                );

                -- Administrative level of the settlement of the report administrative unit.
                INSERT INTO @FilteredResults
                SELECT ac.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase ac
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = ac.idfsAdministrativeUnit
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537005
                WHERE ac.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
                      AND (ac.idfAggrCase NOT IN (
                                                     SELECT ID FROM @FilteredResults
                                                 )
                          );
            END;

            --
            -- Veterinary Aggregate Disease/Action Report data shall be available to all sites' organizations 
            -- connected to the particular report.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537024;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Entered by and notification received by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT a.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase a
                WHERE a.intRowStatus = 0
                      AND (
                              a.idfEnteredByOffice = @UserOrganizationID
                              OR a.idfReceivedByOffice = @UserOrganizationID
                              OR a.idfSentByOffice = @UserOrganizationID
                          );
            END;

            --
            -- Veterinary Aggregate Disease/Action Report data shall be available to all sites of the same 
            -- administrative level specified in the rule.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537014;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537014;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the report administrative unit.
                INSERT INTO @FilteredResults
                SELECT ac.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase ac
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = ac.idfsAdministrativeUnit
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537014
                WHERE ac.intRowStatus = 0
                      AND ac.idfsAggrCaseType = 10102002
                      OR ac.idfAggrCase = 10102003
                         AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
                         AND ac.idfAggrCase NOT IN (
                                                       SELECT ID FROM @FilteredResults
                                                   );

                -- Administrative level of the settlement of the report administrative unit.
                INSERT INTO @FilteredResults
                SELECT ac.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase ac
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = ac.idfsAdministrativeUnit
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537014
                WHERE ac.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
                      AND (ac.idfAggrCase NOT IN (
                                                     SELECT ID FROM @FilteredResults
                                                 )
                          );
            END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ag.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ag.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ag.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ag.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND sgs.idfsSite = ag.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteID = ag.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteID = ag.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteID = ag.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbAggrCase ac
                    ON ac.idfAggrCase = ID
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.gisBaseReference br
                    ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit
                    ON ac.idfOffice = OrganizationAdminUnit.idfOffice
                LEFT JOIN dbo.trtBaseReference AdminUnit
                    ON AdminUnit.idfsBaseReference = CASE
                                                         WHEN ac.idfOffice IS NOT NULL THEN
                                                             10089005
                                                         WHEN br.idfsGISReferenceType = 19000001 THEN
                                                             10089001
                                                         WHEN br.idfsGISReferenceType = 19000003 THEN
                                                             10089003
                                                         WHEN br.idfsGISReferenceType = 19000002 THEN
                                                             10089002
                                                         WHEN br.idfsGISReferenceType = 19000004 THEN
                                                             10089004
                                                     END
                LEFT JOIN dbo.trtStringNameTranslation AS per
                    ON per.idfsBaseReference = CASE
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091002 /* Day */
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                       10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                                   WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091001 /* Month */
                                                   WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091003 /* Quarter */
                                                   WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091005 /* Year */
                                               END
                       AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE (
                      ac.idfsAggrCaseType = @AggregateReportTypeID
                      OR @AggregateReportTypeID IS NULL
                  )
                  AND (
                          ac.idfSentByOffice = @OrganizationID
                          OR @OrganizationID IS NULL
                      )
                  AND (
                          AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
                          OR @AdministrativeUnitTypeID IS NULL
                      )
                  AND (
                          per.idfsBaseReference = @TimeIntervalTypeID
                          OR @TimeIntervalTypeID IS NULL
                      )
                  AND (
                          ac.datStartDate >= @StartDate
                          OR @StartDate IS NULL
                      )
                  AND (
                          ac.datFinishDate <= @EndDate
                          OR @EndDate IS NULL
                      )
                  AND (CASE
                           WHEN @AdministrativeUnitID IS NULL THEN
                               1
                           WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                                OR (
                                       ac.idfOffice = @AdministrativeUnitID
                                       AND @AdministrativeUnitTypeID = 10089005
                                   ) THEN
                               1
                           ELSE
                               0
                       END = 1
                      )
                  AND (
                          ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ac.idfAggrCase
            FROM dbo.tlbAggrCase ac
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = ac.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE ac.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );
        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT ac.idfAggrCase,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbAggrCase ac
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = ac.idfsSite
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ac.idfsAdministrativeUnit
            LEFT JOIN dbo.gisBaseReference br
                ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
            LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit
                ON ac.idfOffice = OrganizationAdminUnit.idfOffice
            LEFT JOIN dbo.trtBaseReference AdminUnit
                ON AdminUnit.idfsBaseReference = CASE
                                                     WHEN ac.idfOffice IS NOT NULL THEN
                                                         10089005
                                                     WHEN br.idfsGISReferenceType = 19000001 THEN
                                                         10089001
                                                     WHEN br.idfsGISReferenceType = 19000003 THEN
                                                         10089003
                                                     WHEN br.idfsGISReferenceType = 19000002 THEN
                                                         10089002
                                                     WHEN br.idfsGISReferenceType = 19000004 THEN
                                                         10089004
                                                 END
            LEFT JOIN dbo.trtStringNameTranslation AS per
                ON per.idfsBaseReference = CASE
                                               WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091002 /* Day */
                                               WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                   10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                               WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091001 /* Month */
                                               WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091003 /* Quarter */
                                               WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091005 /* Year */
                                           END
                   AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND ac.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup
              AND (
                      ac.idfsAggrCaseType = @AggregateReportTypeID
                      OR @AggregateReportTypeID IS NULL
                  )
              AND (
                      ac.idfSentByOffice = @OrganizationID
                      OR @OrganizationID IS NULL
                  )
              AND (
                      AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
                      OR @AdministrativeUnitTypeID IS NULL
                  )
              AND (
                      per.idfsBaseReference = @TimeIntervalTypeID
                      OR @TimeIntervalTypeID IS NULL
                  )
              AND (
                      ac.datStartDate >= @StartDate
                      OR @StartDate IS NULL
                  )
              AND (
                      ac.datFinishDate <= @EndDate
                      OR @EndDate IS NULL
                  )
              AND (CASE
                       WHEN @AdministrativeUnitID IS NULL THEN
                           1
                       WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                            OR (
                                   ac.idfOffice = @AdministrativeUnitID
                                   AND @AdministrativeUnitTypeID = 10089005
                               ) THEN
                           1
                       ELSE
                           0
                   END = 1
                  )
              AND (
                      ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = ac.idfsSite
        )
        GROUP BY ac.idfAggrCase,
                 ac.idfsSite;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbAggrCase ac
                ON ac.idfAggrCase = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = ac.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT ac.idfAggrCase,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbAggrCase ac
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = ac.idfsSite
                   AND oa.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ac.idfsAdministrativeUnit
            LEFT JOIN dbo.gisBaseReference br
                ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
            LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit
                ON ac.idfOffice = OrganizationAdminUnit.idfOffice
            LEFT JOIN dbo.trtBaseReference AdminUnit
                ON AdminUnit.idfsBaseReference = CASE
                                                     WHEN ac.idfOffice IS NOT NULL THEN
                                                         10089005
                                                     WHEN br.idfsGISReferenceType = 19000001 THEN
                                                         10089001
                                                     WHEN br.idfsGISReferenceType = 19000003 THEN
                                                         10089003
                                                     WHEN br.idfsGISReferenceType = 19000002 THEN
                                                         10089002
                                                     WHEN br.idfsGISReferenceType = 19000004 THEN
                                                         10089004
                                                 END
            LEFT JOIN dbo.trtStringNameTranslation AS per
                ON per.idfsBaseReference = CASE
                                               WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091002 /* Day */
                                               WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                   10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                               WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091001 /* Month */
                                               WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091003 /* Quarter */
                                               WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091005 /* Year */
                                           END
                   AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND ac.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID
              AND (
                      ac.idfsAggrCaseType = @AggregateReportTypeID
                      OR @AggregateReportTypeID IS NULL
                  )
              AND (
                      ac.idfSentByOffice = @OrganizationID
                      OR @OrganizationID IS NULL
                  )
              AND (
                      AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
                      OR @AdministrativeUnitTypeID IS NULL
                  )
              AND (
                      per.idfsBaseReference = @TimeIntervalTypeID
                      OR @TimeIntervalTypeID IS NULL
                  )
              AND (
                      ac.datStartDate >= @StartDate
                      OR @StartDate IS NULL
                  )
              AND (
                      ac.datFinishDate <= @EndDate
                      OR @EndDate IS NULL
                  )
              AND (CASE
                       WHEN @AdministrativeUnitID IS NULL THEN
                           1
                       WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                            OR (
                                   ac.idfOffice = @AdministrativeUnitID
                                   AND @AdministrativeUnitTypeID = 10089005
                               ) THEN
                           1
                       ELSE
                           0
                   END = 1
                  )
              AND (
                      ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = ac.idfsSite
        )
        GROUP BY ac.idfAggrCase,
                 ac.idfsSite;

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ac.idfAggrCase
            FROM dbo.tlbAggrCase ac
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = ac.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY res.ID;

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ac.strCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ac.strCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ac.datStartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ac.datStartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TimeIntervalUnitTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       per.strTextString
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TimeIntervalUnitTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       per.strTextString
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SettlementName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel4Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SettlementName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel4Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OrganizationAdministrativeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       organizationAdminUnit.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OrganizationAdministrativeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       organizationAdminUnit.name
                                               END DESC
                                     ) AS ROWNUM,
                   res.ID AS ReportKey,
                   ac.strCaseID AS ReportID,
                   receivedByOrganization.name AS ReceivedByOrganizationName,
                   sentByOrganization.name AS SentByOrganizationName,
                   enteredByOrganization.name AS EnteredByOrganizationName,
                   ac.datReceivedByDate AS ReceivedByDate,
                   ac.datSentByDate AS SentByDate,
                   ac.datStartDate AS StartDate,
                   ac.datFinishDate AS EndDate,
                   AdminUnit.strDefault AS AdministrativeUnitTypeName,
                   lh.AdminLevel2Name AS AdministrativeLevel1Name,
                   lh.AdminLevel3Name AS AdministrativeLevel2Name,
                   lh.AdminLevel4Name AS SettlementName,
                   organizationAdminUnit.name AS OrganizationAdministrativeName,
                   per.strTextString AS TimeIntervalUnitTypeName,
                   ac.idfsSite AS SiteID,
                   res.ReadPermissionIndicator AS ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator AS AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator AS AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator AS WritePermissionIndicator,
                   res.DeletePermissionIndicator AS DeletePermissionIndicator,
                   0 AS RowSelectionIndicator,
                   COUNT(*) OVER () AS RecordCount,
                   (
                       SELECT COUNT(*)
                       FROM dbo.tlbAggrCase
                       WHERE intRowStatus = 0
                             AND idfsAggrCaseType = @AggregateReportTypeID
                   ) AS TotalCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbAggrCase ac
                    ON ac.idfAggrCase = res.ID
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) receivedByOrganization
                    ON ac.idfReceivedByOffice = receivedByOrganization.idfOffice
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) enteredByOrganization
                    ON ac.idfEnteredByOffice = enteredByOrganization.idfOffice
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) sentByOrganization
                    ON ac.idfSentByOffice = sentByOrganization.idfOffice
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ac.idfsAdministrativeUnit
                INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) organizationAdminUnit
                    ON ac.idfOffice = organizationAdminUnit.idfOffice
                LEFT JOIN dbo.trtBaseReference adminUnit
                    ON adminUnit.idfsBaseReference = CASE
                                                         WHEN NOT ac.idfOffice IS NULL THEN
                                                             10089005
                                                         WHEN NOT lh.AdminLevel4ID IS NULL THEN
                                                             10089004
                                                         WHEN NOT lh.AdminLevel3ID IS NULL THEN
                                                             10089002
                                                         WHEN NOT lh.AdminLevel2ID IS NULL THEN
                                                             10089003
                                                         WHEN NOT lh.AdminLevel1Id IS NULL THEN
                                                             10089001
                                                     END
                LEFT JOIN dbo.trtStringNameTranslation per
                    ON per.idfsBaseReference = CASE
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091002 /* Day */
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                       10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                                   WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091001 /* Month */
                                                   WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091003 /* Quarter */
                                                   WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091005 /* Year */
                                               END
                       AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
           )
        SELECT ReportKey,
               ReportID,
               ReceivedByOrganizationName,
               SentByOrganizationName,
               EnteredByOrganizationName,
               ReceivedByDate,
               SentByDate,
               StartDate,
               EndDate,
               AdministrativeUnitTypeName,
               AdministrativeLevel1Name,
               AdministrativeLevel2Name,
               SettlementName,
               OrganizationAdministrativeName,
               TimeIntervalUnitTypeName,
               SiteID,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               RowSelectionIndicator,
               RecordCount,
               TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0)
        FROM paging
        WHERE ReadPermissionIndicator IN ( 1, 3, 5 )
              AND RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_AS_CAMPAIGN_GETList]...';


GO
-- ================================================================================================
-- Name: USP_AS_CAMPAIGN_GETList
--
-- Description: Gets data for active surveillance campaign search for the human module.
--          
-- Revision History:
-- Name                    Date       Change Detail
-- ----------------------- ---------- ------------------------------------------------------------
-- Stephen Long            07/06/2019 Initial release.
-- Stephen Long            01/26/2020 Added site list parameter for site filtration.
-- Ann Xiong		       02/19/2020 Added script to search by Region and Rayon
-- Stephen Long            05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long            06/18/2020 Added where criteria to the query when no site filtration is 
--                                    required.
-- Stephen Long            07/07/2020 Added trim to EIDSS identifier like criteria.
-- Stephen Long            11/18/2020 Added site ID to the query.
-- Stephen Long            11/27/2020 Added configurable site filtration rules.
-- Stephen Long            12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long            12/14/2020 Corrected where criteria on site list in the final query.
-- Stephen Long            12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long            12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long            04/08/2021 Added updated pagination and location hierarchy.
-- Mark Wilson		       08/10/2021 Added join to tlbCampaignToDiagnosis to pull diagnosis
-- Mark Wilson		       08/26/2021 Added Select Distinct to remove dupes
-- Mark Wilson		       08/27/2021 Added @CampaignTypeID to total count
-- Mark Wilson		       02/22/2022 Renamed from USP_HAS_CAMPAIGN_GETList and added 
--                                    @CampaignCategoryID to support both human and vet campaigns
-- Mark Wilson             02/23/2022 removed parm @AdministrativeLevelID, redo paging and sorting
-- Manickandan Govindrajan 05/12/2022 Fixed the start and End date condition
-- Stephen Long            01/09/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_AS_CAMPAIGN_GETList]
(
    @LanguageID AS NVARCHAR(50),
    @CampaignID AS NVARCHAR(200) = NULL,
    @LegacyCampaignID AS NVARCHAR(200) = NULL,
    @CampaignName AS NVARCHAR(200) = NULL,
    @CampaignTypeID AS BIGINT = NULL,
    @CampaignStatusTypeID AS BIGINT = NULL,
    @CampaignCategoryID AS BIGINT,
    @StartDateFrom AS DATETIME = NULL,
    @StartDateTo AS DATETIME = NULL,
    @DiseaseID AS BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'CampaignID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @Page INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
    DECLARE @firstRec INT
    DECLARE @lastRec INT

    IF @pagesize = 0
    BEGIN
        SET @pagesize = 1;
    END

    SET @firstRec = (@page - 1) * @pagesize
    SET @lastRec = (@page * @pageSize + 1)
    BEGIN TRY

        DECLARE @Results TABLE
        (
            ID BIGINT NOT NULL,
            ReadPermissionIndicator INT NOT NULL,
            AccessToPersonalDataPermissionIndicator INT NOT NULL,
            AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
            WritePermissionIndicator INT NOT NULL,
            DeletePermissionIndicator INT NOT NULL
        );
        DECLARE @FinalResults TABLE
        (
            ID BIGINT NOT NULL,
            ReadPermissionIndicator INT NOT NULL,
            AccessToPersonalDataPermissionIndicator INT NOT NULL,
            AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
            WritePermissionIndicator INT NOT NULL,
            DeletePermissionIndicator INT NOT NULL
        );
        DECLARE @UserSitePermissions TABLE
        (
            SiteID BIGINT NOT NULL,
            PermissionTypeID BIGINT NOT NULL,
            Permission INT NOT NULL
        );
        DECLARE @UserGroupSitePermissions TABLE
        (
            SiteID BIGINT NOT NULL,
            PermissionTypeID BIGINT NOT NULL,
            Permission INT NOT NULL
        );

        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @Results
        SELECT DISTINCT
            C.idfCampaign,
            1,
            1,
            1,
            1,
            1
        FROM dbo.tlbCampaign C
            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                ON cd.idfCampaign = C.idfCampaign
            LEFT JOIN dbo.tstSite s
                ON s.idfsSite = c.idfsSite
                   AND s.intRowStatus = 0
            LEFT JOIN dbo.tlbOffice o
                ON s.idfOffice = o.idfOffice
                   AND o.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocationShared gl
                ON o.idfLocation = gl.idfGeoLocationShared
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = gl.idfsLocation
                   AND g.idfsLanguage = @idfsLanguage
        WHERE c.intRowStatus = 0
              AND c.CampaignCategoryID = @CampaignCategoryID
              AND (
                      (
                          c.idfsSite = @UserSiteID
                          AND @ApplySiteFiltrationIndicator = 1
                      )
                      OR (
                             (@UserSiteID IS NULL)
                             OR (@ApplySiteFiltrationIndicator = 0)
                         )
                  )
              AND (
                      c.strCampaignName LIKE '%' + TRIM(@CampaignName) + '%'
                      OR @CampaignName IS NULL
                  )
              AND (
                      c.idfsCampaignType = @CampaignTypeID
                      OR @CampaignTypeID IS NULL
                  )
              AND (
                      c.idfsCampaignStatus = @CampaignStatusTypeID
                      OR @CampaignStatusTypeID IS NULL
                  )
              AND (
                      cd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      (
                          (c.datCampaignDateStart
              BETWEEN @StartDateFrom AND @StartDateTo
                          )
                          OR (@StartDateFrom IS NULL)
                      )
                      OR (
                             (c.datCampaignDateEnd
              BETWEEN @StartDateFrom AND @StartDateTo
                             )
                             OR (@StartDateTo IS NULL)
                         )
                  )
              AND (
                      c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                      OR @CampaignID IS NULL
                  )
              AND (
                      c.LegacyCampaignID LIKE '%' + TRIM(@LegacyCampaignID) + '%'
                      OR @LegacyCampaignID IS NULL
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        IF @ApplySiteFiltrationIndicator = 1
        BEGIN
            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = c.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = c.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = c.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = c.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND sgs.idfsSite = c.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteID = c.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteID = c.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT c.idfCampaign,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE c.intRowStatus = 0
                  AND a.GrantingActorSiteID = c.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT DISTINCT
                f.ID,
                f.ReadPermissionIndicator,
                f.AccessToPersonalDataPermissionIndicator,
                f.AccessToGenderAndAgeDataPermissionIndicator,
                f.WritePermissionIndicator,
                f.DeletePermissionIndicator
            FROM @FilteredResults f
                INNER JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = f.ID
                INNER JOIN dbo.tlbCampaignToDiagnosis cd
                    ON cd.idfCampaign = C.idfCampaign
                       AND cd.intRowStatus = 0
                LEFT JOIN dbo.tstSite s
                    ON s.idfsSite = c.idfsSite
                       AND s.intRowStatus = 0
                LEFT JOIN dbo.tlbOffice o
                    ON s.idfOffice = o.idfOffice
                       AND o.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocationShared gl
                    ON o.idfLocation = gl.idfGeoLocationShared
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = gl.idfsLocation
                       AND g.idfsLanguage = @LanguageID
            WHERE c.CampaignCategoryID = @CampaignCategoryID -- Human Active Surveillance Campaign
                  AND (
                          c.strCampaignName LIKE '%' + TRIM(@CampaignName) + '%'
                          OR @CampaignName IS NULL
                      )
                  AND (
                          c.idfsCampaignType = @CampaignTypeID
                          OR @CampaignTypeID IS NULL
                      )
                  AND (
                          c.idfsCampaignStatus = @CampaignStatusTypeID
                          OR @CampaignStatusTypeID IS NULL
                      )
                  AND (
                          cd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          (
                              (c.datCampaignDateStart
                  BETWEEN @StartDateFrom AND @StartDateTo
                              )
                              OR (@StartDateFrom IS NULL)
                          )
                          OR (
                                 (c.datCampaignDateEnd
                  BETWEEN @StartDateFrom AND @StartDateTo
                                 )
                                 OR (@StartDateTo IS NULL)
                             )
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          c.LegacyCampaignID LIKE '%' + TRIM(@LegacyCampaignID) + '%'
                          OR @LegacyCampaignID IS NULL
                      )
                  AND f.ID NOT IN (
                                      SELECT ID FROM @Results
                                  );
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT C.idfCampaign
                        FROM dbo.tlbCampaign c
                            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                                ON cd.idfCampaign = c.idfCampaign
                                   AND cd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = cd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE c.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT DISTINCT
            c.idfCampaign,
            1,
            1,
            1,
            1,
            1
        FROM dbo.tlbCampaign c
            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                ON cd.idfCampaign = c.idfCampaign
                   AND cd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = cd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND c.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbCampaign C
                ON C.idfCampaign = ID
            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                ON cd.idfCampaign = C.idfCampaign
                   AND cd.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = cd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT DISTINCT
            c.idfCampaign,
            1,
            1,
            1,
            1,
            1
        FROM dbo.tlbCampaign c
            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                ON cd.idfCampaign = c.idfCampaign
                   AND cd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = cd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND c.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID;

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT c.idfCampaign
                        FROM dbo.tlbCampaign c
                            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                                ON cd.idfCampaign = c.idfCampaign
                                   AND cd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = cd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE c.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = @UserEmployeeID
                    );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT c.idfCampaign
            FROM dbo.tlbCampaign c
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = c.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE c.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT DISTINCT
            c.idfCampaign,
            (
                SELECT Permission
                FROM @UserGroupSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059003
            ),
            (
                SELECT Permission
                FROM @UserGroupSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059006
            ),
            (
                SELECT Permission
                FROM @UserGroupSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059007
            ),
            (
                SELECT Permission
                FROM @UserGroupSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059004
            ),
            (
                SELECT Permission
                FROM @UserGroupSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059002
            )
        FROM dbo.tlbCampaign c
        WHERE c.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = c.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = c.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT DISTINCT
            c.idfCampaign,
            (
                SELECT Permission
                FROM @UserSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059003
            ),
            (
                SELECT Permission
                FROM @UserSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059006
            ),
            (
                SELECT Permission
                FROM @UserSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059007
            ),
            (
                SELECT Permission
                FROM @UserSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059004
            ),
            (
                SELECT Permission
                FROM @UserSitePermissions
                WHERE SiteID = c.idfsSite
                      AND PermissionTypeID = 10059002
            )
        FROM dbo.tlbCampaign c
            INNER JOIN dbo.tlbCampaignToDiagnosis cd
                ON cd.idfCampaign = c.idfCampaign
                   AND cd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = c.idfsSite
                   AND oa.intRowStatus = 0
        WHERE c.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = c.idfsSite
        );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT c.idfCampaign
                        FROM dbo.tlbCampaign c
                            INNER JOIN @UserSitePermissions usp
                                ON usp.SiteID = c.idfsSite
                        WHERE usp.Permission = 4 -- Deny permission
                              AND usp.PermissionTypeID = 10059003 -- Read permission
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT res.ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY res.ID;

        WITH paging
        AS (SELECT DISTINCT
                c.idfCampaign,
                (
                    SELECT dbo.FN_GBL_Campaign_Disease_Names_GET(C.idfCampaign, @LanguageID)
                ) AS DiseaseList,
                SpeciesList = STUFF(
                                       (
                                           SELECT ', ' + speciesType.name
                                           FROM dbo.tlbCampaignToDiagnosis CD
                                               INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) AS speciesType
                                                   ON speciesType.idfsReference = CD.idfsSpeciesType
                                           WHERE CD.idfCampaign = c.idfCampaign
                                           GROUP BY speciesType.name
                                           FOR XML PATH(''), TYPE
                                       ).value('.[1]', 'NVARCHAR(MAX)'),
                                       1,
                                       2,
                                       ''
                                   ),
                SampleTypesList = STUFF(
                                           (
                                               SELECT ', ' + sampleType.name
                                               FROM dbo.tlbCampaignToDiagnosis CD
                                                   INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) AS sampleType
                                                       ON sampleType.idfsReference = CD.idfsSampleType
                                               WHERE CD.idfCampaign = c.idfCampaign
                                               GROUP BY sampleType.name
                                               FOR XML PATH(''), TYPE
                                           ).value('.[1]', 'NVARCHAR(MAX)'),
                                           1,
                                           2,
                                           ''
                                       ),
                campaignType.name AS CampaignTypeName,
                campaignStatus.name AS CampaignStatus,
                c.strCampaignID,
                c.strCampaignName,
                c.datCampaignDateStart,
                c.idfsSite,
                c.datCampaignDateEnd,
                c.strCampaignAdministrator,
                c.AuditCreateDTM,
                c.CampaignCategoryID
            FROM dbo.tlbCampaign c
                LEFT JOIN dbo.tlbCampaignToDiagnosis cd
                    ON cd.idfCampaign = c.idfCampaign
                INNER JOIN @FinalResults res
                    ON c.idfCampaign = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000115) campaignStatus
                    ON c.idfsCampaignStatus = campaignStatus.idfsReference
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000116) campaignType
                    ON c.idfsCampaignType = campaignType.idfsReference
            WHERE c.CampaignCategoryID = @CampaignCategoryID
                  AND c.intRowStatus = 0
                  AND (
                          (
                              c.idfsSite = @UserSiteID
                              AND @ApplySiteFiltrationIndicator = 1
                          )
                          OR (
                                 (@UserSiteID IS NULL)
                                 OR (@ApplySiteFiltrationIndicator = 0)
                             )
                      )
                  AND (
                          c.strCampaignName LIKE '%' + TRIM(@CampaignName) + '%'
                          OR @CampaignName IS NULL
                      )
                  AND (
                          c.idfsCampaignType = @CampaignTypeID
                          OR @CampaignTypeID IS NULL
                      )
                  AND (
                          c.idfsCampaignStatus = @CampaignStatusTypeID
                          OR @CampaignStatusTypeID IS NULL
                      )
                  AND (
                          cd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          (
                              (c.datCampaignDateStart
                  BETWEEN @StartDateFrom AND @StartDateTo
                              )
                              OR (@StartDateFrom IS NULL)
                          )
                          OR (
                                 (c.datCampaignDateEnd
                  BETWEEN @StartDateFrom AND @StartDateTo
                                 )
                                 OR (@StartDateTo IS NULL)
                             )
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          c.LegacyCampaignID LIKE '%' + TRIM(@LegacyCampaignID) + '%'
                          OR @LegacyCampaignID IS NULL
                      )
           ),
             paging_final
        AS (SELECT DISTINCT
                paging.idfCampaign,
                paging.DiseaseList,
                paging.SpeciesList,
                paging.SampleTypesList,
                paging.CampaignTypeName,
                paging.CampaignStatus,
                paging.strCampaignID,
                paging.strCampaignName,
                paging.datCampaignDateStart,
                paging.idfsSite,
                paging.datCampaignDateEnd,
                paging.strCampaignAdministrator,
                paging.AuditCreateDTM,
                paging.CampaignCategoryID,
                c = COUNT(*) OVER (),
                ROW_NUMBER() OVER (ORDER BY CASE
                                                WHEN @SortColumn = 'CampaignID'
                                                     AND @SortOrder = 'ASC' THEN
                                                    paging.strCampaignID
                                            END ASC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignID'
                                                     AND @SortOrder = 'DESC' THEN
                                                    paging.strCampaignID
                                            END DESC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignName'
                                                     AND @SortOrder = 'ASC' THEN
                                                    paging.strCampaignName
                                            END ASC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignName'
                                                     AND @SortOrder = 'DESC' THEN
                                                    paging.strCampaignName
                                            END DESC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignTypeName'
                                                     AND @SortOrder = 'ASC' THEN
                                                    paging.CampaignTypeName
                                            END ASC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignTypeName'
                                                     AND @SortOrder = 'DESC' THEN
                                                    paging.CampaignTypeName
                                            END DESC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignStatusTypeName'
                                                     AND @SortOrder = 'ASC' THEN
                                                    paging.CampaignStatus
                                            END ASC,
                                            CASE
                                                WHEN @SortColumn = 'CampaignStatusTypeName'
                                                     AND @SortOrder = 'DESC' THEN
                                                    paging.CampaignStatus
                                            END DESC,
                                            CASE
                                                WHEN @SortColumn = '"CampaignStartDate'
                                                     AND @SortOrder = 'ASC' THEN
                                                    paging.datCampaignDateStart
                                            END ASC,
                                            CASE
                                                WHEN @SortColumn = '"CampaignStartDate'
                                                     AND @SortOrder = 'DESC' THEN
                                                    paging.datCampaignDateStart
                                            END DESC,
                                            CASE
                                                WHEN @SortColumn = 'DiseaseName'
                                                     AND @SortOrder = 'ASC' THEN
                                                    paging.DiseaseList
                                            END ASC,
                                            CASE
                                                WHEN @SortColumn = 'DiseaseName'
                                                     AND @SortOrder = 'DESC' THEN
                                                    paging.DiseaseList
                                            END DESC
                                  ) AS RowNo
            FROM paging
           )
        SELECT p.idfCampaign AS CampaignKey,
               p.strCampaignID AS CampaignID,
               p.CampaignTypeName,
               p.CampaignStatus AS CampaignStatusTypeName,
               p.DiseaseList,
               p.SpeciesList,
               p.SampleTypesList,
               p.datCampaignDateStart AS CampaignStartDate,
               p.datCampaignDateEnd AS CampaignEndDate,
               p.strCampaignName AS CampaignName,
               p.strCampaignAdministrator AS CampaignAdministrator,
               p.AuditCreateDTM AS EnteredDate,
               p.idfsSite AS SiteID,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               p.c AS TotalRowCount,
               (
                   SELECT COUNT(*)
                   FROM dbo.tlbCampaign
                   WHERE intRowStatus = 0
                         AND CampaignCategoryID = @CampaignCategoryID -- Human/Veterinary Active Surveillance Campaign
                         AND idfsCampaignType = @CampaignTypeID
               ) AS TotalCount,
               CurrentPage = @Page,
               TotalPages = (p.c / @PageSize) + IIF(p.c % @PageSize > 0, 1, 0)
        FROM paging_final p
            LEFT JOIN @FinalResults res
                ON p.idfCampaign = res.ID
            INNER JOIN dbo.tstSite s
                ON s.idfsSite = p.idfsSite
        WHERE p.CampaignCategoryID = @CampaignCategoryID
        ORDER BY p.RowNo OFFSET @PageSize * (@Page - 1) ROWS FETCH NEXT @PageSize ROWS ONLY;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL]...';


GO
--=================================================================================================
-- Name: USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL
--
-- Description: Removes sample type derivative matrix record
--							
-- Author:		unknown
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Leo Tracchia		02/22/2023 Added data audit logic for deletes
--
-- Test Code:
-- exec USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL 6618200000000, 0
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL]
(
	@idfDerivativeForSampleType BIGINT,
	@deleteAnyway BIT = 0,
	@SiteId BIGINT,
    @UserId BIGINT
)

AS

DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
DECLARE @returnCode					BIGINT = 0;

BEGIN
	BEGIN TRY

		DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
		
		--Begin: Data Audit--	

			DECLARE @idfUserId BIGINT = @UserId;
			DECLARE @idfSiteId BIGINT = @SiteId;
			DECLARE @idfsDataAuditEventType bigint = NULL;
			DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
			DECLARE @idfObject bigint = @idfDerivativeForSampleType;
			DECLARE @idfObjectTable_trtDerivativeForSampleType bigint = 740850000000;					
			DECLARE @idfDataAuditEvent bigint = NULL;	

			-- tauDataAuditEvent Event Type - Delete 
			set @idfsDataAuditEventType = 10016002;
			
		--End: Data Audit--	
		
		UPDATE trtDerivativeForSampleType SET intRowStatus = 1 WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType
		
		--Begin: Data Audit, trtDiagnosis--				

			-- insert record into tauDataAuditEvent - 
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtDerivativeForSampleType, @idfDataAuditEvent OUTPUT

			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
			VALUES (@idfDataAuditEvent, @idfObjectTable_trtDerivativeForSampleType, @idfObject)

		--End: Data Audit, trtDiagnosis--		

		SELECT @returnCode 'returnCode', @returnMsg 'returnMessage'

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET
--
-- Description:	Creates/updates a sample type/derivative type matrix.
--
-- Author: Unknown
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/13/2022 Added site alert logic and documentation header.
-- Leo Tracchia		02/22/2023 Added new logic for data auditing
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET]
(
    @idfDerivativeForSampleType BIGINT = NULL,
    @idfsSampleType BIGINT,
    @idfsDerivativeType BIGINT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS

DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @ReturnCode BIGINT = 0,
        @EventId BIGINT = -1,
        @EventSiteId BIGINT = @SiteId,
        @EventUserId BIGINT = @UserId,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = @LocationId,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = @SiteId;

DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);

--Data Audit--

	DECLARE @idfUserId BIGINT = NULL;
	DECLARE @idfSiteId BIGINT = NULL;
	DECLARE @idfsDataAuditEventType bigint = NULL;
	DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
	DECLARE @idfObject bigint = @idfDerivativeForSampleType;
	DECLARE @idfObjectTable_trtDerivativeForSampleType bigint = 740850000000;		
	DECLARE @idfDataAuditEvent bigint = NULL;		

	DECLARE @trtDerivativeForSampleType_BeforeEdit TABLE
	(
		idfDerivativeForSampleType bigint,
        idfsSampleType bigint,
        idfsDerivativeType bigint,
        intRowStatus int                
	)

	DECLARE @trtDerivativeForSampleType_AfterEdit TABLE
	(
		idfDerivativeForSampleType bigint,
        idfsSampleType bigint,
        idfsDerivativeType bigint,
        intRowStatus int                
	)

	-- Get and Set UserId and SiteId
	SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo

--Data Audit--

BEGIN  
	
	BEGIN TRY
        IF ( -- DUPLICATE CHECK
               EXISTS
        (
            SELECT idfDerivativeForSampleType
            FROM dbo.trtDerivativeForSampleType
            WHERE idfsDerivativeType = @idfsDerivativeType
                  AND idfsSampleType = @idfsSampleType
                  AND intRowStatus = 0
        )
               AND @idfDerivativeForSampleType IS NULL
           )
           OR (
                  EXISTS
        (
            SELECT idfDerivativeForSampleType
            FROM dbo.trtDerivativeForSampleType
            WHERE idfsDerivativeType = @idfsDerivativeType
                  AND idfsSampleType = @idfsSampleType
                  AND idfDerivativeForSampleType <> @idfDerivativeForSampleType
                  AND intRowStatus = 0
        )
                  AND @idfDerivativeForSampleType IS NOT NULL
              )
        BEGIN
            SELECT @ReturnCode = 1;
            SELECT @ReturnMessage = 'DOES EXIST';
            SELECT @idfDerivativeForSampleType =
            (
                SELECT idfDerivativeForSampleType
                FROM dbo.trtDerivativeForSampleType
                WHERE idfsDerivativeType = @idfsDerivativeType
                      AND idfsSampleType = @idfsSampleType
                      AND intRowStatus = 0
            );
        END
        ELSE IF ( -- UPDATE
                    EXISTS
             (
                 SELECT idfDerivativeForSampleType
                 FROM dbo.trtDerivativeForSampleType
                 WHERE idfsDerivativeType = @idfsDerivativeType
                       AND idfsSampleType = @idfsSampleType
                       AND intRowStatus = 1
             )
                    AND @idfDerivativeForSampleType IS NULL
                )
        BEGIN
            UPDATE dbo.trtDerivativeForSampleType
            SET intRowStatus = 0, 
                AuditUpdateDTM = GETDATE(), 
                AuditUpdateUser = @AuditUserName 
            WHERE idfsDerivativeType = @idfsDerivativeType
                  AND idfsSampleType = @idfsSampleType
                  AND intRowStatus = 1;

            SELECT @idfDerivativeForSampleType =
            (
                SELECT idfDerivativeForSampleType
                FROM dbo.trtDerivativeForSampleType
                WHERE idfsDerivativeType = @idfsDerivativeType
                      AND idfsSampleType = @idfsSampleType
                      AND intRowStatus = 1
            );
        END
        ELSE IF ( -- UPDATE
                    EXISTS
             (
                 SELECT idfDerivativeForSampleType
                 FROM dbo.trtDerivativeForSampleType
                 WHERE idfsDerivativeType = @idfsDerivativeType
                       AND idfsSampleType = @idfsSampleType
                       AND idfDerivativeForSampleType = @idfDerivativeForSampleType
                       AND intRowStatus = 0
             )
                    AND @idfDerivativeForSampleType IS NOT NULL
                )
        BEGIN

			--DataAudit-- 
				
				--  tauDataAuditEvent  Event Type - Edit 
				set @idfsDataAuditEventType = 10016003;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfDerivativeForSampleType, @idfObjectTable_trtDerivativeForSampleType, @idfDataAuditEvent OUTPUT

			--DataAudit-- 

			INSERT INTO @trtDerivativeForSampleType_BeforeEdit (
				idfDerivativeForSampleType, 
				idfsSampleType,
				idfsDerivativeType,
				intRowStatus)
			SELECT 
				idfDerivativeForSampleType, 
				idfsSampleType,
				idfsDerivativeType,
				intRowStatus			
				FROM trtDerivativeForSampleType WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType;

            UPDATE dbo.trtDerivativeForSampleType
            SET idfsDerivativeType = @idfsDerivativeType,
                idfsSampleType = @idfsSampleType, 
                AuditUpdateDTM = GETDATE(), 
                AuditUpdateUser = @AuditUserName
            WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType
                  AND intRowStatus = 0;

			INSERT INTO @trtDerivativeForSampleType_AfterEdit (
				idfDerivativeForSampleType, 
				idfsSampleType,
				idfsDerivativeType,
				intRowStatus)
			SELECT 
				idfDerivativeForSampleType, 
				idfsSampleType,
				idfsDerivativeType,
				intRowStatus			
				FROM trtDerivativeForSampleType WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType;

			--idfsSampleType
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_trtDerivativeForSampleType, 
				740870000000,
				a.idfDerivativeForSampleType,
				null,
				a.idfsSampleType,
				b.idfsSampleType 
			from @trtDerivativeForSampleType_BeforeEdit a  inner join @trtDerivativeForSampleType_AfterEdit b on a.idfDerivativeForSampleType = b.idfDerivativeForSampleType
			where (a.idfsSampleType <> b.idfsSampleType) 
				or(a.idfsSampleType is not null and b.idfsSampleType is null)
				or(a.idfsSampleType is null and b.idfsSampleType is not null)

			--idfsDerivativeType
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_trtDerivativeForSampleType, 
				740880000000,
				a.idfDerivativeForSampleType,
				null,
				a.idfsDerivativeType,
				b.idfsDerivativeType 
			from @trtDerivativeForSampleType_BeforeEdit a  inner join @trtDerivativeForSampleType_AfterEdit b on a.idfDerivativeForSampleType = b.idfDerivativeForSampleType
			where (a.idfsDerivativeType <> b.idfsDerivativeType) 
				or(a.idfsDerivativeType is not null and b.idfsDerivativeType is null)
				or(a.idfsDerivativeType is null and b.idfsDerivativeType is not null)

        END
        ELSE
        BEGIN --INSERT
            INSERT INTO @SuppressSelect
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'trtDerivativeForSampleType',
                                           @idfDerivativeForSampleType OUTPUT;

			--Data Audit--

				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType = 10016001;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfDerivativeForSampleType, @idfObjectTable_trtDerivativeForSampleType, @idfDataAuditEvent OUTPUT

			--Data Audit--

            INSERT INTO dbo.trtDerivativeForSampleType
            (
                idfDerivativeForSampleType,
                idfsSampleType,
                idfsDerivativeType,
                intRowStatus,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@idfDerivativeForSampleType, @idfsSampleType, @idfsDerivativeType, 0, GETDATE(), @AuditUserName);

			--Data Audit--							

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtDerivativeForSampleType, @idfDerivativeForSampleType)
			
			--Data Audit--

            INSERT INTO dbo.trtDerivativeForSampleTypeToCP
            (
                idfDerivativeForSampleType,
                idfCustomizationPackage,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@idfDerivativeForSampleType, dbo.FN_GBL_CustomizationPackage_GET(), GETDATE(), @AuditUserName);
        END

        INSERT INTO @SuppressSelect 
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfDerivativeForSampleType,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @idfDerivativeForSampleType 'idfDerivativeForSampleType';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_EMPLOYEE_GROUP_GETList]...';


GO




-- ============================================================================
-- Name: USP_GBL_EMPLOYEE_GROUP_GETList
-- Description:	Get employee group list for verifying user permissions.
--                      
-- Author: Stephen Long
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Stephen Long     04/30/2018 Initial release.
-- Stephen Long     10/03/2019 Stored procedure clean up.
-- Stephen Long		03/10/2020 Resolved duplicate role appearances
-- Mark Wilson		01/30/2021 Updated to filter intRowStatus = 1
-- Mark Wilson		05/17/2022 Updated to find idfsSite for CDR
-- Mani Govindarajan 02/4/2023 Commented get user group from CDR.
-- Mani Govindarajan 03/02/2023 Added intRowStatus Condition on groupName
-- exec USP_GBL_EMPLOYEE_GROUP_GETList 'en'
-- ============================================================================
ALTER PROCEDURE [dbo].[USP_GBL_EMPLOYEE_GROUP_GETList] (
@LangID NVARCHAR(50),
@idfsSite BIGINT
)
AS
BEGIN
	DECLARE @returnMsg VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode BIGINT = 0;
	--DECLARE @SupressSelect TABLE (
	--	retrunCode INT,
	--	returnMessage VARCHAR(200)
	--	)

	BEGIN TRY

---------------------------------------------------------------------------------
		--DECLARE @CDRSite BIGINT -- idfsSite for CDR
		--SELECT 
		--	@CDRSite = S.idfsSite
		--FROM dbo.tstSite S
		--INNER JOIN dbo.trtBaseReference SR ON SR.idfsBaseReference = S.idfsSiteType
		--WHERE S.intRowStatus = 0 
		--AND SR.strDefault = 'CDR'
		--		order by s.idfsSite desc

---------------------------------------------------------------------------------

		SELECT eg.idfEmployeeGroup,
			eg.idfsEmployeeGroupName,
			ISNULL(groupName.name, eg.strName) AS strName,
			eg.strDescription
		FROM dbo.tlbEmployeeGroup eg

		LEFT JOIN FN_GBL_ReferenceRepair_GET(@LangID, 19000022) groupName
			ON groupName.idfsReference = eg.idfsEmployeeGroupName
		WHERE 
			eg.idfEmployeeGroup <> - 1
			AND eg.intRowStatus = 0
			and groupName.intRowStatus=0
			AND		((eg.idfsSite =  @idfsSite OR @idfsSite IS NULL)
			AND eg.idfEmployeeGroup != -506 and eg.idfsEmployeeGroupName != -506
			--OR (eg.idfsSite = @CDRSite)
			)

	    ORDER BY strName;

	--	SELECT @returnCode,
		--	@returnMsg;
	END TRY

	BEGIN CATCH
		--BEGIN
			--SET @returnCode = ERROR_NUMBER();
			--SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();

			--SELECT @returnCode,
				--@returnMsg;
		--END
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_GIS_Location_ChildLevel_Get]...';


GO
-- *************************************************************************************************
-- Name: USP_GBL_GIS_Location_Level_Get
--
-- Description: To get the Administrative Child Level List for the selected Parent List.
--
-- Revision History:
-- Name				Date		Change Detail
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		03/31/2021	Initial release.
-- Mark Wilson		10/04/2021	Changed to dbo functions
--  Mani			01/20/2022	added order by
--  Mani			01/05/2023 added introwstatus =0 condition
-- Testing code:
/*
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'en-US', 0										-- If You select zero(Nothing) in parenet level return zero
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'en-US' 											-- Administrative Level 1 --Region --Default Setup Country
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'en-US','170000000'								-- Administrative Level 1 --Region --Default Setup Country
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'ru-RU', '1344330000000'							-- Administrative Level 2 --Rayon
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'en-US', '1344330000000,1344340000000'			-- Administrative Level 2 --Rayon
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'az-Latn-AZ', 1344490000000							-- Administrative Level 3 --Settlement
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'en-US', 1344490000000							-- Administrative Level 3 --Settlement

 Administrative Levels 5, 6, and 7 have not been integrated.

*/
-- ************************************************************************************************

ALTER PROCEDURE [dbo].[USP_GBL_GIS_Location_ChildLevel_Get]
(
	@LangID NVARCHAR(10),
	@Parent_idfsReference AS NVARCHAR(MAX) = NULL
)
AS
	DECLARE @CountryNode HIERARCHYID,
			@ParentNode HIERARCHYID,
			@Country_idfsLocation AS BIGINT
			
	DECLARE @Parent_idfsReferenceTable	TABLE
		(
				idfsReference BIGINT		
		)

	DECLARE @Parent_NodeTable	TABLE
			(
					node HIERARCHYID		
			)
	SELECT	
		@CountryNode = node,
		@Country_idfsLocation=idfsLocation 
	FROM dbo.gisLocation 
	WHERE idfsLocation = dbo.FN_GBL_CURRENTCOUNTRY_GET() and intRowStatus=0
	
	IF (@Parent_idfsReference IS NULL) SET @Parent_idfsReference = CAST(@Country_idfsLocation AS NVARCHAR(50))
		

	INSERT INTO @Parent_idfsReferenceTable 
	SELECT CAST([Value] AS BIGINT) FROM dbo.FN_GBL_SYS_SplitList(@Parent_idfsReference,1,',')

	INSERT INTO @Parent_nodeTable 
	SELECT l.node AS ParentNode
	FROM dbo.gisLocation l
	INNER JOIN dbo.gisBaseReference br ON br.idfsGISBaseReference=l.idfsLocation
	WHERE idfsGISBaseReference IN (SELECT idfsReference FROM @Parent_idfsReferenceTable) and br.intRowStatus=0
	
	IF @Parent_idfsReference='0' 
		SELECT TOP 1
			l.node.GetLevel() AS Level,
			br.idfsGISReferenceType, 
			ISNULL(lang.Name,rt.strGISReferenceTypeName) AS strGISReferenceTypeName,
			br.idfsGISBaseReference AS idfsReference,
			ISNULL(snt.strTextString, br.strDefault) [Name],
			--l.Node,
			l.node.ToString() strNode,
			l.strHASC,
			l.strCode,
			l.idfsType LevelType

		FROM dbo.gisBaseReference AS br 
		INNER JOIN dbo.gisStringNameTranslation AS snt ON snt.idfsGISBaseReference = br.idfsGISBaseReference AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
		INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
		INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000003) lang ON lang.strDefault=rt.strGISReferenceTypeName
		WHERE 1=2 and  br.intRowStatus=0 and rt.intRowStatus =0
	ELSE
		SELECT
			l.node.GetLevel() AS Level,
			br.idfsGISReferenceType, 
			ISNULL(lang.Name,rt.strGISReferenceTypeName) AS strGISReferenceTypeName,
			br.idfsGISBaseReference AS idfsReference,
			ISNULL(snt.strTextString, br.strDefault) [Name],
			--l.Node,
			l.node.ToString() strNode,
			l.strHASC,
			l.strCode,
			l.idfsType LevelType
		FROM dbo.gisBaseReference AS br 
		INNER JOIN dbo.gisStringNameTranslation AS snt ON snt.idfsGISBaseReference = br.idfsGISBaseReference AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
		INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
		INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000003) lang ON lang.strDefault=rt.strGISReferenceTypeName
		INNER JOIN @Parent_nodeTable pn  ON pn.node=l.node.GetAncestor(1)
		where  br.intRowStatus=0 and rt.intRowStatus =0
		ORDER BY Name
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_GIS_Location_CurrentLevel_Get]...';


GO


--*************************************************************************************************
-- Name: USP_GBL_GIS_Location_CurrentLevel_Get
--
-- Description: To get the Administrative level List for the required level
--
-- Revision History:
-- Name Date Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Srini Goli 03/31/2021 Initial release.
-- Mark Wilson 07/16/2021 updated to use dbo objects
-- Mani 01/20/2022 Added Order By
-- Srini Goli Updated to Retrive data for All Contries also
-- Testing code:
/*
--For Current Country
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'ru', 0					-- Administrative Level 0 --Country
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'en-US', 1				-- Administrative Level 1 --Region
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'ru', 2					-- Administrative Level 2 --Rayon
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'az-Latn-AZ', 3			-- Administrative Level 3 --Settlement

--For ALL Contries
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'en-US', 0,1					-- Administrative Level 0 --Country
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'en-US', 1,1					-- Administrative Level 1 --Region
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'en-US', 2,1					-- Administrative Level 2 --Rayon
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'az-Latn-AZ', 3,1			-- Administrative Level 3 --Settlement

 Administrative Levels 5, 6, and 7 have not been integrated.

*/
-- ************************************************************************************************

ALTER PROCEDURE [dbo].[USP_GBL_GIS_Location_CurrentLevel_Get]
(
	@LangID NVARCHAR(10),
	@CurrentLevel INT,
	@AllCountries BIT = NULL  --Null for Specific Country, 1 for all Conuntries
)
AS
	DECLARE @CountryNodes TABLE(CountryNode HIERARCHYID)
	DECLARE		@idfsGISReferenceType BIGINT

	IF ISNUll(@AllCountries,0)=0
	BEGIN
		INSERT INTO @CountryNodes(CountryNode)
		SELECT node FROM gisLocation WHERE idfsLocation = dbo.FN_GBL_CURRENTCOUNTRY_GET()
	END
	ELSE
	BEGIN
		INSERT INTO @CountryNodes(CountryNode)
		SELECT node FROM gisLocation WHERE idfsLocation in  (SELECT  DISTINCT tcp1.idfsCountry
																FROM dbo.tstSite ts
																JOIN dbo.tstCustomizationPackage tcp1 
																ON tcp1.idfCustomizationPackage = ts.idfCustomizationPackage)
	END

	--SELECT CountryNode FROM @CountryNodes

	SELECT
			l.node.GetLevel() AS Level,
			br.idfsGISReferenceType, 
			ISNULL(lang.Name,rt.strGISReferenceTypeName) AS strGISReferenceTypeName,
			br.idfsGISBaseReference AS idfsReference,
			ISNULL(snt.strTextString, br.strDefault) [Name],
			--l.Node,
			l.node.ToString() strNode,
			strHASC,
			strCode
		FROM dbo.gisBaseReference AS br 
		INNER JOIN dbo.gisStringNameTranslation AS snt ON snt.idfsGISBaseReference = br.idfsGISBaseReference AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
		INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
		INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000003) lang ON lang.strDefault=rt.strGISReferenceTypeName
	--WHERE l.node.GetLevel()=@CurrentLevel
	WHERE l.node.GetAncestor(@CurrentLevel) IN (SELECT CountryNode FROM @CountryNodes) and br.intRowStatus=0 and rt.intRowStatus =0
	ORDER BY Name
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_GIS_Location_LevelDetails_Get]...';


GO
--*************************************************************************************************
-- Name: USP_GBL_GIS_Location_Levels_Get
--
-- Description: To get the available levels
--
-- Revision History:
-- Name Date Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Srini Goli 02/25/2021 Initial release.
-- Mark Wilson 07/16/2021 updated to use dbo artifacts
-- Mani 01/20/2022 Added order by

-- Testing code
/*
Exec [dbo].[USP_GBL_GIS_Location_LevelDetails_Get] 'en-US'
Exec [dbo].[USP_GBL_GIS_Location_LevelDetails_Get] 'en-US'

*/
-- ************************************************************************************************

ALTER PROCEDURE [dbo].[USP_GBL_GIS_Location_LevelDetails_Get](@LangID NVARCHAR(50))
AS
BEGIN
DECLARE @CountryNode HIERARCHYID
SELECT @CountryNode = node FROM gisLocation WHERE idfsLocation = dbo.FN_GBL_CURRENTCOUNTRY_GET()	
	
SELECT
			l.node.GetLevel() as Level,
			br.idfsGISReferenceType, 
			ISNULL(lang.Name,rt.strGISReferenceTypeName) as strGISReferenceTypeName,
			br.idfsGISBaseReference AS idfsReference,
			ISNULL(snt.strTextString, br.strDefault) [Name],
			--l.Node,
			l.node.ToString() strNode,
			strHASC,
			strCode
		FROM dbo.gisBaseReference AS br 
		INNER JOIN dbo.gisStringNameTranslation AS snt ON snt.idfsGISBaseReference = br.idfsGISBaseReference AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
		INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
		INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000003) lang ON lang.strDefault=rt.strGISReferenceTypeName
WHERE  l.node.IsDescendantOf(@CountryNode) = 1 and br.intRowStatus=0 and rt.intRowStatus =0
order by name
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_GIS_Location_Levels_Get]...';


GO





--*************************************************************************************************
-- Name: USP_GBL_GIS_Location_Levels_Get
--
-- Description: To get the available levels
--
-- Revision History:
-- Name Date Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Srini Goli 02/25/2021 Initial release.

-- Testing code
/*
Exec [dbo].[USP_GBL_GIS_Location_Levels_Get] 'en'
Exec [dbo].[USP_GBL_GIS_Location_Levels_Get] 'ru'
Exec [dbo].[USP_GBL_GIS_Location_Levels_Get] 'az-l'
*/
-- ************************************************************************************************

ALTER PROCEDURE [dbo].[USP_GBL_GIS_Location_Levels_Get] (@LangID AS NVARCHAR(10))
AS
BEGIN
DECLARE @CountryNode HIERARCHYID
SELECT @CountryNode = node FROM gisLocation WHERE idfsLocation = dbo.FN_GBL_CURRENTCOUNTRY_GET()	
	
SELECT DISTINCT
	l.node.GetLevel() AS Level,
	br.idfsGISReferenceType, 
	rt.strGISReferenceTypeName AS strDefault,
	ISNULL(lang.Name,rt.strGISReferenceTypeName) AS Name

FROM dbo.gisBaseReference AS br 
INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000003) lang ON lang.strDefault=rt.strGISReferenceTypeName
WHERE  l.node.IsDescendantOf(@CountryNode) = 1 and br.intRowStatus=0 and rt.intRowStatus =0
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_LKUP_DISEASE_GETList]...';


GO
--*************************************************************************************************
-- Name: USP_GBL_LKUP_DISEASE_GETList
--
-- Description: Returns a list of diseases filtered by a user's filtration permissions as defined 
-- per use case SAUC62.
--          
-- Author: Stephen Long
--
-- Revision History:
-- Name              Date       Change Detail
-- ----------------- ---------- ------------------------------------------------------------------
-- Stephen Long      09/29/2021 Initial release
-- Mike Kornegay	 11/03/2021 Added bitwise to where for Accessory Codes
-- Stephen Long      01/24/2022 Added ICD10 and OIE code to the query.
-- Mani				 03/10/2022	Added intHACode as return parameter
-- Leo Tracchia	     11/17/2022 Added distinct to remove possible duplicates from return
-- Mike Kornegay	 12/20/2022 Added idfsUsingType as return field.
--
-- Testing code:
/*
-- Human standard diseases
EXEC USP_GBL_LKUP_DISEASE_GETList 'en-US', 2, 10020001, NULL, 420664190000873
-- Avian aggregate diseases
EXEC USP_GBL_LKUP_DISEASE_GETList 'en-US', 96, null, NULL, 155568340001295
-- Livestock standard diseases wildcard matching advanced search term.
EXEC USP_GBL_LKUP_DISEASE_GETList 'en-US', 32, 10020001, 'Bru', 420664190000873
*/
--*************************************************************************************************
ALTER PROCEDURE [dbo].[USP_GBL_LKUP_DISEASE_GETList]
(
    @LanguageID NVARCHAR(50),
    @AccessoryCode INT = NULL,         -- Human, Avian, Livestock, Vector, etc.
    @UsingType BIGINT = NULL,          -- Aggregate or standard disease types
    @AdvancedSearchTerm NVARCHAR(200), -- String passed to filter disease names. If nothing is passed in, no filter is applied.
    @UserEmployeeID BIGINT
)
AS
BEGIN
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        INSERT INTO @Results
        SELECT d.idfsDiagnosis,
               1,
               1,
               1,
               1,
               1
        FROM dbo.trtDiagnosis d
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = d.idfsDiagnosis
        WHERE d.intRowStatus = 0
              AND (
                      (disease.intHACode & @AccessoryCode) > 0 --IN (SELECT * FROM dbo.FN_GBL_SplitHACode(@AccessoryCode, 510))
                      OR @AccessoryCode IS NULL
                  )
              AND (
                      d.idfsUsingType = @UsingType
                      OR @UsingType IS NULL
                  )
              AND (
                      disease.name LIKE '%' + @AdvancedSearchTerm + '%'
                      OR @AdvancedSearchTerm IS NULL
                  );

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT d.idfsDiagnosis
                        FROM dbo.trtDiagnosis d
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = d.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE oa.intPermission = 1
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT d.idfsDiagnosis,
               1,
               1,
               1,
               1,
               1
        FROM dbo.trtDiagnosis d
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = d.idfsDiagnosis
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = d.idfsDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND d.intRowStatus = 0
              AND (
                      d.idfsUsingType = @UsingType
                      OR @UsingType IS NULL
                  )
              AND (
                      disease.intHACode = @AccessoryCode
                      OR @AccessoryCode IS NULL
                  )
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND (
                      disease.name LIKE '%' + @AdvancedSearchTerm + '%'
                      OR @AdvancedSearchTerm IS NULL
                  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = res.ID
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT d.idfsDiagnosis,
               1,
               1,
               1,
               1,
               1
        FROM dbo.trtDiagnosis d
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = d.idfsDiagnosis
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = d.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND d.intRowStatus = 0
              AND (
                      d.idfsUsingType = @UsingType
                      OR @UsingType IS NULL
                  )
              AND (
                      disease.intHACode = @AccessoryCode
                      OR @AccessoryCode IS NULL
                  )
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND (
                      disease.name LIKE '%' + @AdvancedSearchTerm + '%'
                      OR @AdvancedSearchTerm IS NULL
                  );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT d.idfsDiagnosis
                        FROM dbo.trtDiagnosis d
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = ID
                                   AND oa.intRowStatus = 0
                        WHERE intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND idfActor = @UserEmployeeID
                    );

        SELECT distinct ID AS DiseaseID,
			   disease.intHACode,
               disease.name AS DiseaseName,			   
               diagnosis.strIDC10 AS IDC10,
               diagnosis.strOIECode AS OIECode,
			   disease.intOrder,
			   diagnosis.idfsUsingType AS UsingType 
        FROM @Results
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = ID
            LEFT JOIN dbo.trtDiagnosis diagnosis
                ON diagnosis.idfsDiagnosis = ID
        ORDER BY disease.intOrder,
                 disease.name;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HAS_DISEASE_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HAS_DISEASE_REPORT_GETList
--
-- Description: Get a list of human disease reports for the Human Active Surveillance module.
--          
-- Revision History:
-- Name				 Date		 Change Detail
-- ----------------	 ----------	 -------------------------------------------------------------------
-- Doug Albanese	 09/28/2022  Initial release.
-- Mike Kornegay	 01/23/2022	 Changed FETCH NEXT to record paging.
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US'
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US', @EIDSSReportID = 'H'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HAS_DISEASE_REPORT_GETList]
   @LanguageID NVARCHAR(50),
   @SessionKey BIGINT = NULL,
   @ApplySiteFiltrationIndicator BIT = 0,
   @UserSiteID BIGINT,
   @UserOrganizationID BIGINT,
   @UserEmployeeID BIGINT,
   @SortColumn NVARCHAR(30) = 'ReportID',
   @SortOrder NVARCHAR(4) = 'DESC',
   @Page INT = 1,
   @PageSize INT = 10
AS
BEGIN
    SET NOCOUNT ON;

	DECLARE @firstRec INT;
    DECLARE @lastRec INT;
    SET @firstRec = (@Page - 1) * @PageSize
    SET @lastRec = (@Page * @PageSize + 1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID,
            @LocationOfExposureLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID)
   );

    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
		   BEGIN
			   INSERT INTO @Results
			   SELECT hc.idfHumanCase,
					  1,
					  1,
					  1,
					  1,
					  1
			   FROM dbo.tlbHumanCase hc
				   INNER JOIN dbo.tlbHuman h
					   ON h.idfHuman = hc.idfHuman
						  AND h.intRowStatus = 0
				   INNER JOIN dbo.tlbGeoLocation currentAddress
					   ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
   --------------------------------------------------------------------------------------------------------------------
				   LEFT JOIN dbo.gisLocationDenormalized g
					   ON g.idfsLocation = currentAddress.idfsLocation
				   LEFT JOIN dbo.tlbMaterial m
					   ON m.idfHumanCase = hc.idfHumanCase
						  AND m.intRowStatus = 0
				   LEFT JOIN dbo.tlbGeoLocation exposure
					   ON exposure.idfGeoLocation = hc.idfPointGeoLocation
				   LEFT JOIN dbo.gisLocationDenormalized gExposure
					   ON gExposure.idfsLocation = exposure.idfsLocation
			   WHERE hc.intRowStatus = 0
					 AND hc.idfsFinalDiagnosis IS NOT NULL
					 AND (
							 hc.idfParentMonitoringSession = @SessionKey
							 OR @SessionKey IS NULL
						 )
			   GROUP BY hc.idfHumanCase
			   OPTION (RECOMPILE);
		   END
        ELSE
		   BEGIN -- Site Filtration
			   
			   INSERT INTO @Results
			   SELECT hc.idfHumanCase,
				  1,
				  1,
				  1,
				  1,
				  1
			   FROM dbo.tlbHumanCase hc
			   INNER JOIN dbo.tlbHuman h ON h.idfHuman = hc.idfHuman AND h.intRowStatus = 0
			   INNER JOIN dbo.tlbGeoLocation currentAddress ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
			   LEFT JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = currentAddress.idfsLocation
			   LEFT JOIN dbo.tlbMaterial m ON m.idfHumanCase = hc.idfHumanCase AND m.intRowStatus = 0
			   LEFT JOIN dbo.tlbGeoLocation exposure ON exposure.idfGeoLocation = hc.idfPointGeoLocation
			   LEFT JOIN dbo.gisLocationDenormalized gExposure ON gExposure.idfsLocation = exposure.idfsLocation
            
			   WHERE hc.intRowStatus = 0
			   AND hc.idfsSite = @UserSiteID
			   AND hc.idfsFinalDiagnosis IS NOT NULL
			   AND (hc.idfParentMonitoringSession = @SessionKey OR @SessionKey IS NULL)
			   GROUP BY hc.idfHumanCase
			   OPTION (RECOMPILE);

			   DECLARE @FilteredResults TABLE
			   (
				   ID BIGINT NOT NULL,
				   ReadPermissionIndicator BIT NOT NULL,
				   AccessToPersonalDataPermissionIndicator BIT NOT NULL,
				   AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
				   WritePermissionIndicator BIT NOT NULL,
				   DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID)
			   );

			   -- =======================================================================================
			   -- DEFAULT SITE FILTRATION RULES
			   --
			   -- Apply active default site filtration rules for third level sites.
			   -- =======================================================================================
			   DECLARE @RuleActiveStatus INT = 0;
			   DECLARE @AdministrativeLevelTypeID INT;
			   DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
			   DECLARE @DefaultAccessRules AS TABLE
			   (
				   AccessRuleID BIGINT NOT NULL,
				   ActiveIndicator INT NOT NULL,
				   ReadPermissionIndicator BIT NOT NULL,
				   AccessToPersonalDataPermissionIndicator BIT NOT NULL,
				   AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
				   WritePermissionIndicator BIT NOT NULL,
				   DeletePermissionIndicator BIT NOT NULL,
				   AdministrativeLevelTypeID INT NULL
			   );

			   INSERT INTO @DefaultAccessRules
			   SELECT AccessRuleID,
					  a.intRowStatus,
					  a.ReadPermissionIndicator,
					  a.AccessToPersonalDataPermissionIndicator,
					  a.AccessToGenderAndAgeDataPermissionIndicator,
					  a.WritePermissionIndicator,
					  a.DeletePermissionIndicator,
					  a.AdministrativeLevelTypeID
			   FROM dbo.AccessRule a
			   WHERE DefaultRuleIndicator = 1;

			   SELECT @RuleActiveStatus = ActiveIndicator
			   FROM @DefaultAccessRules
			   WHERE AccessRuleID = 10537000;

			   IF @RuleActiveStatus = 0
			   BEGIN
				   SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				   FROM @DefaultAccessRules
				   WHERE AccessRuleID = 10537000;
				
				   SELECT @AdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				   FROM dbo.tlbOffice o
					   INNER JOIN dbo.tlbGeoLocationShared AS l
						   ON l.idfGeoLocationShared = o.idfLocation
					   INNER JOIN dbo.gisLocationDenormalized g
						   ON g.idfsLocation = l.idfsLocation
				   WHERE o.idfOffice = @UserOrganizationID

				   -- Administrative level specified in the rule of the site where the report was created.
				   INSERT INTO @FilteredResults
				   SELECT h.idfHumanCase,
						  a.ReadPermissionIndicator,
						  a.AccessToPersonalDataPermissionIndicator,
						  a.AccessToGenderAndAgeDataPermissionIndicator,
						  a.WritePermissionIndicator,
						  a.DeletePermissionIndicator
				   FROM dbo.tlbHumanCase h
					   INNER JOIN dbo.tstSite s
						   ON h.idfsSite = s.idfsSite
					   INNER JOIN dbo.tlbOffice o
						   ON o.idfOffice = s.idfOffice
							  AND o.intRowStatus = 0
					   INNER JOIN dbo.tlbGeoLocationShared l
						   ON l.idfGeoLocationShared = o.idfLocation
							  AND l.intRowStatus = 0
					   INNER JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = l.idfsLocation
					   INNER JOIN @DefaultAccessRules a
						   ON a.AccessRuleID = 10537000
				   WHERE h.intRowStatus = 0 and h.idfParentMonitoringSession = @SessionKey

				   -- Administrative level specified in the rule of the report current residence address.
				   INSERT INTO @FilteredResults
				   SELECT h.idfHumanCase,
						  a.ReadPermissionIndicator,
						  a.AccessToPersonalDataPermissionIndicator,
						  a.AccessToGenderAndAgeDataPermissionIndicator,
						  a.WritePermissionIndicator,
						  a.DeletePermissionIndicator
				   FROM dbo.tlbHumanCase h
					   INNER JOIN dbo.tlbHuman hu
						   ON hu.idfHuman = h.idfHuman
							  AND hu.intRowStatus = 0
					   INNER JOIN dbo.tlbGeoLocation l
						   ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
							  AND l.intRowStatus = 0
					   INNER JOIN dbo.gisLocationDenormalized g
						   ON g.idfsLocation = l.idfsLocation
					   INNER JOIN @DefaultAccessRules a
						   ON a.AccessRuleID = 10537000
				   WHERE h.intRowStatus = 0 and h.idfParentMonitoringSession = @SessionKey

				   -- Administrative level specified in the rule of the report location of exposure, 
				   -- if corresponding field was filled in.
				   INSERT INTO @FilteredResults
				   SELECT h.idfHumanCase,
						  a.ReadPermissionIndicator,
						  a.AccessToPersonalDataPermissionIndicator,
						  a.AccessToGenderAndAgeDataPermissionIndicator,
						  a.WritePermissionIndicator,
						  a.DeletePermissionIndicator
				   FROM dbo.tlbHumanCase h
					   INNER JOIN dbo.tlbGeoLocation l
						   ON l.idfGeoLocation = h.idfPointGeoLocation
							  AND l.intRowStatus = 0
					   INNER JOIN dbo.gisLocationDenormalized g
						   ON g.idfsLocation = l.idfsLocation
					   INNER JOIN @DefaultAccessRules a
						   ON a.AccessRuleID = 10537000
				   WHERE h.intRowStatus = 0 and h.idfParentMonitoringSession = @SessionKey
				  
			   END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;


            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            -- Apply at the user's site group level, granted by a site group.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- Apply at the user's site level, granted by a site group.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- Apply at the user's employee group level, granted by a site group.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- Apply at the user's ID level, granted by a site group.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- Apply at the user's site group level, granted by a site.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- Apply at the user's site level, granted by a site.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                 AND a.GrantingActorSiteID = h.idfsSite;

            -- Apply at the user's employee group level, granted by a site.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Apply at the user's ID level, granted by a site.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator
            OPTION (RECOMPILE);
			
        END;


        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        --IF @FilterOutbreakTiedReports = 1
        --BEGIN
        --    DELETE I
        --    FROM @Results I
        --        INNER JOIN dbo.tlbHumanCase hc
        --            ON hc.idfHumanCase = I.ID
        --    WHERE hc.idfOutbreak IS NOT NULL;
        --END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
		
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT h.idfHumanCase
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = h.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND idfActor = @UserEmployeeID
        );
		
        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;

		
     --   WITH paging
     --   AS (SELECT ID,
     --              c = COUNT(*) OVER ()
     --       FROM @FinalResults res
     --           INNER JOIN dbo.tlbHumanCase hc
     --               ON hc.idfHumanCase = res.ID
     --           INNER JOIN dbo.tlbHuman h
     --               ON h.idfHuman = hc.idfHuman
     --                  AND h.intRowStatus = 0
     --           LEFT JOIN dbo.tlbGeoLocation gl
     --               ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
     --           LEFT JOIN dbo.gisLocation g
     --               ON g.idfsLocation = gl.idfsLocation
     --           LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
     --               ON LH.idfsLocation = gl.idfsLocation
     --           LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
     --               ON disease.idfsReference = hc.idfsFinalDiagnosis
     --           LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
     --               ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
     --           LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
     --               ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
     --       ORDER BY CASE
     --                    WHEN @SortColumn = 'ReportID'
     --                         AND @SortOrder = 'ASC' THEN
     --                        hc.strCaseID
     --                END ASC,
     --                CASE
     --                    WHEN @SortColumn = 'ReportID'
     --                         AND @SortOrder = 'DESC' THEN
     --                        hc.strCaseID
     --                END DESC,
     --                CASE
     --                    WHEN @SortColumn = 'EnteredDate'
     --                         AND @SortOrder = 'ASC' THEN
     --                        hc.datEnteredDate
     --                END ASC,
     --                CASE
     --                    WHEN @SortColumn = 'EnteredDate'
     --                         AND @SortOrder = 'DESC' THEN
     --                        hc.datEnteredDate
     --                END DESC,
     --                CASE
     --                    WHEN @SortColumn = 'DiseaseName'
     --                         AND @SortOrder = 'ASC' THEN
     --                        disease.name
     --                END ASC,
     --                CASE
     --                    WHEN @SortColumn = 'DiseaseName'
     --                         AND @SortOrder = 'DESC' THEN
     --                        disease.name
     --                END DESC,
     --                CASE
     --                    WHEN @SortColumn = 'PersonLocation'
     --                         AND @SortOrder = 'ASC' THEN
     --                (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
     --                END ASC,
     --                CASE
     --                    WHEN @SortColumn = 'PersonLocation'
     --                         AND @SortOrder = 'DESC' THEN
     --                (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
     --                END DESC,
     --                CASE
     --                    WHEN @SortColumn = 'ClassificationTypeName'
     --                         AND @SortOrder = 'ASC' THEN
     --                        finalClassification.name
     --                END ASC,
     --                CASE
     --                    WHEN @SortColumn = 'ClassificationTypeName'
     --                         AND @SortOrder = 'DESC' THEN
     --                        finalClassification.name
					--END DESC
					--OFFSET CAST((@PageSize * (@Page - 1)) AS INT) ROWS FETCH NEXT CAST(@PageSize AS INT) ROWS ONLY)
     --   SELECT res.ID AS ReportKey,
     --          hc.strCaseId AS ReportID,
     --          ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
     --          disease.Name AS DiseaseName,
     --          ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
     --          + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
     --          res.AccessToPersonalDataPermissionIndicator,
     --          res.AccessToGenderAndAgeDataPermissionIndicator,
     --          res.WritePermissionIndicator,
     --          res.DeletePermissionIndicator,
     --          c AS RecordCount,
     --          (
     --              SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
     --          ) AS TotalCount,
     --          TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0),
     --          CurrentPage = @Page
     --   FROM @FinalResults res
     --       INNER JOIN paging
     --           ON paging.ID = res.ID
     --       INNER JOIN dbo.tlbHumanCase hc
     --           ON hc.idfHumanCase = res.ID
     --       INNER JOIN dbo.tlbHuman h
     --           ON h.idfHuman = hc.idfHuman
     --              AND h.intRowStatus = 0
     --       INNER JOIN dbo.tlbHumanActual ha
     --           ON ha.idfHumanActual = h.idfHumanActual
     --              AND ha.intRowStatus = 0
     --       LEFT JOIN dbo.tlbGeoLocation gl
     --           ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
     --       LEFT JOIN dbo.gisLocation g
     --           ON g.idfsLocation = gl.idfsLocation
     --       LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
     --           ON LH.idfsLocation = gl.idfsLocation
     --       LEFT JOIN dbo.HumanActualAddlInfo haai
     --           ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
     --              AND haai.intRowStatus = 0
     --       LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
     --           ON disease.idfsReference = hc.idfsFinalDiagnosis
     --       LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
     --           ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
     --       LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
     --           ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
     --       LEFT JOIN dbo.tlbPerson p
     --           ON p.idfPerson = hc.idfPersonEnteredBy
     --              AND p.intRowStatus = 0
     --   OPTION (RECOMPILE);

	    WITH paging
        AS (SELECT ROW_NUMBER() OVER (
		    ORDER BY CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'ASC' THEN
                             hc.strCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'DESC' THEN
                             hc.strCaseID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'ASC' THEN
                             hc.datEnteredDate
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'DESC' THEN
                             hc.datEnteredDate
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'ASC' THEN
                             disease.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'DESC' THEN
                             disease.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'ASC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'DESC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'ASC' THEN
                             finalClassification.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'DESC' THEN
                             finalClassification.name
					END DESC
		) AS ROWNUM,
        COUNT(*) OVER () AS RecordCount,
		res.ID AS ReportKey,
        hc.strCaseId AS ReportID,
		hc.datEnteredDate as EnteredDate,
        ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
        disease.Name AS DiseaseName,
        ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
        + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
        res.AccessToPersonalDataPermissionIndicator AS AccessToPersonalDataPermissionIndicator,
        res.AccessToGenderAndAgeDataPermissionIndicator AS AccessToGenderAndAgeDataPermissionIndicator,
        res.WritePermissionIndicator AS WritePermissionIndicator,
        res.DeletePermissionIndicator AS DeletePermissionIndicator,
        (
            SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
        ) AS TotalCount
        FROM @FinalResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
				LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
					ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
				LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                    ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                    ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
		)
        SELECT ReportKey,
               ReportID,
			   EnteredDate,
               ClassificationTypeName,
               DiseaseName,
               PersonLocation,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RecordCount,
               (
                   SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
               ) AS TotalCount,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0),
               CurrentPage = @Page
        FROM paging
		WHERE RowNum > @firstRec
            AND RowNum < @lastRec
		ORDER BY CASE
						WHEN @SortColumn = 'ReportID'
							AND @SortOrder = 'ASC' THEN
							ReportID
					END ASC,
					CASE
						WHEN @SortColumn = 'ReportID'
							AND @SortOrder = 'DESC' THEN
							ReportID
					END DESC,
					CASE
						WHEN @SortColumn = 'EnteredDate'
							AND @SortOrder = 'ASC' THEN
							EnteredDate
					END ASC,
					CASE
						WHEN @SortColumn = 'EnteredDate'
							AND @SortOrder = 'DESC' THEN
							EnteredDate
					END DESC,
					CASE
						WHEN @SortColumn = 'DiseaseName'
							AND @SortOrder = 'ASC' THEN
							DiseaseName
					END ASC,
					CASE
						WHEN @SortColumn = 'DiseaseName'
							AND @SortOrder = 'DESC' THEN
							DiseaseName
					END DESC,
					CASE
						WHEN @SortColumn = 'PersonLocation'
							AND @SortOrder = 'ASC' THEN
							PersonLocation
					END ASC,
					CASE
						WHEN @SortColumn = 'PersonLocation'
							AND @SortOrder = 'DESC' THEN
							PersonLocation
					END DESC,
					CASE
						WHEN @SortColumn = 'ClassificationTypeName'
							AND @SortOrder = 'ASC' THEN
							ClassificationTypeName
					END ASC,
					CASE
						WHEN @SortColumn = 'ClassificationTypeName'
							AND @SortOrder = 'DESC' THEN
							ClassificationTypeName
				END DESC

   

    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HAS_MONITORING_SESSION_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HAS_MONITORING_SESSION_GETList
--
-- Description: Gets a list of human monitoring sessions based on search criteria provided.
--                      
-- Revision History:
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		12/31/2018 Initial release.
-- Stephen Long		07/06/2019 Fixed category code, and added campaign ID.
-- Stephen Long		01/26/2020 Added site list parameter for site filtration.
-- Stephen Long		02/24/2020 Added non-configurable site filtration rules.
-- Stephen Long		03/25/2020 Added if/else for first-level and second-level site types to 
--                             bypass non-configurable rules.
-- Stephen Long		04/20/2020 Changed join from FN_GBL_INSTITUTION to tstSite as not all sites 
--                             have organizations.
-- Stephen Long		05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long		06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long		07/07/2020 Added trim to EIDSS identifier like criteria.
-- Stephen Long		11/18/2020 Added site ID to the query.
-- Stephen Long		11/27/2020 Added configurable site filtration rules.
-- Stephen Long		12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long		12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long		12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long		04/04/2021 Added updated pagination and location hierarchy.
-- Mark Wilson		08/18/2021 joined tlbMonitoringSessionToDiagnosis to get disease
-- Doug Albanese	11/23/2021 Refactored for use with new HAS module
-- Stephen Long     01/26/2022 Added the disease identifiers and names fields to the query.
-- Doug Albanese	01/27/2022 Completely removed "node" searches and put in full hierarchy 
--                             location joins
-- Stephen Long     03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Doug Albanese	03/30/2022 Refactored to align with Stephen's changes to combine Diseases into 
--                             one row.
-- Doug Albanese	04/01/2022 Creating HAS's on the first o a month exposed an incorrect BETWEEN 
--                             statement use. Adding one day to ending date.
-- Doug Albanese	05/16/2022 Added Admin Level 4 for return of Settlement in Campaign's use
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	06/14/2022 Fixed filtration rule that was pointing to SessionCategoryID for vet
--                             instead of human.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Stephen Long     01/09/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HAS_MONITORING_SESSION_GETList]
(
    @LanguageID NVARCHAR(50),
    @SessionID NVARCHAR(200) = NULL,
    @LegacySessionID NVARCHAR(50) = NULL,
    @CampaignID NVARCHAR(200) = NULL,
    @CampaignKey BIGINT = NULL,
    @SessionStatusTypeID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'SessionID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    IF @AdministrativeLevelID IS NOT NULL
    BEGIN
        SELECT @AdministrativeLevelNode = node
        FROM dbo.gisLocation
        WHERE idfsLocation = @AdministrativeLevelID;
    END;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO CONFIGURABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any configurable filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = ms.idfsLocation
            WHERE ms.intRowStatus = 0
                  AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (ms.datEnteredDate
                  BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      );
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = ms.idfsLocation
            WHERE ms.intRowStatus = 0
                  AND ms.idfsSite = @UserSiteID
                  AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (ms.datEnteredDate
                  BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      );

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply non-configurable filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            (
                AccessRuleID,
                ActiveIndicator,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator,
                AdministrativeLevelTypeID
            )
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            --
            -- Session data shall be available to all sites of the same administrative level.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537006;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537006;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the session was created.
                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tstSite s
                        ON ms.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537006
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the patient's current residence address
                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbHuman h
                        ON h.idfMonitoringSession = ms.idfMonitoringSession
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfCurrentResidenceAddress
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537006
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            --
            -- Session data is always distributed across the sites where the disease reports are 
            -- linked to the session.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537007;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbHumanCase hc
                        ON hc.idfParentMonitoringSession = ms.idfMonitoringSession
                           AND hc.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537007
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND hc.idfsSite = @UserSiteID;
            END;

            --
            -- Session data shall be available to all sites' organizations connected to the particular 
            -- session where samples were transferred out.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537008;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Samples transferred collected by and sent to organizations
                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbMaterial m
                        ON ms.idfMonitoringSession = m.idfMonitoringSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT tout
                        ON toutm.idfTransferOut = tout.idfTransferOut
                           AND tout.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537008
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND tout.idfSendToOffice = @UserOrganizationID;

                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbMaterial m
                        ON ms.idfMonitoringSession = m.idfMonitoringSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537008
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          );
            END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND sgs.idfsSite = ms.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = ID
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = ms.idfsLocation
            WHERE ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (ms.datEnteredDate
                  BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 AND @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                          OR @LegacySessionID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                                   AND msd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = msd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE ms.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        (
            ID,
            ReadPermissionIndicator,
            AccessToPersonalDataPermissionIndicator,
            AccessToGenderAndAgeDataPermissionIndicator,
            WritePermissionIndicator,
            DeletePermissionIndicator
        )
        SELECT ms.idfMonitoringSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMonitoringSession ms
            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND ms.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        (
            ID,
            ReadPermissionIndicator,
            AccessToPersonalDataPermissionIndicator,
            AccessToGenderAndAgeDataPermissionIndicator,
            WritePermissionIndicator,
            DeletePermissionIndicator
        )
        SELECT ms.idfMonitoringSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMonitoringSession ms
            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND ms.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID;

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                                   AND msd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = msd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE ms.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = @UserEmployeeID
                    );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ms.idfMonitoringSession
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = ms.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE ms.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        (
            ID,
            ReadPermissionIndicator,
            AccessToPersonalDataPermissionIndicator,
            AccessToGenderAndAgeDataPermissionIndicator,
            WritePermissionIndicator,
            DeletePermissionIndicator
        )
        SELECT ms.idfMonitoringSession,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMonitoringSession ms
        WHERE ms.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = ms.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = ms.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        (
            ID,
            ReadPermissionIndicator,
            AccessToPersonalDataPermissionIndicator,
            AccessToGenderAndAgeDataPermissionIndicator,
            WritePermissionIndicator,
            DeletePermissionIndicator
        )
        SELECT ms.idfMonitoringSession,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMonitoringSession ms
        WHERE ms.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = ms.idfsSite
        );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            INNER JOIN @UserSitePermissions usp
                                ON usp.SiteID = ms.idfsSite
                        WHERE usp.Permission = 4 -- Deny permission
                              AND usp.PermissionTypeID = 10059003 -- Read permission
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ms.idfsLocation
            INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                ON lh.idfsLocation = ms.idfsLocation
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
              AND (
                      ms.idfCampaign = @CampaignKey
                      OR @CampaignKey IS NULL
                  )
              AND (
                      ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                      OR @SessionStatusTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (ms.datEnteredDate
              BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             AND @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                      OR @CampaignID IS NULL
                  )
              AND (
                      LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                      OR @LegacySessionID IS NULL
                  )
        GROUP BY ID;

        WITH paging
        AS (SELECT ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = res.ID
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = ms.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000117) sessionStatus
                    ON sessionStatus.idfsReference = ms.idfsMonitoringSessionStatus
            ORDER BY CASE
                         WHEN @SortColumn = 'SessionID'
                              AND @SortOrder = 'ASC' THEN
                             ms.strMonitoringSessionID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SessionID'
                              AND @SortOrder = 'DESC' THEN
                             ms.strMonitoringSessionID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'SessionStatusTypeName'
                              AND @SortOrder = 'ASC' THEN
                             sessionStatus.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SessionStatusTypeName'
                              AND @SortOrder = 'DESC' THEN
                             sessionStatus.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'ASC' THEN
                             ms.datEnteredDate
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'DESC' THEN
                             ms.datEnteredDate
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel1Name'
                              AND @SortOrder = 'ASC' THEN
                             lh.AdminLevel1Name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel1Name'
                              AND @SortOrder = 'DESC' THEN
                             lh.AdminLevel1Name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel2Name'
                              AND @SortOrder = 'ASC' THEN
                             lh.AdminLevel2Name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel2Name'
                              AND @SortOrder = 'DESC' THEN
                             lh.AdminLevel2Name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel3Name'
                              AND @SortOrder = 'ASC' THEN
                             lh.AdminLevel2Name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel3Name'
                              AND @SortOrder = 'DESC' THEN
                             lh.AdminLevel2Name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel4Name'
                              AND @SortOrder = 'ASC' THEN
                             lh.AdminLevel2Name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel4Name'
                              AND @SortOrder = 'DESC' THEN
                             lh.AdminLevel2Name
                     END DESC OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
           )
        SELECT res.ID AS SessionKey,
               ms.strMonitoringSessionID AS SessionID,
               ms.idfCampaign AS CampaignKey,
               c.strCampaignID AS CampaignID,
               sessionStatus.name AS SessionStatusTypeName,
               ms.datStartDate AS StartDate,
               ms.datEndDate AS EndDate,
               diseaseIDs.diseaseIDs AS DiseaseIdentifiers,
               diseaseNames.diseaseNames AS DiseaseNames,
               lh.AdminLevel1Name AS AdministrativeLevel1Name,
               lh.AdminLevel2Name AS AdministrativeLevel2Name,
               lh.AdminLevel3Name AS AdministrativeLevel3Name,
               lh.AdminLevel4Name AS AdministrativeLevel4Name,
               ms.datEnteredDate AS EnteredDate,
               ISNULL(p.strFirstName, '') + ' ' + ISNULL(p.strFamilyName, '') AS EnteredByPersonName,
               ms.idfsSite AS SiteKey,
               siteName.strSiteName AS SiteName,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               c AS RecordCount,
               (
                   SELECT COUNT(*)
                   FROM dbo.tlbMonitoringSession
                   WHERE intRowStatus = 0
                         AND SessionCategoryID = 10502001 -- Human Active Surveillance Session
               ) AS TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
        FROM @FinalResults res
            INNER JOIN paging
                ON paging.ID = res.ID
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = paging.ID
            CROSS APPLY
        (
            SELECT dbo.FN_GBL_SESSION_DISEASEIDS_GET(ms.idfMonitoringSession) diseaseIDs
        ) diseaseIDs
            CROSS APPLY
        (
            SELECT dbo.FN_GBL_SESSION_DISEASE_NAMES_GET(ms.idfMonitoringSession, @LanguageID) diseaseNames
        ) diseaseNames
            INNER JOIN dbo.tstSite siteName
                ON siteName.idfsSite = ms.idfsSite
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000117) sessionStatus
                ON sessionStatus.idfsReference = ms.idfsMonitoringSessionStatus
            INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                ON lh.idfsLocation = ms.idfsLocation
            LEFT JOIN dbo.tlbPerson p
                ON p.idfPerson = ms.idfPersonEnteredBy;
    END TRY
    BEGIN CATCH

    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_DISEASE_GETDetail]...';


GO
--*************************************************************
-- Name 				: USP_HUM_DISEASE_GETDetail
-- Description			: List Human Disease Report
--          
-- Author               : Mandar Kulkarni
-- Revision History
-- Name	Date		Change Detail
-- JWJ	20180418	Added cols for hum disease summary section of the hum disease page
-- HAP  20180801    Added columns DiseaseReportTypeID and strMonitoringSessionID to be returned
-- HAP  20181102    Added column LegacyCaseID to be returned 
-- HAP  20181130    Added columns blnClinicalDiagBasis, blnLabDiagBasis, blnEpiDiagBasis, DateofClassification, idfsYNExposureLocationKnown to be returned
-- HAP  20181207    Added column tlbOutBreak.strOutbreakID to be returned
-- HAP  20181213    Removed VaccinationName and VaccinationDate columns to be returned
-- HAP  20190210    Added column idfCSObservation to be returned for Flex Form integration
-- HAP  20190409    Added columns parentHumanDiseaseReportID and relatedHumanDiseaseReportIdList to be returned for use case HUC11 Changed Diagnosis Human Disease Report​ 
-- HAP  20190614    Added columns for Point location values to be returned
-- HAP  20190629    Added column strPointForeignAddress to be returned
-- SLV	20190703	Removed redundant call to FN_GBL_ReferenceRepair
-- Ann Xiong	   09/12/2019 Added script to select PatientStatus, HospitalName, PreviouslySoughtCare, 
--                            YNSpecificVaccinationAdministered, YNSpecimenCollected, YNExposureLocationKnown, 
--                            ExposureLocationType, ExposureLocationDescription, Country, Settlement for Human Disease Report Deduplication.
-- Ann Xiong	   09/13/2019 Modified SP to replace InitialCaseClassification.idfsReferenceType = 19000111 with InitialCaseClassification.idfsReferenceType = 19000011,
-- 							  replace NonNotifiableDiagnosis.idfsReferenceType = 19000019 with NonNotifiableDiagnosis.idfsReferenceType = 19000149
-- Ann Xiong	   09/16/2019 Modified SP to replace SoughtCareFacility.name as strSoughtCareFacility with tlbHumanCase.strSoughtCareFacility
-- 							  replace HospitalizationStatus.idfsReferenceType = 19000100 with HospitalizationStatus.idfsReferenceType = 19000041
-- Stephen Long    10/02/2019 Changed select person calls over to left joins to person.  POCO was not generating with the function call.
-- Ann Xiong	   03/13/2020 Uncommented 10 fields of Human Disease Report Deduplication were commented out
-- LM				06/07/2020 Updated Selecting Connected Disease Reports
-- LM				11/02/2020 Added strNotCollectedReason To Ouput
-- Mark Wilson		12/22/2020 Changed Institution join to E7 SP
-- Mike Kornegay	09/23/2021 Removed duplicate fields from select.
-- Mark Wilson		09/23/2021 Fixed Locations and offices
-- Mark Wilson		10/01/2021 updated join to gisLocation
-- Minal Shah	    10/22/2021 Added strGroundType, dblPointAccuracy and dblPointAlignment
-- Minal Shah		11/03/2021 Added blnInitialSSD and blnFinalSSD columns
-- Minal Shah		01/25/2021 Replaced long name to org abbrev
-- Stephen Long     01/16/2023 Fixes to use translated values on reference types.
--
-- Testing code:
-- 
/* 
EXEC USP_HUM_DISEASE_GETDetail 'en-US', 71413

*/
--*************************************************************
ALTER PROCEDURE [dbo].[USP_HUM_DISEASE_GETDetail]
(
    @LangID NVARCHAR(50),
    @SearchHumanCaseId BIGINT = NULL
)
AS
BEGIN
    BEGIN TRY
        SET NOCOUNT ON;

        DECLARE @ReturnMessage VARCHAR(MAX) = 'Success';
        DECLARE @ReturnCode BIGINT = 0;
        --Declare @ConnectedReports Varchar(Max);
        --		Select @ConnectedReports = ( SELECT ',' + CAST(RelatedToHumanDiseaseReportIdRoot AS VARCHAR)  + '-' +  (Select strCaseId from tlbhumancase where idfHumancase =  RelatedToHumanDiseaseReportIdRoot)
        --		From  dbo.HumanDiseaseReportRelationship where RelatedToHumanDiseaseReportIdRoot =  @SearchHumanCaseId)
        DECLARE @parentHumanCaseId int
        DECLARE @ParentCaseId int
        DECLARE @ChildCaseId int
        SET @ParentCaseId =
        (
            SELECT TOP 1
                RelatedToHumanDiseaseReportIdRoot
            FROM dbo.HumanDiseaseReportRelationship
            WHERE (HumanDiseaseReportID = @SearchHumanCaseId)
        )
        SET @ChildCaseId =
        (
            SELECT TOP 1
                HumanDiseaseReportID
            FROM dbo.HumanDiseaseReportRelationship
            WHERE (RelatedToHumanDiseaseReportIdRoot = @SearchHumanCaseId)
        )
        SELECT hc.idfHumanCase,
               NULL AS parentHumanDiseaseReportID,     --HumanDiseaseReportRelationship.RelateToHumanDiseaseReportID as parentHumanDiseaseReportID,  
               (
                   SELECT DISTINCT
                       STUFF(
                       (
                           SELECT ',' + CAST(t2.RelatedToHumanDiseaseReportIdRoot AS VARCHAR) + '-' +
                                  (
                                      SELECT strCaseId
                                      FROM dbo.tlbhumancase
                                      WHERE idfHumancase = t2.RelatedToHumanDiseaseReportIdRoot
                                  )
                           FROM dbo.HumanDiseaseReportRelationship t2
                           WHERE t2.RelatedToHumanDiseaseReportIdRoot = @ParentCaseId -- (Select top 1 RelatedToHumanDiseaseReportIdRoot  from HumanDiseaseReportRelationship where (HumanDiseaseReportID = @SearchHumanCaseId) )
                                 --AND ((t2.RelateToHumanDiseaseReportID = hc.idfHumanCase) or (t2.HumanDiseaseReportID = hc.idfHumanCase)))
                                 AND t2.intRowStatus = 0
                           FOR XML PATH('')
                       ),
                       1,
                       1,
                       ''
                            )
                   FROM dbo.HumanDiseaseReportRelationship t1
               --NULL
               ) AS relatedParentHumanDiseaseReportIdList,
               (
                   SELECT DISTINCT
                       STUFF(
                       (
                           SELECT ',' + CAST(t2.HumanDiseaseReportID AS VARCHAR) + '-' +
                                  (
                                      SELECT strCaseId
                                      FROM dbo.tlbhumancase
                                      WHERE idfHumancase = t2.HumanDiseaseReportID
                                  )
                           FROM dbo.HumanDiseaseReportRelationship t2
                           WHERE t2.HumanDiseaseReportID = @ChildCaseId -- (Select top 1 RelatedToHumanDiseaseReportIdRoot  from HumanDiseaseReportRelationship where (HumanDiseaseReportID = @SearchHumanCaseId) )
                                 --AND ((t2.RelateToHumanDiseaseReportID = hc.idfHumanCase) or (t2.HumanDiseaseReportID = hc.idfHumanCase)))
                                 AND t2.intRowStatus = 0
                           FOR XML PATH('')
                       ),
                       1,
                       1,
                       ''
                            )
                   FROM dbo.HumanDiseaseReportRelationship t1
               --NULL
               ) AS relatedChildHumanDiseaseReportIdList,
               hc.idfHuman,
               hc.idfsHospitalizationStatus,
               hc.idfsYNSpecimenCollected,
               hc.idfsHumanAgeType,
               hc.idfsYNAntimicrobialTherapy,
               hc.idfsYNHospitalization,
               hc.idfsYNRelatedToOutbreak,
               hc.idfsOutCome,
               hc.idfsInitialCaseStatus,
               hc.idfsFinalDiagnosis,
               FinalDiagnosis.name AS strFinalDiagnosis,
               hc.idfsFinalCaseStatus,
               FinalCaseClassification.name AS strFinalCaseStatus,
               hc.idfSentByOffice,
               hc.idfInvestigatedByOffice,
               hc.idfReceivedByOffice,
               hc.idfEpiObservation,
               hc.idfCSObservation,
               hc.datNotificationDate,
               hc.datCompletionPaperFormDate,
               hc.datFirstSoughtCareDate,
               hc.datHospitalizationDate,
               hc.datFacilityLastVisit,
               hc.datExposureDate,
               hc.datDischargeDate,
               hc.datOnSetDate,
               hc.datInvestigationStartDate AS StartDateofInvestigation,
               CASE
                   WHEN EXISTS
                        (
                            SELECT 1
                            FROM dbo.tlbHumanCase hci
                            WHERE hci.LegacyCaseID = hc.LegacyCaseID
                                  AND hci.idfHumanCase <> hc.idfHumanCase
                        ) THEN
                       CASE
                           WHEN hc.idfsFinalCaseStatus = 370000000 THEN
                               hc.datTentativeDiagnosisDate
                           ELSE
                               hc.datModificationDate
                       END
                   ELSE
                       hc.datFinalDiagnosisDate
               END datDateOfDiagnosis,
               hc.datFinalDiagnosisDate,
               hc.strNote,
               hc.strCurrentLocation,
               hc.strHospitalizationPlace,
               hc.strLocalIdentifier,
               SoughtByOfficeRef.name AS strSoughtCareFacility,
               hc.strSentByFirstName,
               hc.strSentByPatronymicName,
               hc.strSentByLastName,
               hc.strReceivedByFirstName,
               hc.strReceivedByPatronymicName,
               hc.strReceivedByLastName,
               hc.strEpidemiologistsName,
               hc.strClinicalDiagnosis,
               hc.strClinicalNotes,
               hc.strSummaryNotes,
               hc.intPatientAge,
               hc.blnClinicalDiagBasis,
               hc.blnLabDiagBasis,
               hc.blnEpiDiagBasis,
               hc.idfPersonEnteredBy,
               hc.idfPointGeoLocation,
               gl.idfsGroundType AS idfsPointGroundType,
               gl.idfsGeoLocationType AS idfsPointGeoLocationType,
               gl.idfsCountry AS idfsPointCountry,
               gl.idfsRegion AS idfsPointRegion,
               gl.idfsRayon AS idfsPointRayon,
               gl.idfsSettlement AS idfsPointSettlement,
               gl.dblDistance AS dblPointDistance,
               gl.dblLatitude AS dblPointLatitude,
               gl.dblLongitude AS dblPointLongitude,
               gl.dblElevation AS dblPointElevation,
               gl.dblAlignment AS dblPointAlignment,
               gl.dblAccuracy AS dblPointAccuracy,
               gl.strForeignAddress AS strPointForeignAddress,
               hc.idfSentByPerson,
               hc.idfReceivedByPerson,
               hc.idfInvestigatedByPerson,
               hc.idfsYNTestsConducted,
               hc.idfSoughtCareFacility,
               hc.idfsNonNotifiableDiagnosis,
               NonNotifiableDiagnosisRef.name AS stridfsNonNotifiableDiagnosis,
               hc.idfOutbreak,
               hc.strCaseId,
               hc.idfsCaseProgressStatus,
               hc.idfsSite,
               hc.strSampleNotes,
               hc.uidOfflineCaseID,
               hc.datFinalCaseClassificationDate,
               hc.idfHospital,
               hc.idfsYNSpecificVaccinationAdministered,
               hc.idfsNotCollectedReason,
               hc.strNotCollectedReason,
               hc.idfsYNPreviouslySoughtCare,
               hc.idfsYNExposureLocationKnown,
               hc.datEnteredDate,
               hc.datModificationDate,
               hc.idfsFinalDiagnosis AS idfsDiagnosis, --possible duplicate
               hc.idfsFinalState,
               hc.DiseaseReportTypeID,
               ReportTypeRef.name AS 'ReportType',
               hc.LegacyCaseID,
               hc.datFinalCaseClassificationDate AS DateofClassification,
               o.strOutbreakID,
               o.strDescription,
               h.strPersonId,
               h.datDateOfDeath,
               RegionRef.[name] AS Region,
               RayonRef.[name] AS Rayon,
               HumanAgeRef.[name] AS HumanAgeType,
               OutcomeRef.[name] AS Outcome,
               NonNotifiableDiagnosisRef.[name] AS NonNotifiableDiagnosis,
               NotCollectedReasonRef.[name] AS NotCollectedReason,
               CaseProgressStatusRef.[name] AS CaseProgressStatus,
               SpecificVaccinationAdministered.[name] AS YNSpecificVaccinationAdministered,
               PreviouslySoughtCareRef.[name] AS PreviouslySoughtCare,
               ExposureLocationKnown.[name] AS YNExposureLocationKnown,
               HospitalizationStatusRef.[name] AS HospitalizationStatus,
               Hospitalization.[name] AS YNHospitalization,
               AntimicrobialTherapy.[name] AS YNAntimicrobialTherapy,
               SpecimenCollection.[name] AS YNSpecimenCollected,
               RelatedToOutBreak.[name] AS YNRelatedToOutBreak,
               tentativeDiagnosisRef.[name] AS TentativeDiagnosis,
               FinalDiagnosis.[name] AS SummaryIdfsFinalDiagnosis,
               InitialCaseClassification.[name] AS InitialCaseStatus,
               FinalCaseClassification.[name] AS FinalCaseStatus,
               SentByOfficeRef.LongName AS SentByOffice,
               ReceivedByOfficeRef.LongName AS ReceivedByOffice,
               HospitalRef.LongName AS HospitalName,
               InvestigateByOfficeRef.LongName AS InvestigatedByOffice,
               TestConducted.[name] AS YNTestConducted,
               MonitoringSession.strMonitoringSessionID,
               ExposureLocationTypeRef.[name] AS ExposureLocationType,
               groundTypeRef.[name] AS strGroundType,
               gl.strDescription AS ExposureLocationDescription,
               ISNULL(FinalCaseClassification.[name], InitialCaseClassification.[name]) AS SummaryCaseClassification,
               ISNULL(sentByPersonRef.strFamilyName, N'') + ISNULL(' ' + sentByPersonRef.strFirstName, '')
               + ISNULL(' ' + sentByPersonRef.strSecondName, '') AS SentByPerson,
               ISNULL(receivedByPersonRef.strFamilyName, N'') + ISNULL(' ' + receivedByPersonRef.strFirstName, '')
               + ISNULL(' ' + receivedByPersonRef.strSecondName, '') AS ReceivedByPerson,
               ISNULL(investigatedByPersonRef.strFamilyName, N'')
               + ISNULL(' ' + investigatedByPersonRef.strFirstName, '')
               + ISNULL(' ' + investigatedByPersonRef.strSecondName, '') AS InvestigatedByPerson,
               dbo.fnConcatFullName(
                                       personEnteredByRef.strFamilyName,
                                       personEnteredByRef.strFirstName,
                                       personEnteredByRef.strSecondName
                                   ) AS EnteredByPerson,
               tlbEnteredByOffice.name AS strOfficeEnteredBy,
               tlbEnteredByOffice.idfOffice AS idfOfficeEnteredBy,
               SentByOfficeRef.name AS strNotificationSentby,
               '' AS strNotificationReceivedby,
               PatientState.[name] AS PatientStatus,
               CountryRef.[name] AS Country,
               SettlementRef.[name] AS Settlement,
               ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
               addinfo.EIDSSPersonID AS EIDSSPersonID,
               ha.idfHumanActual AS HumanActualId,
               initialSyndromicSurveielanceDiseases.blnSyndrome AS blnInitialSSD,
               finalSyndromicSurveielanceDiseases.blnSyndrome AS blnFinalSSD,
               relatedTo.RelateToHumanDiseaseReportID AS RelateToHumanDiseaseReportID,
               relatedToReport.strCaseID AS RelatedToHumanDiseaseEIDSSReportID,
               connectedTo.HumanDiseaseReportID AS ConnectedDiseaseReportID,
               connectedToReport.strCaseID AS ConnectedDiseaseEIDSSReportID
        FROM dbo.tlbHumanCase hc WITH (NOLOCK)
            LEFT JOIN dbo.tlbOutbreak AS o
                ON o.idfOutbreak = hc.idfOutbreak
            LEFT JOIN dbo.tlbHuman AS h
                ON h.idfHuman = hc.idfHuman
            LEFT JOIN dbo.tlbHumanActual AS ha
                ON ha.idfHumanActual = h.idfHumanActual
                   AND h.intRowStatus = 0
            LEFT JOIN dbo.HumanActualAddlInfo AS addinfo
                ON addinfo.HumanActualAddlInfoUID = h.idfHumanActual
                   AND addinfo.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation AS gl
                ON gl.idfGeoLocation = hc.idfPointGeoLocation
                   AND gl.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS sentByPersonRef
                ON sentByPersonRef.idfPerson = hc.idfSentByPerson
                   AND sentByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS receivedByPersonRef
                ON receivedByPersonRef.idfPerson = hc.idfReceivedByPerson
                   AND receivedByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS investigatedByPersonRef
                ON investigatedByPersonRef.idfPerson = hc.idfInvestigatedByPerson
                   AND investigatedByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS personEnteredByRef
                ON personEnteredByRef.idfPerson = hc.idfPersonEnteredBy
                   AND personEnteredByRef.intRowStatus = 0
            LEFT JOIN dbo.gisLocation L
                ON L.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS CountryRef
                ON L.node.IsDescendantOf(CountryRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS RegionRef
                ON L.node.IsDescendantOf(RegionRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS RayonRef
                ON L.node.IsDescendantOf(RayonRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS SettlementRef
                ON L.node.IsDescendantOf(SettlementRef.node) = 1
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042) AS HumanAgeRef
                ON HumanAgeRef.idfsReference = hc.idfsHumanAgeType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000064) AS OutcomeRef
                ON OutcomeRef.idfsReference = hc.idfsOutcome
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS FinalDiagnosis
                ON FinalDiagnosis.idfsReference = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011) AS InitialCaseClassification
                ON InitialCaseClassification.idfsReference = hc.idfsInitialCaseStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011) AS FinalCaseClassification
                ON FinalCaseClassification.idfsReference = hc.idfsFinalCaseStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000149) AS NonNotifiableDiagnosisRef
                ON NonNotifiableDiagnosisRef.idfsReference = hc.idfsNonNotifiableDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000144) AS ReportTypeRef
                ON ReportTypeRef.idfsReference = hc.DiseaseReportTypeID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS NotCollectedReasonRef
                ON NotCollectedReasonRef.idfsReference = hc.idfsNotCollectedReason
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000111) CaseProgressStatusRef
                ON CaseProgressStatusRef.idfsReference = hc.idfsCaseProgressStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS SpecificVaccinationAdministered
                ON SpecificVaccinationAdministered.idfsReference = hc.idfsYNSpecificVaccinationAdministered
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS PreviouslySoughtCareRef
                ON PreviouslySoughtCareRef.idfsReference = hc.idfsYNPreviouslySoughtCare
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS ExposureLocationKnown
                ON ExposureLocationKnown.idfsReference = hc.idfsYNExposureLocationKnown
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000041) AS HospitalizationStatusRef
                ON HospitalizationStatusRef.idfsReference = hc.idfsHospitalizationStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS Hospitalization
                ON Hospitalization.idfsReference = hc.idfsYNHospitalization
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS AntimicrobialTherapy
                ON AntimicrobialTherapy.idfsReference = hc.idfsYNAntimicrobialTherapy
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS SpecimenCollection
                ON SpecimenCollection.idfsReference = hc.idfsYNSpecimenCollected
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS RelatedToOutBreak
                ON RelatedToOutBreak.idfsReference = hc.idfsYNRelatedToOutbreak
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000036) AS ExposureLocationTypeRef
                ON ExposureLocationTypeRef.idfsReference = gl.idfsGeoLocationType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS tentativeDiagnosisRef
                ON tentativeDiagnosisRef.idfsReference = hc.idfsTentativeDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000038) AS groundTypeRef
                ON groundTypeRef.idfsReference = gl.idfsGroundType
            LEFT JOIN dbo.tlbOffice RBO
                ON RBO.idfOffice = hc.idfReceivedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) ReceivedByOfficeRef
                ON ReceivedByOfficeRef.idfsReference = RBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice IBO
                ON IBO.idfOffice = hc.idfInvestigatedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) InvestigateByOfficeRef
                ON InvestigateByOfficeRef.idfsReference = IBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice SBO
                ON SBO.idfOffice = hc.idfSentByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SentByOfficeRef
                ON SentByOfficeRef.idfsReference = SBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice SoughtByOffice
                ON SBO.idfOffice = hc.idfSoughtCareFacility
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SoughtByOfficeRef
                ON SoughtByOfficeRef.idfsReference = SoughtByOffice.idfsOfficeAbbreviation
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS TestConducted
                ON TestConducted.idfsReference = hc.idfsYNTestsConducted
            LEFT JOIN dbo.tlbMonitoringSession AS MonitoringSession
                ON MonitoringSession.idfMonitoringSession = hc.idfParentMonitoringSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000035) AS PatientState
                ON PatientState.idfsReference = hc.idfsFinalState
            LEFT JOIN dbo.tlbOffice Hospital
                ON Hospital.idfOffice = hc.idfHospital
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) HospitalRef
                ON HospitalRef.idfsReference = Hospital.idfsOfficeAbbreviation
            LEFT JOIN dbo.tstSite S
                ON S.idfsSite = hc.idfsSite
            LEFT JOIN dbo.FN_HUM_Institution_GET(@LangID) AS tlbEnteredByOffice
                ON tlbEnteredByOffice.idfOffice = S.idfOffice
                   AND tlbEnteredByOffice.idfsSite = hc.idfsSite
            LEFT JOIN dbo.trtDiagnosis AS finalSyndromicSurveielanceDiseases
                ON finalSyndromicSurveielanceDiseases.idfsDiagnosis = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.trtDiagnosis AS initialSyndromicSurveielanceDiseases
                ON initialSyndromicSurveielanceDiseases.idfsDiagnosis = hc.idfsTentativeDiagnosis
            LEFT JOIN dbo.HumanDiseaseReportRelationship relatedTo
                ON relatedTo.HumanDiseaseReportID = hc.idfHumanCase
                   AND relatedTo.intRowStatus = 0
                   AND relatedTo.RelationshipTypeID = 10503001
            LEFT JOIN dbo.tlbHumanCase relatedToReport
                ON relatedToReport.idfHumanCase = relatedTo.RelateToHumanDiseaseReportID
                   AND relatedToReport.intRowStatus = 0
            LEFT JOIN dbo.HumanDiseaseReportRelationship connectedTo
                ON connectedTo.RelateToHumanDiseaseReportID = hc.idfHumanCase
                   AND connectedTo.intRowStatus = 0
                   AND connectedTo.RelationshipTypeID = 10503001
            LEFT JOIN dbo.tlbHumanCase connectedToReport
                ON connectedToReport.idfHumanCase = connectedTo.HumanDiseaseReportID
                   AND connectedToReport.intRowStatus = 0
        WHERE hc.idfHumanCase = @SearchHumanCaseId
              OR @SearchHumanCaseId IS NULL;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_DISEASE_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_DISEASE_REPORT_GETList
--
-- Description: Get a list of human disease reports for the human module.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/26/2018 Added the person reported by name for the farm use case.
-- JWJ	            04/17/2018 Added extra col to return:  tlbHuman.idfHumanActual. Added alias 
--                             for region rayon to make them unique in results added report status 
--                             to results 
-- Harold Pryor     10/22/2018 Added input search parameters SearchStrPersonFirstName, 
--                             SearchStrPersonMiddleName, and SearchStrPersonLastName
-- Harold Pryor     10/31/2018 Added input search parameters SearchLegacyCaseID and	
--                             added strLocation (region, rayon) field to list result set
-- Harold Pryor     11/12/2018 Changed @SearchLegacyCaseID parameter from BIGINT to NVARCHAR(200)
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     07/07/2019 Added monitoring session ID to parameters and where clause.
-- Stephen Long     07/10/2019 Changed address join from exposure location to patient's current 
--                             residence address.
-- Stephen Long     07/19/2019 Corrected patient name and person entered by name ', '.
-- Stephen Long     02/26/2020 Added non-configurable site filtration rules.
-- Lamont Mitchell  03/03/2020 Modified all joins on human case and human to join on human actual.
-- Stephen Long     04/01/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Corrected the join on the rayon of the report current residence 
--                             address (human ID to human ID instead of human ID to human actual 
--                             ID).
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	11/16/2020 Added Outbreak Tied filtering
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2020 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     04/04/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	09/23/2021 Added HospitalizationStatus field
-- Stephen Long     11/03/2021 Added disease ID field.
-- Mike Kornegay	11/16/2021 Fix hospitalization field for translations
-- Mike Kornegay	12/07/2021 Added back EnteredByPersonName 
-- Mike Kornegay	12/08/2021 Swapped out FN_GBL_GIS_ReferenceRepair for new flat hierarchy
-- Mike Kornegay	12/23/2021 Fixed YN hospitalization where clause
-- Manickandan Govindarajan 03/21/2022  Rename Param PageNumber to Page
-- Stephen Long     03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay    06/06/2022 Added parameter OutcomeID.
-- Mike Kornegay	06/13/2022 Changed inner joins to left joins in final query because result set 
--                             was incorrect.
-- Stephen Long     08/14/2022 Added additional criteria for outbreak cases for laboratory module.
--                             TODO: replace filter outbreak cases parameter, and just filter in 
--                             the initial query to avoid getting extra unneeded records; also just 
--                             make it a boolean value.
-- Mark Wilson      09/01/2022 update to use denormalized locations to work with site filtration.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/11/2022 Move order by back to CTE row partition for performance and add 
--                             LanguageID to default filtration rule joins.
-- Stephen Long     11/02/2022 Fixes for 4599 - site filtration returning the wrong results.
-- Stephen Long     11/09/2022 Fix on where criteria when filtration is run; added groupings for 
--                             the user entered parameters from the search criteria page.
-- Ann Xiong		11/29/2022 Updated to return records correctly when filter by only 
--                             DateEnteredFrom or DateEnteredTo.
-- Ann Xiong		11/30/2022 Updated to return records including DateEnteredTo.
-- Stephen Long     01/09/2023 Updated for site filtration queries.
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US'
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US', @EIDSSReportID = 'H'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_DISEASE_REPORT_GETList]
    @LanguageID NVARCHAR(50),
    @ReportKey BIGINT = NULL,
    @ReportID NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @SessionKey BIGINT = NULL,
    @PatientID BIGINT = NULL,
    @PersonID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @ReportStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @HospitalizationYNID BIGINT = NULL,
    @PatientFirstName NVARCHAR(200) = NULL,
    @PatientMiddleName NVARCHAR(200) = NULL,
    @PatientLastName NVARCHAR(200) = NULL,
    @SentByFacilityID BIGINT = NULL,
    @ReceivedByFacilityID BIGINT = NULL,
    @DiagnosisDateFrom DATETIME = NULL,
    @DiagnosisDateTo DATETIME = NULL,
    @LocalOrFieldSampleID NVARCHAR(200) = NULL,
    @DataEntrySiteID BIGINT = NULL,
    @DateOfSymptomsOnsetFrom DATETIME = NULL,
    @DateOfSymptomsOnsetTo DATETIME = NULL,
    @NotificationDateFrom DATETIME = NULL,
    @NotificationDateTo DATETIME = NULL,
    @DateOfFinalCaseClassificationFrom DATETIME = NULL,
    @DateOfFinalCaseClassificationTo DATETIME = NULL,
    @LocationOfExposureAdministrativeLevelID BIGINT = NULL,
    @OutcomeID BIGINT = NULL,
    @FilterOutbreakTiedReports INT = 0,
    @OutbreakCasesIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @Page INT = 1,
    @PageSize INT = 10
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT,
            @lastRec INT,
            @FiltrationSiteAdministrativeLevelID AS BIGINT,
            @LanguageCode AS BIGINT = dbo.FN_GBL_LanguageCode_GET(@LanguageID);
    SET @firstRec = (@Page - 1) * @PageSize
    SET @lastRec = (@Page * @PageSize + 1);

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO CONFIGURABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = @LanguageCode
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = @LanguageCode
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          hc.datEnteredDate >= @DateEnteredFrom
                          OR @DateEnteredFrom IS NULL
                      )
                  AND (
                          (convert(date, hc.datEnteredDate, 102) <= @DateEnteredTo)
                          OR @DateEnteredTo IS NULL
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase;
        END
        ELSE
        BEGIN -- Configurable Filtration Rules
            DECLARE @InitialFilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator INT NOT NULL,
                AccessToPersonalDataPermissionIndicator INT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
                WritePermissionIndicator INT NOT NULL,
                DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            INSERT INTO @InitialFilteredResults
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
            WHERE hc.intRowStatus = 0
                  AND hc.idfsSite = @UserSiteID;

            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM @InitialFilteredResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = @LanguageCode
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = @LanguageCode
            WHERE hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          hc.datEnteredDate >= @DateEnteredFrom
                          OR @DateEnteredFrom IS NULL
                      )
                  AND (
                          (convert(date, hc.datEnteredDate, 102) <= @DateEnteredTo)
                          OR @DateEnteredTo IS NULL
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase;

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator INT NOT NULL,
                AccessToPersonalDataPermissionIndicator INT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
                WritePermissionIndicator INT NOT NULL,
                DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply active default filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator INT NOT NULL,
                AccessToPersonalDataPermissionIndicator INT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
                WritePermissionIndicator INT NOT NULL,
                DeletePermissionIndicator INT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537000;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537000;

                SELECT @FiltrationSiteAdministrativeLevelID = CASE
                                                                  WHEN @AdministrativeLevelTypeID = 1 THEN
                                                                      g.Level1ID
                                                                  WHEN @AdministrativeLevelTypeID = 2 THEN
                                                                      g.Level2ID
                                                                  WHEN @AdministrativeLevelTypeID = 3 THEN
                                                                      g.Level3ID
                                                                  WHEN @AdministrativeLevelTypeID = 4 THEN
                                                                      g.Level4ID
                                                                  WHEN @AdministrativeLevelTypeID = 5 THEN
                                                                      g.Level5ID
                                                                  WHEN @AdministrativeLevelTypeID = 6 THEN
                                                                      g.Level6ID
                                                                  WHEN @AdministrativeLevelTypeID = 7 THEN
                                                                      g.Level7ID
                                                              END
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                WHERE o.intRowStatus = 0
                      AND o.idfOffice = @UserOrganizationID;

                -- Administrative level specified in the rule of the site where the report was created.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tstSite s
                        ON h.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                           AND o.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )

                -- Administrative level specified in the rule of the report current residence address.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbHuman hu
                        ON hu.idfHuman = h.idfHuman
                           AND hu.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )

                -- Administrative level specified in the rule of the report location of exposure, 
                -- if corresponding field was filled in.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfPointGeoLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )
            END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            --
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            ----
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          ha.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          hc.datEnteredDate >= @DateEnteredFrom
                          OR @DateEnteredFrom IS NULL
                      )
                  AND (
                          (convert(date, hc.datEnteredDate, 102) <= @DateEnteredTo)
                          OR @DateEnteredTo IS NULL
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        IF @FilterOutbreakTiedReports = 1
        BEGIN
            DELETE I
            FROM @Results I
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = I.ID
            WHERE hc.idfOutbreak IS NOT NULL;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without disease filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE hc.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
        GROUP BY hc.idfHumanCase;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
        GROUP BY hc.idfHumanCase;

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE hc.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
        );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE hc.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbHumanCase hc
        WHERE hc.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = hc.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = hc.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = hc.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbHumanCase hc
        WHERE hc.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = hc.idfsSite
        );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = hc.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbHumanActual ha
                ON ha.idfHumanActual = h.idfHumanActual
                   AND ha.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
                   AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
                   AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                      g.Level1ID = @AdministrativeLevelID
                      OR g.Level2ID = @AdministrativeLevelID
                      OR g.Level3ID = @AdministrativeLevelID
                      OR g.Level4ID = @AdministrativeLevelID
                      OR g.Level5ID = @AdministrativeLevelID
                      OR g.Level6ID = @AdministrativeLevelID
                      OR g.Level7ID = @AdministrativeLevelID
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      hc.datEnteredDate >= @DateEnteredFrom
                      OR @DateEnteredFrom IS NULL
                  )
              AND (
                      (CONVERT(date, hc.datEnteredDate, 102) <= @DateEnteredTo)
                      OR @DateEnteredTo IS NULL
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
              AND (
                      g.Level1ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                      OR @LocationOfExposureAdministrativeLevelID IS NULL
                  )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
                      (
                          hc.idfOutbreak IS NULL
                          AND @OutbreakCasesIndicator = 0
                      )
                      OR (
                             hc.idfOutbreak IS NOT NULL
                             AND @OutbreakCasesIndicator = 1
                         )
                      OR (@OutbreakCasesIndicator IS NULL)
                  )
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
              AND (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY ID;

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.strCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.strCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.datEnteredDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.datEnteredDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                                                       + ISNULL(' ' + h.strSecondName, N'')
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                                                       + ISNULL(' ' + h.strSecondName, N'')
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonLocation'
                                                        AND @SortOrder = 'ASC' THEN
                                               (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonLocation'
                                                        AND @SortOrder = 'DESC' THEN
                                               (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       finalClassification.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       finalClassification.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       reportStatus.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       reportStatus.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.LegacyCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.LegacyCaseID
                                               END DESC
                                     ) AS ROWNUM,
                   res.ID AS ReportKey,
                   hc.strCaseId AS ReportID,
                   hc.LegacyCaseID AS LegacyReportID,
                   reportStatus.name AS ReportStatusTypeName,
                   reportType.name AS ReportTypeName,
                   hc.datTentativeDiagnosisDate AS TentativeDiagnosisDate,
                   hc.datFinalDiagnosisDate AS FinalDiagnosisDate,
                   ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
                   finalClassification.name AS FinalClassificationTypeName,
                   hc.datOnSetDate AS DateOfOnset,
                   hc.idfsFinalDiagnosis AS DiseaseID,
                   disease.Name AS DiseaseName,
                   h.idfHumanActual AS PersonMasterID,
                   hc.idfHuman AS PersonKey,
                   haai.EIDSSPersonID AS PersonID,
                   h.strPersonID AS PersonalID,
                   dbo.FN_GBL_ConcatFullName(h.strLastName, h.strFirstName, h.strSecondName) AS PersonName,
                   ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
                   + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
                   ha.strEmployerName AS EmployerName,
                   hc.datEnteredDate AS EnteredDate,
                   ISNULL(p.strFamilyName, N'') + ISNULL(', ' + p.strFirstName, N'')
                   + ISNULL(' ' + p.strSecondName, N'') AS EnteredByPersonName,
                   hc.datModificationDate AS ModificationDate,
                   ISNULL(hospitalization.name, hospitalization.strDefault) AS HospitalizationStatus,
                   hc.idfsSite AS SiteID,
                   res.ReadPermissionIndicator AS ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator AS AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator AS AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator AS WritePermissionIndicator,
                   res.DeletePermissionIndicator AS DeletePermissionIndicator,
                   COUNT(*) OVER () AS RecordCount,
                   (
                       SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
                   ) AS TotalCount,
                   LH.AdminLevel2Name AS Region,
                   LH.AdminLevel3Name AS Rayon
            FROM @FinalResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                       AND haai.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
                    ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                    ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                    ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType
                    ON reportType.idfsReference = hc.DiseaseReportTypeID
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000041) hospitalization
                    ON hospitalization.idfsReference = idfsHospitalizationStatus
                LEFT JOIN dbo.tlbPerson p
                    ON p.idfPerson = hc.idfPersonEnteredBy
                       AND p.intRowStatus = 0
           )
        SELECT ReportKey,
               ReportID,
               LegacyReportID,
               ReportStatusTypeName,
               ReportTypeName,
               TentativeDiagnosisDate,
               FinalDiagnosisDate,
               ClassificationTypeName,
               FinalClassificationTypeName,
               DateOfOnset,
               DiseaseID,
               DiseaseName,
               PersonMasterID,
               PersonKey,
               PersonID,
               PersonalID,
               PersonName,
               PersonLocation,
               EmployerName,
               EnteredDate,
               EnteredByPersonName,
               ModificationDate,
               HospitalizationStatus,
               SiteID,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               RecordCount,
               TotalCount,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0),
               CurrentPage = @Page,
               Region,
               Rayon
        FROM paging
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_ID]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_ID 
--
-- Description:	Get a human  record details from Human ID
--          
-- Revision History:
-- Name            Date			Change Detail
-- --------------- ----------	--------------------------------------------------------------------
-- Mandar Kulkarni				Initial release.
-- Vilma Thomas		05/25/2018	Update the ReferenceType key from 19000167 to 19000500 for 'Contact 
--								Phone Type'
-- Stephen Long		11/26/2018	Update for the new API; remove returnCode and returnMsg.
-- Ann Xiong		08/30/2019	Added script to select PersonalIDTypeName, OccupationTypeName, 
--								SchoolCountry, 
--								SchoolRegion, SchoolRayon, SchoolSettlement for Person Deduplication.
-- Ann Xiong		09/09/2019	return haai.SchoolAddressID instead of haai.AltAddressID as 
--								SchoolGeoLocationID
-- Mark Wilson		10/29/2019	added Settlement Type to return
-- Ann Xiong		02/17/2020	Added IsAnotherPhone and Age to select
-- Ann Xiong		05/08/2020	Added YNAnotherAddress, YNHumanForeignAddress, 
--								YNEmployerForeignAddress, YNHumanAltForeignAddress, 
--								YNSchoolForeignAddress, YNWorkSameAddress to select
-- Stephen Long		07/07/2020	Changed v6.1 function call for create address string to v7 version.
-- Lamont Mitchell	10/18/2020	Modified to use Human ID instead of HumanActual ID fto get letest Human Records
-- Mark Wilson		09/21/2021	reworked the locations to use gisLocation and hierarchy
-- Mike Kornegay	01/31/2023	Corrected contact information to point to HumanAddlInfo instead of HumanActualAddlInfo
--
-- Sample code:
/*
EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_ID
	'en-US',
	203840000126



*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_ID] (
	@LanguageID NVARCHAR(20),
	@HumanID BIGINT
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		SELECT ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
			ha.idfHumanActual AS HumanActualId,
			hm.idfHuman AS HumanId,
			ha.strPersonID AS EIDSSPersonID,
			hm.idfsOccupationType AS OccupationTypeID,
			hm.idfsNationality AS CitizenshipTypeID,
			citizenshipType.name AS CitizenshipTypeName,
			hm.idfsHumanGender AS GenderTypeID,
			tb.name AS GenderTypeName,
			hm.idfCurrentResidenceAddress AS HumanGeoLocationID,
			tglHuman.idfsCountry AS HumanidfsCountry,
			humanCountry.name AS HumanCountry,
			tglHuman.idfsRegion AS HumanidfsRegion,
			humanRegion.name AS HumanRegion,
			tglHuman.idfsRayon AS HumanidfsRayon,
			humanRayon.name AS HumanRayon,
			tglHuman.idfsSettlement AS HumanidfsSettlement,
			humanSettlement.name AS HumanSettlement,
			humanSettlement.idfsType AS HumanidfsSettlementType,
			humanSettlementType.strDefault AS HumanSettlementType,
			tglHuman.strPostCode AS HumanstrPostalCode,
			tglHuman.strStreetName AS HumanstrStreetName,
			tglHuman.strHouse AS HumanstrHouse,
			tglHuman.strBuilding AS HumanstrBuilding,
			tglHuman.strApartment AS HumanstrApartment,
			tglHuman.strDescription AS HumanDescription,
			tglHuman.dblLatitude AS HumanstrLatitude,
			tglHuman.dblLongitude AS HumanstrLongitude,
			tglHuman.blnForeignAddress AS HumanForeignAddressIndicator,
			tglHuman.strForeignAddress AS HumanForeignAddressString,
			hm.idfEmployerAddress AS EmployerGeoLocationID,
			ECountry.idfsReference AS EmployeridfsCountry,
			ECountry.[name] AS EmployerCountry,
			ERegion.idfsReference AS EmployeridfsRegion,
			ERegion.[name] AS EmployerRegion,
			ERayon.idfsReference AS EmployeridfsRayon,
			ERayon.[name] AS EmployerRayon,
			ESettlement.idfsReference AS EmployeridfsSettlement,
			ESettlement.[name] AS EmployerSettlement,
			ESettlement.idfsType AS EmployeridfsSettlementType,
			EmpSettlementType.strDefault AS EmployerSettlementType,
			tglEmployer.strPostCode AS EmployerstrPostalCode,
			tglEmployer.strStreetName AS EmployerstrStreetName,
			tglEmployer.strHouse AS EmployerstrHouse,
			tglEmployer.strBuilding AS EmployerstrBuilding,
			tglEmployer.strApartment AS EmployerstrApartment,
			tglEmployer.strDescription AS EmployerDescription,
			tglEmployer.dblLatitude AS EmployerstrLatitude,
			tglEmployer.dblLongitude AS EmployerstrLongitude,
			tglEmployer.blnForeignAddress AS EmployerForeignAddressIndicator,
			tglEmployer.strForeignAddress AS EmployerForeignAddressString,
			hm.idfRegistrationAddress AS HumanAltGeoLocationID,
			registrationCountry.idfsReference AS HumanAltidfsCountry,
			registrationCountry.[name] AS HumanAltCountry,
			registrationRegion.idfsReference AS HumanAltidfsRegion,
			registrationRegion.[name] AS HumanAltRegion,
			registrationRayon.idfsReference AS HumanAltidfsRayon,
			registrationRayon.[name] AS HumanAltRayon,
			registrationSettlement.idfsReference HumanAltidfsSettlement,
			registrationSettlement.[name] AS HumanAltSettlement,
			registrationSettlement.idfsType AS HumanAltidfsSettlementType,
			registrationSettlementType.[name] AS HumanAltSettlementType,
			tglRegistrationAddress.strPostCode AS HumanAltstrPostalCode,
			tglRegistrationAddress.strStreetName AS HumanAltstrStreetName,
			tglRegistrationAddress.strHouse AS HumanAltstrHouse,
			tglRegistrationAddress.strBuilding AS HumanAltstrBuilding,
			tglRegistrationAddress.strApartment AS HumanAltstrApartment,
			tglRegistrationAddress.strDescription AS HumanAltDescription,
			tglRegistrationAddress.dblLatitude AS HumanAltstrLatitude,
			tglRegistrationAddress.dblLongitude AS HumanAltstrLongitude,
			tglRegistrationAddress.blnForeignAddress AS HumanAltForeignAddressIndicator,
			tglRegistrationAddress.strForeignAddress AS HumanAltForeignAddressString,
			haai.SchoolAddressID AS SchoolGeoLocationID,
			schoolCountry.idfsReference AS SchoolidfsCountry,
			schoolRegion.idfsReference AS SchoolidfsRegion,
			schoolRayon.idfsReference AS SchoolidfsRayon,
			schoolSettlement.idfsReference AS SchoolidfsSettlement,
			schoolSettlement.idfsType AS SchoolAltidfsSettlementType,
			SchoolSettlementType.strDefault AS SchoolAltSettlementType,
			tglSchool.strPostCode AS SchoolstrPostalCode,
			tglSchool.strStreetName AS SchoolstrStreetName,
			tglSchool.strHouse AS SchoolstrHouse,
			tglSchool.strBuilding AS SchoolstrBuilding,
			tglSchool.strApartment AS SchoolstrApartment,
			tglSchool.blnForeignAddress AS SchoolForeignAddressIndicator,
			tglSchool.strForeignAddress AS SchoolForeignAddressString,
			dbo.FN_GBL_FormatDate(ha.datDateofBirth, 'mm/dd/yyyy') AS DateOfBirth,
			dbo.FN_GBL_FormatDate(ha.datDateOfDeath, 'mm/dd/yyyy') AS DateOfDeath,
			dbo.FN_GBL_FormatDate(ha.datEnteredDate, 'mm/dd/yyyy') AS EnteredDate,
			dbo.FN_GBL_FormatDate(ha.datModificationDate, 'mm/dd/yyyy') AS ModificationDate,
			hm.strFirstName AS FirstOrGivenName,
			hm.strSecondName AS SecondName,
			hm.strLastName AS LastOrSurname,
			hm.strEmployerName AS EmployerName,
			hm.strHomePhone AS HomePhone,
			hm.strWorkPhone AS WorkPhone,
			hm.idfsPersonIDType AS PersonalIDType,
			ha.strPersonID AS PersonalID,
			haai.ReportedAge,
			haai.ReportedAgeUOMID,
			haai.PassportNbr AS PassportNumber,
			haai.IsEmployedID AS IsEmployedTypeID,
			isEmployed.name AS IsEmployedTypeName,
			haai.EmployerPhoneNbr AS EmployerPhone,
			haai.EmployedDTM AS EmployedDateLastPresent,
			haai.IsStudentID AS IsStudentTypeID,
			isStudent.name AS IsStudentTypeName,
			haai.SchoolName AS SchoolName,
			haai.SchoolLastAttendDTM AS SchoolDateLastAttended,
			haai.SchoolPhoneNbr AS SchoolPhone,
			haai.ContactPhoneCountryCode,
			haai.ContactPhoneNbr AS ContactPhone,
			haai.ContactPhoneNbrTypeID AS ContactPhoneTypeID,
			ContactPhoneNbrTypeID.name AS ContactPhoneTypeName,
			haai.ContactPhone2CountryCode,
			haai.ContactPhone2Nbr AS ContactPhone2,
			haai.ContactPhone2NbrTypeID AS ContactPhone2TypeID,
			ContactPhone2NbrTypeID.name AS ContactPhone2TypeName,
			personalIDType.name AS PersonalIDTypeName,
			occupationType.name AS OccupationTypeName,
			schoolCountry.name AS SchoolCountry,
			schoolRegion.name AS SchoolRegion,
			schoolRayon.name AS SchoolRayon,
			schoolSettlement.name AS SchoolSettlement,
			CASE 
				WHEN haai.ContactPhone2Nbr IS NULL
					AND haai.ContactPhone2NbrTypeID IS NULL
					THEN 'No'
				ELSE 'Yes'
				END AS IsAnotherPhone,
			CAST(ISNULL(haai.ReportedAge, '') AS VARCHAR(3)) + ' ' + ISNULL(HumanAgeType.name, '') AS Age,
			CASE 
				WHEN hm.idfRegistrationAddress IS NOT NULL
					AND hm.idfRegistrationAddress > 0
					THEN 'Yes'
				ELSE 'No'
				END AS YNAnotherAddress,
			CASE 
				WHEN tglHuman.blnForeignAddress IS NOT NULL
					AND tglHuman.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanForeignAddress,
			CASE 
				WHEN tglEmployer.blnForeignAddress IS NOT NULL
					AND tglEmployer.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNEmployerForeignAddress,
			CASE 
				WHEN tglRegistrationAddress.blnForeignAddress IS NOT NULL
					AND tglRegistrationAddress.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanAltForeignAddress,
			CASE 
				WHEN tglSchool.blnForeignAddress IS NOT NULL
					AND tglSchool.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNSchoolForeignAddress,
			CASE 
				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(humanCountry.name, N''), ISNULL(humanRegion.name, N''), ISNULL(humanRayon.name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(humanSettlement.name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = dbo.FN_GBL_CreateAddressString(ISNULL(ECountry.name, N''), ISNULL(ERegion.name, N''), ISNULL(ERayon.name, N''), ISNULL(tglEmployer.strPostCode, N''), ISNULL(EmpSettlementType.strDefault, N''), ISNULL(ESettlement.name, N''), ISNULL(tglEmployer.strStreetName, N''), ISNULL(tglEmployer.strHouse, N''), ISNULL(tglEmployer.strBuilding, N''), ISNULL(tglEmployer.strApartment, N''), ISNULL(tglEmployer.blnForeignAddress, N''), ISNULL(tglEmployer.strForeignAddress, N''))
					THEN 'Yes'
				ELSE 'No'
				END AS YNWorkSameAddress
		FROM dbo.tlbHuman hm
		JOIN dbo.tlbHumanActual ha ON ha.idfHumanActual = hm.idfHumanActual
		LEFT JOIN dbo.HumanAddlinfo haai ON hm.idfHuman = haai.HumanAdditionalInfo
		LEFT JOIN dbo.tlbGeoLocation AS tglHuman ON hm.idfCurrentResidenceAddress = tglHuman.idfGeoLocation
		LEFT JOIN dbo.tlbGeoLocation AS tglEmployer ON hm.idfEmployerAddress = tglEmployer.idfGeoLocation
		LEFT JOIN dbo.tlbGeoLocation AS tglRegistrationAddress ON hm.idfRegistrationAddress = tglRegistrationAddress.idfGeoLocation
		LEFT JOIN dbo.tlbGeoLocation AS tglSchool ON haai.SchoolAddressID = tglSchool.idfGeoLocation
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000043) tb ON tb.idfsReference = ha.idfsHumanGender

		-- joined to get human location
		LEFT JOIN dbo.gisLocation HL ON HL.idfsLocation = tglHuman.idfsLocation
		-- changed to FN_GBL_GIS_ReferenceRepair_GET from FN_GBL_GIS_Reference_GET
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000001) AS humanCountry ON HL.node.IsDescendantOf(humanCountry.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000003) AS humanRegion ON HL.node.IsDescendantOf(humanRegion.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000002) AS humanRayon ON HL.node.IsDescendantOf(humanRayon.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) AS humanSettlement ON HL.node.IsDescendantOf(humanSettlement.node) = 1
		-- MCW added to get Human settlement type
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LanguageID, 19000005) AS humanSettlementType ON humanSettlementType.idfsReference = humanSettlement.idfsType

		-- Employer location information
		LEFT JOIN dbo.gisLocation EA ON EA.idfsLocation = tglEmployer.idfsLocation
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000001) AS ECountry ON EA.node.IsDescendantOf(Ecountry.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000003) AS ERegion ON EA.node.IsDescendantOf(ERegion.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000002) AS ERayon ON EA.node.IsDescendantOf(ERayon.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) AS ESettlement ON EA.node.IsDescendantOf(ESettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LanguageID, 19000005) AS EmpSettlementType ON EmpSettlementType.idfsReference = ESettlement.idfsType

		-- Registration information
		-- Employer location information
		LEFT JOIN dbo.gisLocation registrationLocation ON registrationLocation.idfsLocation = tglRegistrationAddress.idfsLocation
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000001) AS registrationCountry ON registrationLocation.node.IsDescendantOf(registrationCountry.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000003) AS registrationRegion ON registrationLocation.node.IsDescendantOf(registrationRegion.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000002) AS registrationRayon ON registrationLocation.node.IsDescendantOf(registrationRayon.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) AS registrationSettlement ON registrationLocation.node.IsDescendantOf(registrationSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LanguageID, 19000005) AS registrationSettlementType ON registrationSettlementType.idfsReference = registrationSettlement.idfsType

		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000100) isEmployed ON IsEmployed.idfsReference = haai.IsEmployedID
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000100) isStudent ON isStudent.idfsReference = haai.IsStudentID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000054) AS citizenshipType ON ha.idfsNationality = citizenshipType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000500) AS contactPhoneNbrTypeID ON contactPhoneNbrTypeID.idfsReference = haai.ContactPhoneNbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000500) AS contactPhone2NbrTypeID ON contactPhone2NbrTypeID.idfsReference = haai.ContactPhone2NbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000148) AS personalIDType ON ha.idfsPersonIDType = personalIDType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000061) AS occupationType ON ha.idfsOccupationType = occupationType.idfsReference

		-- school information
		LEFT JOIN dbo.gisLocation SchoolLocation ON SchoolLocation.idfsLocation = tglSchool.idfsLocation
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000001) AS schoolCountry ON SchoolLocation.node.IsDescendantOf(schoolCountry.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000003) AS schoolRegion ON SchoolLocation.node.IsDescendantOf(schoolRegion.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000002) AS schoolRayon ON SchoolLocation.node.IsDescendantOf(schoolRayon.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) AS schoolSettlement ON SchoolLocation.node.IsDescendantOf(schoolSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LanguageID, 19000005) AS schoolSettlementType ON schoolSettlementType.idfsReference = schoolSettlement.idfsType

		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000042) AS HumanAgeType ON haai.ReportedAgeUOMID = HumanAgeType.idfsReference
		
		WHERE hm.idfHuman = @HumanID;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_GETList
--
-- Description: Get human actual list for human, laboratory and veterinary modules.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/13/2018 Added additional address fields.
-- Stephen Long     08/23/2018 Added EIDSS person ID to list.
-- Stephen Long     09/26/2018 Added wildcard to the front of fields using the wildcard symbol, as 
--                             per use case.
-- Stephen Long		09/28/2018 Added order by and total records, as per use case.
-- Stephen Long     11/26/2018 Updated for the new API; removed returnCode and returnMsg. Total 
--                             records will need to be handled differently.
-- Stephen Long     12/14/2018 Added pagination set, page size and max pages per fetch parameters
--                             and fetch portion.
-- Stephen Long     12/30/2018 Renamed to master so the human get list stored procedure can query 
--                             the human table which is needed for the lab module instead of human 
--                             actual.
-- Stephen Long     01/18/2019 Changed date of birth to date of birth range, and duplicate check.
-- Stephen Long     04/08/2019 Changed full name from first name last name second name to last 
--                             name ', ' first name and then second name.
-- Stephen Long     07/07/2019 Added settlement ID and settlement name to select.
-- Ann Xiong	    10/29/2019 added PassportNumber to return
-- Ann Xiong		01/15/2020 Used humanAddress.strAddressString instead of 
--                             humanAddress.strForeignAddress for AddressString
-- Stephen Long     01/28/2021 Added order by clause to handle user selected sorting across 
--                             pagination sets.
-- Doug Albanese	06/11/2021 Refactored to conform to the new filtering requirements and return structure for our gridview.
-- Mark Wilson		10/05/2021 updated for changes to DOB rules, location udpates, etc...
-- Mark Wilson		10/26/2021 changed to nolock...
-- Ann Xiong		12/03/2021 Changed ha.datDateofBirth AS DateOfBirth to CONVERT(char(10), ha.datDateofBirth,126) AS DateOfBirth
-- Mike Kornegay	12/10/2021 Changed procedure to use denormailized location table function.
-- Mike Kornegay	01/12/2022 Swapped where condition referring to gisLocation for new flat location hierarchy and corrected ISNULL
--							   check on PersonalTypeID and fixed where statements on left joins.
-- Mike Kornegay	04/27/2022 Added AddressID and ContactPhoneNbrTypeID to revert fields after accidental alter.
-- Mike Kornegay	05/06/2022 Changed inner join to left join on FN_GBL_LocationHierarchy_Flattened so results return if location is not
--								in FN_GBL_LocationHierarchy_Flattened.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Stephen Long     10/10/2022 Added monitoring session ID parameter and where criteria.
-- Ann Xiong		11/10/2022 Added SettlementTypeID parameter and where criteria. 
--
/*Test Code

EXEC dbo.USP_HUM_HUMAN_MASTER_GETList
	@LangID = 'en-US',
	@FirstOrGivenName = 'a',
--	@idfsLocation = 1344330000000 -- region = Baku
	@idfsLocation = 4720500000000  -- Rayon = Pirallahi (Baku)

EXEC dbo.USP_HUM_HUMAN_MASTER_GETList
	@LangID = 'en-US',
	@FirstOrGivenName = 'a',
    @DateOfBirthFrom = '2010-12-30 00:00:00.000',
    @DateOfBirthTo = '2012-12-30 00:00:00.000',
	--@idfsLocation = 1344330000000, -- region = Baku
	@idfsLocation = 1344380000000, -- Rayon = Khatai (Baku)
	@pageSize = 50000 
---------

DECLARE @return_value int

EXEC    @return_value = [dbo].[USP_HUM_HUMAN_MASTER_GETList]
        @LangID = N'en-US',
        @EIDSSPersonID = NULL,
        @PersonalIDType = NULL,
        @PersonalID = NULL,
        @FirstOrGivenName = 'a',
        @SecondName = NULL,
        @LastOrSurname = NULL,
        @DateOfBirthFrom = '1976-02-04 00:00:00.000',
        @DateOfBirthTo = '1980-02-04 00:00:00.000',
        @GenderTypeID = NULL,
		@idfsLocation = 1344330000000, -- region = Baku
        @pageNo = 1,
        @pageSize = 10,
        @sortColumn = N'EIDSSPersonID',
        @sortOrder = N'asc'

SELECT  @return_value
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETList]
(
    @LangID NVARCHAR(50),
    @EIDSSPersonID NVARCHAR(200) = NULL,
    @PersonalIDType BIGINT = NULL,
    @PersonalID NVARCHAR(100) = NULL,
    @FirstOrGivenName NVARCHAR(200) = NULL,
    @SecondName NVARCHAR(200) = NULL,
    @LastOrSurname NVARCHAR(200) = NULL,
    @DateOfBirthFrom DATETIME = NULL,
    @DateOfBirthTo DATETIME = NULL,
    @GenderTypeID BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @SettlementTypeID BIGINT = NULL,
    @pageNo INT = 1,
    @pageSize INT = 10,
    @sortColumn NVARCHAR(30) = 'EIDSSPersonID',
    @sortOrder NVARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @firstRec INT
        DECLARE @lastRec INT

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        DECLARE @DOB DATETIME = NULL

        IF (@DateOfBirthTo IS NOT NULL AND @DateOfBirthTo = @DateOfBirthFrom)
            SET @DOB = @DateOfBirthFrom

        SET @firstRec = (@pageNo - 1) * @pagesize
        SET @lastRec = (@pageNo * @pageSize + 1);

        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @sortColumn = 'EIDSSPersonID'
                                                        AND @SortOrder = 'asc' THEN
                                                       hai.EIDSSPersonID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'EIDSSPersonID'
                                                        AND @SortOrder = 'desc' THEN
                                                       hai.EIDSSPersonID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'LastOrSurname'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strLastName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'LastOrSurname'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strLastName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FirstOrGivenName'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strFirstName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FirstOrGivenName'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strFirstName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonalID'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strPersonID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonalID'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strPersonID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonIDTypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       idType.name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonIDTypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       idType.name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PassportNumber'
                                                        AND @SortOrder = 'asc' THEN
                                                       hai.PassportNbr
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PassportNumber'
                                                        AND @SortOrder = 'desc' THEN
                                                       hai.PassportNbr
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'GenderTypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       genderType.name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'GenderTypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       genderType.name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'RayonName'
                                                        AND @SortOrder = 'asc' THEN
                                                       LH.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'RayonName'
                                                        AND @SortOrder = 'desc' THEN
                                                       LH.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'DateOfBirth'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.datDateofBirth
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'DateOfBirth'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.datDateofBirth
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   ha.idfHumanActual AS HumanMasterID,
                   hai.EIDSSPersonID AS EIDSSPersonID,
                   ha.idfCurrentResidenceAddress AS AddressID,
                   ha.strFirstName AS FirstOrGivenName,
                   ha.strSecondName AS SecondName,
                   ha.strLastName AS LastOrSurname,
                   dbo.FN_GBL_ConcatFullName(ha.strLastName, ha.strFirstName, ha.strSecondName) AS FullName,
                   CONVERT(CHAR(10), ha.datDateofBirth, 126) AS DateOfBirth,
                   ha.strPersonID AS PersonalID,
                   ISNULL(idType.[name], idType.strDefault) AS PersonIDTypeName,
                   humanAddress.strStreetName AS StreetName,
                   dbo.FN_GBL_CreateAddressString(
                                                     LH.AdminLevel1Name,
                                                     LH.AdminLevel2Name,
                                                     LH.AdminLevel3Name,
                                                     humanAddress.strPostCode,
                                                     '',
                                                     LH.AdminLevel4Name,
                                                     humanAddress.strStreetName,
                                                     humanAddress.strHouse,
                                                     humanAddress.strBuilding,
                                                     humanAddress.strApartment,
                                                     humanAddress.blnForeignAddress,
                                                     ''
                                                 ) AS AddressString,
                   (CONVERT(NVARCHAR(100), humanAddress.dblLatitude) + ', '
                    + CONVERT(NVARCHAR(100), humanAddress.dblLongitude)
                   ) AS LongitudeLatitude,
                   hai.ContactPhoneCountryCode AS ContactPhoneCountryCode,
                   hai.ContactPhoneNbr AS ContactPhoneNumber,
                   hai.ContactPhoneNbrTypeID AS ContactPhoneNbrTypeID,
                   hai.ReportedAge AS Age,
                   hai.PassportNbr AS PassportNumber,
                   ha.idfsNationality AS CitizenshipTypeID,
                   citizenshipType.[name] AS CitizenshipTypeName,
                   ha.idfsHumanGender AS GenderTypeID,
                   genderType.[name] AS GenderTypeName,
                   humanAddress.idfsCountry AS CountryID,
                   LH.AdminLevel1Name AS CountryName,
                   LH.AdminLevel2ID AS RegionID,
                   LH.AdminLevel2Name AS RegionName,
                   LH.AdminLevel3ID AS RayonID,
                   LH.AdminLevel3Name AS RayonName,
                   humanAddress.idfsSettlement AS SettlementID,
                   LH.AdminLevel4Name AS SettlementName,
                   dbo.FN_GBL_CreateAddressString(
                                                     LH.AdminLevel1Name,
                                                     LH.AdminLevel2Name,
                                                     LH.AdminLevel3Name,
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     humanAddress.blnForeignAddress,
                                                     humanAddress.strForeignAddress
                                                 ) AS FormattedAddressString
            FROM dbo.tlbHumanActual AS ha WITH (NOLOCK)
                INNER JOIN dbo.HumanActualAddlInfo hai WITH (NOLOCK)
                    ON ha.idfHumanActual = hai.HumanActualAddlInfoUID
                       AND hai.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043) AS genderType
                    ON ha.idfsHumanGender = genderType.idfsReference
                       AND genderType.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000148) AS idType
                    ON ha.idfsPersonIDType = idType.idfsReference
                       AND idType.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000054) AS citizenshipType
                    ON ha.idfsNationality = citizenshipType.idfsReference
                       AND citizenshipType.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocationShared humanAddress WITH (NOLOCK)
                    ON ha.idfCurrentResidenceAddress = humanAddress.idfGeoLocationShared
                       AND humanAddress.intRowStatus = 0
                LEFT JOIN dbo.gisLocation L WITH (NOLOCK)
                    ON L.idfsLocation = humanAddress.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LangID) LH
                    ON LH.idfsLocation = L.idfsLocation
            WHERE (
                      ha.intRowStatus = 0
                      AND hai.intRowStatus = 0
                      AND (
                              (
                                  @idfsLocation IS NOT NULL
                                  AND (
                                          LH.AdminLevel1ID = @idfsLocation
                                          OR LH.AdminLevel2ID = @idfsLocation
                                          OR LH.AdminLevel3ID = @idfsLocation
                                          OR LH.AdminLevel4ID = @idfsLocation
                                          OR LH.AdminLevel5ID = @idfsLocation
                                          OR LH.AdminLevel6ID = @idfsLocation
                                          OR LH.AdminLevel7ID = @idfsLocation
                                      )
                              )
                              OR (@idfsLocation IS NULL)
                          )
                      AND (
                              (
                                  @SettlementTypeID IS NOT NULL
                                  AND L.idfsType = @SettlementTypeID
                              )
                              OR (@SettlementTypeID IS NULL)
                          )
                      AND (
                              @DOB = ha.datDateofBirth
                              OR @DateOfBirthFrom IS NULL
                              OR (ha.datDateofBirth
                  BETWEEN @DateOfBirthFrom AND @DateOfBirthTo
                                 )
                          )
                      AND (
                              (
                                  @EIDSSPersonID IS NOT NULL
                                  AND hai.EIDSSPersonID LIKE '%' + @EIDSSPersonID + '%'
                              )
                              OR (@EIDSSPersonID IS NULL)
                          )
                      AND (
                              (
                                  @PersonalID IS NOT NULL
                                  AND ha.strPersonID LIKE '%' + @PersonalID + '%'
                              )
                              OR (@PersonalID IS NULL)
                          )
                      AND (
                              (
                                  @FirstOrGivenName IS NOT NULL
                                  AND ha.strFirstName LIKE '%' + @FirstOrGivenName + '%'
                              )
                              OR (@FirstOrGivenName IS NULL)
                          )
                      AND (
                              (
                                  @SecondName IS NOT NULL
                                  AND ha.strSecondName LIKE '%' + @SecondName + '%'
                              )
                              OR (@SecondName IS NULL)
                          )
                      AND (
                              (
                                  @LastOrSurname IS NOT NULL
                                  AND ha.strLastName LIKE '%' + @LastOrSurname + '%'
                              )
                              OR (@LastOrSurname IS NULL)
                          )
                      AND (
                              (
                                  @PersonalIDType IS NOT NULL
                                  AND idType.idfsReference = @PersonalIDType
                              )
                              OR (@PersonalIDType IS NULL)
                          )
                      AND (
                              (
                                  @GenderTypeID IS NOT NULL
                                  AND genderType.idfsReference = @GenderTypeID
                              )
                              OR (@GenderTypeID IS NULL)
                          )
                      AND (
                              EXISTS
            (
                SELECT h.idfHuman
                FROM dbo.tlbHuman h 
				INNER JOIN dbo.tlbMaterial m ON m.idfHuman = h.idfHuman 
                WHERE h.idfHumanActual = ha.idfHumanActual
                      AND m.idfMonitoringSession = @MonitoringSessionID
            )
                              OR @MonitoringSessionID IS NULL
                          )
                  )
           )
        SELECT TotalRowCount,
               HumanMasterID,
               EIDSSPersonID,
               AddressID,
               FirstOrGivenName,
               SecondName,
               LastOrSurname,
               FullName,
               DateOfBirth,
               PersonalID,
               PersonIDTypeName,
               StreetName,
               AddressString,
               LongitudeLatitude,
               ContactPhoneCountryCode,
               ContactPhoneNumber,
               ContactPhoneNbrTypeID,
               Age,
               PassportNumber,
               CitizenshipTypeID,
               CitizenshipTypeName,
               GenderTypeID,
               GenderTypeName,
               CountryID,
               CountryName,
               RegionID,
               RegionName,
               RayonID,
               RayonName,
               SettlementID,
               SettlementName,
               FormattedAddressString,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_TESTS_GetList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_TESTS_GetList
--
-- Description: List human disease report tests by human disease report identifier.
--          
-- Author: JWJ
--
-- Revision History:
-- Name	            Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- JWJ				20180603   created 
-- HAP				2018110    Added strTestResult field to result set 
-- HAP              20181109   Added TestValidation fields to result set 
-- LJM				20201230   Added strTestedByPerson and strTestedByOffice as output 
--                             parameters
-- LJM				20210105   Added strTestCategory and blnNonLaboratoryTest, 
--                             idfInterpretedByPerson,idfValidatedByPerson as output parameters.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                             defect 5006
-- Stephen Long     01/04/2023 Added check for deleted test status.  Fixed main table to be
--                             tlbTesting and not the material table.  Changed to join.
-- Doug Albanese    01/06/2023 Removed the coalescing of null values on Interpreted and Validated 
--                             dates. They have to be done on the application side.
-- Stephen Long     01/09/2023 Fix to show the validated by person from tlbTesting when the test 
--                             record was created and updated from the laboratory module.
-- Stephen Long     01/16/2023 Fix to look at test status types when a laboratory assigned test 
--                             to determine if validated or not (final and amended status types).
-- Stephen Long     02/06/2023 Fix for bug 5620; removed unneeded joins and fields.
-- 
--
-- Testing code:
-- EXEC USP_HUM_TESTS_GetList 'en', @idfHumanCase=19  --10
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_TESTS_GetList]
    @LangID NVARCHAR(50),
    @idfHumanCase BIGINT = NULL,
    @SearchDiagnosis BIGINT = NULL
AS
BEGIN
    BEGIN TRY
        SELECT Samples.idfHumanCase,
               Samples.idfMaterial,
               Samples.strBarcode,          -- Lab sample ID
               Samples.strFieldBarcode,     -- Local Sample ID
               Samples.idfsSampleType,
               SampleType.name AS strSampleTypeName,
               Samples.datFieldCollectionDate,
               Samples.idfSendToOffice,
               Samples.idfFieldCollectedByOffice,
               Samples.datFieldSentDate,
               Samples.idfsSampleStatus,
               sampleStatus.name AS SampleStatusTypeName,
               Samples.idfFieldCollectedByPerson,
               Samples.datSampleStatusDate,
               Samples.rowGuid AS sampleGuid,
               t.idfTesting,
               t.idfsTestName,
               t.idfsTestCategory,
               testCat.name AS strTestCategory,
               t.idfsTestResult,
               t.idfsTestStatus,
               t.idfsDiagnosis,
               disease.name AS strDiagnosis,
               tstatus.name AS strTestStatus,
               tresult.name AS strTestResult,
               TestName.name,
               t.datReceivedDate,
               t.datConcludedDate,
               t.idfTestedByPerson,
               t.idfTestedByOffice,
			   tv.datInterpretationDate AS datInterpretedDate,
               tv.idfsInterpretedStatus,
               testinterpretedstatus.name AS strInterpretedStatus,
               tv.strInterpretedComment,
               ISNULL(interpretedByPerson.strFamilyName, N'') + ISNULL(', ' + interpretedByPerson.strFirstName, N'')
                   + ISNULL(' ' + interpretedByPerson.strSecondName, N'') AS strInterpretedBy,
               tv.datValidationDate AS datValidationDate,
               ISNULL(tv.blnValidateStatus, 0) AS blnValidateStatus,
               tv.strValidateComment,
               ISNULL(validatedByPerson.strFamilyName, N'') + ISNULL(', ' + validatedByPerson.strFirstName, N'')
                   + ISNULL(' ' + validatedByPerson.strSecondName, N'') AS strValidatedBy,
               t.rowGuid AS testGuid,
               t.intRowStatus,
               testedbyPerson.strFirstName + ' ' + ISNULL(testedbyPerson.strSecondName, '') + '  '
               + testedbyPerson.strFamilyName AS strTestedByPerson,
               testedByOffice.FullName AS strTestedByOffice,
               ISNULL(t.blnNonLaboratoryTest, 0) AS blnNonLaboratoryTest,
               tv.idfInterpretedByPerson,
               tv.idfValidatedByPerson AS idfValidatedByPerson,
               tv.idfTestValidation
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial Samples
                ON Samples.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbHumanCase hc
                ON Samples.idfHumanCase = hc.idfHumanCase
            INNER JOIN dbo.FN_GBL_REFERENCEREPAIR(@LangID, 19000087) SampleType
                ON SampleType.idfsReference = Samples.idfsSampleType
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000015) sampleStatus
                ON sampleStatus.idfsReference = Samples.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_REFERENCEREPAIR(@LangID, 19000097) TestName
                ON TestName.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000001) tstatus
                ON tstatus.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000096) tresult
                ON tresult.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.tlbTestValidation tv
                ON tv.idfTesting = t.idfTesting
                   AND tv.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson interpretedByPerson
                ON interpretedByPerson.idfPerson = tv.idfInterpretedByPerson
            LEFT JOIN dbo.tlbPerson testedbyPerson
                ON (testedbyPerson.idfPerson = t.idfTestedByPerson)
            LEFT JOIN dbo.FN_GBL_INSTITUTION(@LangID) testedByOffice
                ON testedByOffice.idfOffice = t.idfTestedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000095) testCat
                ON testCat.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000106) testinterpretedstatus
                ON testinterpretedstatus.idfsReference = tv.idfsInterpretedStatus
            LEFT JOIN dbo.tlbPerson validatedByPerson
                ON (validatedByPerson.idfPerson = tv.idfValidatedByPerson)
        WHERE Samples.idfHumanCase = @idfHumanCase
              AND Samples.intRowStatus = 0
              and t.idfHumanCase is not null
              AND t.intRowStatus = 0
              AND t.idfsTestStatus <> 10001007; -- Deleted
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ILI_Aggregate_GetList]...';


GO
-- ================================================================================================
-- Name: USP_ILI_Aggregate_GetList
--
-- Description: Get ILI aggregate list for the ILI aggregate use cases
--          
-- Author: Arnold Kennedy
--
-- Revision History
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Arnold Kennedy   03/21/2019 Initial release.
-- Arnold Kennedy	04/16/2019 Updates for details added
-- Stephen Long     01/26/2020 Changed site ID to site list parameter for site filtration.
-- Ann Xiong		02/28/2020 Modified to get a list of rows instead of one single row from table 
--                             tlbBasicSyndromicSurveillanceAggregateDetail 
-- Ann Xiong		03/06/2020 Fixed NULL HospitalName
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     04/08/2021 Added updated pagination and location hierarchy.
-- Leo Tracchia		08/17/2021 Added LegacyFormID parameter for search and added distinct select
-- Leo Tracchia		03/11/2022 Added check for intRowStatus
-- Leo Tracchia		07/11/2022 Modified to return correct record counts for pagination
-- Leo Tracchia		07/20/2022 changed AggregateHeaderKey to bigint 
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Stephen Long     01/13/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ILI_Aggregate_GetList]
(
    @LanguageID NVARCHAR(50),
    @FormID NVARCHAR(200),
    @LegacyFormID NVARCHAR(200),
    @AggregateHeaderID BIGINT = NULL,
    @HospitalID BIGINT = NULL,
    @StartDate DATETIME = NULL,
    @FinishDate DATETIME = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'FormID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT,
            @lastRec INT;

    IF @PageSize = 0
    BEGIN
        SET @PageSize = 1;
    END

    SET @firstRec = (@PageNumber - 1) * @PageSize;
    SET @lastRec = (@PageNumber * @PageSize + 1);

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    DECLARE @TempResultsTable TABLE
    (
        AggregateHeaderKey BIGINT not null,
        FormID NVARCHAR(200),
        LegacyFormID NVARCHAR(200),
        DateEntered NVARCHAR(200),
        DateLastSaved NVARCHAR(200),
        UserName NVARCHAR(200),
        OrganizationName NVARCHAR(200),
        [Year] INT,
        [Week] INT,
        StartDate DATETIME,
        EndDate DATETIME,
        ILITablesList NVARCHAR(MAX),
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        TotalCount INT,
        CurrentPage INT
    );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @Results
        SELECT DISTINCT
            ah.idfAggregateHeader,
            1,
            1,
            1,
            1,
            1
        FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
            LEFT JOIN dbo.tlbBasicSyndromicSurveillanceAggregateDetail ad
                ON ah.idfAggregateHeader = ad.idfAggregateHeader
        WHERE ah.intRowStatus = 0
              AND (
                      @AggregateHeaderID IS NULL
                      OR ah.idfAggregateHeader = @AggregateHeaderID
                  )
              AND (
                      ah.strFormID LIKE '%' + @FormID + '%'
                      OR @FormID IS NULL
                  )
              AND (
                      ah.LegacyFormID LIKE '%' + @LegacyFormID + '%'
                      OR @LegacyFormID IS NULL
                  )
              AND (
                      ah.idfsSite = @UserSiteID
                      OR (@UserSiteID IS NULL)
                  )
              AND (
                      @HospitalID IS NULL
                      OR ad.idfHospital = @HospitalID
                  )
              AND (
                      (
                          (
                              @StartDate IS NOT NULL
                              AND @FinishDate IS NOT NULL
                          )
                          AND (
                                  ah.datStartDate >= @StartDate
                                  AND ah.datFinishDate <= @FinishDate
                              )
                      )
                      OR (
                             @StartDate IS NOT NULL
                             AND @FinishDate IS NULL
                             AND ah.datStartDate >= @StartDate
                         )
                      OR (
                             @StartDate IS NULL
                             AND @FinishDate IS NOT NULL
                             AND ah.datFinishDate <= @FinishDate
                         )
                      OR (
                             @StartDate IS NULL
                             AND @FinishDate IS NULL
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        IF @ApplySiteFiltrationIndicator = 1
        BEGIN
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                    ON grantingSGS.idfsSite = ah.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                    ON grantingSGS.idfsSite = ah.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                    ON grantingSGS.idfsSite = ah.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                    ON grantingSGS.idfsSite = ah.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND sgs.idfsSite = ah.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteID = ah.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteID = ah.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT ah.idfAggregateHeader,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ah.intRowStatus = 0
                  AND a.GrantingActorSiteID = ah.idfsSite;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ah.idfAggregateHeader
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = ah.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE ah.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT ah.idfAggregateHeader,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = ah.idfsSite
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE ah.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = ah.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                ON ah.idfAggregateHeader = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = ah.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT ah.idfAggregateHeader,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ah.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
        WHERE ah.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = ah.idfsSite
        );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ah.idfAggregateHeader
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = ah.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @TempResultsTable
        SELECT DISTINCT
            ah.idfAggregateHeader AS AggregateHeaderKey,
            ah.strFormID AS FormID,
            ah.LegacyFormID,
            ah.datDateEntered AS DateEntered,
            ah.datDateLastSaved AS DateLastSaved,
            p.strFamilyName + ', ' + p.strFirstName AS UserName,
            br.strDefault AS OrganizationName,
            ah.intYear AS [Year],
            ah.intWeek AS [Week],
            ah.datStartDate AS StartDate,
            ah.datFinishDate AS EndDate,
            ILITablesList = STUFF(
                                     (
                                         SELECT ', ' + hr.strDefault
                                         FROM dbo.tlbBasicSyndromicSurveillanceAggregateDetail ad
                                             LEFT JOIN dbo.tlbOffice h
                                                 ON h.idfOffice = ad.idfHospital
                                             LEFT JOIN dbo.trtBaseReference hr
                                                 ON h.idfsOfficeName = hr.idfsBaseReference
                                         WHERE ad.idfAggregateHeader = ah.idfAggregateHeader
                                               AND ad.intRowStatus = 0
                                         GROUP BY hr.strDefault
                                         FOR XML PATH(''), TYPE
                                     ).value('.[1]', 'NVARCHAR(MAX)'),
                                     1,
                                     2,
                                     ''
                                 ),
            MAX(res.ReadPermissionIndicator),
            MAX(res.AccessToPersonalDataPermissionIndicator),
            MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
            MAX(res.WritePermissionIndicator),
            MAX(res.DeletePermissionIndicator),
            (
                SELECT COUNT(*)
                FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
                WHERE intRowStatus = 0
            ) AS TotalCount,
            CurrentPage = @PageNumber
        FROM @Results res
            INNER JOIN dbo.tlbBasicSyndromicSurveillanceAggregateHeader ah
                ON ah.idfAggregateHeader = res.ID
            LEFT JOIN dbo.tlbPerson p
                ON p.idfPerson = ah.idfEnteredBy
            LEFT JOIN dbo.tlbOffice o
                ON o.idfOffice = p.idfInstitution
            LEFT JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = o.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbBasicSyndromicSurveillanceAggregateDetail ad
                ON ah.idfAggregateHeader = ad.idfAggregateHeader
            LEFT JOIN dbo.tlbOffice h
                ON h.idfOffice = ad.idfHospital
            LEFT JOIN dbo.trtBaseReference hr
                ON h.idfsOfficeName = hr.idfsBaseReference
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY ah.idfAggregateHeader,
                 ah.strFormID,
                 ah.LegacyFormID,
                 ah.datDateEntered,
                 ah.datDateLastSaved,
                 p.strFamilyName,
                 p.strFirstName,
                 br.strDefault,
                 ah.intYear,
                 ah.intWeek,
                 ah.datStartDate,
                 ah.datFinishDate;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'FormID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       trt.FormID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FormID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       trt.FormID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       trt.StartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       trt.StartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EndDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       trt.EndDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EndDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       trt.EndDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyFormID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       trt.LegacyFormID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyFormID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       trt.LegacyFormID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ILITablesList'
                                                        AND @SortOrder = 'ASC' THEN
                                                       trt.ILITablesList
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ILITablesList'
                                                        AND @SortOrder = 'DESC' THEN
                                                       trt.ILITablesList
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   trt.AggregateHeaderKey,
                   trt.FormID,
                   trt.LegacyFormID,
                   trt.DateEntered,
                   trt.DateLastSaved,
                   trt.UserName,
                   trt.OrganizationName,
                   trt.[Year],
                   trt.[Week],
                   trt.StartDate,
                   trt.EndDate,
                   trt.ILITablesList,
                   trt.ReadPermissionIndicator,
                   trt.AccessToPersonalDataPermissionIndicator,
                   trt.AccessToGenderAndAgeDataPermissionIndicator,
                   trt.WritePermissionIndicator,
                   trt.DeletePermissionIndicator,
                   trt.TotalCount,
                   trt.CurrentPage
            FROM @TempResultsTable trt
           )
        SELECT res.ROWNUM,
               TotalRowCount,
               res.AggregateHeaderKey,
               res.FormID,
               res.LegacyFormID,
               res.DateEntered,
               res.DateLastSaved,
               res.UserName,
               res.OrganizationName,
               res.Year,
               res.Week,
               res.StartDate,
               res.EndDate,
               res.ILITablesList,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @PageNumber
        FROM CTEResults res
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList
--
-- Description:	Get approval advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/27/2019 Initial relase.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added sample and test list parameters and where clause criteria.
-- Stephen Long     04/20/2020 Removed farm and herd left joins.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/30/2020 Changed site list to site ID and bigint and made required.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     11/18/2021 Added action requested ID to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Changed monitoring session disease join from inner to left.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Added translated value for action requested name.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/20/2023 Added sent to organization sent to site ID and where criteria.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @LanguageCode BIGINT,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfsSampleStatus = 10015002 --Marked for Deletion 
                      OR m.idfsSampleStatus = 10015003 --Marked for Destruction
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.idfsSite = @SentToOrganizationSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @SentToOrganizationSiteID)
                      OR @SentToOrganizationSiteID IS NULL
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               NULL,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (m.idfMaterial IN (
                                            SELECT CAST([Value] AS BIGINT)
                                            FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')
                                        )
                      )
                      OR (@SampleList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                                       )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      (m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%')
                      OR (@FarmOwnerName IS NULL)
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY m.idfMaterial;

        DELETE FROM @Results;

        -- Test Approvals --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               t.idfTesting,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      t.idfTesting IN (
                                          SELECT CAST([Value] AS BIGINT)
                                          FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                      )
                      OR @TestList IS NULL
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                                       )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND @TestResultDateTo
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY t.idfTesting,
                 m.idfMaterial;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       @SampleDestruction
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       @TestDeletion
               END AS ActionRequested,
               m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               a.strAnimalCode AS EIDSSAnimalID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               u.idfUserID AS ResultEnteredByUserID,
               m.datAccession AS AccessionDate,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               t.datConcludedDate AS ResultDate,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               NULL AS PreviousTestStatusTypeID,
               m.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
                   AND t.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tstUserTable u
                ON u.idfPerson = t.idfResultEnteredByPerson
                   AND u.intRowStatus = 0;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_GETList
--
-- Description:	Get laboratory approval list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/03/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added previous sample and test status types.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/19/2019 Split out selects between sample and test and added test deletion 
--                             as one of the options.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/30/2019 Added organization ID parameter and where clause changes for site.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     09/28/2019 Updated test deletion base reference value to newly added entry.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     09/04/2020 Updated reference value for marked for deletion test status.
-- Stephen Long     11/30/2020 Removed site ID parameter and updated where criteria to use 
--                             sent to organization ID.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/18/2021 Added sample ID and test ID parameters and action requested ID to 
--                             the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     01/10/2022 Corrected join on user table, removed identity column, and changed 
--                             default sort order.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to vector session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Added translated value for action requested name.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- Stephen Long     11/16/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- Stephen Long     03/02/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @TestID BIGINT = NULL,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @TotalRowCount INT = 0,
            @LanguageCode BIGINT,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleStatus IN (   10015002, --Marked for Deletion 
                                            10015003
                                        ) --Marked for Destruction
              AND (
                      (
                          m.idfSendToOffice = @UserOrganizationID
                          AND m.idfSendToOffice IS NOT NULL
                      )
                      OR (
                             m.idfsSite = @UserSiteID
                             AND m.idfSendToOffice IS NULL
                         )
                  )
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  );

        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND (
                      (
                          m.idfSendToOffice = @UserOrganizationID
                          AND m.idfSendToOffice IS NOT NULL
                      )
                      OR (
                             m.idfsSite = @UserSiteID
                             AND m.idfSendToOffice IS NULL
                         )
                  )
              AND (
                      t.idfTesting = @TestID
                      OR @TestID IS NULL
                  );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @Results
        );

        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       @SampleDestruction
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       @TestDeletion
               END AS ActionRequested,
               m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               u.idfUserID AS ResultEnteredByUserID,
               m.datAccession AS AccessionDate,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               t.datConcludedDate AS ResultDate,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               NULL AS PreviousTestStatusTypeID,
               m.intRowStatus AS RowStatus,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @TotalRowCount AS TotalRowCount
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
                   AND t.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tstUserTable u
                ON u.idfPerson = t.idfResultEnteredByPerson
                   AND u.intRowStatus = 0;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_SEARCH_GETList
--
-- Description:	Get laboratory approval list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to search wildcard.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     09/04/2020 Updated reference value for marked for deletion test status.
-- Stephen Long     11/30/2020 Modified where clause to look at sent to organization and removed 
--                             user ID as a parameter.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Changed where criteria strNote to strCondition.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     09/24/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     11/18/2021 Added action requested ID to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/17/2021 Added group by to eliminate duplicate records.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Bug fix on item 5111, 5115 and 5116.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_APPROVAL_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'PCR', -- Use 'Gnhnscvxb', 'Brucellosis', 'SWAZ200GEDD' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT, 
    @UserOrganizationID BIGINT, 
    @UserSiteID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @InitialResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        ActionRequested NVARCHAR(MAX) NOT NULL,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        ActionRequested NVARCHAR(MAX) NOT NULL,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @FinalResultsDedup TABLE
    (
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT,
            @TotalRowCount INT = 0,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);
    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       @SampleDestruction
               END,
               m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND (
                      m.idfsSampleStatus = 10015002 --Marked for Deletion 
                      OR m.idfsSampleStatus = 10015003 --Marked for Destruction
                  )
              AND m.idfSendToOffice = @UserOrganizationID;

        INSERT INTO @InitialResults
        SELECT CASE
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       @TestDeletion
               END,
               m.idfMaterial,
               t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND (
                      t.idfsTestStatus = 10001004 --Preliminary 
                      OR t.idfsTestStatus = 10001008 --Marked for Deletion 
                  )
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfSendToOffice = @UserOrganizationID;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ActionRequested,
               SampleID,
               TestID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = SampleID
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                  + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                     OR (ActionRequested LIKE '%' + @SearchString + '%')
                 );

        INSERT INTO @FinalResults
        SELECT ActionRequested,
               SampleID,
               TestID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = SampleID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ActionRequested,
               SampleID,
               TestID
        FROM @InitialResults
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = SampleID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = SampleID
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END;

        INSERT INTO @FinalResultsDedup
        SELECT SampleID,
               TestID
        FROM @FinalResults
        GROUP BY SampleID,
                 TestID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResultsDedup
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        DELETE res
        FROM @FinalResultsDedup res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        DELETE FROM @FinalResultsDedup
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @FinalResultsDedup
        );

        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       @SampleDestruction
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       @TestDeletion
               END AS ActionRequested,
               m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               u.idfUserID AS ResultEnteredByUserID,
               m.datAccession AS AccessionDate,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               t.datConcludedDate AS ResultDate,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               NULL AS PreviousTestStatusTypeID,
               m.intRowStatus AS RowStatus,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @TotalRowCount AS TotalRowCount
        FROM @FinalResultsDedup res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
                   AND t.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tstUserTable u
                ON u.idfPerson = t.idfResultEnteredByPerson
                   AND u.intRowStatus = 0;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_BATCH_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_BATCH_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory batch list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     03/25/2019 Initial release.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/25/2020 Added batch test list parameter and where clause criteria.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Removed unneeded joins.
-- Stephen Long     03/25/2022 Removed primary key from final results table variable.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/24/2022 Moved where clause check on tests count to insert of final results.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_BATCH_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @BatchTestList VARCHAR(MAX),
    @FiltrationIndicator BIT = 1, 
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        TestsCount INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @InProgressCount INT = 0;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               1,
               CASE
                   WHEN b.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN b.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN b.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN b.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = b.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = b.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = b.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = b.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = b.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE b.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = b.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = b.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = b.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = b.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               MAX(res.BatchStatusTypeID),
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator),
               (
                   SELECT COUNT(idfTesting)
                   FROM dbo.tlbTesting
                   WHERE idfBatchTest = res.ID
                         AND intRowStatus = 0
               ) AS TestsCount
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (b.idfBatchTest IN (
                                             SELECT CAST([Value] AS BIGINT)
                                             FROM dbo.FN_GBL_SYS_SplitList(@BatchTestList, NULL, ',')
                                         )
                      )
                      OR @BatchTestList IS NULL
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      t.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP by res.ID;

        DELETE FROM @FinalResults
        WHERE TestsCount = 0;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @InProgressCount =
        (
            SELECT IIF(
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ) IS NULL,
                       0,
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ))
            FROM @FinalResults res
                INNER JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = res.ID
        );

        SELECT b.idfBatchTest AS BatchTestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               b.strBarcode AS EIDSSBatchTestID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               batchStatusType.name AS BatchStatusTypeName,
               b.idfPerformedByOffice AS BatchTestPerformedByOrganizationID,
               b.idfPerformedByPerson AS BatchTestPerformedByPersonID,
               b.idfsTestName AS BatchTestTestNameTypeID,
               batchTestTestNameType.name AS BatchTestTestNameTypeName,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               disease.name AS DiseaseName,
               m.idfMaterial AS SampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '**********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               b.TestRequested,
               b.idfObservation AS ObservationID,
               b.idfPerformedByPerson AS PerformedByPersonID,
               b.datPerformedDate AS PerformedDate,
               b.datValidatedDate AS ValidationDate,
               b.idfsSite AS SiteID,
               t.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount,
               res.TestsCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) batchTestTestNameType
                ON batchTestTestNameType.idfsReference = b.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) batchStatusType
                ON batchStatusType.idfsReference = b.idfsBatchStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_BATCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_BATCH_GETList
--
-- Description:	Get laboratory batch list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/10/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Changed where clause to look at batch test row status instead of 
--                             test.
-- Stephen Long     02/01/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/19/2019 Removed positive and negative control and reagent lot numbers.
--                             Added organization ID parameter.
-- Stephen Long     03/25/2019 Added the overall batch test test name type ID and name.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     04/21/2022 Added final results to remove duplicates from filtration.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/08/2022 Added where criteria to only return batches with tests.
-- Stephen Long     10/24/2022 Moved where clause check on tests count to insert of final results.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_BATCH_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_BATCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        TestsCount INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @InProgressCount INT = 0;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbBatchTest b
        WHERE b.idfPerformedByOffice = @UserOrganizationID
              AND b.idfsSite = @UserSiteID
              AND b.intRowStatus = 0;

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable AS u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor AS ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule AS ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND sgs.idfsSite = b.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = b.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE b.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = b.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = b.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = b.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.BatchStatusTypeID),
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator),
               (
                   SELECT COUNT(idfTesting)
                   FROM dbo.tlbTesting
                   WHERE idfBatchTest = res.ID
                         AND intRowStatus = 0
               ) AS TestsCount
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY ID;

        DELETE FROM @FinalResults
        WHERE TestsCount = 0;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @InProgressCount =
        (
            SELECT IIF(
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ) IS NULL,
                       0,
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ))
            FROM @FinalResults res
                INNER JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = res.ID
                       AND b.intRowStatus = 0
            WHERE b.idfPerformedByOffice = @UserOrganizationID
                  AND b.idfsSite = @UserSiteID
                  AND b.intRowStatus = 0
                  AND
                  (
                      SELECT COUNT(t.idfTesting)
                      FROM dbo.tlbTesting t
                      WHERE t.idfBatchTest = b.idfBatchTest
                  ) > 0
        );

        SELECT b.idfBatchTest AS BatchTestID,
               b.strBarcode AS EIDSSBatchTestID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               batchStatusType.name AS BatchStatusTypeName,
               b.idfPerformedByOffice AS PerformedByOrganizationID,
               b.idfPerformedByPerson AS PerformedByPersonID,
               b.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               b.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               b.idfValidatedByOffice AS ValidatedByOrganizationID,
               b.idfValidatedByPerson AS ValidatedByPersonID,
               b.idfsTestName AS BatchTestTestNameTypeID,
               batchTestTestNameType.name AS BatchTestTestNameTypeName,
               b.TestRequested,
               b.idfObservation AS ObservationID,
               b.datPerformedDate AS PerformedDate,
               b.datValidatedDate AS ValidationDate,
               b.idfsSite AS SiteID,
               (
                   SELECT TOP 1
                       idfsDiagnosis
                   FROM dbo.tlbTesting
                   WHERE idfBatchTest = b.idfBatchTest
                         AND intRowStatus = 0
               ) AS DiseaseID,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount,
               res.TestsCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) batchTestTestNameType
                ON batchTestTestNameType.idfsReference = b.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) batchStatusType
                ON batchStatusType.idfsReference = b.idfsBatchStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added sample and test list parameters and where clause criteria.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Removing unneeded joins.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                             query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Removed show in lab list criteria.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.  Changed group by on insert of final results.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     01/23/2023 Updated default sort order.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- Stephen Long     03/02/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @FiltrationIndicator BIT = 1, 
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               1,
               CASE
                   WHEN m.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND (
                      (
                          m.idfsSite = @SentToOrganizationSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @SentToOrganizationSiteID)
                      OR @SentToOrganizationSiteID IS NULL
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               t.idfTesting,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (m.idfMaterial IN (
                                            SELECT CAST([Value] AS BIGINT)
                                            FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')
                                        )
                      )
                      OR (@SampleList IS NULL)
                  )
              AND (
                      (t.idfTesting IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                       )
                      )
                      OR (@TestList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                                       )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY m.idfMaterial,
                 t.idfTesting;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON ID = f.SampleID
                                        );

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfTesting AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.datStartedDate AS StartedDate,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.datConcludedDate AS ResultDate,
               t.idfsTestCategory AS TestCategoryTypeID,
               testCategoryType.name AS TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN t.idfsTestStatus = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/20/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added intRowStatus check to where clause.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/20/2019 Added disease ID to the select list.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     10/20/2019 Added test assigned indicator and test name type ID to the list of 
--                             fields.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Cleaned up stored procedure.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/10/2021 Added sample ID parameter and where criteria.
-- Stephen Long     11/16/2021 Changed to use select row over instead of with cte.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                  query.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     04/15/2022 Added join for favorites to the filtration queries.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     01/23/2023 Updated default sort order.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_FAVORITE_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY res.ID;

        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON ID = f.SampleID
                                        );

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfTesting AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.datStartedDate AS StartedDate,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.datConcludedDate AS ResultDate,
               t.idfsTestCategory AS TestCategoryTypeID,
               testCategoryType.name AS TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN t.idfsTestStatus = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_SEARCH_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/05/2019 Removed transfer where clause and organization ID check.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Cleaned up stored procedure.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/20/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                  query.
-- Stephen Long     12/07/2021 Added group by on final results.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Bug fix on item 5111, 5112, 5113 and 5114.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/24/2022 Bug fix on GIT #464.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     01/23/2023 Updated default sort order.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Blood', 'XWEB00' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT, 
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT 
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @InitialResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        BatchStatusTypeID BIGINT NULL,
        TestNameTypeID BIGINT NULL,
        TestNameTypeName NVARCHAR(MAX) NULL,
        TestStatusTypeID BIGINT NULL,
        TestStatusTypeName NVARCHAR(MAX) NULL,
        StartedDate DATETIME NULL,
        TestResultTypeID BIGINT NULL,
        TestResultTypeName NVARCHAR(MAX) NULL,
        ResultDate DATETIME NULL,
        TestCategoryTypeID BIGINT NULL,
        TestCategoryTypeName NVARCHAR(MAX) NULL,
        PreviousTestStatusID BIGINT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        BatchStatusTypeID BIGINT NULL,
        TestNameTypeID BIGINT NULL,
        TestNameTypeName NVARCHAR(MAX) NULL,
        TestStatusTypeID BIGINT NULL,
        TestStatusTypeName NVARCHAR(MAX) NULL,
        StartedDate DATETIME NULL,
        TestResultTypeID BIGINT NULL,
        TestResultTypeName NVARCHAR(MAX) NULL,
        ResultDate DATETIME NULL,
        TestCategoryTypeID BIGINT NULL,
        TestCategoryTypeName NVARCHAR(MAX) NULL,
        PreviousTestStatusID BIGINT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Results
        SELECT SampleID,
               t.idfTesting,
               b.idfsBatchStatus,
               t.idfsTestName,
               testNameType.name,
               t.idfsTestStatus,
               testStatusType.name,
               t.datStartedDate,
               t.idfsTestResult,
               testResultType.name,
               t.datConcludedDate,
               t.idfsTestCategory,
               testCategoryType.name,
               t.PreviousTestStatusID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                  + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @Results
        SELECT SampleID,
               t.idfTesting,
               b.idfsBatchStatus,
               t.idfsTestName,
               testNameType.name,
               t.idfsTestStatus,
               testStatusType.name,
               t.datStartedDate,
               t.idfsTestResult,
               testResultType.name,
               t.datConcludedDate,
               t.idfsTestCategory,
               testCategoryType.name,
               t.PreviousTestStatusID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @Results
        SELECT SampleID,
               TestID,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = SampleID
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ir.SampleID,
                   ir.TestID,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL
            FROM @InitialResults ir
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ir.SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @Results
            SELECT SampleID,
                   TestID,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END;

        INSERT INTO @FinalResults
        SELECT SampleID,
               TestID,
               BatchStatusTypeID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               PreviousTestStatusID
        FROM @Results
        GROUP BY SampleID,
                 TestID,
                 BatchStatusTypeID,
                 TestNameTypeID,
                 TestNameTypeName,
                 TestStatusTypeID,
                 TestStatusTypeName,
                 StartedDate,
                 TestResultTypeID,
                 TestResultTypeName,
                 ResultDate,
                 TestCategoryTypeID,
                 TestCategoryTypeName,
                 PreviousTestStatusID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults r
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON r.SampleID = f.SampleID
                                        );

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               res.TestID AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN TestStatusTypeID = 10001004 --Preliminary
               THEN
                       TestStatusTypeID
                   WHEN TestStatusTypeID = 10001008 --Marked for Deletion
               THEN
                       TestStatusTypeID
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN TestStatusTypeID = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN TestStatusTypeID = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList
--
-- Description:	Get sample advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/14/2019 Initial relase.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are not needed.
-- Stephen Long     02/11/2019 Changed sample status type ID from bigint to nvarchar(max).  Can 
--                             have multiple sample status types.
-- Stephen Long     02/21/2019 Renamed parameters to be consistent with other objects.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria to pull back in the 
--                             test assigned indicator.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/29/2019 Added accession condition type field as one of the where clauses.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     11/04/2019 Corrected tlbSpecies join; joined to tlbMaterial instead of tlbHerd.
-- Stephen Long     01/16/2020 Corrected where clause on sample status type for defect 5699.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/08/2020 Added sample list parameter and where clause criteria.
-- Stephen Long     04/16/2020 Removed un-needed joins for farm, herd and species type.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     07/06/2020 Added lab module source indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/28/2020 Removed site left joins as not needed.
-- Stephen Long     10/30/2020 Remove test assigned indicator; use test assigned count instead.
--                             Added EIDSS freezer ID.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Stephen Long     02/10/2021 Remove unneeded joins and add check for blnShowInLabList.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/11/2021 Split out query to get initial results using required date range.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/08/2022 Removed unneeded joins.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Removed primary key from results and final results table variables.
-- Stephen Long     03/30/2022 Remove show in lab list from where criteria.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/16/2022 Fix on initial query to use sent to organization and not user 
--                             organization.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries for SAUC29.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- Stephen Long     02/20/2023 Added sent to organization sent to site ID and where criteria.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @RecordCount AS INT = 0,
            @UnaccessionedCount AS INT = 0;
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',');

    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL);

    IF @SampleStatusTypeList IS NOT NULL
        INSERT INTO @SampleStatusTypeListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               1,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND (
                      (
                          m.idfsSite = @SentToOrganizationSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @SentToOrganizationSiteID)
                      OR @SentToOrganizationSiteID IS NULL
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               res.AccessionedIndicator,
               MAX(res.AccessionConditionTypeID),
               1,
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator)
        FROM @Results res
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Active
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                              AND m.datDestructionDate IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT ID FROM @SampleStatusTypeListTable
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
              AND (
                      (
                          m.TestUnassignedIndicator = 1
                          AND @TestUnassignedIndicator = 1
                      )
                      OR @TestUnassignedIndicator IS NULL
                  )
              AND (
                      (
                          m.TestCompletedIndicator = 1
                          AND @TestCompletedIndicator = 1
                      )
                      OR @TestCompletedIndicator IS NULL
                  )
        GROUP BY res.ID,
                 res.AccessionedIndicator
        OPTION (RECOMPILE);

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
        );

        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.TestCompletedIndicator,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               accessionConditionType.name AS AccessionConditionTypeName,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               sampleStatusType.name AS SampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               CASE
                   WHEN m.TestUnassignedIndicator = 1 THEN
                       0
                   ELSE
                       1
               END AS TestAssignedCount,
               m.TransferIndicator AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @UnaccessionedCount AS UnaccessionedSampleCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_GETList
--
-- Description:	Get sample list for the laboratory module use case LUC01.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/18/2018 Initial release.
-- Stephen Long	    12/19/2018 Added pagination logic.
-- Stephen Long     01/14/2019 Split out search functionality (where conditions) for better 
--                             performance on this procedure.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/11/2019 Fix to the value used for the test completed indicator.  It was 
--                             using the wrong base reference value.
-- Stephen Long     02/21/2019 Changed field collection and field sent to collection and sent to 
--                             be consistent on naming.  Added parent sample ID to support the 
--                             edit transfer use case.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria for the test assigned 
--                             indicator and test assigned count.
-- Stephen Long     06/22/2019 Removal of herd join and joined species on the sample table.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added human master ID to select as placeholder for model.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     07/17/2019 Added vector join and field vector ID to the patient/species/vector.
-- Stephen Long     07/28/2019 Corrected sample kind ID where clause for aliquots/derivatives.
-- Stephen Long     08/12/2019 Corrected parenthesis for POCO error on sample kind where clause.
-- Stephen Long     08/30/2019 Removed commented out IF ELSE for individual sample.
-- Stephen Long     09/11/2019 Added sample destroyed status to sample status where clause.  Added 
--                             pagination set 0 to bring back "all" records.
-- Stephen Long     09/26/2019 Added sample list parameter and where clause.
-- Stephen Long     10/03/2019 Added comma to split sample list delimeter.
-- Stephen Long     10/17/2019 Added intRowStatus and non-laboratory test check on test completed 
--                             and test assigned indicators, and test assigned count.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Corrected left joins needing intRowStatus = 0.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/16/2020 Added sample status type of transferred out to include in the list.
-- Stephen Long     04/16/2020 Correction on vector surveillance session disease ID's and names.
-- Stephen Long     04/20/2020 Added vector type ID and vector species type ID to the model.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/21/2020 Added additional criteria to show samples with a final or amended 
--                             test to be selected within the accession timeframe.
-- Stephen Long     06/30/2020 Added additional criteria to pull back transferred in records after
--                             accessioned in.
-- Stephen Long     07/06/2020 Added lab module source indicator to model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/29/2020 Added test unassigned and test completed parameters and where 
--                             criteria.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/15/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Correct record and unaccessioned counts.
-- Stephen Long     01/21/2021 Change counts from distinct count to group by with sub-query.
-- Stephen Long     02/08/2021 Change where criteria to handle null organization for the central
--                             data repository.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/07/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     04/15/2022 Fix to filtration query grouping.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Added check on testing table to only look for laboratory tests and
--                             rejected samples check within sample window.
-- Stephen Long     06/20/2022 Added row status check when looking for parent samples.
-- Stephen Long     06/28/2022 Added check to include transferred out samples only when the 
--                             transfer is final and within the accession date window.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/17/2022 Added collection and entered date to the default sort order.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/04/2022 Bug fix on item 5057; don't show marked for deletion or marked 
--                             for destruction in the default listing.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     11/03/2022 Added date to the table variable to store the collection date, if 
--                             available, otherwise entered date.  Sort order for default base on 
--                             this new date field.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/03/2023 Added check for user's site identifier when the sent to organization 
--                             is not present.
-- Stephen Long     01/10/2023 Updated for site filtration queries.
-- Stephen Long     02/07/2023 Fix for rejected samples - bug 5610.
-- Stephen Long     03/02/2023 Added sent to organization sent to site ID and where criteria.
-- 
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_GETList]
		@LanguageID = N'en-US',
		@SampleID = NULL,
		@ParentSampleID = NULL,
		@DaysFromAccessionDate = 60,
		@SampleList = NULL,
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 100,
		@SortColumn = N'AccessionDate',
		@SortOrder = N'ASC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @DaysFromAccessionDate INT,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @SortColumn VARCHAR(200) = 'Default'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UnaccessionedCount INT = 0,
            @TotalRowCount INT = 0;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        DestructionDate DATETIME NULL, 
        SortDate DATETIME NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        DestructionDate DATETIME NULL, 
        SortDate DATETIME NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @SampleID IS NOT NULL
           OR @SampleList IS NOT NULL
           OR @ParentSampleID IS NOT NULL
        BEGIN
            INSERT INTO @FinalResults
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND (
                          @SampleList IS NULL
                          OR m.idfMaterial IN (
                                                  SELECT ID FROM @SampleListTable
                                              )
                      )
                  AND (
                          @SampleID IS NULL
                          OR m.idfMaterial = @SampleID
                      )
                  AND (
                          @ParentSampleID IS NULL
                          OR m.idfParentMaterial = @ParentSampleID
                      );
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND m.blnReadOnly = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND (
                          (
                              m.idfSendToOffice = @UserOrganizationID
                              AND m.idfSendToOffice IS NOT NULL
                          )
                          OR (
                                 m.idfsSite = @UserSiteID
                                 AND m.idfSendToOffice IS NULL
                             )
                      )
                  AND (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND
                              (
                                  SELECT COUNT(*)
                                  FROM dbo.tlbTesting t
                                  WHERE t.idfMaterial = m.idfMaterial
                                        AND t.intRowStatus = 0
                                        AND t.blnNonLaboratoryTest = 0
                                        AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                              ) = 0
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                                 ) > 0
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR ( -- Accessioned In with no in progress, preliminary tests assigned, Deleted or Destroyed
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                                 ) = 0
                                 AND m.idfsSampleStatus IN ( 10015007, 10015008, 10015009 ) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.idfsSampleStatus = 10015010 -- Transferred Out
                                 AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                         INNER JOIN dbo.tlbTransferOUT tr
                                             ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                                 ) = 0
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             ) --Transferred Out and Final
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate))
                                 AND m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                             )
                      );
        END

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        IF @UserOrganizationID IS NOT NULL --First-level sites (central data repository, general data repository, etc.) do not filter results.
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            DECLARE @UserEmployeeGroupID BIGINT = (
                                                      SELECT TOP 1
                                                          egm.idfEmployeeGroup
                                                      FROM dbo.tlbEmployeeGroupMember egm
                                                      WHERE egm.idfEmployee = @UserEmployeeID
                                                            AND egm.intRowStatus = 0
                                                  );

            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRuleActor ara
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.GrantingActorSiteID IS NOT NULL
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfsSite = ar.GrantingActorSiteID
                       AND m.intRowStatus = 0
            WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
                  AND ara.intRowStatus = 0;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        IF @SortColumn <> 'Query'
        BEGIN
            INSERT INTO @FinalResults
            SELECT res.ID,
                   res.AccessionedIndicator,
                   MAX(res.AccessionConditionTypeID),
                   MAX(res.DestructionDate), 
                   MAX(res.SortDate),
                   MAX(res.ReadPermissionIndicator),
                   MAX(res.AccessToPersonalDataPermissionIndicator),
                   MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
                   MAX(res.WritePermissionIndicator),
                   MAX(res.DeletePermissionIndicator)
            FROM @Results res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                                      AND m.intRowStatus = 0
            WHERE (res.ReadPermissionIndicator IN ( 1, 3, 5 )
                  AND m.blnReadOnly = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND
                              (
                                  SELECT COUNT(*)
                                  FROM dbo.tlbTesting t
                                  WHERE t.idfMaterial = m.idfMaterial
                                        AND t.intRowStatus = 0
                                        AND t.blnNonLaboratoryTest = 0
                                        AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                              ) = 0
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                                 ) > 0
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                                 ) = 0
                                 AND m.idfsSampleStatus IN ( 10015007, 10015008, 10015009 ) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.idfsSampleStatus = 10015010 -- Transferred Out
                                 AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                         INNER JOIN dbo.tlbTransferOUT tr
                                             ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                                 ) = 0
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             ) --Transferred Out and Final
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate))
                                 AND m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                             )
                      )
                      )
            GROUP BY res.ID, 
                     res.AccessionedIndicator;
        END

        SET @TotalRowCount =
        (
            SELECT COUNT(ID) FROM @FinalResults
        );
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
                  AND DestructionDate IS NULL 
        );

        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               '' AS ReportOrSessionTypeName,
               m.TestCompletedIndicator,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               CASE
                   WHEN m.TestUnassignedIndicator = 1 THEN
                       0
                   ELSE
                       1
               END AS TestAssignedCount,
               m.TransferIndicator AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @TotalRowCount AS TotalRowCount,
               @UnaccessionedCount AS UnaccessionedSampleCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
        ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition,
                 res.SortDate DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_SEARCH_GETList
--
-- Description:	Get sample search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/14/2019 Initial release.
-- Stephen Long     01/30/2019 Removed joins to vector surveillance session, and added reference 
--                             to the disease reference table for the sample table.
-- Stephen Long     02/21/2019 Added organization ID parameter to narrow search.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added disease to the wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/18/2019 Removed herd left join and modified species left join to material 
--                             table.
-- Stephen Long     01/21/2020 Added site list for site filtration.
-- Stephen Long     03/09/2020 Added additional search filters to match the default get.
-- Stephen Long     03/10/2020 Removed filter on sample disease, and added disease report and 
--                             monitoring session ones.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     07/06/2020 Added lab module source indicator to the model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/30/2020 Added test unassigned and test completed indicators.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Changed over missed functions for reference data.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Stephen Long     09/20/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/06/2021 Correction to EIDSSReportOrSessionID alias name.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/08/2022 Removed unneeded joins.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Fix to show rejected samples on sample search.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/04/2022 Add where criteria from the default sample listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     08/16/2022 Added null DaysFromAccessionDate to the where criteria.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/17/2022 Bug fix on item 5111 and 5018.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/03/2023 Added check for user's site identifier when the sent to organization 
--                             is not present.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     03/02/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Blood', 'XWEB00' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT,
    @DaysFromAccessionDate INT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InitialResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @InitialResults
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.idfSendToOffice = @UserOrganizationID
                          AND m.idfSendToOffice IS NOT NULL
                      )
                      OR (
                             m.idfsSite = @UserSiteID
                             AND m.idfSendToOffice IS NULL
                         )
                  )
              AND (
                      (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              OR @DaysFromAccessionDate IS NULL
                          )
                          AND
                          (
                              SELECT COUNT(*)
                              FROM dbo.tlbTesting t
                              WHERE t.idfMaterial = m.idfMaterial
                                    AND t.intRowStatus = 0
                                    AND t.blnNonLaboratoryTest = 0
                                    AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                          ) = 0
                          AND @TestUnassignedIndicator IS NOT NULL
                          AND m.blnAccessioned = 1
                          AND m.datAccession IS NOT NULL
                          AND m.idfsAccessionCondition IS NOT NULL
                          AND m.idfsSampleStatus = 10015007 -- In Repository
                      )
                      OR (
                             (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 OR @DaysFromAccessionDate IS NULL
                             )
                             AND
                             (
                                 SELECT COUNT(*)
                                 FROM dbo.tlbTesting t
                                 WHERE t.idfMaterial = m.idfMaterial
                                       AND t.intRowStatus = 0
                                       AND t.blnNonLaboratoryTest = 0
                                       AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                             ) > 0
                             AND @TestCompletedIndicator IS NOT NULL
                         )
                      OR (
                             m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL
                             AND m.idfsSampleStatus IS NULL
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         )
                      OR (
                             (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 OR @DaysFromAccessionDate IS NULL
                             )
                             AND
                             (
                                 SELECT COUNT(*)
                                 FROM dbo.tlbTesting t
                                 WHERE t.idfMaterial = m.idfMaterial
                                       AND t.intRowStatus = 0
                                       AND t.blnNonLaboratoryTest = 0
                                       AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                             ) = 0
                             AND m.idfsSampleStatus <> 10015010 -- Transferred Out
                             AND @TestUnassignedIndicator IS NULL
                             AND @TestCompletedIndicator IS NULL
                         )
                      OR (
                             (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 OR @DaysFromAccessionDate IS NULL
                             )
                             AND m.idfsSampleStatus = 10015010 -- Transferred Out
                             AND
                             (
                                 SELECT COUNT(tr.idfTransferOut)
                                 FROM dbo.tlbTransferOutMaterial tom
                                     INNER JOIN dbo.tlbTransferOUT tr
                                         ON tr.idfTransferOut = tom.idfTransferOut
                                 WHERE tom.idfMaterial = m.idfMaterial
                                       AND tr.intRowStatus = 0
                                       AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                             ) = 0
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         ) --Transferred Out and Final
                      OR (
                             (
                                 (
                                     m.datFieldCollectionDate IS NOT NULL
                                     AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate)
                                 )
                                 OR (
                                        m.datEnteringDate IS NOT NULL
                                        AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate)
                                    )
                             )
                             AND m.blnAccessioned = 0
                             AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                         )
                  )
        GROUP BY m.idfMaterial;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        DECLARE @UnaccessionedSampleCount AS INT = (
                                                       SELECT COUNT(m.idfMaterial)
                                                       FROM @FinalResults res
                                                           INNER JOIN dbo.tlbMaterial m
                                                               ON m.idfMaterial = res.ID
                                                       WHERE (
                                                                 m.blnAccessioned = 0
                                                                 AND m.idfsAccessionCondition IS NULL
                                                             )
                                                   );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(t4.idfTesting, 0))
                   FROM dbo.tlbTesting t4
                   WHERE t4.idfsTestStatus IN (   10001003,
                                                           --In Progress
                                                  10001004 --Preliminary
                                              )
                         AND t4.idfMaterial = m.idfMaterial
                         AND t4.intRowStatus = 0
                         AND t4.blnNonLaboratoryTest = 0
               ),
               0
                     ) AS TestAssignedCount,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @UnaccessionedSampleCount AS UnaccessionedSampleCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TAB_COUNTS_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TAB_COUNTS_GETList
--
-- Description:	Gets a list of counts for each laboratory module tab: samples (un-accessioned), 
-- testing (in progress tests), transferred, my favorites, batches (in progress) and approvals.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2021 Initial release.
-- Stephen Long     12/21/2021 Removed filtration rules as these are the default counts.
-- Stephen Long     02/10/2022 Added send to office on transfer count.
-- Stephen Long     04/15/2022 Fix to account for filtration counts.
-- Stephen Long     07/26/2022 Simplified where criteria on testing in progress count.
-- Stephen Long     08/10/2022 Corrected where criteria on batches in progress count; include only
--                             batches with at least one test.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/23/2022 Added non-laboratory test indicator to where criteria on test 
--                             records for approval.
-- Stephen Long     01/03/2023 Added check for user's site identifier when the sent to organization 
--                             is not present.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     03/02/2023 Added sent to organization sent to site ID and where criteria.
-- 
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TAB_COUNTS_GETList]
		@DaysFromAccessionDate = 60,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TAB_COUNTS_GETList]
(
    @DaysFromAccessionDate INT,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SamplesUnaccessionedCount INT = 0,
            @TestingInProgressCount INT = 0,
            @TransferredCount INT = 0,
            @MyFavoritesCount INT = 0,
            @BatchesInProgressCount INT = 0,
            @ApprovalsCount INT = 0;
    DECLARE @Results TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;
    DECLARE @UserEmployeeGroupID BIGINT = (
                                              SELECT TOP 1
                                                  egm.idfEmployeeGroup
                                              FROM dbo.tlbEmployeeGroupMember egm
                                              WHERE egm.idfEmployee = @UserEmployeeID
                                                    AND egm.intRowStatus = 0
                                          );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        -- =======================================================================================
        -- Samples Tab Unaccessioned Count
        -- =======================================================================================
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                          (
                              m.idfSendToOffice = @UserOrganizationID
                              AND m.idfSendToOffice IS NOT NULL
                          )
                          OR (
                                 m.idfsSite = @UserSiteID
                                 AND m.idfSendToOffice IS NULL
                             )
                      )
              AND m.blnAccessioned = 0
              AND m.idfsAccessionCondition IS NULL
              AND m.idfsSampleStatus IS NULL;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        IF @UserOrganizationID IS NOT NULL --First-level sites (central data repository, general data repository, etc.) do not filter results.
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.AccessRuleActor ara
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.GrantingActorSiteID IS NOT NULL
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfsSite = ar.GrantingActorSiteID
                       AND m.intRowStatus = 0
            WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
                  AND ara.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results res
        GROUP BY ID;

        SET @SamplesUnaccessionedCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        -- =======================================================================================
        -- Testing Tab In Progress Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.idfsTestName IS NOT NULL
              AND t.idfsTestStatus = 10001003 --In Progress
              AND t.blnNonLaboratoryTest = 0
              AND (
                      (
                          m.idfsSite = @UserSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @UserSiteID)
                  )
              AND (
                      GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                      OR @DaysFromAccessionDate IS NULL
                  )
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001 --Closed
                         )
                  );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        SET @TestingInProgressCount =
        (
            SELECT COUNT(*) FROM @Results
        );

        -- =======================================================================================
        -- Transferred Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE (
                  tr.idfSendFromOffice = @UserOrganizationID
                  OR tr.idfSendToOffice = @UserOrganizationID
              )
              AND (tr.idfsTransferStatus IN (   10001003, --In Progress
                                                10001006  --Amended
                                            )
                  )
              AND tr.intRowStatus = 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND sgs.idfsSite = tr.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND tr.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
                   AND ar.GrantingActorSiteID IS NOT NULL
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
              AND ara.intRowStatus = 0
              AND tr.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND tr.idfsSite = ar.GrantingActorSiteID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = tr.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE tr.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = tr.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = tr.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
        WHERE tr.intRowStatus = 0
              AND tr.idfsTransferStatus IN (   10001003, --In Progress
                                               10001006  --Amended
                                           )
        GROUP BY ID;

        SET @TransferredCount =
        (
            SELECT COUNT(*) FROM @FinalResults res
        );

        -- =======================================================================================
        -- My Favorites Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results
        GROUP BY ID;

        SET @MyFavoritesCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        -- =======================================================================================
        -- Batches Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
        WHERE b.idfPerformedByOffice = @UserOrganizationID
              AND b.idfsSite = @UserSiteID
              AND b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable AS u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor AS ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule AS ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND @UserSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND @UserSiteGroupID IS NOT NULL
              AND sgs.idfsSite = b.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = b.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE b.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = b.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = b.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = b.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
        WHERE b.idfsBatchStatus = 10001003 --In Progress
        GROUP BY ID;

        SET @BatchesInProgressCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        -- =======================================================================================
        -- Approvals Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.idfsSampleStatus IN (   10015002, --Marked for Deletion 
                                            10015003
                                        ) --Marked for Destruction
              AND (
                      (
                          m.idfsSite = @UserSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @UserSiteID)
                  );

        INSERT INTO @Results
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion 
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND (
                      (
                          m.idfsSite = @UserSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @UserSiteID)
                  );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        SET @ApprovalsCount =
        (
            SELECT COUNT(ID) FROM @Results
        );

        SELECT @SamplesUnaccessionedCount AS SamplesTabCount,
               @TestingInProgressCount AS TestingTabCount,
               @TransferredCount AS TransferredTabCount,
               @MyFavoritesCount AS MyFavoritesTabCount,
               @BatchesInProgressCount AS BatchesTabCount,
               @ApprovalsCount AS ApprovalsTabCount;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added test list parameter and where clause criteria.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/20/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     03/24/2022 Removed primary key from final results table variable.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/09/2022 Added batch test association indicator parameter.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- Stephen Long     02/20/2023 Added sent to organization sent to site ID and where criteria.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @BatchTestAssociationIndicator BIT = NULL,
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode INT = 0,
            @InProgressCount INT;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL INDEX IDX_1,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL INDEX IDX_1,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               1,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.idfsSite = @SentToOrganizationSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @SentToOrganizationSiteID)
                      OR @SentToOrganizationSiteID IS NULL
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               res.TestStatusTypeID,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (
                          t.idfBatchTest IS NULL
                          AND t.idfsTestResult IS NULL
                          AND @BatchTestAssociationIndicator = 1
                      )
                      OR @BatchTestAssociationIndicator IS NULL
                  ) -- Adding a test to a batch, so should not currently be a batch test ID.
              AND (
                      (t.idfTesting IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                       )
                      )
                      OR (@TestList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      t.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY res.ID,
                 res.TestStatusTypeID
        OPTION (RECOMPILE);

        SET @InProgressCount =
        (
            SELECT COUNT(*)
            FROM @FinalResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                       AND t.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.idfsTestStatus = 10001003
                  AND t.idfsTestName IS NOT NULL
                  AND t.blnNonLaboratoryTest = 0
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND (
                                      t.idfsTestStatus = 10001001 --Final
                                      OR t.idfsTestStatus = 10001003 --In Progress
                                      OR t.idfstestStatus = 10001006 --Amended
                                  )
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final 
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final
                                         OR t.idfsTestStatus = 10001003 --In Progress
                                         OR t.idfsTestStatus = 10001004 --Preliminary
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                      )
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT t.idfTesting AS TestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               m.idfMaterial AS SampleID,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfBatchTest AS BatchTestID,
               t.idfObservation AS ObservationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '**********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               disease.name AS DiseaseName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferCount,
               tro.idfTransferOut AS TransferID,
               t.idfHumanCase AS HumanDiseaseReportID,
               t.idfVetCase AS VeterinaryDiseaseReportID,
               t.idfMonitoringSession AS MonitoringSessionID,
               t.idfVector AS VectorID,
               t.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/18/2019 Added row selection indicator.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/12/2019 Added sample ID parameter.
-- Stephen Long     02/21/2019 Added root and parent sample ID's to the select list.  Added 
--                             test status type ID, batch test ID, site ID and test ID parameters.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
--                             Changed batch test portion of the where clause to bring back test 
--                             records with a null batch test/in progress unless an actual 
--                             batch test records is specified.  The Testing grid on the labor-
--                             atory module should exclude tests associated with a batch.  These 
--                             display on the Batches tab.
-- Stephen Long     04/03/2019 Changed tests where clause to look at the performed by organization 
--                             instead of sample sent to organization.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/02/2019 Updated joins for sample type and test status type from left to 
--                             inner.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     07/29/2019 Correction on test status typeID where clause conditions.
-- Stephen Long     08/28/2019 Added @TestID null check on the test status type id where clause.
-- Stephen Long     09/03/2019 Added send to organization as part of the where clause.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     09/26/2019 Added null OR portion on SiteID and OrganizationID where clauses.
-- Stephen Long     10/03/2019 Added test id parameter if/else.
-- Stephen Long     10/22/2019 Added test list parameter and where clause.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     02/19/2020 Corrected left joins needing intRowStatus = 0.
-- Stephen Long     03/10/2020 Added additional test status types: amended and final and days from 
--                             accession date.
-- Stephen Long     04/07/2020 Added option of no pagination for batch tests.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/11/2020 Correction on where clause criteria for batch tests in final or 
--                             amended status.
-- Stephen Long     09/16/2020 Removed test status type preliminary as these should only show in 
--                             the approvals query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/21/2021 Change function on reference data to handle inactive records.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/16/2021 Changed to use select row over instead of with cte.
-- Stephen Long     12/17/2021 Removed filtration rules; only apply on advanced search.
-- Stephen Long     12/18/2021 Changed left to inner join on accession condition and sample 
--                             status types.
-- Stephen Long     04/20/2022 Changed to include preliminary in the testing list for tests 
--                             not associated with a batch.
-- Stephen Long     05/24/2022 Added additional test status types for batch of in progress.
-- Stephen Long     05/25/2022 Fix for GIT item 326.
-- Stephen Long     07/25/2022 Removed option (recompile).
-- Stephen Long     08/12/2022 Removed preliminary from where criteria for default list.
-- Stephen Long     08/29/2012 Bug fix on DevOps item 4404.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- Stephen Long     03/02/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TEST_GETList]
		@LanguageID = N'en-US',
		@TestStatusTypeID = NULL,
		@SampleID = NULL,
		@TestID = NULL,
		@BatchTestID = NULL,
		@TestList = NULL,
		@DaysFromAccessionDate = 60,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_GETList]
(
    @LanguageID NVARCHAR(50),
    @TestStatusTypeID BIGINT = NULL,
    @SampleID BIGINT = NULL,
    @TestID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @DaysFromAccessionDate INT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @InProgressCount INT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @TestID IS NULL
           AND @TestList IS NULL
        BEGIN
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = t.idfsDiagnosis
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.intRowStatus = 0
                  AND t.idfsTestName IS NOT NULL
                  AND t.blnNonLaboratoryTest = 0
                  AND (
                          (
                              m.idfsSite = @UserSiteID
                              AND m.idfsCurrentSite IS NULL
                          )
                          OR (
                                 m.idfsCurrentSite = @UserSiteID
                             )
                      )
                  AND (
                          GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                          OR @DaysFromAccessionDate IS NULL
                      )
                  AND (
                          t.idfsTestStatus = @TestStatusTypeID
                          OR @TestStatusTypeID IS NULL
                      )
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND t.idfsTestStatus IN (   10001001, --Final
                                                          10001007, --Deleted
                                                          10001003, --In Progress
                                                          10001006
                                                      ) --Amended
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND t.idfsTestStatus IN (   10001001, --Final 
                                                             10001003, -- In Progress
                                                             10001004, --Preliminary
                                                             10001006
                                                         ) --Amended
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND t.idfsTestStatus IN (   10001001, --Final 
                                                             10001003, -- In Progress
                                                             10001004, --Preliminary
                                                             10001006
                                                         ) --Amended
                             )
                      )
                  AND (
                          t.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (
                          (t.idfBatchTest = @BatchTestID)
                          OR (
                                 t.idfBatchTest IS NULL
                                 AND @BatchTestID IS NULL
                             )
                      );

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT t.idfTesting
                FROM dbo.tlbTesting t
                    INNER JOIN dbo.tlbMaterial m
                        ON m.idfMaterial = t.idfMaterial
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = m.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE t.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup -- Default role
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = m.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003 -- Read permission
                  AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
            );

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT t.idfTesting
                FROM dbo.tlbTesting t
                    INNER JOIN dbo.tlbMaterial m
                        ON m.idfMaterial = t.idfMaterial
                           AND m.intRowStatus = 0
                    INNER JOIN @UserSitePermissions usp
                        ON usp.SiteID = m.idfsSite
                WHERE usp.Permission = 4 -- Deny permission
                      AND usp.PermissionTypeID = 10059003 -- Read permission
            );

            INSERT INTO @FinalResults
            SELECT res.ID,
                   res.TestStatusTypeID,
                   MAX(res.ReadPermissionIndicator),
                   MAX(res.AccessToPersonalDataPermissionIndicator),
                   MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
                   MAX(res.WritePermissionIndicator),
                   MAX(res.DeletePermissionIndicator)
            FROM @Results res
            WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
            GROUP BY res.ID,
                     res.TestStatusTypeID;
        END
        ELSE
        BEGIN
            INSERT INTO @FinalResults
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTesting t
            WHERE t.intRowStatus = 0
                  AND (
                          t.idfTesting = @TestID
                          OR @TestID IS NULL
                      )
                  AND (
                          t.idfTesting IN (
                                              SELECT CAST([Value] AS BIGINT)
                                              FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                          )
                          OR @TestList IS NULL
                      );
        END;

        SET @InProgressCount =
        (
            SELECT COUNT(   CASE
                                WHEN TestStatusTypeID = 10001003 --In Progress
                            THEN
                                    ID
                                ELSE
                                    NULL
                            END
                        )
            FROM @FinalResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                       AND t.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.intRowStatus = 0
                  AND (
                          t.idfTesting = @TestID
                          OR @TestID IS NULL
                      )
                  AND t.idfsTestName IS NOT NULL
                  AND t.blnNonLaboratoryTest = 0
                  AND (
                          (
                              m.idfsSite = @UserSiteID
                              AND m.idfsCurrentSite IS NULL
                          )
                          OR (
                                 m.idfsCurrentSite = @UserSiteID
                             )
                      )
                  AND (
                          GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                          OR @DaysFromAccessionDate IS NULL
                      )
                  AND (
                          t.idfTesting IN (
                                              SELECT CAST([Value] AS BIGINT)
                                              FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                          )
                          OR @TestList IS NULL
                      )
                  AND (
                          t.idfsTestStatus = @TestStatusTypeID
                          OR @TestStatusTypeID IS NULL
                      )
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND t.idfsTestStatus IN (   10001001, --Final
                                                          10001003, --In Progress
                                                          10001006
                                                      ) --Amended
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND t.idfsTestStatus IN (   10001001, --Final 
                                                             10001004, --Preliminary
                                                             10001006  --Amended
                                                         )
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND t.idfsTestStatus IN (   10001001, --Final 
                                                             10001003, -- In Progress
                                                             10001004, --Preliminary
                                                             10001006
                                                         ) --Amended
                             )
                      )
                  AND (
                          t.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (
                          (t.idfBatchTest = @BatchTestID)
                          OR (
                                 t.idfBatchTest IS NULL
                                 AND @BatchTestID IS NULL
                             )
                      )
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT t.idfTesting AS TestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               m.idfMaterial AS SampleID,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfBatchTest AS BatchTestID,
               t.idfObservation AS ObservationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               disease.name AS DiseaseName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferCount,
               tro.idfTransferOut AS TransferID,
               t.idfHumanCase AS HumanDiseaseReportID,
               t.idfVetCase AS VeterinaryDiseaseReportID,
               t.idfMonitoringSession AS MonitoringSessionID,
               t.idfVector AS VectorID,
               t.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_SEARCH_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     03/10/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     10/28/2020 Added where criteria from the test get list.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     09/24/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/08/2021 Changed pagination logic and removed optiont recompile.
-- Stephen Long     12/18/2021 Changed left to inner join on accession condition and sample 
--                             status types.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/04/2022 Add where criteria from the default testing listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     09/28/2022 Bug fix on item 5111.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     02/17/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TEST_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'PCR', -- Use 'Gnhnscvxb', 'Brucellosis', 'SWAZ200GEDD' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT,
    @DaysFromAccessionDate INT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InProgressCount INT;
    DECLARE @InitialResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResultsDedup TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @InitialResults
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.idfsTestName IS NOT NULL
              AND t.blnNonLaboratoryTest = 0
              AND (
                      (
                          m.idfsSite = @UserSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @UserSiteID)
                  )
              AND (
                      GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                      OR @DaysFromAccessionDate IS NULL
                  )
              AND (
                      (
                          t.idfBatchTest IS NULL
                          AND t.idfsTestStatus IN (   10001001, --Final
                                                      10001007, --Deleted
                                                      10001003, --In Progress
                                                      10001004, --Preliminary
                                                      10001006
                                                  ) --Amended
                      )
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001003 --In Progress
                             AND t.idfsTestStatus IN (   10001001, --Final 
                                                         10001003, -- In Progress
                                                         10001004, --Preliminary
                                                         10001006
                                                     ) --Amended
                         )
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001 --Closed
                             AND t.idfsTestStatus IN (   10001001, --Final 
                                                         10001003, -- In Progress
                                                         10001004, --Preliminary
                                                         10001006
                                                     ) --Amended
                         )
                  );

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                  + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
            WHERE t.idfsDiagnosis IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE t.idfsDiagnosis = ID
            );
        END

        INSERT INTO @FinalResultsDedup
        SELECT *
        FROM @FinalResults;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResultsDedup
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @FinalResultsDedup res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @FinalResultsDedup
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @InProgressCount =
        (
            SELECT COUNT(*)
            FROM @FinalResultsDedup res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                       AND t.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE (t.idfsTestStatus = 10001003)
                  AND (t.idfsTestName IS NOT NULL)
                  AND (t.blnNonLaboratoryTest = 0)
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND (
                                      t.idfsTestStatus = 10001001 --Final
                                      OR t.idfsTestStatus = 10001003 --In Progress
                                      OR t.idfstestStatus = 10001006 --Amended
                                  )
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final 
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final
                                         OR t.idfsTestStatus = 10001003 --In Progress
                                         OR t.idfsTestStatus = 10001004 --Preliminary
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                      )
        );

        SELECT t.idfTesting AS TestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               m.idfMaterial AS SampleID,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfBatchTest AS BatchTestID,
               t.idfObservation AS ObservationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               disease.name AS DiseaseName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferCount,
               tro.idfTransferOut AS TransferID,
               t.idfHumanCase AS HumanDiseaseReportID,
               t.idfVetCase AS VeterinaryDiseaseReportID,
               t.idfMonitoringSession AS MonitoringSessionID,
               t.idfVector AS VectorID,
               t.intRowStatus AS RowStatus,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount
        FROM @FinalResultsDedup res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList
--
-- Description:	Get transferred advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/18/2019 Initial relase.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/07/2020 Added test name type ID to the model.
-- Stephen Long     04/15/2020 Changed select from table to tlbTransferOUT instead of tlbMaterial.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     03/24/2022 Removed primary key from final results table variable.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Changed monitoring session disease join from inner to left.
-- Stephen Long     08/24/2022 Added test name type name parameter and where criteria against test 
--                             requested.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- Stephen Long     03/02/2023 Added sent to organization sent to site ID and where criteria.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @TestNameTypeName NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @TransferList VARCHAR(MAX) = NULL,
    @FiltrationIndicator BIT = 1, 
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               1,
               CASE
                   WHEN tr.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN tr.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN tr.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN tr.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.idfsSite = @SentToOrganizationSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @SentToOrganizationSiteID)
                      OR @SentToOrganizationSiteID IS NULL
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = tr.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = tr.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE tr.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               tom.idfMaterial,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = tr.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = tr.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               tom.idfMaterial,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = tr.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = m.idfHumanCase
                   AND hc.intRowStatus = 0
            LEFT JOIN dbo.tlbVetCase vc
                ON vc.idfVetCase = m.idfVetCase
                   AND vc.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (tr.idfTransferOut IN (
                                                SELECT CAST([Value] AS BIGINT)
                                                FROM dbo.FN_GBL_SYS_SplitList(@TransferList, NULL, ',')
                                            )
                      )
                      OR (@TransferList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      tr.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                      OR tr.TestRequested LIKE '%' + @TestNameTypeName + '%'
                      OR @TestNameTypeName IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                                       )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      (m.strCalculatedHumanName LIKE '%' + @PatientName + '%')
                      OR (@PatientName IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tr.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY tr.idfTransferOut,
                 m.idfMaterial
        OPTION (RECOMPILE);

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (
                                           SELECT COUNT(res.ID)
                                           FROM @FinalResults res
                                               INNER JOIN dbo.tlbTransferOUT tr
                                                   ON tr.idfTransferOut = res.ID
                                           WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                                              10001006  --Amended
                                                                          )
                                       );

        SELECT tr.idfTransferOut AS TransferID,
               tr.strBarcode AS EIDSSTransferID,
               m.idfMaterial AS TransferredOutSampleID,
               (
                   SELECT TOP 1
                       idfMaterial
                   FROM dbo.tlbMaterial
                   WHERE idfRootMaterial = m.idfMaterial
                         AND intRowStatus = 0
                         AND idfsSampleKind = 12675430000000 --Transferred in
               ) AS TransferredInSampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               tr.idfSendToOffice AS TransferredToOrganizationID,
               transferredToOrganization.[FullName] AS TransferredToOrganizationName,
               tr.idfSendFromOffice AS TransferredFromOrganizationID,
               tr.datSendDate AS TransferDate,
               tr.TestRequested,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsDiagnosis AS TestDiseaseID,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.strContactPerson AS ContactPersonName,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.blnAccessioned AS AccessionIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               tr.strNote AS PurposeOfTransfer,
               tr.idfsSite AS TransferredFromOrganizationSiteID,
               m.idfSendToOffice AS SentToOrganizationID,
               tr.idfSendByPerson AS SentByPersonID,
               tr.idfsTransferStatus AS TransferStatusTypeID,
               tr.intRowStatus AS RowStatus,
               a.strAnimalCode AS EIDSSAnimalID,
               IIF(
                  (
                      SELECT COUNT(t2.idfTesting)
                      FROM dbo.tlbTesting t2
                      WHERE t2.idfsTestStatus IN (   10001003,
                                                              --In Progress
                                                     10001004,
                                                              --Preliminary
                                                     10001005 --Not Started
                                                 )
                            AND t2.idfMaterial = m.idfMaterial
                  ) > 0,
                  1,
                  0) AS TestAssignedIndicator,
               (CASE
                    WHEN transferredToOrganization.idfsSite IS NULL THEN
                        1
                    ELSE
                        0
                END
               ) AS NonEIDSSLaboratoryIndicator,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @InProgressCount AS InProgressCount,
               COUNT(*) OVER () AS TotalRowCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMaterial
                   AND m.idfMonitoringSession IS NOT NULL
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                   AND transferredToOrganization.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_GETList
--
-- Description:	Get laboratory transfer list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added row selection indicator and corrected intRowStatus in where 
--                             clause to use sample table instead of testing table.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/09/2019 Added sample ID parameter.
-- Stephen Long     02/19/2019 Added test requested, disease ID and functional area to the select 
--                             list.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/19/2019 Added comma to sent by person name (last name ', ' first name).
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Added site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/17/2020 Removed declined transfer status from inclusion in the list.
-- Stephen Long     03/30/2020 Changed criteria on transferred in sample left join.
-- Stephen Long     04/07/2020 Added test name type ID to model, and corrected test assigned 
--                             indicator.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/09/2020 Added intRowStatus check on transferred from organization.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Jason Li			09/24/2020 Remove blnExternalTest --AND t.blnExternalTest = 1 at line 224
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/17/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/18/2021 Added test status type name to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/12/2022 Changed default sort column to EIDSSTransferID.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TRANSFER_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @TransferredInSampleIdentifiers TABLE
    (
        SampleID BIGINT NOT NULL,
        TransferredInSampleID BIGINT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        IF @SampleID IS NULL
        BEGIN
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE (
                      tr.idfSendFromOffice = @UserOrganizationID
                      OR tr.idfSendToOffice = @UserOrganizationID
                  )
                  AND (tr.idfsTransferStatus IN (   10001003,
                                                             --In Progress
                                                    10001006 --Amended
                                                )
                      )
                  AND tr.intRowStatus = 0;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = tr.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT tr.idfTransferOut
                FROM dbo.tlbTransferOUT tr
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = tr.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE tr.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = tr.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003 -- Read permission
                  AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
            );

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT tr.idfTransferOut
                FROM dbo.tlbTransferOUT tr
                    INNER JOIN @UserSitePermissions usp
                        ON usp.SiteID = tr.idfsSite
                WHERE usp.Permission = 4 -- Deny permission
                      AND usp.PermissionTypeID = 10059003 -- Read permission
            );

            INSERT INTO @FinalResults
            SELECT res.ID,
                   res.SampleID,
                   MAX(res.ReadPermissionIndicator),
                   MAX(res.AccessToPersonalDataPermissionIndicator),
                   MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
                   MAX(res.WritePermissionIndicator),
                   MAX(res.DeletePermissionIndicator)
            FROM @Results res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
                  AND (
                          tr.idfSendFromOffice = @UserOrganizationID
                          OR tr.idfSendToOffice = @UserOrganizationID
                      )
                  AND (
                          tom.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (tr.idfsTransferStatus IN (   10001003,
                                                             --In Progress
                                                    10001006 --Amended
                                                )
                      )
                  AND tr.intRowStatus = 0
            GROUP BY ID,
                     SampleID;
        END
        ELSE
        BEGIN
            INSERT INTO @FinalResults
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE tom.idfMaterial = @SampleID
                  AND tr.intRowStatus = 0;
        END

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (
                                           SELECT COUNT(DISTINCT res.ID)
                                           FROM @FinalResults res
                                               INNER JOIN dbo.tlbTransferOUT tr
                                                   ON tr.idfTransferOut = res.ID
                                           WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                                              10001006  --Amended
                                                                          )
                                       );

        INSERT INTO @TransferredInSampleIdentifiers
        SELECT SampleID,
               transferredInSample.idfMaterial
        FROM @FinalResults
            INNER JOIN dbo.tlbMaterial AS transferredInSample
                ON transferredInSample.idfRootMaterial = SampleID
                   AND transferredInSample.intRowStatus = 0
                   AND transferredInSample.idfsSampleKind = 12675430000000; --Transferred in
        --GROUP BY SampleID,
        --         transferredInSample.idfMaterial;

        SELECT tr.idfTransferOut AS TransferID,
               tr.strBarcode AS EIDSSTransferID,
               m.idfMaterial AS TransferredOutSampleID,
               (
                   SELECT TOP 1
                       TransferredInSampleID
                   FROM @TransferredInSampleIdentifiers
                   WHERE SampleID = res.SampleID
               ) AS TransferredInSampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               tr.idfSendToOffice AS TransferredToOrganizationID,
               transferredToOrganization.AbbreviatedName AS TransferredToOrganizationName,
               tr.idfSendFromOffice AS TransferredFromOrganizationID,
               tr.datSendDate AS TransferDate,
               tr.TestRequested,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsDiagnosis AS TestDiseaseID,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.strContactPerson AS ContactPersonName,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.blnAccessioned AS AccessionIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               tr.strNote AS PurposeOfTransfer,
               tr.idfsSite AS TransferredFromOrganizationSiteID,
               transferredToOrganization.idfsSite AS TransferredToOrganizationSiteID,
               m.idfSendToOffice AS SentToOrganizationID,
               tr.idfSendByPerson AS SentByPersonID,
               tr.idfsTransferStatus AS TransferStatusTypeID,
               tr.intRowStatus AS RowStatus,
               a.strAnimalCode AS EIDSSAnimalID,
               CASE
                   WHEN m.TestUnassignedIndicator = 1 THEN
                       0
                   ELSE
                       1
               END AS TestAssignedIndicator,
               CASE
                   WHEN transferredToOrganization.idfsSite IS NULL THEN
                       1
                   ELSE
                       0
               END AS NonEIDSSLaboratoryIndicator,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @InProgressCount AS InProgressCount,
               COUNT(*) OVER () AS TotalRowCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMaterial
                   AND m.idfMonitoringSession IS NOT NULL
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
                   AND m.idfVectorSurveillanceSession IS NOT NULL
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_SEARCH_GETList
--
-- Description:	Get laboratory transfer list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Added site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/07/2020 Added test name type ID to the model.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Mark Wilson		08/17/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/23/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/04/2022 Add where criteria from the default sample listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     09/28/2022 Bug fix on item 5111.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
-- Stephen Long     10/24/2022 Fix for GIT item #46 - duplciate records comming back.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Brucellosis', 'XWEB00' as other tests.
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InitialResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @DeduplicatedFinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT tr.idfTransferOut,
               tom.idfMaterial
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE (
                  tr.idfSendFromOffice = @UserOrganizationID
                  OR tr.idfSendToOffice = @UserOrganizationID
              )
              AND (tr.idfsTransferStatus IN (   10001003,
                                                         --In Progress
                                                10001006 --Amended
                                            )
                  )
              AND tr.intRowStatus = 0;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
        WHERE CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%';


        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE CONVERT(NVARCHAR(MAX), FORMAT(tr.datSendDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ir.ID,
                   ir.SampleID
            FROM @InitialResults ir
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ir.SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE tr.strBarcode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE tr.TestRequested LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
        WHERE t.strContactPerson LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredFromOrganization
                ON transferredFromOrganization.idfOffice = tr.idfSendFromOffice
        WHERE transferredFromOrganization.AbbreviatedName LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
        WHERE transferredToOrganization.AbbreviatedName LIKE '%' + @SearchString + '%';

        INSERT INTO @DeduplicatedFinalResults
        SELECT ID,
               SampleID
        FROM @FinalResults
        GROUP BY ID,
                 SampleID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @DeduplicatedFinalResults
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = tr.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE tr.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @DeduplicatedFinalResults res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = tr.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @DeduplicatedFinalResults
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = tr.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (
                                           SELECT COUNT(DISTINCT res.ID)
                                           FROM @DeduplicatedFinalResults res
                                               INNER JOIN dbo.tlbTransferOUT tr
                                                   ON tr.idfTransferOut = res.ID
                                           WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                                              10001006  --Amended
                                                                          )
                                       );

        SELECT tr.idfTransferOut AS TransferID,
               tr.strBarcode AS EIDSSTransferID,
               m.idfMaterial AS TransferredOutSampleID,
               (
                   SELECT TOP 1
                       idfMaterial
                   FROM dbo.tlbMaterial
                   WHERE idfRootMaterial = m.idfMaterial
                         AND intRowStatus = 0
                         AND idfsSampleKind = 12675430000000 --Transferred in
               ) AS TransferredInSampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               tr.idfSendToOffice AS TransferredToOrganizationID,
               transferredToOrganization.[FullName] AS TransferredToOrganizationName,
               tr.idfSendFromOffice AS TransferredFromOrganizationID,
               tr.datSendDate AS TransferDate,
               tr.TestRequested,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsDiagnosis AS TestDiseaseID,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.strContactPerson AS ContactPersonName,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.blnAccessioned AS AccessionIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               tr.strNote AS PurposeOfTransfer,
               tr.idfsSite AS TransferredFromOrganizationSiteID,
               m.idfSendToOffice AS SentToOrganizationID,
               tr.idfSendByPerson AS SentByPersonID,
               tr.idfsTransferStatus AS TransferStatusTypeID,
               tr.intRowStatus AS RowStatus,
               a.strAnimalCode AS EIDSSAnimalID,
               IIF(
                  (
                      SELECT COUNT(t2.idfTesting)
                      FROM dbo.tlbTesting t2
                      WHERE t2.idfsTestStatus IN (   10001003,
                                                              --In Progress
                                                     10001004,
                                                              --Preliminary
                                                     10001005 --Not Started
                                                 )
                            AND t2.idfMaterial = m.idfMaterial
                  ) > 0,
                  1,
                  0) AS TestAssignedIndicator,
               (CASE
                    WHEN transferredToOrganization.idfsSite IS NULL THEN
                        1
                    ELSE
                        0
                END
               ) AS NonEIDSSLaboratoryIndicator,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @InProgressCount AS InProgressCount,
               COUNT(*) OVER () AS TotalRowCount
        FROM @DeduplicatedFinalResults res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            INNER JOIN dbo.FN_GBL_Institution(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                   AND transferredToOrganization.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMaterial
                   AND m.idfMonitoringSession IS NOT NULL
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Session_GetList]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Session_GetList
--
-- Description: Get a list of outbreak sessions for the outbreak module.
--          
-- Author: Doug Albanese
--
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Lamont Mitchell 01/09/2019 Removed ReturnCode and Return Message
-- Stephen Long	   01/13/2020 Changed from strDefault to name to pick up language translation.
-- Stephen Long	   01/26/2020 Added site list parameter for site filtration.
-- Stephen Long	   05/19/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long	   11/18/2020 Added site ID to the query.
-- Stephen Long	   11/27/2020 Added configurable site filtration rules.
-- Stephen Long	   12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long	   12/24/2020 Modified join on disease filtration default role rule.  Changed 
--                            function call to bring back inactive outbreak status and type to 
--                            handle v6.1 data that has been made obsolete.
-- Stephen Long	   12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long	   04/04/2021 Added updated pagination and location hierarchy.
-- Stephen Long	   08/16/2021 Added gisLocation and location joins where IsDescendent is called.
-- Doug Albanese   11/17/2021 Fixed the default range for returning Outbreak for the past year only.
-- Doug Albanese   12/03/2021 Integrated the new FN_GBL_LocationHierarchy_Flattened for use with 
--                             the Location Hierarchy
-- Stephen Long    03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Doug Albanese   05/16/2022 Corrected Date Range, when not passed. This causes other searches 
--                             not to work well.
-- Stephen Long    06/03/2022 Updated to point default access rules to base reference.
-- Doug Albanese   01/10/2023 Changed the default sorting to correctly sort for "Status" and then 
--                            "Start Date"
-- Stephen Long    01/11/2023 Updated for site filtration queries.
-- Doug Albanese   01/12/2023 Further correction on default sorting on initial load.
-- Stephen Long    01/14/2023 Fix on site filtration queries; added site permission table 
--                            variables.
-- Doug Albanese   01/25/2023 Added logic to exclude migration status in the base reference
-- Doug Albanese   01/25/2023 Included "intOrder" for Outbreak Status to correctly order the initial listing of sessions
-- Doug Albanese   02/10/2023 Change the "Quick Search" to operate against "Name" instead of "Default"
-- Doug Albanese   03/10/2023 Defect 5586: Migrated data, with foreign addresses, are not searchable.
--
-- exec [dbo].[USP_OMM_Session_GetList] @LanguageId= 'en-us', @UserSiteId = 0, @UserOrganizationID = 0, @UserEmployeeId = 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Session_GetList]
(
    @LanguageID NVARCHAR(50),
    @OutbreakID NVARCHAR(200) = NULL,
    @OutbreakTypeID BIGINT = NULL,
    @SearchDiagnosesGroup BIGINT = NULL,
    @StartDateFrom DATETIME = NULL,
    @StartDateTo DATETIME = NULL,
    @OutbreakStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @QuickSearch NVARCHAR(200) = '',
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'INIT',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
        SET NOCOUNT ON;

    IF @StartDateFrom IS NULL
       or @StartDateFrom = NULL
    BEGIN
        SET @StartDateFrom = CAST(CAST(CAST(0xD1BA AS BIGINT) * -1 AS DATETIME) AS DATE)
    END

    IF @StartDateTo IS NULL
       OR @StartDateTo = NULL
    BEGIN
        SET @StartDateTo = CAST(CAST(CAST(0x2D247f AS BIGINT) AS DATETIME) AS DATE)
    END

    DECLARE @firstRec INT
    DECLARE @lastRec INT
    SET @firstRec = (@PageNumber - 1) * @pagesize
    SET @lastRec = (@PageNumber * @pageSize + 1)

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    DECLARE @RuleActiveStatus INT = 0;
    DECLARE @AdministrativeLevelTypeID INT;
    DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
    DECLARE @DefaultAccessRules AS TABLE
    (
        AccessRuleID BIGINT NOT NULL,
        ActiveIndicator INT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        AdministrativeLevelTypeID INT NULL
    );

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FilteredResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    -- Set defaults for invalid passed parameters
    IF (@StartDateFrom IS NULL)
    BEGIN
        SET @StartDateFrom = DATEADD(day, -365, GETDATE())
    END

    IF (@StartDateTo IS NULL)
    BEGIN
        SET @StartDateTo = GETDATE()
    END

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        IF @QuickSearch = ''
           OR @QuickSearch IS NULL
        BEGIN
            -- ========================================================================================
            -- NO CONFIGURABLE FILTRATION RULES APPLIED
            --
            -- For first and second level sites, do not apply any site configurable rules.
            -- ========================================================================================
            IF @ApplySiteFiltrationIndicator = 0
            BEGIN
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.datStartDate
                      BETWEEN @StartDateFrom AND @StartDateTo
                      AND (
                              (o.OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                      WHEN '' THEN
                                                          OutbreakTypeID
                                                      ELSE
                                                          @OutbreakTypeID
                                                  END
                              )
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              (o.idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                          WHEN '' THEN
                                                              idfsOutbreakStatus
                                                          ELSE
                                                              @OutbreakStatusTypeID
                                                      END
                              )
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                     WHEN '' THEN
                                                                         o.idfsDiagnosisOrDiagnosisGroup
                                                                     ELSE
                                                                         @SearchDiagnosesGroup
                                                                 END
                              )
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                                  WHEN '' THEN
                                                      '%%'
                                                  ELSE
                                                      '%' + @OutbreakID + '%'
                                              END
                          );
            END
            ELSE
            BEGIN
                -- =======================================================================================
                -- CONFIGURABLE FILTRATION RULES
                -- 
                -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
                -- overlap the default rules.
                -- =======================================================================================
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID
                      AND o.datStartDate
                      BETWEEN @StartDateFrom AND @StartDateTo
                      AND (
                              (o.OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                      WHEN '' THEN
                                                          OutbreakTypeID
                                                      ELSE
                                                          @OutbreakTypeID
                                                  END
                              )
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              (o.idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                          WHEN '' THEN
                                                              idfsOutbreakStatus
                                                          ELSE
                                                              @OutbreakStatusTypeID
                                                      END
                              )
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                     WHEN '' THEN
                                                                         o.idfsDiagnosisOrDiagnosisGroup
                                                                     ELSE
                                                                         @SearchDiagnosesGroup
                                                                 END
                              )
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                                  WHEN '' THEN
                                                      '%%'
                                                  ELSE
                                                      '%' + @OutbreakID + '%'
                                              END
                          );

                -- =======================================================================================
                -- DEFAULT CONFIGURABLE FILTRATION RULES
                --
                -- Apply active default configurable filtration rules for third level sites.
                -- =======================================================================================
                INSERT INTO @DefaultAccessRules
                SELECT AccessRuleID,
                       a.intRowStatus,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator,
                       a.AdministrativeLevelTypeID
                FROM dbo.AccessRule a
                WHERE AccessRuleID = 10537022;

                SELECT @RuleActiveStatus = ActiveIndicator
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537022;

                IF @RuleActiveStatus = 0
                BEGIN
                    SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                    FROM @DefaultAccessRules
                    WHERE AccessRuleID = 10537022;

                    SELECT @AdministrativeLevelNode
                        = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared AS l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                    WHERE o.idfOffice = @UserOrganizationID
                          AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                    -- Administrative level specified in the rule of the site where the session was created.
                    INSERT INTO @FilteredResults
                    SELECT ob.idfOutbreak,
                           a.ReadPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           a.WritePermissionIndicator,
                           a.DeletePermissionIndicator
                    FROM dbo.tlbOutbreak ob
                        INNER JOIN dbo.tstSite s
                            ON ob.idfsSite = s.idfsSite
                        INNER JOIN dbo.tlbOffice o
                            ON o.idfOffice = s.idfOffice
                               AND o.intRowStatus = 0
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                               AND l.intRowStatus = 0
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                        INNER JOIN @DefaultAccessRules a
                            ON a.AccessRuleID = 10537022
                    WHERE ob.intRowStatus = 0
                          AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
                END;

                --
                -- Apply at the user's site group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                        ON userSiteGroup.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's employee group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's ID level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup sgs
                        ON sgs.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND sgs.idfsSite = o.idfsSite;

                -- 
                -- Apply at the user's site level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's employee group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's ID level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- Copy filtered results to results and use search criteria
                INSERT INTO @Results
                SELECT ID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator
                FROM @FilteredResults
                    INNER JOIN dbo.tlbOutbreak o
                        ON o.idfOutbreak = ID
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.datStartDate
                      BETWEEN @StartDateFrom AND @StartDateTo
                      AND (
                              (o.OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                      WHEN '' THEN
                                                          OutbreakTypeID
                                                      ELSE
                                                          @OutbreakTypeID
                                                  END
                              )
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              (o.idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                          WHEN '' THEN
                                                              idfsOutbreakStatus
                                                          ELSE
                                                              @OutbreakStatusTypeID
                                                      END
                              )
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                     WHEN '' THEN
                                                                         o.idfsDiagnosisOrDiagnosisGroup
                                                                     ELSE
                                                                         @SearchDiagnosesGroup
                                                                 END
                              )
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                                  WHEN '' THEN
                                                      '%%'
                                                  ELSE
                                                      '%' + @OutbreakID + '%'
                                              END
                          )
                GROUP BY ID,
                         ReadPermissionIndicator,
                         AccessToPersonalDataPermissionIndicator,
                         AccessToGenderAndAgeDataPermissionIndicator,
                         WritePermissionIndicator,
                         DeletePermissionIndicator;
            END;

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================		
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND oa.idfActor = -506 -- Default role
                        );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND o.intRowStatus = 0
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE o.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND o.intRowStatus = 0
                  AND oa.idfActor = @UserEmployeeID
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1 -- Deny permission
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND idfActor = @UserEmployeeID
                        );

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================		
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT o.idfOutbreak
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = o.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE o.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserGroupSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = o.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003; -- Read permission

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN @UserSitePermissions usp
                                    ON usp.SiteID = o.idfsSite
                            WHERE usp.Permission = 4 -- Deny permission
                                  AND usp.PermissionTypeID = 10059003 -- Read permission
                        );
        END
        ELSE
        BEGIN
            -- ========================================================================================
            -- NO CONFIGURABLE FILTRATION RULES APPLIED
            --
            -- For first and second level sites, do not apply any configurable filtration rules.
            -- ========================================================================================
            IF @ApplySiteFiltrationIndicator = 0
            BEGIN
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.name LIKE '%' + @QuickSearch + '%'
                              OR ot.name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          );
            END
            ELSE
            BEGIN
                -- =======================================================================================
                -- CONFIGURABLE FILTRATION RULES
                -- 
                -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
                -- overlap the default rules.
                -- =======================================================================================
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.name LIKE '%' + @QuickSearch + '%'
                              OR ot.name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          );


                -- =======================================================================================
                -- DEFAULT CONFIGURABLE FILTRATION RULES
                --
                -- Apply active default configurable filtration rules for third level sites.
                -- =======================================================================================
                INSERT INTO @DefaultAccessRules
                SELECT AccessRuleID,
                       a.intRowStatus,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator,
                       a.AdministrativeLevelTypeID
                FROM dbo.AccessRule a
                WHERE AccessRuleID = 10537022;

                SELECT @RuleActiveStatus = ActiveIndicator
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537022;

                IF @RuleActiveStatus = 0
                BEGIN
                    SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                    FROM @DefaultAccessRules
                    WHERE AccessRuleID = 10537022;

                    SELECT @AdministrativeLevelNode
                        = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared AS l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                    WHERE o.idfOffice = @UserOrganizationID
                          AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                    -- Administrative level specified in the rule of the site where the session was created.
                    INSERT INTO @FilteredResults
                    SELECT ob.idfOutbreak,
                           a.ReadPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           a.WritePermissionIndicator,
                           a.DeletePermissionIndicator
                    FROM dbo.tlbOutbreak ob
                        INNER JOIN dbo.tstSite s
                            ON ob.idfsSite = s.idfsSite
                        INNER JOIN dbo.tlbOffice o
                            ON o.idfOffice = s.idfOffice
                               AND o.intRowStatus = 0
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                               AND l.intRowStatus = 0
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                        INNER JOIN @DefaultAccessRules a
                            ON a.AccessRuleID = 10537022
                    WHERE ob.intRowStatus = 0
                          AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
                END;

                --
                -- Apply at the user's site group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                        ON userSiteGroup.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's employee group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's ID level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup sgs
                        ON sgs.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND sgs.idfsSite = o.idfsSite;

                -- 
                -- Apply at the user's site level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's employee group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's ID level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- Copy filtered results to results and use search criteria
                INSERT INTO @Results
                SELECT ID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator
                FROM @FilteredResults
                    INNER JOIN dbo.tlbOutbreak o
                        ON o.idfOutbreak = ID
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.name LIKE '%' + @QuickSearch + '%'
                              OR ot.name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          )
                GROUP BY ID,
                         ReadPermissionIndicator,
                         AccessToPersonalDataPermissionIndicator,
                         AccessToGenderAndAgeDataPermissionIndicator,
                         WritePermissionIndicator,
                         DeletePermissionIndicator;
            END;

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================		
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND oa.idfActor = -506 -- Default role
                        );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE oa.intPermission = 2 -- Allow permission
                  AND o.intRowStatus = 0
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE oa.intPermission = 2 -- Allow permission
                  AND o.intRowStatus = 0
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1 -- Deny permission
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND idfActor = @UserEmployeeID
                        );

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================		
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT o.idfOutbreak
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = o.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE o.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserGroupSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = o.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003; -- Read permission

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN @UserSitePermissions usp
                                    ON usp.SiteID = o.idfsSite
                            WHERE usp.Permission = 4 -- Deny permission
                                  AND usp.PermissionTypeID = 10059003 -- Read permission
                        );
        END;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY ID;
		

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'OutbreakID'
                                                        AND @SortOrder = 'ASC' THEN
                                          (os.name + ' ' + o.strOutbreakID)
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakID'
                                                        AND @SortOrder = 'DESC' THEN
                                               (os.name + ' ' + o.strOutbreakID)
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       os.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       os.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ot.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ot.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel1Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel1Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel4Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel4Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel4Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel4Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel5Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel5Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel5Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel5Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel6Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel6Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel6Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel6Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel7Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel7Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel7Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel7Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       d.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       d.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       o.datStartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       o.datStartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'INIT' THEN
                                                       CAST(os.intOrder AS NVARCHAR) + ',' + CONVERT(NVARCHAR, o.datStartDate, 12) + ' DESC'
                                               END DESC
                                     ) AS ROWNUM,
                   ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbOutbreak AS o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
           )
        SELECT paging.ROWNUM,
               o.idfOutbreak,
               strOutbreakID AS OutbreakID,
               d.name AS DiseaseName,
               os.name AS OutbreakStatusTypeName,
               ot.name AS OutbreakTypeName,
               lh.AdminLevel1Name AS AdministrativeLevel1Name,
               lh.AdminLevel2Name AS AdministrativeLevel2Name,
               lh.AdminLevel3Name AS AdministrativeLevel3Name,
               lh.AdminLevel4Name AS AdministrativeLevel4Name,
               lh.AdminLevel5Name AS AdministrativeLevel5Name,
               lh.AdminLevel6Name AS AdministrativeLevel6Name,
               lh.AdminLevel7Name AS AdministrativeLevel7Name,
               o.datStartDate AS StartDate,
               o.idfsSite AS SiteID,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               c AS RecordCount,
               (
                   SELECT COUNT(*) FROM dbo.tlbOutbreak WHERE intRowStatus = 0
               ) AS TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
        FROM @FinalResults res
            INNER JOIN paging
                ON paging.ID = res.ID
            INNER JOIN dbo.tlbOutbreak o
                ON o.idfOutbreak = res.ID
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) d
                ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation gl
                ON o.idfGeoLocation = gl.idfGeoLocation
            LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                ON lh.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                ON ot.idfsReference = o.OutbreakTypeId
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        ORDER BY paging.ROWNUM;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;

END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_BASEREFERENCE_Filtered_GETList]...';


GO
-- ============================================================================
-- Name: USP_REF_BASEREFERENCE_Filtered_GETList
--
-- Description:	Get the reference types for Base Reference Editor.
--
-- Author: Mark Wilson
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Mark Wilson		07/15/2022 new sp based on USP_REF_BASEREFERENCE_GETList
-- Doug Albanese	12/01/2022 Added LOINC on the return
-- Stephen Long     01/18/2023 Fix so _ and % characters will return in the 
--                             filter.
-- Stephen Long     02/27/2023 Added KeyId field.
--
/*

exec USP_REF_BASEREFERENCE_Filtered_GETList 19000076, 'en-US', @PageSize=200

*/
-- ============================================================================
ALTER PROCEDURE [dbo].[USP_REF_BASEREFERENCE_Filtered_GETList]
	 @idfsReferenceType	   BIGINT
	,@langID			   NVARCHAR(50)
	,@advancedSearch	   NVARCHAR(100) = NULL
	,@pageNo			   INT = 1
	,@pageSize			   INT = 10 
	,@sortColumn		   NVARCHAR(30) = 'strName' 
	,@sortOrder			   NVARCHAR(4) = 'asc'

AS
BEGIN	
	BEGIN TRY
		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE
		( 
			idfsBaseReference BIGINT, 
			idfsReferenceType BIGINT, 
			strDefault		  NVARCHAR(2000), 
			strName			  NVARCHAR(2000),
			intHACode		  INT,
			strHACode		  NVARCHAR(4000),
			strHACodeNames	  NVARCHAR(4000),
			intOrder		  INT,
			LOINC			  NVARCHAR(200)
		)

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		
		IF( @advancedSearch IS NOT NULL )
		BEGIN
			SET @advancedSearch = REPLACE(@advancedSearch, '%', '[%]');
			SET @advancedSearch = REPLACE(@advancedSearch, '_', '[_]');

			INSERT INTO @T
			SELECT * FROM
			(
			   SELECT 
				  br.idfsBaseReference, 
				  br.idfsReferenceType, 
				  br.strDefault, 
				  brs.[name] AS strName,
				  br.intHACode, 
				  dbo.FN_GBL_HACode_ToCSV(@LangID,br.intHACode) AS strHACode,			
				  dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.intHACode) AS strHACodeNames,
				  br.intOrder,
				  LCM.LOINC_NUM AS LOINC
			   FROM  dbo.trtBaseReference br
			   JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS ON br.idfsBaseReference = brs.idfsReference 
			   LEFT JOIN LOINCEidssMapping LCM ON LCM.idfsBaseReference = br.idfsBaseReference
			   WHERE 
				   br.intRowStatus = 0 AND brs.intRowStatus = 0 
				   AND br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
													19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
													19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
													19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
													19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
													19000140)
				
			) AS S
			WHERE 
			( 
				strDefault LIKE '%' + @advancedSearch + '%' OR
				strName LIKE '%' + @advancedSearch + '%' OR
				strHACode LIKE '%' + @advancedSearch + '%' OR 
				strHACodeNames LIKE '%' + @advancedSearch + '%' 
			)
		END ELSE
			INSERT INTO @T
			SELECT 
				br.[idfsBaseReference], 
				br.[idfsReferenceType], 
				br.[strDefault], 
				brs.name AS strName,
				br.[intHACode], 
				dbo.FN_GBL_HACode_ToCSV(@LangID,br.[intHACode]) AS strHACode,			
				dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.[intHACode]) AS strHACodeNames,
				br.[intOrder],
				LCM.LOINC_NUM AS LOINC
			FROM  dbo.trtBaseReference br
			JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS ON br.idfsBaseReference = brs.idfsReference 
			LEFT JOIN LOINCEidssMapping LCM ON LCM.idfsBaseReference = br.idfsBaseReference
			WHERE br.[idfsReferenceType] = @idfsReferenceType 
			   AND br.intRowStatus = 0 
			   AND brs.intRowStatus = 0 
			   AND br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
												 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
												 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
												 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
												 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
												 19000140);

		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'asc' THEN idfsBaseReference END ASC,
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'desc' THEN idfsBaseReference END DESC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'asc' THEN idfsReferenceType END ASC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'desc' THEN idfsReferenceType END DESC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'asc' THEN strHACode END ASC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'desc' THEN strHACode END DESC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'asc' THEN strHACodeNames END ASC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'desc' THEN strHACodeNames END DESC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'asc' THEN LOINC END ASC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'desc' THEN LOINC END DESC
				,IIF( @sortColumn = 'intOrder',strName,NULL) ASC
		) AS ROWNUM,		
		COUNT(*) OVER () AS 
				TotalRowCount,
				idfsBaseReference AS KeyId, 
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC
			FROM @T
		)
			SELECT
				TotalRowCount,
				idfsBaseReference AS KeyId, 
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 	
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_DEL]...';


GO
--=================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_DEL
--
-- Description: Removes disease reference from active list of diseases
--							
-- Author:		Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		09/26/2018 Initial Release
-- Ricky Moss		12/12/2018 Removed return codes
-- Ricky Moss		02/09/2019 Added removal of tests, sample type and penside tests from disease
-- Ricky Moss		03/31/2019 Remove delete Anyway parameter
-- Leo Tracchia		11/25/2020 Added @forceDelete parameter as optional
-- Doug Albanese	08/03/2021 Added the deletion routine to deactivate the record tied to the 
--                             base reference
-- Stephen Long     10/31/2022 Added site alert logic.
-- Leo Tracchia		02/20/2023 Added data audit logic for deletes
--
-- Test Code:
-- exec USP_REF_DIAGNOSISREFERENCE_DEL 6618200000000, 0
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_DIAGNOSISREFERENCE_DEL]
(
     @IdfsDiagnosis BIGINT,
    @ForceDelete bit = 0,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF (
               (
                   NOT EXISTS
        (
            SELECT idfAggrDiagnosticActionMTX
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrHumanCaseMTX
            FROM dbo.tlbAggrHumanCaseMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrDiagnosticActionMTX
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrProphylacticActionMTX
            FROM dbo.tlbAggrProphylacticActionMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrVetCaseMTX
            FROM dbo.tlbAggrVetCaseMTX
            WHERE idfsSpeciesType = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfCampaign
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfCampaignToDiagnosis
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsSpeciesType = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfMonitoringSession
            FROM dbo.tlbMonitoringSessionToDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfMonitoringSessionToDiagnosis
            FROM dbo.tlbMonitoringSessionToDiagnosis
            WHERE idfsSpeciesType = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfMonitoringSessionSummary
            FROM dbo.tlbMonitoringSessionSummaryDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfPensideTest
            FROM dbo.tlbPensideTest
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfTesting
            FROM dbo.tlbTesting
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfTestValidation
            FROM dbo.tlbTestValidation
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfVaccination
            FROM dbo.tlbVaccination
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfsVSSessionSummaryDiagnosis
            FROM dbo.tlbVectorSurveillanceSessionSummaryDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfDiagnosisAgeGroupToDiagnosis
            FROM dbo.trtDiagnosisAgeGroupToDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfDiagnosisToGroupForReportType
            FROM dbo.trtDiagnosisToGroupForReportType
            WHERE idfsDiagnosis = @IdfsDiagnosis
        )
                   AND NOT EXISTS
        (
            SELECT idfFFObjectToDiagnosisForCustomReport
            FROM dbo.trtFFObjectToDiagnosisForCustomReport
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
               )
               or @ForceDelete = 1
           )
        BEGIN
			
			--Begin: Data Audit--	

				DECLARE @idfUserId BIGINT = @UserId;
				DECLARE @idfSiteId BIGINT = @SiteId;
				DECLARE @idfsDataAuditEventType bigint = NULL;
				DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
				DECLARE @idfObject bigint = @IdfsDiagnosis;
				DECLARE @idfObjectTable_trtDiagnosis bigint = 75840000000;		
				DECLARE @idfObjectTable_trtBaseReference bigint = 75820000000;
				DECLARE @idfObjectTable_trtStringNameTranslation bigint = 75990000000;
				DECLARE @idfDataAuditEvent bigint = NULL;	

				-- tauDataAuditEvent Event Type - Delete 
				set @idfsDataAuditEventType = 10016002;
			
			--End: Data Audit--	

            UPDATE dbo.trtDiagnosis
            SET intRowStatus = 1
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0

			--Begin: Data Audit, trtDiagnosis--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtDiagnosis, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtDiagnosis, @idfObject)

			--End: Data Audit, trtDiagnosis--
				  
            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsDiagnosis
                  AND intRowStatus = 0

			--Begin: Data Audit, trtBaseReference--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtBaseReference, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtBaseReference, @idfObject)

			--End: Data Audit, trtBaseReference--

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsDiagnosis

			--Begin: Data Audit, trtStringNameTranslation--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtStringNameTranslation, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @idfObject)

			--End: Data Audit, trtStringNameTranslation--

   --         UPDATE dbo.trtBaseReference
   --         SET intRowStatus = 1,
   --             AuditUpdateDTM = GETDATE(),
   --             AuditUpdateUser = @AuditUserName
   --         WHERE idfsBaseReference = @IdfsDiagnosis		

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @IdfsDiagnosis,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_GETList]...';


GO
--=================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_GETList
--
-- Description:	Returns list of diagnosis/disease references
--							
-- Author:  Philip Shaffer
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Philip Shaffer	09/25/2018 Initial Release
-- Ricky Moss		12/12/2018 Removes return codes and reference id variable
-- Ricky Moss		02/01/2019 Added Penside Test, Lab Test, Sample Type, and Syndrome fields
-- Ricky Moss		04/06/2020 Added the search parameter
-- Stephen Long     04/23/2020 Added accessory code parameter and where clause for proper
--                             filtration.
-- Lamont Mitchell	09/30/2020 Added diagnosis  to be a filter in the Or clause
-- Doug Albanese	06/07/2021 Corrected the default sort column to be intOrder
-- Doug Albanese	08/03/2021 Removed unneccesarry ording, and added a CTE expression to cover 
--                             for a second column of sorting on intOrder
-- Mark Wilson		08/26/2021 Updated to do a bitwise compare for haCode
-- Doug Albanese	12/11/2021 Corrected an "Empty" search issue that pulled all HA Codes, instead 
--                             of a particular requested one
-- Stephen Long     01/26/2023 Added disease filtration rules.
--
-- Test Code:
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en-us', NULL, NULL
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en-us', 'Hu', NULL
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en-us', NULL, 32
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_DIAGNOSISREFERENCE_GETList]
    @LangID NVARCHAR(50),
    @search NVARCHAR(50),
    @AccessoryCode BIGINT = NULL,
    @pageNo INT = 1,
    @pageSize INT = 10,
    @sortColumn NVARCHAR(30) = 'intOrder',
    @sortOrder NVARCHAR(4) = 'ASC',
    @advancedSearch NVARCHAR(100) = NULL,
    @UserEmployeeID BIGINT
AS
BEGIN
    DECLARE @firstRec INT = (@pageNo - 1) * @pagesize,
            @lastRec INT = (@pageNo * @pageSize + 1),
            @returnMsg NVARCHAR(MAX) = 'SUCCESS',
            @returnCode BIGINT = 0;
    DECLARE @T TABLE
    (
        idfsDiagnosis bigint,
        strDefault nvarchar(2000),
        strName nvarchar(2000),
        strIDC10 nvarchar(200),
        strOIECode nvarchar(2000),
        strSampleType nvarchar(4000),
        strSampleTypeNames nvarchar(4000),
        strLabTest nvarchar(4000),
        strLabTestNames nvarchar(4000),
        strPensideTest nvarchar(4000),
        strPensideTestNames nvarchar(4000),
        strHACode nvarchar(4000),
        strHACodeNames nvarchar(4000),
        idfsUsingType bigint,
        strUsingType nvarchar(2000),
        intHACode int,
        intRowStatus int,
        blnZoonotic bit,
        blnSyndrome bit,
        intOrder int
    );
    DECLARE @FilteredResults TABLE
    (
        idfsDiagnosis bigint,
        strDefault nvarchar(2000),
        strName nvarchar(2000),
        strIDC10 nvarchar(200),
        strOIECode nvarchar(2000),
        strSampleType nvarchar(4000),
        strSampleTypeNames nvarchar(4000),
        strLabTest nvarchar(4000),
        strLabTestNames nvarchar(4000),
        strPensideTest nvarchar(4000),
        strPensideTestNames nvarchar(4000),
        strHACode nvarchar(4000),
        strHACodeNames nvarchar(4000),
        idfsUsingType bigint,
        strUsingType nvarchar(2000),
        intHACode int,
        intRowStatus int,
        blnZoonotic bit,
        blnSyndrome bit,
        intOrder int
    );

    IF @search = ''
        SET @search = NULL;

    BEGIN TRY
        IF (@advancedSearch IS NOT NULL)
        BEGIN
            INSERT INTO @T
            SELECT *
            FROM
            (
                SELECT d.idfsDiagnosis,
                       dbr.strDefault,
                       dbr.[name] AS strName,
                       d.strIDC10,
                       d.strOIECode,
                       dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                       dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                       dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                       dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                       dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                       dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                       dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                       dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                       d.idfsUsingType,
                       ut.[name] AS strUsingType,
                       dbr.intHACode,
                       dbr.intRowStatus,
                       blnZoonotic,
                       d.blnSyndrome,
                       dbr.intOrder
                FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                    INNER JOIN dbo.trtDiagnosis d
                        ON d.idfsDiagnosis = dbr.idfsReference
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                        ON d.idfsUsingType = ut.idfsReference
                    OUTER APPLY
                (
                    SELECT TOP 1
                        d_to_dg.idfsDiagnosisGroup,
                        dg.[name] AS strDiagnosesGroupName
                    FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                        INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                            ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                    WHERE d_to_dg.intRowStatus = 0
                          AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
                ) AS diagnosesGroup
                WHERE (
                          dbr.intHACode IS NULL
                          OR dbr.intHACode > 0
                      )
                      AND d.intRowStatus = 0
                      AND dbr.intRowStatus = 0
            ) AS disease
            WHERE CAST(disease.idfsDiagnosis AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR disease.strDefault LIKE '%' + @advancedSearch + '%'
                  OR disease.strName LIKE '%' + @advancedSearch + '%'
                  OR disease.strIDC10 LIKE '%' + @advancedSearch + '%'
                  OR disease.strOIECode LIKE '%' + @advancedSearch + '%'
                  OR disease.strSampleType LIKE '%' + @advancedSearch + '%'
                  OR disease.strSampleTypeNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strLabTest LIKE '%' + @advancedSearch + '%'
                  OR disease.strLabTestNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strPensideTest LIKE '%' + @advancedSearch + '%'
                  OR disease.strPensideTestNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strHACode LIKE '%' + @advancedSearch + '%'
                  OR disease.strHACodeNames LIKE '%' + @advancedSearch + '%'
                  OR CAST(disease.idfsUsingType AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR CAST(disease.intHACode AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR disease.strUsingType LIKE '%' + @advancedSearch + '%'
                  OR disease.idfsDiagnosis LIKE '%' + @advancedSearch + '%';

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without disease filtration rules applied.
            --
            DELETE FROM @T
            WHERE EXISTS
            (
                SELECT idfsObjectID
                FROM dbo.tstObjectAccess oa
                    INNER JOIN dbo.tlbEmployee e
                        ON e.idfEmployee = @UserEmployeeID
                           AND e.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = e.idfsSite
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE oa.idfsObjectID = idfsDiagnosis
                      AND oa.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060001 -- Disease
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @T
            SELECT disease.*
            FROM
            (
                SELECT d.idfsDiagnosis,
                       dbr.strDefault,
                       dbr.[name] AS strName,
                       d.strIDC10,
                       d.strOIECode,
                       dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                       dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                       dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                       dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                       dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                       dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                       dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                       dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                       d.idfsUsingType,
                       ut.[name] AS strUsingType,
                       dbr.intHACode,
                       dbr.intRowStatus,
                       blnZoonotic,
                       d.blnSyndrome,
                       dbr.intOrder
                FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                    INNER JOIN dbo.trtDiagnosis d
                        ON d.idfsDiagnosis = dbr.idfsReference
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                        ON d.idfsUsingType = ut.idfsReference
                    OUTER APPLY
                (
                    SELECT TOP 1
                        d_to_dg.idfsDiagnosisGroup,
                        dg.[name] AS strDiagnosesGroupName
                    FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                        INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                            ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                    WHERE d_to_dg.intRowStatus = 0
                          AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
                ) AS diagnosesGroup
            ) AS disease
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = disease.idfsDiagnosis
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND CAST(disease.idfsDiagnosis AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR disease.strDefault LIKE '%' + @advancedSearch + '%'
                  OR disease.strName LIKE '%' + @advancedSearch + '%'
                  OR disease.strIDC10 LIKE '%' + @advancedSearch + '%'
                  OR disease.strOIECode LIKE '%' + @advancedSearch + '%'
                  OR disease.strSampleType LIKE '%' + @advancedSearch + '%'
                  OR disease.strSampleTypeNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strLabTest LIKE '%' + @advancedSearch + '%'
                  OR disease.strLabTestNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strPensideTest LIKE '%' + @advancedSearch + '%'
                  OR disease.strPensideTestNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strHACode LIKE '%' + @advancedSearch + '%'
                  OR disease.strHACodeNames LIKE '%' + @advancedSearch + '%'
                  OR CAST(disease.idfsUsingType AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR CAST(disease.intHACode AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR disease.strUsingType LIKE '%' + @advancedSearch + '%'
                  OR disease.idfsDiagnosis LIKE '%' + @advancedSearch + '%';

            DELETE res
            FROM @T res
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = res.idfsDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @T
            SELECT disease.*
            FROM
            (
                SELECT d.idfsDiagnosis,
                       dbr.strDefault,
                       dbr.[name] AS strName,
                       d.strIDC10,
                       d.strOIECode,
                       dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                       dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                       dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                       dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                       dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                       dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                       dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                       dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                       d.idfsUsingType,
                       ut.[name] AS strUsingType,
                       dbr.intHACode,
                       dbr.intRowStatus,
                       blnZoonotic,
                       d.blnSyndrome,
                       dbr.intOrder
                FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                    INNER JOIN dbo.trtDiagnosis d
                        ON d.idfsDiagnosis = dbr.idfsReference
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                        ON d.idfsUsingType = ut.idfsReference
                    OUTER APPLY
                (
                    SELECT TOP 1
                        d_to_dg.idfsDiagnosisGroup,
                        dg.[name] AS strDiagnosesGroupName
                    FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                        INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                            ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                    WHERE d_to_dg.intRowStatus = 0
                          AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
                ) AS diagnosesGroup
            ) AS disease
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = disease.idfsDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
                  AND CAST(disease.idfsDiagnosis AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR disease.strDefault LIKE '%' + @advancedSearch + '%'
                  OR disease.strName LIKE '%' + @advancedSearch + '%'
                  OR disease.strIDC10 LIKE '%' + @advancedSearch + '%'
                  OR disease.strOIECode LIKE '%' + @advancedSearch + '%'
                  OR disease.strSampleType LIKE '%' + @advancedSearch + '%'
                  OR disease.strSampleTypeNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strLabTest LIKE '%' + @advancedSearch + '%'
                  OR disease.strLabTestNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strPensideTest LIKE '%' + @advancedSearch + '%'
                  OR disease.strPensideTestNames LIKE '%' + @advancedSearch + '%'
                  OR disease.strHACode LIKE '%' + @advancedSearch + '%'
                  OR disease.strHACodeNames LIKE '%' + @advancedSearch + '%'
                  OR CAST(disease.idfsUsingType AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR CAST(disease.intHACode AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%'
                  OR disease.strUsingType LIKE '%' + @advancedSearch + '%'
                  OR disease.idfsDiagnosis LIKE '%' + @advancedSearch + '%';

            DELETE FROM @T
            WHERE EXISTS
            (
                SELECT idfsObjectID
                FROM dbo.tstObjectAccess oa
                WHERE oa.idfsObjectID = idfsDiagnosis
                      AND oa.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060001 -- Disease
                      AND oa.idfActor = @UserEmployeeID
            );
        END
        ELSE IF (@search IS NOT NULL)
        BEGIN
            INSERT INTO @T
            SELECT *
            FROM
            (
                SELECT d.idfsDiagnosis,
                       dbr.strDefault,
                       dbr.[name] AS strName,
                       d.strIDC10,
                       d.strOIECode,
                       dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                       dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                       dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                       dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                       dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                       dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                       dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                       dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                       d.idfsUsingType,
                       ut.[name] AS strUsingType,
                       dbr.intHACode,
                       dbr.intRowStatus,
                       blnZoonotic,
                       d.blnSyndrome,
                       dbr.intOrder
                FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                    INNER JOIN dbo.trtDiagnosis d
                        ON d.idfsDiagnosis = dbr.idfsReference
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                        ON d.idfsUsingType = ut.idfsReference
                    OUTER APPLY
                (
                    SELECT TOP 1
                        d_to_dg.idfsDiagnosisGroup,
                        dg.[name] AS strDiagnosesGroupName
                    FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                        INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                            ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                    WHERE d_to_dg.intRowStatus = 0
                          AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
                ) AS diagnosesGroup
                WHERE (
                          dbr.intHACode IS NULL
                          OR dbr.intHACode > 0
                      )
                      AND d.intRowStatus = 0
                      AND dbr.intRowStatus = 0
            ) AS disease
            WHERE disease.strDefault LIKE '%' + @search + '%'
                  OR disease.strName LIKE '%' + @search + '%'
                  OR disease.strIDC10 LIKE '%' + @search + '%'
                  OR disease.strOIECode LIKE '%' + @search + '%'
                  OR disease.strHACodeNames LIKE '%' + @search + '%'
                  OR disease.strLabTestNames LIKE '%' + @search + '%'
                  OR disease.strPensideTestNames LIKE '%' + @search + '%'
                  OR disease.strSampleTypeNames LIKE '%' + @search + '%'
                  OR disease.strUsingType LIKE '%' + @search + '%'
                  OR disease.idfsDiagnosis LIKE '%' + @search + '%';

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without disease filtration rules applied.
            --
            DELETE FROM @T
            WHERE EXISTS
            (
                SELECT idfsObjectID
                FROM dbo.tstObjectAccess oa
                    INNER JOIN dbo.tlbEmployee e
                        ON e.idfEmployee = @UserEmployeeID
                           AND e.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = e.idfsSite
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE oa.idfsObjectID = idfsDiagnosis
                      AND oa.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060001 -- Disease
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @T
            SELECT disease.*
            FROM
            (
                SELECT d.idfsDiagnosis,
                       dbr.strDefault,
                       dbr.[name] AS strName,
                       d.strIDC10,
                       d.strOIECode,
                       dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                       dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                       dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                       dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                       dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                       dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                       dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                       dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                       d.idfsUsingType,
                       ut.[name] AS strUsingType,
                       dbr.intHACode,
                       dbr.intRowStatus,
                       blnZoonotic,
                       d.blnSyndrome,
                       dbr.intOrder
                FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                    INNER JOIN dbo.trtDiagnosis d
                        ON d.idfsDiagnosis = dbr.idfsReference
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                        ON d.idfsUsingType = ut.idfsReference
                    OUTER APPLY
                (
                    SELECT TOP 1
                        d_to_dg.idfsDiagnosisGroup,
                        dg.[name] AS strDiagnosesGroupName
                    FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                        INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                            ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                    WHERE d_to_dg.intRowStatus = 0
                          AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
                ) AS diagnosesGroup
            ) AS disease
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = disease.idfsDiagnosis
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND disease.strDefault LIKE '%' + @search + '%'
                  OR disease.strName LIKE '%' + @search + '%'
                  OR disease.strIDC10 LIKE '%' + @search + '%'
                  OR disease.strOIECode LIKE '%' + @search + '%'
                  OR disease.strHACodeNames LIKE '%' + @search + '%'
                  OR disease.strLabTestNames LIKE '%' + @search + '%'
                  OR disease.strPensideTestNames LIKE '%' + @search + '%'
                  OR disease.strSampleTypeNames LIKE '%' + @search + '%'
                  OR disease.strUsingType LIKE '%' + @search + '%'
                  OR disease.idfsDiagnosis LIKE '%' + @search + '%';

            DELETE res
            FROM @T res
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = res.idfsDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @T
            SELECT disease.*
            FROM
            (
                SELECT d.idfsDiagnosis,
                       dbr.strDefault,
                       dbr.[name] AS strName,
                       d.strIDC10,
                       d.strOIECode,
                       dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                       dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                       dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                       dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                       dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                       dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                       dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                       dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                       d.idfsUsingType,
                       ut.[name] AS strUsingType,
                       dbr.intHACode,
                       dbr.intRowStatus,
                       blnZoonotic,
                       d.blnSyndrome,
                       dbr.intOrder
                FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                    INNER JOIN dbo.trtDiagnosis d
                        ON d.idfsDiagnosis = dbr.idfsReference
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                        ON d.idfsUsingType = ut.idfsReference
                    OUTER APPLY
                (
                    SELECT TOP 1
                        d_to_dg.idfsDiagnosisGroup,
                        dg.[name] AS strDiagnosesGroupName
                    FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                        INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                            ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                    WHERE d_to_dg.intRowStatus = 0
                          AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
                ) AS diagnosesGroup
            ) AS disease
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = disease.idfsDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
                  AND disease.strDefault LIKE '%' + @search + '%'
                  OR disease.strName LIKE '%' + @search + '%'
                  OR disease.strIDC10 LIKE '%' + @search + '%'
                  OR disease.strOIECode LIKE '%' + @search + '%'
                  OR disease.strHACodeNames LIKE '%' + @search + '%'
                  OR disease.strLabTestNames LIKE '%' + @search + '%'
                  OR disease.strPensideTestNames LIKE '%' + @search + '%'
                  OR disease.strSampleTypeNames LIKE '%' + @search + '%'
                  OR disease.strUsingType LIKE '%' + @search + '%'
                  OR disease.idfsDiagnosis LIKE '%' + @search + '%';

            DELETE FROM @T
            WHERE EXISTS
            (
                SELECT idfsObjectID
                FROM dbo.tstObjectAccess oa
                WHERE oa.idfsObjectID = idfsDiagnosis
                      AND oa.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060001 -- Disease
                      AND oa.idfActor = @UserEmployeeID
            );
        END
        ELSE
        BEGIN
            INSERT INTO @T
            SELECT d.idfsDiagnosis,
                   dbr.strDefault,
                   dbr.[name] AS strName,
                   d.strIDC10,
                   d.strOIECode,
                   dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                   dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                   dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                   dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                   dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                   dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                   dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                   dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                   d.idfsUsingType,
                   ut.[name] AS strUsingType,
                   dbr.intHACode,
                   dbr.intRowStatus,
                   blnZoonotic,
                   d.blnSyndrome,
                   dbr.intOrder
            FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                INNER JOIN dbo.trtDiagnosis d
                    ON d.idfsDiagnosis = dbr.idfsReference
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                    ON d.idfsUsingType = ut.idfsReference
                OUTER APPLY
            (
                SELECT TOP 1
                    d_to_dg.idfsDiagnosisGroup,
                    dg.[name] AS strDiagnosesGroupName
                FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                    INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                        ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                WHERE d_to_dg.intRowStatus = 0
                      AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
            ) AS diagnosesGroup
            WHERE (
                      dbr.intHACode IS NULL
                      OR dbr.intHACode > 0
                  )
                  AND d.intRowStatus = 0
                  AND dbr.intRowStatus = 0
                  AND (
                          ((@AccessoryCode & dbr.intHACode) > 0)
                          OR (@AccessoryCode IS NULL)
                      );

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without disease filtration rules applied.
            --
            DELETE FROM @T
            WHERE EXISTS
            (
                SELECT idfsObjectID
                FROM dbo.tstObjectAccess oa
                    INNER JOIN dbo.tlbEmployee e
                        ON e.idfEmployee = @UserEmployeeID
                           AND e.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = e.idfsSite
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE oa.idfsObjectID = idfsDiagnosis
                      AND oa.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060001 -- Disease
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @T
            SELECT d.idfsDiagnosis,
                   dbr.strDefault,
                   dbr.[name] AS strName,
                   d.strIDC10,
                   d.strOIECode,
                   dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                   dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                   dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                   dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                   dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                   dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                   dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                   dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                   d.idfsUsingType,
                   ut.[name] AS strUsingType,
                   dbr.intHACode,
                   dbr.intRowStatus,
                   blnZoonotic,
                   d.blnSyndrome,
                   dbr.intOrder
            FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                INNER JOIN dbo.trtDiagnosis d
                    ON d.idfsDiagnosis = dbr.idfsReference
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                    ON d.idfsUsingType = ut.idfsReference
                OUTER APPLY
            (
                SELECT TOP 1
                    d_to_dg.idfsDiagnosisGroup,
                    dg.[name] AS strDiagnosesGroupName
                FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                    INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                        ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                WHERE d_to_dg.intRowStatus = 0
                      AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
            ) AS diagnosesGroup
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = dbr.idfsReference
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND (
                          dbr.intHACode IS NULL
                          OR dbr.intHACode > 0
                      )
                  AND d.intRowStatus = 0
                  AND dbr.intRowStatus = 0
                  AND (
                          ((@AccessoryCode & dbr.intHACode) > 0)
                          OR (@AccessoryCode IS NULL)
                      );

            DELETE res
            FROM @T res
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = res.idfsDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @T
            SELECT d.idfsDiagnosis,
                   dbr.strDefault,
                   dbr.[name] AS strName,
                   d.strIDC10,
                   d.strOIECode,
                   dbo.FN_REF_SAMPLETYPETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleType,
                   dbo.FN_REF_SAMPLETYPENAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strSampleTypeNames,
                   dbo.FN_REF_LABTESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTest,
                   dbo.FN_REF_LABTESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strLabTestNames,
                   dbo.FN_REF_PENSIDETESTTODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTest,
                   dbo.FN_REF_PENSIDETESTNAMETODISEASE_GET(@LangID, d.idfsDiagnosis) AS strPensideTestNames,
                   dbo.FN_GBL_HACode_ToCSV(@LangID, dbr.intHACode) AS strHACode,
                   dbo.FN_GBL_HACodeNames_ToCSV(@LangID, dbr.intHACode) AS strHACodeNames,
                   d.idfsUsingType,
                   ut.[name] AS strUsingType,
                   dbr.intHACode,
                   dbr.intRowStatus,
                   blnZoonotic,
                   d.blnSyndrome,
                   dbr.intOrder
            FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
                INNER JOIN dbo.trtDiagnosis d
                    ON d.idfsDiagnosis = dbr.idfsReference
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
                    ON d.idfsUsingType = ut.idfsReference
                OUTER APPLY
            (
                SELECT TOP 1
                    d_to_dg.idfsDiagnosisGroup,
                    dg.[name] AS strDiagnosesGroupName
                FROM dbo.trtDiagnosisToDiagnosisGroup AS d_to_dg
                    INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000156) AS dg
                        ON d_to_dg.idfsDiagnosisGroup = dg.idfsReference
                WHERE d_to_dg.intRowStatus = 0
                      AND d_to_dg.idfsDiagnosis = d.idfsDiagnosis
            ) AS diagnosesGroup
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = dbr.idfsReference
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
                  AND (
                          dbr.intHACode IS NULL
                          OR dbr.intHACode > 0
                      )
                  AND d.intRowStatus = 0
                  AND dbr.intRowStatus = 0
                  AND (
                          ((@AccessoryCode & dbr.intHACode) > 0)
                          OR (@AccessoryCode IS NULL)
                      );

            DELETE FROM @T
            WHERE EXISTS
            (
                SELECT idfsObjectID
                FROM dbo.tstObjectAccess oa
                WHERE oa.idfsObjectID = idfsDiagnosis
                      AND oa.intRowStatus = 0
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060001 -- Disease
                      AND oa.idfActor = @UserEmployeeID
            );
        END;

        INSERT INTO @FilteredResults
        SELECT *
        FROM @T
        GROUP BY idfsDiagnosis,
                 strDefault,
                 strName,
                 strIDC10,
                 strOIECode,
                 strSampleType,
                 strSampleTypeNames,
                 strLabTest,
                 strLabTestNames,
                 strPensideTest,
                 strPensideTestNames,
                 strHACode,
                 strHACodeNames,
                 idfsUsingType,
                 strUsingType,
                 intHACode,
                 intRowStatus,
                 blnZoonotic,
                 blnSyndrome,
                 intOrder;

        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @sortColumn = 'idfsDiagnosis'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfsDiagnosis
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsDiagnosis'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfsDiagnosis
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strdefault'
                                                        AND @SortOrder = 'asc' THEN
                                                       strdefault
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strdefault'
                                                        AND @SortOrder = 'desc' THEN
                                                       strdefault
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strName'
                                                        AND @SortOrder = 'asc' THEN
                                                       strName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strName'
                                                        AND @SortOrder = 'desc' THEN
                                                       strName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strIDC10'
                                                        AND @SortOrder = 'asc' THEN
                                                       strIDC10
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strIDC10'
                                                        AND @SortOrder = 'desc' THEN
                                                       strIDC10
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strOIECode'
                                                        AND @SortOrder = 'asc' THEN
                                                       strOIECode
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strOIECode'
                                                        AND @SortOrder = 'desc' THEN
                                                       strOIECode
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strSampleType'
                                                        AND @SortOrder = 'asc' THEN
                                                       strSampleType
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strSampleType'
                                                        AND @SortOrder = 'desc' THEN
                                                       strSampleType
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strSampleTypeNames'
                                                        AND @SortOrder = 'asc' THEN
                                                       strSampleTypeNames
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strSampleTypeNames'
                                                        AND @SortOrder = 'desc' THEN
                                                       strSampleTypeNames
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strLabTest'
                                                        AND @SortOrder = 'asc' THEN
                                                       strLabTest
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strLabTest'
                                                        AND @SortOrder = 'desc' THEN
                                                       strLabTest
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strLabTestNames'
                                                        AND @SortOrder = 'asc' THEN
                                                       strLabTestNames
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strLabTestNames'
                                                        AND @SortOrder = 'desc' THEN
                                                       strLabTestNames
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strPensideTest'
                                                        AND @SortOrder = 'asc' THEN
                                                       strPensideTest
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strPensideTest'
                                                        AND @SortOrder = 'desc' THEN
                                                       strPensideTest
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strPensideTestNames'
                                                        AND @SortOrder = 'asc' THEN
                                                       strPensideTestNames
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strPensideTestNames'
                                                        AND @SortOrder = 'desc' THEN
                                                       strPensideTestNames
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strHACode'
                                                        AND @SortOrder = 'asc' THEN
                                                       strHACode
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strHACode'
                                                        AND @SortOrder = 'desc' THEN
                                                       strHACode
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strHACodeNames'
                                                        AND @SortOrder = 'asc' THEN
                                                       strHACodeNames
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strHACodeNames'
                                                        AND @SortOrder = 'desc' THEN
                                                       strHACodeNames
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsUsingType'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfsUsingType
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfsUsingType'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfsUsingType
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'strUsingType'
                                                        AND @SortOrder = 'asc' THEN
                                                       strUsingType
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'strUsingType'
                                                        AND @SortOrder = 'desc' THEN
                                                       strUsingType
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'intHACode'
                                                        AND @SortOrder = 'asc' THEN
                                                       intHACode
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'intHACode'
                                                        AND @SortOrder = 'desc' THEN
                                                       intHACode
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'intRowStatus'
                                                        AND @SortOrder = 'asc' THEN
                                                       intRowStatus
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'intRowStatus'
                                                        AND @SortOrder = 'desc' THEN
                                                       intRowStatus
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'blnZoonotic'
                                                        AND @SortOrder = 'asc' THEN
                                                       blnZoonotic
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'blnZoonotic'
                                                        AND @SortOrder = 'desc' THEN
                                                       blnZoonotic
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'blnSyndrome'
                                                        AND @SortOrder = 'asc' THEN
                                                       blnSyndrome
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'blnSyndrome'
                                                        AND @SortOrder = 'desc' THEN
                                                       blnSyndrome
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'intOrder'
                                                        AND @SortOrder = 'asc' THEN
                                                       intOrder
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'intOrder'
                                                        AND @SortOrder = 'desc' THEN
                                                       intOrder
                                               END DESC,
                                               IIF(@sortColumn = 'intOrder', strName, NULL) ASC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   idfsDiagnosis,
                   strDefault,
                   strName,
                   strIDC10,
                   strOIECode,
                   strSampleType,
                   strSampleTypeNames,
                   strLabTest,
                   strLabTestNames,
                   strPensideTest,
                   strPensideTestNames,
                   strHACode,
                   strHACodeNames,
                   idfsUsingType,
                   strUsingType,
                   intHACode,
                   intRowStatus,
                   blnZoonotic,
                   blnSyndrome,
                   intOrder
            FROM @FilteredResults
           )
        SELECT TotalRowCount,
               idfsDiagnosis,
               strDefault,
               strName,
               strIDC10,
               strOIECode,
               strSampleType,
               strSampleTypeNames,
               strLabTest,
               strLabTestNames,
               strPensideTest,
               strPensideTestNames,
               strHACode,
               strHACodeNames,
               idfsUsingType,
               strUsingType,
               intHACode,
               intRowStatus,
               blnZoonotic,
               blnSyndrome,
               intOrder,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_SET_MCW
--
-- Description:	Check to see if a diagnosis currently exists by name
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		10/28/2018 Initial release.
-- Ricky Moss		02/10/2019 Checks to see when updating a case classification that the name 
--							   does not exists in another reference and updates English value
-- Ricky Moss		03/13/2020 Refactor to check duplicates and resolution for Bug 6254
-- Ricky Moss		03/17/2020 Refactor to check duplicates and resolution for Bug 6254
-- Ricky Moss		03/19/2020 Resolved does and resolution for Bug 6254
-- Ricky Moss		03/20/2020 Refactored stored procedure to make no changes if disease currently 
--							   exists
-- Ricky Moss		06/05/2020 Reactivation of inactive record if a disease is being created with 
--							   an existing name
-- Ricky Moss		06/11/2020 Added Using Types to check for duplicates
-- Doug Albanese	04/12/2021 Refactored to use two branches and incorporate 
--							   USSP_GBL_Basereference_Set
-- Doug Albanese	04/14/2021 Corrected a Begin/Commit Transaction block problem.
-- Doug Albanese	04/14/2021 Added Penside Tests, Lab Tests, and Sample Type save routines
-- Stephen Long     05/30/2021 Added default permissions for new disease; business rule described 
--							   in use case SAUC62.
-- Doug Albanese	08/02/2021 Added duplication detection
-- Doug Albanese	08/03/2021 Modified duplication detection to handle the existence of 
--                             previously deleted items
-- Mark Wilson		08/03/2021 Modified to call USP_GBL_BaseReference_SET and to include Using 
--                             Type in duplicate checks
-- Doug Albanese	10/25/2021 Changes discussed with Mark Wilson to eliminate a duplication issue 
--                             found on a join
-- Stephen Long     07/18/2022 Added site alert logic.
-- Leo Tracchia		02/20/2023 Added data audit logic for inserts and updates	
--
-- exec USP_REF_DIAGNOSISREFERENCE_SET null, 'Blackerleg', 'Darkbrownleg', null, null, 2, 10020002, null, null, null, 0, 0, 'en-US', 0
-- exec USP_REF_DIAGNOSISREFERENCE_SET 58218970000129, 'Canine Distemper 4', 'Canine Distemper 4', 'CD09.5', null, 32, 10020002, null, '58218970000050', '9844470000000,9844480000000,9844490000000,58218970000051', 0, 0, 'en-US', 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_DIAGNOSISREFERENCE_SET]
(
    @idfsDiagnosis BIGINT = NULL,
    @strDefault VARCHAR(200),
    @strName NVARCHAR(200),
    @strOIECode NVARCHAR(200),
    @strIDC10 NVARCHAR(200),
    @intHACode INT,
    @idfsUsingType BIGINT,
    @strPensideTest NVARCHAR(MAX),
    @strLabTest NVARCHAR(MAX),
    @strSampleType NVARCHAR(MAX),
    @blnZoonotic BIT = 0,
    @blnSyndrome BIT = 0,
    @LangId NVARCHAR(50),
    @intOrder INT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    DECLARE @ReturnCode INT
        = 0,
            @ReturnMessage NVARCHAR(max) = 'SUCCESS',
            @existingDefault BIGINT,
            @existingName BIGINT,
            @idfTestForDisease BIGINT,
            @idfsTestName BIGINT,
            @idfPensideTestForDisease BIGINT,
            @idfsPensideTestName BIGINT,
            @idfMaterialForDisease BIGINT,
            @idfsSampleType BIGINT,
            @DuplicateDefault INT = 0, -- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.
            @bNewRecord BIT = 0;
    DECLARE @tempPensideTestToDisease TABLE (idfsPensideTestName BIGINT);
    DECLARE @tempTestToDisease TABLE (idfsTestName BIGINT);
    DECLARE @tempSampleTypeToDisease TABLE (idfsSampleType BIGINT);

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

	--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
		DECLARE @idfObject bigint = @idfsDiagnosis;
		DECLARE @idfObjectTable_trtDiagnosis bigint = 75840000000;		
		DECLARE @idfDataAuditEvent bigint = NULL;		

		DECLARE @trtDiagnosis_BeforeEdit TABLE
		(
			idfsUsingType bigint,
            strIDC10 nvarchar(200),
            strOIECode nvarchar(200),
            blnZoonotic bit,
            blnSyndrome bit,
            AuditUpdateDTM datetime,
            AuditUpdateUser nvarchar(200),
            idfsDiagnosis bigint
		)

		DECLARE @trtDiagnosis_AfterEdit TABLE
		(
			idfsUsingType bigint,
            strIDC10 nvarchar(200),
            strOIECode nvarchar(200),
            blnZoonotic bit,
            blnSyndrome bit,
            AuditUpdateDTM datetime,
            AuditUpdateUser nvarchar(200),
            idfsDiagnosis bigint
		)

		-- Get and Set UserId and SiteId
		SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo

	--Data Audit--

    BEGIN TRY
        BEGIN TRANSACTION;

        IF @idfsDiagnosis IS NULL
			BEGIN -- this is an insert.  check if the strDefault is a duplicate -- MCW added check for Using type
				IF EXISTS
				(
					SELECT R.*
					FROM dbo.trtBaseReference R
						INNER JOIN dbo.trtDiagnosis D
							ON D.idfsDiagnosis = R.idfsBaseReference
							   AND D.idfsUsingType = @idfsUsingType
					WHERE R.strDefault = @strDefault
						  AND R.idfsReferenceType = 19000019
						  AND R.intRowStatus = 0
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END
        ELSE
			BEGIN -- this is an update.  check if the strDefault is a duplicate
				IF EXISTS
				(
					SELECT R.idfsBaseReference,
						   D.idfsUsingType
					FROM dbo.trtBaseReference R
						INNER JOIN dbo.trtDiagnosis D
							ON D.idfsDiagnosis = R.idfsBaseReference
							   AND D.intRowStatus = 0
							   AND D.idfsUsingType = @idfsUsingType
					WHERE R.strDefault = @strDefault
						  AND R.idfsReferenceType = 19000019
						  AND R.intRowStatus = 0
						  AND R.idfsBaseReference <> @idfsDiagnosis
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END

        IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate
			BEGIN
				SET @ReturnMessage = 'DOES EXIST';
				SET @idfsDiagnosis = NULL;
			END
        ELSE -- there is no duplicate, so continue
        BEGIN
            EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsDiagnosis OUTPUT,
                                               @ReferenceType = 19000019,
                                               @LangID = @LangID,
                                               @DefaultName = @strDefault,
                                               @NationalName = @strName,
                                               @HACode = @intHACode,
                                               @Order = @intOrder,
                                               @System = 0,
                                               @User = @AuditUserName;

            IF EXISTS
            (
                SELECT *
                FROM dbo.trtDiagnosis
                WHERE idfsDiagnosis = @idfsDiagnosis
            )
            BEGIN

				--DataAudit-- 
				
					--  tauDataAuditEvent  Event Type - Edit 
					set @idfsDataAuditEventType = 10016003;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtDiagnosis, @idfDataAuditEvent OUTPUT

				--DataAudit-- 

				INSERT INTO @trtDiagnosis_BeforeEdit (
					idfsUsingType, 
					strIDC10, 
					strOIECode, 
					blnZoonotic, 
					blnSyndrome, 
					AuditUpdateDTM, 
					AuditUpdateUser)
				SELECT 
					idfsUsingType, 
					strIDC10, 
					strOIECode, 
					blnZoonotic, 
					blnSyndrome, 
					AuditUpdateDTM,
					AuditUpdateUser					
					FROM trtDiagnosis WHERE idfsDiagnosis = @idfsDiagnosis;

                UPDATE dbo.trtDiagnosis
                SET idfsUsingType = @idfsUsingType,
                    strIDC10 = @strIDC10,
                    strOIECode = @strOIECode,
                    blnZoonotic = ISNULL(@blnZoonotic, 0),
                    blnSyndrome = ISNULL(@blnSyndrome, 0),
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis = @idfsDiagnosis;

				INSERT INTO @trtDiagnosis_AfterEdit (
					idfsUsingType, 
					strIDC10, 
					strOIECode, 
					blnZoonotic, 
					blnSyndrome, 
					AuditUpdateDTM, 
					AuditUpdateUser)
				SELECT 
					idfsUsingType, 
					strIDC10, 
					strOIECode, 
					blnZoonotic, 
					blnSyndrome, 
					AuditUpdateDTM,
					AuditUpdateUser					
					FROM trtDiagnosis WHERE idfsDiagnosis = @idfsDiagnosis;

				--idfsUsingType
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					4578050000000,
					a.idfsDiagnosis,
					null,
					a.idfsUsingType,
					b.idfsUsingType 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.idfsUsingType <> b.idfsUsingType) 
					or(a.idfsUsingType is not null and b.idfsUsingType is null)
					or(a.idfsUsingType is null and b.idfsUsingType is not null)

				--strIDC10
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81160000000,
					a.idfsDiagnosis,
					null,
					a.strIDC10,
					b.strIDC10 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.strIDC10 <> b.strIDC10) 
					or(a.strIDC10 is not null and b.strIDC10 is null)
					or(a.strIDC10 is null and b.strIDC10 is not null)

				--strOIECode
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81170000000,
					a.idfsDiagnosis,
					null,
					a.strOIECode,
					b.strOIECode 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.strOIECode <> b.strOIECode) 
					or(a.strOIECode is not null and b.strOIECode is null)
					or(a.strOIECode is null and b.strOIECode is not null)
					
				--blnZoonotic
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					51389460000000,
					a.idfsDiagnosis,
					null,
					a.blnZoonotic,
					b.blnZoonotic 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.blnZoonotic <> b.blnZoonotic) 
					or(a.blnZoonotic is not null and b.blnZoonotic is null)
					or(a.blnZoonotic is null and b.blnZoonotic is not null)

				--blnSyndrome
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					51389460000000,
					a.idfsDiagnosis,
					null,
					a.blnSyndrome,
					b.blnSyndrome 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.blnSyndrome <> b.blnSyndrome) 
					or(a.blnSyndrome is not null and b.blnSyndrome is null)
					or(a.blnSyndrome is null and b.blnSyndrome is not null)

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @idfsDiagnosis,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END
            ELSE
            BEGIN

				--Data Audit--

					-- tauDataAuditEvent Event Type - Create 
					set @idfsDataAuditEventType = 10016001;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfsDiagnosis, @idfObjectTable_trtDiagnosis, @idfDataAuditEvent OUTPUT

				--Data Audit--

                INSERT INTO dbo.trtDiagnosis
                (
                    idfsDiagnosis,
                    idfsUsingType,
                    strIDC10,
                    strOIECode,
                    intRowStatus,
                    rowguid,
                    blnZoonotic,
                    strMaintenanceFlag,
                    strReservedAttribute,
                    blnSyndrome,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES(
					@idfsDiagnosis,
					@idfsUsingType,
					@strIDC10,
					@strOIECode,
					0  ,
					NEWID(),
					ISNULL(@blnZoonotic, 0),
					'ADD',
					'EIDSS7 Disease',
					ISNULL(@blnSyndrome, 0),
					10519001,
					N'[{"idfsDiagnosis":' + CAST(@idfsDiagnosis AS NVARCHAR(300)) + '}]',
					@AuditUserName,
					GETDATE()
				);

				--Data Audit--							

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					VALUES (@idfDataAuditEvent, @idfObjectTable_trtDiagnosis, @idfsDiagnosis)
			
				--Data Audit--

                -- Add read permission allow to the default employee group.
                DECLARE @ObjectAccessID BIGINT;
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstObjectAccess',
                                                  @ObjectAccessID OUTPUT;

                INSERT INTO dbo.tstObjectAccess
                (
                    idfObjectAccess,
                    idfsObjectOperation,
                    idfsObjectType,
                    idfsObjectID,
                    idfActor,
                    idfsOnSite,
                    intPermission,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue
                )
                VALUES
                (   @ObjectAccessID,
                    10059003, -- Read permission
                    10060001, -- Disease record
                    @idfsDiagnosis,
                    -506,     -- Default employee group
                    1,        -- First level site
                    2,        -- Allow permission
                    0,
                    10519001,
                    N'[{"idfObjectAccess":' + CAST(@ObjectAccessID AS NVARCHAR(300)) + '}]'
                );

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @idfsDiagnosis,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END

            --Common actions
            EXEC dbo.USSP_DISEASETOLABTEST_SET @idfsDiagnosis, @strLabTest;

            EXEC dbo.USSP_DISEASETOPENSIDETEST_SET @idfsDiagnosis, @strPensideTest;

            EXEC dbo.USSP_DISEASETOSAMPLETYPE_SET @idfsDiagnosis, @strSampleType;
        END
        COMMIT TRANSACTION;

        SELECT @ReturnMessage AS 'ReturnMessage',
               @ReturnCode AS 'ReturnCode',
               @idfsDiagnosis AS 'idfsDiagnosis';
    END TRY
    BEGIN CATCH
        --Rollback the transaction
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK
        END;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_STATISTICDATATYPE_DEL]...';


GO
--=====================================================================================================
-- Name: USP_REF_STATISTICDATATYPE_DEL
-- Description:	Removes a statistic data type from the active list
--							
-- Author:		Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		2018/10/12 Initial Release
-- Ricky Moss		12/13/2018	Removed the return code
-- Doug Albanese	08/03/2021	Added the deletion routine to deactivate the record tied to the 
--                             base reference.
-- Stephen Long     11/01/2022 Added site alert logic.
-- Leo Tracchia     02/27/2023 Added data audit logic.
-- 
-- Test Code:
-- exec USP_REF_STATISTICDATATYPE_DEL 55615180000061
-- 
--=====================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_STATISTICDATATYPE_DEL]
(
    @idfsStatisticDataType BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY

        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF NOT EXISTS
        (
            SELECT idfsStatisticDataType
            FROM dbo.tlbStatistic
            WHERE idfsStatisticDataType = @idfsStatisticDataType
                  AND intRowStatus = 0
        ) OR @DeleteAnyway = 1

			BEGIN

				--Begin: Data Audit--	

				DECLARE @idfUserId BIGINT = @UserId;
				DECLARE @idfSiteId BIGINT = @SiteId;
				DECLARE @idfsDataAuditEventType bigint = NULL;
				DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
				DECLARE @idfObject bigint = @idfsStatisticDataType;
				DECLARE @idfObjectTable_trtStatisticDataType bigint = 75980000000;		
				DECLARE @idfObjectTable_trtBaseReference bigint = 75820000000;
				DECLARE @idfObjectTable_trtStringNameTranslation bigint = 75990000000;
				DECLARE @idfDataAuditEvent bigint = NULL;	

				-- tauDataAuditEvent Event Type - Delete 
				set @idfsDataAuditEventType = 10016002;
			
				--End: Data Audit--	

				UPDATE dbo.trtStatisticDataType
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsStatisticDataType = @idfsStatisticDataType
					  AND intRowStatus = 0;

				--Begin: Data Audit, trtStatisticDataType--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtStatisticDataType, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtStatisticDataType, @idfObject)

				--End: Data Audit, trtStatisticDataType--

				UPDATE dbo.trtBaseReference
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsStatisticDataType
					  AND intRowStatus = 0;

				--Begin: Data Audit, trtBaseReference--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtBaseReference, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtBaseReference, @idfObject)

				--End: Data Audit, trtBaseReference--

				UPDATE dbo.trtStringNameTranslation
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsStatisticDataType;

				--Begin: Data Audit, trtStringNameTranslation--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtStringNameTranslation, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @idfObject)

				--End: Data Audit, trtStringNameTranslation--

				UPDATE dbo.trtBaseReference
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsStatisticDataType;

				INSERT INTO @SuppressSelect
				EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
											   @EventTypeId,
											   @UserId,
											   @idfsStatisticDataType,
											   NULL,
											   @SiteId,
											   NULL,
											   @SiteId,
											   @LocationId,
											   @AuditUserName;
			END

        ELSE IF EXISTS
        (
            SELECT idfsStatisticDataType
            FROM dbo.tlbStatistic
            WHERE idfsStatisticDataType = @idfsStatisticDataType
                  and intRowStatus = 0
        )
			BEGIN
				SELECT @ReturnCode = -1;
				SELECT @ReturnMessage = 'IN USE';
			END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_STATISTICDATATYPE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_STATISTICDATATYPE_SET
--
-- Description:	Creates or updates a statistical data type.
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss       09/28/2018 Initial release.
-- Ricky Moss		12/13/2018 Removed the return code and reference id variables
-- Ricky Moss		12/20/2018 Merged SET AND DOESEXIST stored procedures
-- Ricky Moss		02/11/2019 Checks to see when updating a statistical data type that the name 
--                             does not exists in another reference
-- Ricky Moss		09/20/2019 Refactored duplication check code
-- Ricky Moss		02/17/2020 Refactored to check for duplicates and translated values and update
-- Ricky Moss		03/18/2020 corrected update portion
-- Ricky Moss		03/20/2020 corrected table name
-- Ricky Moss		04/16/2020 reactivated inactive record if being readded
-- Doug Albanese	04/12/2020 Refactored to make use of USSP_GBL_BaseReference_SET, and to change 
--                             the branch decisions for insert/update.
-- Doug Albanese	07/31/2021 Added duplication fix
-- Doug Albanese	08/03/2021 Modified duplication detection to handle the existence of 
--                             previously deleted items
-- Doug Albanese	08/09/2021 Refactored against changes, provided by Mark Wilson, to complete 
--                             the work on this
-- Stephen Long     07/18/2022 Added site alert logic.
-- Leo Tracchia     02/27/2023 Added data auditing logic.
/*

exec USP_REF_STATISTICDATATYPE_SET NULL, 'Mark Wilson Test Number 02468', 'Test Locally', 19000090, 10091005, 10089002, 1, 'en-US'

exec USP_REF_STATISTICDATATYPE_SET 39850000000, 'Population', 'Population', 19000090, 10091005, 10089001, 1, 'en'

exec USP_REF_STATISTICDATATYPE_SET 389445040003919, 'Change to something else new', 'Population', 19000090, 10091005, 10089001, 1, 'en-US'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_STATISTICDATATYPE_SET]
(
    @idfsStatisticDataType AS BIGINT = NULL,
    @strDefault AS NVARCHAR(200),
    @strName AS NVARCHAR(200),
    @idfsReferenceType AS BIGINT,
    @idfsStatisticPeriodType AS BIGINT,
    @idfsStatisticAreaType AS BIGINT = NULL,
    @blnRelatedWithAgeGroup AS BIT,
    @LangID AS NVARCHAR(50),
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN

    DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
            @ReturnCode INT = 0,
            @DuplicateDefault INT = 0 -- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    BEGIN TRY
        IF @idfsStatisticDataType IS NULL
			BEGIN -- this is an insert.  check if the strDefault is a duplicate
				IF EXISTS
				(
					SELECT *
					FROM dbo.trtBaseReference
					WHERE strDefault = @strDefault
						  AND idfsReferenceType = 19000090
						  AND trtBaseReference.intRowStatus = 0
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END
        ELSE
			BEGIN -- this is an update.  check if the strDefault is a duplicate
				IF EXISTS
				(
					SELECT *
					FROM dbo.trtBaseReference
					WHERE idfsBaseReference <> @idfsStatisticDataType
						  AND strDefault = @strDefault
						  AND idfsReferenceType = 19000090
						  AND trtBaseReference.intRowStatus = 0
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END

        IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate

			BEGIN
				SET @ReturnMessage = 'DOES EXIST';
			END

        ELSE -- there is no duplicate, so continue

			BEGIN

			--Begin: Data Audit Declarations--

			DECLARE @idfUserId BIGINT = @UserId;
			DECLARE @idfSiteId BIGINT = @SiteId;
			DECLARE @idfsDataAuditEventType bigint = NULL;
			DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
			DECLARE @idfObject bigint = @idfsStatisticDataType;
			DECLARE @idfObjectTable_trtStatisticDataType bigint = 75980000000;		
			DECLARE @idfDataAuditEvent bigint = NULL;		

			DECLARE @trtStatisticDataType_BeforeEdit TABLE
			(
				idfsStatisticDataType bigint,
				idfsReferenceType bigint,
				idfsStatisticAreaType bigint,
				idfsStatisticPeriodType bigint,									
				blnRelatedWithAgeGroup bit					
			)

			DECLARE @trtStatisticDataType_AfterEdit TABLE
			(
				idfsStatisticDataType bigint,
				idfsReferenceType bigint,
				idfsStatisticAreaType bigint,
				idfsStatisticPeriodType bigint,									
				blnRelatedWithAgeGroup bit	
			)				

			--End: Data Audit--			

			INSERT INTO @SuppressSelect
			EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsStatisticDataType OUTPUT,
												@ReferenceType = 19000090,
												@LangID = @LangID,
												@DefaultName = @strDefault,
												@NationalName = @strName,
												@HACode = NULL,
												@Order = NULL,
												@System = 0,
												@User = @AuditUserName;

				IF NOT EXISTS
				(
					SELECT *
					FROM dbo.trtStatisticDataType
					WHERE idfsStatisticDataType = @idfsStatisticDataType
				)
				BEGIN

					--Begin: Data Audit for INSERT--

					-- tauDataAuditEvent Event Type - Create 
					set @idfsDataAuditEventType = 10016001;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfsStatisticDataType, @idfObjectTable_trtStatisticDataType, @idfDataAuditEvent OUTPUT

					--End: Data Audit for INSERT--

					INSERT INTO dbo.trtStatisticDataType
					(
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,
						intRowStatus,
						rowguid,
						blnRelatedWithAgeGroup,
						strMaintenanceFlag,
						strReservedAttribute,
						SourceSystemNameID,
						SourceSystemKeyValue,
						AuditCreateDTM,
						AuditCreateUser
					)
					VALUES
					(@idfsStatisticDataType,
					 @idfsReferenceType,
					 @idfsStatisticAreaType,
					 @idfsStatisticPeriodType,
					 0  ,
					 NEWID(),
					 @blnRelatedWithAgeGroup,
					 NULL,
					 NULL,
					 10519001,
					 '[{"idfsBaseReference":' + CAST(@idfsStatisticDataType AS NVARCHAR(300)) + '}]',
					 GETDATE(),
					 @AuditUserName
					);

					--Begin: Data Audit for INSERT--					

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					VALUES (@idfDataAuditEvent, @idfObjectTable_trtStatisticDataType, @idfsStatisticDataType)
			
					--End: Data Audit for INSERT--

				END
            ELSE
				BEGIN

					--Begin: Data Audit for UPDATE--
				
					--  tauDataAuditEvent  Event Type - Edit 
					set @idfsDataAuditEventType = 10016003;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfsStatisticDataType, @idfObjectTable_trtStatisticDataType, @idfDataAuditEvent OUTPUT

					INSERT INTO @trtStatisticDataType_BeforeEdit (
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup)
					SELECT 
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup
					FROM trtStatisticDataType WHERE idfsStatisticDataType = @idfsStatisticDataType;

					--End: Data Audit for UPDATE--

					UPDATE dbo.trtStatisticDataType
					SET idfsReferenceType = @idfsReferenceType,
						idfsStatisticAreaType = @idfsStatisticAreaType,
						idfsStatisticPeriodType = @idfsStatisticPeriodType,
						blnRelatedWithAgeGroup = @blnRelatedWithAgeGroup,
						intRowStatus = 0,
						rowguid = ISNULL(rowguid, NEWID()),
						AuditUpdateDTM = GETDATE(),
						AuditUpdateUser = @AuditUserName
					WHERE idfsStatisticDataType = @idfsStatisticDataType;

					--Begin: Data Audit for UPDATE--

					INSERT INTO @trtStatisticDataType_AfterEdit (
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup)
					SELECT 
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup
					FROM trtStatisticDataType WHERE idfsStatisticDataType = @idfsStatisticDataType;

					--idfsReferenceType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						81350000000,
						a.idfsStatisticDataType,
						null,
						a.idfsReferenceType,
						b.idfsReferenceType 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.idfsReferenceType <> b.idfsReferenceType) 
						or(a.idfsReferenceType is not null and b.idfsReferenceType is null)
						or(a.idfsReferenceType is null and b.idfsReferenceType is not null)

					--idfsStatisticAreaType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						4578150000000,
						a.idfsStatisticDataType,
						null,
						a.idfsStatisticAreaType,
						b.idfsStatisticAreaType 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
						or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
						or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null)

					--idfsStatisticPeriodType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						4578160000000,
						a.idfsStatisticDataType,
						null,
						a.idfsStatisticPeriodType,
						b.idfsStatisticPeriodType 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
						or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
						or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null)

					--blnRelatedWithAgeGroup
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						12014490000000,
						a.idfsStatisticDataType,
						null,
						a.blnRelatedWithAgeGroup,
						b.blnRelatedWithAgeGroup 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.blnRelatedWithAgeGroup <> b.blnRelatedWithAgeGroup) 
						or(a.blnRelatedWithAgeGroup is not null and b.blnRelatedWithAgeGroup is null)
						or(a.blnRelatedWithAgeGroup is null and b.blnRelatedWithAgeGroup is not null)

					--End: Data Audit for UPDATE--
				END

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsStatisticDataType,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage,
               @idfsStatisticDataType AS idfsStatisticDataType;

    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_GETList
--
-- Description: Gets a list of veterinary active surveillance sessions for the veterinary module 
-- based on search criteria provided.
--
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Mandar Kulkarni            Initial release.
-- Stephen Long    06/06/2018 Added campaign ID parameter and additional where clause check.
-- Stephen Long    11/18/2018 Renamed with correct module name, and updated parameter names and 
--                            result name field names.
-- Stephen Long    12/31/2018 Added pagination logic.
-- Stephen Long    05/01/2019 Removed additional field parameters to sync with use case, and 
--                            added campaign and monitoring session ID parameters.
-- Stephen Long    06/25/2019 Corrected session category type.
-- Stephen Long    07/06/2019 Added EIDSSCampaignID to the select.
-- Stephen Long    08/28/2019 Corrected date entered from and to when null dates are passed in on 
--                            one of the dates and the other has data.
-- Stephen Long    09/13/2019 Added settlement ID parameter and where clause.
-- Stephen Long    12/18/2019 Added legacy session ID parameter and where clause.
-- Stephen Long    01/22/2020 Added site list parameter for site filtration.
-- Stephen Long    02/02/2020 Added non-configurable filtration rules.
-- Stephen Long    02/20/2020 Added additional non-configurable rules.
-- Stephen Long    03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                            non-configurable rules.
-- Stephen Long    04/17/2020 Changed join from FN_GBL_INSTITUTION to tstSite as not all sites have 
--                            organizations.
-- Stephen Long    05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long    06/22/2020 Added where criteria to the query when no site filtration is 
--                            required.
-- Stephen Long    07/07/2020 Added trim to EIDSS identifier like criteria.
-- Stephen Long    09/23/2020 Added descending to the order by clause.
-- Stephen Long    11/18/2020 Renamed organization ID and name to site ID and name.
-- Stephen Long    11/25/2020 Added configurable site filtration rules.
-- Stephen Long    12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long    12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long    12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long    01/28/2021 Added order by clause to handle user selected sorting across 
--                            pagination sets.
-- Stephen Long    04/02/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay   12/16/2021 Added tlbMonitoringSessionToDiagnosis to all joins involving 
--                            idfsDiagnosis and changed
--                            location hieararchy to use FN_GBL_LocationHierarchy_Flattened
-- Stephen Long    01/26/2022 Added the disease identifiers and names fields to the query.
-- Mike Kornegay   01/31/2022 Removed the left join on tlbMonitoringSessionToDiagnosis because it 
--                            was replaced
--							  by the new disease functions.
-- Mike Kornegay   03/10/2022 Added SessionStatusTypeID and ReportTypeID to return fields.
-- Mike Kornegay   03/20/2022 Corrected date comparisons to use binary compare instead of between.
-- Mike Kornegay   03/25/2022 Further changes to date comparisons to prevent sql overflow.
-- Stephen Long    03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Mike Kornegay   05/16/2022 Correct returned location levels to be country, region, rayon, 
--                            settlement
-- Mike Kornegay   05/19/2022 Correct location search to use node descendants instead of particular 
--                            idfsLocation
-- Stephen Long    06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay   06/13/2022 Changed ReportTypeID and ReportTypeName to point to the new SessionCategoryID - this
--							   field now stores the report type of the vet surveillance session so we do not depend 
--							   on the diagnosis list to determine type.
-- Mike Kornegay   07/27/2022 Changed CTE for paging and sorting.
-- Stephen Long    08/13/2022 Added session category type ID parameter and where criteria.
-- Stephen Long    09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay   09/24/2022 Testing stored proc change.
-- Stephen Long    01/09/2023 Updated for site filtration queries.
--
-- Testing Code:
--EXEC	@return_value = [dbo].[USP_VAS_MONITORING_SESSION_GETList]
--		@LanguageID = N'en-US',
--		@SessionID = NULL,
--		@LegacySessionID = NULL,
--		@CampaignID = NULL,
--		@CampaignKey = NULL,
--		@SessionStatusTypeID = NULL,
--		@DateEnteredFrom = NULL,
--		@DateEnteredTo = NULL,
--		@AdministrativeLevelID = 349690000000,
--		@DiseaseID = NULL,
--		@UserSiteID = 1100,
--		@UserOrganizationID = 709150000000,
--		@UserEmployeeID = 155568340001298,
--		@ApplySiteFiltrationIndicator = 0,
--		@SortColumn = N'SessionID',
--		@SortOrder = N'desc',
--		@PageNumber = 1,
--		@PageSize = 10
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_GETList]
(
    @LanguageID NVARCHAR(50),
    @SessionID NVARCHAR(200) = NULL,
    @LegacySessionID NVARCHAR(50) = NULL,
    @CampaignID NVARCHAR(200) = NULL,
    @CampaignKey BIGINT = NULL,
    @SessionStatusTypeID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @SessionCategoryTypeID BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'SessionID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT;
    DECLARE @lastRec INT;
    SET @firstRec = (@PageNumber - 1) * @PageSize
    SET @lastRec = (@PageNumber * @PageSize + 1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    IF @AdministrativeLevelID IS NOT NULL
    BEGIN
        SELECT @AdministrativeLevelNode = node
        FROM dbo.gisLocation
        WHERE idfsLocation = @AdministrativeLevelID;
    END;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO CONFIGURABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any configurable filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT ms.idfMonitoringSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMonitoringSession ms
                --INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH ON LH.idfsLocation = ms.idfsLocation
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
            WHERE ms.intRowStatus = 0
                  AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          (CAST(ms.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                          OR @LegacySessionID IS NULL
                      )
                  AND (
                          ms.SessionCategoryID = @SessionCategoryTypeID
                          OR @SessionCategoryTypeID IS NULL
                      )
            GROUP BY ms.idfMonitoringSession;
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT ms.idfMonitoringSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMonitoringSession ms
                --INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH ON LH.idfsLocation = ms.idfsLocation
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
            WHERE ms.intRowStatus = 0
                  AND ms.idfsSite = @UserSiteID
                  AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          (CAST(ms.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                          OR @LegacySessionID IS NULL
                      )
                  AND (
                          ms.SessionCategoryID = @SessionCategoryTypeID
                          OR @SessionCategoryTypeID IS NULL
                      )
            GROUP BY ms.idfMonitoringSession;

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply non-configurable filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            --
            -- Session data shall be available to all sites of the same administrative level.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537015;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537015;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the session was created.
                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tstSite s
                        ON ms.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537015
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the farm address.
                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbFarm f
                        ON f.idfMonitoringSession = ms.idfMonitoringSession
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = f.idfFarmAddress
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537015
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            --
            -- Session data is always distributed across the sites where the disease reports are 
            -- linked to the session.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537016;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbVetCase v
                        ON v.idfParentMonitoringSession = ms.idfMonitoringSession
                           AND v.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537016
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND v.idfsSite = @UserSiteID;
            END;

            --
            -- Session data shall be available to all sites' organizations connected to the particular 
            -- session where samples were transferred out.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537017;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Samples transferred collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbMaterial m
                        ON ms.idfMonitoringSession = m.idfMonitoringSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT tout
                        ON toutm.idfTransferOut = tout.idfTransferOut
                           AND tout.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537017
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND tout.idfSendToOffice = @UserOrganizationID;

                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbMaterial m
                        ON ms.idfMonitoringSession = m.idfMonitoringSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537017
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          );
            END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND sgs.idfsSite = ms.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = ID
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
            WHERE ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(ms.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                          OR @LegacySessionID IS NULL
                      )
                  AND (
                          ms.SessionCategoryID = @SessionCategoryTypeID
                          OR @SessionCategoryTypeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = msd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE ms.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT ms.idfMonitoringSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMonitoringSession ms
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND ms.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
        GROUP BY ms.idfMonitoringSession;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT ms.idfMonitoringSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMonitoringSession ms
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND ms.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
        GROUP BY ms.idfMonitoringSession;

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = msd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE ms.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = @UserEmployeeID
                    );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ms.idfMonitoringSession
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = ms.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE ms.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT ms.idfMonitoringSession,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMonitoringSession ms
        WHERE ms.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = ms.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = ms.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT ms.idfMonitoringSession,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ms.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMonitoringSession ms
        WHERE ms.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = ms.idfsSite
        );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            INNER JOIN @UserSitePermissions usp
                                ON usp.SiteID = ms.idfsSite
                        WHERE usp.Permission = 4 -- Deny permission
                              AND usp.PermissionTypeID = 10059003 -- Read permission
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ms.idfsLocation
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND ms.SessionCategoryID IN ( 10502002, 10502009 ) -- Veterinary Active Surveillance Session (Avian and Livestock)
              AND (
                      ms.idfCampaign = @CampaignKey
                      OR @CampaignKey IS NULL
                  )
              AND (
                      ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                      OR @SessionStatusTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (CAST(ms.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                      OR @CampaignID IS NULL
                  )
              AND (
                      LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                      OR @LegacySessionID IS NULL
                  )
              AND (
                      ms.SessionCategoryID = @SessionCategoryTypeID
                      OR @SessionCategoryTypeID IS NULL
                  )
        GROUP BY ID;

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'SessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ms.strMonitoringSessionID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ms.strMonitoringSessionID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sessionStatus.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sessionStatus.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ms.datEnteredDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ms.datEnteredDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS RecordCount,
                   res.ID AS SessionKey,
                   ms.strMonitoringSessionID AS SessionID,
                   ms.idfCampaign AS CampaignKey,
                   c.strCampaignID AS CampaignID,
                   sessionStatus.idfsReference AS SessionStatusTypeID,
                   ms.SessionCategoryID AS ReportTypeID,
                   ISNULL(reportType.name, reportType.strDefault) AS ReportTypeName,
                   sessionStatus.name AS SessionStatusTypeName,
                   ms.datStartDate AS StartDate,
                   ms.datEndDate AS EndDate,
                   diseaseIDs.diseaseIDs AS DiseaseIdentifiers,
                   diseaseNames.diseaseNames AS DiseaseNames,
                   '' AS DiseaseName,
                   lh.AdminLevel1Name AS AdministrativeLevel0Name,
                   lh.AdminLevel2Name AS AdministrativeLevel1Name,
                   lh.AdminLevel3Name AS AdministrativeLevel2Name,
                   lh.AdminLevel4Name AS SettlementName,
                   ms.datEnteredDate AS EnteredDate,
                   ISNULL(p.strFirstName, '') + ' ' + ISNULL(p.strFamilyName, '') AS EnteredByPersonName,
                   ms.idfsSite AS SiteKey,
                   s.strSiteName AS SiteName,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   (
                       SELECT COUNT(*)
                       FROM dbo.tlbMonitoringSession
                       WHERE intRowStatus = 0
                             AND SessionCategoryID = 10502002 -- Veterinary Avian Active Surveillance Session
                             OR SessionCategoryID = 10502009 -- Veterinary Livestock Active Surveillance Session
                   ) AS TotalCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = res.ID
                LEFT JOIN dbo.MonitoringSessionToSampleType mss
                    ON ms.idfMonitoringSession = mss.idfMonitoringSession
                CROSS APPLY
            (
                SELECT dbo.FN_GBL_SESSION_DISEASEIDS_GET(ms.idfMonitoringSession) diseaseIDs
            ) diseaseIDs
                CROSS APPLY
            (
                SELECT dbo.FN_GBL_SESSION_DISEASE_NAMES_GET(ms.idfMonitoringSession, @LanguageID) diseaseNames
            ) diseaseNames
                LEFT JOIN dbo.tstSite s
                    ON s.idfsSite = ms.idfsSite
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000117) sessionStatus
                    ON sessionStatus.idfsReference = ms.idfsMonitoringSessionStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000502) reportType
                    ON reportType.idfsReference = ms.SessionCategoryID
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = g.idfsLocation
                LEFT JOIN dbo.tlbPerson p
                    ON p.idfPerson = ms.idfPersonEnteredBy
            WHERE ms.intRowStatus = 0
           )
        SELECT SessionKey,
               SessionID,
               CampaignKey,
               CampaignID,
               SessionStatusTypeID,
               ReportTypeID,
               ReportTypeName,
               SessionStatusTypeName,
               StartDate,
               EndDate,
               DiseaseIdentifiers,
               DiseaseNames,
               DiseaseName,
               AdministrativeLevel0Name,
               AdministrativeLevel1Name,
               AdministrativeLevel2Name,
               SettlementName,
               EnteredDate,
               EnteredByPersonName,
               SiteKey,
               SiteName,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RecordCount,
               TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0)
        FROM paging
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SUMMARY_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SUMMARY_GETList
--
-- Description:	Get monitoring session aggregate info list for the veterinary module monitoring 
-- session edit/enter use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     05/07/2018 Initial release
-- Stephen Long     05/03/2019 Modified for API; removed maintenance flag.
-- Mike Kornegay	03/03/2022 Changed RowAction type to INT.
-- Mike Kornegay	06/28/2022 Added FarmMasterID
-- Mike Kornegay	11/02/2022 Added SpeciesTypeID
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SUMMARY_GETList] (
	@LanguageID NVARCHAR(50),
	@MonitoringSessionID BIGINT = NULL
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		SELECT mss.idfMonitoringSessionSummary AS MonitoringSessionSummaryID,
			mss.idfMonitoringSession AS MonitoringSessionID,
			mss.idfFarm AS FarmID,
			f.idfFarmActual AS FarmMasterID,
			f.strFarmCode AS EIDSSFarmID,
			mss.idfSpecies AS SpeciesID,
			speciesType.idfsReference AS SpeciesTypeID,
			speciesType.name AS SpeciesTypeName,
			mss.idfsAnimalSex AS AnimalGenderTypeID,
			animalGenderType.name AS AnimalGenderTypeName,
			mss.intSampledAnimalsQty AS SampledAnimalsQuantity,
			mss.intSamplesQty AS SamplesQuantity,
			mss.datCollectionDate AS CollectionDate,
			mss.intPositiveAnimalsQty AS PositiveAnimalsQuantity,
			msss.idfsSampleType AS SampleTypeID,
			sampleType.name AS SampleTypeName,
			msss.blnChecked AS SampleCheckedIndicator,
			mssd.idfsDiagnosis AS DiseaseID,
			diseaseBaseReference.name AS DiseaseName,
			mssd.blnChecked AS DiseaseCheckedIndicator,
			mss.intRowStatus AS RowStatus,
			0 AS RowAction
		FROM dbo.tlbMonitoringSessionSummary mss
		LEFT JOIN dbo.tlbMonitoringSessionSummarySample msss
			ON msss.idfMonitoringSessionSummary = mss.idfMonitoringSessionSummary
				AND msss.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSessionSummaryDiagnosis mssd
			ON msss.idfMonitoringSessionSummary = mssd.idfMonitoringSessionSummary
				AND mssd.intRowStatus = 0
		LEFT JOIN dbo.tlbSpecies AS s
			ON s.idfSpecies = mss.idfSpecies
				AND s.intRowStatus = 0
		LEFT JOIN dbo.tlbFarm AS f
			ON f.idfFarm = mss.idfFarm
				AND f.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000086) AS speciesType
			ON speciesType.idfsReference = s.idfsSpeciesType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000007) AS animalGenderType
			ON animalGenderType.idfsReference = mss.idfsAnimalSex
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) AS sampleType
			ON sampleType.idfsReference = msss.idfsSampleType
		LEFT JOIN dbo.trtDiagnosis AS diagnosisReference
			ON diagnosisReference.idfsDiagnosis = mssd.idfsDiagnosis
				AND diagnosisReference.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) AS diseaseBaseReference
			ON diseaseBaseReference.idfsReference = mssd.idfsDiagnosis
		WHERE (
				(mss.idfMonitoringSession = @MonitoringSessionID)
				OR (@MonitoringSessionID IS NULL)
				)
			--AND mss.intRowStatus = 0;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_DetailedCollections_Copy]...';


GO
--*************************************************************
-- Name 				: USP_VCTS_DetailedCollections_Copy
-- Description			: Create replicas of the given idfVector ids
--          
-- Author               : Doug Albanese
-- Revision History
--	Name			Date			Change Detail
--	Doug Albanese	01/21/2020		Initial Creation
--	Doug Albanese	11/5/2020		Re-worked to get the copy to associate samples and tests for the new vector.
--	Doug Albanese	 10/20/2022		Create parameters to denote which parts of a vector, needs to be copyied.
--									Also changed the SP name to conform to standards
--	Mike Kornegay	01/26/2023		Correct return type to match APIPostReturn\
--	Mike Kornegay	02/03/2023		Changed fields that should be null upon copy. (Field Sample Id, Test Result, etc.)
--									and correct query to pull field tests.
--  Mike Kornegay	02/09/2023		Added DiseaseID to tlbMaterial.
--
--*************************************************************

ALTER PROCEDURE [dbo].[USP_VCTS_DetailedCollections_Copy]
(
    @idfVector							  BIGINT,
	@VectorData							  BIT = 0,
	@Samples							  BIT = 0,
	@Tests								  BIT = 0
)

AS 

BEGIN
	DECLARE @returnCode						INT = 0
	DECLARE	@returnMsg						NVARCHAR(max) = 'SUCCESS' 
	DECLARE @idfVectorNew					BIGINT

	DECLARE @SupressSelect TABLE
	( retrunCode INT,
		returnMsg NVARCHAR(200)
	)

	DECLARE @idfMaterials TABLE (
		idfMaterial BIGINT
	);

	DECLARE @idfTestings TABLE (
		idfTesting BIGINT,
		idfMaterial BIGINT
	);

	IF @Samples = 1
	  BEGIN
		 INSERT INTO @idfMaterials
			SELECT
			   DISTINCT idfMaterial
			FROM
			   tlbMaterial
			WHERE
			   idfVector = @idfVector
	  
		 IF @Tests = 1
			BEGIN
				INSERT INTO @idfTestings
				SELECT
					 DISTINCT t.idfTesting, t.idfMaterial
				  FROM			tlbTesting t
				  INNER JOIN	tlbMaterial m
				  ON			m.idfMaterial = t.idfMaterial
				  WHERE			m.idfVector = @idfVector

			END
	  END

	DECLARE @rowId							BIGINT
	DECLARE @idfMaterial					BIGINT
	DECLARE @idfMaterialNew					BIGINT
	DECLARE @idfVectorSurveillanceSession	BIGINT
	DECLARE @idfHostVector					BIGINT = NULL
	DECLARE @strVectorID					NVARCHAR(50)
	DECLARE @strFieldVectorID				NVARCHAR(50) = NULL
	DECLARE @idfLocation					BIGINT = NULL
	DECLARE @intElevation					BIGINT = NULL
	DECLARE @idfsSurrounding				BIGINT = NULL
	DECLARE @strGEOReferenceSources			NVARCHAR(500) = NULL
	DECLARE @idfCollectedByOffice			BIGINT
	DECLARE @idfCollectedByPerson			BIGINT = NULL
	DECLARE @datCollectionDateTime			DATETIME
	DECLARE @idfsCollectionMethod			BIGINT = NULL
	DECLARE @idfsBasisOfRecord				BIGINT = NULL
	DECLARE @idfsVectorType					BIGINT
	DECLARE @idfsVectorSubType				BIGINT
	DECLARE @intQuantity					INT
	DECLARE @idfsSex						BIGINT = NULL
	DECLARE @idfIdentIFiedByOffice			BIGINT = NULL
	DECLARE @idfIdentIFiedByPerson			BIGINT = NULL
	DECLARE @datIdentIFiedDateTime			DATETIME = NULL
	DECLARE @idfsIdentIFicationMethod		BIGINT = NULL
	DECLARE @idfObservation					BIGINT = NULL
	DECLARE @idfsDayPeriod					BIGINT = NULL
	DECLARE @strComment						NVARCHAR(500) = NULL
	DECLARE @idfsEctoparASitesCollected		BIGINT = NULL

	DECLARE @idfsSampleType 				BIGINT
	DECLARE @idfRootMaterial 				BIGINT = NULL
	DECLARE @idfParentMaterial 				BIGINT = NULL
	DECLARE @idfHuman 						BIGINT = NULL
	DECLARE @idfSpecies 					BIGINT = NULL
	DECLARE @idfAnimal 						BIGINT = NULL
	DECLARE @idfMonitoringSession 			BIGINT = NULL
	DECLARE @idfFieldCollectedByPerson 		BIGINT = NULL
	DECLARE @idfFieldCollectedByOffice 		BIGINT = NULL
	DECLARE @idfMainTest 					BIGINT = NULL
	DECLARE @datFieldCollectionDate 		DATETIME = NULL
	DECLARE @datFieldSentDate 				DATETIME = NULL
	DECLARE @strFieldBarcode 				NVARCHAR(200) = NULL
	DECLARE @strCalculatedCaseID 			NVARCHAR(200) = NULL
	DECLARE @strCalculatedHumanName 		NVARCHAR(700) = NULL
	DECLARE @idfSubdivision 				BIGINT = NULL	
	DECLARE @idfsSampleStatus 				BIGINT = NULL
	DECLARE @idfInDepartment 				BIGINT = NULL
	DECLARE @idfDestroyedByPerson 			BIGINT = NULL
	DECLARE @datEnteringDate 				DATETIME = NULL
	DECLARE @datDestructionDate 			DATETIME = NULL
	DECLARE @strBarcode 					NVARCHAR(200) = NULL
	DECLARE @strNote 						NVARCHAR(500) = NULL
	DECLARE @idfsSite 						BIGINT
	DECLARE @intRowStatus 					INT = 0
	DECLARE @idfSendToOffice 				BIGINT = NULL
	DECLARE @blnReadOnly 					BIT
	DECLARE @idfsBirdStatus 				BIGINT = NULL
	DECLARE @idfHumanCase 					BIGINT = NULL
	DECLARE @idfVetCase 					BIGINT = NULL
	DECLARE @datAccession 					DATETIME = NULL
	DECLARE @idfsAccessionCondition 		BIGINT = NULL
	DECLARE @strCondition 					NVARCHAR(200) = NULL
	DECLARE @idfAccesionByPerson 			BIGINT = NULL
	DECLARE @idfsDestructionMethod 			BIGINT = NULL
	DECLARE @idfsCurrentSite 				BIGINT = NULL
	DECLARE @idfsSampleKind 				BIGINT = NULL
	DECLARE @idfMarkedForDispositionByPerson BIGINT = NULL
	DECLARE @datOutOfRepositoryDate 		DATETIME = NULL
	DECLARE @strMaintenanceFlag 			NVARCHAR(20) = NULL

	DECLARE @idfTesting						BIGINT
	DECLARE @idfTestingNew					BIGINT
	DECLARE @idfsTestName					BIGINT = NULL
	DECLARE @idfsTestCategory				BIGINT = NULL
	DECLARE @idfsTestResult					BIGINT = NULL
	DECLARE @idfsTestStatus					BIGINT
	DECLARE @idfsDiagnosis					BIGINT
	DECLARE @idfBatchTest					BIGINT = NULL
	DECLARE @intTestNumber					INT = NULL
	DECLARE @datStartedDate					DATETIME = NULL
	DECLARE @datConcludedDate				DATETIME = NULL
	DECLARE @idfTestedByOffice				BIGINT = NULL
	DECLARE @idfTestedByPerson				BIGINT = NULL
	DECLARE @idfResultEnteredByOffice		BIGINT = NULL
	DECLARE @idfResultEnteredByPerson		BIGINT = NULL
	DECLARE @idfValidatedByOffice			BIGINT = NULL
	DECLARE @idfValidatedByPerson			BIGINT = NULL
	DECLARE @blnNonLaboratoryTest			BIT
	DECLARE @blnExternalTest				BIT = NULL
	DECLARE @idfPerformedByOffice			BIGINT = NULL
	DECLARE @datReceivedDate				DATETIME = NULL
	DECLARE @strContactPerson				NVARCHAR(200) = NULL

	BEGIN TRY
		 BEGIN
			   SELECT
					 @idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
					 @idfHostVector = idfHostVector, 
					 @strFieldVectorID = strFieldVectorID, 
					 @idfLocation = idfLocation, 
					 @intElevation = intElevation, 
					 @idfsSurrounding = idfsSurrounding, 
					 @strGEOReferenceSources = strGEOReferenceSources, 
					 @idfCollectedByOffice = idfCollectedByOffice, 
					 @idfCollectedByPerson = idfCollectedByPerson, 
					 @datCollectionDateTime = datCollectionDateTime, 
					 @idfsCollectionMethod = idfsCollectionMethod, 
					 @idfsBASisOfRecord = idfsBASisOfRecord, 
					 @idfsVectorType = idfsVectorType, 
					 @idfsVectorSubType = idfsVectorSubType, 
					 @intQuantity = intQuantity, 
					 @idfsSex = idfsSex, 
					 @idfIdentIFiedByOffice = idfIdentIFiedByOffice, 
					 @idfIdentIFiedByPerson = idfIdentIFiedByPerson, 
					 @datIdentIFiedDateTime = datIdentIFiedDateTime, 
					 @idfsIdentIFicationMethod = idfsIdentIFicationMethod, 
					 @idfObservation = idfObservation,
					 @idfsDayPeriod = idfsDayPeriod,
					 @strComment = strComment,
					 @idfsEctoparASitesCollected = idfsEctoparASitesCollected
			   FROM
				  tlbVector
			   WHERE
					 idfVector = @idfVector

			   INSERT INTO @SupressSelect
			   EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @idfVectorNew OUTPUT

			   INSERT INTO @SupressSelect
			   EXEC dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector', @strVectorID OUTPUT , NULL --N'AS Session'

			   INSERT INTO dbo.tlbVector
				  (
						idfVector, 
						idfVectorSurveillanceSession, 
						idfHostVector, 
						strVectorID, 
						strFieldVectorID, 
						idfLocation, 
						intElevation, 
						idfsSurrounding, 
						strGEOReferenceSources, 
						idfCollectedByOffice, 
						idfCollectedByPerson, 
						datCollectionDateTime, 
						idfsCollectionMethod, 
						idfsBasisOfRecord, 
						idfsVectorType, 
						idfsVectorSubType, 
						intQuantity, 
						idfsSex, 
						idfIdentIFiedByOffice, 
						idfIdentIFiedByPerson, 
						datIdentIFiedDateTime, 
						idfsIdentIFicationMethod, 
						idfObservation
						,idfsDayPeriod
						,strComment
						,idfsEctoparASitesCollected
				  )
			   VALUES
				  (
						@idfVectorNew, 
						@idfVectorSurveillanceSession, 
						@idfHostVector, 
						@strVectorID, 
						NULL, 
						@idfLocation, 
						@intElevation, 
						@idfsSurrounding, 
						@strGEOReferenceSources, 
						@idfCollectedByOffice, 
						@idfCollectedByPerson, 
						@datCollectionDateTime, 
						@idfsCollectionMethod, 
						@idfsBasisOfRecord, 
						@idfsVectorType, 
						@idfsVectorSubType, 
						@intQuantity, 
						@idfsSex, 
						@idfIdentifiedByOffice, 
						@idfIdentIFiedByPerson, 
						@datIdentIFiedDateTime, 
						@idfsIdentIFicationMethod, 
						@idfObservation,
						@idfsDayPeriod,
						@strComment,
						@idfsEctoparASitesCollected
			   )
		 END;
		
		 IF @Samples = 1
			BEGIN
			   WHILE EXISTS ( SELECT * FROM @idfMaterials )
				  BEGIN
					 SELECT
						TOP 1
						@rowId = idfMaterial
					 FROM 
						@idfMaterials

					 SELECT
						@idfsSampleType = idfsSampleType, 
						@idfRootMaterial = idfRootMaterial, 
						@idfParentMaterial = idfParentMaterial, 
						@idfsDiagnosis = DiseaseID,
						@idfHuman = idfHuman, 
						@idfSpecies = idfSpecies, 
						@idfAnimal = idfAnimal, 
						@idfMonitoringSession = idfMonitoringSession, 
						@idfFieldCollectedByPerson = idfFieldCollectedByPerson, 
						@idfFieldCollectedByOffice = idfFieldCollectedByOffice, 
						@idfMainTest = idfMainTest, 
						@datFieldCollectionDate = datFieldCollectionDate, 
						@datFieldSentDate = datFieldSentDate, 
						@strFieldBarcode = strFieldBarcode, 
						@strCalculatedCaseID = strCalculatedCaseID, 
						@strCalculatedHumanName = strCalculatedHumanName, 
						@idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
						@idfVector = @idfVectorNew, 
						@idfSubdivision = idfSubdivision, 
						@idfsSampleStatus = idfsSampleStatus, 
						@idfInDepartment = idfInDepartment, 
						@idfDestroyedByPerson = idfDestroyedByPerson, 
						@datEnteringDate = datEnteringDate, 
						@datDestructionDate = datDestructionDate, 
						@strBarcode = strBarcode, 
						@strNote = strNote, 
						@idfsSite = idfsSite, 
						@intRowStatus = intRowStatus, 
						@idfSendToOffice = idfSendToOffice, 
						@blnReadOnly = blnReadOnly, 
						@idfsBirdStatus = idfsBirdStatus, 
						@idfHumanCase = idfHumanCase, 
						@idfVetCase = idfVetCase, 
						@datAccession = datAccession, 
						@idfsAccessionCondition = idfsAccessionCondition, 
						@strCondition = strCondition, 
						@idfAccesionByPerson = idfAccesionByPerson, 
						@idfsDestructionMethod = idfsDestructionMethod, 
						@idfsCurrentSite = idfsCurrentSite, 
						@idfsSampleKind = idfsSampleKind, 
						@idfMarkedForDispositionByPerson = idfMarkedForDispositionByPerson, 
						@datOutOfRepositoryDate = datOutOfRepositoryDate, 
						@strMaintenanceFlag = strMaintenanceFlag 
					 FROM
						tlbMaterial
					 WHERE
						idfMaterial = @rowId

					 INSERT INTO @SupressSelect
					 EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbMaterial', @idfMaterialNew OUTPUT;

					 INSERT INTO @SupressSelect
					 EXEC	dbo.USP_GBL_NextNumber_GET 'Sample Field Barcode', @strBarcode OUTPUT, NULL 

					 --Update the temp table so that we will have the association between the new material and tests
					 UPDATE @idfTestings
					 SET idfMaterial = @idfMaterialNew
					 WHERE 
						idfMaterial = @rowid

					 INSERT INTO	dbo.tlbMaterial
						(						
								 idfMaterial, 
								 idfsSampleType, 
								 idfRootMaterial, 
								 idfParentMaterial, 
								 idfHuman, 
								 idfSpecies, 
								 idfAnimal, 
								 idfMonitoringSession, 
								 idfFieldCollectedByPerson, 
								 idfFieldCollectedByOffice, 
								 idfMainTest, 
								 datFieldCollectionDate, 
								 datFieldSentDate, 
								 strFieldBarcode, 
								 strCalculatedCaseID, 
								 strCalculatedHumanName, 
								 idfVectorSurveillanceSession, 
								 idfVector, 
								 idfSubdivision, 
								 idfsSampleStatus, 
								 idfInDepartment, 
								 idfDestroyedByPerson, 
								 datEnteringDate, 
								 datDestructionDate, 
								 strBarcode, 
								 strNote, 
								 idfsSite, 
								 intRowStatus, 
								 idfSendToOffice, 
								 blnReadOnly, 
								 idfsBirdStatus, 
								 idfHumanCase, 
								 idfVetCase, 
								 datAccession, 
								 idfsAccessionCondition, 
								 strCondition, 
								 idfAccesionByPerson, 
								 idfsDestructionMethod, 
								 idfsCurrentSite, 
								 idfsSampleKind, 
								 idfMarkedForDispositionByPerson, 
								 datOutOfRepositoryDate, 
								 strMaintenanceFlag,
								 DiseaseID
						)
						VALUES
						(
								 @idfMaterialNew, 
								 @idfsSampleType, 
								 @idfRootMaterial, 
								 @idfParentMaterial, 
								 @idfHuman, 
								 @idfSpecies, 
								 @idfAnimal, 
								 @idfMonitoringSession, 
								 @idfFieldCollectedByPerson, 
								 @idfFieldCollectedByOffice, 
								 @idfMainTest, 
								 @datFieldCollectionDate, 
								 @datFieldSentDate, 
								 NULL, 
								 @strCalculatedCaseID, 
								 @strCalculatedHumanName, 
								 @idfVectorSurveillanceSession, 
								 @idfVectorNew, 
								 @idfSubdivision, 
								 @idfsSampleStatus, 
								 @idfInDepartment, 
								 @idfDestroyedByPerson, 
								 @datEnteringDate, 
								 @datDestructionDate, 
								 @strBarcode, 
								 @strNote, 
								 @idfsSite, 
								 @intRowStatus, 
								 NULL, 
								 @blnReadOnly, 
								 @idfsBirdStatus, 
								 @idfHumanCase, 
								 @idfVetCase, 
								 @datAccession, 
								 @idfsAccessionCondition, 
								 @strCondition, 
								 @idfAccesionByPerson, 
								 @idfsDestructionMethod, 
								 @idfsCurrentSite, 
								 @idfsSampleKind, 
								 @idfMarkedForDispositionByPerson, 
								 @datOutOfRepositoryDate, 
								 @strMaintenanceFlag,
								 @idfsDiagnosis
						);
					
					 DELETE FROM @idfMaterials
					 WHERE idfMaterial = @rowId
				  END;
				  IF @Tests = 1
					 BEGIN
						WHILE EXISTS ( SELECT * FROM @idfTestings )
						   BEGIN
								 SELECT
									TOP 1
									@rowId = idfTesting
								 FROM 
									@idfTestings

								 SELECT
									@idfsTestName = idfsTestName, 
									@idfsTestCategory = idfsTestCategory, 
									@idfsTestResult = idfsTestResult, 
									@idfsTestStatus = idfsTestStatus, 
									@idfsDiagnosis = idfsDiagnosis, 
									@idfBatchTest = idfBatchTest, 
									@idfObservation = idfObservation, 
									@intTestNumber = intTestNumber, 
									@strNote = strNote, 
									@intRowStatus = intRowStatus, 
									@datStartedDate = datStartedDate, 
									@datConcludedDate = datConcludedDate, 
									@idfTestedByOffice = idfTestedByOffice, 
									@idfTestedByPerson = idfTestedByPerson, 
									@idfResultEnteredByOffice = idfResultEnteredByOffice, 
									@idfResultEnteredByPerson = idfResultEnteredByPerson, 
									@idfValidatedByOffice = idfValidatedByOffice, 
									@idfValidatedByPerson = idfValidatedByPerson, 
									@blnReadOnly = blnReadOnly, 
									@blnNonLaboratoryTest = blnNonLaboratoryTest, 
									@blnExternalTest = blnExternalTest, 
									@idfPerformedByOffice = idfPerformedByOffice, 
									@datReceivedDate = datReceivedDate, 
									@strContactPerson = strContactPerson, 
									@strMaintenanceFlag = strMaintenanceFlag
								 FROM
									tlbTesting
								 WHERE
									idfTesting = @rowId

								 INSERT INTO @SupressSelect
								 EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @idfTestingNew OUTPUT;

								 SELECT
									@idfMaterialNew = idfMaterial
								 FROM
									@idfTestings
								 WHERE
									idfTesting = @rowId

								 INSERT INTO	dbo.tlbTesting
								 (						
									   idfTesting, 
									   idfsTestName, 
									   idfsTestCategory, 
									   idfsTestResult, 
									   idfsTestStatus, 
									   idfsDiagnosis, 
									   idfMaterial, 
									   idfBatchTest, 
									   idfObservation, 
									   intTestNumber, 
									   strNote, 
									   intRowStatus, 
									   datStartedDate, 
									   datConcludedDate, 
									   idfTestedByOffice, 
									   idfTestedByPerson, 
									   idfResultEnteredByOffice, 
									   idfResultEnteredByPerson, 
									   idfValidatedByOffice, 
									   idfValidatedByPerson, 
									   blnReadOnly, 
									   blnNonLaboratoryTest, 
									   blnExternalTest, 
									   idfPerformedByOffice, 
									   datReceivedDate, 
									   strContactPerson, 
									   strMaintenanceFlag,
									   idfVector
								)
								 VALUES
								 (
									   @idfTestingNew, 
									   @idfsTestName, 
									   @idfsTestCategory, 
									   NULL, 
									   @idfsTestStatus, 
									   @idfsDiagnosis, 
									   @idfMaterialNew, 
									   @idfBatchTest, 
									   @idfObservation, 
									   @intTestNumber, 
									   @strNote, 
									   @intRowStatus, 
									   @datStartedDate, 
									   @datConcludedDate, 
									   @idfTestedByOffice, 
									   @idfTestedByPerson, 
									   @idfResultEnteredByOffice, 
									   @idfResultEnteredByPerson, 
									   @idfValidatedByOffice, 
									   @idfValidatedByPerson, 
									   @blnReadOnly, 
									   @blnNonLaboratoryTest, 
									   @blnExternalTest, 
									   @idfPerformedByOffice, 
									   @datReceivedDate, 
									   @strContactPerson, 
									   @strMaintenanceFlag,
									   @idfVectorNew
								 );
				
								 DELETE FROM @idfTestings
								 WHERE idfTesting = @rowId
						   END;
					 END
		 END
											
		IF @@TRANCOUNT > 0 AND @returnCode =0
			COMMIT
	END TRY

	BEGIN CATCH
			IF @@Trancount > 0
				ROLLBACK
				SET @returnCode = ERROR_NUMBER()
				SET @returnMsg = 
			   'ErrorNumber: ' + convert(varchar, ERROR_NUMBER() ) 
			   + ' ErrorSeverity: ' + convert(varchar, ERROR_SEVERITY() )
			   + ' ErrorState: ' + convert(varchar,ERROR_STATE())
			   + ' ErrorProcedure: ' + isnull(ERROR_PROCEDURE() ,'')
			   + ' ErrorLine: ' +  convert(varchar,isnull(ERROR_LINE() ,''))
			   + ' ErrorMessage: '+ ERROR_MESSAGE();
			   THROW;

	END CATCH

	SELECT 
		@returnCode AS ReturnCode
		,@returnMsg AS ReturnMessage

END
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList]...';


GO
-- ================================================================================================
-- Name: USP_VCTS_SURVEILLANCE_SESSION_GetList
--
-- Description: Gets a list of vector surveillance sessions filtered by various criteria.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/31/2018 Added additional search parameters
-- Maheshwar Deo	03/08/2019 Fixed filter for @DiseaseID
-- Stephen Long     07/19/2019 Added summary disease ID and join.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Added non-configurable site filtration rules.
-- Stephen Long     02/26/2020 Corrected all criteria where clauses; returned incorrect results.
-- Stephen Long     03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	10/16/2020 Added Outbreak's EIDSS ID
-- Doug Albanese	10/16/2020 Added Outbreak's Session Start Date
-- Doug Albanese	11/11/2020 Modified secondary filtering
-- Doug Albanese	11/20/2020 Added dblAlignment (Direction)
-- Stephen Long     11/27/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Added intRowStatus check on disease filtration insert rules.
-- Doug Albanese	01/21/2021 Change the WHERE claus to detect shared vector types so that it is 
--                             no so strict on records being returned.
-- Stephen Long     04/02/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	11/05/2021 Added group by surveillance session id to filtration 
--							   intermediate results so final cte join is correct.
-- Stephen Long     11/05/2021 Added vector type ID's and disease ID's to the query.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	07/04/2022 Fixed sorting by pointing to correct location tables in final query.
-- Mike Kornegay	07/05/2022 Fixed search by disease and vector type.
-- Mike Kornegay	08/03/2022 Add order by in final select and change location tables back to 
--                             inner join.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/06/2022 Move order by back to CTE row number partition for performance and 
--                             correct date clauses.
-- Stephen Long     01/09/2023 Updated for site filtration queries.
-- Mike Kornegay	01/31/2023 Correct joins in final result query.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList]
(
    @LanguageID NVARCHAR(50),
    @SessionID NVARCHAR(200) = NULL,
    @FieldSessionID NVARCHAR(200) = NULL,
    @StatusTypeID BIGINT = NULL,
    @VectorTypeID NVARCHAR(MAX) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @DiseaseGroupID NVARCHAR(MAX) = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @StartDateFrom DATETIME = NULL,
    @StartDateTo DATETIME = NULL,
    @EndDateFrom DATETIME = NULL,
    @EndDateTo DATETIME = NULL,
    @OutbreakKey BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'SessionID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT;
    DECLARE @lastRec INT;
    SET @firstRec = (@PageNumber - 1) * @PageSize
    SET @lastRec = (@PageNumber * @PageSize + 1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;

    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        -- ========================================================================================
        -- NO CONFIGURABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any configurable filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT vss.idfVectorSurveillanceSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbVectorSurveillanceSession vss
                LEFT JOIN tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs
            ) vectorTypeIDs
                LEFT JOIN dbo.tlbVector v
                    ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                       AND v.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                    ON vectorSubType.idfsReference = v.idfsVectorSubType
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs
            ) diseaseIDs
            WHERE vss.intRowStatus = 0
                  AND (
                          vss.idfsVectorSurveillanceStatus = @StatusTypeID
                          OR @StatusTypeID IS NULL
                      )
                  AND (
                          CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                          OR @VectorTypeID IS NULL
                      )
                  AND (
                          vectorSubType.idfsReference = @SpeciesTypeID
                          OR @SpeciesTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          vss.idfOUtBreak = @OutbreakKey
                          OR @OutbreakKey IS NULL
                      )
                  AND (
                          (
                              (
                                  CAST(vss.datStartDate AS DATE) >= @StartDateFrom
                                  AND @StartDateTo IS NULL
                              )
                              OR (
                                     CAST(vss.datStartDate AS DATE) <= @StartDateTo
                                     AND @StartDateFrom IS NULL
                                 )
                              OR (CAST(vss.datStartDate AS DATE)
                  BETWEEN @StartDateFrom AND @StartDateTo
                                 )
                          )
                          OR (
                                 @StartDateFrom IS NULL
                                 AND @StartDateTo IS NULL
                             )
                      )
                  AND (
                          (
                              (
                                  CAST(vss.datCloseDate AS DATE) >= @EndDateFrom
                                  AND @EndDateTo IS NULL
                              )
                              OR (
                                     CAST(vss.datCloseDate AS DATE) <= @EndDateTo
                                     AND @EndDateFrom IS NULL
                                 )
                              OR (CAST(vss.datCloseDate AS DATE)
                  BETWEEN @EndDateFrom AND @EndDateTo
                                 )
                          )
                          OR (
                                 @EndDateFrom IS NULL
                                 AND @EndDateTo IS NULL
                             )
                      )
                  AND (
                          vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                          OR @FieldSessionID IS NULL
                      )
                  AND (
                          CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                          OR @DiseaseID IS NULL
                      )
            GROUP BY vss.idfVectorSurveillanceSession;
        END
        ELSE
        BEGIN
            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));
            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply non-configurable filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            --
            -- Session data shall be available to all sites' organizations connected to the particular 
            -- session.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537019;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Collected and identified by organizations for any vectors/pools
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVector v
                        ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND v.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE vss.intRowStatus = 0
                      AND (
                              v.idfCollectedByOffice = @UserOrganizationID
                              OR v.idfIdentifiedByOffice = @UserOrganizationID
                          );

                -- Collected by and sent to organizations for any samples
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Tested by organization for any laboratory test
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN dbo.tlbTesting t
                        ON t.idfMaterial = m.idfMaterial
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND t.idfTestedByOffice = @UserOrganizationID
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Tested by organization for any field test
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN dbo.tlbPensideTest p
                        ON p.idfMaterial = m.idfMaterial
                           AND p.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND p.idfTestedByOffice = @UserOrganizationID
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Sent to organizations for any sample transfers
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537021;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT MAX(vss.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbMaterial m
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT tout
                        ON toutm.idfTransferOut = tout.idfTransferOut
                           AND tout.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537021
                WHERE vss.intRowStatus = 0
                      AND tout.idfSendToOffice = @UserOrganizationID
                GROUP BY vss.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Session data shall be available to all sites of the same administrative level.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537018;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537018;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the session was created.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tstSite s
                        ON vss.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the session location, if completed
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = vss.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of any vector location, if completed.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVector v
                        ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND v.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = v.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administration level specified in the rule of the location of any session summary record, if completed.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                        ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND vsss.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation AS l
                        ON l.idfGeoLocation = vsss.idfGeoLocation
                    INNER JOIN dbo.gisLocation AS g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules AS a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND sgs.idfsSite = vss.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbVectorSurveillanceSession vss
                    ON vss.idfVectorSurveillanceSession = ID
                LEFT JOIN tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIds
            ) vectorTypeIds
                LEFT JOIN dbo.tlbVector v
                    ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                       AND v.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                    ON vectorSubType.idfsReference = v.idfsVectorSubType
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs
            ) diseaseIDs
            WHERE (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
                  AND (
                          CHARINDEX(@VectorTypeID, vectorTypeIds) > 0
                          OR @VectorTypeID IS NULL
                      )
                  AND (
                          vectorSubType.idfsReference = @SpeciesTypeID
                          OR @SpeciesTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          vss.idfOUtBreak = @OutbreakKey
                          OR @OutbreakKey IS NULL
                      )
                  AND (
                          (
                              (
                                  CAST(vss.datStartDate AS DATE) >= @StartDateFrom
                                  AND @StartDateTo IS NULL
                              )
                              OR (
                                     CAST(vss.datStartDate AS DATE) <= @StartDateTo
                                     AND @StartDateFrom IS NULL
                                 )
                              OR (CAST(vss.datStartDate AS DATE)
                  BETWEEN @StartDateFrom AND @StartDateTo
                                 )
                          )
                          OR (
                                 @StartDateFrom IS NULL
                                 AND @StartDateTo IS NULL
                             )
                      )
                  AND (
                          (
                              (
                                  CAST(vss.datCloseDate AS DATE) >= @EndDateFrom
                                  AND @EndDateTo IS NULL
                              )
                              OR (
                                     CAST(vss.datCloseDate AS DATE) <= @EndDateTo
                                     AND @EndDateFrom IS NULL
                                 )
                              OR (CAST(vss.datCloseDate AS DATE)
                  BETWEEN @EndDateFrom AND @EndDateTo
                                 )
                          )
                          OR (
                                 @EndDateFrom IS NULL
                                 AND @EndDateTo IS NULL
                             )
                      )
                  AND (
                          vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                          OR @FieldSessionID IS NULL
                      )
                  AND (
                          CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                          OR @DiseaseID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                                   AND vsss.intRowStatus = 0
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                                   AND vssd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = vssd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE vss.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbVectorSurveillanceSession vss
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND vss.intRowStatus = 0
              AND oa.idfActor = egm.idfEmployeeGroup;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss
                ON vss.idfVectorSurveillanceSession = ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbVectorSurveillanceSession vss
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND vss.intRowStatus = 0
              AND oa.idfActor = @UserEmployeeID;

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                                   AND vsss.intRowStatus = 0
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                                   AND vssd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = vssd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE vss.intRowStatus = 0
                              AND oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = @UserEmployeeID
                    );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT vss.idfVectorSurveillanceSession
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = vss.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE vss.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbVectorSurveillanceSession vss
        WHERE vss.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = vss.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss
                ON vss.idfVectorSurveillanceSession = ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = vss.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vss.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbVectorSurveillanceSession vss
        WHERE vss.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = vss.idfsSite
        );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN @UserSitePermissions usp
                                ON usp.SiteID = vss.idfsSite
                        WHERE usp.Permission = 4 -- Deny permission
                              AND usp.PermissionTypeID = 10059003 -- Read permission
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss
                ON vss.idfVectorSurveillanceSession = res.ID
            LEFT JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            LEFT JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            LEFT JOIN tlbGeoLocation gl
                ON gl.idfGeoLocation = vss.idfLocation
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
            CROSS APPLY
        (
            SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs
        ) vectorTypeIDs
            LEFT JOIN dbo.tlbVector v
                ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND v.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                ON vectorSubType.idfsReference = v.idfsVectorSubType
            CROSS APPLY
        (
            SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs
        ) diseaseIDs
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
              AND (
                      CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                      OR @VectorTypeID IS NULL
                  )
              AND (
                      vectorSubType.idfsReference = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      vss.idfOUtBreak = @OutbreakKey
                      OR @OutbreakKey IS NULL
                  )
              AND (
                      (
                          (
                              CAST(vss.datStartDate AS DATE) >= @StartDateFrom
                              AND @StartDateTo IS NULL
                          )
                          OR (
                                 CAST(vss.datStartDate AS DATE) <= @StartDateTo
                                 AND @StartDateFrom IS NULL
                             )
                          OR (CAST(vss.datStartDate AS DATE)
              BETWEEN @StartDateFrom AND @StartDateTo
                             )
                      )
                      OR (
                             @StartDateFrom IS NULL
                             AND @StartDateTo IS NULL
                         )
                  )
              AND (
                      (
                          (
                              CAST(vss.datCloseDate AS DATE) >= @EndDateFrom
                              AND @EndDateTo IS NULL
                          )
                          OR (
                                 CAST(vss.datCloseDate AS DATE) <= @EndDateTo
                                 AND @EndDateFrom IS NULL
                             )
                          OR (CAST(vss.datCloseDate AS DATE)
              BETWEEN @EndDateFrom AND @EndDateTo
                             )
                      )
                      OR (
                             @EndDateFrom IS NULL
                             AND @EndDateTo IS NULL
                         )
                  )
              AND (
                      vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                      OR @FieldSessionID IS NULL
                  )
              AND (
                      CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                      OR @DiseaseID IS NULL
                  )
        GROUP BY ID;

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'SessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       vss.strSessionID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       vss.strSessionID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sessionStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SessionStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sessionStatusType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       vss.datStartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       vss.datStartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'CloseDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       vss.datCloseDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'CloseDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       vss.datCloseDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'VectorType'
                                                        AND @SortOrder = 'ASC' THEN
                                                       vectorTypes.vectorTypes
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'VectorType'
                                                        AND @SortOrder = 'DESC' THEN
                                                       vectorTypes.vectorTypes
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'Disease'
                                                        AND @SortOrder = 'ASC' THEN
                                                       diseases.diseases
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'Disease'
                                                        AND @SortOrder = 'DESC' THEN
                                                       diseases.diseases
                                               END DESC
                                     ) AS ROWNUM,
                   idfVectorSurveillanceSession AS SessionKey,
                   strSessionID AS SessionID,
                   vss.strFieldSessionID AS FieldSessionID,
                   vss.idfOUtBreak AS OutbreakKey,
                   o.strOutbreakID AS OutbreakID,
                   o.datStartDate AS OutbreakStartDate,
                   vectorTypeIDs.vectorTypeIDs AS VectorTypeIDs,
                   vectorTypes.vectorTypes AS Vectors,
                   diseaseIDs.diseaseIDs AS DiseaseIDs,
                   diseases.diseases AS Diseases,
                   statusType.name AS StatusTypeName,
                   lh.AdminLevel2Name AS AdministrativeLevel1Name,
                   lh.AdminLevel3Name AS AdministrativeLevel2Name,
                   lh.AdminLevel4Name AS SettlementName,
                   gl.dblLatitude AS Latitude,
                   gl.dblLongitude AS Longitude,
                   vss.datStartDate AS StartDate,
                   vss.datCloseDate AS CloseDate,
                   vss.idfsSite AS SiteID,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   COUNT(*) OVER () AS RecordCount,
                   (
                       SELECT COUNT(*)
                       FROM dbo.tlbVectorSurveillanceSession
                       WHERE intRowStatus = 0
                   ) AS TotalCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbVectorSurveillanceSession vss
                    ON vss.idfVectorSurveillanceSession = res.ID
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000133) sessionStatusType
                    ON sessionStatusType.idfsReference = vss.idfsVectorSurveillanceStatus
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                INNER JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = g.idfsLocation
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseases
            ) diseases
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPENAMES_GET(vss.idfVectorSurveillanceSession, @LanguageID) vectorTypes
            ) vectorTypes
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs
            ) diseaseIDs
                CROSS APPLY
            (
                SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs
            ) vectorTypeIDs
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000133) statusType
                    ON statusType.idfsReference = vss.idfsVectorSurveillanceStatus
                LEFT JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = vss.idfOutbreak
                       AND o.intRowStatus = 0
           )
        SELECT SessionKey,
               SessionID,
               FieldSessionID,
               OutbreakKey,
               OutbreakID,
               OutbreakStartDate,
               VectorTypeIDs,
               Vectors,
               DiseaseIDs,
               Diseases,
               StatusTypeName,
               AdministrativeLevel1Name,
               AdministrativeLevel2Name,
               SettlementName,
               Latitude,
               Longitude,
               StartDate,
               CloseDate,
               SiteID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RecordCount,
               TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0)
        FROM paging
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        ORDER BY CASE
                     WHEN @SortColumn = 'SessionID'
                          AND @SortOrder = 'ASC' THEN
                         SessionID
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'SessionID'
                          AND @SortOrder = 'DESC' THEN
                         SessionID
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'SessionStatusTypeName'
                          AND @SortOrder = 'ASC' THEN
                         StatusTypeName
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'SessionStatusTypeName'
                          AND @SortOrder = 'DESC' THEN
                         StatusTypeName
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'StartDate'
                          AND @SortOrder = 'ASC' THEN
                         StartDate
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'StartDate'
                          AND @SortOrder = 'DESC' THEN
                         StartDate
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'CloseDate'
                          AND @SortOrder = 'ASC' THEN
                         CloseDate
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'CloseDate'
                          AND @SortOrder = 'DESC' THEN
                         CloseDate
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'AdministrativeLevel1Name'
                          AND @SortOrder = 'ASC' THEN
                         AdministrativeLevel2Name
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'AdministrativeLevel1Name'
                          AND @SortOrder = 'DESC' THEN
                         AdministrativeLevel2Name
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'AdministrativeLevel2Name'
                          AND @SortOrder = 'ASC' THEN
                         SettlementName
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'AdministrativeLevel2Name'
                          AND @SortOrder = 'DESC' THEN
                         SettlementName
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'VectorType'
                          AND @SortOrder = 'ASC' THEN
                         Vectors
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'VectorType'
                          AND @SortOrder = 'DESC' THEN
                         Vectors
                 END DESC,
                 CASE
                     WHEN @SortColumn = 'Disease'
                          AND @SortOrder = 'ASC' THEN
                         Diseases
                 END ASC,
                 CASE
                     WHEN @SortColumn = 'Disease'
                          AND @SortOrder = 'DESC' THEN
                         Diseases
                 END DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_VET_DISEASE_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_GETList
--
-- Description:	Get disease list for the farm edit/enter and other use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     03/25/2018 Initial release.
-- Stephen Long     11/09/2018 Added FarmOwnerID and FarmOwnerName for lab use case 10.
-- Stephen Long     11/25/2018 Updated for the new API.
-- Stephen Long     12/31/2018 Added pagination logic.
-- Stephen Long     04/24/2019 Added advanced search parameters to sync up with use case VUC10.
-- Stephen Long     04/29/2019 Added related to veterinary disease report fields for use case VUC11 
--                             and VUC12.
-- Stephen Long     06/14/2019 Adjusted date from's and to's to be cast as just dates with no time.
-- Stephen Long     06/22/2019 Fix to the farm address logic (building, apartment, house IIF's 
--                             to case statements).
-- Stephen Long     06/25/2019 Add group by for joins with multiple records (such as samples).
-- Stephen Long     07/20/2019 Changed farm inventory counts to ISNULL.
-- Stephen Long     09/03/2019 Add active status check on species list.
-- Ann Xiong		12/05/2019 Added EIDSSPersonID to select list and replaced "ON 
--                             caseType.idfsReference = vc.idfsCaseReportType" with 
--                             "caseType.idfsReference = vc.idfsCaseType".
-- Ann Xiong		12/10/2019 Added a parameter @PersonID NVARCHAR(200) = NULL.
-- Ann Xiong		12/19/2019 Added EIDSSFarmID to select list
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     01/28/2020 Added non-configurable filtration rules, and legacy report ID.
-- Stephen Long     02/03/2020 Added dbo prefix and changed non-configurable filtration comments.
-- Stephen Long     02/16/2020 Removed group by and pagination applied on final query.
-- Stephen Long     02/26/2020 Added data entry site ID parameter and where clause.
-- Stephen Long     03/04/2020 Corrected where clause on total count for null species type.
-- Stephen Long     03/17/2020 Corrected farm owner ID to use idfHuman instead of idfHumanActual.
-- Stephen Long     03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to the EIDSS identifier like criteria.
-- Stephen Long     07/08/2020 Replaced common table experssion; was not working well with POCO.
-- Stephen Long     09/24/2020 Update address fields returned (settlement, rayon and region only).
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/23/2020 Added configurable site filtration rules.
-- Stephen Long     11/25/2020 Modified for new permission fields on the AccessRule table.
-- Stephen Long     11/28/2020 Add index to table variable primary key.
-- Stephen Long     12/02/2020 Remove primary key from table variable IDs.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/23/2020 Added EIDSS session ID parameter and where clause criteria.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2021 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     01/05/2021 Removed species list sub-query due to performance.  New stored 
--                             procedure added to get species list when user expands disease 
--                             report row in search.
-- Stephen Long     01/06/2021 Added string aggregate function on species list and parameter to 
--                             include.
-- Stephen Long     01/25/2021 Added order by parameter to handle when a user selected a specific 
--                             column to sort by.
-- Stephen Long     01/27/2021 Fix for order by; alias will not work on order by with case.
-- Stephen Long     04/02/2021 Added updated pagination and location hierarchy.
-- Stephen Long     01/11/2022 Added farm owner (idfHuman) ID to the query and updated location 
--                             hierarchy.
-- Mike Kornegay	01/26/2022 Changed RecordCount to TotalRowCount to match BaseModel.
-- Stephen Long     03/29/2022 Added disease ID to the model for laboratory module, and corrected 
--                             site filtration.
-- Ann Xiong		04/25/2022 Added f.idfFarm to select list for Veterinary Disease Report 
--                             Deduplication.
-- Stephen Long     05/10/2022 Added report category type ID to the query.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	08/28/2022 Changed FarmAddress to FarmLocation and added FarmLocation.
-- Mike Kornegay    08/31/2022 Corrected sort by adding order by to final query.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Doug Albanese    01/11/2023 Modifying so that the same SP can bring back Ou
-- Stephen Long     01/13/2023 Updated for site filtration queries.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_GETList]
	@LanguageID NVARCHAR(50)
	,@ReportKey BIGINT = NULL
	,@ReportID NVARCHAR(200) = NULL
	,@LegacyReportID NVARCHAR(200) = NULL
	,@SessionKey BIGINT = NULL
	,@FarmMasterID BIGINT = NULL
	,@DiseaseID BIGINT = NULL
	,@ReportStatusTypeID BIGINT = NULL
	,@AdministrativeLevelID BIGINT = NULL
	,@DateEnteredFrom DATE = NULL
	,@DateEnteredTo DATE = NULL
	,@ClassificationTypeID BIGINT = NULL
	,@PersonID NVARCHAR(200) = NULL
	,@ReportTypeID BIGINT = NULL
	,@SpeciesTypeID BIGINT = NULL
	,@OutbreakCasesIndicator BIT = 0
	,@DiagnosisDateFrom DATE = NULL
	,@DiagnosisDateTo DATE = NULL
	,@InvestigationDateFrom DATE = NULL
	,@InvestigationDateTo DATE = NULL
	,@LocalOrFieldSampleID NVARCHAR(200) = NULL
	,@TotalAnimalQuantityFrom INT = NULL
	,@TotalAnimalQuantityTo INT = NULL
	,@SessionID NVARCHAR(200) = NULL
	,@DataEntrySiteID BIGINT = NULL
	,@UserSiteID BIGINT
	,@UserOrganizationID BIGINT
	,@UserEmployeeID BIGINT
	,@ApplySiteFiltrationIndicator BIT = 0
	,@IncludeSpeciesListIndicator BIT = 0
	,@SortColumn NVARCHAR(30) = 'ReportID'
	,@SortOrder NVARCHAR(4) = 'DESC'
	,@PageNumber INT = 1
	,@PageSize INT = 10
	,@OutbreakCaseReportOnly INT = 0
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @firstRec INT;
    DECLARE @lastRec INT;

    SET @firstRec = (@PageNumber - 1) * @PageSize;
    SET @lastRec = (@PageNumber * @PageSize + 1);

	DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

	BEGIN TRY
	        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

	    IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

		IF @AdministrativeLevelID IS NOT NULL
		BEGIN
			SELECT @AdministrativeLevelNode = node
			FROM dbo.gisLocation
			WHERE idfsLocation = @AdministrativeLevelID;
		END;

        -- ========================================================================================
        -- NO CONFIGURABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
		IF @ApplySiteFiltrationIndicator = 0
		BEGIN
			INSERT INTO @Results
			SELECT v.idfVetCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY v.idfVetCase;
		END
		ELSE
		BEGIN
		INSERT INTO @Results
			SELECT v.idfVetCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND v.idfsSite = @UserSiteID 
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY v.idfVetCase;

			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL
				,ReadPermissionIndicator INT NOT NULL
				,AccessToPersonalDataPermissionIndicator INT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL
				,WritePermissionIndicator INT NOT NULL
				,DeletePermissionIndicator INT NOT NULL
				,INDEX IDX_ID(ID)
				);

            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply active default filtration rules for third level sites.
            -- =======================================================================================
			DECLARE @RuleActiveStatus INT = 0;
			DECLARE @AdministrativeLevelTypeID INT;
			DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
			DECLARE @DefaultAccessRules TABLE (
				AccessRuleID BIGINT NOT NULL,
				ActiveIndicator INT NOT NULL
				,ReadPermissionIndicator INT NOT NULL
				,AccessToPersonalDataPermissionIndicator INT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL
				,WritePermissionIndicator INT NOT NULL
				,DeletePermissionIndicator INT NOT NULL
				,AdministrativeLevelTypeID INT NULL
				);

			INSERT INTO @DefaultAccessRules
			SELECT AccessRuleID
			    ,a.intRowStatus
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
				,a.AdministrativeLevelTypeID
			FROM dbo.AccessRule a
			WHERE DefaultRuleIndicator = 1;

			--
			-- Report data shall be available to all sites of the same administrative level 
			-- specified in the rule.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537009;

			IF @RuleActiveStatus = 0
			BEGIN
				SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				FROM @DefaultAccessRules
				WHERE AccessRuleID = 10537009;

				SELECT @OrganizationAdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				FROM dbo.tlbOffice o
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				WHERE o.idfOffice = @UserOrganizationID
					AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

				-- Administrative level specified in the rule of the site where the report was created.
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstSite s ON v.idfsSite = s.idfsSite
				INNER JOIN dbo.tlbOffice o ON o.idfOffice = s.idfOffice
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537009
				WHERE v.intRowStatus = 0
					AND (
						v.idfsCaseType = @SpeciesTypeID
						OR @SpeciesTypeID IS NULL
						)
					AND (
						(
							CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
								AND @DateEnteredTo
							)
						OR (
							@DateEnteredFrom IS NULL
							OR @DateEnteredTo IS NULL
							)
						)
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

				-- Administrative level specified in the rule of the farm address.
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
				INNER JOIN dbo.tlbGeoLocation l ON l.idfGeoLocation = f.idfFarmAddress
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537009
				WHERE v.intRowStatus = 0
					AND (
						v.idfsCaseType = @SpeciesTypeID
						OR @SpeciesTypeID IS NULL
						)
					AND (
						(
							CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
								AND @DateEnteredTo
							)
						OR (
							@DateEnteredFrom IS NULL
							OR @DateEnteredTo IS NULL
							)
						)
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
			END;

			--
			-- Report data shall be available to all sites' organizations connected to the particular report.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537010;

			IF @RuleActiveStatus = 0
			BEGIN
				-- Investigated and reported by organizations
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE (v.intRowStatus = 0)
					AND (
						v.idfInvestigatedByOffice = @UserOrganizationID
						OR v.idfReportedByOffice = @UserOrganizationID
						);

				-- Sample collected by and sent to organizations
				INSERT INTO @FilteredResults
				SELECT MAX(m.idfVetCase)
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbMaterial m
				INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = m.idfVetCase
					AND v.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE m.intRowStatus = 0
					AND (
						m.idfFieldCollectedByOffice = @UserOrganizationID
						OR m.idfSendToOffice = @UserOrganizationID
						)
				GROUP BY m.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator;

				-- Sample transferred to organizations
				INSERT INTO @FilteredResults
				SELECT MAX(m.idfVetCase)
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbMaterial m
				INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = m.idfVetCase
					AND v.intRowStatus = 0
				INNER JOIN dbo.tlbTransferOutMaterial tom ON m.idfMaterial = tom.idfMaterial
					AND tom.intRowStatus = 0
				INNER JOIN dbo.tlbTransferOUT t ON tom.idfTransferOut = t.idfTransferOut
					AND t.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE m.intRowStatus = 0
					AND t.idfSendToOffice = @UserOrganizationID
				GROUP BY m.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator;
			END;

			--
			-- Report data shall be available to the sites with the connected outbreak, if the report 
			-- is the primary report/session for an outbreak.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537011;

			IF @RuleActiveStatus = 0
			BEGIN
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbOutbreak o ON v.idfVetCase = o.idfPrimaryCaseOrSession
					AND o.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537011
				WHERE v.intRowStatus = 0
					AND o.idfsSite = @UserSiteID
			END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND sgs.idfsSite = v.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
			FROM @FilteredResults
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator;
		END;

		-- =======================================================================================
		-- DISEASE FILTRATION RULES
		--
		-- Apply disease filtration rules from use case SAUC62.
		-- =======================================================================================
		-- 
		-- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
		-- as all records have been pulled above with or without site filtration rules applied.
		--
		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT v.idfVetCase
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1
					AND oa.idfActor = - 506 -- Default role
				);

		--
		-- Apply level 1 disease filtration rules for an employee's associated user group(s).  
		-- Allows and denies will supersede level 0.
		--
		INSERT INTO @Results
		SELECT v.idfVetCase
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbVetCase v
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
			AND egm.intRowStatus = 0
		INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
		WHERE oa.intPermission = 2 -- Allow permission
			AND v.intRowStatus = 0
			AND oa.idfActor = egm.idfEmployeeGroup
			AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
		GROUP BY v.idfVetCase;

		DELETE res
		FROM @Results res
		INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
		INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
			AND egm.intRowStatus = 0
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		WHERE oa.intPermission = 1
			AND oa.idfsObjectType = 10060001 -- Disease
			AND oa.idfActor = egm.idfEmployeeGroup;

		--
		-- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
		-- will supersede level 1.
		--
		INSERT INTO @Results
		SELECT v.idfVetCase
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbVetCase v
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
		WHERE oa.intPermission = 2 -- Allow permission
			AND v.intRowStatus = 0
			AND oa.idfsObjectType = 10060001 -- Disease
			AND oa.idfActor = @UserEmployeeID
			AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
		GROUP BY v.idfVetCase;

		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT v.idfVetCase
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1 -- Deny permission
					AND oa.idfsObjectType = 10060001 -- Disease
					AND oa.idfActor = @UserEmployeeID
				);

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT vc.idfVetCase
            FROM dbo.tlbVetCase vc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = vc.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE vc.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT vc.idfVetCase,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbVetCase vc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vc.idfsSite
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE vc.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = vc.idfsSite
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbVetCase vc
                ON vc.idfVetCase = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = vc.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT vc.idfVetCase,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = vc.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbVetCase vc
        WHERE vc.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = vc.idfsSite
        );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT vc.idfVetCase
            FROM dbo.tlbVetCase vc
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = vc.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

		-- ========================================================================================
		-- FINAL QUERY, PAGINATION AND COUNTS
		-- ========================================================================================
		INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
		    INNER JOIN dbo.tlbVetCase v 
			    ON v.idfVetCase = res.ID 
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
					AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
        GROUP BY ID;

		WITH paging
		AS (SELECT 
				ID,
				c = COUNT(*) OVER()
			FROM @FinalResults res
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease ON disease.idfsReference = v.idfsFinalDiagnosis
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) caseClassification ON caseClassification.idfsReference = v.idfsCaseClassification
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus ON reportStatus.idfsReference = v.idfsCaseProgressStatus
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType ON reportType.idfsReference = v.idfsCaseReportType
			ORDER BY 
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN v.strCaseID END ASC,
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN v.strCaseID END DESC,
				CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN v.datEnteredDate END ASC,
				CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN v.datEnteredDate END DESC,
				CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'ASC' THEN disease.name END ASC,
				CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'DESC' THEN disease.name END DESC,
				CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'ASC' THEN f.strNationalName END ASC,
				CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'DESC' THEN f.strNationalName END DESC,
				CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'ASC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END ASC,
				CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'DESC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END DESC,
				CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'ASC' THEN caseClassification.name END ASC,
				CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'DESC' THEN caseClassification.name END DESC,
				CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'ASC' THEN reportStatus.name END ASC,
				CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'DESC' THEN reportStatus.name END DESC,
				CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'ASC' THEN reportType.name END ASC,
				CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'DESC' THEN reportType.name END DESC
				OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY)
		SELECT res.ID AS ReportKey,
			CASE @OutbreakCaseReportOnly
			   WHEN 0 THEN v.strCaseID 
			   WHEN 1 THEN ocr.strOutbreakCaseID
			END AS ReportID
			,v.idfOutbreak AS OutbreakKey
			,o.strOutbreakID AS OutbreakID
			,v.idfsCaseType AS ReportCategoryTypeID
			,reportStatus.name AS ReportStatusTypeName
			,reportType.name AS ReportTypeName
			,caseType.name AS SpeciesTypeName
			,caseClassification.name AS ClassificationTypeName
			,v.datReportDate AS ReportDate
			,v.datInvestigationDate AS InvestigationDate
			,v.idfsFinalDiagnosis AS DiseaseID 
			,finalDiagnosis.name AS DiseaseName
			,v.datFinalDiagnosisDate AS FinalDiagnosisDate
			,ISNULL(personInvestigatedBy.strFamilyName, N'') + ISNULL(', ' + personInvestigatedBy.strFirstName, '') + ISNULL(' ' + personInvestigatedBy.strSecondName, '') AS InvestigatedByPersonName
			,ISNULL(personReportedBy.strFamilyName, N'') + ISNULL(', ' + personReportedBy.strFirstName, '') + ISNULL(' ' + personReportedBy.strSecondName, '') AS ReportedByPersonName
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockSickAnimalQty, '0')
					ELSE ISNULL(f.intAvianSickAnimalQty, '0')
					END
				) AS TotalSickAnimalQuantity
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockTotalAnimalQty, '0')
					ELSE ISNULL(f.intAvianTotalAnimalQty, '0')
					END
				) AS TotalAnimalQuantity
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockDeadAnimalQty, '0')
					ELSE ISNULL(f.intAvianDeadAnimalQty, '0')
					END
				) AS TotalDeadAnimalQuantity
			,(
				CASE 
					WHEN @IncludeSpeciesListIndicator = 1
						THEN (
								SELECT STRING_AGG(speciesType.name, ', ') WITHIN
								GROUP (
										ORDER BY speciesType.name
										) AS Result
								FROM dbo.tlbSpecies s
								INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType ON speciesType.idfsReference = s.idfsSpeciesType
								INNER JOIN dbo.tlbHerd h ON h.idfHerd = s.idfHerd
									AND h.intRowStatus = 0
									AND h.idfFarm = v.idfFarm
								WHERE s.intRowStatus = 0
								)
					ELSE ''
					END
				) AS SpeciesList
			,f.strFarmCode AS FarmID
			,f.idfFarmActual AS FarmMasterKey
			,f.strNationalName AS FarmName
			,f.idfHuman AS FarmOwnerKey
			,haai.EIDSSPersonID AS FarmOwnerID
			,ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, '') + ISNULL(' ' + h.strSecondName, '') AS FarmOwnerName
			,(lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) AS FarmLocation
			,dbo.FN_GBL_CreateAddressString	(ISNULL(lh.AdminLevel4Name, N''), ISNULL(lh.AdminLevel3Name, N''), ISNULL(lh.AdminLevel2Name, N''), '', '', '', '', '', '', '',0,'') AS FarmAddress
			,v.datEnteredDate AS EnteredDate
			,ISNULL(personEnteredBy.strFamilyName, N'') + ISNULL(', ' + personEnteredBy.strFirstName, '') + ISNULL(' ' + personEnteredBy.strSecondName, '') AS EnteredByPersonName
			,v.idfsSite AS SiteKey
			,f.idfFarm,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator
			,c AS TotalRowCount
			,(
				SELECT COUNT(*)
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
					AND f.intRowStatus = 0
				WHERE v.intRowStatus = 0
					AND (
						(v.idfsCaseType = @SpeciesTypeID)
						OR @SpeciesTypeID IS NULL
						)
				) AS TotalCount
			,TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
			,CurrentPage = @PageNumber
		FROM paging 
			INNER JOIN @FinalResults res ON res.ID = paging.ID
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbPerson personInvestigatedBy ON personInvestigatedBy.idfPerson = v.idfPersonInvestigatedBy
			LEFT JOIN dbo.tlbPerson personEnteredBy ON personEnteredBy.idfPerson = v.idfPersonEnteredBy
			LEFT JOIN dbo.tlbPerson personReportedBy ON personReportedBy.idfPerson = v.idfPersonReportedBy
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
			LEFT JOIN dbo.tlbOutbreak o ON o.idfOutbreak = v.idfOutbreak
				AND o.intRowStatus = 0
			LEFT JOIN dbo.OutbreakCaseReport ocr ON ocr.idfOutbreak = v.idfOutbreak 
			   AND ocr.idfVetCase IS NOT NULL 	
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) finalDiagnosis ON finalDiagnosis.idfsReference = v.idfsFinalDiagnosis
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) caseClassification ON caseClassification.idfsReference = v.idfsCaseClassification
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus ON reportStatus.idfsReference = v.idfsCaseProgressStatus
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType ON reportType.idfsReference = v.idfsCaseReportType
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000012) caseType ON caseType.idfsReference = v.idfsCaseType
		 WHERE 
			(v.strCaseID IS NOT NULL AND @OutbreakCaseReportOnly = 0) OR
			(ocr.strOutbreakCaseID IS NOT NULL AND @OutbreakCaseReportOnly = 1)
		ORDER BY 
			CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN v.strCaseID END ASC,
			CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN v.strCaseID END DESC,
			CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN v.datEnteredDate END ASC,
			CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN v.datEnteredDate END DESC,
			CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'ASC' THEN finalDiagnosis.name END ASC,
			CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'DESC' THEN finalDiagnosis.name END DESC,
			CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'ASC' THEN f.strNationalName END ASC,
			CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'DESC' THEN f.strNationalName END DESC,
			CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'ASC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END ASC,
			CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'DESC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END DESC,
			CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'ASC' THEN caseClassification.name END ASC,
			CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'DESC' THEN caseClassification.name END DESC,
			CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'ASC' THEN reportStatus.name END ASC,
			CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'DESC' THEN reportStatus.name END DESC,
			CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'ASC' THEN reportType.name END ASC,
			CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'DESC' THEN reportType.name END DESC;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_VET_FARM_MASTER_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_VET_FARM_MASTER_GETDetail
--
-- Description:	Get farm details for a specific farm master or farm record.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/06/2019 Initial release.
-- Stephen Long     04/29/2019 Added audit create date as entered date.
-- Stephen Long     06/22/2019 Fix to the farm address logic (building, apartment, house IIF's 
--                             to case statements).
-- Stephen Long     08/19/2019 Change farm owner name/ID to use personal ID instead of the EIDSS 
--                             person ID.
-- Ann Xiong        09/26/2019 Change FarmOwnerID to return ha.strPersonID instead of 
--                             fa.idfHumanActual, 
--                             add script to return CountryName.
-- Ann Xiong        10/07/2019 Added script to select CountryName, SettlementTypeName, and 
--                             idfsSettlementType.
-- Stephen Long     10/11/2019 Added EIDSSFarmOwnerID for the personal ID, and farm owner ID as the 
--                             human actual ID as the farm add/update user control relies on this 
--                             value.
-- Stephen Long     11/21/2019 Added source system name ID to the model.
-- Stephen Long     06/24/2020 Since the data for farm category in 6.1 is not populated, added code 
--                             to determine farm type based on accessory code.
-- Stephen Long     01/23/2022 Updated for location hierarchy.
-- Mike Kornegay	02/20/2022 Added number of buildings, birds per building, and avian farm type.
-- Mike Kornegay	02/21/2022 Added LocationID.
-- Mike Kornegay	03/10/2022 Added subquery to get the FarmId from tlbFarm if it exists.
-- Stephen Long     05/10/2022 Added additional check for farm type ID.
-- Ann Xiong        02/28/2023 Set migrated record's EnteredDate blank since no equivalent field in v 6.1 Farm record. 
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_FARM_MASTER_GETDetail]
(
    @LanguageID NVARCHAR(50),
    @FarmMasterID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @AccessoryCode INT = NULL,
                @FarmTypeID BIGINT = NULL,
                @LanguageCode BIGINT = dbo.FN_GBL_LanguageCode_Get(@LanguageID)

        SELECT fa.idfFarmActual AS FarmMasterID,
               (CASE
                    WHEN fa.idfsFarmCategory = 10040007
                         OR (fa.intHACode = 32 AND fa.idfsFarmCategory IS NULL) THEN
                        10040007
                    WHEN fa.idfsFarmCategory = 10040003
                         OR (fa.intHACode = 64 AND fa.idfsFarmCategory IS NULL) THEN
                        10040003
                    ELSE
                        10040001
                END
               ) AS FarmTypeID,
               (CASE
                    WHEN idfsFarmCategory = 10040007
                         OR (fa.intHACode = 32 AND fa.idfsFarmCategory IS NULL) THEN
                        dbo.FN_GBL_ReferenceValue_GET(@LanguageCode, 10040007)
                    WHEN idfsFarmCategory = 10040003
                         OR (fa.intHACode = 64 AND fa.idfsFarmCategory IS NULL) THEN
                        dbo.FN_GBL_ReferenceValue_GET(@LanguageCode, 10040003)
                    ELSE
                        dbo.FN_GBL_ReferenceValue_GET(@LanguageCode, 10040001)
                END
               ) AS FarmTypeName,
			   (SELECT TOP 1 idfFarm FROM tlbFarm WHERE idfFarmActual = fa.idfFarmActual) AS FarmID,
               fa.idfsOwnershipStructure AS OwnershipStructureTypeID,
               ha.strPersonID AS EIDSSFarmOwnerID,
               fa.idfHumanActual AS FarmOwnerID,
               haai.EIDSSPersonID,
               ISNULL(ha.strLastName, N'') + ISNULL(', ' + ha.strFirstName, '') + ISNULL(' ' + ha.strSecondName, '')
               + ISNULL(' ' + CHAR(150) + ' ' + ha.strPersonID, '') AS FarmOwner,
               ha.strLastName AS FarmOwnerLastName,
               ha.strFirstName AS FarmOwnerFirstName,
               ha.strSecondName AS FarmOwnerSecondName,
               (CASE
                    WHEN fa.strNationalName IS NULL THEN
                        fa.strInternationalName
                    WHEN fa.strNationalName = '' THEN
                        fa.strInternationalName
                    ELSE
                        fa.strNationalName
                END
               ) AS FarmName,
               fa.strFarmCode AS EIDSSFarmID,
               fa.strFax AS Fax,
               fa.strEmail AS Email,
               fa.strContactPhone AS Phone,
               fa.intLivestockTotalAnimalQty AS TotalLivestockAnimalQuantity,
               fa.intAvianTotalAnimalQty AS TotalAvianAnimalQuantity,
               fa.intLivestockSickAnimalQty AS SickLivestockAnimalQuantity,
               fa.intAvianSickAnimalQty AS SickAvianAnimalQuantity,
               fa.intLivestockDeadAnimalQty AS DeadLivestockAnimalQuantity,
               fa.intAvianDeadAnimalQty AS DeadAvianAnimalQuantity,
               fa.strNote AS Note,
               fa.intRowStatus AS RowStatus,
               fa.datModificationDate AS ModifiedDate,
               (CASE
                    WHEN fa.SourceSystemNameID = 10519002 THEN
                        NULL
                    ELSE
                        fa.AuditCreateDTM
                END
               ) AS EnteredDate,
               fa.idfFarmAddress AS FarmAddressID,
               fa.SourceSystemNameID,
               lh.idfsLocation AS FarmAddressLocationID,
			   lh.AdminLevel1ID AS FarmAddressAdministrativeLevel0ID,
               lh.AdminLevel1Name AS FarmAddressAdministrativeLevel0Name,
               lh.AdminLevel2ID AS FarmAddressAdministrativeLevel1ID,
               lh.AdminLevel2Name AS FarmAddressAdministrativeLevel1Name,
               lh.AdminLevel3ID AS FarmAddressAdministrativeLevel2ID,
               lh.AdminLevel3Name AS FarmAddressAdministrativeLevel2Name,
               lh.AdminLevel4ID AS FarmAddressAdministrativeLevel3ID,
               lh.AdminLevel4Name AS FarmAddressAdministrativeLevel3Name,
               settlement.idfsReference AS FarmAddressSettlementID,
               settlement.name AS FarmAddressSettlementName,
               settlementType.idfsReference AS FarmAddressSettlementTypeID,
               settlementType.name AS FarmAddressSettlementTypeName,
               pc.idfPostalCode AS FarmAddressPostalCodeID, 
               gls.strPostCode AS FarmAddressPostalCode,
               st.idfStreet AS FarmAddressStreetID, 
               gls.strStreetName AS FarmAddressStreetName,
               gls.strBuilding AS FarmAddressBuilding,
               gls.strApartment AS FarmAddressApartment,
               gls.strHouse AS FarmAddressHouse,
               gls.dblLatitude AS FarmAddressLatitude,
               gls.dblLongitude AS FarmAddressLongitude,
               (CONVERT(NVARCHAR(100), gls.dblLatitude) + ', ' + CONVERT(NVARCHAR(100), gls.dblLongitude)) AS Coordinates,
               dbo.FN_GBL_CreateAddressString(
                                                 ISNULL(lh.AdminLevel1Name, ''),
                                                 ISNULL(lh.AdminLevel2Name, ''),
                                                 ISNULL(lh.AdminLevel3Name, ''),
                                                 ISNULL(gls.strPostCode, ''),
                                                 '',
                                                 '',
                                                 ISNULL(gls.strStreetName, ''),
                                                 ISNULL(gls.strHouse, ''),
                                                 ISNULL(gls.strBuilding, ''),
                                                 ISNULL(gls.strApartment, ''),
                                                 gls.blnForeignAddress,
                                                 ISNULL(gls.strForeignAddress, '')
                                             ) AS AddressString,
			   fa.intBirdsPerBuilding as NumberOfBirdsPerBuilding,
			   fa.intBuidings as NumberOfBuildings,
			   fa.idfsAvianFarmType as AvianFarmTypeID,
			   fa.idfsAvianProductionType as AvianProductionTypeID
        FROM dbo.tlbFarmActual fa
            LEFT JOIN dbo.tlbHumanActual AS ha
                ON ha.idfHumanActual = fa.idfHumanActual
                   AND ha.intRowStatus = 0
            LEFT JOIN dbo.HumanActualAddlInfo AS haai
                ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                   AND haai.intRowStatus = 0
            LEFT OUTER JOIN dbo.tlbGeoLocationShared gls
                ON fa.idfFarmAddress = gls.idfGeoLocationShared
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gls.idfsLocation
            LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                ON lh.idfsLocation = g.idfsLocation
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) settlement
                ON g.node.IsDescendantOf(settlement.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_Reference(@LanguageID, 19000005) settlementType
                ON settlementType.idfsReference = settlement.idfsType
            LEFT JOIN dbo.tlbStreet st
                ON st.strStreetName = gls.strStreetName
            LEFT JOIN dbo.tlbPostalCode pc
                ON pc.strPostCode = gls.strPostCode
        WHERE fa.idfFarmActual = @FarmMasterID;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_TEST_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VET_TEST_GETList
--
-- Description:	Gets laboratory field test records for the disease report use cases.
--                      
-- Revision History:
-- Name                     Date       Change Detail
-- ------------------------ ---------- -----------------------------------------------------------
-- Stephen Long             11/30/2021 Initial release.
-- Stephen Long             01/12/2022 Added order by cases and updated pagination logic.
-- Stephen Long             01/24/2022 Added original test result type for SAUC55/56 to determine 
--                                     which notification to log when result is new verses amended.
-- Mike Kornegay			02/02/2022 Added sent date from material table
-- Stephen Long             02/02/2022 Added root sample ID to the query.
-- Stephen Long             01/04/2023 Added check for deleted test status.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_TEST_GETList] (
	@LanguageID NVARCHAR(50)
	,@PageNumber INT = 1
	,@PageSize INT = 10
	,@SortColumn NVARCHAR(30) = 'TestNameTypeName'
	,@SortOrder NVARCHAR(4) = 'ASC'
	,@DiseaseReportID BIGINT
	)
AS
BEGIN
	DECLARE @firstRec INT
		,@lastRec INT;

	SET @firstRec = (@PageNumber - 1) * @PageSize;
	SET @lastRec = (@PageNumber * @PageSize + 1);

	SET NOCOUNT ON;

	BEGIN TRY
		SELECT TestID
			,TestNameTypeID
			,TestNameTypeName
			,TestCategoryTypeID
			,TestCategoryTypeName
			,TestResultTypeID
			,OriginalTestResultTypeID
			,TestResultTypeName
			,TestStatusTypeID
			,TestStatusTypeName
			,DiseaseID
			,DiseaseName
			,SampleID
			,RootSampleID 
			,EIDSSLocalOrFieldSampleID
			,EIDSSLaboratorySampleID
			,SampleTypeName
			,SpeciesID
			,SpeciesTypeName
			,AnimalID
			,EIDSSAnimalID
			,BatchTestID
			,ObservationID
			,TestNumber
			,Comments
			,StartedDate
			,ResultDate
			,SentDate
			,TestedByOrganizationID
			,TestedByPersonID
			,TestedByPersonName
			,ResultEnteredByOrganizationID
			,ResultEnteredByPersonID
			,ResultEnteredByPersonName
			,ValidatedByOrganizationID
			,ValidatedByPersonID
			,ValidatedByPersonName
			,ReadOnlyIndicator
			,NonLaboratoryTestIndicator
			,ExternalTestIndicator
			,PerformedByOrganizationID
			,ReceivedDate
			,ContactPersonName
			,FarmID
			,EIDSSFarmID
			,RowStatus
			,Species
			,IsTestResultIndicative
			,MonitoringSessionID
			,HumanDiseaseReportID
			,VeterinaryDiseaseReportID
			,VectorID
			,RowAction
			,TotalRowCount
			,CurrentPage
			,TotalPages
			FROM (
			SELECT ROW_NUMBER() OVER (
					ORDER BY CASE 
							WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
								AND @SortOrder = 'ASC'
								THEN m.strFieldBarcode
							END ASC
						,CASE 
							WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
								AND @SortOrder = 'DESC'
								THEN m.strFieldBarcode
							END DESC
						,CASE 
							WHEN @SortColumn = 'EIDSSAnimalID'
								AND @SortOrder = 'ASC'
								THEN a.strAnimalCode
							END ASC
						,CASE 
							WHEN @SortColumn = 'EIDSSAnimalID'
								AND @SortOrder = 'DESC'
								THEN a.strAnimalCode
							END DESC
						,CASE 
							WHEN @SortColumn = 'DiseaseName'
								AND @SortOrder = 'ASC'
								THEN diagnosis.Name
							END ASC
						,CASE 
							WHEN @SortColumn = 'DiseaseName'
								AND @SortOrder = 'DESC'
								THEN diagnosis.Name
							END DESC
						,CASE 
							WHEN @SortColumn = 'TestNameTypeName'
								AND @SortOrder = 'ASC'
								THEN testNameType.Name
							END ASC
						,CASE 
							WHEN @SortColumn = 'TestNameTypeName'
								AND @SortOrder = 'DESC'
								THEN testNameType.Name
							END DESC
						,CASE 
							WHEN @SortColumn = 'Comments'
								AND @SortOrder = 'ASC'
								THEN t.strNote
							END ASC
						,CASE 
							WHEN @SortColumn = 'Comments'
								AND @SortOrder = 'DESC'
								THEN t.strNote
							END DESC
					) AS RowNum
					,t.idfTesting AS TestID
			,t.idfsTestName AS TestNameTypeID
			,testNameType.name AS TestNameTypeName
			,t.idfsTestCategory AS TestCategoryTypeID
			,testCategoryType.name AS TestCategoryTypeName
			,t.idfsTestResult AS TestResultTypeID
			,t.idfsTestResult AS OriginalTestResultTypeID 
			,testResultType.name AS TestResultTypeName
			,t.idfsTestStatus AS TestStatusTypeID
			,testStatusType.name AS TestStatusTypeName
			,t.idfsDiagnosis AS DiseaseID
			,diagnosis.Name AS DiseaseName
			,t.idfMaterial AS SampleID
			,m.idfRootMaterial AS RootSampleID 
			,m.strFieldBarCode AS EIDSSLocalOrFieldSampleID
			,CASE 
				WHEN t.blnNonLaboratoryTest = 1
					THEN ''
				ELSE m.strBarCode
				END AS EIDSSLaboratorySampleID
			,sampleType.name AS SampleTypeName
			,s.idfSpecies AS SpeciesID
			,speciesType.name AS SpeciesTypeName
			,a.idfAnimal AS AnimalID
			,a.strAnimalCode AS EIDSSAnimalID
			,t.idfBatchTest AS BatchTestID
			,t.idfObservation AS ObservationID
			,t.intTestNumber AS TestNumber
			,t.strNote AS Comments
			,t.datStartedDate AS StartedDate
			,t.datConcludedDate AS ResultDate
			,m.datFieldSentDate AS SentDate
			,t.idfTestedByOffice AS TestedByOrganizationID
			,t.idfTestedByPerson AS TestedByPersonID
			,ISNULL(testedByPerson.strFamilyName, N'') + ISNULL(' ' + testedByPerson.strFirstName, '') + ISNULL(' ' + testedByPerson.strSecondName, '') AS TestedByPersonName
			,t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID
			,t.idfResultEnteredByPerson AS ResultEnteredByPersonID
			,ISNULL(resultEnteredByPerson.strFamilyName, N'') + ISNULL(' ' + resultEnteredByPerson.strFirstName, '') + ISNULL(' ' + resultEnteredByPerson.strSecondName, '') AS ResultEnteredByPersonName
			,t.idfValidatedByOffice AS ValidatedByOrganizationID
			,t.idfValidatedByPerson AS ValidatedByPersonID
			,ISNULL(validatedByPerson.strFamilyName, N'') + ISNULL(' ' + validatedByPerson.strFirstName, '') + ISNULL(' ' + validatedByPerson.strSecondName, '') AS ValidatedByPersonName
			,t.blnReadOnly AS ReadOnlyIndicator
			,t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator
			,t.blnExternalTest AS ExternalTestIndicator
			,t.idfPerformedByOffice AS PerformedByOrganizationID
			,t.datReceivedDate AS ReceivedDate
			,t.strContactPerson AS ContactPersonName
			,f.idfFarm AS FarmID
			,f.strFarmCode AS EIDSSFarmID
			,t.intRowStatus AS RowStatus
			,(
				CASE 
					WHEN vc.idfsCaseType = 10012003
						THEN 'Herd ' + h.strHerdCode + ' - ' + speciesType.name
					ELSE 'Flock ' + h.strHerdCode + ' - ' + speciesType.name
					END
				) AS Species
			,ttr.blnIndicative AS IsTestResultIndicative
			,t.idfMonitoringSession AS MonitoringSessionID
			,t.idfHumanCase AS HumanDiseaseReportID
			,t.idfVetCase AS VeterinaryDiseaseReportID
			,t.idfVector AS VectorID
			,0 AS RowAction
			,COUNT(*) OVER () AS TotalRowCount
			,CurrentPage = @PageNumber
			,TotalPages = (COUNT(*) OVER () / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
		FROM dbo.tlbTesting t
		INNER JOIN dbo.tlbMaterial m ON m.idfMaterial = t.idfMaterial
			AND m.intRowStatus = 0
		INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) sampleType ON sampleType.idfsReference = m.idfsSampleType
		INNER JOIN dbo.tlbVetCase vc ON vc.idfVetCase = m.idfVetCase
			AND vc.intRowStatus = 0
		INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000001) testStatusType ON testStatusType.idfsReference = t.idfsTestStatus
		INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) diagnosis ON diagnosis.idfsReference = t.idfsDiagnosis
		LEFT JOIN dbo.tlbSpecies s ON s.idfSpecies = m.idfSpecies
			AND s.intRowStatus = 0
		LEFT JOIN dbo.tlbHerd h ON h.idfHerd = s.idfHerd
			AND h.intRowStatus = 0
		LEFT JOIN dbo.tlbFarm f ON f.idfFarm = h.idfFarm
			AND f.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType ON speciesType.idfsReference = s.idfsSpeciesType
		LEFT JOIN dbo.tlbAnimal a ON a.idfAnimal = m.idfAnimal
			AND a.intRowStatus = 0
		LEFT JOIN dbo.tlbPerson testedByPerson ON testedByPerson.idfPerson = t.idfTestedByPerson
			AND testedByPerson.intRowStatus = 0
		LEFT JOIN dbo.tlbPerson resultEnteredByPerson ON resultEnteredByPerson.idfPerson = t.idfResultEnteredByPerson
			AND resultEnteredByPerson.intRowStatus = 0
		LEFT JOIN dbo.tlbPerson validatedByPerson ON validatedByPerson.idfPerson = t.idfValidatedByPerson
			AND validatedByPerson.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000097) testNameType ON testNameType.idfsReference = t.idfsTestName
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000095) testCategoryType ON testCategoryType.idfsReference = t.idfsTestCategory
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000096) testResultType ON testResultType.idfsReference = t.idfsTestResult
		LEFT JOIN dbo.trtTestTypeToTestResult ttr ON ttr.idfsTestName = t.idfsTestName
			AND ttr.idfsTestResult = t.idfsTestResult
			AND ttr.intRowStatus = 0
		WHERE t.intRowStatus = 0
			AND m.idfVetCase = @DiseaseReportID
            AND t.idfsTestStatus <> 10001007 -- Deleted
		GROUP BY t.idfTesting
			,t.idfsTestName
			,testNameType.name
			,t.idfsTestCategory
			,testCategoryType.name
			,t.idfsTestResult
			,testResultType.name
			,t.idfsTestStatus
			,testStatusType.name
			,t.idfsDiagnosis
			,diagnosis.Name
			,t.idfMaterial
			,m.idfRootMaterial
			,m.strFieldBarCode
			,m.strBarCode
			,sampleType.name
			,s.idfSpecies
			,speciesType.name
			,a.idfAnimal
			,a.strAnimalCode
			,t.idfBatchTest
			,t.idfObservation
			,t.intTestNumber
			,t.strNote
			,t.datStartedDate 
			,t.datConcludedDate
			,m.datFieldSentDate
			,t.idfTestedByOffice
			,t.idfTestedByPerson
			,testedByPerson.strFamilyName
			,testedByPerson.strFirstName
			,testedByPerson.strSecondName
			,t.idfResultEnteredByOffice
			,t.idfResultEnteredByPerson
			,resultEnteredByPerson.strFamilyName
			,resultEnteredByPerson.strFirstName
			,resultEnteredByPerson.strSecondName
			,t.idfValidatedByOffice
			,t.idfValidatedByPerson
			,validatedByPerson.strFamilyName
			,validatedByPerson.strFirstName
			,validatedByPerson.strSecondName
			,t.blnReadOnly
			,t.blnNonLaboratoryTest
			,t.blnExternalTest
			,t.idfPerformedByOffice
			,t.datReceivedDate
			,t.strContactPerson
			,f.idfFarm
			,f.strFarmCode
			,t.intRowStatus
			,vc.idfsCaseType
			,h.strHerdCode
			,speciesType.name
			,ttr.blnIndicative
			,t.idfMonitoringSession
			,t.idfHumanCase
			,t.idfVetCase
			,t.idfVector
		) AS x
		WHERE RowNum > @firstRec
			AND RowNum < @lastRec
		ORDER BY RowNum;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_ADMIN_ACCESS_RULE_ACTOR_SET]...';


GO

-- ================================================================================================
-- Name: USSP_ADMIN_ACCESS_RULE_ACTOR_SET
--
-- Description:	Inserts or updates access rule actors for configurable site filtration of the 
-- administration module.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		11/11/2020 Initial release.
-- Stephen Long     12/27/2020 Added granting actor indicator.
-- Stephen Long     04/19/2021 Removed language ID and audit user name as not needed.
-- Stephen Long     03/14/2022 Changed row action to an int.
-- Stephen Long     03/16/2022 Corrected row action check from 0 to 1.
-- Mark Wilson		06/03/2022 Added Audit fields
-- Stephen Long     12/16/2022 Changed user name from 100 to 200.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_ADMIN_ACCESS_RULE_ACTOR_SET] 
(
	@AccessRuleActorID BIGINT OUTPUT,
	@AccessRuleID BIGINT,
	@GrantingActorIndicator BIT = 0,
	@ActorSiteGroupID BIGINT = NULL,
	@ActorSiteID BIGINT = NULL,
	@ActorEmployeeGroupID BIGINT = NULL,
	@ActorUserID BIGINT = NULL,
	@RowStatus INT,
	@RowAction INT,
	@AuditUser NVARCHAR(200)

)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		IF @RowAction = 1 -- Insert
		BEGIN
			EXECUTE dbo.USP_GBL_NEXTKEYID_GET
				@tableName = N'AccessRuleActor',
				@idfsKey = @AccessRuleActorID OUTPUT;

			INSERT INTO dbo.AccessRuleActor 
			(
				AccessRuleActorID,
				AccessRuleID,
				GrantingActorIndicator,
				ActorSiteGroupID,
				ActorSiteID,
				ActorEmployeeGroupID,
				ActorUserID,
				intRowStatus,
				AuditCreateUser,
				AuditCreateDTM,
				SourceSystemNameID,
				SourceSystemKeyValue
			)
			VALUES 
			(
				@AccessRuleActorID,
				@AccessRuleID,
				@GrantingActorIndicator,
				@ActorSiteGroupID,
				@ActorSiteID,
				@ActorEmployeeGroupID,
				@ActorUserID,
				@RowStatus,
				@AuditUser,
				GETDATE(),
				10519001,
				'[{"AccessRuleActorID":' + CAST(@AccessRuleActorID AS NVARCHAR(24)) + '}]'
			)

		END
		ELSE
		BEGIN
			UPDATE dbo.AccessRuleActor
			SET AccessRuleID = @AccessRuleID,
				GrantingActorIndicator = @GrantingActorIndicator,
				ActorSiteGroupID = @ActorSiteGroupID,
				ActorSiteID = @ActorSiteID,
				ActorEmployeeGroupID = @ActorEmployeeGroupID,
				ActorUserID = @ActorUserID,
				intRowStatus = @RowStatus,
				AuditUpdateDTM = GETDATE(),
				AuditUpdateUser = @AuditUser

			WHERE AccessRuleActorID = @AccessRuleActorID;

		END;

	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_ADMIN_EVENT_SET]...';


GO
-- ================================================================================================
-- Name: USSP_ADMIN_EVENT_SET
--
-- Description:	Inserts or updates the event table for SAUC55 and SAUC56.
-- 
-- Field Notes:
--
-- Object - ID of record such as human disease report
-- LoginSite - ID of organization login site where initial event that raise notification was 
-- created.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/18/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long     12/01/2022 Added EIDSS object ID; smart key that represents the parent object.
-- Stephen Long     01/16/2023 Changed site ID where criteria from the user table to the employee 
--                             table as user table's site ID was no longer getting updated.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_ADMIN_EVENT_SET]
(
    @EventId BIGINT,
    @EventTypeId BIGINT,
    @UserId BIGINT,
    @ObjectId BIGINT = NULL,
    @DiseaseId BIGINT = NULL,
    @SiteId BIGINT = NULL,
    @InformationString NVARCHAR(MAX) = NULL,
    @LoginSiteId BIGINT = NULL,
    @LocationId BIGINT = NULL,
    @AuditUserName NVARCHAR(200), 
    @DataAuditEventID BIGINT = NULL, 
    @EIDSSObjectID NVARCHAR(200) = NULL 
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @NeighboringSiteId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventSiteId BIGINT = NULL, 
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @ObjectTableID BIGINT = 76040000000; -- tstEvent
        DECLARE @EventUsers TABLE
        (
            UserId BIGINT NOT NULL,
            SiteId BIGINT NOT NULL
        );
        DECLARE @NeighboringSites TABLE
        (
            AccessRuleId BIGINT,
            SiteId BIGINT
        );
        DECLARE @SiteAccessRuleGrantee TABLE (AccessRuleId BIGINT);

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data Audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        -- Get all users of the target site that have subscribed to the notification type.
        INSERT INTO @EventUsers
        SELECT u.idfUserID,
               e.idfsSite
        FROM dbo.tstUserTable u
            INNER JOIN dbo.EventSubscription es
                ON es.idfUserID = u.idfUserID
                   AND es.EventNameID = @EventTypeId
            INNER JOIN dbo.tlbEmployee e 
                ON e.idfEmployee = u.idfPerson
        WHERE e.idfsSite = @LoginSiteId
              AND u.intRowStatus = 0
              AND es.ReceiveAlertFlag = 1;

        -- Get all users of the target site's neighboring sites based on filtration rules.
        -- Logged in user site ID is a grantor, then get list of grantee sites.
        INSERT INTO @NeighboringSites
        SELECT ar.AccessRuleID,
               ara.ActorSiteID
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = ar.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ar.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1
              AND ar.GrantingActorSiteID = @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
              AND ara.ActorSiteID <> @LoginSiteId
        GROUP BY ara.ActorSiteID,
                 ar.AccessRuleID;

        -- Logged in user site ID access rules as a grantee.
        INSERT INTO @SiteAccessRuleGrantee
        SELECT ara.AccessRuleID
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE ara.ActorSiteID = @LoginSiteId
              AND ara.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1;

        -- Select all grantee sites that the site is also a grantee of.
        INSERT INTO @NeighboringSites
        SELECT sg.AccessRuleID,
               ara.ActorSiteID
        FROM @SiteAccessRuleGrantee sg
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = sg.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ara.ActorSiteID <> @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
        GROUP BY ara.ActorSiteID,
                 sg.AccessRuleID;

        WHILE EXISTS (SELECT * FROM @NeighboringSites)
        BEGIN
            SELECT TOP 1
                @NeighboringSiteId = SiteId
            FROM @NeighboringSites;

            -- Get all users of the neighboring site.
            INSERT INTO @EventUsers
            SELECT u.idfUserID,
                   e.idfsSite
            FROM dbo.tstUserTable u
                INNER JOIN dbo.EventSubscription es
                   ON es.idfUserID = u.idfUserID
                      AND es.EventNameID = @EventTypeId
                INNER JOIN dbo.tlbEmployee e 
                   ON e.idfEmployee = u.idfPerson
            WHERE e.idfsSite = @NeighboringSiteId
                  AND u.intRowStatus = 0
                  AND es.ReceiveAlertFlag = 1;

            DELETE FROM @NeighboringSites
            WHERE SiteID = @NeighboringSiteId;
        END

        WHILE EXISTS (SELECT * FROM @EventUsers)
        BEGIN
            SELECT TOP 1
                @EventUserId = UserId,
                @EventSiteId = SiteId
            FROM @EventUsers;

            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstEvent', @EventId OUTPUT;

            -- Change to the third party site alert/event type id.
            IF @EventSiteId <> @SiteId
            BEGIN
                SET @EventTypeId = CASE WHEN @EventTypeId = 10025503 THEN
                    10025504
                WHEN @EventTypeId = 10025501 THEN
                    10025502
                WHEN @EventTypeId = 10025505 THEN
                    10025506
                WHEN @EventTypeId = 10025507 THEN
                    10025508
                WHEN @EventTypeId = 10025509 THEN
                    10025512
                WHEN @EventTypeId = 10025510 THEN
                    10025511
                WHEN @EventTypeId = 10025037 THEN
                    10025038
                WHEN @EventTypeId = 10025041 THEN
                    10025042
                WHEN @EventTypeId = 10025043 THEN
                    10025044
                WHEN @EventTypeId = 10025045 THEN
                    10025046
                WHEN @EventTypeId = 10025047 THEN
                    10025048
                WHEN @EventTypeId = 10025077 THEN
                    10025078
                WHEN @EventTypeId = 10025079 THEN
                    10025080
                WHEN @EventTypeId = 10025081 THEN
                    10025082
                WHEN @EventTypeId = 10025099 THEN
                    10025100
                WHEN @EventTypeId = 10025097 THEN
                    10025098
                WHEN @EventTypeId = 10025129 THEN
                    10025130
                WHEN @EventTypeId = 10025101 THEN
                    10025102
                WHEN @EventTypeId = 10025103 THEN
                    10025104
                WHEN @EventTypeId = 10025105 THEN
                    10025106
                WHEN @EventTypeId = 10025107 THEN
                    10025108
                WHEN @EventTypeId = 10025085 THEN
                    10025086
                WHEN @EventTypeId = 10025087 THEN
                    10025088
                WHEN @EventTypeId = 10025089 THEN
                    10025090
                WHEN @EventTypeId = 10025091 THEN
                    10025092
                WHEN @EventTypeId = 10025093 THEN
                    10025094
                WHEN @EventTypeId = 10025095 THEN
                    10025096
                WHEN @EventTypeId = 10025067 THEN
                    10025068
                WHEN @EventTypeId = 10025071 THEN
                    10025072
                WHEN @EventTypeId = 10025073 THEN
                    10025074
                WHEN @EventTypeId = 10025075 THEN
                    10025076
                WHEN @EventTypeId = 10025513 THEN
                    10025514
                WHEN @EventTypeId = 10025517 THEN
                    10025518
                WHEN @EventTypeId = 10025519 THEN
                    10025520
                WHEN @EventTypeId = 10025525 THEN
                    10025526
                WHEN @EventTypeId = 10025049 THEN
                    10025050
                WHEN @EventTypeId = 10025051 THEN
                    10025052
                WHEN @EventTypeId = 10025053 THEN
                    10025054
                WHEN @EventTypeId = 10025055 THEN
                    10025056
                WHEN @EventTypeId = 10025057 THEN
                    10025058
                WHEN @EventTypeId = 10025059 THEN
                    10025060
                WHEN @EventTypeId = 10025061 THEN
                    10025062
                WHEN @EventTypeId = 10025065 THEN
                    10025066
                WHEN @EventTypeId = 10025069 THEN
                    10025070
                WHEN @EventTypeId = 10025527 THEN
                    10025528
                WHEN @EventTypeId = 10025529 THEN
                    10025530
                WHEN @EventTypeId = 10025537 THEN
                    10025538
                WHEN @EventTypeId = 10025539 THEN
                    10025540
                WHEN @EventTypeId = 10025563 THEN
                    10025564
                ELSE
                    @EventTypeId
                END
            END

            INSERT INTO dbo.tstEvent
            (
                idfEventID,
                idfsEventTypeID,
                idfObjectID,
                strInformationString,
                --strNote, 
                datEventDatatime,
                idfUserID,
                intProcessed,
                idfsSite,
                idfsDiagnosis,
                idfsLoginSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser,
                idfsLocation
            )
            VALUES
            (@EventId,
             @EventTypeId,
             @ObjectId,
             @InformationString,
             --@Note, 
             GETDATE(),
             @EventUserId,
             0  ,
             @EventSiteId,
             @DiseaseId,
             @LoginSiteId,
             10519001,
             '[{"idfEventID":' + CAST(@EventId AS NVARCHAR(300)) + '}]',
             GETDATE(),
             @AuditUserName,
             @LocationId
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @EventId,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             @EIDSSObjectID
            );
            -- End data audit

            DELETE FROM @EventUsers
            WHERE UserId = @EventUserId
                  AND SiteId = @EventSiteId;
        END;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH;

    SELECT @ReturnCode ReturnCode,
           @ReturnMessage ReturnMessage;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_ADMIN_OBJECT_ACCESS_SET]...';


GO
-- ================================================================================================
-- Name: USSP_ADMIN_OBJECT_ACCESS_SET
--
-- Description:	Inserts or updates object access records for use case SAUC29.
--                      
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- -------------------------------------------------------------------
-- Stephen Long    12/21/2022 Initial release.
-- Stephen Long    12/27/2022 Added delete logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_ADMIN_OBJECT_ACCESS_SET]
(
    @ObjectAccessID BIGINT = NULL,
    @ObjectOperationTypeID BIGINT = NULL,
    @ObjectTypeID BIGINT = NULL,
    @ObjectID BIGINT = NULL,
    @ActorID BIGINT = NULL,
    @SiteID BIGINT = NULL,
    @PermissionTypeID INT = NULL,
    @RowStatus INT = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0;
        DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS';

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tstObjectAccess
            WHERE idfObjectAccess = @ObjectAccessID
                  AND intRowStatus = 0
        )
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstObjectAccess',
                                              @ObjectAccessID OUTPUT;

            INSERT INTO dbo.tstObjectAccess
            (
                idfObjectAccess,
                idfsObjectOperation,
                idfsObjectType,
                idfsObjectID,
                idfActor,
                idfsOnSite,
                intPermission,
                intRowStatus,
                SourceSystemNameID,
				SourceSystemKeyValue
            )
            VALUES
            (@ObjectAccessID,
             @ObjectOperationTypeID,
             @ObjectTypeID,
             @ObjectID,
             @ActorID,
             @SiteID,
             @PermissionTypeID,
             @RowStatus,
             10519002,
			'[{"idfObjectAccess":' + CAST(@ObjectAccessID AS NVARCHAR(24)) + '}]'
            );
        END
        ELSE IF @RowStatus = 1
        BEGIN
            DELETE FROM dbo.tstObjectAccess
            WHERE idfObjectAccess = @ObjectAccessID;
        END
        ELSE
        BEGIN


            UPDATE dbo.tstObjectAccess
            SET idfsObjectOperation = @ObjectOperationTypeID,
                idfsObjectType = @ObjectTypeID,
                idfsObjectID = @ObjectID,
                idfActor = @ActorID,
                idfsOnSite = @SiteID,
                intPermission = @PermissionTypeID,
                intRowStatus = @RowStatus
            WHERE idfObjectAccess = @ObjectAccessID;
        END

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_BaseReference_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_BaseReference_SET
--
-- Description: Insert/update base reference data.  Non-API stored procedure.  Only call via 
-- other USP stored procedures.
--           
-- Revision History:
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		08/20/2019 Initial release.
-- Mark Wilson		05/13/2021 Updated to insert when duplicate value is used
-- Stephen Long     06/26/2021 Added return to end and added set nocount on so output param will
--                             return to calling stored procedure.
-- Mark Wilson		08/10/2021 Updated remove unused parameter from USSP_GBL_StringTranslation_SET
-- Stephen Long     08/12/2021 Corrected to use order parameter on insert instead of 0.
-- Stephen Long     02/13/2023 Changed default name from varchar to nvarchar.
/*
DECLARE @idfsSpeciesType BIGINT

EXEC dbo.USSP_GBL_BaseReference_SET @idfsSpeciesType OUTPUT, 19000086, 'en-US', 'Mark', 'Mark', 0, 0


*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_BaseReference_SET] 
(
	@ReferenceID BIGINT = NULL OUTPUT,
	@ReferenceType BIGINT,
	@LangID NVARCHAR(50),
	@DefaultName NVARCHAR(200), -- Default reference name, used if there is no reference translation
	@NationalName NVARCHAR(200) = NULL, -- Reference name in the language defined by @LangID
	@HACode INT = NULL, -- Bit mask for reference using
	@Order INT = NULL, -- Reference record order for sorting
	@System BIT = 0,
	@Unique_strDefault BIT = 'TRUE' OUTPUT
    
)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @idfCustomizationPackage BIGINT;

	BEGIN TRY
		IF EXISTS (
				SELECT idfsBaseReference
				FROM dbo.trtBaseReference
				WHERE idfsBaseReference = @ReferenceID
					AND intRowStatus = 0
				)
		BEGIN
			UPDATE dbo.trtBaseReference
			SET idfsReferenceType = @ReferenceType,
				strDefault = ISNULL(@DefaultName, strDefault),
				intHACode = ISNULL(@HACode, intHACode),
				intOrder = ISNULL(@Order, intOrder),
				blnSystem = ISNULL(@System, blnSystem),
				rowguid = ISNULL(rowguid, NEWID()),
				AuditUpdateDTM = GETDATE()
			WHERE idfsBaseReference = @ReferenceID;
		END
		ELSE

		BEGIN
			IF @ReferenceID IS NULL
			BEGIN
				EXEC dbo.USP_GBL_NEXTKEYID_GET 'trtBaseReference',
					@ReferenceID OUTPUT;
			END

			IF @Order IS NULL 
			BEGIN
				SET @Order = 0;
			END

			IF EXISTS (SELECT * FROM dbo.trtBaseReference WHERE strDefault = @DefaultName AND idfsReferenceType = @ReferenceType)
				SET @Unique_strDefault = 'FALSE'
			ELSE
				SET @Unique_strDefault = 'TRUE'

			INSERT INTO dbo.trtBaseReference
			(
				idfsBaseReference,
				idfsReferenceType,
				strBaseReferenceCode,
				strDefault,
				intHACode,
				intOrder,
				blnSystem,
				intRowStatus,
				rowguid,
				strMaintenanceFlag,
				strReservedAttribute,
				SourceSystemNameID,
				SourceSystemKeyValue,
				AuditCreateDTM,
				AuditUpdateDTM
			)
			VALUES (
				@ReferenceID,
				@ReferenceType,
				NULL,
				@DefaultName,
				NULL,
				@Order,
				0,
				0,
				NEWID(),
				'ADD',
				'EIDSS7 new reference data',
				10519001,
				N'[{"idfsBaseReference":' + CAST(@ReferenceID AS NVARCHAR(300)) + '}]',
				GETDATE(),
				GETDATE()
			);

			SELECT @idfCustomizationPackage = dbo.FN_GBL_CustomizationPackage_GET();

			IF @idfCustomizationPackage IS NOT NULL
				AND @idfCustomizationPackage <> 51577300000000 --The USA
			BEGIN
				EXEC dbo.USP_GBL_BaseReferenceToCP_SET @ReferenceID,
					@idfCustomizationPackage;
			END
		END
		
		EXEC dbo.USSP_GBL_StringTranslation_SET 
			@ReferenceID,
			@LangID,
			@NationalName;

		RETURN;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_TEST_INTERPRETATIONS_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_TEST_INTERPRETATIONS_SET
--
-- Description:	Inserts or updates test interpretation records for various use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long     11/29/2022 Added delete data audit logic.
-- Stephen Long     12/09/2022 Added EIDSSObjectID parameter to insert for strObject.
-- Stephen Long     02/06/2023 Removed print statement.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_TEST_INTERPRETATIONS_SET]
(
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @TestInterpretationID BIGINT OUTPUT,
    @DiseaseID BIGINT,
    @InterpretedStatusTypeID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @InterpretedByOrganizationID BIGINT = NULL,
    @InterpretedByPersonID BIGINT = NULL,
    @TestID BIGINT,
    @ValidateStatusIndicator BIT = NULL,
    @ReportSessionCreatedIndicator BIT = NULL,
    @ValidationComment NVARCHAR(200) = NULL,
    @InterpretationComment NVARCHAR(200) = NULL,
    @ValidationDate DATETIME = NULL,
    @InterpretationDate DATETIME = NULL,
    @RowStatus INT,
    @ReadOnlyIndicator BIT,
    @RowAction INT
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @TestInterpretationID,
        @ObjectTableID BIGINT = 75750000000; -- tlbTestValidation
DECLARE @TestInterpretationBeforeEdit TABLE
(
    TestInterpretationID BIGINT,
    DiseaseID BIGINT,
    InterpretedStatusTypeID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    InterpretedByOfficeID BIGINT,
    InterpretedByPersonID BIGINT,
    TestID BIGINT,
    ValidateStatusIndicator BIT,
    CaseCreatedIndicator BIT,
    ValidateComment NVARCHAR(200),
    InterpretedComment NVARCHAR(200),
    ValidationDate DATETIME,
    InterpretationDate DATETIME,
    ReadOnlyIndicator BIT,
    RowStatus INT
);
DECLARE @TestInterpretationAfterEdit TABLE
(
    TestInterpretationID BIGINT,
    DiseaseID BIGINT,
    InterpretedStatusTypeID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    InterpretedByOfficeID BIGINT,
    InterpretedByPersonID BIGINT,
    TestID BIGINT,
    ValidateStatusIndicator BIT,
    CaseCreatedIndicator BIT,
    ValidateComment NVARCHAR(200),
    InterpretedComment NVARCHAR(200),
    ValidationDate DATETIME,
    InterpretationDate DATETIME,
    ReadOnlyIndicator BIT,
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbTestValidation',
                                              @TestInterpretationID OUTPUT;

            INSERT INTO dbo.tlbTestValidation
            (
                idfTestValidation,
                idfsDiagnosis,
                idfsInterpretedStatus,
                idfValidatedByOffice,
                idfValidatedByPerson,
                idfInterpretedByOffice,
                idfInterpretedByPerson,
                idfTesting,
                blnValidateStatus,
                blnCaseCreated,
                strValidateComment,
                strInterpretedComment,
                datValidationDate,
                datInterpretationDate,
                intRowStatus,
                blnReadOnly,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@TestInterpretationID,
             @DiseaseID,
             @InterpretedStatusTypeID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @InterpretedByOrganizationID,
             @InterpretedByPersonID,
             @TestID,
             @ValidateStatusIndicator,
             @ReportSessionCreatedIndicator,
             @ValidationComment,
             @InterpretationComment,
             @ValidationDate,
             @InterpretationDate,
             @RowStatus,
             @ReadOnlyIndicator,
             @AuditUserName,
             10519001,
             '[{"idfTestValidation":' + CAST(@TestInterpretationID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @TestInterpretationID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             @EIDSSObjectID
            );
        -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO @TestInterpretationBeforeEdit
            (
                TestInterpretationID,
                DiseaseID,
                InterpretedStatusTypeID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                InterpretedByOfficeID,
                InterpretedByPersonID,
                TestID,
                ValidateStatusIndicator,
                CaseCreatedIndicator,
                ValidateComment,
                InterpretedComment,
                ValidationDate,
                InterpretationDate,
                ReadOnlyIndicator,
                RowStatus
            )
            SELECT idfTestValidation,
                   idfsDiagnosis,
                   idfsInterpretedStatus,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   idfInterpretedByOffice,
                   idfInterpretedByPerson,
                   idfTesting,
                   blnValidateStatus,
                   blnCaseCreated,
                   strValidateComment,
                   strInterpretedComment,
                   datValidationDate,
                   datInterpretationDate,
                   blnReadOnly,
                   intRowStatus
            FROM dbo.tlbTestValidation
            WHERE idfTestValidation = @TestInterpretationID;

            UPDATE dbo.tlbTestValidation
            SET idfsDiagnosis = @DiseaseID,
                idfsInterpretedStatus = @InterpretedStatusTypeID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                idfInterpretedByOffice = @InterpretedByOrganizationID,
                idfInterpretedByPerson = @InterpretedByPersonID,
                idfTesting = @TestID,
                blnValidateStatus = @ValidateStatusIndicator,
                blnCaseCreated = @ReportSessionCreatedIndicator,
                strValidateComment = @ValidationComment,
                strInterpretedComment = @InterpretationComment,
                datValidationDate = @ValidationDate,
                datInterpretationDate = @InterpretationDate,
                intRowStatus = @RowStatus,
                blnReadOnly = @ReadOnlyIndicator,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfTestValidation = @TestInterpretationID;

            INSERT INTO @TestInterpretationAfterEdit
            (
                TestInterpretationID,
                DiseaseID,
                InterpretedStatusTypeID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                InterpretedByOfficeID,
                InterpretedByPersonID,
                TestID,
                ValidateStatusIndicator,
                CaseCreatedIndicator,
                ValidateComment,
                InterpretedComment,
                ValidationDate,
                InterpretationDate,
                ReadOnlyIndicator,
                RowStatus
            )
            SELECT idfTestValidation,
                   idfsDiagnosis,
                   idfsInterpretedStatus,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   idfInterpretedByOffice,
                   idfInterpretedByPerson,
                   idfTesting,
                   blnValidateStatus,
                   blnCaseCreated,
                   strValidateComment,
                   strInterpretedComment,
                   datValidationDate,
                   datInterpretationDate,
                   blnReadOnly,
                   intRowStatus
            FROM dbo.tlbTestValidation
            WHERE idfTestValidation = @TestInterpretationID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80580000000,
                       a.TestInterpretationID,
                       NULL,
                       b.DiseaseID,
                       a.DiseaseID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.DiseaseID <> b.DiseaseID)
                      OR (
                             a.DiseaseID IS NOT NULL
                             AND b.DiseaseID IS NULL
                         )
                      OR (
                             a.DiseaseID IS NULL
                             AND b.DiseaseID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80590000000,
                       a.TestInterpretationID,
                       NULL,
                       b.InterpretedStatusTypeID,
                       a.InterpretedStatusTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.InterpretedStatusTypeID <> b.InterpretedStatusTypeID)
                      OR (
                             a.InterpretedStatusTypeID IS NOT NULL
                             AND b.InterpretedStatusTypeID IS NULL
                         )
                      OR (
                             a.InterpretedStatusTypeID IS NULL
                             AND b.InterpretedStatusTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80610000000,
                       a.TestInterpretationID,
                       NULL,
                       b.ValidatedByOfficeID,
                       a.ValidatedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.ValidatedByOfficeID <> b.ValidatedByOfficeID)
                      OR (
                             a.ValidatedByOfficeID IS NOT NULL
                             AND b.ValidatedByOfficeID IS NULL
                         )
                      OR (
                             a.ValidatedByOfficeID IS NULL
                             AND b.ValidatedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80620000000,
                       a.TestInterpretationID,
                       NULL,
                       b.ValidatedByPersonID,
                       a.ValidatedByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.ValidatedByPersonID <> b.ValidatedByPersonID)
                      OR (
                             a.ValidatedByPersonID IS NOT NULL
                             AND b.ValidatedByPersonID IS NULL
                         )
                      OR (
                             a.ValidatedByPersonID IS NULL
                             AND b.ValidatedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80560000000,
                       a.TestInterpretationID,
                       NULL,
                       b.InterpretedByOfficeID,
                       a.InterpretedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.InterpretedByOfficeID <> b.InterpretedByOfficeID)
                      OR (
                             a.InterpretedByOfficeID IS NOT NULL
                             AND b.InterpretedByOfficeID IS NULL
                         )
                      OR (
                             a.InterpretedByOfficeID IS NULL
                             AND b.InterpretedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80570000000,
                       a.TestInterpretationID,
                       NULL,
                       b.InterpretedByPersonID,
                       a.InterpretedByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.InterpretedByPersonID <> b.InterpretedByPersonID)
                      OR (
                             a.InterpretedByPersonID IS NOT NULL
                             AND b.InterpretedByPersonID IS NULL
                         )
                      OR (
                             a.InterpretedByPersonID IS NULL
                             AND b.InterpretedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80600000000,
                       a.TestInterpretationID,
                       NULL,
                       b.TestID,
                       a.TestID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.TestID <> b.TestID)
                      OR (
                             a.TestID IS NOT NULL
                             AND b.TestID IS NULL
                         )
                      OR (
                             a.TestID IS NULL
                             AND b.TestID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80550000000,
                       a.TestInterpretationID,
                       NULL,
                       b.ValidateStatusIndicator,
                       a.ValidateStatusIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.ValidateStatusIndicator <> b.ValidateStatusIndicator)
                      OR (
                             a.ValidateStatusIndicator IS NOT NULL
                             AND b.ValidateStatusIndicator IS NULL
                         )
                      OR (
                             a.ValidateStatusIndicator IS NULL
                             AND b.ValidateStatusIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572560000000,
                       a.TestInterpretationID,
                       NULL,
                       b.CaseCreatedIndicator,
                       a.CaseCreatedIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.CaseCreatedIndicator <> b.CaseCreatedIndicator)
                      OR (
                             a.CaseCreatedIndicator IS NOT NULL
                             AND b.CaseCreatedIndicator IS NULL
                         )
                      OR (
                             a.CaseCreatedIndicator IS NULL
                             AND b.CaseCreatedIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80640000000,
                       a.TestInterpretationID,
                       NULL,
                       b.ValidateComment,
                       a.ValidateComment,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.ValidateComment <> b.ValidateComment)
                      OR (
                             a.ValidateComment IS NOT NULL
                             AND b.ValidateComment IS NULL
                         )
                      OR (
                             a.ValidateComment IS NULL
                             AND b.ValidateComment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80630000000,
                       a.TestInterpretationID,
                       NULL,
                       b.InterpretedComment,
                       a.InterpretedComment,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.InterpretedComment <> b.InterpretedComment)
                      OR (
                             a.InterpretedComment IS NOT NULL
                             AND b.InterpretedComment IS NULL
                         )
                      OR (
                             a.InterpretedComment IS NULL
                             AND b.InterpretedComment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572570000000,
                       a.TestInterpretationID,
                       NULL,
                       b.ValidationDate,
                       a.ValidationDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.ValidationDate <> b.ValidationDate)
                      OR (
                             a.ValidationDate IS NOT NULL
                             AND b.ValidationDate IS NULL
                         )
                      OR (
                             a.ValidationDate IS NULL
                             AND b.ValidationDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572580000000,
                       a.TestInterpretationID,
                       NULL,
                       b.InterpretationDate,
                       a.InterpretationDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.InterpretationDate <> b.InterpretationDate)
                      OR (
                             a.InterpretationDate IS NOT NULL
                             AND b.InterpretationDate IS NULL
                         )
                      OR (
                             a.InterpretationDate IS NULL
                             AND b.InterpretationDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       6617410000000,
                       a.TestInterpretationID,
                       NULL,
                       b.ReadOnlyIndicator,
                       a.ReadOnlyIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                      OR (
                             a.ReadOnlyIndicator IS NOT NULL
                             AND b.ReadOnlyIndicator IS NULL
                         )
                      OR (
                             a.ReadOnlyIndicator IS NULL
                             AND b.ReadOnlyIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailRestore
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    idfObjectDetail,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       a.TestInterpretationID,
                       NULL,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE a.RowStatus = 0
                      AND b.RowStatus = 1;
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @TestInterpretationID, @AuditUserName, @EIDSSObjectID);
            END
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_TESTS_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_TESTS_SET
--
-- Description:	Inserts or updates laboratory and field test records for various use cases.
--
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long        11/29/2022 Added delete data audit logic.
-- Stephen Long        12/09/2022 Added EIDSSObjectID parameter to insert for strObject.
-- Stephen Long        01/09/2023 Added check to not update test fields when non-laboratory test is 
--                                false; only done from the laboratory module.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_TESTS_SET]
(
    @TestID BIGINT OUTPUT,
    @TestNameTypeID BIGINT = NULL,
    @TestCategoryTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestStatusTypeID BIGINT,
    @DiseaseID BIGINT,
    @SampleID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @ObservationID BIGINT,
    @TestNumber INT = NULL,
    @Comments NVARCHAR(500) = NULL,
    @RowStatus INT = NULL,
    @StartedDate DATETIME = NULL,
    @ResultDate DATETIME = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @NonLaboratoryTestIndicator BIT,
    @ExternalTestIndicator BIT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @ReceivedDate DATETIME = NULL,
    @ContactPerson NVARCHAR(200) = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @RowAction CHAR
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @TestID,
        @ObjectTableID BIGINT = 75740000000; -- tlbTesting
DECLARE @TestBeforeEdit TABLE
(
    TestID BIGINT,
    TestNameTypeID BIGINT,
    TestCategoryTypeID BIGINT,
    TestResultTypeID BIGINT,
    TestStatusTypeID BIGINT,
    DiseaseID BIGINT,
    SampleID BIGINT,
    BatchTestID BIGINT,
    ObservationID BIGINT,
    TestNumber INT,
    Note NVARCHAR(500),
    StartedDate DATETIME,
    ConcludedDate DATETIME,
    TestedByOfficeID BIGINT,
    TestedByPersonID BIGINT,
    ResultEnteredByOfficeID BIGINT,
    ResultEnteredByPersonID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    ReadOnlyIndicator BIT,
    NonLaboratoryTestIndicator BIT,
    ExternalTestIndicator BIT,
    PerformedByOfficeID BIGINT,
    ReceivedDate DATETIME,
    ContactPerson NVARCHAR(200),
    RowStatus INT
);
DECLARE @TestAfterEdit TABLE
(
    TestID BIGINT,
    TestNameTypeID BIGINT,
    TestCategoryTypeID BIGINT,
    TestResultTypeID BIGINT,
    TestStatusTypeID BIGINT,
    DiseaseID BIGINT,
    SampleID BIGINT,
    BatchTestID BIGINT,
    ObservationID BIGINT,
    TestNumber INT,
    Note NVARCHAR(500),
    StartedDate DATETIME,
    ConcludedDate DATETIME,
    TestedByOfficeID BIGINT,
    TestedByPersonID BIGINT,
    ResultEnteredByOfficeID BIGINT,
    ResultEnteredByPersonID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    ReadOnlyIndicator BIT,
    NonLaboratoryTestIndicator BIT,
    ExternalTestIndicator BIT,
    PerformedByOfficeID BIGINT,
    ReceivedDate DATETIME,
    ContactPerson NVARCHAR(200),
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 'I'
           OR @RowAction = '1' -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @TestID OUTPUT;

            INSERT INTO dbo.tlbTesting
            (
                idfTesting,
                idfsTestName,
                idfsTestCategory,
                idfsTestResult,
                idfsTestStatus,
                idfsDiagnosis,
                idfMaterial,
                idfBatchTest,
                idfObservation,
                intTestNumber,
                strNote,
                intRowStatus,
                datStartedDate,
                datConcludedDate,
                idfTestedByOffice,
                idfTestedByPerson,
                idfResultEnteredByOffice,
                idfResultEnteredByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                blnReadOnly,
                blnNonLaboratoryTest,
                blnExternalTest,
                idfPerformedByOffice,
                datReceivedDate,
                strContactPerson,
                idfMonitoringSession,
                idfVector,
                idfHumanCase,
                idfVetCase,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@TestID,
             @TestNameTypeID,
             @TestCategoryTypeID,
             @TestResultTypeID,
             @TestStatusTypeID,
             @DiseaseID,
             @SampleID,
             @BatchTestID,
             @ObservationID,
             @TestNumber,
             @Comments,
             @RowStatus,
             @StartedDate,
             @ResultDate,
             @TestedByOrganizationID,
             @TestedByPersonID,
             @ResultEnteredByOrganizationID,
             @ResultEnteredByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ReadOnlyIndicator,
             @NonLaboratoryTestIndicator,
             @ExternalTestIndicator,
             @PerformedByOrganizationID,
             @ReceivedDate,
             @ContactPerson,
             @MonitoringSessionID,
             @VectorSessionID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @AuditUserName,
             10519001,
             '[{"idfTesting":' + CAST(@TestID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @TestID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO @TestBeforeEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            IF @NonLaboratoryTestIndicator = 1
            BEGIN
                UPDATE dbo.tlbTesting
                SET idfsTestName = @TestNameTypeID,
                    idfsTestCategory = @TestCategoryTypeID,
                    idfsTestResult = @TestResultTypeID,
                    idfsTestStatus = @TestStatusTypeID,
                    idfsDiagnosis = @DiseaseID,
                    idfMaterial = @SampleID,
                    idfBatchTest = @BatchTestID,
                    idfObservation = @ObservationID,
                    intTestNumber = @TestNumber,
                    strNote = @Comments,
                    intRowStatus = @RowStatus,
                    datStartedDate = @StartedDate,
                    datConcludedDate = @ResultDate,
                    idfTestedByOffice = @TestedByOrganizationID,
                    idfTestedByPerson = @TestedByPersonID,
                    idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                    idfResultEnteredByPerson = @ResultEnteredByPersonID,
                    idfValidatedByOffice = @ValidatedByOrganizationID,
                    idfValidatedByPerson = @ValidatedByPersonID,
                    blnReadOnly = @ReadOnlyIndicator,
                    blnNonLaboratoryTest = @NonLaboratoryTestIndicator,
                    blnExternalTest = @ExternalTestIndicator,
                    idfPerformedByOffice = @PerformedByOrganizationID,
                    datReceivedDate = @ReceivedDate,
                    strContactPerson = @ContactPerson,
                    idfMonitoringSession = @MonitoringSessionID,
                    idfVector = @VectorSessionID,
                    idfHumanCase = @HumanDiseaseReportID,
                    idfVetCase = @VeterinaryDiseaseReportID,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfTesting = @TestID;
            END
            ELSE
            BEGIN
                UPDATE dbo.tlbTesting
                SET idfsTestName = @TestNameTypeID,
                    idfsTestCategory = @TestCategoryTypeID,
                    idfsTestResult = @TestResultTypeID,
                    idfsTestStatus = @TestStatusTypeID,
                    idfsDiagnosis = @DiseaseID,
                    idfMaterial = @SampleID,
                    idfBatchTest = @BatchTestID,
                    idfObservation = @ObservationID,
                    intTestNumber = @TestNumber,
                    strNote = @Comments,
                    intRowStatus = @RowStatus,
                    datStartedDate = @StartedDate,
                    datConcludedDate = @ResultDate,
                    idfTestedByOffice = @TestedByOrganizationID,
                    idfTestedByPerson = @TestedByPersonID,
                    idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                    idfResultEnteredByPerson = @ResultEnteredByPersonID,
                    blnReadOnly = @ReadOnlyIndicator,
                    blnExternalTest = @ExternalTestIndicator,
                    idfPerformedByOffice = @PerformedByOrganizationID,
                    datReceivedDate = @ReceivedDate,
                    strContactPerson = @ContactPerson,
                    idfMonitoringSession = @MonitoringSessionID,
                    idfVector = @VectorSessionID,
                    idfHumanCase = @HumanDiseaseReportID,
                    idfVetCase = @VeterinaryDiseaseReportID,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfTesting = @TestID;
            END

            INSERT INTO @TestAfterEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545430000000,
                       a.TestID,
                       NULL,
                       b.TestNameTypeID,
                       a.TestNameTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestNameTypeID <> b.TestNameTypeID)
                      OR (
                             a.TestNameTypeID IS NOT NULL
                             AND b.TestNameTypeID IS NULL
                         )
                      OR (
                             a.TestNameTypeID IS NULL
                             AND b.TestNameTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545440000000,
                       a.TestID,
                       NULL,
                       b.TestCategoryTypeID,
                       a.TestCategoryTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestCategoryTypeID <> b.TestCategoryTypeID)
                      OR (
                             a.TestCategoryTypeID IS NOT NULL
                             AND b.TestCategoryTypeID IS NULL
                         )
                      OR (
                             a.TestCategoryTypeID IS NULL
                             AND b.TestCategoryTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80510000000,
                       a.TestID,
                       NULL,
                       b.TestResultTypeID,
                       a.TestResultTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestResultTypeID <> b.TestResultTypeID)
                      OR (
                             a.TestResultTypeID IS NOT NULL
                             AND b.TestResultTypeID IS NULL
                         )
                      OR (
                             a.TestResultTypeID IS NULL
                             AND b.TestResultTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572510000000,
                       a.TestID,
                       NULL,
                       b.TestStatusTypeID,
                       a.TestStatusTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestStatusTypeID <> b.TestStatusTypeID)
                      OR (
                             a.TestStatusTypeID IS NOT NULL
                             AND b.TestStatusTypeID IS NULL
                         )
                      OR (
                             a.TestStatusTypeID IS NULL
                             AND b.TestStatusTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572520000000,
                       a.TestID,
                       NULL,
                       b.DiseaseID,
                       a.DiseaseID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.DiseaseID <> b.DiseaseID)
                      OR (
                             a.DiseaseID IS NOT NULL
                             AND b.DiseaseID IS NULL
                         )
                      OR (
                             a.DiseaseID IS NULL
                             AND b.DiseaseID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576430000000,
                       a.TestID,
                       NULL,
                       b.SampleID,
                       a.SampleID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.SampleID <> b.SampleID)
                      OR (
                             a.SampleID IS NOT NULL
                             AND b.SampleID IS NULL
                         )
                      OR (
                             a.SampleID IS NULL
                             AND b.SampleID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80470000000,
                       a.TestID,
                       NULL,
                       b.BatchTestID,
                       a.BatchTestID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.BatchTestID <> b.BatchTestID)
                      OR (
                             a.BatchTestID IS NOT NULL
                             AND b.BatchTestID IS NULL
                         )
                      OR (
                             a.BatchTestID IS NULL
                             AND b.BatchTestID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80500000000,
                       a.TestID,
                       NULL,
                       b.ObservationID,
                       a.ObservationID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ObservationID <> b.ObservationID)
                      OR (
                             a.ObservationID IS NOT NULL
                             AND b.ObservationID IS NULL
                         )
                      OR (
                             a.ObservationID IS NULL
                             AND b.ObservationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80540000000,
                       a.TestID,
                       NULL,
                       b.TestNumber,
                       a.TestNumber,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestNumber <> b.TestNumber)
                      OR (
                             a.TestNumber IS NOT NULL
                             AND b.TestNumber IS NULL
                         )
                      OR (
                             a.TestNumber IS NULL
                             AND b.TestNumber IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572540000000,
                       a.TestID,
                       NULL,
                       b.Note,
                       a.Note,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.Note <> b.Note)
                      OR (
                             a.Note IS NOT NULL
                             AND b.Note IS NULL
                         )
                      OR (
                             a.Note IS NULL
                             AND b.Note IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578540000000,
                       a.TestID,
                       NULL,
                       b.StartedDate,
                       a.StartedDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.StartedDate <> b.StartedDate)
                      OR (
                             a.StartedDate IS NOT NULL
                             AND b.StartedDate IS NULL
                         )
                      OR (
                             a.StartedDate IS NULL
                             AND b.StartedDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578550000000,
                       a.TestID,
                       NULL,
                       b.ConcludedDate,
                       a.ConcludedDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ConcludedDate <> b.ConcludedDate)
                      OR (
                             a.ConcludedDate IS NOT NULL
                             AND b.ConcludedDate IS NULL
                         )
                      OR (
                             a.ConcludedDate IS NULL
                             AND b.ConcludedDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578560000000,
                       a.TestID,
                       NULL,
                       b.TestedByOfficeID,
                       a.TestedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestedByOfficeID <> b.TestedByOfficeID)
                      OR (
                             a.TestedByOfficeID IS NOT NULL
                             AND b.TestedByOfficeID IS NULL
                         )
                      OR (
                             a.TestedByOfficeID IS NULL
                             AND b.TestedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578570000000,
                       a.TestID,
                       NULL,
                       b.TestedByPersonID,
                       a.TestedByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestedByPersonID <> b.TestedByPersonID)
                      OR (
                             a.TestedByPersonID IS NOT NULL
                             AND b.TestedByPersonID IS NULL
                         )
                      OR (
                             a.TestedByPersonID IS NULL
                             AND b.TestedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578580000000,
                       a.TestID,
                       NULL,
                       b.ResultEnteredByOfficeID,
                       a.ResultEnteredByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ResultEnteredByOfficeID <> b.ResultEnteredByOfficeID)
                      OR (
                             a.ResultEnteredByOfficeID IS NOT NULL
                             AND b.ResultEnteredByOfficeID IS NULL
                         )
                      OR (
                             a.ResultEnteredByOfficeID IS NULL
                             AND b.ResultEnteredByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578590000000,
                       a.TestID,
                       NULL,
                       b.ResultEnteredByPersonID,
                       a.ResultEnteredByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ResultEnteredByPersonID <> b.ResultEnteredByPersonID)
                      OR (
                             a.ResultEnteredByPersonID IS NOT NULL
                             AND b.ResultEnteredByPersonID IS NULL
                         )
                      OR (
                             a.ResultEnteredByPersonID IS NULL
                             AND b.ResultEnteredByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578600000000,
                       a.TestID,
                       NULL,
                       b.ValidatedByOfficeID,
                       a.ValidatedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ValidatedByOfficeID <> b.ValidatedByOfficeID)
                      OR (
                             a.ValidatedByOfficeID IS NOT NULL
                             AND b.ValidatedByOfficeID IS NULL
                         )
                      OR (
                             a.ValidatedByOfficeID IS NULL
                             AND b.ValidatedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578610000000,
                       a.TestID,
                       NULL,
                       b.ValidatedByPersonID,
                       a.ValidatedByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ValidatedByPersonID <> b.ValidatedByPersonID)
                      OR (
                             a.ValidatedByPersonID IS NOT NULL
                             AND b.ValidatedByPersonID IS NULL
                         )
                      OR (
                             a.ValidatedByPersonID IS NULL
                             AND b.ValidatedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578740000000,
                       a.TestID,
                       NULL,
                       b.ReadOnlyIndicator,
                       a.ReadOnlyIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                      OR (
                             a.ReadOnlyIndicator IS NOT NULL
                             AND b.ReadOnlyIndicator IS NULL
                         )
                      OR (
                             a.ReadOnlyIndicator IS NULL
                             AND b.ReadOnlyIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578760000000,
                       a.TestID,
                       NULL,
                       b.NonLaboratoryTestIndicator,
                       a.NonLaboratoryTestIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.NonLaboratoryTestIndicator <> b.NonLaboratoryTestIndicator)
                      OR (
                             a.NonLaboratoryTestIndicator IS NOT NULL
                             AND b.NonLaboratoryTestIndicator IS NULL
                         )
                      OR (
                             a.NonLaboratoryTestIndicator IS NULL
                             AND b.NonLaboratoryTestIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815850000000,
                       a.TestID,
                       NULL,
                       b.ExternalTestIndicator,
                       a.ExternalTestIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ExternalTestIndicator <> b.ExternalTestIndicator)
                      OR (
                             a.ExternalTestIndicator IS NOT NULL
                             AND b.ExternalTestIndicator IS NULL
                         )
                      OR (
                             a.ExternalTestIndicator IS NULL
                             AND b.ExternalTestIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815860000000,
                       a.TestID,
                       NULL,
                       b.PerformedByOfficeID,
                       a.PerformedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.PerformedByOfficeID <> b.PerformedByOfficeID)
                      OR (
                             a.PerformedByOfficeID IS NOT NULL
                             AND b.PerformedByOfficeID IS NULL
                         )
                      OR (
                             a.PerformedByOfficeID IS NULL
                             AND b.PerformedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815870000000,
                       a.TestID,
                       NULL,
                       b.ReceivedDate,
                       a.ReceivedDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ReceivedDate <> b.ReceivedDate)
                      OR (
                             a.ReceivedDate IS NOT NULL
                             AND b.ReceivedDate IS NULL
                         )
                      OR (
                             a.ReceivedDate IS NULL
                             AND b.ReceivedDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815880000000,
                       a.TestID,
                       NULL,
                       b.ContactPerson,
                       a.ContactPerson,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ContactPerson <> b.ContactPerson)
                      OR (
                             a.ContactPerson IS NOT NULL
                             AND b.ContactPerson IS NULL
                         )
                      OR (
                             a.ContactPerson IS NULL
                             AND b.ContactPerson IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailRestore
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    idfObjectDetail,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       a.TestID,
                       NULL,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                where a.RowStatus = 0
                      AND b.RowStatus = 1;
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @TestID, @AuditUserName, @EIDSSObjectID);
            END
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_HUM_REP_WHOEXPORT_GG]...';


GO
--*************************************************************************
-- Name 				: dbo.USSP_HUM_REP_WHOEXPORT_GG
--
-- Description			: SINT03 - WHO Export dbo ON Measles AND Rubella for GG.
-- 
-- Author               : Mandar Kulkarni
-- Revision History
--		Name			Date		Change Detail
--		Ann Xiong		12/02/2022	Replaced 'WHOrep_specific_gis_rayon' with 'WHOrep_specific_gis_region' to get the correct region data and added strImportationCountry and intInitialDiagnosis to the return list.
--		Ann Xiong		12/05/2022	 Generated new CaseID from WHOAreaID in table gisWHOMap
--		Ann Xiong		12/07/2022	Modified to return OutbreakID when the report is related to Outbreak Session and return data on EndDate
--		Ann Xiong		12/15/2022	Fixed a few issues Anatoliy found during test
--		Ann Xiong		12/16/2022	Modified to return sample types as a comma separated string if multiple samples were collected
--		Ann Xiong		12/19/2022	Modified to return the correct strImportationCountry
--		Ann Xiong		12/22/2022	Fixed a few issues Anatoliy found during test on 12/22/2022
--
-- Testing code:

--Example of a call of PROCEDURE:
--GG
--exec dbo.[USSP_HUM_REP_WHOEXPORT_GG] @LangID=N'en',@StartDate='20140101',@EndDate='20141231', @idfsDiagnosis = 9843460000000   
--*************************************************************************

ALTER  PROCEDURE [dbo].[USSP_HUM_REP_WHOEXPORT_GG]
 (
		@LangID		AS NVARCHAR(50), 
		@StartDate DATETIME,
		@EndDate DATETIME,
		@idfsDiagnosis BIGINT
 )
AS	

BEGIN


DECLARE	@cmd	NVARCHAR(4000)

-- Drop temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #HumanCasesToExport'
	EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#FFToExport') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #FFToExport'
	EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#ResultTable') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #ResultTable'
	EXEC sp_executesql @cmd
END

-- CREATE temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NULL
CREATE TABLE #HumanCasesToExport
(	idfHumanCase				BIGINT NOT NULL PRIMARY KEY,
	idfHuman					BIGINT NOT NULL,
	idfCRAddress				BIGINT NULL,
	idfsDiagnosis				BIGINT NOT NULL,
	idfCSObservation			BIGINT NULL,
	idfEpiObservation			BIGINT NULL,
	datDateOnset				DATETIME NOT NULL,
	idfOutbreak					BIGINT NULL,
	NumberOfReceivedDoses		NVARCHAR(50) collate Cyrillic_General_CI_AS NULL,
	DateOfLastVaccination		DATETIME NULL,
	Fever						BIGINT NULL,
	Cough						BIGINT NULL,
	Coryza						BIGINT NULL,  		
	Conjunctivitis				BIGINT NULL,  
	RashDuration				NVARCHAR(50) collate Cyrillic_General_CI_AS NULL,	
	SourceOfInfection			BIGINT NULL,   
	NameOfSourceOfInfection		NVARCHAR(100) collate Cyrillic_General_CI_AS NULL,	
	Complications				BIGINT NULL,    
	Encephalitis				BIGINT NULL,    
	Pneumonia					BIGINT NULL,    	
	Diarrhoea					BIGINT NULL,    
	Other						NVARCHAR(500) collate Cyrillic_General_CI_AS NULL,	
	datConcludedDate			DATETIME NULL,
	idfsSampleType				BIGINT NULL,
	datFieldCollectionDate		DATETIME NULL,
	idfsTestResult				BIGINT NULL,
	idfsTestStatus				BIGINT NULL,
	idfTesting					BIGINT NULL
)
DELETE FROM #HumanCasesToExport

IF Object_ID('tempdb..#FFToExport') IS NULL
CREATE TABLE #FFToExport
(	idfActivityParameters		BIGINT NOT NULL PRIMARY KEY,
	idfsParameter				BIGINT NOT NULL,
	idfObservation				BIGINT NOT NULL,
	idfRow						BIGINT NOT NULL,
	varValue					sql_variant NULL
)
DELETE FROM #FFToExport

IF Object_ID('tempdb..#ResultTable') IS NULL
CREATE TABLE	#ResultTable
(	  
	  idfCase					BIGINT NOT NULL PRIMARY KEY
	, strCaseID					NVARCHAR(300) collate database_default NOT NULL 
	, intAreaID					INT NOT NULL 
	, datDRash					date NULL
	, intGenderID				INT NOT NULL 
	, datDBirth					date NULL
	, intAgeAtRashOnset			INT NULL
	, intNumOfVaccines			INT NULL
	, datDvaccine				DATETIME NULL
	, datDNotification			DATETIME NULL
	, datDInvestigation			DATETIME NULL
	, intClinFever				INT NULL
	, intClinCCC				INT NULL
	, intClinRashDuration		INT NULL
	, intClinOutcome			INT NULL
	, intClinHospitalization	INT NULL
	, intSrcInf					INT NULL
	, intSrcOutbreakRelated		INT NULL
	, strSrcOutbreakID			NVARCHAR(50) collate database_default NULL default NULL
	, intCompComplications		INT NULL
	, intCompEncephalitis		INT NULL
	, intCompPneumonia			INT NULL
	, intCompMalnutrition		INT NULL
	, intCompDiarrhoea			INT NULL
	, intCompOther				INT NULL
	, intFinalClassification	INT NULL
	, datDSpecimen				DATETIME NULL
	, intSpecimen				INT NULL
	, datDLabResult				DATETIME NULL
	, intMeaslesIgm				INT NULL
	, intMeaslesVirusDetection	INT NULL		
	, intRubellaIgm				INT NULL
	, intRubellaVirusDetection	INT NULL
	, strCommentsEpi			NVARCHAR(500) collate database_default NULL 
)
DELETE FROM #ResultTable

DECLARE 
  
	@idfsSummaryReportType			BIGINT,
	
	
	@FFP_DateOfOnset_M				BIGINT,
	@FFP_DateOfOnset_R				BIGINT,  	
		
	@FFP_NumberOfReceivedDoses_M	BIGINT,
	@FFP_NumberOfReceivedDoses_R	BIGINT,  		
	
	@FFP_DateOfLastVaccination_M	BIGINT,
	@FFP_DateOfLastVaccination_R	BIGINT,  		
	
	@FFP_Fever_M					BIGINT,
	@FFP_Fever_R					BIGINT,  		
	
	@FFP_Cough_M					BIGINT,
	@FFP_Cough_R					BIGINT,  	
	
	@FFP_Coryza_M					BIGINT,
	@FFP_Coryza_R					BIGINT,  	  	
	
	@FFP_Conjunctivitis_M			BIGINT,
	@FFP_Conjunctivitis_R			BIGINT,  	   				
	
	@FFP_RashDuration_M				BIGINT,
	@FFP_RashDuration_R				BIGINT,  		
	
	@FFP_SourceOfInfection_M		BIGINT,
	@FFP_SourceOfInfection_R		BIGINT,  	
	
	@FF_NameofSourceofInfection		BIGINT,	
	
	@FFP_Complications_M			BIGINT,
	@FFP_Complications_R			BIGINT,  		

	@FFP_Encephalitis_M				BIGINT,
	@FFP_Encephalitis_R				BIGINT,  		
	  		
	@FFP_Pneumonia_M				BIGINT,
	@FFP_Pneumonia_R				BIGINT,  		
	  		  		
	@FFP_Diarrhoea_M				BIGINT,
	--@FFP_Diarrhoea_R				BIGINT,  		
	  		  		
	@FFP_Other_M					BIGINT,  		  		
	--@FFP_Other_R					BIGINT,  	 
	 		
	@idfsDiagnosis_Measles			BIGINT,
	@idfsDiagnosis_Rubella			BIGINT
	
			  	
SET @idfsSummaryReportType = 10290027 /*WHO dbo - AJ&GG*/

--HCS FF - Rash onset date. / HCS FF- Date of onset
SELECT @FFP_DateOfOnset_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfOnset_M'
AND intRowStatus = 0

SELECT @FFP_DateOfOnset_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfOnset_R'
AND intRowStatus = 0
  
--HEI - Number of received doses (any vaccine with measles component) / HEI - Number of Measles vaccine doses received
SELECT @FFP_NumberOfReceivedDoses_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_NumberOfReceivedDoses_M'
AND intRowStatus = 0

SELECT @FFP_NumberOfReceivedDoses_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_NumberOfReceivedDoses_R'
AND intRowStatus = 0  	

--HEI - Date of last vaccination/HEI - Date of last Measles vaccine
SELECT @FFP_DateOfLastVaccination_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfLastVaccination_M'
AND intRowStatus = 0	

SELECT @FFP_DateOfLastVaccination_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfLastVaccination_R'
AND intRowStatus = 0	  
	
--HCS - Fever/HCS - Fever
SELECT @FFP_Fever_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Fever_M'
AND intRowStatus = 0

SELECT @FFP_Fever_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Fever_R'
AND intRowStatus = 0  	
	
--HCS - Cough / Coryza / Conjunctivitis /HCS - Cough / Coryza / Conjunctivitis
SELECT @FFP_Cough_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Cough_M'
AND intRowStatus = 0	

SELECT @FFP_Cough_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Cough_R'
AND intRowStatus = 0	 


SELECT @FFP_Coryza_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Coryza_M'
AND intRowStatus = 0	

SELECT @FFP_Coryza_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Coryza_R'
AND intRowStatus = 0	  	


SELECT @FFP_Conjunctivitis_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Conjunctivitis_M'
AND intRowStatus = 0	

SELECT @FFP_Conjunctivitis_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Conjunctivitis_R'
AND intRowStatus = 0	  	


--HCS - Rash duration / HCS - Duration (days)
SELECT @FFP_RashDuration_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_RashDuration_M'
AND intRowStatus = 0

SELECT @FFP_RashDuration_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_RashDuration_R'
AND intRowStatus = 0  	
	
--EPI - Source of infection / EPI - Source of infection
SELECT @FFP_SourceOfInfection_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_SourceOfInfection_M'
AND intRowStatus = 0		

SELECT @FFP_SourceOfInfection_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_SourceOfInfection_R'
AND intRowStatus = 0	

SELECT @FF_NameofSourceofInfection = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FF_NameofSourceofInfection'
AND intRowStatus = 0	  	

--HCS - Complications / HCS - Complications
SELECT @FFP_Complications_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Complications_M'
AND intRowStatus = 0		

SELECT @FFP_Complications_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Complications_R'
AND intRowStatus = 0		  

--HCS - Encephalitis / HCS - Encephalitis
SELECT @FFP_Encephalitis_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Encephalitis_M'
AND intRowStatus = 0		

SELECT @FFP_Encephalitis_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Encephalitis_R'
AND intRowStatus = 0	  	

--HCS - Pneumonia / HCS - Pneumonia
SELECT @FFP_Pneumonia_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Pneumonia_M'
AND intRowStatus = 0	

SELECT @FFP_Pneumonia_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Pneumonia_R'
AND intRowStatus = 0	  	
	
--HCS - Diarrhoea / HCS - Diarrhoea
SELECT @FFP_Diarrhoea_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Diarrhoea_M'
AND intRowStatus = 0		

--SELECT @FFP_Diarrhoea_R = idfsFFObject FROM trtFFObjectForCustomReport
--WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Diarrhoea_R'
--AND intRowStatus = 0		  	

--HCS - Other (specify) / HCS - Other
SELECT @FFP_Other_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Other_M'
AND intRowStatus = 0	 

--SELECT @FFP_Other_R = idfsFFObject FROM trtFFObjectForCustomReport
--WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Other_R'
--AND intRowStatus = 0	   	

 	
--idfsDiagnosis for:
--Measles
SELECT top 1 @idfsDiagnosis_Measles = d.idfsDiagnosis
FROM trtDiagnosis d
  INNER JOIN dbo.trtDiagnosisToGroupForReportType dgrt
  ON dgrt.idfsDiagnosis = d.idfsDiagnosis
  AND dgrt.idfsCustomReportType = @idfsSummaryReportType
  
  INNER JOIN dbo.trtReportDiagnosisGroup dg
  ON dgrt.idfsReportDiagnosisGroup = dg.idfsReportDiagnosisGroup
  AND dg.intRowStatus = 0 AND dg.strDiagnosisGroupAlias = 'DG_Measles'
 WHERE d.intRowStatus = 0

--Rubella
SELECT top 1 @idfsDiagnosis_Rubella = d.idfsDiagnosis
FROM trtDiagnosis d
  INNER JOIN dbo.trtDiagnosisToGroupForReportType dgrt
  ON dgrt.idfsDiagnosis = d.idfsDiagnosis
  AND dgrt.idfsCustomReportType = @idfsSummaryReportType
  
  INNER JOIN dbo.trtReportDiagnosisGroup dg
  ON dgrt.idfsReportDiagnosisGroup = dg.idfsReportDiagnosisGroup
  AND dg.intRowStatus = 0 AND dg.strDiagnosisGroupAlias = 'DG_Rubella'
 WHERE d.intRowStatus = 0	

DECLARE	@DateOnsetParameter BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@DateOnsetParameter = @FFP_DateOfOnset_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@DateOnsetParameter = @FFP_DateOfOnset_R

INSERT INTO	#HumanCasesToExport
(	idfHumanCase,
	idfHuman,
	idfCRAddress,
	idfsDiagnosis,
	idfCSObservation,
	idfEpiObservation,
	datDateOnset,
	idfOutbreak
)
SELECT	hc.idfHumanCase,
		h.idfHuman,
		--h.idfCurrentResidenceAddress,
		CASE
			WHEN hc.idfOutbreak is null THEN h.idfCurrentResidenceAddress
			ELSE to1.idfGeoLocation
		END As idfCurrentResidenceAddress,
		ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis),
		hc.idfCSObservation,
		hc.idfEpiObservation,
		COALESCE(	
			CASE
				WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
						(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
					THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
					ELSE NULL
			END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			),
		hc.idfOutbreak
FROM tlbHumanCase hc

	INNER JOIN tlbHuman h
	ON hc.idfHuman = h.idfHuman AND  h.intRowStatus = 0	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM tlbActivityParameters ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @DateOnsetParameter
			AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_DateOfOnset
		LEFT JOIN tlbOutbreak to1
	ON to1.idfOutbreak = hc.idfOutbreak
	AND to1.intRowStatus = 0  
WHERE	
	hc.intRowStatus = 0
	AND 	
	ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) = @idfsDiagnosis 
	AND
	COALESCE(	
		CASE
			WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
					(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
				THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
				ELSE NULL
		END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			) >= @StartDate
	
	AND
	COALESCE(	
		CASE
			WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
					(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
				THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
				ELSE NULL
		END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			) <= @EndDate   			
		AND hc.idfHumanCase = (SELECT TOP 1 idfHumanCase FROM tlbHumanCase thc WHERE thc.idfCSObservation = hc.idfCSObservation and thc.idfsFinalDiagnosis = @idfsDiagnosis)

INSERT INTO	#FFToExport
(	idfActivityParameters,
	idfsParameter,
	idfObservation,
	idfRow,
	varValue
)
SELECT		ap.idfActivityParameters,
			ap.idfsParameter,
			ap.idfObservation,
			ap.idfRow,
			ap.varValue
FROM		tlbActivityParameters ap
INNER JOIN	#HumanCasesToExport hc_cs
ON			hc_cs.idfCSObservation = ap.idfObservation
WHERE		ap.intRowStatus = 0

INSERT INTO	#FFToExport
(	idfActivityParameters,
	idfsParameter,
	idfObservation,
	idfRow,
	varValue
)
SELECT		ap.idfActivityParameters,
			ap.idfsParameter,
			ap.idfObservation,
			ap.idfRow,
			ap.varValue
FROM		tlbActivityParameters ap
INNER JOIN	#HumanCasesToExport hc_epi
ON			hc_epi.idfEpiObservation = ap.idfObservation
left JOIN	#HumanCasesToExport hc_cs
ON			hc_cs.idfCSObservation = hc_epi.idfEpiObservation
WHERE		ap.intRowStatus = 0
			AND hc_cs.idfHumanCase IS NULL


DECLARE	@FFP_NumberOfReceivedDoses BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_NumberOfReceivedDoses = @FFP_NumberOfReceivedDoses_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_NumberOfReceivedDoses = @FFP_NumberOfReceivedDoses_R

DECLARE	@FFP_DateOfLastVaccination BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_DateOfLastVaccination = @FFP_DateOfLastVaccination_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_DateOfLastVaccination = @FFP_DateOfLastVaccination_R
	
DECLARE	@FFP_Fever BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Fever = @FFP_Fever_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Fever = @FFP_Fever_R

DECLARE	@FFP_Cough BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Cough = @FFP_Cough_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Cough = @FFP_Cough_R
	
DECLARE	@FFP_Coryza BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Coryza = @FFP_Coryza_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Coryza = @FFP_Coryza_R
	
DECLARE	@FFP_Conjunctivitis BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Conjunctivitis = @FFP_Conjunctivitis_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Conjunctivitis = @FFP_Conjunctivitis_R
	
DECLARE	@FFP_RashDuration BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_RashDuration = @FFP_RashDuration_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_RashDuration = @FFP_RashDuration_R

DECLARE	@FFP_SourceOfInfection BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_SourceOfInfection = @FFP_SourceOfInfection_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_SourceOfInfection = @FFP_SourceOfInfection_R

--DECLARE	@FFP_NameOfSourceOfInfection BIGINT = @FF_NameofSourceofInfection
DECLARE	@FFP_NameOfSourceOfInfection BIGINT = 9934540000000

DECLARE	@FFP_Complications BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Complications = @FFP_Complications_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Complications = @FFP_Complications_R

DECLARE	@FFP_Encephalitis BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Encephalitis = @FFP_Encephalitis_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Encephalitis = @FFP_Encephalitis_R

DECLARE	@FFP_Pneumonia BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Pneumonia = @FFP_Pneumonia_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Pneumonia = @FFP_Pneumonia_R

DECLARE	@FFP_Diarrhoea BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Diarrhoea = @FFP_Diarrhoea_M

DECLARE	@FFP_Other BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Other = @FFP_Other_M


UPDATE hc
SET	hc.NumberOfReceivedDoses = CAST(ap_NumberOfReceivedDoses.varValue AS NVARCHAR(50)),
	hc.DateOfLastVaccination = 
	CASE
		WHEN CAST(SQL_VARIANT_PROPERTY(ap_DateOfLastVaccination.varValue, 'BaseType') AS NVARCHAR) like N'%date%' or
				(CAST(SQL_VARIANT_PROPERTY(ap_DateOfLastVaccination.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfLastVaccination.varValue AS NVARCHAR)) = 1 )	
			THEN dbo.FN_GBL_DATECUTTIME(CAST(ap_DateOfLastVaccination.varValue AS DATETIME))
		ELSE NULL
	END,
	hc.Fever = 
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Fever.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Fever.varValue AS BIGINT)
		ELSE NULL
	END,
	hc.Cough =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Cough.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Cough.varValue AS BIGINT)
		ELSE NULL
	END,
	hc.Coryza =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Coryza.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Coryza.varValue AS BIGINT)
		ELSE NULL
	END,  		
	hc.Conjunctivitis =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Conjunctivitis.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Conjunctivitis.varValue AS BIGINT)
		ELSE NULL
	END,  
	hc.RashDuration = CAST(ap_RashDuration.varValue AS NVARCHAR(50)),	
	hc.SourceOfInfection =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_SourceOfInfection.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_SourceOfInfection.varValue AS BIGINT)
		ELSE NULL
	END,   
	hc.NameOfSourceOfInfection = CAST(ap_NameOfSourceOfInfection.varValue AS NVARCHAR(100)),  	
	hc.Complications =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Complications.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Complications.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Encephalitis =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Encephalitis.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Encephalitis.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Pneumonia =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Pneumonia.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Pneumonia.varValue AS BIGINT)
		ELSE NULL
	END,    	
	hc.Diarrhoea =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Diarrhoea.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Diarrhoea.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Other = CAST(ap_Other.varValue AS NVARCHAR(500))	  		  		  		  			

 FROM #HumanCasesToExport hc
			
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_NumberOfReceivedDoses
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_NumberOfReceivedDoses		
	 			
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_DateOfLastVaccination
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_DateOfLastVaccination 	
		
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Fever
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Fever	
	
		
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Cough
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Cough	
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Coryza
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Coryza
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Conjunctivitis	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Conjunctivitis

	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_RashDuration	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_RashDuration
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_SourceOfInfection	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_SourceOfInfection

	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_NameOfSourceOfInfection	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_NameOfSourceOfInfection
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Complications		
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Complications
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Encephalitis				
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Encephalitis

	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Pneumonia				
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Pneumonia
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Diarrhoea						
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Diarrhoea


	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Other							
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Other


UPDATE	ct
SET		ct.datConcludedDate = material.datConcludedDate,
		ct.idfsSampleType = material.idfsSampleType,
		ct.datFieldCollectionDate = material.datFieldCollectionDate,
		ct.idfsTestResult = material.idfsTestResult,
		ct.idfsTestStatus = material.idfsTestStatus,
		ct.idfTesting = material.idfTesting
FROM	#HumanCasesToExport ct	
OUTER APPLY	(
	SELECT top 1 
		dbo.fnDateCutTime(m.datSampleStatusDate) AS datConcludedDate,		--HDR use m.datSampleStatusDate as result date
		ISNULL(rm.idfsSampleType, m.idfsSampleType) AS idfsSampleType,
		m.datFieldCollectionDate,
		tt.idfsTestResult,
		tt.idfsTestStatus,
		tt.idfTesting
	FROM tlbMaterial m
		INNER JOIN tlbTesting tt
			--INNER JOIN trtTestTypeForCustomReport ttcr
			--ON ttcr.idfsTestName = tt.idfsTestName
			--AND ttcr.intRowStatus = 0
			--AND ttcr.idfsCustomReportType = @idfsSummaryReportType
		ON tt.idfMaterial = m.idfMaterial
		/*Added 2018-01-22 start*/
		AND tt.idfsDiagnosis = ct.idfsDiagnosis
		/*Added 2018-01-22 END*/
		AND tt.intRowStatus = 0
		AND tt.datConcludedDate IS NOT NULL
		
		left JOIN tlbMaterial rm
		ON rm.idfMaterial = m.idfParentMaterial
		AND rm.intRowStatus = 0						
		
   WHERE m.idfHumanCase = ct.idfHumanCase
			AND m.intRowStatus = 0
   ORDER BY ISNULL(tt.datConcludedDate, '19000101') DESC, m.datFieldCollectionDate DESC
   )	AS material	 

 DECLARE @SampleTypeIDs TABLE
 (
	strSampleTypeIDs	NVARCHAR(100),
	idfHumanCase BIGINT
 )

 INSERT INTO @SampleTypeIDs (strSampleTypeIDs, idfHumanCase)
	SELECT STRING_AGG([idfsSampleType], ','), 
			SampleTypes.idfHumanCase
	FROM 
		(SELECT	CASE Samples.idfsSampleType
					WHEN 9844480000000	/*Blood - Serum*/  THEN 1 	--Blood - Serum
					WHEN 9845550000000	/*Saliva*/ THEN 2 		--Saliva/oral fluid
					WHEN 9845840000000	/*Swab - Nose or Swab - Pharyngeal or Swab - Rhinopharyngeal*/ THEN 3 --Nasopharyngeal swab
					WHEN 52614520000000 	/*Dry Blood Spot*/ THEN 4 	--Dry Blood Spot
					WHEN 9846060000000	/*Urine*/ THEN 5 			--Urine
					WHEN 9844450000000 	/*Blood - anticoagulated whole blood*/ THEN 6 --EDTA whole blood
					WHEN -1 THEN NULL
					ELSE 7
			END AS idfsSampleType,
			Samples.idfHumanCase
		FROM		dbo.tlbMaterial Samples 
				INNER JOIN	dbo.tlbHumanCase as hc 
					ON Samples.idfHumanCase  = hc.idfHumanCase 
				LEFT JOIN	dbo.FN_GBL_REFERENCEREPAIR(@LangID,19000087) SampleType 
					ON	SampleType.idfsReference = Samples.idfsSampleType
				INNER JOIN #HumanCasesToExport ct
					ON hc.idfHumanCase = ct.idfHumanCase
		WHERE		Samples.idfHumanCase = ct.idfHumanCase
				AND	Samples.intRowStatus = 0
		) SampleTypes
	GROUP BY SampleTypes.idfHumanCase


	SELECT
		ct.idfHumanCase AS idfCase,
		CAST(to1.idfOutbreak as varchar(20)) AS strReportID,
		CONCAT(gwm.WHOAreaID,YEAR(@StartDate), hc.strCaseID) AS strCaseID,
		gwm.AreaID AS strAreaID, 
		dbo.fnDateCutTime(ct.datDateOnset) AS datDRash, 
		CASE 
			WHEN h.idfsHumanGender = 10043001 THEN 2
			WHEN h.idfsHumanGender = 10043002 THEN 1
			ELSE 4
		END AS intGenderID, 
		--dbo.fnDateCutTime(h.datDateofBirth) AS datDBirth, 
		CAST(h.datDateofBirth AS DATE) AS datDBirth, 
		CASE
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042003	-- Years 
					AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 200)
				THEN	hc.intPatientAge
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042002	-- Months
					AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 60)
				THEN	CAST(hc.intPatientAge / 12 AS INT)
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042001	-- Days
					AND (ISNULL(hc.intPatientAge, -1) >= 0)
				THEN	0
			ELSE	
				DATEDIFF(YEAR, h.datDateofBirth, ct.datDateOnset) + 
                         CASE 
                           WHEN MONTH(ct.datDateOnset) < MONTH(h.datDateofBirth) THEN -1 
                           WHEN MONTH(ct.datDateOnset) > MONTH(h.datDateofBirth) THEN 0 
                           ELSE 
                             CASE WHEN DAY(ct.datDateOnset) < DAY(h.datDateofBirth) THEN -1 ELSE 0 END 
                         END
		END	 AS intAgeAtRashOnset,     	
		
		ISNULL(CASE WHEN isnumeric(ct.NumberOfReceivedDoses) = 1  AND CAST(ct.NumberOfReceivedDoses AS varchar) NOT in ('.', ',', '-', '+', '$')
					THEN	
						CASE  CAST(ct.NumberOfReceivedDoses AS BIGINT)
							WHEN 9878670000000 THEN 0
							WHEN 9878680000000 THEN 1
							WHEN 9878690000000 THEN 2
							WHEN 9878700000000 THEN 3
							WHEN 9878710000000 THEN 9
							WHEN -1 THEN 2222
							ELSE 2222
						END	
					ELSE 2222 END
			, 2222)	 AS intNumOfVaccines, 

		CASE CAST(ct.DateOfLastVaccination AS DATE) 
			WHEN '2000-01-01' THEN NULL
			WHEN '1900-01-01' THEN NULL
			ELSE CAST(ct.DateOfLastVaccination AS DATE) 
		END	 AS datDvaccine, 			
		CAST(hc.datNotificationDate AS DATE) AS datDNotification, 
		CAST(hc.datInvestigationStartDate AS DATE) AS datDInvestigation, 
 		
		CASE ct.Fever
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			WHEN 25660000000 THEN 9
			ELSE NULL
		END	 AS intClinFever, 
		
		CASE 
			CASE 
				WHEN ct.Cough = 25460000000 or ct.Coryza = 25460000000 or ct.Conjunctivitis = 25460000000 THEN 25460000000
				WHEN ct.Cough = 25640000000 AND ct.Coryza = 25640000000 AND ct.Conjunctivitis = 25640000000 THEN 25640000000
				ELSE 25660000000
			END		
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			ELSE 9
		END	 AS intClinCCC, 			    			
		CASE WHEN isnumeric(ct.RashDuration) = 1  AND CAST(ct.RashDuration AS varchar) NOT in ('.', ',', '-', '+', '$')
				THEN --CAST(ct.RashDuration AS INT) 
					 CAST(CAST(replace(ct.RashDuration,',','.') AS decimal) AS INT)
				ELSE 2222 END AS intClinRashDuration,
			
		CASE hc.idfsOutcome
			WHEN 10770000000 THEN 1
			WHEN 10760000000 THEN 2
			WHEN 10780000000 THEN 3
			ELSE 3
		END AS intClinOutcome, 
		
		CASE hc.idfsYNHospitalization   
			WHEN 10100001 THEN 1
			WHEN 10100002 THEN 2
			WHEN 10100003 THEN 9
			ELSE NULL
		END AS intClinHospitalization, 
		
		-- GG - FF parameter = 'Source of infection' -- idfsParameter = 9951440000000
		--9879590000000	Imported
		--9879600000000	Import-related
		--9879610000000	Indigenous
		--9879620000000	Unknown
		--Indigenous=Endemic, Imported=Imported, Import-related=Import-related, Unknown = Unknown, Blank = Blank

		CASE ct.SourceOfInfection 
			--GG
			WHEN 9879590000000 THEN 1 --Imported = Imported
			WHEN 9879610000000 THEN 2 --Indigenous = Endemic
			WHEN 9879600000000 THEN 3 -- Import-related=Import-related
			WHEN 9879620000000 THEN 9 --  Unknown = Unknown
			ELSE NULL --Blank = Blank
		END	 AS intSrcInf, 
		
		
		CASE hc.idfsYNRelatedToOutbreak
			WHEN 10100001 THEN 1
			WHEN 10100002 THEN 2
			WHEN 10100003 THEN 9
			ELSE 
				CASE WHEN (to1.strOutbreakID IS NOT NULL) THEN 1
					ELSE 2
				END
		END AS intSrcOutbreakRelated, 
  
		to1.strOutbreakID AS strSrcOutbreakID,
		
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN
		  CASE 
			CASE 
				-- GG
				WHEN ct.Complications = 25460000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25460000000
				WHEN ct.Complications = 25640000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25640000000
				WHEN ct.Complications = 25660000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25660000000
				ELSE 25660000000
			END		
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			WHEN 25660000000 THEN 9
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompComplications, 		 					
		
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Encephalitis 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END	 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompEncephalitis, 				
	
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Pneumonia 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END		 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompPneumonia, 				
    
		NULL AS intCompMalnutrition, 
	
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Diarrhoea 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END		 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompDiarrhoea, 		

		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE WHEN len(ct.Other) > 0 THEN 1 ELSE 2 END 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompOther, 		

		CASE 
			WHEN hc.idfsFinalCaseStatus = 370000000 or hc.idfsFinalCaseStatus = 12137920000000  --NOT a CASE
					THEN 0
			WHEN hc.idfsFinalCaseStatus = 350000000 --Confirmed
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND hc.blnLabDiagBasis = 1
					THEN 1
			WHEN hc.idfsFinalCaseStatus = 350000000  --Confirmed
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND ISNULL(hc.blnLabDiagBasis, 0) = 0
				AND hc.blnEpiDiagBasis = 1
					THEN 2
			--WHEN hc.idfsFinalCaseStatus = 350000000  --Confirmed
			--	AND ISNULL(hc.blnLabDiagBasis, 0) = 0
			--	AND hc.blnClinicalDiagBasis = 1
			--		THEN 3
			WHEN hc.idfsFinalCaseStatus = 360000000 --Probable
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND (hc.blnLabDiagBasis = 1 or hc.blnEpiDiagBasis = 1 or hc.blnClinicalDiagBasis = 1)
					THEN 3
			WHEN hc.idfsFinalCaseStatus = 350000000 
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND hc.blnLabDiagBasis = 1
					THEN 6
			WHEN hc.idfsFinalCaseStatus = 350000000 
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND ISNULL(hc.blnLabDiagBasis, 0) = 0
				AND hc.blnEpiDiagBasis = 1
					THEN 7
			WHEN hc.idfsFinalCaseStatus = 360000000 --Probable
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND  (hc.blnLabDiagBasis = 1 or hc.blnEpiDiagBasis = 1 or hc.blnClinicalDiagBasis = 1)
					THEN 8
			WHEN hc.idfsFinalCaseStatus = 380000000	--Suspect
				OR hc.idfsFinalCaseStatus = 12137920000000
				or hc.idfsFinalCaseStatus IS NULL
				or (hc.blnLabDiagBasis IS NULL AND hc.blnEpiDiagBasis IS NULL AND hc.blnClinicalDiagBasis IS NULL)
					THEN NULL
			ELSE NULL
		END intFinalClassification,        
    
    
		CASE 
		   WHEN hc.idfsYNSpecimenCollected = 10100001 THEN ct.datFieldCollectionDate
		   ELSE NULL
		END AS datDSpecimen,       
        
		--Type of sample associated with the test which result IS shown in #29/31. 
		--IF #29/31 IS blank THEN the sample with the latest date of sample collection should be taken. 
		--Blood = 1 Serum, 
		--Blood - serum=1 Serum, 
		--Saliva=2 Saliva/oral fluid, 
		--Swab - Rhinopharyngeal = 3 Nasopharyngeal swab, 
		--Urine=5 Urine, 
		--Blood - anticoagulated whole blood= 6 EDTA whole blood, 
		--in other CASE = 7 Other specimen. 
		--Which sample to send, it shall be defined BY tests (see 29/31) NB: Parent Sample Type should be tranferred to CISID in CASE Sample Derivative was created.  
		
		st.strSampleTypeIDs AS strSpecimen,

		CASE 
		   WHEN hc.idfsYNSpecimenCollected = 10100001 THEN ct.datConcludedDate
		   ELSE NULL
		END AS datDLabResult,    			            
       
		

		--Test Name: ELISA IgM, Antibody detection
		--The Result of the lastest "ELISA IgM, Antibody detection" 
		--Test Name shall be taken (BY Result Date). 
		--1 Positive = Positive AND Test Status = Final or Amended, 
		--2 Negative= Negative AND Test Status = Final or Amended, 
		--4 Inclonclusive = Cut off AND Test Status = Final or Amended, 
		--0 NOT Tested = IF sample data IS filled in #26/27 but no test data available, 
		--3 In Process = any test result (including blank) for assigned test AND Test Status = In Process or Preliminary      
		CASE
			ISNULL(
					CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfTesting IS NULL AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
					END, -1)
			--GG
			WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Not Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intMeaslesIgm,    
		
		CASE
			ISNULL(
					CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfTesting IS NULL AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
					END, -1)
			--GG
			--WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Not Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intMeaslesVirusDetection,
		
		CASE
			ISNULL(
				CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfsTestStatus  in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfTesting IS NULL	 AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
			END, -1)
			WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intRubellaIgm,  
		NULL AS intRubellaVirusDetection,
		hc.strSummaryNotes AS strComments,
		CASE ct.SourceOfInfection 
			--GG
			WHEN 9879590000000  --Imported = Imported
				THEN	
					CASE WHEN CHARINDEX('Azerbaijan',ct.NameOfSourceOfInfection) > 0 THEN 'AZ' ELSE 'GE' END 
			ELSE '' --Blank = Blank
		END strImportationCountry,

		CASE 
			WHEN CHARINDEX('Measles',NonNotifiableDiagnosisRef.[name]) > 0
					THEN 1
			WHEN CHARINDEX('Rubella',NonNotifiableDiagnosisRef.[name]) > 0
					THEN 2
			ELSE 
				CASE WHEN NonNotifiableDiagnosisRef.[name] IS NULL
					THEN 9
				ELSE 3
				END
		END intInitialDiagnosis
 			      			
 FROM	#HumanCasesToExport ct
	INNER JOIN tlbHumanCase hc
	ON hc.idfHumanCase = ct.idfHumanCase

	INNER  JOIN tlbHuman h
	ON h.idfHuman = ct.idfHuman

	left JOIN	tlbGeoLocation gl
	ON gl.idfGeoLocation = ct.idfCRAddress

	LEFT JOIN tlbOutbreak to1
	ON to1.idfOutbreak = hc.idfOutbreak
	AND to1.intRowStatus = 0   

	LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000149) AS NonNotifiableDiagnosisRef
			ON NonNotifiableDiagnosisRef.idfsReference = hc.idfsNonNotifiableDiagnosis

	LEFT JOIN gisWHOMap gwm
			ON gwm.idfsLocation = ISNULL(gl.idfsRayon, gl.idfsRegion)

	INNER JOIN @SampleTypeIDs st
	ON st.idfHumanCase = ct.idfHumanCase

ORDER BY ct.datDateOnset, hc.strCaseID


--INSERT INTO	#ResultTable
-- (	
--	  idfCase
--	, strCaseID	
--	, intAreaID	
--	, datDRash	
--	, intGenderID
--	, datDBirth	
--	, intAgeAtRashOnset	
--	, intNumOfVaccines	
--	, datDvaccine	
--	, datDNotification	
--	, datDInvestigation	
--	, intClinFever		
--	, intClinCCC	
--	, intClinRashDuration	
--	, intClinOutcome		
--	, intClinHospitalization	
--	, intSrcInf				
--	, intSrcOutbreakRelated		
--	, strSrcOutbreakID		
--	, intCompComplications	
--	, intCompEncephalitis	
--	, intCompPneumonia		
--	, intCompMalnutrition	
--	, intCompDiarrhoea		
--	, intCompOther		
--	, intFinalClassification
--	, datDSpecimen			
--	, intSpecimen			
--	, datDLabResult			
--	, intMeaslesIgm			
--	, intMeaslesVirusDetection	
--	, intRubellaIgm		
--	, intRubellaVirusDetection		
--	, strCommentsEpi			
--)
--SELECT 
--	idfHumanCase
--	, strCaseID	
--	, intAreaID	
--	, datDRash	
--	, intGenderID
--	, datDBirth	
--	, intAgeAtRashOnset	
--	, intNumOfVaccines	
--	, datDvaccine	
--	, datDNotification	
--	, datDInvestigation	
--	, intClinFever		
--	, intClinCCC	
--	, intClinRashDuration	
--	, intClinOutcome		
--	, intClinHospitalization	
--	, intSrcInf				
--	, intSrcOutbreakRelated		
--	, strSrcOutbreakID		
--	, intCompComplications	
--	, intCompEncephalitis	
--	, intCompPneumonia		
--	, intCompMalnutrition	
--	, intCompDiarrhoea		
--	, intCompOther		
--	, intFinalClassification
--	, datDSpecimen			
--	, intSpecimen			
--	, datDLabResult			
--	, intMeaslesIgm			
--	, intMeaslesVirusDetection	
--	, intRubellaIgm				
--	, intRubellaVirusDetection
--	, strCommentsEpi	 


--FROM hc_table
 


--SELECT * FROM #ResultTable
--ORDER BY datDRash, strCaseID

-- Drop temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NOT NULL
BEGIN
SET	@cmd = N'drop TABLE #HumanCasesToExport'
EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#ResultTable') IS NOT NULL
BEGIN
SET	@cmd = N'drop TABLE #ResultTable'
EXEC sp_executesql @cmd
END

END
GO
PRINT N'Altering Procedure [dbo].[USSP_LAB_SAMPLE_SET]...';


GO
-- ================================================================================================
-- Name: USSP_LAB_SAMPLE_SET
--
-- Description:	Inserts or updates sample records for various laboratory module use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/08/2018 Initial release.
-- Stephen Long		01/24/2019 Added storage box place to support the location in the freezer 
--                             subdivision.  Changed freezer ID to freezer subdivision ID.
-- Stephen Long     01/30/2019 Added disease ID parameter and to insert/update statements.
-- Stephen Long     02/21/2019 Added root sample ID and sample kind type ID.
-- Stephen Long     03/08/2019 Added row action 'D' for aliquot/derivative, so new lab sample ID 
--                             is not created, rather a number or country decides on a customized 
--                             method.
-- Stephen Long     03/28/2019 Added parameter @EIDSSLaboratorySampleID for aliquots/derivatives. 
--                             These are assigned in the EIDSS application from the derived off of
--                             the original (parent) sample ID.
-- Stephen Long     04/16/2019 Added copy of human master to human for new sample records.
-- Stephen Long     07/09/2019 Added human master ID parameter.  Updated human copy call.
-- Stephen Long     08/29/2019 Corrected root sample ID on insert portion.
-- Stephen Long     11/05/2019 Set root sample ID to sample ID when aliquot/derivative action.
-- Stephen Long     03/11/2020 Changed entered date to use GETDATE on insert.
-- Stephen Long     03/17/2020 Added logic to process transferred out sample's status.
-- Stephen Long     03/18/2020 Added logic to mark transfer final when sample accessioned in or 
--                             rejected at the receiving laboratory.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
--                             Removed setting of root sample ID to sample ID of parent when 
--                             aliquot/derivative row action.  Root sample ID set to parent sample 
--                             ID in the application.
-- Stephen Long     04/17/2020 Renamed original sample ID to parent sample ID to be inline with the
--                             business terminology. Root is more along the line of original.  Also
--                             changed not to set the parent sample ID unless it is an aliquot/
--                             derivative which is handled in the app.
-- Stephen Long     05/05/2020 Removed update of transfer sample out record.  Handled in the 
--                             application.
-- Stephen Long     07/06/2020 Add set of lab module source indicator.
-- Stephen Long     09/03/2020 Removal of laboratory sample ID next number get call for 
--                             samples being accessioned and saved.  The laboratory sample ID get
--                             call has been moved to occur prior to save.
-- Stephen Long     09/24/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     01/07/2022 Removed copy human actual to human; moved to parent stored 
--                             procedure.
-- Stephen Long     01/31/2022 Added source system name and key value update on insert.
-- Stephen Long     05/23/2022 Commented out update of disease ID; should never happen in the lab 
--                             module.
-- Stephen Long     10/01/2022 Changed to set EIDSS lab sample ID on a rejected sample.  Business 
--                             requirement retained from 6.1.
-- Stephen Long     01/03/2023 Added update to specimen collected field on human disease report 
--                             when a sample is added.
-- Stephen Long     02/07/2023 Fix to not populate strBarcode when sample is rejected.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_LAB_SAMPLE_SET]
(
    @SampleID BIGINT OUTPUT,
    @SampleTypeID BIGINT,
    @RootSampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @HumanMasterID BIGINT = NULL,
    @HumanID BIGINT = NULL,
    @SpeciesID BIGINT = NULL,
    @AnimalID BIGINT = NULL,
    @VectorID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @CollectionDate DATETIME = NULL,
    @CollectedByPersonID BIGINT = NULL,
    @CollectedByOrganizationID BIGINT = NULL,
    @SentDate DATETIME = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SiteID BIGINT,
    @FunctionalAreaID BIGINT = NULL,
    @FreezerSubdivisionID BIGINT = NULL,
    @StorageBoxPlace NVARCHAR(200) = NULL,
    @EnteredDate DATETIME = NULL,
    @OutOfRepositoryDate DATETIME = NULL,
    @MarkedForDispositionByPersonID BIGINT = NULL,
    @DestructionDate DATETIME = NULL,
    @DestructionMethodTypeID BIGINT = NULL,
    @DestroyedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @AccessionDate DATETIME = NULL,
    @AccessionConditionTypeID BIGINT = NULL,
    @AccessionByPersonID BIGINT = NULL,
    @SampleStatusTypeID BIGINT = NULL,
    @PreviousSampleStatusTypeID BIGINT = NULL,
    @AccessionComment NVARCHAR(200) = NULL,
    @Note NVARCHAR(500) = NULL,
    @CurrentSiteID BIGINT = NULL,
    @SampleKindTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @RowStatus INT,
    @RowAction INT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';

        IF @RowAction = 1 -- Standard insert
           OR @RowAction = 5 -- Insert and accession (LUC01)
           OR @RowAction = 6 -- Create aliquot/derivative and accession (LUC02)
           OR @RowAction = 7 -- Create transfer in sample and do not accession (LUC03)
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbMaterial',
                                              @idfsKey = @SampleID OUTPUT;

            IF @RowAction <> 6
               AND @RowAction <> 7
            BEGIN
                SET @RootSampleID = @SampleID;
            END

            --Local/field sample EIDSS ID. Only system assign when user leaves blank.
            IF @RowAction = 1
            BEGIN
                IF @EIDSSLocalOrFieldSampleID IS NULL
                   OR @EIDSSLocalOrFieldSampleID = ''
                BEGIN
                    EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Sample Field Barcode',
                                                       @NextNumberValue = @EIDSSLocalOrFieldSampleID OUTPUT,
                                                       @InstallationSite = NULL;
                END
            END

            INSERT INTO dbo.tlbMaterial
            (
                idfMaterial,
                idfsSampleType,
                idfRootMaterial,
                idfParentMaterial,
                idfHuman,
                idfSpecies,
                idfAnimal,
                idfVector,
                idfMonitoringSession,
                idfVectorSurveillanceSession,
                idfHumanCase,
                idfVetCase,
                datFieldCollectionDate,
                idfFieldCollectedByPerson,
                idfFieldCollectedByOffice,
                datFieldSentDate,
                idfSendToOffice,
                strFieldBarcode,
                strBarcode,
                idfsSite,
                idfInDepartment,
                idfSubdivision,
                StorageBoxPlace,
                datEnteringDate,
                datOutOfRepositoryDate,
                idfMarkedForDispositionByPerson,
                datDestructionDate,
                idfsDestructionMethod,
                idfDestroyedByPerson,
                blnReadOnly,
                datAccession,
                idfsAccessionCondition,
                idfAccesionByPerson,
                idfsSampleStatus,
                strCondition,
                strNote,
                idfsCurrentSite,
                idfsSampleKind,
                PreviousSampleStatusID,
                DiseaseID,
                LabModuleSourceIndicator,
                intRowStatus,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@SampleID,
             @SampleTypeID,
             @RootSampleID,
             @ParentSampleID,
             @HumanID,
             @SpeciesID,
             @AnimalID,
             @VectorID,
             @MonitoringSessionID,
             @VectorSessionID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @CollectionDate,
             @CollectedByPersonID,
             @CollectedByOrganizationID,
             @SentDate,
             @SentToOrganizationID,
             @EIDSSLocalOrFieldSampleID,
             @EIDSSLaboratorySampleID,
             @SiteID,
             @FunctionalAreaID,
             @FreezerSubdivisionID,
             @StorageBoxPlace,
             GETDATE(),
             @OutOfRepositoryDate,
             @MarkedForDispositionByPersonID,
             @DestructionDate,
             @DestructionMethodTypeID,
             @DestroyedByPersonID,
             @ReadOnlyIndicator,
             @AccessionDate,
             @AccessionConditionTypeID,
             @AccessionByPersonID,
             @SampleStatusTypeID,
             @AccessionComment,
             @Note,
             @CurrentSiteID,
             @SampleKindTypeID,
             @PreviousSampleStatusTypeID,
             @DiseaseID,
             1  ,
             0  ,
             10519001,
             '[{"idfMaterial":' + CAST(@SampleID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );

            IF @HumanDiseaseReportID IS NOT NULL
            BEGIN
                UPDATE dbo.tlbHumanCase SET idfsYNSpecimenCollected = 10100001, AuditUpdateDTM = GETDATE(), AuditUpdateUser = @AuditUserName WHERE idfHumanCase = @HumanDiseaseReportID;
            END
        END;
        ELSE
        BEGIN
            --Sample is being accessioned, so get the next lab sample code allowing the user the option to print the barcode.
            IF @RowAction = 4
               OR @RowAction = 8 --Update and accession (LUC01)
            BEGIN
                --Transferred in sample accessioned in, so update the transfer record's transfer status type ID to final. 
                IF @RowAction = 8
                BEGIN
                    UPDATE t
                    SET t.idfsTransferStatus = 10001001,
                        --Final
                        t.AuditUpdateUser = @AuditUserName,
                        t.AuditUpdateDTM = GETDATE()
                    FROM dbo.tlbTransferOUT AS t
                        INNER JOIN dbo.tlbTransferOutMaterial AS tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;
                END;

                UPDATE dbo.tlbMaterial
                SET idfsSampleType = @SampleTypeID,
                    idfRootMaterial = @RootSampleID,
                    idfParentMaterial = @ParentSampleID,
                    idfHuman = @HumanID,
                    idfSpecies = @SpeciesID,
                    idfAnimal = @AnimalID,
                    idfMonitoringSession = @MonitoringSessionID,
                    idfFieldCollectedByPerson = @CollectedByPersonID,
                    idfFieldCollectedByOffice = @CollectedByOrganizationID,
                    datFieldCollectionDate = @CollectionDate,
                    datFieldSentDate = @SentDate,
                    strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                    idfVectorSurveillanceSession = @VectorSessionID,
                    idfVector = @VectorID,
                    idfSubdivision = @FreezerSubdivisionID,
                    StorageBoxPlace = @StorageBoxPlace,
                    idfsSampleStatus = @SampleStatusTypeID,
                    idfInDepartment = @FunctionalAreaID,
                    idfDestroyedByPerson = @DestroyedByPersonID,
                    datEnteringDate = @EnteredDate,
                    datDestructionDate = @DestructionDate,
                    strBarcode = @EIDSSLaboratorySampleID,
                    strNote = @Note,
                    idfsSite = @SiteID,
                    idfsCurrentSite = @CurrentSiteID,
                    idfsSampleKind = @SampleKindTypeID,
                    intRowStatus = @RowStatus,
                    idfSendToOffice = @SentToOrganizationID,
                    blnReadOnly = @ReadOnlyIndicator,
                    idfHumanCase = @HumanDiseaseReportID,
                    idfVetCase = @VeterinaryDiseaseReportID,
                    datAccession = @AccessionDate,
                    idfsAccessionCondition = @AccessionConditionTypeID,
                    strCondition = @AccessionComment,
                    idfAccesionByPerson = @AccessionByPersonID,
                    idfsDestructionMethod = @DestructionMethodTypeID,
                    idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                    datOutOfRepositoryDate = @OutOfRepositoryDate,
                    PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                    --DiseaseID = @DiseaseID,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfMaterial = @SampleID;
            END
            ELSE
            BEGIN
                --Transferred in sample rejected, so update the transferred out sample's status to transferred out. 
                IF @RowAction = 9
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleStatus = 10015010,
                        --Transferred Out
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @RootSampleID;

                    UPDATE t
                    SET t.idfsTransferStatus = 10001001,
                        --Final 
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    FROM dbo.tlbTransferOUT AS t
                        INNER JOIN dbo.tlbTransferOutMaterial AS tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;
                END;

                IF @RowAction = 2
                   AND @AccessionConditionTypeID = 10108003 -- Rejected
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleType = @SampleTypeID,
                        idfRootMaterial = @RootSampleID,
                        idfParentMaterial = @ParentSampleID,
                        idfHuman = @HumanID,
                        idfSpecies = @SpeciesID,
                        idfAnimal = @AnimalID,
                        idfMonitoringSession = @MonitoringSessionID,
                        idfFieldCollectedByPerson = @CollectedByPersonID,
                        idfFieldCollectedByOffice = @CollectedByOrganizationID,
                        datFieldCollectionDate = @CollectionDate,
                        datFieldSentDate = @SentDate,
                        strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                        idfVectorSurveillanceSession = @VectorSessionID,
                        idfVector = @VectorID,
                        idfSubdivision = @FreezerSubdivisionID,
                        StorageBoxPlace = @StorageBoxPlace,
                        idfsSampleStatus = @SampleStatusTypeID,
                        idfInDepartment = @FunctionalAreaID,
                        idfDestroyedByPerson = @DestroyedByPersonID,
                        datEnteringDate = @EnteredDate,
                        datDestructionDate = @DestructionDate,
                        strNote = @Note,
                        idfsSite = @SiteID,
                        idfsCurrentSite = @CurrentSiteID,
                        idfsSampleKind = @SampleKindTypeID,
                        intRowStatus = @RowStatus,
                        idfSendToOffice = @SentToOrganizationID,
                        blnReadOnly = @ReadOnlyIndicator,
                        idfHumanCase = @HumanDiseaseReportID,
                        idfVetCase = @VeterinaryDiseaseReportID,
                        datAccession = @AccessionDate,
                        idfsAccessionCondition = @AccessionConditionTypeID,
                        strCondition = @AccessionComment,
                        idfAccesionByPerson = @AccessionByPersonID,
                        idfsDestructionMethod = @DestructionMethodTypeID,
                        idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                        datOutOfRepositoryDate = @OutOfRepositoryDate,
                        PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @SampleID;
                END
                ELSE
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleType = @SampleTypeID,
                        idfRootMaterial = @RootSampleID,
                        idfParentMaterial = @ParentSampleID,
                        idfHuman = @HumanID,
                        idfSpecies = @SpeciesID,
                        idfAnimal = @AnimalID,
                        idfMonitoringSession = @MonitoringSessionID,
                        idfFieldCollectedByPerson = @CollectedByPersonID,
                        idfFieldCollectedByOffice = @CollectedByOrganizationID,
                        datFieldCollectionDate = @CollectionDate,
                        datFieldSentDate = @SentDate,
                        strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                        idfVectorSurveillanceSession = @VectorSessionID,
                        idfVector = @VectorID,
                        idfSubdivision = @FreezerSubdivisionID,
                        StorageBoxPlace = @StorageBoxPlace,
                        idfsSampleStatus = @SampleStatusTypeID,
                        idfInDepartment = @FunctionalAreaID,
                        idfDestroyedByPerson = @DestroyedByPersonID,
                        datEnteringDate = @EnteredDate,
                        datDestructionDate = @DestructionDate,
                        strNote = @Note,
                        idfsSite = @SiteID,
                        idfsCurrentSite = @CurrentSiteID,
                        idfsSampleKind = @SampleKindTypeID,
                        intRowStatus = @RowStatus,
                        idfSendToOffice = @SentToOrganizationID,
                        blnReadOnly = @ReadOnlyIndicator,
                        idfHumanCase = @HumanDiseaseReportID,
                        idfVetCase = @VeterinaryDiseaseReportID,
                        datAccession = @AccessionDate,
                        idfsAccessionCondition = @AccessionConditionTypeID,
                        strCondition = @AccessionComment,
                        idfAccesionByPerson = @AccessionByPersonID,
                        idfsDestructionMethod = @DestructionMethodTypeID,
                        idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                        datOutOfRepositoryDate = @OutOfRepositoryDate,
                        PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @SampleID;
                END
            END;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_LAB_TEST_SET]...';


GO
-- ================================================================================================
-- Name: USSP_LAB_TEST_SET
--
-- Description:	Inserts or updates test records for various laboratory module 
-- USE cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		01/24/2019 Initial release.
-- Stephen Long     02/01/2019 Added null to the observation ID parameter.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
-- Stephen Long     10/28/2020 Changed record action from nchar to char.
-- Stephen Long     02/11/2021 Add logic to set test unassigned and test completed indicators.
-- Stephen Long     09/24/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     01/31/2022 Added source system name and key value update on insert.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                  defect 5006.
-- Stephen Long     10/21/2022 Added veterinary disease report, monitoring session and vector 
--                             identifiers to the USSP_LAB_TEST_SET call.
-- Stephen Long     01/04/2023 Added update to tests conducted field on human and veterinary 
--                             disease report when a test is added or deleted.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_LAB_TEST_SET]
(
    @TestID BIGINT,
    @TestNameTypeID BIGINT = NULL,
    @TestCategoryTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestStatusTypeID BIGINT,
    @PreviousTestStatusTypeID BIGINT = NULL,
    @DiseaseID BIGINT,
    @SampleID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @ObservationID BIGINT = NULL,
    @TestNumber INT = NULL,
    @Note NVARCHAR(500) = NULL,
    @RowStatus INT = NULL,
    @StartedDate DATETIME = NULL,
    @ConcludedDate DATETIME = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @NonLaboratoryTestIndicator BIT,
    @ExternalTestIndicator BIT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @ReceivedDate DATETIME = NULL,
    @ContactPerson NVARCHAR(200) = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorID BIGINT = NULL,
    @RowAction INT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @TestAssignedCount AS INT = 0;

        IF @TestStatusTypeID = 10001003
           OR @TestStatusTypeID = 10001004
        BEGIN
            UPDATE dbo.tlbMaterial
            SET TestUnassignedIndicator = 0,
                TestCompletedIndicator = 0
            WHERE idfMaterial = @SampleID;
        END;
        ELSE IF @TestStatusTypeID = 10001001
                OR @TestStatusTypeID = 10001006
        BEGIN
            SELECT @TestAssignedCount = COUNT(idfTesting)
            FROM dbo.tlbTesting
            WHERE idfMaterial = @SampleID
                  AND intRowStatus = 0
                  AND idfsTestStatus IN ( 10001003, 10001004 );

            IF @TestAssignedCount = 0
            BEGIN
                UPDATE dbo.tlbMaterial
                SET TestCompletedIndicator = 1,
                    TestUnassignedIndicator = 0
                WHERE idfMaterial = @SampleID;
            END
            ELSE
            BEGIN
                UPDATE dbo.tlbMaterial
                SET TestCompletedIndicator = 0,
                    TestUnassignedIndicator = 1
                WHERE idfMaterial = @SampleID;
            END;
        END;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbTesting',
                                              @idfsKey = @TestID OUTPUT;

            INSERT INTO dbo.tlbTesting
            (
                idfTesting,
                idfsTestName,
                idfsTestCategory,
                idfsTestResult,
                idfsTestStatus,
                PreviousTestStatusID,
                idfsDiagnosis,
                idfMaterial,
                idfBatchTest,
                idfObservation,
                intTestNumber,
                strNote,
                intRowStatus,
                datStartedDate,
                datConcludedDate,
                idfTestedByOffice,
                idfTestedByPerson,
                idfResultEnteredByOffice,
                idfResultEnteredByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                blnReadOnly,
                blnNonLaboratoryTest,
                blnExternalTest,
                idfPerformedByOffice,
                datReceivedDate,
                strContactPerson,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                idfHumanCase,
                idfVetCase,
                idfMonitoringSession,
                idfVector
            )
            VALUES
            (@TestID,
             @TestNameTypeID,
             @TestCategoryTypeID,
             @TestResultTypeID,
             @TestStatusTypeID,
             @PreviousTestStatusTypeID,
             @DiseaseID,
             @SampleID,
             @BatchTestID,
             @ObservationID,
             @TestNumber,
             @Note,
             @RowStatus,
             @StartedDate,
             @ConcludedDate,
             @TestedByOrganizationID,
             @TestedByPersonID,
             @ResultEnteredByOrganizationID,
             @ResultEnteredByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ReadOnlyIndicator,
             @NonLaboratoryTestIndicator,
             @ExternalTestIndicator,
             @PerformedByOrganizationID,
             @ReceivedDate,
             @ContactPerson,
             10519001,
             '[{"idfTesting":' + CAST(@TestID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @MonitoringSessionID,
             @VectorID
            );

            IF @HumanDiseaseReportID IS NOT NULL
            BEGIN
                UPDATE dbo.tlbHumanCase
                SET idfsYNTestsConducted = 10100001, -- Yes
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfHumanCase = @HumanDiseaseReportID;
            END
            ELSE IF @VeterinaryDiseaseReportID IS NOT NULL
            BEGIN
                UPDATE dbo.tlbVetCase
                SET idfsYNTestsConducted = 10100001, -- Yes
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfVetCase = @VeterinaryDiseaseReportID;
            END
        END;
        ELSE
        BEGIN
            UPDATE dbo.tlbTesting
            SET idfsTestName = @TestNameTypeID,
                idfsTestCategory = @TestCategoryTypeID,
                idfsTestResult = @TestResultTypeID,
                idfsTestStatus = @TestStatusTypeID,
                PreviousTestStatusID = @PreviousTestStatusTypeID,
                idfsDiagnosis = @DiseaseID,
                idfMaterial = @SampleID,
                idfBatchTest = @BatchTestID,
                idfObservation = @ObservationID,
                intTestNumber = @TestNumber,
                strNote = @Note,
                intRowStatus = @RowStatus,
                datStartedDate = @StartedDate,
                datConcludedDate = @ConcludedDate,
                idfTestedByOffice = @TestedByOrganizationID,
                idfTestedByPerson = @TestedByPersonID,
                idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                idfResultEnteredByPerson = @ResultEnteredByPersonID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                blnReadOnly = @ReadOnlyIndicator,
                blnNonLaboratoryTest = @NonLaboratoryTestIndicator,
                blnExternalTest = @ExternalTestIndicator,
                idfPerformedByOffice = @PerformedByOrganizationID,
                datReceivedDate = @ReceivedDate,
                strContactPerson = @ContactPerson,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE(),
                idfHumanCase = @HumanDiseaseReportID,
                idfVetCase = @VeterinaryDiseaseReportID,
                idfMonitoringSession = @MonitoringSessionID,
                idfVector = @VectorID
            WHERE idfTesting = @TestID;

            IF @HumanDiseaseReportID IS NOT NULL AND @TestStatusTypeID = 10001007 -- Deleted
            BEGIN
                IF (SELECT COUNT(*) FROM dbo.tlbTesting WHERE idfHumanCase = @HumanDiseaseReportID AND (intRowStatus = 0 AND idfsTestStatus <> 10001007)) = 0
                BEGIN
                    UPDATE dbo.tlbHumanCase
                    SET idfsYNTestsConducted = 10100002, -- No
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @AuditUserName
                    WHERE idfHumanCase = @HumanDiseaseReportID;
                END
            END
            ELSE IF @VeterinaryDiseaseReportID IS NOT NULL AND @TestStatusTypeID = 10001007 -- Deleted
            BEGIN
                IF (SELECT COUNT(*) FROM dbo.tlbTesting WHERE idfVetCase = @VeterinaryDiseaseReportID AND (intRowStatus = 0 AND idfsTestStatus <> 10001007)) = 0
                BEGIN
                    UPDATE dbo.tlbVetCase
                    SET idfsYNTestsConducted = 10100002, -- No
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @AuditUserName
                    WHERE idfVetCase = @VeterinaryDiseaseReportID;
                END
            END
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [Report].[USP_GBL_GIS_Location_ChildLevel_Get]...';


GO


--*************************************************************************************************
-- Name: USP_GBL_GIS_Location_Level_Get
--
-- Description: To get the Administrative Child Level List for the selected Parent List.
--
-- Revision History:
-- Name Date Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Srini Goli 03/31/2021 Initial release.
-- Mani 01/05/2023 added introwstatus =0 condition

-- Testing code:
/*
EXEC Report.USP_GBL_GIS_Location_ChildLevel_Get 'en' 										-- Administrative Level 1 --Region --Default Setup Country
EXEC Report.USP_GBL_GIS_Location_ChildLevel_Get 'en-US', '170000000'							-- Administrative Level 1 --Region
EXEC Report.USP_GBL_GIS_Location_ChildLevel_Get 'en-US', '1344330000000'						-- Administrative Level 2 --Rayon
EXEC Report.USP_GBL_GIS_Location_ChildLevel_Get 'az-1', '1344350000000'						-- Administrative Level 2 --Rayon
EXEC Report.USP_GBL_GIS_Location_ChildLevel_Get 'az-1', '1344330000000,1344350000000'		-- Administrative Level 2 --Rayon
EXEC Report.USP_GBL_GIS_Location_ChildLevel_Get 'az-l', '1344490000000'						-- Administrative Level 3 --Settlement

 Administrative Levels 5, 6, and 7 have not been integrated.

*/
-- ************************************************************************************************

ALTER PROCEDURE [Report].[USP_GBL_GIS_Location_ChildLevel_Get]
(
	@LangID NVARCHAR(50),
	@Parent_idfsReference AS NVARCHAR(MAX) = NULL
)
AS
	DECLARE @CountryNode HIERARCHYID,
			@ParentNode HIERARCHYID,
			@Country_idfsLocation AS BIGINT
	
	SELECT @CountryNode = node,@Country_idfsLocation=idfsLocation 
	FROM gisLocation 
	WHERE idfsLocation = dbo.FN_GBL_CURRENTCOUNTRY_GET()
	
	IF (@Parent_idfsReference='0' or @Parent_idfsReference IS NULL) SET @Parent_idfsReference = CAST(@Country_idfsLocation AS NVARCHAR(50))
		
	DECLARE @Parent_idfsReferenceTable	TABLE
			(
					idfsReference BIGINT		
			)	
		
	INSERT INTO @Parent_idfsReferenceTable 
	SELECT CAST([Value] AS BIGINT) FROM report.FN_GBL_SYS_SplitList(@Parent_idfsReference,1,',')

	SELECT l.node as ParentNode
	INTO #ParentNodes
	FROM dbo.gisLocation l
	INNER JOIN dbo.gisBaseReference br ON br.idfsGISBaseReference=l.idfsLocation
	WHERE idfsGISBaseReference IN (SELECT idfsReference FROM @Parent_idfsReferenceTable) and br.intRowStatus =0

	SELECT 
		0 as idfsReference
		,'' as [Name]
	UNION ALL
	SELECT
    	br.idfsGISBaseReference AS idfsReference
		,ISNULL(snt.strTextString, br.strDefault) [Name]
	FROM dbo.gisBaseReference AS br 
	INNER JOIN dbo.gisStringNameTranslation AS snt ON snt.idfsGISBaseReference = br.idfsGISBaseReference AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
	INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
	INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
	WHERE l.node.GetAncestor(1) IN (SELECT ParentNode FROM #ParentNodes) and br.intRowStatus =0 and rt.intRowStatus =0
	ORDER BY 2
GO
PRINT N'Altering Procedure [Report].[USP_GBL_GIS_Location_CurrentLevel_Get]...';


GO


--*************************************************************************************************
-- Name: USP_GBL_GIS_Location_CurrentLevel_Get
--
-- Description: To get the Administrative level List for the required level
--
-- Revision History:
-- Name Date Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Srini Goli 03/31/2021 Initial release.
-- Mani 01/05/2023 added introwstatus =0 condition

-- Testing code:
/*
EXEC Report.USP_GBL_GIS_Location_CurrentLevel_Get 'az-1', 0						-- Administrative Level 0 --Country
EXEC Report.USP_GBL_GIS_Location_CurrentLevel_Get 'en-US', 1						-- Administrative Level 1 --Region
EXEC Report.USP_GBL_GIS_Location_CurrentLevel_Get 'en-US', 2						-- Administrative Level 2 --Rayon
EXEC Report.USP_GBL_GIS_Location_CurrentLevel_Get 'ru', 3					    -- Administrative Level 3 --Settlement

 Administrative Levels 5, 6, and 7 have not been integrated.

*/
-- ************************************************************************************************

ALTER PROCEDURE [Report].[USP_GBL_GIS_Location_CurrentLevel_Get]
(
	@LangID NVARCHAR(50),
	@CurrentLevel INT = 0
)
AS
	DECLARE @CountryNode HIERARCHYID,
			@idfsGISReferenceType BIGINT

	SELECT @CountryNode = node FROM gisLocation WHERE idfsLocation = dbo.FN_GBL_CURRENTCOUNTRY_GET()	   
	
	SELECT 
		0 as idfsReference
		,'' as [Name]
	UNION ALL
	SELECT
		br.idfsGISBaseReference AS idfsReference
		,ISNULL(snt.strTextString, br.strDefault) [Name]
	FROM dbo.gisBaseReference AS br 
	INNER JOIN dbo.gisStringNameTranslation AS snt ON snt.idfsGISBaseReference = br.idfsGISBaseReference AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
	INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
	INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
	WHERE l.node.GetAncestor(@CurrentLevel) = @CountryNode and br.intRowStatus =0 and rt.intRowStatus =0
	ORDER BY 2
GO
PRINT N'Altering Procedure [Report].[USP_REP_LIM_CaseTestValidation]...';


GO
-- ================================================================================================
-- Name: report.USP_REP_LIM_CaseTestValidation
--
-- Description: Select Disease Report Test validation details
--						
-- Author: Mark Wilson
--
-- Revision History:
--		Name       Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Mark Wilson    07/07/2022  Initial version, Converted to E7 standards.
-- Sri Goli       01/16/2023  Added Column strRuleStatus
-- Testing code:

/*
--Example of a call of procedure:

select * FROM dbo.tlbVetCase where introwstatus = 0
select * FROM dbo.tlbHumanCase where introwstatus = 0

exec report.USP_REP_LIM_CaseTestValidation @LangID=N'en-US',@ObjID=5587
exec report.USP_REP_LIM_CaseTestValidation @LangID=N'en-US',@ObjID=80643


*/

ALTER PROCEDURE [Report].[USP_REP_LIM_CaseTestValidation]
(
    @ObjID	AS BIGINT,
    @LangID AS NVARCHAR(10)
)
AS
BEGIN

	DECLARE @cYes AS NVARCHAR(20)
	DECLARE @cNo AS NVARCHAR(20)
	
	SELECT
		@cYes=[name] 
	FROM dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000100)
	WHERE idfsReference=10100001 /*'ynvYes'*/

	SELECT
		@cNo=[name] 
	FROM dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000100) where idfsReference=10100002 /*'ynvNo'*/

	SELECT  
		D.[name] AS Diagnosis,
		TT.[name] AS TestName,
		TD.[name] AS TestType,
		TV.idfsInterpretedStatus AS intRuleStatus,
		interpretedStatusType.name AS strRuleStatus,
		TV.strInterpretedComment AS strRuleComment,
		TV.datInterpretationDate AS interpretedDate,
		dbo.FN_GBL_ConcatFullName(tInterpretedBy.strFamilyName, tInterpretedBy.strFirstName, tInterpretedBy.strSecondName) AS InterpretedBy,
		CASE TV.blnValidateStatus 
			WHEN 0 THEN @cNo
			WHEN 1 THEN @cYes
			ELSE @cNo
		END AS intValidateStatus,
		--dbo.FN_GBL_ConcatFullName(tInterpretedBy.strFamilyName, tInterpretedBy.strFirstName, tInterpretedBy.strSecondName) AS InterpretedBy,
		TV.strValidateComment AS strValidateComment,
		dbo.FN_GBL_ConcatFullName(tValidatedBy.strFamilyName, tValidatedBy.strFirstName, tValidatedBy.strSecondName) AS ValidatedBy,
		TV.datValidationDate AS validatedDate
		
	FROM dbo.tlbTesting T
	LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000097) TT ON TT.idfsReference = T.idfsTestName
	LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000095) AS TD ON T.idfsTestCategory = TD.idfsReference
	INNER JOIN dbo.tlbTestValidation AS TV ON T.idfTesting = TV.idfTesting AND T.intRowStatus = 0 AND TV.intRowStatus = 0
	LEFT JOIN dbo.tlbPerson AS tValidatedBy ON TV.idfValidatedByPerson = tValidatedBy.idfPerson
	LEFT JOIN dbo.tlbPerson AS tInterpretedBy ON TV.idfInterpretedByPerson = tInterpretedBy.idfPerson
	LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000019) AS D ON D.idfsReference = TV.idfsDiagnosis
	INNER JOIN dbo.tlbMaterial M ON	M.idfMaterial = T.idfMaterial AND M.intRowStatus = 0 AND (M.idfHumanCase = @ObjID OR M.idfVetCase = @ObjID OR M.idfMonitoringSession = @ObjID)
	LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000106) interpretedStatusType ON interpretedStatusType.idfsReference = tv.idfsInterpretedStatus
	WHERE	T.intRowStatus = 0
			
END
GO
PRINT N'Creating Procedure [dbo].[USP_ADMIN_FF_ActivityParametersForCopy_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ActivityParameters_SET
--
-- Description: Set the answers for a flex form AS an activity for that parameter
--          
-- Revision History:
-- Name             Date       Change
-- ---------------- ---------- --------------------------------------------------------------------
-- Doug Albanese	12/30/2022	 Nested Inserts are messing with this process. So I'm creating a "copy" version to work with the copy of a flex form
--
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_ADMIN_FF_ActivityParametersForCopy_SET]
(
    @idfObservation BIGINT = NULL,
    @idfsFormTemplate BIGINT,
    @answers NVARCHAR(MAX),
    @User NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnCode BIGINT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'Success',
                                                                   -- added for case compares
            @TextBox BIGINT = 10067008,
            @TextBoxTotal BIGINT = 10067010,
            @TextBoxSum BIGINT = 10067011,
            @MemoBox BIGINT = 10067006,
            @DateControl BIGINT = 10067003,
            @DateTimeControl BIGINT = 10067004,
            @UpDown BIGINT = 10067009,
            @ComboBox BIGINT = 10067002,
            @RadioButton BIGINT = 217210000000,
            @CheckBoxDeclare BIGINT = 10067001,
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @DataAuditEventID BIGINT = NULL,
            @DataAuditEventTypeID BIGINT = NULL,
            @ObjectID BIGINT = NULL,
            @ObjectObservationTableID BIGINT = 75640000000,        -- tlbObservation
            @ObjectActivityParametersTableID BIGINT = 75410000000; -- tlbActivityParameters
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage VARCHAR(MAX)
    );
    DECLARE @ActivityParametersBeforeEdit TABLE
    (
        ActivityParametersID BIGINT,
        ParameterID BIGINT,
        ObservationID BIGINT,
        RowID BIGINT NULL,
        AnswerValue SQL_VARIANT NULL,
        RowStatus INT
    );
    DECLARE @ActivityParametersAfterEdit TABLE
    (
        ActivityParametersID BIGINT,
        ParameterID BIGINT,
        ObservationID BIGINT,
        RowID BIGINT NULL,
        AnswerValue SQL_VARIANT NULL,
        RowStatus INT
    );

    BEGIN TRY
        DECLARE @idfActivityParameters BIGINT,
                @idfsParameter BIGINT,
                @answer_SV SQL_VARIANT,
                @answer NVARCHAR(4000),
                @idfsEditor BIGINT,
                @idfRow BIGINT;
        DECLARE @tAnswers TABLE
        (
            idfsParameter BIGINT NULL,
            idfsEditor BIGINT NULL,
            answer NVARCHAR(4000),
            idfRow BIGINT NULL
        );

        INSERT INTO @tAnswers
        SELECT idfsParameter,
               idfsEditor,
               answer,
               idfRow
        FROM
            OPENJSON(@answers)
            WITH
            (
                idfsParameter BIGINT,
                idfsEditor BIGINT,
                answer NVARCHAR(4000),
                idfRow BIGINT
            );

        IF @idfObservation IS NULL
        BEGIN
            --INSERT INTO @SuppressSelect
            EXEC USP_GBL_NEXTKEYID_GET 'tlbObservation', @idfObservation OUTPUT;
        END

        IF NOT EXISTS
        (
            SELECT 1
            FROM dbo.tlbObservation
            WHERE idfObservation = @idfObservation
        )
        BEGIN
            INSERT INTO dbo.tlbObservation
            (
                idfObservation,
                idfsFormTemplate,
                intRowStatus,
                rowguid,
                idfsSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@idfObservation,
             @idfsFormTemplate,
             0  ,
             NEWID(),
             dbo.FN_GBL_SITEID_GET(),
             10519001,
             '[{"idfObservation":' + CAST(@idfObservation AS NVARCHAR(100)) + '}]',
             @User,
             GETDATE(),
             @User,
             GETDATE()
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (NULL,
             @ObjectObservationTableID,
             @idfObservation,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectObservationTableID AS NVARCHAR(300)) + '}]',
             @User
            );
        -- End data audit
        END

        WHILE EXISTS (SELECT * FROM @tAnswers)
        BEGIN
            SELECT TOP 1
                @idfsParameter = idfsParameter,
                @answer = answer,
                @idfsEditor = idfsEditor,
                @idfRow = idfRow
            FROM @tAnswers;
            IF @idfsEditor = @TextBox
                SET @answer_SV = CAST(@answer AS NVARCHAR);
            IF @idfsEditor = @TextBoxTotal
                SET @answer_SV = CAST(@answer AS NVARCHAR);
            IF @idfsEditor = @TextBoxSum
                SET @answer_SV = CAST(@answer AS NVARCHAR);
            IF @idfsEditor = @MemoBox
                SET @answer_SV = CAST(@answer AS NVARCHAR);
            IF @idfsEditor = @DateControl
                SET @answer_SV = CAST(@answer AS DATETIME);
            IF @idfsEditor = @DateTimeControl
                SET @answer_SV = CAST(@answer AS DATETIME);
            IF @idfsEditor = @UpDown
                SET @answer_SV = CAST(@answer AS BIGINT);
            IF @idfsEditor = @ComboBox
                SET @answer_SV = CAST(@answer AS BIGINT);
            IF @idfsEditor = @RadioButton
                SET @answer_SV = CAST(@answer AS BIGINT);
            IF @idfsEditor = @CheckBoxDeclare
                SET @answer_SV = CAST(@answer AS BIT);

            SET ROWCOUNT 1;
            DELETE FROM @tAnswers;
            SET ROWCOUNT 0;

            IF @answer_SV <> ''
            BEGIN
                IF (
                       (@answer_SV IS NULL)
                       OR (LEN(CAST(@answer_SV AS NVARCHAR(4000))) = 0)
                   )
                BEGIN
                    --INSERT INTO @SuppressSelect
                    EXEC dbo.USP_ADMIN_FF_ActivityParameters_DEL @idfsParameter,
                                                                 @idfObservation,
                                                                 @idfRow;
                END
                ELSE
                BEGIN
                    IF NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM dbo.tlbActivityParameters
                        WHERE idfsParameter = @idfsParameter
                              AND idfObservation = @idfObservation
                              AND idfRow = @idfRow
                    )
                    BEGIN
                        --INSERT INTO @SuppressSelect
                        EXEC USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                   @idfActivityParameters OUTPUT;

                        INSERT INTO dbo.tlbActivityParameters
                        (
                            idfActivityParameters,
                            idfsParameter,
                            idfObservation,
                            idfRow,
                            varValue,
                            intRowStatus,
                            rowguid,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser,
                            AuditCreateDTM,
                            AuditUpdateUser,
                            AuditUpdateDTM
                        )
                        VALUES
                        (@idfActivityParameters,
                         @idfsParameter,
                         @idfObservation,
                         @idfRow,
                         @answer_SV,
                         0  ,
                         NEWID(),
                         10519001,
                         '[{"idfActivityParameters":' + CAST(@idfActivityParameters AS NVARCHAR(100)) + '}]',
                         @User,
                         GETDATE(),
                         @User,
                         GETDATE()
                        );

                        -- Data audit
                        INSERT INTO dbo.tauDataAuditDetailCreate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfObject,
                            idfObjectDetail,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser
                        )
                        VALUES
                        (NULL,
                         @ObjectActivityParametersTableID,
                         @idfActivityParameters,
                         @idfObservation,
                         10519001,
                         '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                         + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                         @User
                        );
                    -- End data audit
                    END
                    ELSE
                    BEGIN
                        SET @User = ISNULL(@User, 'System');

                        DELETE FROM @ActivityParametersAfterEdit;
                        DELETE FROM @ActivityParametersBeforeEdit;

                        -- Data audit
                        -- Get and set user and site identifiers
                        SELECT @AuditUserID = userInfo.UserId,
                               @AuditSiteID = userInfo.SiteId
                        FROM dbo.FN_UserSiteInformation(@User) userInfo;

                        INSERT INTO @ActivityParametersBeforeEdit
                        (
                            ActivityParametersID,
                            ParameterID,
                            ObservationID,
                            RowID,
                            AnswerValue,
                            RowStatus
                        )
                        SELECT idfActivityParameters,
                               idfsParameter,
                               idfObservation,
                               idfRow,
                               varValue,
                               intRowStatus
                        FROM dbo.tlbActivityParameters
                        WHERE idfsParameter = @idfsParameter
                              AND idfObservation = @idfObservation 
                              AND idfRow = @idfRow;

                        UPDATE dbo.tlbActivityParameters
                        SET varValue = @answer_SV,
                            intRowStatus = 0,
                            AuditUpdateUser = @User,
                            AuditUpdateDTM = GETDATE()
                        WHERE idfsParameter = @idfsParameter
                              AND idfObservation = @idfObservation
                              AND idfRow = @idfRow;

                        INSERT INTO @ActivityParametersAfterEdit
                        (
                            ActivityParametersID,
                            ParameterID,
                            ObservationID,
                            RowID,
                            AnswerValue,
                            RowStatus
                        )
                        SELECT idfActivityParameters,
                               idfsParameter,
                               idfObservation,
                               idfRow,
                               varValue,
                               intRowStatus
                        FROM dbo.tlbActivityParameters
                        WHERE idfsParameter = @idfsParameter
                              AND idfObservation = @idfObservation
                              AND idfRow = @idfRow;

                        INSERT INTO dbo.tauDataAuditDetailUpdate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfColumn,
                            idfObject,
                            idfObjectDetail,
                            strOldValue,
                            strNewValue,
                            AuditCreateUser
                        )
                        SELECT NULL,
                               @ObjectActivityParametersTableID,
                               78180000000,
                               a.ActivityParametersID,
                               @idfObservation,
                               b.ParameterID,
                               a.ParameterID,
                               @User
                        FROM @ActivityParametersAfterEdit AS a
                            FULL JOIN @ActivityParametersBeforeEdit AS b
                                ON a.ActivityParametersID = b.ActivityParametersID
                        WHERE (a.ParameterID <> b.ParameterID)
                              OR (
                                     a.ParameterID IS NOT NULL
                                     AND b.ParameterID IS NULL
                                 )
                              OR (
                                     a.ParameterID IS NULL
                                     AND b.ParameterID IS NOT NULL
                                 );

                        INSERT INTO dbo.tauDataAuditDetailUpdate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfColumn,
                            idfObject,
                            idfObjectDetail,
                            strOldValue,
                            strNewValue,
                            AuditCreateUser
                        )
                        SELECT NULL,
                               @ObjectActivityParametersTableID,
                               78170000000,
                               a.ActivityParametersID,
                               @idfObservation,
                               b.ObservationID,
                               a.ObservationID,
                               @User
                        FROM @ActivityParametersAfterEdit AS a
                            FULL JOIN @ActivityParametersBeforeEdit AS b
                                ON a.ActivityParametersID = b.ActivityParametersID
                        WHERE (a.ObservationID <> b.ObservationID)
                              OR (
                                     a.ObservationID IS NOT NULL
                                     AND b.ObservationID IS NULL
                                 )
                              OR (
                                     a.ObservationID IS NULL
                                     AND b.ObservationID IS NOT NULL
                                 );

                        INSERT INTO dbo.tauDataAuditDetailUpdate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfColumn,
                            idfObject,
                            idfObjectDetail,
                            strOldValue,
                            strNewValue,
                            AuditCreateUser
                        )
                        SELECT NULL,
                               @ObjectActivityParametersTableID,
                               4576590000000,
                               a.ActivityParametersID,
                               @idfObservation,
                               b.RowID,
                               a.RowID,
                               @User
                        FROM @ActivityParametersAfterEdit AS a
                            FULL JOIN @ActivityParametersBeforeEdit AS b
                                ON a.ActivityParametersID = b.ActivityParametersID
                        WHERE (a.RowID <> b.RowID)
                              OR (
                                     a.RowID IS NOT NULL
                                     AND b.RowID IS NULL
                                 )
                              OR (
                                     a.RowID IS NULL
                                     AND b.RowID IS NOT NULL
                                 );

                        INSERT INTO dbo.tauDataAuditDetailUpdate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfColumn,
                            idfObject,
                            idfObjectDetail,
                            strOldValue,
                            strNewValue,
                            AuditCreateUser
                        )
                        SELECT NULL,
                               @ObjectActivityParametersTableID,
                               78190000000,
                               a.ActivityParametersID,
                               @idfObservation,
                               b.AnswerValue,
                               a.AnswerValue,
                               @User
                        FROM @ActivityParametersAfterEdit AS a
                            FULL JOIN @ActivityParametersBeforeEdit AS b
                                ON a.ActivityParametersID = b.ActivityParametersID
                        WHERE (a.AnswerValue <> b.AnswerValue)
                              OR (
                                     a.AnswerValue IS NOT NULL
                                     AND b.AnswerValue IS NULL
                                 )
                              OR (
                                     a.AnswerValue IS NULL
                                     AND b.AnswerValue IS NOT NULL
                                 );

                        INSERT INTO dbo.tauDataAuditDetailRestore
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfObject,
                            idfObjectDetail,
                            AuditCreateUser
                        )
                        SELECT NULL,
                               @ObjectActivityParametersTableID,
                               a.ActivityParametersID,
                               @idfObservation,
                               @User
                        FROM @ActivityParametersAfterEdit AS a
                            FULL JOIN @ActivityParametersBeforeEdit AS b
                                ON a.ActivityParametersID = b.ActivityParametersID
                        WHERE a.RowStatus = 0
                              AND b.RowStatus = 1;
                    END
                END
            END
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage,
               @idfObservation AS idfObservation;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[USP_REF_LKUP_BASE_REFERENCE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_REF_LKUP_BASE_REFERENCE_GETList
--
-- Description:	Get the base reference records for drop down lists.
--
-- Author: Stephen Long
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		02/01/2023 Initial relase to search without HA codes and names; only the name 
--                             whether default or national value; depending on what is present.
-- Stephen Long     02/27/2023 Added Key Id.
--
/*

exec USP_REF_LKUP_BASE_REFERENCE_GETList 19000076, 'en-US', @PageSize=200

*/
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_REF_LKUP_BASE_REFERENCE_GETList]
	 @idfsReferenceType	   BIGINT
	,@langID			   NVARCHAR(50)
	,@advancedSearch	   NVARCHAR(100) = NULL
	,@pageNo			   INT = 1
	,@pageSize			   INT = 10 
	,@sortColumn		   NVARCHAR(30) = 'strName' 
	,@sortOrder			   NVARCHAR(4) = 'ASC'

AS
BEGIN	
	BEGIN TRY
		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @T TABLE
		( 
			idfsBaseReference BIGINT, 
			idfsReferenceType BIGINT, 
			strDefault		  NVARCHAR(2000), 
			strName			  NVARCHAR(2000),
			intHACode		  INT,
			strHACode		  NVARCHAR(4000),
			strHACodeNames	  NVARCHAR(4000),
			intOrder		  INT,
			LOINC			  NVARCHAR(200)
		)

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		
		IF( @advancedSearch IS NOT NULL )
		BEGIN
			SET @advancedSearch = REPLACE(@advancedSearch, '%', '[%]');
			SET @advancedSearch = REPLACE(@advancedSearch, '_', '[_]');

			INSERT INTO @T
			SELECT * FROM
			(
			   SELECT 
				  br.idfsBaseReference, 
				  br.idfsReferenceType, 
				  br.strDefault, 
				  brs.[name] AS strName,
				  br.intHACode, 
				  dbo.FN_GBL_HACode_ToCSV(@LangID,br.intHACode) AS strHACode,			
				  dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.intHACode) AS strHACodeNames,
				  br.intOrder,
				  LCM.LOINC_NUM AS LOINC
			   FROM  dbo.trtBaseReference br
			   JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS ON br.idfsBaseReference = brs.idfsReference 
			   LEFT JOIN LOINCEidssMapping LCM ON LCM.idfsBaseReference = br.idfsBaseReference
			   WHERE 
				   br.intRowStatus = 0 AND brs.intRowStatus = 0 
				   AND br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
													19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
													19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
													19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
													19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
													19000140)
				
			) AS S
			WHERE 
				strName LIKE '%' + @advancedSearch + '%'
		END ELSE
			INSERT INTO @T
			SELECT 
				br.[idfsBaseReference], 
				br.[idfsReferenceType], 
				br.[strDefault], 
				brs.name AS strName,
				br.[intHACode], 
				dbo.FN_GBL_HACode_ToCSV(@LangID,br.[intHACode]) AS strHACode,			
				dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.[intHACode]) AS strHACodeNames,
				br.[intOrder],
				LCM.LOINC_NUM AS LOINC
			FROM  dbo.trtBaseReference br
			JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS ON br.idfsBaseReference = brs.idfsReference 
			LEFT JOIN LOINCEidssMapping LCM ON LCM.idfsBaseReference = br.idfsBaseReference
			WHERE br.[idfsReferenceType] = @idfsReferenceType 
			   AND br.intRowStatus = 0 
			   AND brs.intRowStatus = 0 
			   AND br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
												 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
												 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
												 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
												 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
												 19000140);

		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'asc' THEN idfsBaseReference END ASC,
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'desc' THEN idfsBaseReference END DESC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'asc' THEN idfsReferenceType END ASC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'desc' THEN idfsReferenceType END DESC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'asc' THEN strHACode END ASC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'desc' THEN strHACode END DESC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'asc' THEN strHACodeNames END ASC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'desc' THEN strHACodeNames END DESC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'asc' THEN LOINC END ASC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'desc' THEN LOINC END DESC
				,IIF( @sortColumn = 'intOrder',strName,NULL) ASC
		) AS ROWNUM,		
		COUNT(*) OVER () AS 
				TotalRowCount,
				idfsBaseReference AS KeyId, 
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC
			FROM @T
		)
			SELECT
				TotalRowCount,
				idfsBaseReference AS KeyId, 
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec;
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[USP_VET_CASE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_GETList
--
-- Description:	Get disease list for the farm edit/enter and other use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     03/25/2018 Initial release.
-- Stephen Long     11/09/2018 Added FarmOwnerID and FarmOwnerName for lab use case 10.
-- Stephen Long     11/25/2018 Updated for the new API.
-- Stephen Long     12/31/2018 Added pagination logic.
-- Stephen Long     04/24/2019 Added advanced search parameters to sync up with use case VUC10.
-- Stephen Long     04/29/2019 Added related to veterinary disease report fields for use case VUC11 
--                             and VUC12.
-- Stephen Long     06/14/2019 Adjusted date from's and to's to be cast as just dates with no time.
-- Stephen Long     06/22/2019 Fix to the farm address logic (building, apartment, house IIF's 
--                             to case statements).
-- Stephen Long     06/25/2019 Add group by for joins with multiple records (such as samples).
-- Stephen Long     07/20/2019 Changed farm inventory counts to ISNULL.
-- Stephen Long     09/03/2019 Add active status check on species list.
-- Ann Xiong		12/05/2019 Added EIDSSPersonID to select list and replaced "ON 
--                             caseType.idfsReference = vc.idfsCaseReportType" with 
--                             "caseType.idfsReference = vc.idfsCaseType".
-- Ann Xiong		12/10/2019 Added a parameter @PersonID NVARCHAR(200) = NULL.
-- Ann Xiong		12/19/2019 Added EIDSSFarmID to select list
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     01/28/2020 Added non-configurable filtration rules, and legacy report ID.
-- Stephen Long     02/03/2020 Added dbo prefix and changed non-configurable filtration comments.
-- Stephen Long     02/16/2020 Removed group by and pagination applied on final query.
-- Stephen Long     02/26/2020 Added data entry site ID parameter and where clause.
-- Stephen Long     03/04/2020 Corrected where clause on total count for null species type.
-- Stephen Long     03/17/2020 Corrected farm owner ID to use idfHuman instead of idfHumanActual.
-- Stephen Long     03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to the EIDSS identifier like criteria.
-- Stephen Long     07/08/2020 Replaced common table experssion; was not working well with POCO.
-- Stephen Long     09/24/2020 Update address fields returned (settlement, rayon and region only).
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/23/2020 Added configurable site filtration rules.
-- Stephen Long     11/25/2020 Modified for new permission fields on the AccessRule table.
-- Stephen Long     11/28/2020 Add index to table variable primary key.
-- Stephen Long     12/02/2020 Remove primary key from table variable IDs.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/23/2020 Added EIDSS session ID parameter and where clause criteria.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2021 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     01/05/2021 Removed species list sub-query due to performance.  New stored 
--                             procedure added to get species list when user expands disease 
--                             report row in search.
-- Stephen Long     01/06/2021 Added string aggregate function on species list and parameter to 
--                             include.
-- Stephen Long     01/25/2021 Added order by parameter to handle when a user selected a specific 
--                             column to sort by.
-- Stephen Long     01/27/2021 Fix for order by; alias will not work on order by with case.
-- Stephen Long     04/02/2021 Added updated pagination and location hierarchy.
-- Stephen Long     01/11/2022 Added farm owner (idfHuman) ID to the query and updated location 
--                             hierarchy.
-- Mike Kornegay	01/26/2022 Changed RecordCount to TotalRowCount to match BaseModel.
-- Stephen Long     03/29/2022 Added disease ID to the model for laboratory module, and corrected 
--                             site filtration.
-- Ann Xiong		04/25/2022 Added f.idfFarm to select list for Veterinary Disease Report 
--                             Deduplication.
-- Stephen Long     05/10/2022 Added report category type ID to the query.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	08/28/2022 Changed FarmAddress to FarmLocation and added FarmLocation.
-- Mike Kornegay    08/31/2022 Corrected sort by adding order by to final query.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Doug Albanese	01/10/2023 Added field from OutbreakCaseReport strOutbreakCaseID to show correct ID in Farm listing for Cases.
-- 
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_VET_CASE_GETList] (
	@LanguageID NVARCHAR(50)
	,@ReportKey BIGINT = NULL
	,@ReportID NVARCHAR(200) = NULL
	,@LegacyReportID NVARCHAR(200) = NULL
	,@SessionKey BIGINT = NULL
	,@FarmMasterID BIGINT = NULL
	,@DiseaseID BIGINT = NULL
	,@ReportStatusTypeID BIGINT = NULL
	,@AdministrativeLevelID BIGINT = NULL
	,@DateEnteredFrom DATE = NULL
	,@DateEnteredTo DATE = NULL
	,@ClassificationTypeID BIGINT = NULL
	,@PersonID NVARCHAR(200) = NULL
	,@ReportTypeID BIGINT = NULL
	,@SpeciesTypeID BIGINT = NULL
	,@OutbreakCasesIndicator BIT = 0
	,@DiagnosisDateFrom DATE = NULL
	,@DiagnosisDateTo DATE = NULL
	,@InvestigationDateFrom DATE = NULL
	,@InvestigationDateTo DATE = NULL
	,@LocalOrFieldSampleID NVARCHAR(200) = NULL
	,@TotalAnimalQuantityFrom INT = NULL
	,@TotalAnimalQuantityTo INT = NULL
	,@SessionID NVARCHAR(200) = NULL
	,@DataEntrySiteID BIGINT = NULL
	,@UserSiteID BIGINT
	,@UserOrganizationID BIGINT
	,@UserEmployeeID BIGINT
	,@ApplySiteFiltrationIndicator BIT = 0
	,@IncludeSpeciesListIndicator BIT = 0
	,@SortColumn NVARCHAR(30) = 'ReportID'
	,@SortOrder NVARCHAR(4) = 'DESC'
	,@PageNumber INT = 1
	,@PageSize INT = 10
	)
AS
BEGIN
	SET NOCOUNT ON;

	     
	DECLARE @firstRec INT;
    DECLARE @lastRec INT;

    SET @firstRec = (@PageNumber - 1) * @PageSize;
    SET @lastRec = (@PageNumber * @PageSize + 1);

	DECLARE @AdministrativeLevelNode AS HIERARCHYID;
	DECLARE @Results TABLE (
		ID BIGINT NOT NULL
		,ReadPermissionIndicator BIT NOT NULL
		,AccessToPersonalDataPermissionIndicator BIT NOT NULL
		,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
		,WritePermissionIndicator BIT NOT NULL
		,DeletePermissionIndicator BIT NOT NULL
		,INDEX IDX_ID(ID)
		);

	BEGIN TRY
	    IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

		IF @AdministrativeLevelID IS NOT NULL
		BEGIN
			SELECT @AdministrativeLevelNode = node
			FROM dbo.gisLocation
			WHERE idfsLocation = @AdministrativeLevelID;
		END;

		-- ========================================================================================
		-- NO SITE FILTRATION RULES APPLIED
		--
		-- For first and second level sites, do not apply any site filtration rules.
		-- ========================================================================================
		IF @ApplySiteFiltrationIndicator = 0
		BEGIN
			INSERT INTO @Results
			SELECT v.idfVetCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY v.idfVetCase;
		END
		ELSE
		BEGIN
		INSERT INTO @Results
			SELECT v.idfVetCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND v.idfsSite = @UserSiteID 
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY v.idfVetCase;

			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,INDEX IDX_ID(ID)
				);
			DECLARE @FinalResults TABLE
			(
				ID BIGINT NOT NULL,
		        ReadPermissionIndicator BIT NOT NULL,
				AccessToPersonalDataPermissionIndicator BIT NOT NULL,
				AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
				WritePermissionIndicator BIT NOT NULL,
				DeletePermissionIndicator BIT NOT NULL
			);

			-- =======================================================================================
			-- DEFAULT SITE FILTRATION RULES
			--
			-- Apply active default site filtration rules for third level sites.
			-- =======================================================================================
			DECLARE @RuleActiveStatus INT = 0;
			DECLARE @AdministrativeLevelTypeID INT;
			DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
			DECLARE @DefaultAccessRules AS TABLE (
				AccessRuleID BIGINT NOT NULL,
				ActiveIndicator INT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,AdministrativeLevelTypeID INT NULL
				);

			INSERT INTO @DefaultAccessRules
			SELECT AccessRuleID
			    ,a.intRowStatus
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
				,a.AdministrativeLevelTypeID
			FROM dbo.AccessRule a
			WHERE DefaultRuleIndicator = 1;

			--
			-- Report data shall be available to all sites of the same administrative level 
			-- specified in the rule.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537009;

			IF @RuleActiveStatus = 0
			BEGIN
				SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				FROM @DefaultAccessRules
				WHERE AccessRuleID = 10537009;

				SELECT @OrganizationAdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				FROM dbo.tlbOffice o
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				WHERE o.idfOffice = @UserOrganizationID
					AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

				-- Administrative level specified in the rule of the site where the report was created.
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstSite s ON v.idfsSite = s.idfsSite
				INNER JOIN dbo.tlbOffice o ON o.idfOffice = s.idfOffice
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537009
				WHERE v.intRowStatus = 0
					AND (
						v.idfsCaseType = @SpeciesTypeID
						OR @SpeciesTypeID IS NULL
						)
					AND (
						(
							CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
								AND @DateEnteredTo
							)
						OR (
							@DateEnteredFrom IS NULL
							OR @DateEnteredTo IS NULL
							)
						)
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

				-- Administrative level specified in the rule of the farm address.
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
				INNER JOIN dbo.tlbGeoLocation l ON l.idfGeoLocation = f.idfFarmAddress
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537009
				WHERE v.intRowStatus = 0
					AND (
						v.idfsCaseType = @SpeciesTypeID
						OR @SpeciesTypeID IS NULL
						)
					AND (
						(
							CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
								AND @DateEnteredTo
							)
						OR (
							@DateEnteredFrom IS NULL
							OR @DateEnteredTo IS NULL
							)
						)
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
			END;

			--
			-- Report data shall be available to all sites' organizations connected to the particular report.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537010;

			IF @RuleActiveStatus = 0
			BEGIN
				-- Investigated and reported by organizations
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE (v.intRowStatus = 0)
					AND (
						v.idfInvestigatedByOffice = @UserOrganizationID
						OR v.idfReportedByOffice = @UserOrganizationID
						);

				-- Sample collected by and sent to organizations
				INSERT INTO @FilteredResults
				SELECT MAX(m.idfVetCase)
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbMaterial m
				INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = m.idfVetCase
					AND v.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE m.intRowStatus = 0
					AND (
						m.idfFieldCollectedByOffice = @UserOrganizationID
						OR m.idfSendToOffice = @UserOrganizationID
						)
				GROUP BY m.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator;

				-- Sample transferred to organizations
				INSERT INTO @FilteredResults
				SELECT MAX(m.idfVetCase)
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbMaterial m
				INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = m.idfVetCase
					AND v.intRowStatus = 0
				INNER JOIN dbo.tlbTransferOutMaterial tom ON m.idfMaterial = tom.idfMaterial
					AND tom.intRowStatus = 0
				INNER JOIN dbo.tlbTransferOUT t ON tom.idfTransferOut = t.idfTransferOut
					AND t.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE m.intRowStatus = 0
					AND t.idfSendToOffice = @UserOrganizationID
				GROUP BY m.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator;
			END;

			--
			-- Report data shall be available to the sites with the connected outbreak, if the report 
			-- is the primary report/session for an outbreak.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537011;

			IF @RuleActiveStatus = 0
			BEGIN
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbOutbreak o ON v.idfVetCase = o.idfPrimaryCaseOrSession
					AND o.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537011
				WHERE v.intRowStatus = 0
					AND o.idfsSite = @UserSiteID
			END;

			-- =======================================================================================
			-- CONFIGURABLE SITE FILTRATION RULES
			-- 
			-- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
			-- overlap the default rules.
			-- =======================================================================================
			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND sgs.idfsSite = v.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
			FROM @FilteredResults
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator;
		END;

		-- =======================================================================================
		-- DISEASE FILTRATION RULES
		--
		-- Apply disease filtration rules from use case SAUC62.
		-- =======================================================================================
		-- 
		-- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
		-- as all records have been pulled above with or without site filtration rules applied.
		--
		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT v.idfVetCase
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstObjectAccess AS oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1
					AND oa.idfActor = - 506 -- Default role
				);

		--
		-- Apply level 1 disease filtration rules for an employee's associated user group(s).  
		-- Allows and denies will supersede level 0.
		--
		INSERT INTO @Results
		SELECT v.idfVetCase
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbVetCase v
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
			AND egm.intRowStatus = 0
		INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
		WHERE oa.intPermission = 2 -- Allow permission
			AND v.intRowStatus = 0
			AND oa.idfActor = egm.idfEmployeeGroup
			AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
		GROUP BY v.idfVetCase;

		DELETE res
		FROM @Results res
		INNER JOIN dbo.tlbVetCase AS v ON v.idfVetCase = res.ID
		INNER JOIN dbo.tlbEmployeeGroupMember AS egm ON egm.idfEmployee = @UserEmployeeID
			AND egm.intRowStatus = 0
		INNER JOIN dbo.tstObjectAccess AS oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		WHERE oa.intPermission = 1
			AND oa.idfsObjectType = 10060001 -- Disease
			AND oa.idfActor = egm.idfEmployeeGroup;

		--
		-- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
		-- will supersede level 1.
		--
		INSERT INTO @Results
		SELECT v.idfVetCase
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbVetCase v
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
		WHERE oa.intPermission = 2 -- Allow permission
			AND v.intRowStatus = 0
			AND oa.idfsObjectType = 10060001 -- Disease
			AND oa.idfActor = @UserEmployeeID
			AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
		GROUP BY v.idfVetCase;

		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT v.idfVetCase
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1 -- Deny permission
					AND oa.idfsObjectType = 10060001 -- Disease
					AND oa.idfActor = @UserEmployeeID
				);

		-- ========================================================================================
		-- FINAL QUERY, PAGINATION AND COUNTS
		-- ========================================================================================
		INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator;

		WITH paging
		AS (SELECT 
				ID,
				c = COUNT(*) OVER()
			FROM @FinalResults res
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease ON disease.idfsReference = v.idfsFinalDiagnosis
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) caseClassification ON caseClassification.idfsReference = v.idfsCaseClassification
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus ON reportStatus.idfsReference = v.idfsCaseProgressStatus
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType ON reportType.idfsReference = v.idfsCaseReportType
			ORDER BY 
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN v.strCaseID END ASC,
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN v.strCaseID END DESC,
				CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN v.datEnteredDate END ASC,
				CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN v.datEnteredDate END DESC,
				CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'ASC' THEN disease.name END ASC,
				CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'DESC' THEN disease.name END DESC,
				CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'ASC' THEN f.strNationalName END ASC,
				CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'DESC' THEN f.strNationalName END DESC,
				CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'ASC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END ASC,
				CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'DESC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END DESC,
				CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'ASC' THEN caseClassification.name END ASC,
				CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'DESC' THEN caseClassification.name END DESC,
				CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'ASC' THEN reportStatus.name END ASC,
				CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'DESC' THEN reportStatus.name END DESC,
				CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'ASC' THEN reportType.name END ASC,
				CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'DESC' THEN reportType.name END DESC
				OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY)
		SELECT res.ID AS ReportKey
			,v.idfOutbreak AS OutbreakKey
			,o.strOutbreakID AS OutbreakID
			,ocr.strOutbreakCaseID AS OutbreakCaseID
			,v.idfsCaseType AS ReportCategoryTypeID
			,reportStatus.name AS ReportStatusTypeName
			,reportType.name AS ReportTypeName
			,caseType.name AS SpeciesTypeName
			,caseClassification.name AS ClassificationTypeName
			,v.datReportDate AS ReportDate
			,v.datInvestigationDate AS InvestigationDate
			,v.idfsFinalDiagnosis AS DiseaseID 
			,finalDiagnosis.name AS DiseaseName
			,v.datFinalDiagnosisDate AS FinalDiagnosisDate
			,ISNULL(personInvestigatedBy.strFamilyName, N'') + ISNULL(', ' + personInvestigatedBy.strFirstName, '') + ISNULL(' ' + personInvestigatedBy.strSecondName, '') AS InvestigatedByPersonName
			,ISNULL(personReportedBy.strFamilyName, N'') + ISNULL(', ' + personReportedBy.strFirstName, '') + ISNULL(' ' + personReportedBy.strSecondName, '') AS ReportedByPersonName
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockSickAnimalQty, '0')
					ELSE ISNULL(f.intAvianSickAnimalQty, '0')
					END
				) AS TotalSickAnimalQuantity
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockTotalAnimalQty, '0')
					ELSE ISNULL(f.intAvianTotalAnimalQty, '0')
					END
				) AS TotalAnimalQuantity
			,(
				CASE 
					WHEN v.idfsCaseType = 10012003
						THEN ISNULL(f.intLivestockDeadAnimalQty, '0')
					ELSE ISNULL(f.intAvianDeadAnimalQty, '0')
					END
				) AS TotalDeadAnimalQuantity
			,(
				CASE 
					WHEN @IncludeSpeciesListIndicator = 1
						THEN (
								SELECT STRING_AGG(speciesType.name, ', ') WITHIN
								GROUP (
										ORDER BY speciesType.name
										) AS Result
								FROM dbo.tlbSpecies s
								INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) AS speciesType ON speciesType.idfsReference = s.idfsSpeciesType
								INNER JOIN dbo.tlbHerd AS h ON h.idfHerd = s.idfHerd
									AND h.intRowStatus = 0
									AND h.idfFarm = v.idfFarm
								WHERE s.intRowStatus = 0
								)
					ELSE ''
					END
				) AS SpeciesList
			,f.strFarmCode AS FarmID
			,f.idfFarmActual AS FarmMasterKey
			,f.strNationalName AS FarmName
			,f.idfHuman AS FarmOwnerKey
			,haai.EIDSSPersonID AS FarmOwnerID
			,ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, '') + ISNULL(' ' + h.strSecondName, '') AS FarmOwnerName
			,(lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) AS FarmLocation
			,dbo.FN_GBL_CreateAddressString	(ISNULL(lh.AdminLevel4Name, N''), ISNULL(lh.AdminLevel3Name, N''), ISNULL(lh.AdminLevel2Name, N''), '', '', '', '', '', '', '',0,'') AS FarmAddress
			,v.datEnteredDate AS EnteredDate
			,ISNULL(personEnteredBy.strFamilyName, N'') + ISNULL(', ' + personEnteredBy.strFirstName, '') + ISNULL(' ' + personEnteredBy.strSecondName, '') AS EnteredByPersonName
			,v.idfsSite AS SiteKey
			,f.idfFarm
			,res.ReadPermissionIndicator
			,res.AccessToPersonalDataPermissionIndicator
			,res.AccessToGenderAndAgeDataPermissionIndicator
			,res.WritePermissionIndicator
			,res.DeletePermissionIndicator
			,c AS TotalRowCount
			,(
				SELECT COUNT(*)
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
					AND f.intRowStatus = 0
				WHERE v.intRowStatus = 0
					AND (
						(v.idfsCaseType = @SpeciesTypeID)
						OR @SpeciesTypeID IS NULL
						)
				) AS TotalCount
			,TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
			,CurrentPage = @PageNumber
		FROM paging 
			INNER JOIN @FinalResults res ON res.ID = paging.ID
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbPerson personInvestigatedBy ON personInvestigatedBy.idfPerson = v.idfPersonInvestigatedBy
			LEFT JOIN dbo.tlbPerson personEnteredBy ON personEnteredBy.idfPerson = v.idfPersonEnteredBy
			LEFT JOIN dbo.tlbPerson personReportedBy ON personReportedBy.idfPerson = v.idfPersonReportedBy
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
			LEFT JOIN dbo.tlbOutbreak o ON o.idfOutbreak = v.idfOutbreak
				AND o.intRowStatus = 0
			INNER JOIN dbo.OutbreakCaseReport ocr ON ocr.idfOutbreak = v.idfOutbreak AND ocr.idfVetCase IS NOT NULL
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) finalDiagnosis ON finalDiagnosis.idfsReference = v.idfsFinalDiagnosis
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) caseClassification ON caseClassification.idfsReference = v.idfsCaseClassification
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus ON reportStatus.idfsReference = v.idfsCaseProgressStatus
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType ON reportType.idfsReference = v.idfsCaseReportType
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000012) caseType ON caseType.idfsReference = v.idfsCaseType
		ORDER BY 
			CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN v.strCaseID END ASC,
			CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN v.strCaseID END DESC,
			CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN v.datEnteredDate END ASC,
			CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN v.datEnteredDate END DESC,
			CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'ASC' THEN finalDiagnosis.name END ASC,
			CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'DESC' THEN finalDiagnosis.name END DESC,
			CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'ASC' THEN f.strNationalName END ASC,
			CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'DESC' THEN f.strNationalName END DESC,
			CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'ASC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END ASC,
			CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'DESC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END DESC,
			CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'ASC' THEN caseClassification.name END ASC,
			CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'DESC' THEN caseClassification.name END DESC,
			CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'ASC' THEN reportStatus.name END ASC,
			CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'DESC' THEN reportStatus.name END DESC,
			CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'ASC' THEN reportType.name END ASC,
			CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'DESC' THEN reportType.name END DESC;
			
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END;
GO
PRINT N'Creating Procedure [dbo].[USSP_GBL_BASE_REFERENCE_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_BASE_REFERENCE_SET
--
-- Description: Insert/update base reference data.  Non-API stored procedure.  Only call via 
-- other stored procedures.
--           
-- Revision History:
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		12/13/2022 Initial release for data auditing for SAUC30 and 31.
-- Stephen Long     02/13/2023 Changed default name from varchar to nvarchar.
--
-- Testing Code:
/*
DECLARE @idfsSpeciesType BIGINT

EXEC dbo.USSP_GBL_Base_Reference_SET @idfsSpeciesType OUTPUT, 19000086, 'en-US', 'Mark', 'Mark', 0, 0, 'System'
*/
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_GBL_BASE_REFERENCE_SET]
(
    @BaseReferenceID BIGINT = NULL OUTPUT,
    @BaseReferenceTypeID BIGINT,
    @LanguageID NVARCHAR(50),
    @DefaultName NVARCHAR(200),          -- Default reference name, used if there is no reference translation
    @NationalName NVARCHAR(200) = NULL, -- Reference name in the language defined by @LanguageID
    @AccessoryCode INT = NULL,          -- Bit mask for reference using
    @Order INT = NULL,                  -- Reference record order for sorting
    @SystemValueIndicator BIT = 0,
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @UniqueDefaultValueIndicator BIT = 'TRUE' OUTPUT
)
AS
-- Data audit
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @CustomizationPackageID BIGINT,
        @ObjectTypeID BIGINT = 10017042,     -- Base Reference
        @ObjectID BIGINT = @BaseReferenceID,
        @ObjectTableID BIGINT = 75820000000; -- trtBaseReference

DECLARE @BaseReferenceAfterEdit TABLE
(
    BaseReferenceID BIGINT,
    BaseReferenceTypeID BIGINT,
    BaseReferenceCode VARCHAR(36),
    DefaultValue NVARCHAR(2000),
    AccessoryCode INT,
    OrderValue INT,
    SystemValueIndicator BIT
);
DECLARE @BaseReferenceBeforeEdit TABLE
(
    BaseReferenceID BIGINT,
    BaseReferenceTypeID BIGINT,
    BaseReferenceCode VARCHAR(36),
    DefaultValue NVARCHAR(2000),
    AccessoryCode INT,
    OrderValue INT,
    SystemValueIndicator BIT
);
-- End data audit
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF EXISTS
        (
            SELECT idfsBaseReference
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @BaseReferenceID
                  AND intRowStatus = 0
        )
        BEGIN
            -- Data audit
            INSERT INTO @BaseReferenceBeforeEdit
            (
                BaseReferenceID,
                BaseReferenceTypeID,
                BaseReferenceCode,
                DefaultValue,
                AccessoryCode,
                OrderValue,
                SystemValueIndicator
            )
            SELECT idfsBaseReference,
                   idfsReferenceType,
                   strBaseReferenceCode,
                   strDefault,
                   intHACode,
                   intOrder,
                   blnSystem
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @BaseReferenceID;
            -- End data audit

            UPDATE dbo.trtBaseReference
            SET idfsReferenceType = @BaseReferenceTypeID,
                strDefault = ISNULL(@DefaultName, strDefault),
                intHACode = ISNULL(@AccessoryCode, intHACode),
                intOrder = ISNULL(@Order, intOrder),
                blnSystem = ISNULL(@SystemValueIndicator, blnSystem),
                rowguid = ISNULL(rowguid, NEWID()),
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfsBaseReference = @BaseReferenceID;

            -- Data audit
            INSERT INTO @BaseReferenceAfterEdit
            (
                BaseReferenceID,
                BaseReferenceTypeID,
                BaseReferenceCode,
                DefaultValue,
                AccessoryCode,
                OrderValue,
                SystemValueIndicator
            )
            SELECT idfsBaseReference,
                   idfsReferenceType,
                   strBaseReferenceCode,
                   strDefault,
                   intHACode,
                   intOrder,
                   blnSystem
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @BaseReferenceID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81080000000,
                   a.BaseReferenceID,
                   NULL,
                   b.BaseReferenceTypeID,
                   a.BaseReferenceTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.BaseReferenceTypeID <> b.BaseReferenceTypeID)
                  OR (
                         a.BaseReferenceTypeID IS NOT NULL
                         AND b.BaseReferenceTypeID IS NULL
                     )
                  OR (
                         a.BaseReferenceTypeID IS NULL
                         AND b.BaseReferenceTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81110000000,
                   a.BaseReferenceID,
                   NULL,
                   b.BaseReferenceCode,
                   a.BaseReferenceCode,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.BaseReferenceCode <> b.BaseReferenceCode)
                  OR (
                         a.BaseReferenceCode IS NOT NULL
                         AND b.BaseReferenceCode IS NULL
                     )
                  OR (
                         a.BaseReferenceCode IS NULL
                         AND b.BaseReferenceCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81120000000,
                   a.BaseReferenceID,
                   NULL,
                   b.DefaultValue,
                   a.DefaultValue,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.DefaultValue <> b.DefaultValue)
                  OR (
                         a.DefaultValue IS NOT NULL
                         AND b.DefaultValue IS NULL
                     )
                  OR (
                         a.DefaultValue IS NULL
                         AND b.DefaultValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81090000000,
                   a.BaseReferenceID,
                   NULL,
                   b.AccessoryCode,
                   a.AccessoryCode,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.AccessoryCode <> b.AccessoryCode)
                  OR (
                         a.AccessoryCode IS NOT NULL
                         AND b.AccessoryCode IS NULL
                     )
                  OR (
                         a.AccessoryCode IS NULL
                         AND b.AccessoryCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81100000000,
                   a.BaseReferenceID,
                   NULL,
                   b.OrderValue,
                   a.OrderValue,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.OrderValue <> b.OrderValue)
                  OR (
                         a.OrderValue IS NOT NULL
                         AND b.OrderValue IS NULL
                     )
                  OR (
                         a.OrderValue IS NULL
                         AND b.OrderValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   747460000000,
                   a.BaseReferenceID,
                   NULL,
                   b.SystemValueIndicator,
                   a.SystemValueIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.SystemValueIndicator <> b.SystemValueIndicator)
                  OR (
                         a.SystemValueIndicator IS NOT NULL
                         AND b.SystemValueIndicator IS NULL
                     )
                  OR (
                         a.SystemValueIndicator IS NULL
                         AND b.SystemValueIndicator IS NOT NULL
                     );
        -- End data audit
        END
        ELSE
        BEGIN
            IF @BaseReferenceID IS NULL
            BEGIN
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'trtBaseReference',
                                               @BaseReferenceID OUTPUT;
            END

            IF @Order IS NULL
            BEGIN
                SET @Order = 0;
            END

            IF EXISTS
            (
                SELECT *
                FROM dbo.trtBaseReference
                WHERE strDefault = @DefaultName
                      AND idfsReferenceType = @BaseReferenceTypeID
            )
                SET @UniqueDefaultValueIndicator = 'FALSE';
            ELSE
                SET @UniqueDefaultValueIndicator = 'TRUE';

            INSERT INTO dbo.trtBaseReference
            (
                idfsBaseReference,
                idfsReferenceType,
                strBaseReferenceCode,
                strDefault,
                intHACode,
                intOrder,
                blnSystem,
                intRowStatus,
                rowguid,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@BaseReferenceID,
             @BaseReferenceTypeID,
             NULL,
             @DefaultName,
             NULL,
             @Order,
             0  ,
             0  ,
             NEWID(),
             'ADD',
             'EIDSS7 new reference data',
             10519001,
             N'[{"idfsBaseReference":' + CAST(@BaseReferenceID AS NVARCHAR(300)) + '}]',
             GETDATE(),
             @AuditUserName
            );

            SELECT @CustomizationPackageID = dbo.FN_GBL_CustomizationPackage_GET();

            IF @CustomizationPackageID IS NOT NULL
               AND @CustomizationPackageID <> 51577300000000 -- The USA
            BEGIN
                EXEC dbo.USP_GBL_BaseReferenceToCP_SET @BaseReferenceID,
                                                       @CustomizationPackageID;
            END

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @BaseReferenceID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END

        EXEC dbo.USSP_GBL_StringTranslation_SET @BaseReferenceID,
                                                @LanguageID,
                                                @NationalName;

        RETURN;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Creating Procedure [dbo].[USSP_GBL_DATA_AUDIT_EVENT_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_DATA_AUDIT_EVENT_SET
--
-- Description:	Inserts a new record into the data audit event table.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/03/2023 Initial release with data audit logic for SAUC30 and 31.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_GBL_DATA_AUDIT_EVENT_SET] 
	@idfUserId BIGINT = NULL, 
	@idfSiteId BIGINT = NULL,
	@idfsDataAuditEventType BIGINT=NULL,
	@idfsDataAuditObjectType BIGINT=NULL,
	@idfMainObject BIGINT=NULL,
	@idfMainObjectTable BIGINT=NULL,
	@strMainObject NVARCHAR(200)=NULL,
	@event BIGINT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @officeid BIGINT
	DECLARE @siteid BIGINT 
	DECLARE @aspnetUserId UNIQUEIDENTIFIER

	-- Get the user's siteid...
	SELECT @aspnetUserId = ID FROM dbo.aspnetUsers WHERE idfUserID = @idfUserId;
	SELECT @officeid = idfInstitution FROM dbo.EmployeeToInstitution eti WHERE eti.aspNetUserId = @aspnetUserId AND eti.IsDefault = 1;
	IF (@idfSiteId != NULL)
		SELECT @siteid = idfsSite FROM dbo.tstsite WHERE idfOffice = @officeid;
	ELSE
		SET @siteid= @idfSiteId;

	SELECT @event = idfDataAuditEvent 
	FROM dbo.tstLocalConnectionContext lcc 
	WHERE @idfUserId = @idfUserId;

	IF @event is null
	BEGIN
		EXEC dbo.USP_GBL_NEXTKEYID_GET 'tauDataAuditEvent', @event OUTPUT;

		INSERT INTO dbo.tauDataAuditEvent (
			idfDataAuditEvent,
			idfsDataAuditObjectType,
			idfsDataAuditEventType,
			idfMainObject,
			idfMainObjectTable,
			idfUserID,
			idfsSite,
			datEnteringDate,
			strMainObject
		) 
		VALUES
			(@event,
			@idfsDataAuditObjectType,
			@idfsDataAuditEventType, 
			@idfMainObject,
			@idfMainObjectTable,
			@idfUserId,
			@siteid,
			GETDATE(),
			@strMainObject
			);

			UPDATE dbo.tstLocalConnectionContext
			SET idfDataAuditEvent = @event
			WHERE idfUserID = @idfUserId;
	END 
END
GO
PRINT N'Creating Procedure [dbo].[USSP_GBL_SITE_CUSTOMUSERGROUP_SET]...';


GO
-- -- ============================================================================
-- Name: [USSP_GBL_SITE_CUSTOMUSERGROUUP_SET]
-- Description: Insert Site Custom User Roles from CDR Site
--                      
-- Author: Mani -  02/5/2023 Copied from Mark's Script
-- History

 --Manickandan Govindarajan  02/16/2023 Added insert statments for inserting dashboard icon and grid records into LkupRoleDashboardObject for e7 custom roles

-- ============================================================================


CREATE PROCEDURE [dbo].[USSP_GBL_SITE_CUSTOMUSERGROUP_SET] (
	@SiteId bigint
)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

DECLARE @tlbEmployeeGroup TABLE
(
	idfsEmployeeGroupName BIGINT,
	idfsSite BIGINT,
	strName NVARCHAR(200),
	strDescription NVARCHAR(200)

)
INSERT INTO @tlbEmployeeGroup
(
	idfsEmployeeGroupName,
	idfsSite,
	strName,
	strDescription
	
)

SELECT 
	T.idfsEmployeeGroupName,
	@siteId,
	T.strName,
	T.strDescription
	

FROM dbo.tlbEmployeeGroup T
INNER JOIN dbo.trtBaseReference S ON S.idfsBaseReference = T.idfEmployeeGroup
CROSS APPLY dbo.tstSite Sites
WHERE T.idfEmployeeGroup IN (-501, -506, -513, -514, -515, -516, -517, -518, -519, -520, -521, -522, -523, -524, -525, -526, -527, -528, -529)
AND Sites.idfsSite =  dbo.FN_GBL_SITEID_GET()

DECLARE @idfEmployeeGroup BIGINT;
DECLARE @idfEmployee BIGINT;
DECLARE @idfsEmployeeGroupName BIGINT;
DECLARE @idfsSite BIGINT;
DECLARE @strName NVARCHAR(200);
DECLARE @strDescription NVARCHAR(200);

DECLARE tlbEmployeeGroup_cursor CURSOR FOR
SELECT
	idfsEmployeeGroupName,
	@siteId,
	strName,
	strDescription
FROM @tlbEmployeeGroup

OPEN tlbEmployeeGroup_cursor;

FETCH NEXT FROM tlbEmployeeGroup_cursor INTO @idfsEmployeeGroupName, @idfsSite, @strName, @strDescription;
WHILE @@FETCH_STATUS = 0
BEGIN

	
		
		
		EXEC dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbEmployee',
		@idfsKey = @idfEmployee OUTPUT

		INSERT INTO dbo.tlbEmployee
		(
			idfEmployee,
			idfsEmployeeType,
			idfsSite,
			intRowStatus,
			rowguid,
			SourceSystemNameID,
			SourceSystemKeyValue,
			AuditCreateUser,
			AuditCreateDTM,
			idfsEmployeeCategory
		)

		SELECT

			@idfEmployee,
			10023001,
			@idfsSite,
			0,
			NEWID(),
			10519001,
			'[{"idfEmployee":' + CAST(@idfEmployee AS NVARCHAR(24)) + '}]',
			'System',
			GETDATE(),
			10526002


		INSERT INTO dbo.tlbEmployeeGroup
		(
			idfEmployeeGroup,
			idfsEmployeeGroupName,
			idfsSite,
			strName,
			strDescription,
			rowguid,
			intRowStatus,
			SourceSystemNameID,
			SourceSystemKeyValue,
			AuditCreateUser,
			AuditCreateDTM
		)
		SELECT
			@idfEmployee,
			@idfsEmployeeGroupName,
			@idfsSite,
			@strName,
			@strDescription,
			NEWID(),
			0,
			10519001,
			'[{"idfEmployeeGroup":' + CAST(@idfEmployeeGroup AS NVARCHAR(24)) + '}]',
			'System',
			GETDATE()


	IF NOT EXISTS (SELECT * FROM dbo.LkupRoleSystemFunctionAccess WHERE idfEmployee = @idfEmployee)
	BEGIN
		INSERT INTO dbo.LkupRoleSystemFunctionAccess
		(
			idfEmployee,
			SystemFunctionID,
			SystemFunctionOperationID,
			AccessPermissionID,
			intRowStatus,
			AuditCreateUser,
			AuditCreateDTM,
			rowguid,
			SourceSystemNameID,
			SourceSystemKeyValue,
			intRowStatusForSystemFunction
		)

		SELECT
			@idfEmployee,
			SystemFunctionID,
			SystemFunctionOperationID,
			AccessPermissionID,
			r.intRowStatus,
			'System',
			GETDATE(),
			NEWID(),
			10519001,
			'{"idfEmployee":-' + CAST(@idfEmployee AS NVARCHAR(24)) + ',"SystemFunctionID":' + CAST(SystemFunctionID AS NVARCHAR(24)) + '}',
			intRowStatusForSystemFunction
		FROM dbo.LkupRoleSystemFunctionAccess r
			inner join tlbEmployeeGroup eg on eg.idfEmployeeGroup = r.idfEmployee
		WHERE idfEmployee = @idfsEmployeeGroupName  and eg.idfsSite =  dbo.FN_GBL_SITEID_GET()

	END

    /*--dashboard objects**/

	IF NOT EXISTS (SELECT * FROM dbo.LkupRoleDashboardObject WHERE idfEmployee = @idfEmployee)
	BEGIN
		INSERT INTO dbo.LkupRoleDashboardObject
		(
		    idfEmployee,
		    DashboardObjectID,
		    DisplayName,
		    DisplayOrder,
		    intRowStatus,
		    AuditCreateUser,
		    AuditCreateDTM,
		    AuditUpdateUser,
		    AuditUpdateDTM,
		    rowguid,
		    SourceSystemNameID,
		    SourceSystemKeyValue
		)

		SELECT
			@idfEmployee,
			DashboardObjectID,
		    DisplayName,
		    DisplayOrder,
		    r.intRowStatus,
		    'System',
		    GETDATE(),
		    r.AuditUpdateUser,
		    GETDATE(),
		    NEWID(),
			10519001,
			'{"idfEmployee":-' + CAST(@idfEmployee AS NVARCHAR(24)) + ',"DashboardObjectID":' + CAST(DashboardObjectID AS NVARCHAR(24)) + '}'
				FROM dbo.LkupRoleDashboardObject r
			inner join tlbEmployeeGroup eg on eg.idfEmployeeGroup = r.idfEmployee
		WHERE idfEmployee = @idfsEmployeeGroupName  and eg.idfsSite =  dbo.FN_GBL_SITEID_GET()

	END

	FETCH NEXT FROM tlbEmployeeGroup_cursor INTO @idfsEmployeeGroupName, @SiteId, @strName, @strDescription;

END


CLOSE tlbEmployeeGroup_cursor;
DEALLOCATE tlbEmployeeGroup_cursor;

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ACCESS_RULE_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_ACCESS_RULE_SET
--
-- Description:	Inserts or updates access rules for configurable site filtration.
--                      
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- -------------------------------------------------------------------
-- Stephen Long    11/11/2020 Initial release.
-- Stephen Long    11/23/2020 Correction on USSP_ADMIN_ACCESS_RULE_ACTOR_SET call.
-- Stephen Long    11/25/2020 Added permission indicator parameters and insert/updates.
-- Stephen Long    12/18/2020 Added bordering area rule indicator.
-- Stephen Long    12/27/2020 Added reciprocal rule indicator.
-- Stephen Long    03/18/2021 Added default rule and administrative level type ID parameters.
-- Stephen Long    06/17/2021 Changed to key ID and key name for API save response model.
-- Stephen Long    01/09/2022 Added create permission indicator.
-- Stephen Long    03/16/2022 Changed row action from char to int.
-- Stephen Long    03/18/2022 Changed size of access rule name from 200 to max.
-- Stephen Long    07/15/2022 Comment out access rule name field; need to add base reference 
--                            logic for the name.
-- Stephen Long    12/16/2022 Fix to add audit user name parameter.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_ACCESS_RULE_SET]
(
    @AccessRuleID BIGINT = NULL,
    @AccessRuleName NVARCHAR(MAX),
    @BorderingAreaRuleIndicator BIT = 0,
    @DefaultRuleIndicator BIT = 0,
    @ReciprocalRuleIndicator BIT = 0,
    @GrantingActorSiteGroupID BIGINT = NULL,
    @GrantingActorSiteID BIGINT = NULL,
    @AccessToPersonalDataPermissionIndicator BIT = 0,
    @AccessToGenderAndAgeDataPermissionIndicator BIT = 0,
    @CreatePermissionIndicator BIT = 0,
    @DeletePermissionIndicator BIT = 0,
    @ReadPermissionIndicator BIT = 0,
    @WritePermissionIndicator BIT = 0,
    @AdministrativeLevelTypeID BIGINT = NULL,
    @RowStatus INT = 0,
    @ReceivingActors NVARCHAR(MAX) = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0;
        DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @RowAction CHAR = NULL,
                @RowID BIGINT = NULL,
                @AccessRuleActorID BIGINT = NULL,
                @GrantingActorIndicator BIT = NULL,
                @ActorSiteGroupID BIGINT = NULL,
                @ActorSiteID BIGINT = NULL,
                @ActorEmployeeGroupID BIGINT = NULL,
                @ActorUserID BIGINT = NULL;
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage VARCHAR(200)
        );
        DECLARE @ActorsTemp TABLE
        (
            AccessRuleActorID BIGINT NOT NULL,
            GrantingActorIndicator BIT NOT NULL,
            ActorSiteGroupID BIGINT NULL,
            ActorSiteID BIGINT NULL,
            ActorEmployeeGroupID BIGINT NULL,
            ActorUserID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );

        BEGIN TRANSACTION;

        INSERT INTO @ActorsTemp
        SELECT *
        FROM
            OPENJSON(@ReceivingActors)
            WITH
            (
                AccessRuleActorID BIGINT,
                GrantingActorIndicator BIT,
                ActorSiteGroupID BIGINT,
                ActorSiteID BIGINT,
                ActorEmployeeGroupID BIGINT,
                ActorUserID BIGINT,
                RowStatus INT,
                RowAction INT
            );

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.AccessRule
            WHERE AccessRuleID = @AccessRuleID
                  AND intRowStatus = 0
        )
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'AccessRule', @AccessRuleID OUTPUT;

            INSERT INTO dbo.AccessRule
            (
                AccessRuleID,
                DefaultRuleIndicator,
                BorderingAreaRuleIndicator,
                ReciprocalRuleIndicator,
                GrantingActorSiteGroupID,
                GrantingActorSiteID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                CreatePermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator,
                AdministrativeLevelTypeID,
                intRowStatus,
                AuditCreateDTM,
                AuditCreateUser,
                SourceSystemNameID,
				SourceSystemKeyValue
            )
            VALUES
            (@AccessRuleID,
             @DefaultRuleIndicator,
             @BorderingAreaRuleIndicator,
             @ReciprocalRuleIndicator,
             @GrantingActorSiteGroupID,
             @GrantingActorSiteID,
             @ReadPermissionIndicator,
             @AccessToPersonalDataPermissionIndicator,
             @AccessToGenderAndAgeDataPermissionIndicator,
             @CreatePermissionIndicator,
             @WritePermissionIndicator,
             @DeletePermissionIndicator,
             @AdministrativeLevelTypeID,
             @RowStatus,
             GETDATE(),
             @AuditUserName,
             10519002,
			'[{"AccessRuleID":' + CAST(@AccessRuleID AS NVARCHAR(24)) + '}]'
            );
        END
        ELSE
        BEGIN
            UPDATE dbo.AccessRule
            SET DefaultRuleIndicator = @DefaultRuleIndicator,
                BorderingAreaRuleIndicator = @BorderingAreaRuleIndicator,
                @ReciprocalRuleIndicator = @ReciprocalRuleIndicator,
                GrantingActorSiteGroupID = @GrantingActorSiteGroupID,
                GrantingActorSiteID = @GrantingActorSiteID,
                ReadPermissionIndicator = @ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator = @AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator = @AccessToGenderAndAgeDataPermissionIndicator,
                CreatePermissionIndicator = @CreatePermissionIndicator,
                WritePermissionIndicator = @WritePermissionIndicator,
                DeletePermissionIndicator = @DeletePermissionIndicator,
                AdministrativeLevelTypeID = @AdministrativeLevelTypeID,
                intRowStatus = @RowStatus,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE AccessRuleID = @AccessRuleID;
        END;

        WHILE EXISTS (SELECT * FROM @ActorsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AccessRuleActorID,
                @AccessRuleActorID = AccessRuleActorID,
                @GrantingActorIndicator = GrantingActorIndicator,
                @ActorSiteGroupID = ActorSiteGroupID,
                @ActorSiteID = ActorSiteID,
                @ActorEmployeeGroupID = ActorEmployeeGroupID,
                @ActorUserID = ActorUserID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActorsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_ACCESS_RULE_ACTOR_SET @AccessRuleActorID OUTPUT,
                                                         @AccessRuleID,
                                                         @GrantingActorIndicator,
                                                         @ActorSiteGroupID,
                                                         @ActorSiteID,
                                                         @ActorEmployeeGroupID,
                                                         @ActorUserID,
                                                         @RowStatus,
                                                         @RowAction,
                                                         @AuditUserName;

            DELETE FROM @ActorsTemp
            WHERE AccessRuleActorID = @RowID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @AccessRuleID KeyId,
               'AccessRuleID' KeyIdName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @AccessRuleID KeyId,
               'AccessRuleID' KeyIdName;
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEPARTMENT_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_DEPARTMENT_SET
--
-- Description: Adds or updates a department in an organization.
-- Author: Ricky Moss
-- 
-- Change Log:
-- Name 				Date       Description
-- -------------------- ---------- ---------------------------------------------------------------
-- Ricky Moss			12/27/2019 Initial Release
-- Ricky Moss			01/03/2020 Refactored to check Department Name existence
-- Ann Xiong		    11/20/2020 Modified to insert NationalName in trtStringNameTranslation
-- Mark Wilson			08/10/2021 Updated to use E7 artifacts
-- Stephen Long         09/01/2021 Added order and row status parameters and added organization 
--                                 ID to the duplicate department check.  Duplicate check will 
--                                 be performed on both insert and update.
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_ADMIN_Department_Set]
		@LanguageID = N'en-US',
		@DepartmentID = NULL,
		@OrganizationID = 48120000000,
		@DefaultName = N'DEP199',
		@NationalName = N'DEP1100',
		@CountryID = NULL,
		@UserName = N'rykermase',
		@RowAction = NULL - values are R for read, I for insert, U for update and D for delete.

SELECT	'Return Value' = @return_value

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEPARTMENT_SET] (
	@LanguageID NVARCHAR(50)
	,@DepartmentID BIGINT = NULL
	,@DefaultName NVARCHAR(200)
	,@NationalName NVARCHAR(200)
	,@OrganizationID BIGINT
	,@DepartmentNameTypeID BIGINT
	,@Order INT = 0
	,@UserName VARCHAR(100) = NULL
	,@RowStatus INT = 0
	)
AS
BEGIN
	DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS';
	DECLARE @ReturnCode BIGINT = 0;

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017016;                         -- Department
	declare @idfObject bigint = @DepartmentID;
	declare @idfObjectTable_tlbDepartment bigint = 50815890000000;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfObjectTable_trtBaseReference bigint = 75820000000;
	declare @idfObjectTable_trtStringNameTranslation bigint = 75990000000;

    DECLARE @tlbDepartment_BeforeEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );
    DECLARE @tlbDepartment_AfterEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@UserName) userInfo

	--Data Audit--

	BEGIN TRY
		IF @RowStatus = 1 -- Soft Delete
		BEGIN
			IF @DepartmentNameTypeID IS NULL
			BEGIN
				SELECT @DepartmentNameTypeID = idfsDepartmentName
				FROM dbo.tlbDepartment
				WHERE idfDepartment = @DepartmentID;
			END

			--Data Audit

			-- tauDataAuditEvent Event Type - Delete
			set @idfsDataAuditEventType =10016002;

			-- insert record into tauDataAuditEvent
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbDepartment, @idfDataAuditEvent OUTPUT

			--Data Audit--

			UPDATE dbo.tlbDepartment
			SET intRowStatus = @RowStatus
				,AuditUpdateDTM = GETDATE()
				,AuditUpdateUser = @UserName
			WHERE idfDepartment = @DepartmentID;

            -- Data audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_tlbDepartment, @idfObject
            -- End data audit

			UPDATE dbo.trtBaseReference
			SET intRowStatus = @RowStatus
			WHERE idfsBaseReference = @DepartmentNameTypeID
				AND intRowStatus = 0;

            -- Data audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_trtBaseReference, @DepartmentNameTypeID
            -- End data audit

			UPDATE dbo.trtStringNameTranslation
			SET intRowStatus = @RowStatus
			WHERE idfsBaseReference = @DepartmentNameTypeID;

            -- Data audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @DepartmentNameTypeID
            -- End data audit
		END
		ELSE
		BEGIN
			IF (
					SELECT COUNT(b.idfsReference)
					FROM dbo.FN_GBL_ReferenceRepair_GET(@LanguageID, 19000164) b
					INNER JOIN dbo.tlbDepartment d ON d.idfsDepartmentName = b.idfsReference
					WHERE b.strDefault = @DefaultName
						AND d.intRowStatus = 0
						AND d.idfOrganization = @OrganizationID
						AND ((d.idfDepartment <> @DepartmentID AND @DepartmentID IS NOT NULL AND @DepartmentID > 0) --Update
						OR (@DepartmentID IS NULL OR @DepartmentID < 0)) --Insert
					) > 0
			BEGIN
				SELECT @ReturnMessage = 'DOES EXIST';
			END

			IF @ReturnMessage <> 'DOES EXIST'
			BEGIN
				IF @DepartmentID IS NULL
					OR @DepartmentID < 0
				BEGIN
					IF (
							UPPER(@LanguageID) = 'EN-US'
							AND ISNULL(@DefaultName, N'') = N''
							)
					BEGIN
						SET @DefaultName = @NationalName;
					END

					EXECUTE dbo.USSP_GBL_BaseReference_SET @DepartmentNameTypeID OUTPUT
						,19000164
						,@LanguageID
						,@DefaultName
						,@NationalName
						,0
						,@Order
						,0;

					EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbDepartment'
						,@DepartmentID OUTPUT;

					INSERT INTO dbo.tlbDepartment (
						idfDepartment
						,idfsDepartmentName
						,idfOrganization
						,strReservedAttribute
						,intRowStatus
						,rowguid
						,SourceSystemNameID
						,SourceSystemKeyValue
						,AuditCreateUser
						,AuditCreateDTM
						,AuditUpdateUser
						,AuditUpdateDTM
						)
					VALUES (
						@DepartmentID
						,@DepartmentNameTypeID
						,@OrganizationID
						,dbo.FN_GBL_DATACHANGE_INFO(@UserName)
						,0
						,NEWID()
						,10519001
						,N'[{"idfDepartment":' + CAST(@DepartmentID AS NVARCHAR(300)) + '}]'
						,@UserName
						,GETDATE()
						,@UserName
						,GETDATE()
						);

					--Data Audit--
					-- tauDataAuditEvent Event Type - Create 
					set @idfsDataAuditEventType =10016001;
					-- insert record into tauDataAuditEvent - 
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@DepartmentID, @idfObjectTable_tlbDepartment, @idfDataAuditEvent OUTPUT

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbDepartment, @DepartmentID)
					--Data Audit--

				END
				ELSE
				BEGIN
					SELECT @DepartmentNameTypeID = (
							SELECT idfsDepartmentName
							FROM dbo.tlbDepartment
							WHERE idfDepartment = @DepartmentID
							);

					EXECUTE dbo.USSP_GBL_BaseReference_SET @DepartmentNameTypeID
						,19000164
						,@LanguageID
						,@DefaultName
						,@NationalName
						,0
						,@Order
						,0;

                    -- Data audit
                    INSERT INTO @tlbDepartment_BeforeEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;
                    -- End data audit

					UPDATE dbo.tlbDepartment
					SET idfsDepartmentName = @DepartmentNameTypeID
						,strReservedAttribute = dbo.FN_GBL_DATACHANGE_INFO(@UserName)
						,AuditUpdateUser = @UserName
						,AuditUpdateDTM = GETDATE()
					WHERE idfDepartment = @DepartmentID;

                    -- Data audit
                    INSERT INTO @tlbDepartment_AfterEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;

			        --  tauDataAuditEvent  Event Type- Edit 
			        set @idfsDataAuditEventType =10016003;
			        -- insert record into tauDataAuditEvent - 
			        EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbDepartment, @idfDataAuditEvent OUTPUT

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue
                    )
                    SELECT @idfDataAuditEvent,
                           @idfObjectTable_tlbDepartment,
                           50815910000000,
                           a.DepartmentID,
                           NULL,
                           b.DepartmentNameBaseReferenceID,
                           a.DepartmentNameBaseReferenceID
                    FROM @tlbDepartment_AfterEdit AS a
                        FULL JOIN @tlbDepartment_BeforeEdit AS b
                            ON a.DepartmentID = b.DepartmentID
                    WHERE (a.DepartmentNameBaseReferenceID <> b.DepartmentNameBaseReferenceID)
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NOT NULL
                                 AND b.DepartmentNameBaseReferenceID IS NULL
                             )
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NULL
                                 AND b.DepartmentNameBaseReferenceID IS NOT NULL
                             );
                    -- End data audit
				END
			END
		END;

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage
			,@DepartmentID KeyId
			,'DepartmentID' KeyName
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEEGROUP_SET]...';


GO
-- ===============================================================================================================
-- Name: USP_ADMIN_EMPLOYEEGROUP_SET
-- Description: Add or reactivates a relationship between an employee and employee group
-- Author: Ricky Moss
--
-- History of changes
--
-- Name					Date			Change
-- ---------------------------------------------------------------------------------------------------------------
-- Ricky Moss			12/02/2019		Initial Release
-- Ricky Moss			03/25/2019		Added EmployeeGroupName when checking for duplicate and refactored the 
--                                      query checking for duplicates
-- Stephen Long         05/19/2020 Updated existing default and name queries to use top 1 as the name was 
--                                 returning duplicates causing a subquery error.
-- Ann Xiong            01/27/2021 Modified to pass 10023001 (Employee Group) instead of 10023002 (Person) 
--                                 as idfsEmployeeType when insert new Employee Group to tlbEmployee.
-- Mandar				07/09/2021 Fixed an issue when creating a new user group.
-- Ann Xiong            10/28/2021 Modified to return ReturnMessage instead of RetunMessage.
-- Stephen Long         03/14/2022 Removed insert suppress select on base reference set; causing nested insert 
--                                 exec on USP_ADMIN_SITE_SET call.
-- Ann Xiong			02/23/2023 Fixed the issue "Subquery returned more than 1 value".
-- Ann Xiong			02/28/2023 Implemented Data Audit
-- Ann Xiong			03/01/2023 Fixed the issue of National Name not saved
--
-- EXEC USP_ADMIN_EMPLOYEEGROUP_SET -500, 1, 'Test 1204-7', 'Test 1204-7', 'Test Role on December 4',  'en', NULL
-- EXEC USP_ADMIN_EMPLOYEEGROUP_SET NULL, 1, 'Test 1205', 'Test 1205', 'Test Role on December 5',  'en', NULL
-- EXEC USP_ADMIN_EMPLOYEEGROUP_SET NULL, 1, 'Test 1212-1', 'Test 1212-1', 'Test Role on December 12',  'en', NULL
-- ===============================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEEGROUP_SET] (
	@idfEmployeeGroup BIGINT,
	@idfsSite BIGINT,
	@strDefault NVARCHAR(200),
	@strName NVARCHAR(200),
	@strDescription NVARCHAR(200),
	@langId NVARCHAR(50),
	@user NVARCHAR(200)
	)
AS
DECLARE @returnCode INT = 0
DECLARE @returnMsg NVARCHAR(50) = 'SUCCESS'
DECLARE @idfsEmployeeGroupName BIGINT
DECLARE @idfEmployee BIGINT
DECLARE @SupressSelect TABLE (
	retrunCode INT,
	returnMessage VARCHAR(200)
	)
DECLARE @existingDefault BIGINT
DECLARE @existingName BIGINT

		--Data Audit--
		declare @idfUserId BIGINT = NULL;
		declare @idfSiteId BIGINT = NULL;
		declare @idfsDataAuditEventType bigint = NULL;
		declare @idfsObjectType bigint = 10017058;                         -- User Group
		declare @idfObject bigint = @idfEmployeeGroup;
		declare @idfDataAuditEvent bigint= NULL;
		declare @idfObjectTable_tlbEmployee bigint = 75520000000;
		declare @idfObjectTable_tlbEmployeeGroup bigint = 75530000000;
		declare @idfObjectTable_trtBaseReference BIGINT = 75820000000;

		DECLARE @tlbEmployeeGroup_BeforeEdit TABLE
		(
			EmployeeGroupID BIGINT,
			strName varchar(200),
			strDescription varchar(200)
		);
		DECLARE @tlbEmployeeGroup_AfterEdit TABLE
		(
			EmployeeGroupID BIGINT,
			strName varchar(200),
			strDescription varchar(200)
		);
		DECLARE @trtBaseReference_BeforeEdit TABLE
		(
    		BaseReferenceID BIGINT,
    		DefaultValue NVARCHAR(2000)
		);
		DECLARE @trtBaseReference_AfterEdit TABLE
		(
    		BaseReferenceID BIGINT,
    		DefaultValue NVARCHAR(2000)
		);

		-- Get and Set UserId and SiteId
		select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@user) userInfo

		--Data Audit--

BEGIN
	BEGIN TRY
		SELECT @existingDefault = (
				SELECT TOP 1 idfsReference
				FROM dbo.FN_GBL_Reference_GETList(@LangID, 19000022)
				WHERE strDefault = @strDefault
				)

		SELECT @existingName = (
				SELECT TOP 1 idfsReference
				FROM dbo.FN_GBL_Reference_GETList(@LangID, 19000022)
				WHERE [name] = @strName
				)

		IF (
				@existingDefault IS NOT NULL
				OR @existingName IS NOT NULL
				)
			SELECT @idfsEmployeeGroupName = (
					SELECT TOP 1 idfsEmployeeGroupName
					FROM dbo.tlbEmployeeGroup
					WHERE idfsEmployeeGroupName IN (
							@existingDefault,
							@existingName
							)
					)

		IF (
				@existingDefault IS NOT NULL
				AND @existingDefault <> @idfsEmployeeGroupName
				AND @idfsEmployeeGroupName IS NOT NULL
				)
			OR (
				@existingDefault IS NOT NULL
				AND @idfsEmployeeGroupName IS NULL
				)
			OR (
				@existingName IS NOT NULL
				AND @existingName <> @idfsEmployeeGroupName
				AND @idfsEmployeeGroupName IS NOT NULL
				)
			OR (
				@existingName IS NOT NULL
				AND @idfEmployeeGroup IS NULL
				)
		BEGIN
			SELECT @idfEmployeeGroup = (
					SELECT TOP 1 idfEmployeeGroup
					FROM dbo.tlbEmployeeGroup
					WHERE strName = @strName
					)

			SELECT @returnMsg = 'DOES EXIST'
		END
		ELSE IF @idfEmployeeGroup IS NOT NULL
		BEGIN
			SELECT @idfsEmployeeGroupName = (
					SELECT idfsEmployeeGroupName
					FROM dbo.tlbEmployeeGroup
					WHERE idfEmployeeGroup = @idfEmployeeGroup
					)

            -- Data audit
            INSERT INTO @trtBaseReference_BeforeEdit
            (
                BaseReferenceID,
                DefaultValue
            )
            SELECT idfsBaseReference,
                   strDefault
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @idfsEmployeeGroupName
            -- End data audit

			UPDATE dbo.trtBaseReference
			SET strDefault = @strDefault
			WHERE idfsBaseReference = @idfsEmployeeGroupName

            -- Data audit
            INSERT INTO @trtBaseReference_AfterEdit
            (
                BaseReferenceID,
                DefaultValue
            )
            SELECT idfsBaseReference,
                   strDefault
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @idfsEmployeeGroupName

			--  tauDataAuditEvent  Event Type- Edit 
			set @idfsDataAuditEventType =10016003;
			-- insert record into tauDataAuditEvent - 
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfEmployeeGroup, @idfObjectTable_tlbEmployeeGroup, @idfDataAuditEvent OUTPUT

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_trtBaseReference,
                   81120000000,
                   a.BaseReferenceID,
                   NULL,
                   b.DefaultValue,
                   a.DefaultValue
            FROM @trtBaseReference_AfterEdit AS a
                FULL JOIN @trtBaseReference_BeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.DefaultValue <> b.DefaultValue)
                  OR (
                         a.DefaultValue IS NOT NULL
                         AND b.DefaultValue IS NULL
                     )
                  OR (
                         a.DefaultValue IS NULL
                         AND b.DefaultValue IS NOT NULL
                     );
            -- Data audit

			-- Data audit
            INSERT INTO @tlbEmployeeGroup_BeforeEdit
            (
                        EmployeeGroupID,
                           strName,
                           strDescription
            )
            SELECT	idfEmployeeGroup,
                           strName,
                           strDescription
           FROM dbo.tlbEmployeeGroup
		   WHERE idfEmployeeGroup = @idfEmployeeGroup
           -- End data audit

			UPDATE dbo.tlbEmployeeGroup
			SET strName = @strName,
				strDescription = @strDescription
			WHERE idfEmployeeGroup = @idfEmployeeGroup

			-- Data audit
            INSERT INTO @tlbEmployeeGroup_AfterEdit
            (
                        EmployeeGroupID,
                           strName,
                           strDescription
            )
            SELECT	idfEmployeeGroup,
                           strName,
                           strDescription
           FROM dbo.tlbEmployeeGroup
		   WHERE idfEmployeeGroup = @idfEmployeeGroup

		   insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbEmployeeGroup, 78710000000,
					a.EmployeeGroupID,null,
					a.strName,b.strName
			from @tlbEmployeeGroup_BeforeEdit a  inner join @tlbEmployeeGroup_AfterEdit b on a.EmployeeGroupID = b.EmployeeGroupID
			where (a.strName <> b.strName) 
					or(a.strName is not null and b.strName is null)
					or(a.strName is null and b.strName is not null)

			insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbEmployeeGroup, 78700000000,
					a.EmployeeGroupID,null,
					a.strDescription,b.strDescription
			from @tlbEmployeeGroup_BeforeEdit a  inner join @tlbEmployeeGroup_AfterEdit b on a.EmployeeGroupID = b.EmployeeGroupID
			where (a.strDescription <> b.strDescription) 
					or(a.strDescription is not null and b.strDescription is null)
					or(a.strDescription is null and b.strDescription is not null)

			--Data Audit--
		END
		ELSE
		BEGIN
			SET @idfEmployeeGroup = (
					SELECT MIN(idfEmployee) - 1
					FROM dbo.tlbEmployee
					)

			--Data Audit--
			-- tauDataAuditEvent Event Type - Create 
			set @idfsDataAuditEventType =10016001;
			-- insert record into tauDataAuditEvent - 
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfEmployeeGroup, @idfObjectTable_tlbEmployeeGroup, @idfDataAuditEvent OUTPUT
			--Data Audit--
			
			--INSERT INTO @SupressSelect
			--EXEC dbo.USP_GBL_BaseReference_SET
			--	@ReferenceID=@idfsEmployeeGroupName OUTPUT, 
			--	@ReferenceType=19000022, 
			--	@LangID=@LangID, 
			--	@DefaultName=@strDefault, 
			--	@NationalName=@strName, 
			--	@HACode=226, 
			--	@Order=0, 
			--	@System=0;

            EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @idfsEmployeeGroupName OUTPUT,
                                                        19000022,
                                                        @LangID,
                                                        @strDefault,
                                                        @strName,
                                                        226,
                                                        0,
                                                        0,
                                                        @User,
                                                        @idfDataAuditEvent,
                                                        NULL;

			INSERT INTO dbo.tlbEmployee (
				idfEmployee,
				idfsEmployeeType,
				idfsSite,
				intRowStatus
				)
			VALUES (
				@idfEmployeeGroup,
				10023001,
				@idfsSite,
				0
				)

			--Data Audit--
			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbEmployee, @idfEmployeeGroup)
			--Data Audit--

			INSERT INTO dbo.tlbEmployeeGroup (
				idfEmployeeGroup,
				idfsEmployeeGroupName,
				idfsSite,
				strName,
				strDescription,
				intRowStatus
				)
			VALUES (
				@idfEmployeeGroup,
				@idfsEmployeeGroupName,
				@idfsSite,
				@strName,
				@strDescription,
				0
				)

			--Data Audit--
			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbEmployeeGroup, @idfEmployeeGroup)
			--Data Audit--
		END

		SELECT @returnCode 'ReturnCode',
			@returnMsg 'ReturnMessage',
			@idfEmployeeGroup 'idfEmployeeGroup',
			@idfsEmployeeGroupName 'idfsEmployeeGroupName'
	END TRY

	BEGIN CATCH
		THROW
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_SITE_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_SITE_SET
--
-- Description:	Inserts or updates an EIDSS site for SAUC29.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/14/2022 Initial release.
-- Stephen Long     03/14/2022 Added additional columns to suppress select for employee group set.
-- Stephen Long     05/17/2022 Added insert for a new organization association to a site.
-- Stephen Long     07/15/2022 Comment out access rule name field; need to add base reference 
--                             logic for the name.
-- Stephen Long     12/22/2022 Fixed site permissions to use new stored procedure for object 
--                             access set, and logic for the default employee group for new sites.
-- Stephen Long     01/10/2023 Fix to add default employee group for existing sites when it does 
--                             not exist.
-- Ann Xiong		02/01/2022 Updated to copy aggreatesettings of parent site or top level site 
--                             and insert those aggreatesettings to the table tstAggrSetting when create a new site
-- Mani Govindarajan02/5/2023 Added to call [USSP_GBL_SITE_CUSTOMUSERGROUUP_SET] for adding Custom Roles for the newly added site.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_SITE_SET]
(
    @LanguageID NVARCHAR(50),
    @SiteID BIGINT = NULL,
    @CustomizationPackageID BIGINT = NULL,
    @EIDSSSiteID NVARCHAR(36) = NULL,
    @ParentSiteID BIGINT = NULL,
    @SiteTypeID BIGINT = NULL,
    @SiteName NVARCHAR(200) = NULL,
    @SiteOrganizationID BIGINT = NULL,
    @HASCSiteID NVARCHAR(50) = NULL,
    @RowStatus INT,
    @Permissions NVARCHAR(MAX) = NULL,
    @Organizations NVARCHAR(MAX) = NULL,
    @UserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT
            = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @RowAction CHAR = NULL,
                @RowID BIGINT = NULL,
                @OrganizationID BIGINT = NULL,
                @DefaultEmployeeGroupActorID BIGINT = -506, -- Default group for an EIDSS installation; not actually used for users/employees, but only as a template for other sites.
                @ObjectAccessID BIGINT = NULL,
                @ObjectOperationTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = NULL,
                @ObjectID BIGINT = NULL,
                @ActorID BIGINT = NULL,
                @PermissionTypeID INT = NULL;

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @OrganizationsTemp TABLE
        (
            OrganizationID BIGINT NOT NULL,
            RowAction INT NOT NULL
        );
        DECLARE @ObjectAccessRecordsTemp TABLE
        (
            ObjectAccessID BIGINT NOT NULL,
            ObjectOperationTypeID BIGINT NOT NULL,
            ObjectTypeID BIGINT NOT NULL,
            ObjectID BIGINT NOT NULL,
            ActorID BIGINT NOT NULL,
            DefaultEmployeeGroupIndicator BIT NOT NULL,
            SiteID BIGINT NOT NULL,
            PermissionTypeID INT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

		DECLARE @AggregateDiseaseReportTypeId BIGINT = NULL,
				@idfCustomizationPackage BIGINT = NULL,
				@idfsSite BIGINT = NULL,
				@StatisticalAreaTypeId BIGINT = NULL,
				@StatisticalPeriodTypeId BIGINT = NULL

		DECLARE @AggregateSettingRecordsTemp TABLE
		(
			AggregateDiseaseReportTypeId BIGINT NOT NULL,
			CustomizationPackageId BIGINT NOT NULL,
			SiteId BIGINT NULL,
			StatisticalAreaTypeId BIGINT NOT NULL,
			StatisticalPeriodTypeId BIGINT NOT NULL
		);

        BEGIN TRANSACTION;

        INSERT INTO @OrganizationsTemp
        SELECT *
        FROM
            OPENJSON(@Organizations)
            WITH
            (
                OrganizationID BIGINT,
                RowAction INT
            );

        INSERT INTO @ObjectAccessRecordsTemp
        SELECT *
        FROM
            OPENJSON(@Permissions)
            WITH
            (
                ObjectAccessID BIGINT,
                ObjectOperationTypeID BIGINT,
                ObjectTypeID BIGINT,
                ObjectID BIGINT,
                ActorID BIGINT,
                DefaultEmployeeGroupIndicator BIT,
                SiteID BIGINT,
                PermissionTypeID INT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        IF (
               ISNULL(@EIDSSSiteID, N'') <> N''
               AND EXISTS
        (
            SELECT strSiteID
            FROM dbo.tstSite
            WHERE strSiteID = @EIDSSSiteID
        )
               AND @SiteID IS NULL
           )
        BEGIN
            SELECT @ReturnMessage = 'SITE ID DOES EXIST';

            SELECT @ReturnCode = 1;
        END

        IF @ReturnCode = 0
           AND (
                   ISNULL(@HASCSiteID, N'') <> N''
                   AND EXISTS
        (
            SELECT strHASCsiteID
            FROM dbo.tstSite
            WHERE strHASCsiteID = @HASCSiteID
        )
                   AND @SiteID IS NULL
               )
        BEGIN
            SELECT @ReturnMessage = 'HASC SITE ID DOES EXIST';

            SELECT @ReturnCode = 2;
        END

        IF @ReturnCode = 0
        BEGIN
            -- Create the Default Employee Group for the new site
            DECLARE @LanguageCode BIGINT = dbo.FN_GBL_LanguageCode_Get(@LanguageID),
                    @NewDefaultEmployeeGroupActorID BIGINT = NULL,
                    @NewDefaultEmployeeGroupNameID BIGINT = NULL;
            DECLARE @DefaultEmployeeGroupDefaultName NVARCHAR(200)
                =   (
                        SELECT strDefault
                        FROM dbo.trtBaseReference
                        WHERE idfsBaseReference = @DefaultEmployeeGroupActorID
                    ),
                    @DefaultEmployeeGroupNationalName NVARCHAR(200) = (
                                                                          SELECT strTextString
                                                                          FROM dbo.trtStringNameTranslation
                                                                          WHERE idfsBaseReference = @DefaultEmployeeGroupActorID
                                                                                AND idfsLanguage = @LanguageCode
                                                                      ),
                    @DefaultEmployeeGroupDescription NVARCHAR(200) = (
                                                                         SELECT strDescription
                                                                         FROM dbo.tlbEmployeeGroup
                                                                         WHERE idfEmployeeGroup = @DefaultEmployeeGroupActorID
                                                                     );

            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.tstSite
                WHERE idfsSite = @SiteID
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tstSite',
                                                  @idfsKey = @SiteID OUTPUT;

                IF @CustomizationPackageID IS NULL
                BEGIN
                    SET @CustomizationPackageID = dbo.FN_GBL_CustomizationPackage_GET();
                END

                INSERT INTO dbo.tstSite
                (
                    idfsSite,
                    idfsParentSite,
                    idfsSiteType,
                    idfCustomizationPackage,
                    idfOffice,
                    strSiteName,
                    strHASCsiteID,
                    strSiteID,
                    blnIsWEB,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@SiteID,
                 @ParentSiteID,
                 @SiteTypeID,
                 @CustomizationPackageID,
                 @SiteOrganizationID,
                 @SiteName,
                 @HASCSiteID,
                 @EIDSSSiteID,
                 0  ,
                 0  ,
                 10519001,
                 '[{"idfsSite":' + CAST(@SiteID AS NVARCHAR(300)) + '}]',
                 @UserName
                );

				INSERT INTO @SuppressSelect
				EXEC dbo.USSP_GBL_SITE_CUSTOMUSERGROUP_SET @SiteID

                SET @NewDefaultEmployeeGroupActorID =
                (
                    SELECT MIN(idfEmployee) - 1 FROM dbo.tlbEmployee
                );

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @NewDefaultEmployeeGroupNameID OUTPUT,
                                                   @ReferenceType = 19000022,
                                                   @LangID = @LanguageID,
                                                   @DefaultName = @DefaultEmployeeGroupDefaultName,
                                                   @NationalName = @DefaultEmployeeGroupNationalName,
                                                   @HACode = 226,
                                                   @Order = 0,
                                                   @System = 1,
                                                   @User = @UserName;

                INSERT INTO dbo.tlbEmployee
                (
                    idfEmployee,
                    idfsEmployeeType,
                    idfsSite,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@NewDefaultEmployeeGroupActorID, 10023001, @SiteID, 0, GETDATE(), @UserName);

                INSERT INTO dbo.tlbEmployeeGroup
                (
                    idfEmployeeGroup,
                    idfsEmployeeGroupName,
                    idfsSite,
                    strName,
                    strDescription,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@NewDefaultEmployeeGroupActorID,
                 @NewDefaultEmployeeGroupNameID,
                 @SiteID,
                 @DefaultEmployeeGroupNationalName,
                 @DefaultEmployeeGroupDescription,
                 0  ,
                 GETDATE(),
                 @UserName
                );

                UPDATE @ObjectAccessRecordsTemp
                SET ActorID = @NewDefaultEmployeeGroupActorID
                WHERE DefaultEmployeeGroupIndicator = 1;

				IF EXISTS
				(
					SELECT 	a.idfsAggrCaseType,
                       		a.idfCustomizationPackage,
			     			a.idfsSite,
                       		a.idfsStatisticAreaType,
                       		a.idfsStatisticPeriodType
					FROM 	dbo.tstAggrSetting a
							INNER JOIN dbo.tstSite s ON s.idfsSite = @SiteID
					WHERE 	a.idfCustomizationPackage = @CustomizationPackageID
			    			AND a.idfsSite = s.idfsParentSite
                      		AND a.intRowStatus = 0
				)
				BEGIN
					INSERT INTO @AggregateSettingRecordsTemp
					SELECT	AGR.[idfsAggrCaseType]
							,AGR.[idfCustomizationPackage]
							,AGR.[idfsSite]
							,AGR.[idfsStatisticAreaType]
							,AGR.[idfsStatisticPeriodType]
					FROM	dbo.tstAggrSetting AS AGR
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000102) AGRC ON AGRC.idfsReference = AGR.idfsAggrCaseType
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000089) ART ON ART.idfsReference = AGR.idfsStatisticAreaType
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000091) PRT ON PRT.idfsReference = AGR.idfsStatisticPeriodType
							INNER JOIN dbo.tstSite s ON s.idfsSite = @SiteID
					WHERE	AGR.[idfCustomizationPackage] = @CustomizationPackageID
							AND AGR.[idfsSite] = s.idfsParentSite
							AND AGR.intRowStatus = 0;
				END
				ELSE
				BEGIN
					DECLARE @idfsSiteTop BIGINT;

					SELECT TOP 1	
							@idfsSiteTop = idfsSite
					FROM 	dbo.tstAggrSetting
					WHERE 	idfCustomizationPackage = @CustomizationPackageID
                      		AND intRowStatus = 0;

					INSERT INTO @AggregateSettingRecordsTemp
					SELECT	AGR.[idfsAggrCaseType]
							,AGR.[idfCustomizationPackage]
							,AGR.[idfsSite]
							,AGR.[idfsStatisticAreaType]
							,AGR.[idfsStatisticPeriodType]
					FROM	dbo.tstAggrSetting AS AGR
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000102) AGRC ON AGRC.idfsReference = AGR.idfsAggrCaseType
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000089) ART ON ART.idfsReference = AGR.idfsStatisticAreaType
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000091) PRT ON PRT.idfsReference = AGR.idfsStatisticPeriodType
							INNER JOIN dbo.tstSite s ON s.idfsSite = @SiteID
					WHERE	AGR.[idfCustomizationPackage] = @CustomizationPackageID
							AND AGR.[idfsSite] = @idfsSiteTop
							AND AGR.intRowStatus = 0;
				END

        WHILE EXISTS (SELECT * FROM @AggregateSettingRecordsTemp)
        BEGIN
            SELECT TOP 1
                @AggregateDiseaseReportTypeId = AggregateDiseaseReportTypeId,
                @idfCustomizationPackage = CustomizationPackageId,
				@idfsSite = SiteId,
                @StatisticalAreaTypeId = StatisticalAreaTypeId,
                @StatisticalPeriodTypeId = StatisticalPeriodTypeId
            FROM @AggregateSettingRecordsTemp;
            BEGIN

                INSERT INTO dbo.tstAggrSetting
                (
                    idfsAggrCaseType,
                    idfCustomizationPackage,
					idfsSite,
                    idfsStatisticAreaType,
                    idfsStatisticPeriodType,
                    AuditCreateDTM,
                    AuditCreateUser,
                    SourceSystemKeyValue,
                    SourceSystemNameID
                )
                VALUES
                (	@AggregateDiseaseReportTypeId,
					@idfCustomizationPackage,
					@SiteID,
					@StatisticalAreaTypeId,
					@StatisticalPeriodTypeId,
					GETDATE(),
					@UserName,
					'[{"idfsAggrCaseType":' + CAST(@AggregateDiseaseReportTypeId AS NVARCHAR(300))
					+ ',"idfCustomizationPackage":' + CAST(@idfCustomizationPackage AS NVARCHAR(300)) + '}]',
					10519001
                );

            END

            DELETE FROM @AggregateSettingRecordsTemp
            WHERE AggregateDiseaseReportTypeId = @AggregateDiseaseReportTypeId;
        END


            END
            ELSE
            BEGIN
                UPDATE dbo.tstSite
                SET idfsSiteType = @SiteTypeID,
                    idfsParentSite = @ParentSiteID,
                    idfCustomizationPackage = @CustomizationPackageID,
                    idfOffice = @SiteOrganizationID,
                    strSiteName = @SiteName,
                    strHASCsiteID = @HASCSiteID,
                    strSiteID = @EIDSSSiteID,
                    intRowStatus = @RowStatus,
                    AuditUpdateUser = @UserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfsSite = @SiteID;

                IF EXISTS
                (
                    SELECT *
                    FROM @ObjectAccessRecordsTemp
                    WHERE DefaultEmployeeGroupIndicator = 1
                          AND RowAction = 'I'
                          AND RowStatus = 0
                )
                BEGIN
                    SET @NewDefaultEmployeeGroupActorID =
                    (
                        SELECT MIN(idfEmployee) - 1 FROM dbo.tlbEmployee
                    );

                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @NewDefaultEmployeeGroupNameID OUTPUT,
                                                       @ReferenceType = 19000022,
                                                       @LangID = @LanguageID,
                                                       @DefaultName = @DefaultEmployeeGroupDefaultName,
                                                       @NationalName = @DefaultEmployeeGroupNationalName,
                                                       @HACode = 226,
                                                       @Order = 0,
                                                       @System = 1,
                                                       @User = @UserName;

                    INSERT INTO dbo.tlbEmployee
                    (
                        idfEmployee,
                        idfsEmployeeType,
                        idfsSite,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    VALUES
                    (@NewDefaultEmployeeGroupActorID, 10023001, @SiteID, 0, GETDATE(), @UserName);

                    INSERT INTO dbo.tlbEmployeeGroup
                    (
                        idfEmployeeGroup,
                        idfsEmployeeGroupName,
                        idfsSite,
                        strName,
                        strDescription,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    VALUES
                    (@NewDefaultEmployeeGroupActorID,
                     @NewDefaultEmployeeGroupNameID,
                     @SiteID,
                     @DefaultEmployeeGroupNationalName,
                     @DefaultEmployeeGroupDescription,
                     0  ,
                     GETDATE(),
                     @UserName
                    );

                    UPDATE @ObjectAccessRecordsTemp
                    SET ActorID = @NewDefaultEmployeeGroupActorID
                    WHERE DefaultEmployeeGroupIndicator = 1;
                END
            END;

            WHILE EXISTS (SELECT * FROM @OrganizationsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = OrganizationID,
                    @OrganizationID = OrganizationID,
                    @RowAction = RowAction
                FROM @OrganizationsTemp;

                IF @RowAction = 1 -- Insert
                   OR @RowAction = 2 -- Update
                BEGIN
                    UPDATE dbo.tlbOffice
                    SET idfsSite = @SiteID,
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @UserName
                    WHERE idfOffice = @OrganizationID;
                END
                ELSE
                BEGIN
                    UPDATE dbo.tlbOffice
                    SET idfsSite = NULL,
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @UserName
                    WHERE idfOffice = @OrganizationID;
                END;

                DELETE FROM @OrganizationsTemp
                WHERE @OrganizationID = @RowID;
            END

            WHILE EXISTS (SELECT * FROM @ObjectAccessRecordsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = ObjectAccessID,
                    @ObjectAccessID = ObjectAccessID,
                    @ObjectOperationTypeID = ObjectOperationTypeID,
                    @ObjectTypeID = ObjectTypeID,
                    @ObjectID = @SiteID,
                    @ActorID = ActorID,
                    @PermissionTypeID = PermissionTypeID,
                    @RowStatus = RowStatus,
                    @RowAction = RowAction
                FROM @ObjectAccessRecordsTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_ADMIN_OBJECT_ACCESS_SET @ObjectAccessID,
                                                         @ObjectOperationTypeID,
                                                         @ObjectTypeID,
                                                         @ObjectID,
                                                         @ActorID,
                                                         @SiteID,
                                                         @PermissionTypeID,
                                                         @RowStatus,
                                                         @UserName;

                DELETE FROM @ObjectAccessRecordsTemp
                WHERE ObjectAccessID = @RowID;
            END;
        END

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @SiteID KeyId,
               'SiteID' KeyIdName,
               @CustomizationPackageID AdditionalKeyId,
               'CustomizationPackageID' AdditionalKeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_Copy_Template]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_Copy_Template
-- Description: Copies the base structure of a template and its components to prevent historical damage.
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese	01/12/2021	Initial release for use by other SPs.
-- Doug Albanese	01/19/2021	Fixed the return to provide the new Form Template id
-- Doug Albanese	01/21/2021	Change of business rule to allow older templates to still be modified.
-- Doug Albanese	01/21/2021	Disabled UNI for the old template being copied.
-- Doug Albanese	07/02/2021	Altered the procedure to ignore blank idfsSections
-- Doug Albanese	07/06/2021	Refactored for use with a user initiated copy.
-- Doug Albanese	07/09/2021	Added language parameter
-- Doug Albanese	07/09/2021	Removed supression
-- Doug Albanese	07/12/2021	Corrected return aliases
-- Doug Albanese	07/12/2021	Corrections to remove copying of Sections and Parameters, and replace with association to the new template
-- Doug Albanese	07/14/2021	Turning off content to make this process a successor procedure only
-- Doug Albanese	07/14/2021	Created translation for SP generated "Copy"
-- Doug Albanese	07/14/2021	Added ordering from original template
-- Doug Albanese	07/14/2021	Added Edit Mode for Mandatory/Ordinary settings
--	Doug Albanese	05/12/2022	Adjusting for copying to another formtype
--	Doug Albanese	06/02/2022	Changed the functioncall parameter for USP_ADMIN_FF_ParameterTemplate_SET, to work with USP_ADMIN_FF_ParameterDesignOptions_SET
--	Doug Albanese	06/07/2022	Changed USP_ADMIN_FF_ParameterTemplate_SET, to call as a function
--	Doug Albanese	06/08/2022	Corrected the Determinants value copy. Was in the wrong place
--	Doug Albanese	06/10/2022	Making use of USP_ADMIN_FF_ParameterTemplateForCopy_SET, instead of USP_ADMIN_FF_ParameterTemplate_SET for EF Generation purposes
--								Realigned call to USP_Admin_FF_Rule_GetDetails for new changes
--	Doug Albanese	06/30/2022	Correcting the process of copying Determinants
--	Doug Albanese	07/01/2022	Removed rollback
--	Doug Albanese	07/21/2022	Re-aligned to work with changes made on USP_ADMIN_FF_Template_SET
--	Doug Albanese	08/04/2022	Added a secondary "intRowStatus"
--	Doug Albanese	08/04/2022	Corrected a call to USP_ADMIN_FF_Determinant_SET, because it was remotely set for Event logging.
--	Doug Albanese	08/04/2022	Corrected "Template Details" to coalesce the blnUNI value, when it was null
--  Doug Albanese	01/26/2023	Correction to allow Copying of templates to create Outbreak assigned flex forms.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_Copy_Template] (
	@LangId									NVARCHAR(50),
	@idfsFormTemplate						BIGINT,
	@User									NVARCHAR(50),
	@idfsSite								BIGINT = NULL,
	@idfsNewFormType						BIGINT = NULL
)
AS
BEGIN
	DECLARE @returnCode						INT = 0;
	DECLARE @returnMsg						NVARCHAR(MAX) = 'SUCCESS';
	
	Declare @SupressSelect TABLE
	(	
		retrunCode							INT,
		returnMessage						VARCHAR(200)
	) 

	DECLARE @Supress_USP_ADMIN_FF_Parameters_SET TABLE (
		ReturnCode							INT,
		ReturnMessage						VARCHAR(200),
		idfsParameter						BIGINT,
		idfsParameterCaption				BIGINT
	)
	
	DECLARE @Supress_USP_ADMIN_FF_ParameterTemplate_SET TABLE(
		ReturnData							VARCHAR(200)
	)

	DECLARE @iObservations					INT = 0


	BEGIN TRY
		
		--Changes that have the potential to trigger copying of a template
		--Template details
		--Parameter addition, moving, or deleting from a template
		--Section addition, moving, or deleting from a template
		--Parameter Editor changes
		--Section Editor Changes
		--Updating "Mandatory" status
		--Adding, Editing, or Removing a Rule

		DECLARE @FormTemplate				NVARCHAR(200)
		DECLARE @NationalName				NVARCHAR(200)
		DECLARE @NationalLongName			NVARCHAR(200)
		DECLARE @idfsFormType				BIGINT
		DECLARE @strNote					NVARCHAR(MAX)
		DECLARE @blnUNI						BIT

		DECLARE @idfsSection				BIGINT
		DECLARE @idfsParameter				BIGINT
		DECLARE @idfsParentSection			BIGINT 
		DECLARE @DefaultName				NVARCHAR(400)
		DECLARE @DefaultLongName			NVARCHAR(400)
		DECLARE @intOrder					INT
		DECLARE @blnGrid					BIT
		DECLARE @blnFixedRowset				BIT
		DECLARE @idfsMatrixType				BIGINT
		DECLARE @intRowStatus				INT
		DECLARE @idfsSectionNew				BIGINT
		DECLARE @idfsFormTemplateNew		BIGINT

		DECLARE @idfsParameterNew			BIGINT
		DECLARE	@idfsParameterCaption		BIGINT
		DECLARE @idfsParameterType			BIGINT
		DECLARE @idfsEditor					BIGINT
		DECLARE @intHACode					INT
		DECLARE @langid_int					BIGINT
		DECLARE @idfsRule					BIGINT
		DECLARE @idfsEditMode				BIGINT

		DECLARE @idfsRuleMessage			BIGINT
		DECLARE @idfsRuleFunction			BIGINT
		DECLARE @idfsRuleAction				BIGINT
		DECLARE	@idfsFunctionParameter		BIGINT
		DECLARE @idfsActionParameter		BIGINT
		DECLARE	@idfsFunctionParameterNew	BIGINT
		DECLARE @idfsActionParameterNew		BIGINT
		DECLARE @intNumberOfParameters		INT
		DECLARE @idfsCheckPoint				BIGINT
		DECLARE @MessageText				NVARCHAR(MAX)
		DECLARE @MessageNationalText		NVARCHAR(MAX)
		DECLARE @blnNot						BIT
		DECLARE	@idfsRuleNew				BIGINT
		DECLARE	@strFillValue				NVARCHAR(MAX)
		DECLARE	@strCompareValue			NVARCHAR(MAX)

		DECLARE @DefaultRuleName			NVARCHAR(MAX)
		DECLARE @NationalRuleName			NVARCHAR(MAX)
		DECLARE @DefaultRuleMessage			NVARCHAR(MAX)
		DECLARE @NationalRuleMessage		NVARCHAR(MAX)
		DECLARE @strActionParameters		NVARCHAR(MAX)

		DECLARE @idfRuleConstant			BIGINT
		DECLARE @idfRuleConstantNew			BIGINT
		DECLARE @varConstant				SQL_VARIANT

		DECLARE @idfDeterminantValue		BIGINT
		DECLARE @idfsBaseReference			BIGINT
		DECLARE @idfsGISBaseReference		BIGINT

		DECLARE @strResourceString			NVARCHAR(200) = 'Copy'

		SET NOCOUNT ON

		SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);
		
		--Are any observations made for the given active (intRowStatus = 0) template?
		--SELECT
		--	@iObservations = COUNT(idfObservation)
		--FROM
		--	tlbObservation O
		--INNER JOIN ffFormTemplate FT
		--	ON FT.idfsFormTemplate = O.idfsFormTemplate
		--	AND FT.intRowStatus = 0
		--WHERE
		--	O.idfsFormTemplate = @idfsFormTemplate

		--IF @iObservations > 0
		--	BEGIN
				----------------------------------------------------------------------------------------
				--Create table structures for collecting up items to enumerate and tag,				  --
				--and capture EXEC results                                                            --
				----------------------------------------------------------------------------------------
				DECLARE @Sections TABLE (
					idfsSection			BIGINT NULL,
					idfsSectionNew		BIGINT NULL
				)

				DECLARE @Parameters TABLE (
					idfsParameter		BIGINT,
					idfsParameterNew	BIGINT,
					idfsSection			BIGINT,
					idfsSectionNew		BIGINT
				)

				DECLARE @ActionParameters TABLE (
					idfsParameter		BIGINT
				)

				DECLARE @FunctionParameters TABLE (
					idfsParameter		BIGINT
				)

				DECLARE @TemplateDetails TABLE (
					idfsFormTemplate	BIGINT,
					FormTemplate		NVARCHAR(200),
					DefaultName			NVARCHAR(200),
					NationalName		NVARCHAR(200),
					idfsFormType		BIGINT,
					strNote				NVARCHAR(MAX),
					blnUNI				BIT
				)

				DECLARE @SectionSetResults TABLE (
					returnCode			BIGINT,
					returnMsg			NVARCHAR(MAX),
					idfsSection			BIGINT
				)

				DECLARE @SectionDetailResults TABLE (
					idfsParentSection	BIGINT,
					idfsFormType		BIGINT,
					intOrder			INT,
					blnGrid				BIT,
					blnFixedRowset		BIT,
					idfsMatrixType		BIGINT,
					strDefault			NVARCHAR(MAX),
					NationalName		NVARCHAR(MAX)
				)

				DECLARE @TemplateDetailsResults TABLE (
					returnCode			BIGINT,
					returnMsg			NVARCHAR(MAX),
					idfsFormTemplate	BIGINT
				)

				DECLARE	@Rules	TABLE (
					idfsRule			BIGINT,
					idfsRuleNew			BIGINT
				)

				DECLARE @RuleDetailResults TABLE (
					idfsRule				BIGINT,
					defaultRuleName			NVARCHAR(MAX),
					RuleName				NVARCHAR(MAX),
					idfsRuleMessage			BIGINT,
					defaultRuleMessage		NVARCHAR(MAX),
					RuleMessage				NVARCHAR(MAX),
					idfsCheckPoint			BIGINT,
					idfsRuleFunction		BIGINT,
					blnNot					BIT,
					idfsRuleAction			BIGINT,
					strActionParameters		NVARCHAR(MAX),
					idfsFunctionParameter	BIGINT,
					FillValue				NVARCHAR(MAX)
				)

				DECLARE @RuleConstants TABLE (
					idfRuleConstant		BIGINT,
					idfsRule			BIGINT,
					varConstant			SQL_VARIANT
				)

				DECLARE @Functions TABLE (
					idfParameterForFunction	BIGINT,
					idfsParameter			BIGINT,
					idfsFormTemplate		BIGINT,
					idfsRule				BIGINT,
					intOrder				INT,
					strCompareValue			NVARCHAR(MAX)
				)

				DECLARE @Actions TABLE (
					idfParameterForAction	BIGINT,
					idfsParameter			BIGINT,
					idfsFormTemplate		BIGINT,
					idfsRuleAction			BIGINT,
					idfsRule				BIGINT,
					strFillValue			NVARCHAR(MAX)
				)

				DECLARE @GlobalReference TABLE (
					idfs					BIGINT,
					idfsNew					BIGINT
				)

				DECLARE @Determinants TABLE (
					idfDeterminantValue		BIGINT,
					idfsBaseReference		BIGINT
				)

				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of the base Template													  --
				----------------------------------------------------------------------------------------
				INSERT INTO @TemplateDetails
				EXEC USP_ADMIN_FF_Template_GetDetail @LangID = @LangId, @idfsFormTemplate = @idfsFormTemplate

				SELECT
					@idfsFormTemplate = idfsFormTemplate,
					@FormTemplate = FormTemplate,
					@DefaultName = DefaultName,
					@NationalName = NationalName,
					@idfsFormType = idfsFormType,
					@strNote = strNote,
					@blnUNI = COALESCE(blnUNI,0)
				FROM
					@TemplateDetails

				if @idfsNewFormType IS NOT NULL
					BEGIN
						--if NOT EXISTS(SELECT TOP 1 idfsFormTemplate FROM ffFormTemplate WHERE idfsFormType = @idfsNewFormType AND intRowStatus = 0)
						--	BEGIN
								SET @idfsFormType = @idfsNewFormType
								SET @blnUNI = 1
							--END
					END
				--Collect remaining details that are not supplied by the existing SP
				--SELECT
				--	@DefaultName = strDefault
				--FROM
				--	trtBaseReference 
				--WHERE
				--	idfsBaseReference = @idfsFormTemplate
				
				--Generate new idfsFormTemplate with existing names, having "Copy" appended to it
				SELECT
					@strResourceString = strResourceString
				FROM
					trtResourceTranslation
				WHERE 
					idfsResource = 744 and 
					idfsLanguage = @langid_int

				SET @DefaultName = CONCAT(@DefaultName,' (', @strResourceString , ')')
				SET @NationalName = CONCAT(@NationalName,' (', @strResourceString , ')')

				INSERT INTO @SupressSelect
				EXEC dbo.USSP_GBL_BaseReference_SET @idfsFormTemplateNew OUTPUT, 19000033/*'rftParameter'*/,@LangID, @DefaultName, @NationalName, 0

				--Create Global Reference for use by subsequential steps
				INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsFormTemplate, @idfsFormTemplateNew)

				--Create the new Template
				INSERT INTO @SupressSelect
				EXEC USP_ADMIN_FF_Template_SET 
					@idfsFormType = @idfsFormType, 
					@DefaultName = @DefaultName,
					@NationalName = @NationalName, 
					@strNote = @strNote, 
					@LangId = @LangID, 
					@blnUNI = @blnUNI,
					@idfsFormTemplate = @idfsFormTemplateNew,
					@User = @User,
					@FunctionCall = 1,
					@CopyOnly = 1,
					@EventTypeId =10025120,
					@SiteId = @idfsSite,
					@UserId = @User,
					@LocationId = -1
					

				--Turn off UNI on old Template, since the newer on is the primary one now
				UPDATE
					ffFormTemplate
				SET
					blnUNI = 0
				WHERE
					idfsFormTemplate = @idfsFormTemplate

				--Disable existing Template
				--UPDATE
				--	ffFormTemplate
				--SET
				--	intRowStatus = 1
				--WHERE
				--	idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Sections													  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Sections (idfsSection)
				SELECT
					SFT.idfsSection
				FROM
					ffSectionForTemplate SFT
				INNER JOIN ffSection S
					ON S.idfsSection = SFT.idfsSection AND
						SFT.intRowStatus = 0
				WHERE
					SFT.idfsFormTemplate = @idfsFormTemplate AND
					S.intRowStatus = 0

				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Parameters and their associated Sections					  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Parameters (idfsParameter, idfsSection)
				SELECT
					PFT.idfsParameter,
					P.idfsSection
				FROM
					ffParameterForTemplate PFT
				INNER JOIN ffParameter P
					ON P.idfsParameter = PFT.idfsParameter AND
						PFT.intRowStatus = 0
				WHERE
					PFT.idfsFormTemplate = @idfsFormTemplate AND
					P.intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rules														  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Rules (idfsRule)
				SELECT
					idfsRule
				FROM
					ffRule
				WHERE
					idfsFormTemplate = @idfsFormTemplate AND
					intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rules														  --
				----------------------------------------------------------------------------------------
				--INSERT INTO @Rules (idfsRule)
				--SELECT
				--	idfsRule
				--FROM
				--	ffRule
				--WHERE
				--	idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rule Constants												  --
				----------------------------------------------------------------------------------------
				INSERT INTO @RuleConstants (idfRuleConstant, idfsRule, varConstant)
				SELECT
					RC.idfRuleConstant,
					RC.idfsRule,
					RC.varConstant
				FROM
					ffRuleConstant RC
				INNER JOIN ffRule R
					ON R.idfsRule = RC.idfsRule
				WHERE
					R.idfsFormTemplate = @idfsFormTemplate AND
					R.intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Template Determinants										  --
				--------------------------------------------------------------------------------------
				INSERT INTO @Determinants (idfDeterminantValue, idfsBaseReference)
				SELECT
					idfDeterminantValue,
					idfsBaseReference
				FROM
					ffDeterminantValue
				WHERE
					idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of each Section and its Template association							  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsSection FROM @Sections WHERE idfsSectionNew IS NULL)
					BEGIN
						--Get another recored that hasn't been converted yet
						SELECT TOP 1 @idfsSection = idfsSection FROM @Sections WHERE idfsSectionNew IS NULL
						SELECT @intOrder = intOrder FROM ffSectionDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsSection = @idfsSection
						
						--SELECT
						--	@idfsParentSection	= idfsParentSection,
						--	@idfsFormType		= idfsFormType,
						--	@intOrder			= S.intOrder,
						--	@blnGrid			= blnGrid,
						--	@blnFixedRowset		= blnFixedRowset,
						--	@idfsMatrixType		= idfsMatrixType,
						--	@DefaultName		= B.strDefault,
						--	@NationalName		= ISNULL(SNT.[strTextString], B.[strDefault]) 
						--FROM
						--	ffSection S
						--INNER JOIN dbo.trtBaseReference B
						--ON B.[idfsBaseReference] = S.[idfsSection]
						--   AND B.[intRowStatus] = 0  
						--LEFT JOIN dbo.trtStringNameTranslation SNT
						--ON SNT.[idfsBaseReference] = S.[idfsSection]
						--   AND SNT.idfsLanguage = @langid_int
						--   AND SNT.[intRowStatus] = 0
						--WHERE
						--	idfsSection = @idfsSection
							
						--Reset to grab a new id each iteration
						--SET @idfsSectionNew = NULL

						--Create another Section, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsSectionNew OUTPUT,19000101,@LangID,@DefaultName,@NationalName,0

						--IF @idfsSectionNew IS NOT NULL 
						--	BEGIN
								--Create Global Reference for use by subsequential steps
								--INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsSection, @idfsSectionNew)
								----INSERT INTO @SectionSetResults
								--INSERT INTO @SupressSelect
								--EXEC USP_ADMIN_FF_Sections_SET 
								--	@idfsSection		= @idfsSectionNew, 
								--	@idfsParentSection	= @idfsParentSection, 
								--	@idfsFormType		= @idfsFormType,
								--	@intOrder			= @intOrder,
								--	@blnGrid			= @blnGrid,
								--	@blnFixedRowset		= @blnFixedRowset,
								--	@idfsMatrixType		= @idfsMatrixType,
								--	@intRowStatus		= @intRowStatus,
								--	@User				= @User,
								--	@CopyOnly			= 1

								--Create entry for the association of this new Section against the new Template
								INSERT INTO @SupressSelect
								EXEC USP_ADMIN_FF_SectionTemplate_SET 
									@LangId = @LangID, 
									@idfsSection = @idfsSection, 
									@idfsFormTemplate = @idfsFormTemplateNew,
									@User = @User

								UPDATE
									ffSectionDesignOption
								SET
									intOrder = @intOrder
								WHERE
									idfsFormTemplate = @idfsFormTemplate AND
									idfsSection = @idfsSection

								--Update the temporary table, to mark it as converted
								UPDATE
									@Sections
								SET
									idfsSectionNew = @idfsSection
								WHERE
									idfsSection = @idfsSection

								UPDATE
									@Parameters
								SET
									idfsSectionNew = @idfsSection
								WHERE
									idfsSection = @idfsSection
									
								--Soft delete the old section, from the ffSection table
								--UPDATE 
								--	ffSection
								--SET
								--	intRowStatus = 1
								--WHERE
								--	idfsSection = @idfsSection
							--END
					END
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of each Parameter and its Template association						  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsParameter FROM @Parameters WHERE idfsParameterNew IS NULL)
					BEGIN
						--Get another record that hasn't been converted yet
						SELECT TOP 1 @idfsParameter = idfsParameter FROM @Parameters WHERE idfsParameterNew IS NULL
						SELECT @intOrder = intOrder FROM ffParameterDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsParameter = @idfsParameter
						SELECT @idfsEditMode = idfsEditMode FROM ffParameterForTemplate WHERE idfsFormTemplate = @idfsFormTemplate AND idfsParameter = @idfsParameter

						--Grab the details for the current parameter
						--SELECT
						--	@idfsSection			= P.idfsSection,
						--	@idfsParameterCaption	= P.idfsParameterCaption,
						--	@idfsParameterType		= P.idfsParameterType,
						--	@idfsFormType			= P.idfsFormType,
						--	@idfsEditor				= P.idfsEditor,
						--	@strNote				= P.strNote,
						--	@intOrder				= P.intOrder,
						--	@intHACode				= P.intHACode,
						--	@DefaultName			= ISNULL(B2.[strDefault], ''),
						--	@DefaultLongName		= ISNULL(B1.[strDefault], ''),
						--	@NationalName			= ISNULL(SNT2.[strTextString], B2.[strDefault]),
						--	@NationalLongName		= ISNULL(SNT1.[strTextString], B1.[strDefault])
						--FROM
						--	ffParameter P
						--INNER JOIN dbo.trtBaseReference B1
						--ON B1.[idfsBaseReference] = P.[idfsParameter]
						--	AND B1.[intRowStatus] = 0
						--LEFT JOIN dbo.trtBaseReference B2
						--ON B2.[idfsBaseReference] = P.[idfsParameterCaption]
						--	AND B2.[intRowStatus] = 0
						--LEFT JOIN dbo.trtStringNameTranslation SNT1
						--ON (SNT1.[idfsBaseReference] = P.[idfsParameter]
						--	AND SNT1.[idfsLanguage] = @langid_int)
						--	AND SNT1.[intRowStatus] = 0
						--LEFT JOIN dbo.trtStringNameTranslation SNT2
						--ON (SNT2.[idfsBaseReference] = P.[idfsParameterCaption]
						--	AND SNT2.[idfsLanguage] = @langid_int)
						--	AND SNT2.[intRowStatus] = 0
						--WHERE
						--	P.idfsParameter = @idfsParameter
							
						--Reset to grab a new id each iteration
						--SET @idfsParameterNew = NULL

						----Create another parameter, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsParameterNew OUTPUT, 19000066/*'rftParameter'*/,@LangID, @DefaultLongName, @NationalLongName, 0

						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsParameterCaption OUTPUT, 19000070 /*'rftParameterToolTip'*/,@LangID, @DefaultName, @NationalName, 0

						----Create Global Reference for use by subsequential steps
						--INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsParameter, @idfsParameterNew)

						--Obtain the id for the newly copied section
						--SELECT
						--	@idfsSectionNew = idfsSectionNew
						--FROM
						--	@Parameters
						--WHERE
						--	idfsParameter = @idfsParameter

						--Create the copy of the existing Parameter
						--INSERT INTO @Supress_USP_ADMIN_FF_Parameters_SET
						--EXEC USP_ADMIN_FF_Parameters_SET 
						--	@LangID					= @LangID,
						--	@idfsSection			= @idfsSectionNew, 
						--	@idfsFormType			= @idfsFormType,
						--	@idfsParameterType		= @idfsParameterType,
						--	@idfsEditor				= @idfsEditor,
						--	@intHACode				= @intHACode,
						--	@intOrder				= @intOrder,
						--	@strNote				= @strNote,
						--	@DefaultName			= @DefaultName,
						--	@NationalName			= @NationalName,
						--	@DefaultLongName		= @DefaultLongName,
						--	@NationalLongName		= @NationalLongName,
						--	@idfsParameter			= @idfsParameterNew,
						--	@idfsParameterCaption	= @idfsParameterCaption,
						--	@User					= @User,
						--	@intRowStatus			= 0,
						--	@CopyOnly				= 1

						--Create entry for the association of this new Section against the new Template
						--INSERT INTO @Supress_USP_ADMIN_FF_ParameterTemplate_SET
						EXEC USP_ADMIN_FF_ParameterTemplateForCopy_SET
							@LangID= @LangID,
							@idfsParameter = @idfsParameter, 
							@idfsFormTemplate = @idfsFormTemplateNew,
							@User = @User,
							@CopyOnly = 1,
							@FunctionCall = 1

						--Apply ordering settings
						UPDATE
							ffParameterDesignOption
						SET
							intOrder = @intOrder
						WHERE
							idfsFormTemplate = @idfsFormTemplateNew AND
							idfsParameter = @idfsParameter

						--Apply Edit Mode (Mandatory or Ordinary)
						UPDATE
							ffParameterForTemplate
						SET
							idfsEditMode = @idfsEditMode
						WHERE
							idfsFormTemplate = @idfsFormTemplateNew AND
							idfsParameter = @idfsParameter

						--Update the temporary table, to mark it as converted
						UPDATE
							@Parameters
						SET
							idfsParameterNew = @idfsParameter
						WHERE
							idfsParameter = @idfsParameter


						--Soft delete the old section, from the ffSection table
						--UPDATE 
						--	ffParameter
						--SET
						--	intRowStatus = 1
						--WHERE
						--	idfsParameter = @idfsParameter

					END
				----------------------------------------------------------------------------------------

				--Enumerate through all determinants that are related to the Template
				WHILE EXISTS (SELECT idfDeterminantValue FROM @Determinants)
					BEGIN
						--Grab the first items in the list
						SELECT
							TOP 1
							@idfDeterminantValue = idfDeterminantValue,
							@idfsBaseReference = idfsBaseReference
						FROM
							@Determinants

						--Create the copy of the existing entry
						INSERT INTO @SupressSelect
						EXEC USP_ADMIN_FF_Determinant_SET @idfsDiagnosisGroup = @idfsBaseReference, 
														@idfsFormTemplate = @idfsFormTemplateNew, 
														@User = @User, 
														@intRowStatus = 0, 
														@FunctionCall = 1,
														@EventTypeId =10025120,
														@SiteId = @idfsSite,
														@UserId = @User,
														@LocationId = -1

						--Disable
						UPDATE
							ffDeterminantValue
						SET
							intRowStatus = 1
						WHERE
							idfDeterminantValue = @idfDeterminantValue

						DELETE
						FROM
							@Determinants
						WHERE
							idfDeterminantValue = @idfDeterminantValue
					END

				----------------------------------------------------------------------------------------
				--Make a copy of each Rule															  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsRule FROM @Rules WHERE idfsRuleNew IS NULL)
					BEGIN
						--Get another record that hasn't been converted yet
						SELECT
							TOP 1 @idfsRule = idfsRule
						FROM
							@Rules
						WHERE
							idfsRuleNew IS NULL

						--Reset @RuleDetailResults, so that it will only have one row at a time in it
						DELETE FROM @RuleDetailResults

						--Grab the details for the current Rule
						INSERT INTO @RuleDetailResults
						EXEC USP_ADMIN_FF_Rule_GetDetails @langid=@LangId, @idfsRule = @idfsRule

						SELECT
							@idfsRule = idfsRule,
							@DefaultRuleName = defaultRuleName,
							@NationalRuleName = RuleName,
							@DefaultRuleMessage = defaultRuleMessage,
							@NationalRuleMessage = RuleMessage,
							@idfsRuleMessage = idfsRuleMessage,
							@idfsCheckPoint = idfsCheckPoint,
							@idfsRuleFunction = idfsRuleFunction,
							@blnNot = blnNot,
							@idfsRuleAction = idfsRuleAction,
							@strActionParameters = strActionParameters,
							@idfsFunctionParameter = idfsFunctionParameter,
							@strFillValue = FillValue
						FROM
							@RuleDetailResults
						
						--Reset to grab a new id each iteration
						--SET @idfsRuleNew = -1

						--Create another Rule, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						EXEC dbo.USSP_GBL_BaseReference_SET @ReferenceID = @idfsRuleNew OUTPUT, @ReferenceType = 19000029, @LangId = @LangID, @DefaultName = @DefaultName, @NationalName = @NationalName, @System = 0

						INSERT INTO @SupressSelect
						EXEC dbo.USSP_GBL_BaseReference_SET @idfsRuleMessage OUTPUT, 19000032, @LangID, @MessageText, @MessageNationalText, 0
						
						--Create Global Reference for use by subsequential steps
						INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsRule, @idfsRuleNew)

						--Reset the Action Parameters Table
						DELETE FROM @ActionParameters
						
						--Create table from string "Parameters" of the current rule details
						INSERT INTO @ActionParameters (idfsParameter)
						SELECT
							CAST(L.value AS BIGINT) AS idfsParameter
						FROM
							[dbo].[FN_GBL_SYS_SplitList](@strActionParameters, 0, ',') L

						--Get the conversion of the idfsParameter from its old value for the Function that the parameter is using.
						SELECT
							@idfsFunctionParameterNew = idfsNew
						FROM
							@GlobalReference
						WHERE
							idfs = @idfsFunctionParameter

						
						--Enumerate through all Action Parameters, that are associated with the rule
						WHILE EXISTS(SELECT idfsParameter FROM @ActionParameters)
							BEGIN
								SELECT 
									TOP 1 @idfsActionParameter = idfsParameter
								FROM
									@ActionParameters
									
								--Get the conversion of the idfsParameter from its old value for the Action that the parameter is using.
								SELECT
									@idfsActionParameterNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfsActionParameter

								--Create the copy of the existing Parameter
								--INSERT INTO @SupressSelect
								EXEC USP_ADMIN_FF_Rules_SET
									@idfsRule = @idfsRuleNew,
									@idfsFormTemplate = @idfsFormTemplateNew,
									@idfsCheckPoint = @idfsCheckPoint,
									@idfsRuleFunction = @idfsRuleFunction,
									@idfsRuleAction = @idfsRuleAction,
									@DefaultName = @DefaultName,
									@NationalName = @NationalName,
									@MessageText = @MessageText,
									@MessageNationalText = @MessageNationalText,
									@blnNot = @blnNot,
									@LangID = @LangID,
									@idfsRuleMessage = @idfsRuleMessage,
									@idfsFunctionParameter = @idfsFunctionParameterNew,
									@idfsActionParameter = @idfsActionParameterNew,
									@User = @User,
									@strFillValue = @strFillValue,
									@strCompareValue = @strCompareValue,
									@intRowStatus = 0,
									@FunctionCall = 1,
									@CopyOnly = 1

								DELETE FROM @ActionParameters WHERE idfsParameter = @idfsActionParameter
							END

						--Enumerate through all Constants, that are related to the Rule
						WHILE EXISTS(SELECT idfRuleConstant FROM @RuleConstants)
							BEGIN
								SELECT
									TOP 1
									@idfRuleConstant = idfRuleConstant,
									@idfsRule = idfsRule,
									@varConstant = varConstant
								FROM
									@RuleConstants

								--Get a new row id
								INSERT INTO @SupressSelect
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'ffRuleConstant', @idfRuleConstantNew OUTPUT;

								--Get the newly created id for the old entry.
								SELECT
									@idfRuleConstantNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfRuleConstant

								--Get the newly created id for the old entry.
								SELECT
									@idfsRuleNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfsRuleNew

								--Create the new Record
								INSERT INTO ffRuleConstant (
									idfRuleConstant, 
									idfsRule, 
									varConstant, 
									intRowStatus,
									AuditCreateDTM,
									AuditCreateUser
								)
								VALUES (
									@idfRuleConstantNew,
									@idfsRuleNew,
									@varConstant,
									0,
									GETDATE(),
									@User
								)
								
								--Delete the top record so that continous looping doesn't occur to produce records over and over
								DELETE 
								FROM 
									@RuleConstants
								WHERE
									idfRuleConstant = @idfRuleConstant
							END
						
						--Update the temporary table, to mark it as converted
						UPDATE
							@Rules
						SET
							idfsRuleNew = @idfsRuleNew
						WHERE
							idfsRule = @idfsRule
						
						--Soft delete the old section, from the ffSection table
						UPDATE 
							ffRule
						SET
							intRowStatus = 1
						WHERE
							idfsRule= @idfsRule

					END
				----------------------------------------------------------------------------------------

				--USP_ADMIN_FF_Parameter_Copy
				--USP_ADMIN_FF_Section_Copy
				--SELECT * FROM @SectionsParameters
				--USP_ADMIN_FF_TemplateSectionOrder_Set
				--USP_ADMIN_FF_RequiredParameter_SET
				--USP_ADMIN_FF_ParameterDesignOptions_SET
				--USP_ADMIN_FF_Parameters_SET
				--USP_ADMIN_FF_ParameterFixedPresetValue_SET
				--USP_ADMIN_FF_ParameterTypes_SET
				--USP_ADMIN_FF_ParameterTemplate_SET
				--USP_ADMIN_FF_RuleConstant_SET
				--USP_ADMIN_FF_RuleParameterForAction_SET
				--USP_ADMIN_FF_RuleParameterForFunction_SET
				--USP_ADMIN_FF_Rules_SET
				--USP_ADMIN_FF_SectionDesignOptions_SET
				--USP_ADMIN_FF_Sections_SET
				--USP_ADMIN_FF_SectionTemplate_SET
				--USP_ADMIN_FF_SectionTemplateRecursive_SET ????????????????
				--USP_ADMIN_FF_Template_SET
				--USP_ADMIN_FF_TemplateDeterminantValues_SET
				--USP_ADMIN_FF_TemplateParameterOrder_Set
				--USP_ADMIN_FF_Determinant_SET

			--END
		
		--If any observations are made, then the following must be copied
		--select * from ffDeterminantValue where idfsFormTemplate = 9871670000000 

		IF @idfsFormTemplateNew IS NULL
			BEGIN
				SET @idfsFormTemplateNew = @idfsFormTemplate
			END

		SELECT	@returnCode as ReturnCode, @returnMsg as ReturnMessage, @idfsFormTemplateNew As idfsFormTemplate
	END TRY

	BEGIN CATCH

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		throw;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_FF_Copy_Template]...';


GO
-- ================================================================================================
-- Name: USP_OMM_FF_Copy_Template
-- Description: Copies the base structure of a template and its components to prevent historical damage.
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese	01/12/2021	Initial release for use by Outbreak.
-- Doug Albanese	12/30/2022	Added parameters for Event logging
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_FF_Copy_Template] (
	@LangId									NVARCHAR(50),
	@idfsFormTemplate						BIGINT,
	@User									NVARCHAR(50),
	@idfsSite								BIGINT = NULL,
	@idfsNewFormType						BIGINT = NULL
)
AS
BEGIN
	DECLARE @returnCode						INT = 0;
	DECLARE @returnMsg						NVARCHAR(MAX) = 'SUCCESS';
	
	Declare @SupressSelect TABLE
	(	
		retrunCode							INT,
		returnMessage						VARCHAR(200)
	) 

	DECLARE @Supress_USP_ADMIN_FF_Parameters_SET TABLE (
		ReturnCode							INT,
		ReturnMessage						VARCHAR(200),
		idfsParameter						BIGINT,
		idfsParameterCaption				BIGINT
	)
	
	DECLARE @Supress_USP_ADMIN_FF_ParameterTemplate_SET TABLE(
		ReturnData							VARCHAR(200)
	)

	DECLARE @iObservations					INT = 0


	BEGIN TRY
		
		--Changes that have the potential to trigger copying of a template
		--Template details
		--Parameter addition, moving, or deleting from a template
		--Section addition, moving, or deleting from a template
		--Parameter Editor changes
		--Section Editor Changes
		--Updating "Mandatory" status
		--Adding, Editing, or Removing a Rule

		DECLARE @FormTemplate				NVARCHAR(200)
		DECLARE @NationalName				NVARCHAR(200)
		DECLARE @NationalLongName			NVARCHAR(200)
		DECLARE @idfsFormType				BIGINT
		DECLARE @strNote					NVARCHAR(MAX)
		DECLARE @blnUNI						BIT

		DECLARE @idfsSection				BIGINT
		DECLARE @idfsParameter				BIGINT
		DECLARE @idfsParentSection			BIGINT 
		DECLARE @DefaultName				NVARCHAR(400)
		DECLARE @DefaultLongName			NVARCHAR(400)
		DECLARE @intOrder					INT
		DECLARE @blnGrid					BIT
		DECLARE @blnFixedRowset				BIT
		DECLARE @idfsMatrixType				BIGINT
		DECLARE @intRowStatus				INT
		DECLARE @idfsSectionNew				BIGINT
		DECLARE @idfsFormTemplateNew		BIGINT

		DECLARE @idfsParameterNew			BIGINT
		DECLARE	@idfsParameterCaption		BIGINT
		DECLARE @idfsParameterType			BIGINT
		DECLARE @idfsEditor					BIGINT
		DECLARE @intHACode					INT
		DECLARE @langid_int					BIGINT
		DECLARE @idfsRule					BIGINT
		DECLARE @idfsEditMode				BIGINT

		DECLARE @idfsRuleMessage			BIGINT
		DECLARE @idfsRuleFunction			BIGINT
		DECLARE @idfsRuleAction				BIGINT
		DECLARE	@idfsFunctionParameter		BIGINT
		DECLARE @idfsActionParameter		BIGINT
		DECLARE	@idfsFunctionParameterNew	BIGINT
		DECLARE @idfsActionParameterNew		BIGINT
		DECLARE @intNumberOfParameters		INT
		DECLARE @idfsCheckPoint				BIGINT
		DECLARE @MessageText				NVARCHAR(MAX)
		DECLARE @MessageNationalText		NVARCHAR(MAX)
		DECLARE @blnNot						BIT
		DECLARE	@idfsRuleNew				BIGINT
		DECLARE	@strFillValue				NVARCHAR(MAX)
		DECLARE	@strCompareValue			NVARCHAR(MAX)

		DECLARE @DefaultRuleName			NVARCHAR(MAX)
		DECLARE @NationalRuleName			NVARCHAR(MAX)
		DECLARE @DefaultRuleMessage			NVARCHAR(MAX)
		DECLARE @NationalRuleMessage		NVARCHAR(MAX)
		DECLARE @strActionParameters		NVARCHAR(MAX)

		DECLARE @idfRuleConstant			BIGINT
		DECLARE @idfRuleConstantNew			BIGINT
		DECLARE @varConstant				SQL_VARIANT

		DECLARE @idfDeterminantValue		BIGINT
		DECLARE @idfsBaseReference			BIGINT
		DECLARE @idfsGISBaseReference		BIGINT

		DECLARE @strResourceString			NVARCHAR(200) = 'Copy'

		SET NOCOUNT ON

		SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);
		
		--Are any observations made for the given active (intRowStatus = 0) template?
		--SELECT
		--	@iObservations = COUNT(idfObservation)
		--FROM
		--	tlbObservation O
		--INNER JOIN ffFormTemplate FT
		--	ON FT.idfsFormTemplate = O.idfsFormTemplate
		--	AND FT.intRowStatus = 0
		--WHERE
		--	O.idfsFormTemplate = @idfsFormTemplate

		--IF @iObservations > 0
		--	BEGIN
				----------------------------------------------------------------------------------------
				--Create table structures for collecting up items to enumerate and tag,				  --
				--and capture EXEC results                                                            --
				----------------------------------------------------------------------------------------
				DECLARE @Sections TABLE (
					idfsSection			BIGINT NULL,
					idfsSectionNew		BIGINT NULL
				)

				DECLARE @Parameters TABLE (
					idfsParameter		BIGINT,
					idfsParameterNew	BIGINT,
					idfsSection			BIGINT,
					idfsSectionNew		BIGINT
				)

				DECLARE @ActionParameters TABLE (
					idfsParameter		BIGINT
				)

				DECLARE @FunctionParameters TABLE (
					idfsParameter		BIGINT
				)

				DECLARE @TemplateDetails TABLE (
					idfsFormTemplate	BIGINT,
					FormTemplate		NVARCHAR(200),
					DefaultName			NVARCHAR(200),
					NationalName		NVARCHAR(200),
					idfsFormType		BIGINT,
					strNote				NVARCHAR(MAX),
					blnUNI				BIT
				)

				DECLARE @SectionSetResults TABLE (
					returnCode			BIGINT,
					returnMsg			NVARCHAR(MAX),
					idfsSection			BIGINT
				)

				DECLARE @SectionDetailResults TABLE (
					idfsParentSection	BIGINT,
					idfsFormType		BIGINT,
					intOrder			INT,
					blnGrid				BIT,
					blnFixedRowset		BIT,
					idfsMatrixType		BIGINT,
					strDefault			NVARCHAR(MAX),
					NationalName		NVARCHAR(MAX)
				)

				DECLARE @TemplateDetailsResults TABLE (
					returnCode			BIGINT,
					returnMsg			NVARCHAR(MAX),
					idfsFormTemplate	BIGINT
				)

				DECLARE	@Rules	TABLE (
					idfsRule			BIGINT,
					idfsRuleNew			BIGINT
				)

				DECLARE @RuleDetailResults TABLE (
					idfsRule				BIGINT,
					defaultRuleName			NVARCHAR(MAX),
					RuleName				NVARCHAR(MAX),
					idfsRuleMessage			BIGINT,
					defaultRuleMessage		NVARCHAR(MAX),
					RuleMessage				NVARCHAR(MAX),
					idfsCheckPoint			BIGINT,
					idfsRuleFunction		BIGINT,
					blnNot					BIT,
					idfsRuleAction			BIGINT,
					strActionParameters		NVARCHAR(MAX),
					idfsFunctionParameter	BIGINT,
					FillValue				NVARCHAR(MAX)
				)

				DECLARE @RuleConstants TABLE (
					idfRuleConstant		BIGINT,
					idfsRule			BIGINT,
					varConstant			SQL_VARIANT
				)

				DECLARE @Functions TABLE (
					idfParameterForFunction	BIGINT,
					idfsParameter			BIGINT,
					idfsFormTemplate		BIGINT,
					idfsRule				BIGINT,
					intOrder				INT,
					strCompareValue			NVARCHAR(MAX)
				)

				DECLARE @Actions TABLE (
					idfParameterForAction	BIGINT,
					idfsParameter			BIGINT,
					idfsFormTemplate		BIGINT,
					idfsRuleAction			BIGINT,
					idfsRule				BIGINT,
					strFillValue			NVARCHAR(MAX)
				)

				DECLARE @GlobalReference TABLE (
					idfs					BIGINT,
					idfsNew					BIGINT
				)

				DECLARE @Determinants TABLE (
					idfDeterminantValue		BIGINT,
					idfsBaseReference		BIGINT
				)

				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of the base Template													  --
				----------------------------------------------------------------------------------------
				INSERT INTO @TemplateDetails
				EXEC USP_ADMIN_FF_Template_GetDetail @LangID = @LangId, @idfsFormTemplate = @idfsFormTemplate

				SELECT
					@idfsFormTemplate = idfsFormTemplate,
					@FormTemplate = FormTemplate,
					@DefaultName = DefaultName,
					@NationalName = NationalName,
					@idfsFormType = idfsFormType,
					@strNote = strNote,
					@blnUNI = blnUNI
				FROM
					@TemplateDetails

				if @idfsNewFormType IS NOT NULL
					BEGIN
						if NOT EXISTS(SELECT TOP 1 idfsFormTemplate FROM ffFormTemplate WHERE idfsFormType = @idfsNewFormType AND intRowStatus = 0)
							BEGIN
								SET @idfsFormType = @idfsNewFormType
								SET @blnUNI = 1
							END
					END
				--Collect remaining details that are not supplied by the existing SP
				--SELECT
				--	@DefaultName = strDefault
				--FROM
				--	trtBaseReference 
				--WHERE
				--	idfsBaseReference = @idfsFormTemplate
				
				--Generate new idfsFormTemplate with existing names, having "Copy" appended to it
				SELECT
					@strResourceString = strResourceString
				FROM
					trtResourceTranslation
				WHERE 
					idfsResource = 744 and 
					idfsLanguage = @langid_int

				SET @DefaultName = CONCAT(@DefaultName,' (', @strResourceString , ')')
				SET @NationalName = CONCAT(@NationalName,' (', @strResourceString , ')')

				INSERT INTO @SupressSelect
				EXEC dbo.USSP_GBL_BaseReference_SET @idfsFormTemplateNew OUTPUT, 19000033/*'rftParameter'*/,@LangID, @DefaultName, @NationalName, 0

				--Create Global Reference for use by subsequential steps
				INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsFormTemplate, @idfsFormTemplateNew)

				--Create the new Template
				INSERT INTO @SupressSelect
				EXEC USP_ADMIN_FF_Template_SET 
					@idfsFormType = @idfsFormType, 
					@DefaultName = @DefaultName,
					@NationalName = @NationalName, 
					@strNote = @strNote, 
					@LangId = @LangID, 
					@blnUNI = @blnUNI,
					@idfsFormTemplate = @idfsFormTemplateNew,
					@User = @User,
					@FunctionCall = 1,
					@CopyOnly = 1,
					@EventTypeId = 0, --Need to address this field in the future
					@SiteId = 0,--Need to address this field in the future
					@UserId = 0,--Need to address this field in the future
					@LocationId = 0--Need to address this field in the future

				--Turn off UNI on old Template, since the newer on is the primary one now
				UPDATE
					ffFormTemplate
				SET
					blnUNI = 0
				WHERE
					idfsFormTemplate = @idfsFormTemplate

				--Disable existing Template
				--UPDATE
				--	ffFormTemplate
				--SET
				--	intRowStatus = 1
				--WHERE
				--	idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Sections													  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Sections (idfsSection)
				SELECT
					SFT.idfsSection
				FROM
					ffSectionForTemplate SFT
				INNER JOIN ffSection S
					ON S.idfsSection = SFT.idfsSection
				WHERE
					SFT.idfsFormTemplate = @idfsFormTemplate AND
					S.intRowStatus = 0

				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Parameters and their associated Sections					  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Parameters (idfsParameter, idfsSection)
				SELECT
					PFT.idfsParameter,
					P.idfsSection
				FROM
					ffParameterForTemplate PFT
				INNER JOIN ffParameter P
					ON P.idfsParameter = PFT.idfsParameter
				WHERE
					PFT.idfsFormTemplate = @idfsFormTemplate AND
					P.intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rules														  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Rules (idfsRule)
				SELECT
					idfsRule
				FROM
					ffRule
				WHERE
					idfsFormTemplate = @idfsFormTemplate AND
					intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rules														  --
				----------------------------------------------------------------------------------------
				--INSERT INTO @Rules (idfsRule)
				--SELECT
				--	idfsRule
				--FROM
				--	ffRule
				--WHERE
				--	idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rule Constants												  --
				----------------------------------------------------------------------------------------
				INSERT INTO @RuleConstants (idfRuleConstant, idfsRule, varConstant)
				SELECT
					RC.idfRuleConstant,
					RC.idfsRule,
					RC.varConstant
				FROM
					ffRuleConstant RC
				INNER JOIN ffRule R
					ON R.idfsRule = RC.idfsRule
				WHERE
					R.idfsFormTemplate = @idfsFormTemplate AND
					R.intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Template Determinants										  --
				--------------------------------------------------------------------------------------
				INSERT INTO @Determinants (idfDeterminantValue, idfsBaseReference)
				SELECT
					idfDeterminantValue,
					idfsBaseReference
				FROM
					ffDeterminantValue
				WHERE
					idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of each Section and its Template association							  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsSection FROM @Sections WHERE idfsSectionNew IS NULL)
					BEGIN
						--Get another recored that hasn't been converted yet
						SELECT TOP 1 @idfsSection = idfsSection FROM @Sections WHERE idfsSectionNew IS NULL
						SELECT @intOrder = intOrder FROM ffSectionDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsSection = @idfsSection
						
						--SELECT
						--	@idfsParentSection	= idfsParentSection,
						--	@idfsFormType		= idfsFormType,
						--	@intOrder			= S.intOrder,
						--	@blnGrid			= blnGrid,
						--	@blnFixedRowset		= blnFixedRowset,
						--	@idfsMatrixType		= idfsMatrixType,
						--	@DefaultName		= B.strDefault,
						--	@NationalName		= ISNULL(SNT.[strTextString], B.[strDefault]) 
						--FROM
						--	ffSection S
						--INNER JOIN dbo.trtBaseReference B
						--ON B.[idfsBaseReference] = S.[idfsSection]
						--   AND B.[intRowStatus] = 0  
						--LEFT JOIN dbo.trtStringNameTranslation SNT
						--ON SNT.[idfsBaseReference] = S.[idfsSection]
						--   AND SNT.idfsLanguage = @langid_int
						--   AND SNT.[intRowStatus] = 0
						--WHERE
						--	idfsSection = @idfsSection
							
						--Reset to grab a new id each iteration
						--SET @idfsSectionNew = NULL

						--Create another Section, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsSectionNew OUTPUT,19000101,@LangID,@DefaultName,@NationalName,0

						--IF @idfsSectionNew IS NOT NULL 
						--	BEGIN
								--Create Global Reference for use by subsequential steps
								--INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsSection, @idfsSectionNew)
								----INSERT INTO @SectionSetResults
								--INSERT INTO @SupressSelect
								--EXEC USP_ADMIN_FF_Sections_SET 
								--	@idfsSection		= @idfsSectionNew, 
								--	@idfsParentSection	= @idfsParentSection, 
								--	@idfsFormType		= @idfsFormType,
								--	@intOrder			= @intOrder,
								--	@blnGrid			= @blnGrid,
								--	@blnFixedRowset		= @blnFixedRowset,
								--	@idfsMatrixType		= @idfsMatrixType,
								--	@intRowStatus		= @intRowStatus,
								--	@User				= @User,
								--	@CopyOnly			= 1

								--Create entry for the association of this new Section against the new Template
								INSERT INTO @SupressSelect
								EXEC USP_ADMIN_FF_SectionTemplate_SET 
									@LangId = @LangID, 
									@idfsSection = @idfsSection, 
									@idfsFormTemplate = @idfsFormTemplateNew,
									@User = @User

								UPDATE
									ffSectionDesignOption
								SET
									intOrder = @intOrder
								WHERE
									idfsFormTemplate = @idfsFormTemplate AND
									idfsSection = @idfsSection

								--Update the temporary table, to mark it as converted
								UPDATE
									@Sections
								SET
									idfsSectionNew = @idfsSection
								WHERE
									idfsSection = @idfsSection

								UPDATE
									@Parameters
								SET
									idfsSectionNew = @idfsSection
								WHERE
									idfsSection = @idfsSection
									
								--Soft delete the old section, from the ffSection table
								--UPDATE 
								--	ffSection
								--SET
								--	intRowStatus = 1
								--WHERE
								--	idfsSection = @idfsSection
							--END
					END
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of each Parameter and its Template association						  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsParameter FROM @Parameters WHERE idfsParameterNew IS NULL)
					BEGIN
						--Get another record that hasn't been converted yet
						SELECT TOP 1 @idfsParameter = idfsParameter FROM @Parameters WHERE idfsParameterNew IS NULL
						SELECT @intOrder = intOrder FROM ffParameterDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsParameter = @idfsParameter
						SELECT @idfsEditMode = idfsEditMode FROM ffParameterForTemplate WHERE idfsFormTemplate = @idfsFormTemplate AND idfsParameter = @idfsParameter

						--Grab the details for the current parameter
						--SELECT
						--	@idfsSection			= P.idfsSection,
						--	@idfsParameterCaption	= P.idfsParameterCaption,
						--	@idfsParameterType		= P.idfsParameterType,
						--	@idfsFormType			= P.idfsFormType,
						--	@idfsEditor				= P.idfsEditor,
						--	@strNote				= P.strNote,
						--	@intOrder				= P.intOrder,
						--	@intHACode				= P.intHACode,
						--	@DefaultName			= ISNULL(B2.[strDefault], ''),
						--	@DefaultLongName		= ISNULL(B1.[strDefault], ''),
						--	@NationalName			= ISNULL(SNT2.[strTextString], B2.[strDefault]),
						--	@NationalLongName		= ISNULL(SNT1.[strTextString], B1.[strDefault])
						--FROM
						--	ffParameter P
						--INNER JOIN dbo.trtBaseReference B1
						--ON B1.[idfsBaseReference] = P.[idfsParameter]
						--	AND B1.[intRowStatus] = 0
						--LEFT JOIN dbo.trtBaseReference B2
						--ON B2.[idfsBaseReference] = P.[idfsParameterCaption]
						--	AND B2.[intRowStatus] = 0
						--LEFT JOIN dbo.trtStringNameTranslation SNT1
						--ON (SNT1.[idfsBaseReference] = P.[idfsParameter]
						--	AND SNT1.[idfsLanguage] = @langid_int)
						--	AND SNT1.[intRowStatus] = 0
						--LEFT JOIN dbo.trtStringNameTranslation SNT2
						--ON (SNT2.[idfsBaseReference] = P.[idfsParameterCaption]
						--	AND SNT2.[idfsLanguage] = @langid_int)
						--	AND SNT2.[intRowStatus] = 0
						--WHERE
						--	P.idfsParameter = @idfsParameter
							
						--Reset to grab a new id each iteration
						--SET @idfsParameterNew = NULL

						----Create another parameter, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsParameterNew OUTPUT, 19000066/*'rftParameter'*/,@LangID, @DefaultLongName, @NationalLongName, 0

						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsParameterCaption OUTPUT, 19000070 /*'rftParameterToolTip'*/,@LangID, @DefaultName, @NationalName, 0

						----Create Global Reference for use by subsequential steps
						--INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsParameter, @idfsParameterNew)

						--Obtain the id for the newly copied section
						--SELECT
						--	@idfsSectionNew = idfsSectionNew
						--FROM
						--	@Parameters
						--WHERE
						--	idfsParameter = @idfsParameter

						--Create the copy of the existing Parameter
						--INSERT INTO @Supress_USP_ADMIN_FF_Parameters_SET
						--EXEC USP_ADMIN_FF_Parameters_SET 
						--	@LangID					= @LangID,
						--	@idfsSection			= @idfsSectionNew, 
						--	@idfsFormType			= @idfsFormType,
						--	@idfsParameterType		= @idfsParameterType,
						--	@idfsEditor				= @idfsEditor,
						--	@intHACode				= @intHACode,
						--	@intOrder				= @intOrder,
						--	@strNote				= @strNote,
						--	@DefaultName			= @DefaultName,
						--	@NationalName			= @NationalName,
						--	@DefaultLongName		= @DefaultLongName,
						--	@NationalLongName		= @NationalLongName,
						--	@idfsParameter			= @idfsParameterNew,
						--	@idfsParameterCaption	= @idfsParameterCaption,
						--	@User					= @User,
						--	@intRowStatus			= 0,
						--	@CopyOnly				= 1

						--Create entry for the association of this new Section against the new Template
						--INSERT INTO @Supress_USP_ADMIN_FF_ParameterTemplate_SET
						EXEC USP_ADMIN_FF_ParameterTemplateForCopy_SET
							@LangID= @LangID,
							@idfsParameter = @idfsParameter, 
							@idfsFormTemplate = @idfsFormTemplateNew,
							@User = @User,
							@CopyOnly = 1,
							@FunctionCall = 1

						--Apply ordering settings
						UPDATE
							ffParameterDesignOption
						SET
							intOrder = @intOrder
						WHERE
							idfsFormTemplate = @idfsFormTemplateNew AND
							idfsParameter = @idfsParameter

						--Apply Edit Mode (Mandatory or Ordinary)
						UPDATE
							ffParameterForTemplate
						SET
							idfsEditMode = @idfsEditMode
						WHERE
							idfsFormTemplate = @idfsFormTemplateNew AND
							idfsParameter = @idfsParameter

						--Update the temporary table, to mark it as converted
						UPDATE
							@Parameters
						SET
							idfsParameterNew = @idfsParameter
						WHERE
							idfsParameter = @idfsParameter


						--Soft delete the old section, from the ffSection table
						--UPDATE 
						--	ffParameter
						--SET
						--	intRowStatus = 1
						--WHERE
						--	idfsParameter = @idfsParameter

					END
				----------------------------------------------------------------------------------------

				--Enumerate through all determinants that are related to the Template
				WHILE EXISTS (SELECT idfDeterminantValue FROM @Determinants)
					BEGIN
						--Grab the first items in the list
						SELECT
							TOP 1
							@idfDeterminantValue = idfDeterminantValue,
							@idfsBaseReference = idfsBaseReference
						FROM
							@Determinants

						--Create the copy of the existing entry
						INSERT INTO @SupressSelect
						EXEC USP_ADMIN_FF_Determinant_SET @idfsDiagnosisGroup = @idfsBaseReference, 
														@idfsFormTemplate = @idfsFormTemplateNew, 
														@User = @User, 
														@intRowStatus = 0, 
														@FunctionCall = 1,
														@EventTypeId = 0, --Need to address this field in the future
														@SiteId = 0,--Need to address this field in the future
														@UserId = 0,--Need to address this field in the future
														@LocationId = 0--Need to address this field in the future

						--Disable
						UPDATE
							ffDeterminantValue
						SET
							intRowStatus = 1
						WHERE
							idfDeterminantValue = @idfDeterminantValue

						DELETE
						FROM
							@Determinants
						WHERE
							idfDeterminantValue = @idfDeterminantValue
					END

				----------------------------------------------------------------------------------------
				--Make a copy of each Rule															  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsRule FROM @Rules WHERE idfsRuleNew IS NULL)
					BEGIN
						--Get another record that hasn't been converted yet
						SELECT
							TOP 1 @idfsRule = idfsRule
						FROM
							@Rules
						WHERE
							idfsRuleNew IS NULL

						--Reset @RuleDetailResults, so that it will only have one row at a time in it
						DELETE FROM @RuleDetailResults

						--Grab the details for the current Rule
						INSERT INTO @RuleDetailResults
						EXEC USP_ADMIN_FF_Rule_GetDetails @langid=@LangId, @idfsRule = @idfsRule

						SELECT
							@idfsRule = idfsRule,
							@DefaultRuleName = defaultRuleName,
							@NationalRuleName = RuleName,
							@DefaultRuleMessage = defaultRuleMessage,
							@NationalRuleMessage = RuleMessage,
							@idfsRuleMessage = idfsRuleMessage,
							@idfsCheckPoint = idfsCheckPoint,
							@idfsRuleFunction = idfsRuleFunction,
							@blnNot = blnNot,
							@idfsRuleAction = idfsRuleAction,
							@strActionParameters = strActionParameters,
							@idfsFunctionParameter = idfsFunctionParameter,
							@strFillValue = FillValue
						FROM
							@RuleDetailResults
						
						--Reset to grab a new id each iteration
						--SET @idfsRuleNew = -1

						--Create another Rule, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						EXEC dbo.USSP_GBL_BaseReference_SET @ReferenceID = @idfsRuleNew OUTPUT, @ReferenceType = 19000029, @LangId = @LangID, @DefaultName = @DefaultName, @NationalName = @NationalName, @System = 0

						INSERT INTO @SupressSelect
						EXEC dbo.USSP_GBL_BaseReference_SET @idfsRuleMessage OUTPUT, 19000032, @LangID, @MessageText, @MessageNationalText, 0
						
						--Create Global Reference for use by subsequential steps
						INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsRule, @idfsRuleNew)

						--Reset the Action Parameters Table
						DELETE FROM @ActionParameters
						
						--Create table from string "Parameters" of the current rule details
						INSERT INTO @ActionParameters (idfsParameter)
						SELECT
							CAST(L.value AS BIGINT) AS idfsParameter
						FROM
							[dbo].[FN_GBL_SYS_SplitList](@strActionParameters, 0, ',') L

						--Get the conversion of the idfsParameter from its old value for the Function that the parameter is using.
						SELECT
							@idfsFunctionParameterNew = idfsNew
						FROM
							@GlobalReference
						WHERE
							idfs = @idfsFunctionParameter

						
						--Enumerate through all Action Parameters, that are associated with the rule
						WHILE EXISTS(SELECT idfsParameter FROM @ActionParameters)
							BEGIN
								SELECT 
									TOP 1 @idfsActionParameter = idfsParameter
								FROM
									@ActionParameters
									
								--Get the conversion of the idfsParameter from its old value for the Action that the parameter is using.
								SELECT
									@idfsActionParameterNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfsActionParameter

								--Create the copy of the existing Parameter
								--INSERT INTO @SupressSelect
								EXEC USP_ADMIN_FF_Rules_SET
									@idfsRule = @idfsRuleNew,
									@idfsFormTemplate = @idfsFormTemplateNew,
									@idfsCheckPoint = @idfsCheckPoint,
									@idfsRuleFunction = @idfsRuleFunction,
									@idfsRuleAction = @idfsRuleAction,
									@DefaultName = @DefaultName,
									@NationalName = @NationalName,
									@MessageText = @MessageText,
									@MessageNationalText = @MessageNationalText,
									@blnNot = @blnNot,
									@LangID = @LangID,
									@idfsRuleMessage = @idfsRuleMessage,
									@idfsFunctionParameter = @idfsFunctionParameterNew,
									@idfsActionParameter = @idfsActionParameterNew,
									@User = @User,
									@strFillValue = @strFillValue,
									@strCompareValue = @strCompareValue,
									@intRowStatus = 0,
									@FunctionCall = 1,
									@CopyOnly = 1

								DELETE FROM @ActionParameters WHERE idfsParameter = @idfsActionParameter
							END

						--Enumerate through all Constants, that are related to the Rule
						WHILE EXISTS(SELECT idfRuleConstant FROM @RuleConstants)
							BEGIN
								SELECT
									TOP 1
									@idfRuleConstant = idfRuleConstant,
									@idfsRule = idfsRule,
									@varConstant = varConstant
								FROM
									@RuleConstants

								--Get a new row id
								INSERT INTO @SupressSelect
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'ffRuleConstant', @idfRuleConstantNew OUTPUT;

								--Get the newly created id for the old entry.
								SELECT
									@idfRuleConstantNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfRuleConstant

								--Get the newly created id for the old entry.
								SELECT
									@idfsRuleNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfsRuleNew

								--Create the new Record
								INSERT INTO ffRuleConstant (
									idfRuleConstant, 
									idfsRule, 
									varConstant, 
									intRowStatus,
									AuditCreateDTM,
									AuditCreateUser
								)
								VALUES (
									@idfRuleConstantNew,
									@idfsRuleNew,
									@varConstant,
									0,
									GETDATE(),
									@User
								)
								
								--Delete the top record so that continous looping doesn't occur to produce records over and over
								DELETE 
								FROM 
									@RuleConstants
								WHERE
									idfRuleConstant = @idfRuleConstant
							END
						
						--Update the temporary table, to mark it as converted
						UPDATE
							@Rules
						SET
							idfsRuleNew = @idfsRuleNew
						WHERE
							idfsRule = @idfsRule
						
						--Soft delete the old section, from the ffSection table
						UPDATE 
							ffRule
						SET
							intRowStatus = 1
						WHERE
							idfsRule= @idfsRule

					END
				----------------------------------------------------------------------------------------

				--USP_ADMIN_FF_Parameter_Copy
				--USP_ADMIN_FF_Section_Copy
				--SELECT * FROM @SectionsParameters
				--USP_ADMIN_FF_TemplateSectionOrder_Set
				--USP_ADMIN_FF_RequiredParameter_SET
				--USP_ADMIN_FF_ParameterDesignOptions_SET
				--USP_ADMIN_FF_Parameters_SET
				--USP_ADMIN_FF_ParameterFixedPresetValue_SET
				--USP_ADMIN_FF_ParameterTypes_SET
				--USP_ADMIN_FF_ParameterTemplate_SET
				--USP_ADMIN_FF_RuleConstant_SET
				--USP_ADMIN_FF_RuleParameterForAction_SET
				--USP_ADMIN_FF_RuleParameterForFunction_SET
				--USP_ADMIN_FF_Rules_SET
				--USP_ADMIN_FF_SectionDesignOptions_SET
				--USP_ADMIN_FF_Sections_SET
				--USP_ADMIN_FF_SectionTemplate_SET
				--USP_ADMIN_FF_SectionTemplateRecursive_SET ????????????????
				--USP_ADMIN_FF_Template_SET
				--USP_ADMIN_FF_TemplateDeterminantValues_SET
				--USP_ADMIN_FF_TemplateParameterOrder_Set
				--USP_ADMIN_FF_Determinant_SET

			--END
		
	END TRY

	BEGIN CATCH

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		throw;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HAS_MONITORING_SESSION_SET]...';


GO
-- ================================================================================================
-- Name: USP_HAS_MONITORING_SESSION_SET
--
-- Description: Insert/update for monitoring session records for the human module.
--          
-- Revision History:
-- Name				Date	   Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		07/06/2019 Initial release.
-- Ann Xiong		01/17/2020 Fixed an issue in Persons & Samples grid where saving a new row 
--                             will change the Person ID of several previous rows to be the same 
--                             as the newly added row.
-- Stephen Long		03/09/2020 Added current site ID to the update sample set call.
-- Ann Xiong		03/20/2020 Added the following information from the AS Session to the new 
--								Disease Report:
--								Disease Report field “Report Status” – “In progress”	
--								Disease Report field “Case classification” field - <blank>
--								Disease Report field “Report Type” – “Active”
--								Disease Report field “Entered by Name” with the user name who 
--                              created this Disease Report
--								Disease Report field “Date Entered” with the current date when 
--                              this Disease Report was created
-- Ann Xiong		03/30/2020 Update SET idfHumanCase in tlbMaterial and set 
--							   idfsYNSpecimenCollected and idfsYNTestsConducted.
-- Ann Xiong		04/14/2020 Changed to use "SSH" prefix instead of SSV for Human Active 
--							   Surveillance Session.
-- Stephen Long		12/20/2020 Updated USSP_GBL_TEST_SET call with four new parameters.
-- Doug Albanese	01/12/2022 Refactored, due to table change for storing multiple disease 
--                             against a session.  Added supress to an EXECUTE statement that was 
--                             preventing EF from generating a return model
-- Doug Albanese	01/13/2022 Refactored to use new location hierarchy
-- Doug Albanese	01/14/2022 Refactoring json conversion tables to not require PKs, until 
--                             automatically generated
-- Doug Albanese	01/18/2022 Clean up of "collections" to include required fields for foreign 
--                             records
-- Doug Albanese	01/24/2022 Final refactoring for successful save from the app.
-- Doug Albanese	02/02/2022 Minor refactoring to save SampleId to Tests collection
-- Doug Albanese	03/25/2022 Updated to make use of "RowAction" on the disease combination
-- Doug Albanese	05/23/2022 Removed idfsCurrentSite, to prevent clashing with lab.
-- Doug Albanese	06/16/2022 Changed out the value used for NonLaboratoryTestIndicator from 0 to 
--                             1
-- Doug Albanese	06/16/2022 Added "Notifications" for processing, and User ID for auditing 
--                             purposes
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
--	Doug Albanese	07/19/2022	Corrected the enumeration of multiple site alerts
--	Doug Albanese	08/01/2022	Added a replacement feature of the word "New", to have the EIDSS Session ID, in place.
--	Doug Albanese	08/26/2022	Adjusted supression, because of changes made to USSP_GBL_SAMPLE_SET
-- Doug Albanese	 10/17/2022	 Added a condition to pick up any idfHumancase ids that belong to an existing Test to maintain the "Connected" status.
-- Stephen Long     10/18/2022 Added samples to diseases parameter and logic.
-- Leo Tracchia		12/5/2022 Added statements for Audit logging 
-- Leo Tracchia		12/6/2022 Added fix for auditing logic
-- Stephen Long     12/09/2022 Added EIDSSObjectID parameter to to samples, tests and test 
--                             interpretations calls.
-- Doug Albanese	 12/23/2022	  Corrected the overwriting of @idfNewHuman with @HumanID for new Sample Inserts
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HAS_MONITORING_SESSION_SET]
(
    @LanguageID NVARCHAR(50),
    @MonitoringSessionID BIGINT = NULL,
    @MonitoringSessionStatusTypeID BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @EnteredByPersonID BIGINT = NULL,
    @CampaignID BIGINT = NULL,
    @SiteID BIGINT,
    @EIDSSSessionID NVARCHAR(50) = NULL,
    @StartDate DATETIME = NULL,
    @EndDate DATETIME = NULL,
    @SessionCategoryTypeID BIGINT = NULL,
    @RowStatus INT,
    @CreateDiseaseReportHumanID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @DiseaseCombinations NVARCHAR(MAX),
    @SampleTypeCombinations NVARCHAR(MAX),
    @Samples NVARCHAR(MAX),
    @SamplesToDiseases NVARCHAR(MAX) = NULL,
    @Tests NVARCHAR(MAX),
    @Actions NVARCHAR(MAX),
    @Events NVARCHAR(MAX) = NULL,
    @UserId BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @NewHumanID BIGINT = NULL,
                @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL;

        /* Get an 'On-The-Fly' translation for the word "New". To be used, to replace the "New" indicator on Samples / Tests.*/
        DECLARE @Translated_New NVARCHAR(50)

        DECLARE @ExecReturn TABLE
        (
            strDefault NVARCHAR(200),
            name NVARCHAR(200),
            LongName NVARCHAR(200)
        )

        INSERT INTO @ExecReturn
        EXEC [dbo].[USP_GBL_BaseReferenceTranslation_Get] @LanguageId = 'en-us',
                                                          @idfsBaseReference = 10140000

        SELECT @Translated_New = [name]
        FROM @ExecReturn
        /*End 'On-The-Fly' translation.*/

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage VARCHAR(200)
        );

        DECLARE @CampaignName NVARCHAR(50)
        DECLARE @CampaignTypeID BIGINT = NULL
        DECLARE @CampaignStartDate DATETIME = NULL
        DECLARE @CampaignEndDate DATETIME = NULL

        IF @CampaignID IS NOT NULL
        BEGIN
            SELECT @CampaignTypeID = idfsCampaignType,
                   @CampaignName = strCampaignname,
                   @CampaignStartDate = datCampaignDateStart,
                   @CampaignEndDate = datCampaignDateEnd
            FROM tlbCampaign
            WHERE idfCampaign = @CampaignID
        END

        DECLARE @RowID BIGINT = NULL,
                @RowAction NCHAR = NULL,
                @MonitoringSessionToDiseaseID BIGINT,
                @MonitoringSessionToSampleTypeID BIGINT,
                @OrderNumber INT,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @HumanID BIGINT,
                @HumanMasterID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @AccessionDate DATETIME = NULL,
                @AccessionConditionTypeID BIGINT = NULL,
                @AccessionComment NVARCHAR(200) = NULL,
                @AccessionByPersonID BIGINT = NULL,
                --,@CurrentSiteID BIGINT = NULL
                @TestID BIGINT,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @TestNumber INT = NULL,
                @StartedDate DATETIME2 = NULL,
                @ResultDate DATETIME2 = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME2 = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestMonitoringSessionID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @MonitoringSessionActionID BIGINT,
                @ActionTypeID BIGINT,
                @ActionStatusTypeID BIGINT,
                @ActionDate DATETIME = NULL,
                @Comments NVARCHAR(500) = NULL,
                @DiseaseID BIGINT,
                @idfMonitoringSessionToDiagnosis BIGINT,
                @DateEntered DATETIME = GETDATE(),
                @idfHumanCase_Test BIGINT = NULL,
                @MonitoringSessionToMaterialID BIGINT = NULL;

        DECLARE @DiseaseCombinationsTemp TABLE
        (
            MonitoringSessionToDiseaseID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            OrderNumber INT NOT NULL,
            SampleTypeID BIGINT NULL,
            Comments NVARCHAR(MAX),
            RowStatus INT NOT NULL,
            RowAction CHAR(1)
        );

        DECLARE @SampleTypeCombinationsTemp TABLE
        (
            MonitoringSessionToSampleTypeID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            OrderNumber INT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1)
        );

        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME2 NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME2 NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            --,CurrentSiteID BIGINT NULL
            DiseaseID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            HumanID BIGINT NULL,
            HumanMasterID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @SamplesToDiseasesTemp TABLE
        (
            MonitoringSessionToMaterialID BIGINT NOT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );

        DECLARE @TestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME2 NULL,
            ResultDate DATETIME2 NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME2 NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @ActionsTemp TABLE
        (
            MonitoringSessionActionID BIGINT NOT NULL,
            EnteredByPersonID BIGINT NULL,
            ActionTypeID BIGINT NULL,
            ActionStatusTypeID BIGINT NULL,
            ActionDate DATETIME2 NULL,
            Comments NVARCHAR(500) NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL
        );

        --Data Audit--

        DECLARE @idfUserId BIGINT = NULL;
        DECLARE @idfSiteId BIGINT = NULL;
        DECLARE @idfsDataAuditEventType bigint = NULL;
        DECLARE @idfsObjectType bigint = 10017063; --select * from trtBaseReference where idfsBaseReference = 10017063
        DECLARE @idfObject bigint = @MonitoringSessionID;
        DECLARE @idfObjectTable_tlbMonitoringSession bigint = 707040000000;
        DECLARE @idfObjectTable_tlbCampaign bigint = 706900000000;
        DECLARE @idfDataAuditEvent bigint = NULL;

        DECLARE @tlbMonitoringSession_BeforeEdit TABLE
        (
            idfMonitoringSession bigint,
            idfsMonitoringSessionStatus bigint,
            idfsLocation bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            AuditUpdateUser nvarchar(200)
        )

        DECLARE @tlbMonitoringSession_AfterEdit TABLE
        (
            idfMonitoringSession bigint,
            idfsMonitoringSessionStatus bigint,
            idfsLocation bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            AuditUpdateUser nvarchar(200)
        )

        DECLARE @tlbCampaign_BeforeEdit TABLE
        (
            idfCampaign bigint,
            strCampaignName nvarchar(200),
            idfsCampaignType bigint,
            datCampaignDateStart datetime,
            datCampaignDateEnd datetime
        )

        DECLARE @tlbCampaign_AfterEdit TABLE
        (
            idfCampaign bigint,
            strCampaignName nvarchar(200),
            idfsCampaignType bigint,
            datCampaignDateStart datetime,
            datCampaignDateEnd datetime
        )

        --Data Audit--

        --BEGIN TRANSACTION;

        SET @DiseaseCombinations = REPLACE(@DiseaseCombinations, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @DiseaseCombinationsTemp
        SELECT *
        FROM
            OPENJSON(@DiseaseCombinations)
            WITH
            (
                MonitoringSessionToDiseaseID BIGINT,
                DiseaseID BIGINT,
                OrderNumber INT,
                SampleTypeID BIGINT,
                Comments NVARCHAR(MAX),
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @SampleTypeCombinations = REPLACE(@SampleTypeCombinations, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SampleTypeCombinationsTemp
        SELECT *
        FROM
            OPENJSON(@SampleTypeCombinations)
            WITH
            (
                MonitoringSessionToSampleTypeID BIGINT,
                SampleTypeID BIGINT,
                OrderNumber INT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @Samples = REPLACE(@Samples, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                --,CurrentSiteID BIGINT
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @SamplesToDiseasesTemp
        SELECT *
        FROM
            OPENJSON(@SamplesToDiseases)
            WITH
            (
                MonitoringSessionToMaterialID BIGINT,
                MonitoringSessionID BIGINT,
                SampleID BIGINT,
                SampleTypeID BIGINT,
                DiseaseID BIGINT,
                RowStatus INT,
                RowAction INT
            );

        SET @Tests = REPLACE(@Tests, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@Tests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );


        SET @Actions = REPLACE(@Actions, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @ActionsTemp
        SELECT *
        FROM
            OPENJSON(@Actions)
            WITH
            (
                MonitoringSessionActionID BIGINT,
                EnteredByPersonID BIGINT,
                ActionTypeID BIGINT,
                ActionStatusTypeID BIGINT,
                ActionDate DATETIME2,
                Comments NVARCHAR(500),
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        --Data Audit--
        -- Get and Set UserId and SiteId
        --SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@UserId) userInfo

        select @idfUserId = tu.idfUserID,
               @idfSiteId = tu.idfsSite
        from AspNetUsers u
            inner join tstUserTable tu
                on u.idfUserID = tu.idfUserID
        where u.idfUserID = @UserId

        --Data Audit--

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID
        )
        BEGIN

            --  tauDataAuditEvent  Event Type - Edit 
            set @idfsDataAuditEventType = 10016003;

            -- insert record into tauDataAuditEvent - 
            INSERT INTO @SuppressSelect
            EXEC USSP_GBL_DataAuditEvent_GET @idfUserId,
                                             @idfSiteId,
                                             @idfsDataAuditEventType,
                                             @idfsObjectType,
                                             @idfObject,
                                             @idfObjectTable_tlbMonitoringSession,
                                             @idfDataAuditEvent OUTPUT

            INSERT INTO @tlbMonitoringSession_BeforeEdit
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                AuditUpdateUser
            )
            SELECT idfMonitoringSession,
                   idfsMonitoringSessionStatus,
                   idfsLocation,
                   idfPersonEnteredBy,
                   idfCampaign,
                   idfsSite,
                   datEnteredDate,
                   datStartDate,
                   datEndDate,
                   SessionCategoryID,
                   AuditUpdateUser
            FROM tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID;

            UPDATE dbo.tlbMonitoringSession
            SET idfsMonitoringSessionStatus = @MonitoringSessionStatusTypeID,
                idfsLocation = @idfsLocation,
                idfPersonEnteredBy = @EnteredByPersonID,
                idfCampaign = @CampaignID,
                idfsSite = @SiteID,
                datEnteredDate = GETDATE(),
                datStartDate = @StartDate,
                datEndDate = @EndDate,
                SessionCategoryID = @SessionCategoryTypeID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfMonitoringSession = @MonitoringSessionID;

            INSERT INTO @tlbMonitoringSession_AfterEdit
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                AuditUpdateUser
            )
            SELECT idfMonitoringSession,
                   idfsMonitoringSessionStatus,
                   idfsLocation,
                   idfPersonEnteredBy,
                   idfCampaign,
                   idfsSite,
                   datEnteredDate,
                   datStartDate,
                   datEndDate,
                   SessionCategoryID,
                   AuditUpdateUser
            FROM tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID;

            --idfsMonitoringSessionStatus
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707060000000,
                   a.idfMonitoringSession,
                   null,
                   a.idfsMonitoringSessionStatus,
                   b.idfsMonitoringSessionStatus
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.idfsMonitoringSessionStatus <> b.idfsMonitoringSessionStatus)
                  or (
                         a.idfsMonitoringSessionStatus is not null
                         and b.idfsMonitoringSessionStatus is null
                     )
                  or (
                         a.idfsMonitoringSessionStatus is null
                         and b.idfsMonitoringSessionStatus is not null
                     )

            --idfPersonEnteredBy
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707110000000,
                   a.idfMonitoringSession,
                   null,
                   a.idfPersonEnteredBy,
                   b.idfPersonEnteredBy
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.idfPersonEnteredBy <> b.idfPersonEnteredBy)
                  or (
                         a.idfPersonEnteredBy is not null
                         and b.idfPersonEnteredBy is null
                     )
                  or (
                         a.idfPersonEnteredBy is null
                         and b.idfPersonEnteredBy is not null
                     )

            --idfCampaign
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707120000000,
                   a.idfMonitoringSession,
                   null,
                   a.idfCampaign,
                   b.idfCampaign
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.idfCampaign <> b.idfCampaign)
                  or (
                         a.idfCampaign is not null
                         and b.idfCampaign is null
                     )
                  or (
                         a.idfCampaign is null
                         and b.idfCampaign is not null
                     )

            --datEnteredDate
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707130000000,
                   a.idfMonitoringSession,
                   null,
                   a.datEnteredDate,
                   b.datEnteredDate
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.datEnteredDate <> b.datEnteredDate)
                  or (
                         a.datEnteredDate is not null
                         and b.datEnteredDate is null
                     )
                  or (
                         a.datEnteredDate is null
                         and b.datEnteredDate is not null
                     )

            --datStartDate
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   4578670000000,
                   a.idfMonitoringSession,
                   null,
                   a.datStartDate,
                   b.datStartDate
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.datStartDate <> b.datStartDate)
                  or (
                         a.datStartDate is not null
                         and b.datStartDate is null
                     )
                  or (
                         a.datStartDate is null
                         and b.datStartDate is not null
                     )

            --datEndDate
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   4578680000000,
                   a.idfMonitoringSession,
                   null,
                   a.datEndDate,
                   b.datEndDate
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.datEndDate <> b.datEndDate)
                  or (
                         a.datEndDate is not null
                         and b.datEndDate is null
                     )
                  or (
                         a.datEndDate is null
                         and b.datEndDate is not null
                     )


            INSERT INTO @tlbCampaign_BeforeEdit
            (
                idfCampaign,
                strCampaignName,
                idfsCampaignType,
                datCampaignDateStart,
                datCampaignDateEnd
            )
            SELECT idfCampaign,
                   strCampaignName,
                   idfsCampaignType,
                   datCampaignDateStart,
                   datCampaignDateEnd
            FROM tlbCampaign
            WHERE idfCampaign = @CampaignID;

            UPDATE dbo.tlbCampaign
            SET strCampaignName = @CampaignName,
                idfsCampaignType = @CampaignTypeID,
                datCampaignDateStart = @CampaignStartDate,
                datCampaignDateEnd = @CampaignEndDate
            WHERE idfCampaign = @CampaignID

            INSERT INTO @tlbCampaign_AfterEdit
            (
                idfCampaign,
                strCampaignName,
                idfsCampaignType,
                datCampaignDateStart,
                datCampaignDateEnd
            )
            SELECT idfCampaign,
                   strCampaignName,
                   idfsCampaignType,
                   datCampaignDateStart,
                   datCampaignDateEnd
            FROM tlbCampaign
            WHERE idfCampaign = @CampaignID;

            --strCampaignName
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706970000000,
                   a.idfCampaign,
                   null,
                   a.strCampaignName,
                   b.strCampaignName
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.strCampaignName <> b.strCampaignName)
                  or (
                         a.strCampaignName is not null
                         and b.strCampaignName is null
                     )
                  or (
                         a.strCampaignName is null
                         and b.strCampaignName is not null
                     )

            --idfsCampaignType
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706920000000,
                   a.idfCampaign,
                   null,
                   a.idfsCampaignType,
                   b.idfsCampaignType
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.idfsCampaignType <> b.idfsCampaignType)
                  or (
                         a.idfsCampaignType is not null
                         and b.idfsCampaignType is null
                     )
                  or (
                         a.idfsCampaignType is null
                         and b.idfsCampaignType is not null
                     )

            --datCampaignDateStart
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706940000000,
                   a.idfCampaign,
                   null,
                   a.datCampaignDateStart,
                   b.datCampaignDateStart
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.datCampaignDateStart <> b.datCampaignDateStart)
                  or (
                         a.datCampaignDateStart is not null
                         and b.datCampaignDateStart is null
                     )
                  or (
                         a.datCampaignDateStart is null
                         and b.datCampaignDateStart is not null
                     )

            --datCampaignDateEnd
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706950000000,
                   a.idfCampaign,
                   null,
                   a.datCampaignDateEnd,
                   b.datCampaignDateEnd
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.datCampaignDateEnd <> b.datCampaignDateEnd)
                  or (
                         a.datCampaignDateEnd is not null
                         and b.datCampaignDateEnd is null
                     )
                  or (
                         a.datCampaignDateEnd is null
                         and b.datCampaignDateEnd is not null
                     )


            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;

        END
        ELSE
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSession',
                                              @MonitoringSessionID OUTPUT;

            EXECUTE dbo.USP_GBL_NextNumber_GET 'Human Active Surveillance Session',
                                               @EIDSSSessionID OUTPUT,
                                               NULL;

            INSERT INTO dbo.tlbMonitoringSession
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                strMonitoringSessionID,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                intRowStatus,
                AuditCreateUser
            )
            VALUES
            (@MonitoringSessionID,
             @MonitoringSessionStatusTypeID,
             @idfsLocation,
             @EnteredByPersonID,
             @CampaignID,
             @SiteID,
             GETDATE(),
             @EIDSSSessionID,
             @StartDate,
             @EndDate,
             @SessionCategoryTypeID,
             0  ,
             @AuditUserName
            );

            --Data Audit--

            -- tauDataAuditEvent Event Type - Create 
            set @idfsDataAuditEventType = 10016001;

            -- insert record into tauDataAuditEvent - 
            INSERT INTO @SuppressSelect
            EXEC USSP_GBL_DataAuditEvent_GET @idfUserId,
                                             @idfSiteId,
                                             @idfsDataAuditEventType,
                                             @idfsObjectType,
                                             @MonitoringSessionID,
                                             @idfObjectTable_tlbMonitoringSession,
                                             @idfDataAuditEvent OUTPUT

            INSERT INTO tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject
            )
            VALUES
            (@idfDataAuditEvent, @idfObjectTable_tlbMonitoringSession, @MonitoringSessionID)

        --Data Audit--

        END

        WHILE EXISTS (SELECT * FROM @DiseaseCombinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToDiseaseID,
                @DiseaseID = DiseaseID,
                @SampleTypeID = SampleTypeID,
                @OrderNumber = OrderNumber,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @DiseaseCombinationsTemp;

            SET @idfMonitoringSessionToDiagnosis = @RowID

            INSERT INTO @SuppressSelect
            EXECUTE USSP_HAS_MonitoringSessionToDiagnosis_SET @LanguageID,
                                                              @idfDataAuditEvent,
                                                              @idfMonitoringSessionToDiagnosis OUTPUT,
                                                              @MonitoringSessionID,
                                                              @DiseaseID,
                                                              @OrderNumber,
                                                              NULL,
                                                              @SampleTypeID,
                                                              @Comments,
                                                              @AuditUserName,
                                                              @RowAction;

            DELETE FROM @DiseaseCombinationsTemp
            WHERE MonitoringSessionToDiseaseID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SampleTypeCombinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToSampleTypeID,
                @MonitoringSessionToSampleTypeID = MonitoringSessionToSampleTypeID,
                @OrderNumber = OrderNumber,
                @RowStatus = RowStatus,
                @SampleTypeID = SampleTypeID,
                @RowAction = RowAction
            FROM @SampleTypeCombinationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_SET @LanguageID,
                                                                       @idfDataAuditEvent,
                                                                       @MonitoringSessionToSampleTypeID,
                                                                       @MonitoringSessionID,
                                                                       @OrderNumber,
                                                                       @RowStatus,
                                                                       @SampleTypeID,
                                                                       @RowAction,
                                                                       @AuditUserName;

            DELETE FROM @SampleTypeCombinationsTemp
            WHERE MonitoringSessionToSampleTypeID = @RowID;
        END;


        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CAST(CollectionDate AS DATETIME),
                @SentDate = CAST(SentDate AS DATETIME),
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @Comments = Comments,
                @SiteID = SiteID,
                --,@CurrentSiteID = CurrentSiteID
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @DiseaseID = DiseaseID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @HumanID = HumanID,
                @HumanMasterID = HumanMasterID,
                @RowAction = RowAction
            FROM @SamplesTemp;

            SET @EIDSSLocalOrFieldSampleID
                = REPLACE(@EIDSSLocalOrFieldSampleID, @Translated_New + '-', @EIDSSSessionID + '-');

            IF @RowAction = 'I'
            BEGIN
                DECLARE @idfNewHuman BIGINT = NULL;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_HUM_COPY_HUMAN_SET @HumanMasterID,
                                                    @idfDataAuditEvent,
                                                    @AuditUserName,
                                                    @idfNewHuman OUTPUT,
                                                    @ReturnCode OUTPUT,
                                                    @ReturnMessage OUTPUT;

                SELECT @HumanID = @idfNewHuman;
            END;

            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName = @AuditUserName,
                                             @DataAuditEventID = @idfDataAuditEvent,
                                             @EIDSSObjectID = @EIDSSSessionID,
                                             @SampleID = @SampleID OUTPUT,
                                             @SampleTypeID = @SampleTypeID,
                                             @RootSampleID = NULL,
                                             @ParentSampleID = NULL,
                                             @HumanID = @HumanID,
                                             @SpeciesID = NULL,
                                             @AnimalID = NULL,
                                             @VectorID = NULL,
                                             @MonitoringSessionID = @MonitoringSessionID,
                                             @VectorSessionID = NULL,
                                             @HumanDiseaseReportID = NULL,
                                             @VeterinaryDiseaseReportID = NULL,
                                             @CollectionDate = @CollectionDate,
                                             @CollectedByPersonID = @CollectedByPersonID,
                                             @CollectedByOrganizationID = @CollectedByOrganizationID,
                                             @SentDate = @SentDate,
                                             @SentToOrganizationID = @SentToOrganizationID,
                                             @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                             @SiteID = @SiteID,
                                             @EnteredDate = @DateEntered,
                                             @ReadOnlyIndicator = @ReadOnlyIndicator,
                                             @SampleStatusTypeID = @SampleStatusTypeID,
                                             @Comments = @Comments,
                                             @CurrentSiteID = NULL,
                                             @DiseaseID = @DiseaseID,
                                             @BirdStatusTypeID = NULL,
                                             @RowStatus = @RowStatus,
                                             @RowAction = @RowAction;

            UPDATE @SamplesToDiseasesTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;

            DELETE FROM dbo.tlbMonitoringSessionToMaterial
            WHERE idfMaterial = @SampleID;
        END;

        WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToMaterialID,
                @MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @DiseaseID = DiseaseID,
                @RowAction = RowAction,
                @RowStatus = RowStatus
            FROM @SamplesToDiseasesTemp;

            --insert or update the diseases for this sample
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                      @idfDataAuditEvent,
                                                      @MonitoringSessionToMaterialID,
                                                      @MonitoringSessionID,
                                                      @SampleID,
                                                      @DiseaseID,
                                                      @SampleTypeID,
                                                      @RowStatus,
                                                      @RowAction;

            DELETE FROM @SamplesToDiseasesTemp
            WHERE MonitoringSessionToMaterialID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @TestsTemp;

            SELECT @idfHumanCase_Test = idfHumanCase
            FROM tlbTesting
            WHERE idfTesting = @TestID

            SET @EIDSSLocalOrFieldSampleID
                = REPLACE(@EIDSSLocalOrFieldSampleID, @Translated_New + '-', @EIDSSSessionID + '-');

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --human monitoring session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 1
            BEGIN
                SET @RowStatus = 0;
                SET @TestMonitoringSessionID = NULL;
            END
            ELSE
            BEGIN
                SET @TestMonitoringSessionID = @MonitoringSessionID;
            END;


            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET @TestID OUTPUT,
                                           @TestNameTypeID,
                                           @TestCategoryTypeID,
                                           @TestResultTypeID,
                                           @TestStatusTypeID,
                                           @DiseaseID,
                                           @SampleID,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @Comments,
                                           @RowStatus,
                                           @StartedDate,
                                           @ResultDate,
                                           @TestedByOrganizationID,
                                           @TestedByPersonID,
                                           @ResultEnteredByOrganizationID,
                                           @ResultEnteredByPersonID,
                                           @ValidatedByOrganizationID,
                                           @ValidatedByPersonID,
                                           @ReadOnlyIndicator,
                                           @NonLaboratoryTestIndicator,
                                           @ExternalTestIndicator,
                                           @PerformedByOrganizationID,
                                           @ReceivedDate,
                                           @ContactPersonName,
                                           @TestMonitoringSessionID,
                                           NULL,
                                           @idfHumanCase_Test,
                                           NULL,
                                           @AuditUserName,
                                           @idfDataAuditEvent,
                                           @EIDSSSessionID,
                                           @RowAction;

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @ActionsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionActionID,
                @MonitoringSessionActionID = MonitoringSessionActionID,
                @EnteredByPersonID = EnteredByPersonID,
                @ActionTypeID = ActionTypeID,
                @ActionStatusTypeID = ActionStatusTypeID,
                @ActionDate = ActionDate,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActionsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MONITORING_SESSION_ACTION_SET @LanguageID,
                                                               @idfDataAuditEvent,
                                                               @MonitoringSessionActionID OUTPUT,
                                                               @MonitoringSessionID,
                                                               @EnteredByPersonID,
                                                               @ActionTypeID,
                                                               @ActionStatusTypeID,
                                                               @ActionDate,
                                                               @Comments,
                                                               @RowStatus,
                                                               @RowAction,
                                                               @AuditUserName

            DELETE FROM @ActionsTemp
            WHERE MonitoringSessionActionID = @RowID;
        END;


        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        DECLARE @HumanDiseaseReportID BIGINT = NULL;
        DECLARE @EIDSSReportID NVARCHAR(200) = NULL;

        IF (@CreateDiseaseReportHumanID IS NOT NULL)
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbHumanCase',
                                              @HumanDiseaseReportID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Human Disease Report',
                                               @EIDSSReportID OUTPUT,
                                               NULL;

            DECLARE @PersonID NVARCHAR(50) = NULL;
            DECLARE @Name NVARCHAR(200) = NULL;

            INSERT INTO dbo.tlbHumanCase
            (
                idfHumanCase,
                strCaseID,
                idfHuman,
                idfParentMonitoringSession,
                idfsFinalDiagnosis,
                idfsSite,
                idfsCaseProgressStatus,
                idfsInitialCaseStatus,
                idfsFinalCaseStatus,
                DiseaseReportTypeID,
                idfPersonEnteredBy,
                idfsYNSpecimenCollected,
                idfsYNTestsConducted,
                datEnteredDate
            )
            VALUES
            (   @HumanDiseaseReportID,
                @EIDSSReportID,
                @CreateDiseaseReportHumanID,
                @MonitoringSessionID,
                NULL, --@DiseaseID
                @SiteID,
                10109001,
                NULL,
                NULL,
                4578940000001,
                @EnteredByPersonID,
                10100001,
                10100001,
                GETDATE()
            );

            UPDATE dbo.tlbMaterial
            SET idfHumanCase = @HumanDiseaseReportID
            WHERE idfMonitoringSession = @MonitoringSessionID
                  AND idfHuman = @CreateDiseaseReportHumanID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH

    SELECT @ReturnCode AS ReturnCode,
           @ReturnMessage AS ReturnMessage,
           @MonitoringSessionID AS MonitoringSessionID,
           @EIDSSSessionID AS EIDSSSessionID,
           @HumanDiseaseReportID AS HumanDiseaseReportID;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_DISEASE_SET
--
-- Description:	Insert or update a human disease report record.
--          
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name                  Date       Change Detail
-- --------------------- ---------- --------------------------------------------------------------
-- JWJ	                 04/03/2018 Added new param to end for ReportStatus
-- Harold Pryor          08/01/2018 Added new @DiseaseReportTypeID input paramenter
-- Harold Pryor          11/30/2018 Added new @blnClinicalDiagBasis, @blnLabDiagBasis, 
--                                  @blnEpiDiagBasis input parameters for Basis of Diagnosis and 
--                                  new @DateofClassification input parameter 
-- Harold Pryor          12/05/2018	Added new @StartDateofInvestigation input parameter. Corrected 
--                                  @idfSoughtCareFacility input parameter spelling.	
-- Harold Pryor          12/06/2018	Removed updating Primary Key column for tlbHumanCase update.
-- Harold Pryor          12/13/2018	Removed @VaccinationName and @VaccinationDate input 
--                                  paramenters
-- Harold Pryor          12/21/2018	Changed @Sample as tlbHdrMaterialGetListSPType and @Tests as 
--                                  tlbHdrTestGetListSPType parameters and replaced as NVARCHAR
-- Harold Pryor          12/27/2018	Changed @Sample parameter to @SampleParameters and changed 
--                                  parameter @Tests to @TestsParameters. 
-- Lamont Mitchell       01/02/2018	Changed @idfHumanCase from OutputParameter and added to 
--                                  select statement
-- Harold Pryor          01/04/2018	Added new input paramters @AntiviralTherapiesParameters and 
--                                  @VaccinationsParameters	
-- Lamont Mitchell       01/11/2019	Suppressed Result Sets in ALL STORED PROCS
-- Harold Pryor          01/21/2019	Added @ContactsParameters input parameter 
-- Harold Pryor          01/27/2019	Added @strSummaryNotes input parameter
-- Harold Pryor          02/10/2019	Added @idfEpiObservation and @idfCSObservation	input 
--                                  paremeters for Flex Forms integration. 
-- Harold Pryor          03/22/2019	Updated to include @idfHuman and @DiseaseID to call to 
--                                  USSP_HUMAN_DISEASE_SAMPLES_SET stored proc 
-- Harold Pryor          04/08/2019	Updated to include @idfHumanCaseRelatedTo imput parameter for 
--                                  Changed Diagnosis Human Disease Report functionality
-- Harold Pryor          04/09/2019	For Smart key generation reference data change for V7 updated 
--                                  call to USP_GBL_NextNumber using a V6 strDocumentName ('Human 
--                                  Case').  Input parameter and replaced with V7 trDocumentName 
--                                  ('Human Disease Report') input parameter value instead.  
-- Harold Pryor          04/28/2019 Updated to properly save contacts 
-- Harold Pryor          05/28/2019 Updated to include paramter @idfHuman in call to 
--                                  USSP_HUMAN_DISEASE_CONTACT_SET
-- Harold Pryor          06/04/2019 Updated to include @strEpidemiologistsName input parameter
-- Harold Pryor          06/05/2019 Updated to include @idfsNotCollectedReason input parameter 
-- Harold Pryor          06/18/2019 Updated to include @idfsGeoLocationType input parameter
-- Harold Pryor          06/19/2019 Updated to include @intElevation and @strForeignAddress input 
--                                  parameters
-- Harold Pryor          06/19/2019 Updated to include @intLocationDirection input parameter
-- Lamont Mitchell       04/21/2020	UPDATEd tlbGeolocation Output Parameter
-- Lamont Mitchell       06/07/2020	Modified adding Connected Human disease Report
-- Lamont Mitchell       08/04/2020 Added property @idfInvestigatedByPerson and modified insert 
--                                  and update statments to include parameter
-- Lamont Mitchell       08/04/2000	Added SITE ID Property
-- Lamont Mitchell       11/02/2020	Added strNotCollectedReason to property list and add and 
--                                  update
-- Mandar Kulkani        01/18/2022	Removed two input parameters for relative latitude and 
--                                  longitude
-- Minal Shah            01/24/2022	Added strLocalIdentifier to the request
-- Minal Shah            04/04/2022	Added Site Alert Notifications
-- Doug Albanese         04/19/2022	Added tag to denote refactoring to Location Hierarchy
-- Doug Albanese         05/24/2022	Added idfParentMonitoringSession to connect a human active 
--                                  surveillance session to a disease report
-- Mark Wilson           06/02/2022	Set @AuditUser = ISNULL(@AuditUser, '') to make sure no nulls
-- Mark Wilson           06/08/2022	Defined all parameters for USSP_GBL_SAMPLE_SET
-- Stephen Long          07/06/2022 Updates for site alerts to call new stored procedure.
-- Doug Albanese         07/18/2022	Add @ConnectedTestId, so that HDR can make the association, 
--                                  after obtaining the new idfHumanCase value.
-- Doug Albanese         09/12/2022 Linked up the "Monitoring Session ID" to Samples and Tests
-- Doug Albanese         10/17/2022	Corrected the "Connected Test" to update all records for the 
--                                  existing monitoring session that have the same person and 
--                                  disease combination
-- Leo Tracchia          10/21/2022 Fix for properly deleting tests for human disease report 
--                                  DevOps defect 5006
-- Stephen Long          11/17/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long          11/28/2022 Added data audit for vaccinations, contacts and geolocation.
-- Stephen Long          11/29/2022 Added data audit for disease report relationship and flex 
--                                  forms.
-- Stephen Long          12/01/2022 Added EIDSS object ID; smart key that represents the parent 
--                                  object.
-- Stephen Long          12/09/2022 Changed object type ID reference for human disease report, 
--                                  and added EIDSS object ID to samples, tests and test 
--                                  interpretations calls.
-- Stephen Long          02/03/2023 Changed to data audit call with strMainObject.
--
-- Testing Code:
-- EXEC USP_HUM_HUMAN_DISEASE_SET  NULL,  27, NULL,  '(new)',784050000000
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_DISEASE_SET]
(
    @LanguageID NVARCHAR(50),
    @idfHumanCase BIGINT = NULL,                          -- tlbHumanCase.idfHumanCase Primary Key
    @idfHumanCaseRelatedTo BIGINT = NULL,
    @idfHuman BIGINT = NULL,                              -- tlbHumanCase.idfHuman
    @idfHumanActual BIGINT,                               -- tlbHumanActual.idfHumanActual
    @strHumanCaseId NVARCHAR(200) = '(new)',
    @idfsFinalDiagnosis BIGINT,                           -- tlbhumancase.idfsTentativeDiagnosis/idfsFinalDiagnosis
    @datDateOfDiagnosis DATETIME = NULL,                  --tlbHumanCase.datTentativeDiagnosisDate/datFinalDiagnosisDate
    @datNotificationDate DATETIME = NULL,                 --tlbHumanCase.DatNotIFicationDate
    @idfsFinalState BIGINT = NULL,                        --tlbHumanCase.idfsFinalState
    @strLocalIdentifier NVARCHAR(200) = NULL,
    @idfSentByOffice BIGINT = NULL,                       -- tlbHumanCase.idfSentByOffice
    @strSentByFirstName NVARCHAR(200) = NULL,             --tlbHumanCase.strSentByFirstName
    @strSentByPatronymicName NVARCHAR(200) = NULL,        --tlbHumancase.strSentByPatronymicName
    @strSentByLastName NVARCHAR(200) = NULL,              --tlbHumanCase.strSentByLastName
    @idfSentByPerson BIGINT = NULL,                       --tlbHumcanCase.idfSentByPerson
    @idfReceivedByOffice BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByOffice
    @strReceivedByFirstName NVARCHAR(200) = NULL,         --tlbHumanCase.strReceivedByFirstName
    @strReceivedByPatronymicName NVARCHAR(200) = NULL,    --tlbHumanCase.strReceivedByPatronymicName
    @strReceivedByLastName NVARCHAR(200) = NULL,          --tlbHuanCase.strReceivedByLastName
    @idfReceivedByPerson BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByPerson
    @idfsHospitalizationStatus BIGINT = NULL,             -- tlbHumanCase.idfsHospitalizationStatus
    @idfHospital BIGINT = NULL,                           -- tlbHumanCase.idfHospital
    @strCurrentLocation NVARCHAR(200) = NULL,             -- tlbHumanCase.strCurrentLocation
    @datOnSetDate DATETIME = NULL,                        -- tlbHumanCase.datOnSetDate
    @idfsInitialCaseStatus BIGINT = NULL,                 -- tlbHumanCase.idfsInitialCaseStatus
    @idfsYNPreviouslySoughtCare BIGINT = NULL,            --idfsYNPreviouslySoughtCare
    @datFirstSoughtCareDate DATETIME = NULL,              --tlbHumanCase.datFirstSoughtCareDate
    @idfSoughtCareFacility BIGINT = NULL,                 --tlbHumanCase.idfSoughtCareFacility
    @idfsNonNotIFiableDiagnosis BIGINT = NULL,            --tlbHumanCase.idfsNonNotIFiableDiagnosis
    @idfsYNHospitalization BIGINT = NULL,                 -- tlbHumanCase.idfsYNHospitalization
    @datHospitalizationDate DATETIME = NULL,              --tlbHumanCase.datHospitalizationDate 
    @datDischargeDate DATETIME = NULL,                    -- tlbHumanCase.datDischargeDate
    @strHospitalName NVARCHAR(200) = NULL,                --tlbHumanCase.strHospitalizationPlace  
    @idfsYNAntimicrobialTherapy BIGINT = NULL,            --  tlbHumanCase.idfsYNAntimicrobialTherapy 
    @strAntibioticName NVARCHAR(200) = NULL,              -- tlbHumanCase.strAntimicrobialTherapyName
    @strDosage NVARCHAR(200) = NULL,                      --tlbHumanCase.strDosage
    @datFirstAdministeredDate DATETIME = NULL,            -- tlbHumanCase.datFirstAdministeredDate
    @strAntibioticComments NVARCHAR(MAX) = NULL,          -- tlbHumanCase.strClinicalNotes , or strSummaryNotes
    @idfsYNSpecIFicVaccinationAdministered BIGINT = NULL, --  tlbHumanCase.idfsYNSpecIFicVaccinationAdministered
    @idfInvestigatedByOffice BIGINT = NULL,               -- tlbHumanCase.idfInvestigatedByOffice 
    @StartDateofInvestigation DATETIME = NULL,            -- tlbHumanCase.datInvestigationStartDate
    @idfsYNRelatedToOutbreak BIGINT = NULL,               -- tlbHumanCase.idfsYNRelatedToOutbreak
    @idfOutbreak BIGINT = NULL,                           --idfOutbreak  
    @idfsYNExposureLocationKnown BIGINT = NULL,           --tlbHumanCase.idfsYNExposureLocationKnown
    @idfPointGeoLocation BIGINT = NULL,                   --tlbHumanCase.idfPointGeoLocation
    @datExposureDate DATETIME = NULL,                     -- tlbHumanCase.datExposureDate 
    @idfsGeoLocationType BIGINT = NULL,                   --tlbGeolocation.idfsGeoLocationType
    @strLocationDescription NVARCHAR(MAX) = NULL,         --tlbGeolocation.Description
    @idfsLocationCountry BIGINT = NULL,                   --tlbGeolocation.idfsCountry 
    @idfsLocationRegion BIGINT = NULL,                    --tlbGeolocation.idfsRegion
    @idfsLocationRayon BIGINT = NULL,                     --tlbGeolocation.idfsRayon
    @idfsLocationSettlement BIGINT = NULL,                --tlbGeolocation.idfsSettlement
    @intLocationLatitude FLOAT = NULL,                    --tlbGeolocation.Latittude
    @intLocationLongitude FLOAT = NULL,                   --tlbGeolocation.Longitude
    @intElevation BIGINT = NULL,                          --GISSettlement.intElevation
    @idfsLocationGroundType BIGINT = NULL,                --tlbGeolocation.GroundType
    @intLocationDistance FLOAT = NULL,                    --tlbGeolocation.Distance
    @intLocationDirection FLOAT = NULL,                   --tlbGeolocation.Alignment	
    @strForeignAddress NVARCHAR(MAX) = NULL,              --tlbGeolocation.strForeignAddress 
    @strNote NVARCHAR(MAX) = NULL,                        --tlbhumancase.strNote
    @idfsFinalCaseStatus BIGINT = NULL,                   --tlbHuanCase.idfsFinalCaseStatus 
    @idfsOutcome BIGINT = NULL,                           -- --tlbHumanCase.idfsOutcome 
    @datDateofDeath DATETIME = NULL,                      -- tlbHumanCase.datDateOfDeath 
    @idfsCaseProgressStatus BIGINT = 10109001,            --	tlbHumanCase.reportStatus, default = In-process
    @idfPersonEnteredBy BIGINT = NULL,
    @strClinicalNotes NVARCHAR(2000) = NULL,
    @idfsYNSpecimenCollected BIGINT = NULL,
    @idfsYNTestsConducted BIGINT = NULL,
    @DiseaseReportTypeID BIGINT = NULL,
    @blnClinicalDiagBasis BIT = NULL,
    @blnLabDiagBasis BIT = NULL,
    @blnEpiDiagBasis BIT = NULL,
    @DateofClassification DATETIME = NULL,
    @strSummaryNotes NVARCHAR(MAX) = NULL,
    @idfEpiObservation BIGINT = NULL,
    @idfCSObservation BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @strEpidemiologistsName NVARCHAR(MAX) = NULL,
    @idfsNotCollectedReason BIGINT = NULL,
    @strNotCollectedReason NVARCHAR(200) = NULL,
    @SamplesParameters NVARCHAR(MAX) = NULL,
    @TestsParameters NVARCHAR(MAX) = NULL,
    @TestsInterpretationParameters NVARCHAR(MAX) = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @VaccinationsParameters NVARCHAR(MAX) = NULL,
    @ContactsParameters NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @idfsHumanAgeType BIGINT = NULL,
    @intPatientAge INT = NULL,
    @datCompletionPaperFormDate DATETIME = NULL,
    @RowStatus INT,
    @idfsSite BIGINT = NULL,
    @AuditUser NVARCHAR(100) = '',
    @idfParentMonitoringSession BIGINT = NULL,
    @ConnectedTestId BIGINT = NULL
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @RowID BIGINT = NULL,
        @RowAction NCHAR = NULL,
        @OrderNumber INT,
        @SampleID BIGINT,
        @SampleTypeID BIGINT = NULL,
        @HumanID BIGINT,
        @HumanMasterID BIGINT = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @CollectionDate DATETIME = NULL,
        @SentDate DATETIME = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @TestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @BatchTestID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ResultDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @TestHumanCaseID BIGINT = NULL,
        @TestInterpretationID BIGINT,
        @InterpretedStatusTypeID BIGINT = NULL,
        @InterpretedByOrganizationID BIGINT = NULL,
        @InterpretedByPersonID BIGINT = NULL,
        @TestingInterpretations BIGINT,
        @ValidatedStatusIndicator BIT = NULL,
        @ReportSessionCreatedIndicator BIT = NULL,
        @ValidatedComment NVARCHAR(200) = NULL,
        @InterpretedComment NVARCHAR(200) = NULL,
        @ValidatedDate DATETIME = NULL,
        @InterpretedDate DATETIME = NULL,
                                                                              -- Site alerts/notifications
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
                                                                              -- End site alerts/notifications
        @MonitoringSessionActionID BIGINT,
        @ActionTypeID BIGINT,
        @ActionStatusTypeID BIGINT,
        @ActionDate DATETIME = NULL,
        @Comments NVARCHAR(500) = NULL,
        @DiseaseID BIGINT,
        @idfMonitoringSessionToDiagnosis BIGINT,
        @DateEntered DATETIME = GETDATE(),
        @idfMaterial BIGINT,
                                                                              -- Data audit
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectTypeID BIGINT = 10017078,                                      -- Human disease report
        @ObjectID BIGINT = @idfHumanCase,
        @ObjectTableID BIGINT = 75610000000,                                  -- tlbHumanCase
        @ObjectHumanDiseaseReportRelationshipTableID BIGINT = 53577790000000, -- HumanDiseaseReportRelationship
        @ObjectObservationTableID BIGINT = 75640000000;                       -- tlbObservation
-- End data audit
DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NULL,
    SampleStatusTypeID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    CollectedByOrganizationID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    SentDate DATETIME2 NULL,
    SentToOrganizationID BIGINT NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    Comments NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    CurrentSiteID BIGINT NULL,
    DiseaseID BIGINT NULL,
    ReadOnlyIndicator BIT NULL,
    HumanID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);
DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Comments NVARCHAR NULL,
    StartedDate DATETIME2 NULL,
    ResultDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);
DECLARE @TestsInterpretationParametersTemp TABLE
(
    TestInterpretationID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    InterpretedStatusTypeID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    InterpretedByOrganizationID BIGINT NULL,
    InterpretedByPersonID BIGINT NULL,
    TestID BIGINT NOT NULL,
    ValidatedStatusIndicator BIT NULL,
    ReportSessionCreatedIndicator BIT NULL,
    ValidatedComment NVARCHAR(200) NULL,
    InterpretedComment NVARCHAR(200) NULL,
    ValidatedDate DATETIME NULL,
    InterpretedDate DATETIME NULL,
    ReadOnlyIndicator BIT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @HumanDiseaseReportBeforeEdit TABLE
(
    HumanDiseaseReportID BIGINT,
    HumanID BIGINT,
    FinalStateTypeID BIGINT,
    HospitalizationStatusTypeID BIGINT,
    HumanAgeTypeID BIGINT,
    AntimicrobialTherapyTypeID BIGINT,
    HospitalizationTypeID BIGINT,
    SpecimenCollectedTypeID BIGINT,
    RelatedToOutbreakTypeID BIGINT,
    OutcomeID BIGINT,
    TentativeDiagnosisID BIGINT,
    FinalDiagnosisID BIGINT,
    InitialCaseStatusTypeID BIGINT,
    FinalCaseStatusTypeID BIGINT,
    SentByOfficeID BIGINT,
    ReceivedByOfficeID BIGINT,
    InvestigatedByOfficeID BIGINT,
    PointGeoLocationID BIGINT,
    EpiObservationID BIGINT,
    CSObservationID BIGINT,
    DeduplicationResultCaseID BIGINT,
    NotificationDate DATETIME,
    CompletionPaperFormDate DATETIME,
    FirstSoughtCareDate DATETIME,
    ModificationDate DATETIME,
    HospitalizationDate DATETIME,
    FacilityLastVisitDate DATETIME,
    ExposureDate DATETIME,
    DischargeDate DATETIME,
    OnSetDate DATETIME,
    InvestigationStartDate DATETIME,
    TentativeDiagnosisDate DATETIME,
    FinalDiagnosisDate DATETIME,
    Note NVARCHAR(2000),
    CurrentLocation NVARCHAR(200),
    HospitalizationPlace NVARCHAR(200),
    LocalIdentifier NVARCHAR(200),
    SoughtCareFacility NVARCHAR(200),
    SentByFirstName NVARCHAR(200),
    SentByPatronymicName NVARCHAR(200),
    SentByLastName NVARCHAR(200),
    ReceivedByFirstName NVARCHAR(200),
    ReceivedByPatronymicName NVARCHAR(200),
    ReceivedByLastName NVARCHAR(200),
    EpidemiologistsName NVARCHAR(200),
    NotCollectedReason NVARCHAR(200),
    ClinicalDiagnosis NVARCHAR(200),
    ClinicalNotes NVARCHAR(2000),
    SummaryNotes NVARCHAR(2000),
    PatientAge INT,
    ClinicalDiagBasisIndicator BIT,
    LabDiagBasisIndicator BIT,
    EpiDiagBasisIndicator BIT,
    PersonEnteredByID BIGINT,
    SentByPersonID BIGINT,
    ReceivedByPersonID BIGINT,
    InvestigatedByPersonID BIGINT,
    TestsConductedTypeID BIGINT,
    SoughtCareFacilityID BIGINT,
    NonNotifiableDiagnosisID BIGINT,
    NotCollectedReasonTypeID BIGINT,
    OutbreakID BIGINT,
    EnteredDate DATETIME,
    CaseID NVARCHAR(200),
    CaseProgressStatusTypeID BIGINT,
    SampleNotes NVARCHAR(1000),
    OfflineCaseID UNIQUEIDENTIFIER,
    FinalCaseClassificationDate DATETIME,
    HospitalID BIGINT,
    RowStatus INT
);
DECLARE @HumanDiseaseReportAfterEdit TABLE
(
    HumanDiseaseReportID BIGINT,
    HumanID BIGINT,
    FinalStateTypeID BIGINT,
    HospitalizationStatusTypeID BIGINT,
    HumanAgeTypeID BIGINT,
    AntimicrobialTherapyTypeID BIGINT,
    HospitalizationTypeID BIGINT,
    SpecimenCollectedTypeID BIGINT,
    RelatedToOutbreakTypeID BIGINT,
    OutcomeID BIGINT,
    TentativeDiagnosisID BIGINT,
    FinalDiagnosisID BIGINT,
    InitialCaseStatusTypeID BIGINT,
    FinalCaseStatusTypeID BIGINT,
    SentByOfficeID BIGINT,
    ReceivedByOfficeID BIGINT,
    InvestigatedByOfficeID BIGINT,
    PointGeoLocationID BIGINT,
    EpiObservationID BIGINT,
    CSObservationID BIGINT,
    DeduplicationResultCaseID BIGINT,
    NotificationDate DATETIME,
    CompletionPaperFormDate DATETIME,
    FirstSoughtCareDate DATETIME,
    ModificationDate DATETIME,
    HospitalizationDate DATETIME,
    FacilityLastVisitDate DATETIME,
    ExposureDate DATETIME,
    DischargeDate DATETIME,
    OnSetDate DATETIME,
    InvestigationStartDate DATETIME,
    TentativeDiagnosisDate DATETIME,
    FinalDiagnosisDate DATETIME,
    Note NVARCHAR(2000),
    CurrentLocation NVARCHAR(200),
    HospitalizationPlace NVARCHAR(200),
    LocalIdentifier NVARCHAR(200),
    SoughtCareFacility NVARCHAR(200),
    SentByFirstName NVARCHAR(200),
    SentByPatronymicName NVARCHAR(200),
    SentByLastName NVARCHAR(200),
    ReceivedByFirstName NVARCHAR(200),
    ReceivedByPatronymicName NVARCHAR(200),
    ReceivedByLastName NVARCHAR(200),
    EpidemiologistsName NVARCHAR(200),
    NotCollectedReason NVARCHAR(200),
    ClinicalDiagnosis NVARCHAR(200),
    ClinicalNotes NVARCHAR(2000),
    SummaryNotes NVARCHAR(2000),
    PatientAge INT,
    ClinicalDiagBasisIndicator BIT,
    LabDiagBasisIndicator BIT,
    EpiDiagBasisIndicator BIT,
    PersonEnteredByID BIGINT,
    SentByPersonID BIGINT,
    ReceivedByPersonID BIGINT,
    InvestigatedByPersonID BIGINT,
    TestsConductedTypeID BIGINT,
    SoughtCareFacilityID BIGINT,
    NonNotifiableDiagnosisID BIGINT,
    NotCollectedReasonTypeID BIGINT,
    OutbreakID BIGINT,
    EnteredDate DATETIME,
    CaseID NVARCHAR(200),
    CaseProgressStatusTypeID BIGINT,
    SampleNotes NVARCHAR(1000),
    OfflineCaseID UNIQUEIDENTIFIER,
    FinalCaseClassificationDate DATETIME,
    HospitalID BIGINT,
    RowStatus INT
);
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @SuppressSelectHumanCase TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @SuppressSelectHuman TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200),
    idfHuman BIGINT
);
DECLARE @SuppressSelectGeoLocation TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200),
    GeoLocationID BIGINT
);
DECLARE @ActivityParameters TABLE
(
    ActivityParameterID BIGINT,
    AnswerValue SQL_VARIANT
);
BEGIN
    BEGIN TRY
        SET @AuditUser = ISNULL(@AuditUser, '');

        SET @SamplesParameters = REPLACE(@SamplesParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@SamplesParameters)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @TestsParameters = REPLACE(@TestsParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@TestsParameters)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @TestsInterpretationParametersTemp
        SELECT *
        FROM
            OPENJSON(@TestsInterpretationParameters)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        BEGIN TRANSACTION

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo;
        -- End data audit

        IF @idfHumanCase IS NULL
        BEGIN
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            -- Get next key value
            INSERT INTO @SuppressSelect
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbHumanCase', @idfHumanCase OUTPUT;

            -- Create a string ID for the disease report
            IF LEFT(ISNULL(@strHumanCaseID, '(new'), 4) = '(new'
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Human Disease Report',
                                                @strHumanCaseID OUTPUT,
                                                NULL; --N'AS Session'
            END
        END
        ELSE
        BEGIN
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type
        END

        -- Data audit
        INSERT INTO @SuppressSelect
        EXEC dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                              @AuditSiteID,
                                              @DataAuditEventTypeID,
                                              @ObjectTypeID,
                                              @idfHumanCase,
                                              @ObjectTableID,
                                              @strHumanCaseID,
                                              @DataAuditEventID OUTPUT;
        -- End data audit

        SET @DiseaseID = @idfsFinalDiagnosis;

        DECLARE @HumanDiseasereportRelnUID BIGINT,
                @COPYHUMANACTUALTOHUMAN_ReturnCode INT = 0;

        -- Create a human record from human actual if not already present
        IF @idfHumanActual IS NOT NULL -- AND @idfHumanCase IS  NULL
        BEGIN
            INSERT INTO @SuppressSelectHumanCase
            EXEC dbo.USSP_HUM_COPY_HUMAN_SET @idfHumanActual,
                                             @DataAuditEventID,
                                             @AuditUser,
                                             @idfHuman OUTPUT,
                                             @ReturnCode OUTPUT,
                                             @ReturnMessage OUTPUT;
            IF @ReturnCode <> 0
            BEGIN
                RETURN;
            END
        END

        --TODO: Needs to be refactored to use Hierarchy
        -- Insert or update geolocation record if any of the information is provided
        IF @idfsLocationGroundType IS NOT NULL
           OR @idfsGeoLocationType IS NOT NULL
           OR @idfsLocationCountry IS NOT NULL
           OR @idfsLocationRegion IS NOT NULL
           OR @idfsLocationRayon IS NOT NULL
           OR @idfsLocationSettlement IS NOT NULL
           OR @strLocationDescription IS NOT NULL
           OR @intLocationLatitude IS NOT NULL
           OR @intLocationLongitude IS NOT NULL
           OR @intLocationDistance IS NOT NULL
           OR @intLocationDirection IS NOT NULL
           OR @strForeignAddress IS NOT NULL
           OR @intElevation IS NOT NULL
        BEGIN
            -- Set geo location 
            IF @idfPointGeoLocation IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbGeoLocation',
                                               @idfPointGeoLocation OUTPUT;
            END

            BEGIN
                INSERT INTO @SuppressSelectGeoLocation
                EXEC dbo.USSP_HUM_DISEASE_GEOLOCATION_SET @idfPointGeoLocation,
                                                          @idfsLocationGroundType,
                                                          @idfsGeoLocationType,
                                                          @idfsLocationCountry,
                                                          @idfsLocationRegion,
                                                          @idfsLocationRayon,
                                                          @idfsLocationSettlement,
                                                          @strLocationDescription,
                                                          @intLocationLatitude,
                                                          @intLocationLongitude,
                                                          NULL,
                                                          @intLocationDistance,
                                                          @intLocationDirection,
                                                          @strForeignAddress,
                                                          1,
                                                          @intElevation,
                                                          @AuditUser,
                                                          @DataAuditEventID, 
                                                          @strHumanCaseID;
            END
        END

        IF NOT EXISTS
        (
            SELECT idfHumanCase
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND intRowStatus = 0
        )
        BEGIN
            INSERT INTO dbo.tlbHumanCase
            (
                idfHumanCase,
                idfHuman,
                strCaseId,
                idfsFinalDiagnosis,
                datTentativeDiagnosisDate,
                datNotIFicationDate,
                idfsFinalState,
                strLocalIdentifier,
                idfSentByOffice,
                strSentByFirstName,
                strSentByPatronymicName,
                strSentByLastName,
                idfSentByPerson,
                idfReceivedByOffice,
                strReceivedByFirstName,
                strReceivedByPatronymicName,
                strReceivedByLastName,
                idfReceivedByPerson,
                idfsHospitalizationStatus,
                idfHospital,
                strCurrentLocation,
                datOnSetDate,
                idfsInitialCaseStatus,
                idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate,
                idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization,
                datHospitalizationDate,
                datDischargeDate,
                strHospitalizationPlace,
                idfsYNAntimicrobialTherapy,
                strClinicalNotes,
                idfsYNSpecIFicVaccinationAdministered,
                idfInvestigatedByOffice,
                datInvestigationStartDate,
                idfsYNRelatedToOutbreak,
                idfOutbreak,
                idfPointGeoLocation,
                idfsYNExposureLocationKnown,
                datExposureDate,
                strNote,
                idfsFinalCaseStatus,
                idfsOutcome,
                intRowStatus,
                idfsCaseProgressStatus,
                datModificationDate,
                datEnteredDate,
                idfPersonEnteredBy,
                idfsYNSpecimenCollected,
                idfsYNTestsConducted,
                DiseaseReportTypeID,
                blnClinicalDiagBasis,
                blnLabDiagBasis,
                blnEpiDiagBasis,
                datFinalCaseClassificationDate,
                strsummarynotes,
                idfEpiObservation,
                idfCSObservation,
                idfInvestigatedByPerson,
                strEpidemiologistsName,
                idfsNotCollectedReason,
                strNotCollectedReason,
                idfsHumanAgeType,
                intPatientAge,
                datCompletionPaperFormDate,
                idfsSite,
                AuditCreateUser,
                idfParentMonitoringSession
            )
            VALUES
            (   @idfHumanCase,
                @idfHuman,
                @strHumanCaseId,
                @idfsFinalDiagnosis,
                @datDateOfDiagnosis,
                @datNotificationDate,
                @idfsFinalState,
                @strLocalIdentifier,
                @idfSentByOffice,
                @strSentByFirstName,
                @strSentByPatronymicName,
                @strSentByLastName,
                @idfSentByPerson,
                @idfReceivedByOffice,
                @strReceivedByFirstName,
                @strReceivedByPatronymicName,
                @strReceivedByLastName,
                @idfReceivedByPerson,
                @idfsHospitalizationStatus,
                @idfHospital,
                @strCurrentLocation,
                @datOnSetDate,
                @idfsInitialCaseStatus,
                @idfsYNPreviouslySoughtCare,
                @datFirstSoughtCareDate,
                @idfSoughtCareFacility,
                @idfsNonNotIFiableDiagnosis,
                @idfsYNHospitalization,
                @datHospitalizationDate,
                @datDischargeDate,
                @strHospitalName,
                @idfsYNAntimicrobialTherapy,
                @strClinicalNotes,
                @idfsYNSpecIFicVaccinationAdministered,
                @idfInvestigatedByOffice,
                @StartDateofInvestigation,
                @idfsYNRelatedToOutbreak,
                @idfOutbreak,
                @idfPointGeoLocation,
                @idfsYNExposureLocationKnown,
                @datExposureDate,
                @strNote,
                @idfsFinalCaseStatus,
                @idfsOutcome,
                0,
                @idfsCaseProgressStatus,
                GETDATE(), --datModificationDate	
                GETDATE(), --datEnteredDate		
                @idfPersonEnteredBy,
                @idfsYNSpecimenCollected,
                @idfsYNTestsConducted,
                @DiseaseReportTypeID,
                @blnClinicalDiagBasis,
                @blnLabDiagBasis,
                @blnEpiDiagBasis,
                @DateofClassification,
                @strSummaryNotes,
                @idfEpiObservation,
                @idfCSObservation,
                @idfInvestigatedByPerson,
                @strEpidemiologistsName,
                @idfsNotCollectedReason,
                @strNotCollectedReason,
                @idfsHumanAgeType,
                @intPatientAge,
                @datCompletionPaperFormDate,
                @idfsSite,
                @AuditUser,
                @idfParentMonitoringSession
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @idfHumanCase,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUser, 
             @strHumanCaseId
            );

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @strHumanCaseId
            WHERE idfObject = @idfCSObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @strHumanCaseId
            WHERE idfObject = @idfEpiObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID, 
                strObject = @strHumanCaseId
            WHERE idfObjectDetail = @idfCSObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @strHumanCaseId
            WHERE idfObjectDetail = @idfEpiObservation
                  AND idfDataAuditEvent IS NULL;
            -- End data audit

            DECLARE @RelatedToRoot BIGINT;

            IF @idfHumanCaseRelatedTo IS NOT NULL
            BEGIN
                -- Establish the root
                IF NOT EXISTS
                (
                    SELECT *
                    FROM dbo.HumanDiseaseReportRelationship
                    WHERE (HumanDiseaseReportID = @idfHumanCaseRelatedTo)
                          AND (RelatedToHumanDiseaseReportIdRoot IS NOT NULL)
                          AND (intRowStatus = 0)
                )
                BEGIN
                    SET @RelatedToRoot = @idfHumanCaseRelatedTo;
                END
                ELSE
                BEGIN
                    SELECT @RelatedToRoot = RelatedToHumanDiseaseReportIdRoot
                    FROM dbo.HumanDiseaseReportRelationship
                    WHERE (HumanDiseaseReportID = @idfHumanCaseRelatedTo)
                          AND (RelatedToHumanDiseaseReportIdRoot IS NOT NULL)
                          AND (intRowStatus = 0);
                END
                -- End establishing the root

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'HumanDiseaseReportRelationship',
                                               @HumanDiseasereportRelnUID OUTPUT;

                INSERT INTO dbo.HumanDiseaseReportRelationship
                (
                    HumanDiseasereportRelnUID,
                    HumanDiseaseReportID,
                    RelateToHumanDiseaseReportID,
                    RelatedToHumanDiseaseReportIdRoot,
                    RelationshipTypeID,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM,
                    rowguid
                )
                VALUES
                (   @HumanDiseasereportRelnUID,
                    @idfHumanCase,
                    @idfHumanCaseRelatedTo,
                    @RelatedToRoot,
                    10503001, -- Linked Copy Parent
                    0,
                    @AuditUser,
                    GETDATE(),
                    NEWID()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser, 
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectHumanDiseaseReportRelationshipTableID,
                 @HumanDiseasereportRelnUID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectHumanDiseaseReportRelationshipTableID AS NVARCHAR(300)) + '}]',
                 @AuditUser, 
                 @strHumanCaseId
                );
            -- End data audit
            END
        END
        ELSE
        BEGIN
            INSERT INTO @HumanDiseaseReportBeforeEdit
            (
                HumanDiseaseReportID,
                HumanID,
                FinalStateTypeID,
                HospitalizationStatusTypeID,
                HumanAgeTypeID,
                AntimicrobialTherapyTypeID,
                HospitalizationTypeID,
                SpecimenCollectedTypeID,
                RelatedToOutbreakTypeID,
                OutcomeID,
                TentativeDiagnosisID,
                FinalDiagnosisID,
                InitialCaseStatusTypeID,
                FinalCaseStatusTypeID,
                SentByOfficeID,
                ReceivedByOfficeID,
                InvestigatedByOfficeID,
                PointGeoLocationID,
                EpiObservationID,
                CSObservationID,
                DeduplicationResultCaseID,
                NotificationDate,
                CompletionPaperFormDate,
                FirstSoughtCareDate,
                ModificationDate,
                HospitalizationDate,
                FacilityLastVisitDate,
                ExposureDate,
                DischargeDate,
                OnSetDate,
                InvestigationStartDate,
                TentativeDiagnosisDate,
                FinalDiagnosisDate,
                Note,
                CurrentLocation,
                HospitalizationPlace,
                LocalIdentifier,
                SoughtCareFacility,
                SentByFirstName,
                SentByPatronymicName,
                SentByLastName,
                ReceivedByFirstName,
                ReceivedByPatronymicName,
                ReceivedByLastName,
                EpidemiologistsName,
                NotCollectedReason,
                ClinicalDiagnosis,
                ClinicalNotes,
                SummaryNotes,
                PatientAge,
                ClinicalDiagBasisIndicator,
                LabDiagBasisIndicator,
                EpiDiagBasisIndicator,
                PersonEnteredByID,
                SentByPersonID,
                ReceivedByPersonID,
                InvestigatedByPersonID,
                TestsConductedTypeID,
                SoughtCareFacilityID,
                NonNotifiableDiagnosisID,
                NotCollectedReasonTypeID,
                OutbreakID,
                EnteredDate,
                CaseID,
                CaseProgressStatusTypeID,
                SampleNotes,
                OfflineCaseID,
                FinalCaseClassificationDate,
                HospitalID,
                RowStatus
            )
            SELECT idfHumanCase,
                   idfHuman,
                   idfsFinalState,
                   idfsHospitalizationStatus,
                   idfsHumanAgeType,
                   idfsYNAntimicrobialTherapy,
                   idfsYNHospitalization,
                   idfsYNSpecimenCollected,
                   idfsYNRelatedToOutbreak,
                   idfsOutcome,
                   idfsTentativeDiagnosis,
                   idfsFinalDiagnosis,
                   idfsInitialCaseStatus,
                   idfsFinalCaseStatus,
                   idfSentByOffice,
                   idfReceivedByOffice,
                   idfInvestigatedByOffice,
                   idfPointGeoLocation,
                   idfEpiObservation,
                   idfCSObservation,
                   idfDeduplicationResultCase,
                   datNotificationDate,
                   datCompletionPaperFormDate,
                   datFirstSoughtCareDate,
                   datModificationDate,
                   datHospitalizationDate,
                   datFacilityLastVisit,
                   datExposureDate,
                   datDischargeDate,
                   datOnSetDate,
                   datInvestigationStartDate,
                   datTentativeDiagnosisDate,
                   datFinalDiagnosisDate,
                   strNote,
                   strCurrentLocation,
                   strHospitalizationPlace,
                   strLocalIdentifier,
                   strSoughtCareFacility,
                   strSentByFirstName,
                   strSentByPatronymicName,
                   strSentByLastName,
                   strReceivedByFirstName,
                   strReceivedByPatronymicName,
                   strReceivedByLastName,
                   strEpidemiologistsName,
                   strNotCollectedReason,
                   strClinicalDiagnosis,
                   strClinicalNotes,
                   strSummaryNotes,
                   intPatientAge,
                   blnClinicalDiagBasis,
                   blnLabDiagBasis,
                   blnEpiDiagBasis,
                   idfPersonEnteredBy,
                   idfSentByPerson,
                   idfReceivedByPerson,
                   idfInvestigatedByPerson,
                   idfsYNTestsConducted,
                   idfSoughtCareFacility,
                   idfsNonNotifiableDiagnosis,
                   idfsNotCollectedReason,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   strSampleNotes,
                   uidOfflineCaseID,
                   datFinalCaseClassificationDate,
                   idfHospital,
                   intRowStatus
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase;

            UPDATE dbo.tlbHumanCase
            SET strCaseId = @strHumanCaseId,
                idfsTentativeDiagnosis = @idfsFinalDiagnosis,
                idfsFinalDiagnosis = @idfsFinalDiagnosis,
                datTentativeDiagnosisDate = @datDateOfDiagnosis,
                datFinalDiagnosisDate = @datDateOfDiagnosis,
                datNotIFicationDate = @datNotificationDate,
                idfsFinalState = @idfsFinalState,
                idfSentByOffice = @idfSentByOffice,
                strSentByFirstName = @strSentByFirstName,
                strSentByPatronymicName = @strSentByPatronymicName,
                strSentByLastName = @strSentByLastName,
                idfSentByPerson = @idfSentByPerson,
                idfReceivedByOffice = @idfReceivedByOffice,
                strReceivedByFirstName = @strReceivedByFirstName,
                strReceivedByPatronymicName = @strReceivedByPatronymicName,
                strReceivedByLastName = @strReceivedByLastName,
                idfReceivedByPerson = @idfReceivedByPerson,
                strLocalIdentifier = @strLocalIdentifier,
                idfsHospitalizationStatus = @idfsHospitalizationStatus,
                idfHospital = @idfHospital,
                strCurrentLocation = @strCurrentLocation,
                datOnSetDate = @datOnSetDate,
                idfsInitialCaseStatus = @idfsInitialCaseStatus,
                idfsYNPreviouslySoughtCare = @idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate = @datFirstSoughtCareDate,
                idfSoughtCareFacility = @idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis = @idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization = @idfsYNHospitalization,
                datHospitalizationDate = @datHospitalizationDate,
                datDischargeDate = @datDischargeDate,
                strHospitalizationPlace = @strHospitalName,
                idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
                strClinicalNotes = @strClinicalNotes,
                idfsYNSpecIFicVaccinationAdministered = @idfsYNSpecIFicVaccinationAdministered,
                idfInvestigatedByOffice = @idfInvestigatedByOffice,
                datInvestigationStartDate = @StartDateofInvestigation,
                idfsYNRelatedToOutbreak = @idfsYNRelatedToOutbreak,
                idfOutbreak = @idfOutbreak,
                idfsYNExposureLocationKnown = @idfsYNExposureLocationKnown,
                idfPointGeoLocation = @idfPointGeoLocation,
                datExposureDate = @datExposureDate,
                strNote = @strNote,
                idfsFinalCaseStatus = @idfsFinalCaseStatus,
                idfsOutcome = @idfsOutcome,
                idfsCaseProgressStatus = @idfsCaseProgressStatus,
                datModificationDate = GETDATE(),
                idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
                idfsYNTestsConducted = @idfsYNTestsConducted,
                DiseaseReportTypeID = @DiseaseReportTypeID,
                blnClinicalDiagBasis = @blnClinicalDiagBasis,
                blnLabDiagBasis = @blnLabDiagBasis,
                blnEpiDiagBasis = @blnEpiDiagBasis,
                datFinalCaseClassificationDate = @DateofClassification,
                strsummarynotes = @strSummaryNotes,
                idfEpiObservation = @idfEpiObservation,
                idfCSObservation = @idfCSObservation,
                strEpidemiologistsName = @strEpidemiologistsName,
                idfsNotCollectedReason = @idfsNotCollectedReason,
                strNotCollectedReason = @strNotCollectedReason,
                idfsHumanAgeType = @idfsHumanAgeType,
                intPatientAge = @intPatientAge,
                datCompletionPaperFormDate = @datCompletionPaperFormDate,
                idfInvestigatedByPerson = @idfInvestigatedByPerson,
                idfPersonEnteredBy = @idfPersonEnteredBy,
                idfsSite = @idfsSite,
                AuditUpdateUser = @AuditUser,
                idfParentMonitoringSession = @idfParentMonitoringSession
            WHERE idfHumanCase = @idfHumanCase
                  AND intRowStatus = 0;

            INSERT INTO @HumanDiseaseReportAfterEdit
            (
                HumanDiseaseReportID,
                HumanID,
                FinalStateTypeID,
                HospitalizationStatusTypeID,
                HumanAgeTypeID,
                AntimicrobialTherapyTypeID,
                HospitalizationTypeID,
                SpecimenCollectedTypeID,
                RelatedToOutbreakTypeID,
                OutcomeID,
                TentativeDiagnosisID,
                FinalDiagnosisID,
                InitialCaseStatusTypeID,
                FinalCaseStatusTypeID,
                SentByOfficeID,
                ReceivedByOfficeID,
                InvestigatedByOfficeID,
                PointGeoLocationID,
                EpiObservationID,
                CSObservationID,
                DeduplicationResultCaseID,
                NotificationDate,
                CompletionPaperFormDate,
                FirstSoughtCareDate,
                ModificationDate,
                HospitalizationDate,
                FacilityLastVisitDate,
                ExposureDate,
                DischargeDate,
                OnSetDate,
                InvestigationStartDate,
                TentativeDiagnosisDate,
                FinalDiagnosisDate,
                Note,
                CurrentLocation,
                HospitalizationPlace,
                LocalIdentifier,
                SoughtCareFacility,
                SentByFirstName,
                SentByPatronymicName,
                SentByLastName,
                ReceivedByFirstName,
                ReceivedByPatronymicName,
                ReceivedByLastName,
                EpidemiologistsName,
                NotCollectedReason,
                ClinicalDiagnosis,
                ClinicalNotes,
                SummaryNotes,
                PatientAge,
                ClinicalDiagBasisIndicator,
                LabDiagBasisIndicator,
                EpiDiagBasisIndicator,
                PersonEnteredByID,
                SentByPersonID,
                ReceivedByPersonID,
                InvestigatedByPersonID,
                TestsConductedTypeID,
                SoughtCareFacilityID,
                NonNotifiableDiagnosisID,
                NotCollectedReasonTypeID,
                OutbreakID,
                EnteredDate,
                CaseID,
                CaseProgressStatusTypeID,
                SampleNotes,
                OfflineCaseID,
                FinalCaseClassificationDate,
                HospitalID,
                RowStatus
            )
            SELECT idfHumanCase,
                   idfHuman,
                   idfsFinalState,
                   idfsHospitalizationStatus,
                   idfsHumanAgeType,
                   idfsYNAntimicrobialTherapy,
                   idfsYNHospitalization,
                   idfsYNSpecimenCollected,
                   idfsYNRelatedToOutbreak,
                   idfsOutcome,
                   idfsTentativeDiagnosis,
                   idfsFinalDiagnosis,
                   idfsInitialCaseStatus,
                   idfsFinalCaseStatus,
                   idfSentByOffice,
                   idfReceivedByOffice,
                   idfInvestigatedByOffice,
                   idfPointGeoLocation,
                   idfEpiObservation,
                   idfCSObservation,
                   idfDeduplicationResultCase,
                   datNotificationDate,
                   datCompletionPaperFormDate,
                   datFirstSoughtCareDate,
                   datModificationDate,
                   datHospitalizationDate,
                   datFacilityLastVisit,
                   datExposureDate,
                   datDischargeDate,
                   datOnSetDate,
                   datInvestigationStartDate,
                   datTentativeDiagnosisDate,
                   datFinalDiagnosisDate,
                   strNote,
                   strCurrentLocation,
                   strHospitalizationPlace,
                   strLocalIdentifier,
                   strSoughtCareFacility,
                   strSentByFirstName,
                   strSentByPatronymicName,
                   strSentByLastName,
                   strReceivedByFirstName,
                   strReceivedByPatronymicName,
                   strReceivedByLastName,
                   strEpidemiologistsName,
                   strNotCollectedReason,
                   strClinicalDiagnosis,
                   strClinicalNotes,
                   strSummaryNotes,
                   intPatientAge,
                   blnClinicalDiagBasis,
                   blnLabDiagBasis,
                   blnEpiDiagBasis,
                   idfPersonEnteredBy,
                   idfSentByPerson,
                   idfReceivedByPerson,
                   idfInvestigatedByPerson,
                   idfsYNTestsConducted,
                   idfSoughtCareFacility,
                   idfsNonNotifiableDiagnosis,
                   idfsNotCollectedReason,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   strSampleNotes,
                   uidOfflineCaseID,
                   datFinalCaseClassificationDate,
                   idfHospital,
                   intRowStatus
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase;

            -- Data audit 
            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4577900000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HumanID,
                   a.HumanID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HumanID <> b.HumanID)
                  OR (
                         a.HumanID IS NOT NULL
                         AND b.HumanID IS NULL
                     )
                  OR (
                         a.HumanID IS NULL
                         AND b.HumanID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79670000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalStateTypeID,
                   a.FinalStateTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalStateTypeID <> b.FinalStateTypeID)
                  OR (
                         a.FinalStateTypeID IS NOT NULL
                         AND b.FinalStateTypeID IS NULL
                     )
                  OR (
                         a.FinalStateTypeID IS NULL
                         AND b.FinalStateTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79680000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationStatusTypeID,
                   a.HospitalizationStatusTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationStatusTypeID <> b.HospitalizationStatusTypeID)
                  OR (
                         a.HospitalizationStatusTypeID IS NOT NULL
                         AND b.HospitalizationStatusTypeID IS NULL
                     )
                  OR (
                         a.HospitalizationStatusTypeID IS NULL
                         AND b.HospitalizationStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79690000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HumanAgeTypeID,
                   a.HumanAgeTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HumanAgeTypeID <> b.HumanAgeTypeID)
                  OR (
                         a.HumanAgeTypeID IS NOT NULL
                         AND b.HumanAgeTypeID IS NULL
                     )
                  OR (
                         a.HumanAgeTypeID IS NULL
                         AND b.HumanAgeTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79730000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.AntimicrobialTherapyTypeID,
                   a.AntimicrobialTherapyTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.AntimicrobialTherapyTypeID <> b.AntimicrobialTherapyTypeID)
                  OR (
                         a.AntimicrobialTherapyTypeID IS NOT NULL
                         AND b.AntimicrobialTherapyTypeID IS NULL
                     )
                  OR (
                         a.AntimicrobialTherapyTypeID IS NULL
                         AND b.AntimicrobialTherapyTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79740000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationTypeID,
                   a.HospitalizationTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationTypeID <> b.HospitalizationTypeID)
                  OR (
                         a.HospitalizationTypeID IS NOT NULL
                         AND b.HospitalizationTypeID IS NULL
                     )
                  OR (
                         a.HospitalizationTypeID IS NULL
                         AND b.HospitalizationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79760000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SpecimenCollectedTypeID,
                   a.SpecimenCollectedTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SpecimenCollectedTypeID <> b.SpecimenCollectedTypeID)
                  OR (
                         a.SpecimenCollectedTypeID IS NOT NULL
                         AND b.SpecimenCollectedTypeID IS NULL
                     )
                  OR (
                         a.SpecimenCollectedTypeID IS NULL
                         AND b.SpecimenCollectedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79750000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.RelatedToOutbreakTypeID,
                   a.RelatedToOutbreakTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.RelatedToOutbreakTypeID <> b.RelatedToOutbreakTypeID)
                  OR (
                         a.RelatedToOutbreakTypeID IS NOT NULL
                         AND b.RelatedToOutbreakTypeID IS NULL
                     )
                  OR (
                         a.RelatedToOutbreakTypeID IS NULL
                         AND b.RelatedToOutbreakTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79710000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OutcomeID,
                   a.OutcomeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OutcomeID <> b.OutcomeID)
                  OR (
                         a.OutcomeID IS NOT NULL
                         AND b.OutcomeID IS NULL
                     )
                  OR (
                         a.OutcomeID IS NULL
                         AND b.OutcomeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79720000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.TentativeDiagnosisID,
                   a.TentativeDiagnosisID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.TentativeDiagnosisID <> b.TentativeDiagnosisID)
                  OR (
                         a.TentativeDiagnosisID IS NOT NULL
                         AND b.TentativeDiagnosisID IS NULL
                     )
                  OR (
                         a.TentativeDiagnosisID IS NULL
                         AND b.TentativeDiagnosisID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79660000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalDiagnosisID,
                   a.FinalDiagnosisID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalDiagnosisID <> b.FinalDiagnosisID)
                  OR (
                         a.FinalDiagnosisID IS NOT NULL
                         AND b.FinalDiagnosisID IS NULL
                     )
                  OR (
                         a.FinalDiagnosisID IS NULL
                         AND b.FinalDiagnosisID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79700000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InitialCaseStatusTypeID,
                   a.InitialCaseStatusTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InitialCaseStatusTypeID <> b.InitialCaseStatusTypeID)
                  OR (
                         a.InitialCaseStatusTypeID IS NOT NULL
                         AND b.InitialCaseStatusTypeID IS NULL
                     )
                  OR (
                         a.InitialCaseStatusTypeID IS NULL
                         AND b.InitialCaseStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855690000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalCaseStatusTypeID,
                   a.FinalCaseStatusTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalCaseStatusTypeID <> b.FinalCaseStatusTypeID)
                  OR (
                         a.FinalCaseStatusTypeID IS NOT NULL
                         AND b.FinalCaseStatusTypeID IS NULL
                     )
                  OR (
                         a.FinalCaseStatusTypeID IS NULL
                         AND b.FinalCaseStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855700000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByOfficeID,
                   a.SentByOfficeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByOfficeID <> b.SentByOfficeID)
                  OR (
                         a.SentByOfficeID IS NOT NULL
                         AND b.SentByOfficeID IS NULL
                     )
                  OR (
                         a.SentByOfficeID IS NULL
                         AND b.SentByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79640000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByOfficeID,
                   a.ReceivedByOfficeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByOfficeID <> b.ReceivedByOfficeID)
                  OR (
                         a.ReceivedByOfficeID IS NOT NULL
                         AND b.ReceivedByOfficeID IS NULL
                     )
                  OR (
                         a.ReceivedByOfficeID IS NULL
                         AND b.ReceivedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79620000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InvestigatedByOfficeID,
                   a.InvestigatedByOfficeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InvestigatedByOfficeID <> b.InvestigatedByOfficeID)
                  OR (
                         a.InvestigatedByOfficeID IS NOT NULL
                         AND b.InvestigatedByOfficeID IS NULL
                     )
                  OR (
                         a.InvestigatedByOfficeID IS NULL
                         AND b.InvestigatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79630000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.PointGeoLocationID,
                   a.PointGeoLocationID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.PointGeoLocationID <> b.PointGeoLocationID)
                  OR (
                         a.PointGeoLocationID IS NOT NULL
                         AND b.PointGeoLocationID IS NULL
                     )
                  OR (
                         a.PointGeoLocationID IS NULL
                         AND b.PointGeoLocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855710000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EpiObservationID,
                   a.EpiObservationID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EpiObservationID <> b.EpiObservationID)
                  OR (
                         a.EpiObservationID IS NOT NULL
                         AND b.EpiObservationID IS NULL
                     )
                  OR (
                         a.EpiObservationID IS NULL
                         AND b.EpiObservationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855720000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CSObservationID,
                   a.CSObservationID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CSObservationID <> b.CSObservationID)
                  OR (
                         a.CSObservationID IS NOT NULL
                         AND b.CSObservationID IS NULL
                     )
                  OR (
                         a.CSObservationID IS NULL
                         AND b.CSObservationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855730000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.DeduplicationResultCaseID,
                   a.DeduplicationResultCaseID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.DeduplicationResultCaseID <> b.DeduplicationResultCaseID)
                  OR (
                         a.DeduplicationResultCaseID IS NOT NULL
                         AND b.DeduplicationResultCaseID IS NULL
                     )
                  OR (
                         a.DeduplicationResultCaseID IS NULL
                         AND b.DeduplicationResultCaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855740000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NotificationDate,
                   a.NotificationDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NotificationDate <> b.NotificationDate)
                  OR (
                         a.NotificationDate IS NOT NULL
                         AND b.NotificationDate IS NULL
                     )
                  OR (
                         a.NotificationDate IS NULL
                         AND b.NotificationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79520000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CompletionPaperFormDate,
                   a.CompletionPaperFormDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CompletionPaperFormDate <> b.CompletionPaperFormDate)
                  OR (
                         a.CompletionPaperFormDate IS NOT NULL
                         AND b.CompletionPaperFormDate IS NULL
                     )
                  OR (
                         a.CompletionPaperFormDate IS NULL
                         AND b.CompletionPaperFormDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855750000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FirstSoughtCareDate,
                   a.FirstSoughtCareDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FirstSoughtCareDate <> b.FirstSoughtCareDate)
                  OR (
                         a.FirstSoughtCareDate IS NOT NULL
                         AND b.FirstSoughtCareDate IS NULL
                     )
                  OR (
                         a.FirstSoughtCareDate IS NULL
                         AND b.FirstSoughtCareDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79590000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ModificationDate,
                   a.ModificationDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ModificationDate <> b.ModificationDate)
                  OR (
                         a.ModificationDate IS NOT NULL
                         AND b.ModificationDate IS NULL
                     )
                  OR (
                         a.ModificationDate IS NULL
                         AND b.ModificationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79570000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationDate,
                   a.HospitalizationDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationDate <> b.HospitalizationDate)
                  OR (
                         a.HospitalizationDate IS NOT NULL
                         AND b.HospitalizationDate IS NULL
                     )
                  OR (
                         a.HospitalizationDate IS NULL
                         AND b.HospitalizationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79550000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FacilityLastVisitDate,
                   a.FacilityLastVisitDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FacilityLastVisitDate <> b.FacilityLastVisitDate)
                  OR (
                         a.FacilityLastVisitDate IS NOT NULL
                         AND b.FacilityLastVisitDate IS NULL
                     )
                  OR (
                         a.FacilityLastVisitDate IS NULL
                         AND b.FacilityLastVisitDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79540000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ExposureDate,
                   a.ExposureDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ExposureDate <> b.ExposureDate)
                  OR (
                         a.ExposureDate IS NOT NULL
                         AND b.ExposureDate IS NULL
                     )
                  OR (
                         a.ExposureDate IS NULL
                         AND b.ExposureDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79530000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.DischargeDate,
                   a.DischargeDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.DischargeDate <> b.DischargeDate)
                  OR (
                         a.DischargeDate IS NOT NULL
                         AND b.DischargeDate IS NULL
                     )
                  OR (
                         a.DischargeDate IS NULL
                         AND b.DischargeDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855760000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OnSetDate,
                   a.OnSetDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OnSetDate <> b.OnSetDate)
                  OR (
                         a.OnSetDate IS NOT NULL
                         AND b.OnSetDate IS NULL
                     )
                  OR (
                         a.OnSetDate IS NULL
                         AND b.OnSetDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79580000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InvestigationStartDate,
                   a.InvestigationStartDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InvestigationStartDate <> b.InvestigationStartDate)
                  OR (
                         a.InvestigationStartDate IS NOT NULL
                         AND b.InvestigationStartDate IS NULL
                     )
                  OR (
                         a.InvestigationStartDate IS NULL
                         AND b.InvestigationStartDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79600000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.TentativeDiagnosisDate,
                   a.TentativeDiagnosisDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.TentativeDiagnosisDate <> b.TentativeDiagnosisDate)
                  OR (
                         a.TentativeDiagnosisDate IS NOT NULL
                         AND b.TentativeDiagnosisDate IS NULL
                     )
                  OR (
                         a.TentativeDiagnosisDate IS NULL
                         AND b.TentativeDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79560000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalDiagnosisDate,
                   a.FinalDiagnosisDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalDiagnosisDate <> b.FinalDiagnosisDate)
                  OR (
                         a.FinalDiagnosisDate IS NOT NULL
                         AND b.FinalDiagnosisDate IS NULL
                     )
                  OR (
                         a.FinalDiagnosisDate IS NULL
                         AND b.FinalDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79840000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79790000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CurrentLocation,
                   a.CurrentLocation,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CurrentLocation <> b.CurrentLocation)
                  OR (
                         a.CurrentLocation IS NOT NULL
                         AND b.CurrentLocation IS NULL
                     )
                  OR (
                         a.CurrentLocation IS NULL
                         AND b.CurrentLocation IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79810000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationPlace,
                   a.HospitalizationPlace,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationPlace <> b.HospitalizationPlace)
                  OR (
                         a.HospitalizationPlace IS NOT NULL
                         AND b.HospitalizationPlace IS NULL
                     )
                  OR (
                         a.HospitalizationPlace IS NULL
                         AND b.HospitalizationPlace IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79820000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.LocalIdentifier,
                   a.LocalIdentifier,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.LocalIdentifier <> b.LocalIdentifier)
                  OR (
                         a.LocalIdentifier IS NOT NULL
                         AND b.LocalIdentifier IS NULL
                     )
                  OR (
                         a.LocalIdentifier IS NULL
                         AND b.LocalIdentifier IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79910000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SoughtCareFacility,
                   a.SoughtCareFacility,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SoughtCareFacility <> b.SoughtCareFacility)
                  OR (
                         a.SoughtCareFacility IS NOT NULL
                         AND b.SoughtCareFacility IS NULL
                     )
                  OR (
                         a.SoughtCareFacility IS NULL
                         AND b.SoughtCareFacility IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79880000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByFirstName,
                   a.SentByFirstName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByFirstName <> b.SentByFirstName)
                  OR (
                         a.SentByFirstName IS NOT NULL
                         AND b.SentByFirstName IS NULL
                     )
                  OR (
                         a.SentByFirstName IS NULL
                         AND b.SentByFirstName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79900000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByPatronymicName,
                   a.SentByPatronymicName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByPatronymicName <> b.SentByPatronymicName)
                  OR (
                         a.SentByPatronymicName IS NOT NULL
                         AND b.SentByPatronymicName IS NULL
                     )
                  OR (
                         a.SentByPatronymicName IS NULL
                         AND b.SentByPatronymicName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79890000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByLastName,
                   a.SentByLastName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByLastName <> b.SentByLastName)
                  OR (
                         a.SentByLastName IS NOT NULL
                         AND b.SentByLastName IS NULL
                     )
                  OR (
                         a.SentByLastName IS NULL
                         AND b.SentByLastName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79850000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByFirstName,
                   a.ReceivedByFirstName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByFirstName <> b.ReceivedByFirstName)
                  OR (
                         a.ReceivedByFirstName IS NOT NULL
                         AND b.ReceivedByFirstName IS NULL
                     )
                  OR (
                         a.ReceivedByFirstName IS NULL
                         AND b.ReceivedByFirstName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79870000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByPatronymicName,
                   a.ReceivedByPatronymicName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByPatronymicName <> b.ReceivedByPatronymicName)
                  OR (
                         a.ReceivedByPatronymicName IS NOT NULL
                         AND b.ReceivedByPatronymicName IS NULL
                     )
                  OR (
                         a.ReceivedByPatronymicName IS NULL
                         AND b.ReceivedByPatronymicName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79860000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByLastName,
                   a.ReceivedByLastName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByLastName <> b.ReceivedByLastName)
                  OR (
                         a.ReceivedByLastName IS NOT NULL
                         AND b.ReceivedByLastName IS NULL
                     )
                  OR (
                         a.ReceivedByLastName IS NULL
                         AND b.ReceivedByLastName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79800000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EpidemiologistsName,
                   a.EpidemiologistsName,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EpidemiologistsName <> b.EpidemiologistsName)
                  OR (
                         a.EpidemiologistsName IS NOT NULL
                         AND b.EpidemiologistsName IS NULL
                     )
                  OR (
                         a.EpidemiologistsName IS NULL
                         AND b.EpidemiologistsName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79830000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NotCollectedReason,
                   a.NotCollectedReason,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NotCollectedReason <> b.NotCollectedReason)
                  OR (
                         a.NotCollectedReason IS NOT NULL
                         AND b.NotCollectedReason IS NULL
                     )
                  OR (
                         a.NotCollectedReason IS NULL
                         AND b.NotCollectedReason IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79780000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ClinicalDiagnosis,
                   a.ClinicalDiagnosis,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ClinicalDiagnosis <> b.ClinicalDiagnosis)
                  OR (
                         a.ClinicalDiagnosis IS NOT NULL
                         AND b.ClinicalDiagnosis IS NULL
                     )
                  OR (
                         a.ClinicalDiagnosis IS NULL
                         AND b.ClinicalDiagnosis IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855770000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ClinicalNotes,
                   a.ClinicalNotes,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ClinicalNotes <> b.ClinicalNotes)
                  OR (
                         a.ClinicalNotes IS NOT NULL
                         AND b.ClinicalNotes IS NULL
                     )
                  OR (
                         a.ClinicalNotes IS NULL
                         AND b.ClinicalNotes IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855780000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SummaryNotes,
                   a.SummaryNotes,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SummaryNotes <> b.SummaryNotes)
                  OR (
                         a.SummaryNotes IS NOT NULL
                         AND b.SummaryNotes IS NULL
                     )
                  OR (
                         a.SummaryNotes IS NULL
                         AND b.SummaryNotes IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79770000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.PatientAge,
                   a.PatientAge,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.PatientAge <> b.PatientAge)
                  OR (
                         a.PatientAge IS NOT NULL
                         AND b.PatientAge IS NULL
                     )
                  OR (
                         a.PatientAge IS NULL
                         AND b.PatientAge IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79490000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ClinicalDiagBasisIndicator,
                   a.ClinicalDiagBasisIndicator,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ClinicalDiagBasisIndicator <> b.ClinicalDiagBasisIndicator)
                  OR (
                         a.ClinicalDiagBasisIndicator IS NOT NULL
                         AND b.ClinicalDiagBasisIndicator IS NULL
                     )
                  OR (
                         a.ClinicalDiagBasisIndicator IS NULL
                         AND b.ClinicalDiagBasisIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79510000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.LabDiagBasisIndicator,
                   a.LabDiagBasisIndicator,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.LabDiagBasisIndicator <> b.LabDiagBasisIndicator)
                  OR (
                         a.LabDiagBasisIndicator IS NOT NULL
                         AND b.LabDiagBasisIndicator IS NULL
                     )
                  OR (
                         a.LabDiagBasisIndicator IS NULL
                         AND b.LabDiagBasisIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79500000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EpiDiagBasisIndicator,
                   a.EpiDiagBasisIndicator,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EpiDiagBasisIndicator <> b.EpiDiagBasisIndicator)
                  OR (
                         a.EpiDiagBasisIndicator IS NOT NULL
                         AND b.EpiDiagBasisIndicator IS NULL
                     )
                  OR (
                         a.EpiDiagBasisIndicator IS NULL
                         AND b.EpiDiagBasisIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4577910000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.PersonEnteredByID,
                   a.PersonEnteredByID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.PersonEnteredByID <> b.PersonEnteredByID)
                  OR (
                         a.PersonEnteredByID IS NOT NULL
                         AND b.PersonEnteredByID IS NULL
                     )
                  OR (
                         a.PersonEnteredByID IS NULL
                         AND b.PersonEnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578390000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByPersonID,
                   a.SentByPersonID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByPersonID <> b.SentByPersonID)
                  OR (
                         a.SentByPersonID IS NOT NULL
                         AND b.SentByPersonID IS NULL
                     )
                  OR (
                         a.SentByPersonID IS NULL
                         AND b.SentByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578400000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByPersonID,
                   a.ReceivedByPersonID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByPersonID <> b.ReceivedByPersonID)
                  OR (
                         a.ReceivedByPersonID IS NOT NULL
                         AND b.ReceivedByPersonID IS NULL
                     )
                  OR (
                         a.ReceivedByPersonID IS NULL
                         AND b.ReceivedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578410000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InvestigatedByPersonID,
                   a.InvestigatedByPersonID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InvestigatedByPersonID <> b.InvestigatedByPersonID)
                  OR (
                         a.InvestigatedByPersonID IS NOT NULL
                         AND b.InvestigatedByPersonID IS NULL
                     )
                  OR (
                         a.InvestigatedByPersonID IS NULL
                         AND b.InvestigatedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578420000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.TestsConductedTypeID,
                   a.TestsConductedTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.TestsConductedTypeID <> b.TestsConductedTypeID)
                  OR (
                         a.TestsConductedTypeID IS NOT NULL
                         AND b.TestsConductedTypeID IS NULL
                     )
                  OR (
                         a.TestsConductedTypeID IS NULL
                         AND b.TestsConductedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12014650000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SoughtCareFacilityID,
                   a.SoughtCareFacilityID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SoughtCareFacilityID <> b.SoughtCareFacilityID)
                  OR (
                         a.SoughtCareFacilityID IS NOT NULL
                         AND b.SoughtCareFacilityID IS NULL
                     )
                  OR (
                         a.SoughtCareFacilityID IS NULL
                         AND b.SoughtCareFacilityID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12014660000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NonNotifiableDiagnosisID,
                   a.NonNotifiableDiagnosisID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NonNotifiableDiagnosisID <> b.NonNotifiableDiagnosisID)
                  OR (
                         a.NonNotifiableDiagnosisID IS NOT NULL
                         AND b.NonNotifiableDiagnosisID IS NULL
                     )
                  OR (
                         a.NonNotifiableDiagnosisID IS NULL
                         AND b.NonNotifiableDiagnosisID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12014670000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NotCollectedReasonTypeID,
                   a.NotCollectedReasonTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NotCollectedReasonTypeID <> b.NotCollectedReasonTypeID)
                  OR (
                         a.NotCollectedReasonTypeID IS NOT NULL
                         AND b.NotCollectedReasonTypeID IS NULL
                     )
                  OR (
                         a.NotCollectedReasonTypeID IS NULL
                         AND b.NotCollectedReasonTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665410000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OutbreakID,
                   a.OutbreakID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OutbreakID <> b.OutbreakID)
                  OR (
                         a.OutbreakID IS NOT NULL
                         AND b.OutbreakID IS NULL
                     )
                  OR (
                         a.OutbreakID IS NULL
                         AND b.OutbreakID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665420000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EnteredDate,
                   a.EnteredDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EnteredDate <> b.EnteredDate)
                  OR (
                         a.EnteredDate IS NOT NULL
                         AND b.EnteredDate IS NULL
                     )
                  OR (
                         a.EnteredDate IS NULL
                         AND b.EnteredDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665430000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CaseID,
                   a.CaseID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CaseID <> b.CaseID)
                  OR (
                         a.CaseID IS NOT NULL
                         AND b.CaseID IS NULL
                     )
                  OR (
                         a.CaseID IS NULL
                         AND b.CaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665440000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CaseProgressStatusTypeID,
                   a.CaseProgressStatusTypeID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CaseProgressStatusTypeID <> b.CaseProgressStatusTypeID)
                  OR (
                         a.CaseProgressStatusTypeID IS NOT NULL
                         AND b.CaseProgressStatusTypeID IS NULL
                     )
                  OR (
                         a.CaseProgressStatusTypeID IS NULL
                         AND b.CaseProgressStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665450000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SampleNotes,
                   a.SampleNotes,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SampleNotes <> b.SampleNotes)
                  OR (
                         a.SampleNotes IS NOT NULL
                         AND b.SampleNotes IS NULL
                     )
                  OR (
                         a.SampleNotes IS NULL
                         AND b.SampleNotes IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665460000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OfflineCaseID,
                   a.OfflineCaseID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OfflineCaseID <> b.OfflineCaseID)
                  OR (
                         a.OfflineCaseID IS NOT NULL
                         AND b.OfflineCaseID IS NULL
                     )
                  OR (
                         a.OfflineCaseID IS NULL
                         AND b.OfflineCaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   51389570000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalCaseClassificationDate,
                   a.FinalCaseClassificationDate,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalCaseClassificationDate <> b.FinalCaseClassificationDate)
                  OR (
                         a.FinalCaseClassificationDate IS NOT NULL
                         AND b.FinalCaseClassificationDate IS NULL
                     )
                  OR (
                         a.FinalCaseClassificationDate IS NULL
                         AND b.FinalCaseClassificationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   51523420000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalID,
                   a.HospitalID,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalID <> b.HospitalID)
                  OR (
                         a.HospitalID IS NOT NULL
                         AND b.HospitalID IS NULL
                     )
                  OR (
                         a.HospitalID IS NULL
                         AND b.HospitalID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   a.HumanDiseaseReportID,
                   NULL,
                   @AuditUser,
                   @strHumanCaseId
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE a.RowStatus = 0
                  AND b.RowStatus = 1;

            -- Update data audit event ID on tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailUpdate
            SET idfDataAuditEvent = @DataAuditEventID, 
                strObject = @strHumanCaseId 
            WHERE idfObjectDetail = @idfCSObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailUpdate
            SET idfDataAuditEvent = @DataAuditEventID, 
                strObject = @strHumanCaseId 
            WHERE idfObjectDetail = @idfEpiObservation
                  AND idfDataAuditEvent IS NULL;
        -- End data audit
        END

        -- Set samples
        IF @SamplesParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @SamplesTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = SampleID,
                    @SampleID = SampleID,
                    @SampleTypeID = SampleTypeID,
                    @CollectedByPersonID = CollectedByPersonID,
                    @CollectedByOrganizationID = CollectedByOrganizationID,
                    @CollectionDate = CAST(CollectionDate AS DATETIME),
                    @SentDate = CAST(SentDate AS DATETIME),
                    @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                    @SampleStatusTypeID = SampleStatusTypeID,
                    @Comments = Comments,
                    @idfsSite = SiteID,
                    @CurrentSiteID = CurrentSiteID,
                    @RowStatus = RowStatus,
                    @SentToOrganizationID = SentToOrganizationID,
                    @DiseaseID = DiseaseID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @HumanID = HumanID,
                    @HumanMasterID = HumanMasterID,
                    @RowAction = RowAction
                FROM @SamplesTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName = @AuditUser,
                                                 @DataAuditEventID = @DataAuditEventID,
                                                 @EIDSSObjectID = @strHumanCaseId,
                                                 @SampleID = @SampleID OUTPUT,
                                                 @SampleTypeID = @SampleTypeID,
                                                 @RootSampleID = NULL,
                                                 @ParentSampleID = NULL,
                                                 @HumanID = @idfHuman,
                                                 @SpeciesID = NULL,
                                                 @AnimalID = NULL,
                                                 @VectorID = NULL,
                                                 @MonitoringSessionID = @idfParentMonitoringSession,
                                                 @VectorSessionID = NULL,
                                                 @HumanDiseaseReportID = @idfHumanCase,
                                                 @VeterinaryDiseaseReportID = NULL,
                                                 @CollectionDate = @CollectionDate,
                                                 @CollectedByPersonID = @CollectedByPersonID,
                                                 @CollectedByOrganizationID = @CollectedByOrganizationID,
                                                 @SentDate = @SentDate,
                                                 @SentToOrganizationID = @SentToOrganizationID,
                                                 @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                                 @SiteID = @idfsSite,
                                                 @EnteredDate = @DateEntered,
                                                 @ReadOnlyIndicator = @ReadOnlyIndicator,
                                                 @SampleStatusTypeID = @SampleStatusTypeID,
                                                 @Comments = @Comments,
                                                 @CurrentSiteID = @CurrentSiteID,
                                                 @DiseaseID = @DiseaseID,
                                                 @BirdStatusTypeID = NULL,
                                                 @RowStatus = @RowStatus,
                                                 @RowAction = @RowAction

                UPDATE @TestsTemp
                SET SampleID = @SampleID
                WHERE SampleID = @RowID

                DELETE FROM @SamplesTemp
                WHERE SampleID = @RowID
            END
        END
        IF @TestsParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestID,
                    @TestID = TestID,
                    @TestNameTypeID = TestNameTypeID,
                    @TestCategoryTypeID = TestCategoryTypeID,
                    @TestResultTypeID = TestResultTypeID,
                    @TestStatusTypeID = TestStatusTypeID,
                    @DiseaseID = DiseaseID,
                    @SampleID = SampleID,
                    @Comments = Comments,
                    @RowStatus = RowStatus,
                    @StartedDate = StartedDate,
                    @ResultDate = ResultDate,
                    @TestedByOrganizationID = TestedByOrganizationID,
                    @TestedByPersonID = TestedByPersonID,
                    @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                    @ResultEnteredByPersonID = ResultEnteredByPersonID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                    @ExternalTestIndicator = ExternalTestIndicator,
                    @PerformedByOrganizationID = PerformedByOrganizationID,
                    @ReceivedDate = ReceivedDate,
                    @ContactPersonName = ContactPersonName,
                    @RowAction = RowAction
                FROM @TestsTemp;

                -- If the record is being soft-@HumanDiseaseReportAfterEdit, then check if the test record was originally created 
                -- in the laboaratory module.  If it was, then disassociate the test record from the 
                -- human disease report, so that the test record remains in the laboratory module 
                -- for further action.
                SET @TestHumanCaseID = @idfHumanCase;

                -- If @HumanDiseaseReportAfterEdit and it's a disease report entered test, then just soft-delete the test.
                IF @RowStatus = 1
                   AND @NonLaboratoryTestIndicator = 1
                BEGIN
                    SET @RowStatus = 1;
                END

                -- If @HumanDiseaseReportAfterEdit and it's a laboratory module entered test, then just disassociate from the disease report.
                ELSE IF (@RowStatus = 1 AND @NonLaboratoryTestIndicator = 0)
                BEGIN
                    SET @RowStatus = 0;
                    SET @TestHumanCaseID = NULL;
                END;

                -- Set tests
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_TESTS_SET @TestID = @TestID OUTPUT,
                                               @TestNameTypeID = @TestNameTypeID,
                                               @TestCategoryTypeID = @TestCategoryTypeID,
                                               @TestResultTypeID = @TestResultTypeID,
                                               @TestStatusTypeID = @TestStatusTypeID,
                                               @DiseaseID = @DiseaseID,
                                               @SampleID = @SampleID,
                                               @BatchTestID = NULL,
                                               @ObservationID = NULL,
                                               @TestNumber = NULL,
                                               @Comments = @Comments,
                                               @RowStatus = @RowStatus,
                                               @StartedDate = @StartedDate,
                                               @ResultDate = @ResultDate,
                                               @TestedByOrganizationID = @TestedByOrganizationID,
                                               @TestedByPersonID = @TestedByPersonID,
                                               @ResultEnteredByOrganizationID = @ResultEnteredByOrganizationID,
                                               @ResultEnteredByPersonID = @ResultEnteredByPersonID,
                                               @ValidatedByOrganizationID = @ValidatedByOrganizationID,
                                               @ValidatedByPersonID = @ValidatedByPersonID,
                                               @ReadOnlyIndicator = @ReadOnlyIndicator,
                                               @NonLaboratoryTestIndicator = @NonLaboratoryTestIndicator,
                                               @ExternalTestIndicator = @ExternalTestIndicator,
                                               @PerformedByOrganizationID = @PerformedByOrganizationID,
                                               @ReceivedDate = @ReceivedDate,
                                               @ContactPerson = @ContactPersonName,
                                               @MonitoringSessionID = @idfParentMonitoringSession,
                                               @VectorSessionID = NULL,
                                               @HumanDiseaseReportID = @TestHumanCaseID,
                                               @VeterinaryDiseaseReportID = NULL,
                                               @AuditUserName = @AuditUser,
                                               @DataAuditEventID = @DataAuditEventID,
                                               @EIDSSObjectID = @strHumanCaseId,
                                               @RowAction = @RowAction;

                UPDATE @TestsInterpretationParametersTemp
                SET TestID = @TestID
                WHERE TestID = @RowID;

                DELETE FROM @TestsTemp
                WHERE TestID = @RowID;
            END;
        END

        DECLARE @SampleCount INT;
        SET @SampleCount =
        (
            SELECT Count(*)
            FROM dbo.tlbMaterial
            WHERE intRowStatus = 0
                  and idfHumanCase = @idfHumanCase
        );

        DECLARE @SampleToDeleteID BIGINT = NULL;
        DECLARE @SamplesToDelete TABLE (SampleID BIGINT);

        INSERT INTO @SamplesToDelete
        SELECT idfMaterial
        FROM dbo.tlbMaterial
        WHERE idfHumanCase = @idfHumanCase;

        DECLARE @BeforeNotCollectedReason BIGINT = (
                                                       SELECT idfsNotCollectedReason
                                                       FROM dbo.tlbHumanCase
                                                       WHERE idfHumanCase = @idfHumanCase
                                                   );

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100002
        )
        BEGIN
            SET @ObjectTableID = 75620000000; -- tlbMaterial
            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            WHILE EXISTS (SELECT * FROM @SamplesToDelete)
            BEGIN
                SELECT TOP 1
                    @SampleToDeleteID = SampleID
                FROM @SamplesToDelete;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject, 
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @SampleToDeleteID, @strHumanCaseId);
                -- End data audit

                DELETE FROM @SamplesToDelete
                WHERE SampleID = @SampleToDeleteID;
            END
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100003
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            -- Data audit
            IF @BeforeNotCollectedReason IS NOT NULL
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser, 
                    strObject
                )
                SELECT @DataAuditEventId,
                       @ObjectTableID,
                       12014670000000,
                       @idfHumanCase,
                       NULL,
                       @BeforeNotCollectedReason,
                       NULL,
                       @AuditUser, 
                       @strHumanCaseId;
            END
            -- End data audit

            SET @ObjectTableID = 75620000000; -- tlbMaterial
            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            WHILE EXISTS (SELECT * FROM @SamplesToDelete)
            BEGIN
                SELECT TOP 1
                    @SampleToDeleteID = SampleID
                FROM @SamplesToDelete;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject, 
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @SampleToDeleteID, @strHumanCaseId);
                -- End data audit

                DELETE FROM @SamplesToDelete
                WHERE SampleID = @SampleToDeleteID;
            END
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100001
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            -- Data audit
            IF @BeforeNotCollectedReason IS NOT NULL
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser, 
                    strObject
                )
                SELECT @DataAuditEventId,
                       @ObjectTableID,
                       12014670000000,
                       @idfHumanCase,
                       NULL,
                       @BeforeNotCollectedReason,
                       NULL,
                       @AuditUser, 
                       @strHumanCaseId
            END
            -- End data audit

            IF (@SampleCount = 0)
            BEGIN
                DECLARE @BeforeSpecimenCollectedIndicator BIGINT = (
                                                                       SELECT idfsYNSpecimenCollected
                                                                       FROM dbo.tlbHumanCase
                                                                       WHERE idfHumanCase = @idfHumanCase
                                                                   );

                UPDATE dbo.tlbHumanCase
                SET idfsYNSpecimenCollected = NULL,
                    AuditUpdateUser = @AuditUser
                WHERE idfHumanCase = @idfHumanCase;

                -- Data audit
                IF @BeforeSpecimenCollectedIndicator IS NOT NULL
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser, 
                        strObject
                    )
                    SELECT @DataAuditEventId,
                           @ObjectTableID,
                           79760000000,
                           @idfHumanCase,
                           NULL,
                           @BeforeSpecimenCollectedIndicator,
                           NULL,
                           @AuditUser, 
                           @strHumanCaseId;
                END
            -- End data audit
            END
        END

        -- Set test interpretations
        IF @TestsInterpretationParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsInterpretationParametersTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestInterpretationID,
                    @TestInterpretationID = TestInterpretationID,
                    @DiseaseID = DiseaseID,
                    @InterpretedStatusTypeID = InterpretedStatusTypeID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @InterpretedByOrganizationID = InterpretedByOrganizationID,
                    @InterpretedByPersonID = InterpretedByPersonID,
                    @TestID = TestID,
                    @ValidatedStatusIndicator = ValidatedStatusIndicator,
                    @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                    @ValidatedComment = ValidatedComment,
                    @InterpretedComment = InterpretedComment,
                    @ValidatedDate = ValidatedDate,
                    @InterpretedDate = InterpretedDate,
                    @RowStatus = RowStatus,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @RowAction = RowAction
                FROM @TestsInterpretationParametersTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUser,
                                                              @DataAuditEventID,
                                                              @strHumanCaseId,
                                                              @TestInterpretationID OUTPUT,
                                                              @DiseaseID,
                                                              @InterpretedStatusTypeID,
                                                              @ValidatedByOrganizationID,
                                                              @ValidatedByPersonID,
                                                              @InterpretedByOrganizationID,
                                                              @InterpretedByPersonID,
                                                              @TestID,
                                                              @ValidatedStatusIndicator,
                                                              @ReportSessionCreatedIndicator,
                                                              @ValidatedComment,
                                                              @InterpretedComment,
                                                              @ValidatedDate,
                                                              @InterpretedDate,
                                                              @RowStatus,
                                                              @ReadOnlyIndicator,
                                                              @RowAction;

                DELETE FROM @TestsInterpretationParametersTemp
                WHERE TestInterpretationID = @RowID;
            END;
        END

        -- Set events
        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventId,
                                             @EventTypeId,
                                             @EventUserId,
                                             @EventObjectId,
                                             @EventDiseaseId,
                                             @EventSiteId,
                                             @EventInformationString,
                                             @EventLoginSiteId,
                                             @EventLocationId,
                                             @AuditUser,
                                             @DataAuditEventID, 
                                             @strHumanCaseId;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        -- Set anti-viral therapies
        IF @AntiviralTherapiesParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_HUM_ANTIVIRAL_THERAPIES_SET @idfHumanCase,
                                                      @AntiviralTherapiesParameters,
                                                      0,
                                                      @AuditUser,
                                                      @DataAuditEventID, 
                                                      @strHumanCaseId;
        END

        -- Set vaccinations
        IF @VaccinationsParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_HUM_DISEASE_VACCINATION_SET @idfHumanCase,
                                                      @VaccinationsParameters,
                                                      0,
                                                      @AuditUser,
                                                      @DataAuditEventID, 
                                                      @strHumanCaseId;
        END

        -- Set contacts
        IF @ContactsParameters IS NOT NULL
        BEGIN
            EXEC USSP_GBL_CONTACTS_SET @ContactsParameters,
                                       @CurrentSiteID,
                                       @AuditUser,
                                       @DataAuditEventID,
                                       @idfHumanCase, 
                                       @strHumanCaseId;
        END

        -- Update the human record if a date of death is provided.
        IF @datDateofDeath IS NOT NULL
        BEGIN
            DECLARE @BeforeDateOfDeath DATETIME
                =   (
                        SELECT datDateOfDeath FROM dbo.tlbHuman WHERE @idfHuman = @idfHuman
                    );

            UPDATE dbo.tlbHuman
            SET datDateofDeath = @datDateofDeath,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUser
            WHERE idfHuman = @idfHuman;

            SET @ObjectTableID = 75600000000; -- tlbHuman

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             79340000000,
             @idfHuman,
             NULL,
             @BeforeDateOfDeath,
             @datDateofDeath,
             GETDATE(),
             @AuditUser, 
             @strHumanCaseId
            );
        END

        -- Update the connected test record if a connected test ID is provided.
        IF @ConnectedTestId IS NOT NULL
        BEGIN
            SELECT @DiseaseID = T.idfsDiagnosis,
                   @HumanMasterID = HA.idfHumanActual,
                   @idfMaterial = T.idfMaterial
            FROM dbo.tlbTesting T
                INNER JOIN dbo.tlbMaterial M
                    ON M.idfMaterial = T.idfMaterial
                INNER JOIN dbo.tlbHuman H
                    ON H.idfHuman = M.idfHuman
                INNER JOIN dbo.tlbHumanActual HA
                    ON HA.idfHumanActual = H.idfHumanActual
            WHERE T.idfTesting = @ConnectedTestId;

            UPDATE dbo.tlbTesting
            SET dbo.tlbTesting.idfHumanCase = @idfHumanCase,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUser
            FROM dbo.tlbTesting T
                INNER JOIN dbo.tlbMaterial M
                    ON M.idfMaterial = T.idfMaterial
                INNER JOIN dbo.tlbHuman H
                    ON H.idfHuman = M.idfHuman
                INNER JOIN dbo.tlbHumanActual HA
                    ON HA.idfHumanActual = H.idfHumanActual
            WHERE T.idfsDiagnosis = @DiseaseID
                  AND HA.idfHumanActual = @HumanMasterID
                  AND T.idfMaterial = @idfMaterial;

            SET @ObjectTableID = 75740000000; -- tlbTesting

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             51586790000001,
             @idfHuman,
             NULL,
             NULL,
             @idfHumanCase,
             GETDATE(),
             @AuditUser, 
             @strHumanCaseId
            );
        -- End data audit
        END

        IF @@TRANCOUNT > 0
            COMMIT TRAN;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @idfHumanCase 'idfHumanCase',
               @strHumanCaseID 'strHumanCaseID',
               @idfHuman 'idfHuman';
    END TRY
    BEGIN CATCH
        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @idfHumanCase 'idfHumanCase',
               @strHumanCaseID 'strHumanCaseID',
               @idfHuman 'idfHuman';

        IF @@TRANCOUNT > 0
            ROLLBACK TRAN;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SET]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SET
--
-- Description:	Inserts or updates samples, tests, test amendments, test interpretations, 
-- transfers, batches and approvals for the laboratory module use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/19/2018 Initial release.
-- Stephen Long		10/31/2018 Added the test amendments and transfers - LUC03 and LUC07.
-- Stephen Long		01/24/2019 Added box place availabilities parameter and updates.
-- Stephen Long     02/06/2019 Removed UserPreferenceID parameter; retrieved in the stored 
--                             procedure.  Replace temporary sample ID with the database ID 
--                             on new sample record that was also marked as a favorite. 
-- Stephen Long     02/09/2019 Corrected the JSON table name for EIDSSFieldSampleID to EIDSSLocal 
--                             FieldSampleID.
-- Stephen Long     02/19/2019 Modified for removed parameters from USSP_GBL_BATCH_TEST_SET and 
--                             added parameter to USSP_LAB_TRANSFER_SET.  Removed test 
--                             interpretation parameter.
-- Stephen Long     03/10/2019 Changed temp table field names for test amendement to sync up with 
--                             the API parameter names (LUC07).
-- Stephen Long     03/20/2019 Added row action on the batch test select from JSON variable. 
--                             Added check on Favorites parameter to only process if not null.
-- Stephen Long     04/17/2019 Update to use human master ID when registering new samples, and 
--                             copy over to human (similiar to how human disease report works).
-- Stephen Long     07/09/2019 Added human master ID parameter for call to sample set.
-- Stephen Long     08/29/2019 Corrected root sample ID on call to USSP_LAB_SAMPLE_SET.
-- Stephen Long     03/30/2020 Added audit user name parameter.
-- Stephen Long     04/20/2020 Changes for LUC10 vector type and species type ID's additions.
-- Stephen Long     10/28/2020 Changed row action from nchar to char.
-- Stephen Long     09/24/2021 Removed language parameter as it is not needed.
-- Stephen Long     01/03/2022 Changed login site to NVARCHAR(20).
-- Stephen Long     01/07/2022 Added copy of human actual to human stored procedure call.
-- Stephen Long     01/25/2022 Added logic to add farm, herd and species for samples having no
--                             disease report or monitoring session association.
-- Stephen Long     03/10/2022 Changed note to comment on samples table variable.
-- Stephen Long     03/25/2022 Updated suppress select table variables for adding of vet samples.
-- Stephen Long     03/29/2022 Fix on suppress select of species.
-- Stephen Long     03/30/2022 Fix on suppress select of human copy.
-- Stephen Long     04/20/2022 Changed observation ID on batch test table variable to nullable.
-- Stephen Long     05/18/2022 Added notification processing on new transfer records.
-- Stephen Long     05/24/2022 Fix to check vector ID less than zero and not -1.
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
-- Stephen Long     10/10/2022 Added monitoring session ID check when farm or human master ID is 
--                             not null for registering new samples.
-- Stephen Long     10/11/2022 Added insert to tlbMonitoringSessionToMaterial to pick up the 
--                             correct disease on an active surveillance session.
-- Stephen Long     10/18/2022 Fix to account for human active surveillance session diseases and 
--                             transferred samples for an active surveillance session.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                             defect 5006.
-- Stephen Long     10/21/2022 Added veterinary disease report, monitoring session and vector 
--                             identifiers to the USSP_LAB_TEST_SET call.
-- Stephen Long     12/14/2022 Added null data audit event to call of herd and species set.
-- Stephen Long     12/17/2022 Fix to call of USSP_VET_SPECIES_SET for outbreak status type; 
--                             passing null.
-- Stephen Long     01/03/2023 Fix to call of USSP_AS_SAMPLE_TO_DISEASE_SET for data audit logic; 
--                             passing null.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SET]
( 
    @Samples NVARCHAR(MAX) = NULL,
    @BatchTests NVARCHAR(MAX) = NULL,
    @Tests NVARCHAR(MAX) = NULL,
    @TestAmendments NVARCHAR(MAX) = NULL,
    @Transfers NVARCHAR(MAX) = NULL,
    @FreezerBoxLocationAvailabilities NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @Favorites XML = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @KeyId BIGINT = 0;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX),
    ID BIGINT NULL
);
DECLARE @SuppressSelect2 TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
DECLARE @RowID BIGINT,
        @RowStatus INT,
        @RowAction CHAR(1),
        @SampleID BIGINT,
        @SampleTypeID BIGINT,
        @RootSampleID BIGINT = NULL,
        @ParentSampleID BIGINT = NULL,
        @HumanMasterID BIGINT = NULL,
        @HumanID BIGINT = NULL,
        @FarmMasterID BIGINT = NULL,
        @FarmID BIGINT = NULL,
        @SpeciesID BIGINT = NULL,
        @AnimalID BIGINT = NULL,
        @VectorID BIGINT = NULL,
        @MonitoringSessionID BIGINT = NULL,
        @VectorSessionID BIGINT = NULL,
        @HumanDiseaseReportID BIGINT = NULL,
        @VeterinaryDiseaseReportID BIGINT = NULL,
        @FunctionalAreaID BIGINT = NULL,
        @FreezerSubdivisionID BIGINT = NULL,
        @StorageBoxPlace NVARCHAR(200) = NULL,
        @CollectionDate DATETIME2 = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @SentDate DATETIME2 = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @EnteredDate DATETIME2 = NULL,
        @OutOfRepositoryDate DATETIME2 = NULL,
        @MarkedForDispositionByPersonID BIGINT = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @SiteID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @SampleKindTypeID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME2 = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @PreviousSampleStatusTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @DestructionMethodTypeID BIGINT = NULL,
        @DestructionDate DATETIME2 = NULL,
        @DestroyedByPersonID BIGINT = NULL,
        @Note NVARCHAR(500) = NULL,
        @Comment NVARCHAR(500) = NULL,
        @BatchTestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @BatchStatusTypeID BIGINT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @PerformedByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @ObservationID BIGINT = NULL,
        @PerformedDate DATETIME2 = NULL,
        @ValidationDate DATETIME2 = NULL,
        @EIDSSBatchTestID NVARCHAR(200) = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @TestRequested NVARCHAR(200) = NULL,
        @TestID BIGINT,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @PreviousTestStatusTypeID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ConcludedDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @DiseaseID BIGINT = NULL,
        @FavoriteIndicator INT = NULL,
        @TestAmendmentID BIGINT,
        @AmendedByOrganizationID BIGINT = NULL,
        @AmendedByPersonID BIGINT = NULL,
        @AmendmentDate DATETIME2 = NULL,
        @OldTestResultTypeID BIGINT = NULL,
        @ChangedTestResultTypeID BIGINT = NULL,
        @OldNote NVARCHAR(500) = NULL,
        @ChangedNote NVARCHAR(500) = NULL,
        @ReasonForAmendment NVARCHAR(500),
        @TransferID BIGINT,
        @EIDSSTransferID NVARCHAR(200) = NULL,
        @TransferStatusTypeID BIGINT = NULL,
        @TransferredFromOrganizationID BIGINT = NULL,
        @TransferredToOrganizationID BIGINT = NULL,
        @SentByPersonID BIGINT = NULL,
        @TransferDate DATETIME2 = NULL,
        @BoxPlaceAvailability NVARCHAR(MAX),
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
        @NewHumanID BIGINT = NULL,
        @VectorTypeID BIGINT = NULL,
        @SpeciesTypeID BIGINT = NULL,
        @EIDSSVectorID NVARCHAR(50) = NULL,
        @MonitoringSessionToMaterialID BIGINT = NULL;

DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NOT NULL,
    RootSampleID BIGINT NULL,
    ParentSampleID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    HumanID BIGINT NULL,
    FarmMasterID BIGINT NULL,
    FarmID BIGINT NULL,
    SpeciesID BIGINT NULL,
    AnimalID BIGINT NULL,
    MonitoringSessionID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    CollectedByOrganizationID BIGINT NULL,
    MainTestID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    SentDate DATETIME2 NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    VectorSessionID BIGINT NULL,
    VectorID BIGINT NULL,
    FreezerSubdivisionID BIGINT NULL,
    StorageBoxPlace NVARCHAR(200) NULL,
    SampleStatusTypeID BIGINT NULL,
    PreviousSampleStatusTypeID BIGINT NULL,
    FunctionalAreaID BIGINT NULL,
    DestroyedByPersonID BIGINT NULL,
    EnteredDate DATETIME2 NULL,
    DestructionDate DATETIME2 NULL,
    EIDSSLaboratorySampleID NVARCHAR(200) NULL,
    Comment NVARCHAR(500) NULL,
    SiteID BIGINT NULL,
    RowStatus INT NOT NULL,
    SentToOrganizationID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    BirdStatusTypeID BIGINT NULL,
    HumanDiseaseReportID BIGINT NULL,
    VeterinaryDiseaseReportID BIGINT NULL,
    AccessionDate DATETIME2 NULL,
    AccessionConditionTypeID BIGINT NULL,
    AccessionComment NVARCHAR(200) NULL,
    AccessionByPersonID BIGINT NULL,
    DestructionMethodTypeID BIGINT NULL,
    CurrentSiteID BIGINT NULL,
    SampleKindTypeID BIGINT NULL,
    MarkedForDispositionByPersonID BIGINT NULL,
    OutOfRepositoryDate DATETIME2 NULL,
    DiseaseID BIGINT NULL,
    VectorTypeID BIGINT NULL,
    SpeciesTypeID BIGINT NULL,
    FavoriteIndicator BIT NOT NULL,
    RowAction INT NULL
);
DECLARE @BatchTestsTemp TABLE
(
    BatchTestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    BatchStatusTypeID BIGINT NULL,
    PerformedByOrganizationID BIGINT NULL,
    PerformedByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ObservationID BIGINT NULL,
    SiteID BIGINT NOT NULL,
    PerformedDate DATETIME2 NULL,
    ValidationDate DATETIME2 NULL,
    EIDSSBatchTestID NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    TestRequested NVARCHAR(200) NULL,
    RowAction INT NULL
);
DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    PreviousTestStatusTypeID BIGINT NULL,
    DiseaseID BIGINT NOT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Note NVARCHAR(500) NULL,
    RowStatus INT NOT NULL,
    StartedDate DATETIME2 NULL,
    ConcludedDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
   	HumanDiseaseReportID BIGINT NULL, 
    VeterinaryDiseaseReportID BIGINT NULL, 
    MonitoringSessionID BIGINT NULL, 
    VectorID BIGINT NULL,
    RowAction INT NULL
);
DECLARE @TestAmendmentsTemp TABLE
(
    TestAmendmentID BIGINT NOT NULL,
    TestID BIGINT NOT NULL,
    AmendedByOrganizationID BIGINT NULL,
    AmendedByPersonID BIGINT NULL,
    AmendmentDate DATETIME2 NULL,
    OldTestResultTypeID BIGINT NULL,
    ChangedTestResultTypeID BIGINT NULL,
    OldNote NVARCHAR(500) NULL,
    ChangedNote NVARCHAR(500) NULL,
    ReasonForAmendment NVARCHAR(500) NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @TransfersTemp TABLE
(
    TransferID BIGINT NOT NULL,
    SampleID BIGINT NOT NULL,
    EIDSSTransferID NVARCHAR(200) NULL,
    TransferStatusTypeID BIGINT NULL,
    TransferredFromOrganizationID BIGINT NULL,
    TransferredToOrganizationID BIGINT NULL,
    SentByPersonID BIGINT NULL,
    TransferDate DATETIME2 NULL,
    PurposeOfTransfer NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    TestRequested NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @FreezerBoxLocationAvailabilitiesTemp TABLE
(
    FreezerSubdivisionID BIGINT NOT NULL,
    BoxPlaceAvailability NVARCHAR(MAX) NOT NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @FavoritesString VARCHAR(MAX);

BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                HumanMasterID BIGINT,
                HumanID BIGINT,
                FarmMasterID BIGINT,
                FarmID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                MonitoringSessionID BIGINT,
                CollectedByPersonID BIGINT,
                CollectedByOrganizationID BIGINT,
                MainTestID BIGINT,
                CollectionDate DATETIME2,
                SentDate DATETIME2,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                VectorSessionID BIGINT,
                VectorID BIGINT,
                FreezerSubdivisionID BIGINT,
                StorageBoxPlace NVARCHAR(200),
                SampleStatusTypeID BIGINT,
                PreviousSampleStatusTypeID BIGINT,
                FunctionalAreaID BIGINT,
                DestroyedByPersonID BIGINT,
                EnteredDate DATETIME2,
                DestructionDate DATETIME2,
                EIDSSLaboratorySampleID NVARCHAR(200),
                Comment NVARCHAR(500),
                SiteID BIGINT,
                RowStatus INT,
                SentToOrganizationID BIGINT,
                ReadOnlyIndicator BIT,
                BirdStatusTypeID BIGINT,
                HumanDiseaseReportID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                AccessionDate DATETIME2,
                AccessionConditionTypeID BIGINT,
                AccessionComment NVARCHAR(200),
                AccessionByPersonID BIGINT,
                DestructionMethodTypeID BIGINT,
                CurrentSiteID BIGINT,
                SampleKindTypeID BIGINT,
                MarkedForDispositionByPersonID BIGINT,
                OutOfRepositoryDate DATETIME2,
                DiseaseID BIGINT,
                VectorTypeID BIGINT,
                SpeciesTypeID BIGINT,
                FavoriteIndicator BIT,
                RowAction INT
            );

        INSERT INTO @BatchTestsTemp
        SELECT *
        FROM
            OPENJSON(@BatchTests)
            WITH
            (
                BatchTestID BIGINT,
                TestNameTypeID BIGINT,
                BatchStatusTypeID BIGINT,
                PerformedByOrganizationID BIGINT,
                PerformedByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ObservationID BIGINT,
                SiteID BIGINT,
                PerformedDate DATETIME2,
                ValidationDate DATETIME2,
                EIDSSBatchTestID NVARCHAR(200),
                RowStatus INT,
                ResultEnteredByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                TestRequested NVARCHAR(200),
                RowAction INT
            );

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@Tests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                PreviousTestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Note NVARCHAR(500),
                RowStatus INT,
                StartedDate DATETIME2,
                ConcludedDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                HumanDiseaseReportID BIGINT, 
                VeterinaryDiseaseReportID BIGINT, 
                MonitoringSessionID BIGINT, 
                VectorID BIGINT,
                RowAction INT
            );

        INSERT INTO @TestAmendmentsTemp
        SELECT *
        FROM
            OPENJSON(@TestAmendments)
            WITH
            (
                TestAmendmentID BIGINT,
                TestID BIGINT,
                AmendedByOrganizationID BIGINT,
                AmendedByPersonID BIGINT,
                AmendmentDate DATETIME2,
                OldTestResultTypeID BIGINT,
                ChangedTestResultTypeID BIGINT,
                OldNote NVARCHAR(500),
                ChangedNote NVARCHAR(500),
                ReasonForAmendment NVARCHAR(500),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @TransfersTemp
        SELECT *
        FROM
            OPENJSON(@Transfers)
            WITH
            (
                TransferID BIGINT,
                SampleID BIGINT,
                EIDSSTransferID NVARCHAR(200),
                TransferStatusTypeID BIGINT,
                TransferredFromOrganizationID BIGINT,
                TransferredToOrganizationID BIGINT,
                SentByPersonID BIGINT,
                TransferDate DATETIME2,
                PurposeOfTransfer NVARCHAR(200),
                SiteID BIGINT,
                TestRequested NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @FreezerBoxLocationAvailabilitiesTemp
        SELECT *
        FROM
            OPENJSON(@FreezerBoxLocationAvailabilities)
            WITH
            (
                FreezerSubdivisionID BIGINT,
                BoxPlaceAvailability NVARCHAR(MAX)
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        SET @FavoritesString = CONVERT(NVARCHAR(MAX), @Favorites, 1);

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @HumanMasterID = HumanMasterID,
                @HumanID = HumanID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @VectorID = VectorID,
                @MonitoringSessionID = MonitoringSessionID,
                @VectorSessionID = VectorSessionID,
                @HumanDiseaseReportID = HumanDiseaseReportID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID,
                @CollectionDate = CollectionDate,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @SentDate = SentDate,
                @SentToOrganizationID = SentToOrganizationID,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @EIDSSLaboratorySampleID = EIDSSLaboratorySampleID,
                @SiteID = SiteID,
                @FunctionalAreaID = FunctionalAreaID,
                @FreezerSubdivisionID = FreezerSubdivisionID,
                @StorageBoxPlace = StorageBoxPlace,
                @EnteredDate = EnteredDate,
                @OutOfRepositoryDate = OutOfRepositoryDate,
                @DestructionDate = DestructionDate,
                @DestructionMethodTypeID = DestructionMethodTypeID,
                @DestroyedByPersonID = DestroyedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @AccessionDate = AccessionDate,
                @AccessionConditionTypeID = AccessionConditionTypeID,
                @AccessionByPersonID = AccessionByPersonID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @PreviousSampleStatusTypeID = PreviousSampleStatusTypeID,
                @AccessionComment = AccessionComment,
                @Comment = Comment,
                @CurrentSiteID = CurrentSiteID,
                @SampleKindTypeID = SampleKindTypeID,
                @MarkedForDispositionByPersonID = MarkedForDispositionByPersonID,
                @DiseaseID = DiseaseID,
                @VectorTypeID = VectorTypeID,
                @SpeciesTypeID = SpeciesTypeID,
                @FavoriteIndicator = FavoriteIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @SamplesTemp;

            IF @RowAction = 1
               OR @RowAction = 5
            BEGIN
                IF @FarmMasterID IS NOT NULL -- Registering new veterinary sample with either no disease report or possibly no monitoring session.
                BEGIN
                    IF @FarmID IS NULL
                    BEGIN
                        DECLARE @NewFarmOwnerID BIGINT,
                                @FlockOrHerdID BIGINT;

                        INSERT INTO @SuppressSelect2
                        EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                                       @FarmMasterID,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       @HumanMasterID,
                                                       @FarmID OUTPUT,
                                                       @NewFarmOwnerID OUTPUT;

                        IF @MonitoringSessionID IS NOT NULL -- New farm added to the veterinary active surveillance session.
                        BEGIN
                            UPDATE dbo.tlbFarm
                            SET idfMonitoringSession = @MonitoringSessionID
                            WHERE idfFarm = @FarmID;
                        END

                        SET @HumanID = @NewFarmOwnerID;
                        SET @HumanMasterID = NULL;
                    END

                    IF @SpeciesID IS NULL -- Adding new flock or herd and species to an existing farm.
                    BEGIN
                        INSERT INTO @SuppressSelect2
                        EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
                                                      NULL, 
                                                      @FlockOrHerdID OUTPUT,
                                                      NULL,
                                                      @FarmID,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      0,
                                                      1;

                        INSERT INTO @SuppressSelect
                        EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
                                                         NULL, 
                                                         @SpeciesID OUTPUT,
                                                         NULL,
                                                         @SpeciesTypeID,
                                                         @FlockOrHerdID,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         0,
                                                         1, 
                                                         NULL;
                    END
                END
                ELSE
                BEGIN
                    IF @HumanMasterID IS NOT NULL -- Registering new human sample with either no disease report or possibly no active surveillance session.
                    BEGIN
                        INSERT INTO @SuppressSelect2
                        EXECUTE dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @HumanMasterID,
                                                                   @HumanID OUTPUT,
                                                                   @ReturnCode OUTPUT,
                                                                   @ReturnMessage OUTPUT;

                        IF @MonitoringSessionID IS NOT NULL -- New person added to the human active surveillance session.
                        BEGIN
                            UPDATE dbo.tlbHuman
                            SET idfMonitoringSession = @MonitoringSessionID
                            WHERE idfHuman = @HumanID;
                        END
                    END
                END
            END;

            IF @VectorID < 0
               AND @SpeciesTypeID IS NOT NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @VectorID OUTPUT;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector',
                                                   @EIDSSVectorID OUTPUT,
                                                   NULL;

                INSERT INTO dbo.tlbVector
                (
                    idfVector,
                    strVectorID,
                    idfCollectedByOffice,
                    idfCollectedByPerson,
                    datCollectionDateTime,
                    idfsVectorType,
                    idfsVectorSubType,
                    intQuantity,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@VectorID,
                 @EIDSSVectorID,
                 @CollectedByOrganizationID,
                 @CollectedByPersonID,
                 @CollectionDate,
                 @VectorTypeID,
                 @SpeciesTypeID,
                 1  ,
                 0  ,
                 GETDATE(),
                 @AuditUserName
                );
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_SAMPLE_SET @SampleID OUTPUT,
                                            @SampleTypeID,
                                            @RootSampleID,
                                            @ParentSampleID,
                                            @HumanMasterID,
                                            @HumanID,
                                            @SpeciesID,
                                            @AnimalID,
                                            @VectorID,
                                            @MonitoringSessionID,
                                            @VectorSessionID,
                                            @HumanDiseaseReportID,
                                            @VeterinaryDiseaseReportID,
                                            @CollectionDate,
                                            @CollectedByPersonID,
                                            @CollectedByOrganizationID,
                                            @SentDate,
                                            @SentToOrganizationID,
                                            @EIDSSLocalOrFieldSampleID,
                                            @EIDSSLaboratorySampleID,
                                            @SiteID,
                                            @FunctionalAreaID,
                                            @FreezerSubdivisionID,
                                            @StorageBoxPlace,
                                            @EnteredDate,
                                            @OutOfRepositoryDate,
                                            @MarkedForDispositionByPersonID,
                                            @DestructionDate,
                                            @DestructionMethodTypeID,
                                            @DestroyedByPersonID,
                                            @ReadOnlyIndicator,
                                            @AccessionDate,
                                            @AccessionConditionTypeID,
                                            @AccessionByPersonID,
                                            @SampleStatusTypeID,
                                            @PreviousSampleStatusTypeID,
                                            @AccessionComment,
                                            @Comment,
                                            @CurrentSiteID,
                                            @SampleKindTypeID,
                                            @DiseaseID,
                                            @RowStatus,
                                            @RowAction,
                                            @AuditUserName;

            IF (
                   @RowAction = 1 -- Register new sample
                   OR @RowAction = 5 -- Insert accession
               )
               AND @MonitoringSessionID IS NOT NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                          NULL, 
                                                          0,
                                                          @MonitoringSessionID,
                                                          @SampleID,
                                                          @DiseaseID,
                                                          @SampleTypeID,
                                                          0,
                                                          1;
            END
            ELSE IF @RowAction = 7
                    AND @MonitoringSessionID IS NOT NULL -- Transfer a sample (creates a new sample record)
            BEGIN
                DECLARE @SamplesToDiseaseRowID BIGINT;
                DECLARE @SamplesToDiseasesTemp TABLE
                (
                    MonitoringSessionToMaterialID BIGINT NOT NULL,
                    MonitoringSessionID BIGINT NULL,
                    SampleID BIGINT NOT NULL,
                    SampleTypeID BIGINT NULL,
                    DiseaseID BIGINT NOT NULL
                );

                INSERT INTO @SamplesToDiseasesTemp
                SELECT idfMonitoringSessionToMaterial,
                       idfMonitoringSession,
                       idfMaterial,
                       idfsSampleType,
                       idfsDisease
                FROM dbo.tlbMonitoringSessionToMaterial
                WHERE idfMaterial = @RootSampleID
                      AND intRowStatus = 0;

                WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
                BEGIN
                    SELECT TOP 1
                        @SamplesToDiseaseRowID = MonitoringSessionToMaterialID,
                        @MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
                        @DiseaseID = DiseaseID
                    FROM @SamplesToDiseasesTemp;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                              @MonitoringSessionToMaterialID,
                                                              @MonitoringSessionID,
                                                              @SampleID,
                                                              @DiseaseID,
                                                              @SampleTypeID,
                                                              0,
                                                              1;

                    DELETE FROM @SamplesToDiseasesTemp
                    WHERE MonitoringSessionToMaterialID = @SamplesToDiseaseRowID;
                END;
            END

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @TransfersTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            IF @FavoriteIndicator = 1
                SELECT @FavoritesString = REPLACE(@FavoritesString, @RowID, @SampleID);

            --POCO does not like the XML modify command; used string and replace for now.
            --SELECT @Favorites = @Favorites.modify('replace value of (/Favorites/Favorite/@SampleID[.=sql:variable("@RowID")])[1] with sql:variable("@SampleID")');
            IF @SampleID <> @RootSampleID
               AND (
                       @RowAction = 4
                       OR @RowAction = 5
                   )
            BEGIN
                DECLARE @TransferIDTemp AS BIGINT;

                SELECT @TransferIDTemp = tro.idfTransferOut
                FROM dbo.tlbTransferOutMaterial tom
                    INNER JOIN dbo.tlbTransferOUT AS tro
                        ON tro.idfTransferOut = tom.idfTransferOut
                WHERE tom.idfMaterial = @RootSampleID;

                UPDATE dbo.tlbTransferOUT
                SET idfsTransferStatus = 10001001,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfTransferOut = @TransferIDTemp;
            END;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @BatchTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = BatchTestID,
                @BatchTestID = BatchTestID,
                @TestNameTypeID = TestNameTypeID,
                @BatchStatusTypeID = BatchStatusTypeID,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @PerformedByPersonID = PerformedByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ObservationID = ObservationID,
                @SiteID = SiteID,
                @PerformedDate = PerformedDate,
                @ValidationDate = ValidationDate,
                @EIDSSBatchTestID = EIDSSBatchTestID,
                @RowStatus = RowStatus,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @TestRequested = TestRequested,
                @RowAction = RowAction
            FROM @BatchTestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_BATCH_TEST_SET @BatchTestID OUTPUT,
                                                @TestNameTypeID,
                                                @BatchStatusTypeID,
                                                @PerformedByOrganizationID,
                                                @PerformedByPersonID,
                                                @ValidatedByOrganizationID,
                                                @ValidatedByPersonID,
                                                @ObservationID,
                                                @SiteID,
                                                @PerformedDate,
                                                @ValidationDate,
                                                @EIDSSBatchTestID,
                                                @RowStatus,
                                                @ResultEnteredByPersonID,
                                                @ResultEnteredByOrganizationID,
                                                @TestRequested,
                                                @RowAction,
                                                @AuditUserName;

            UPDATE @TestsTemp
            SET BatchTestID = @BatchTestID
            WHERE BatchTestID = @RowID;

            DELETE FROM @BatchTestsTemp
            WHERE BatchTestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @PreviousTestStatusTypeID = PreviousTestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @BatchTestID = BatchTestID,
                @ObservationID = ObservationID,
                @TestNumber = TestNumber,
                @Note = Note,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ConcludedDate = ConcludedDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
   				@HumanDiseaseReportID = HumanDiseaseReportID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID,
                @MonitoringSessionID = MonitoringSessionID, 
                @VectorID = VectorID,
                @RowAction = RowAction
            FROM @TestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_TEST_SET @TestID,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @PreviousTestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          @BatchTestID,
                                          @ObservationID,
                                          @TestNumber,
                                          @Note,
                                          @RowStatus,
                                          @StartedDate,
                                          @ConcludedDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @HumanDiseaseReportID, 
                                          @VeterinaryDiseaseReportID,
                                          @MonitoringSessionID, 
                                          @VectorID, 
                                          @RowAction,
                                          @AuditUserName;

            UPDATE @TestAmendmentsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestAmendmentsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestAmendmentID,
                @TestAmendmentID = TestAmendmentID,
                @TestID = TestID,
                @AmendedByOrganizationID = AmendedByOrganizationID,
                @AmendedByPersonID = AmendedByPersonID,
                @AmendmentDate = AmendmentDate,
                @OldTestResultTypeID = OldTestResultTypeID,
                @ChangedTestResultTypeID = ChangedTestResultTypeID,
                @OldNote = OldNote,
                @ChangedNote = ChangedNote,
                @ReasonForAmendment = ReasonForAmendment,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @TestAmendmentsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_AMENDMENT_SET @TestAmendmentID,
                                                    @TestID,
                                                    @AmendedByOrganizationID,
                                                    @AmendedByPersonID,
                                                    @AmendmentDate,
                                                    @OldTestResultTypeID,
                                                    @ChangedTestResultTypeID,
                                                    @OldNote,
                                                    @ChangedNote,
                                                    @ReasonForAmendment,
                                                    @RowStatus,
                                                    @RowAction,
                                                    @AuditUserName;

            DELETE FROM @TestAmendmentsTemp
            WHERE TestAmendmentID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TransfersTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TransferID,
                @TransferID = TransferID,
                @SampleID = SampleID,
                @EIDSSTransferID = EIDSSTransferID,
                @TransferStatusTypeID = TransferStatusTypeID,
                @TransferredFromOrganizationID = TransferredFromOrganizationID,
                @TransferredToOrganizationID = TransferredToOrganizationID,
                @SentByPersonID = SentByPersonID,
                @TransferDate = TransferDate,
                @Note = PurposeOfTransfer,
                @SiteID = SiteID,
                @TestRequested = TestRequested,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @TransfersTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_TRANSFER_SET @TransferID,
                                              @SampleID,
                                              @EIDSSTransferID,
                                              @TransferStatusTypeID,
                                              @TransferredFromOrganizationID,
                                              @TransferredToOrganizationID,
                                              @SentByPersonID,
                                              @TransferDate,
                                              @Note,
                                              @SiteID,
                                              @TestRequested,
                                              @RowStatus,
                                              @RowAction,
                                              @AuditUserName;

            IF @RowAction = 1
            BEGIN
                UPDATE @EventsTemp
                SET ObjectId = @TransferID
                WHERE ObjectId = @RowID;
            END;

            DELETE FROM @TransfersTemp
            WHERE TransferID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FreezerBoxLocationAvailabilitiesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FreezerSubdivisionID,
                @FreezerSubdivisionID = FreezerSubdivisionID,
                @BoxPlaceAvailability = BoxPlaceAvailability
            FROM @FreezerBoxLocationAvailabilitiesTemp;

            UPDATE dbo.tlbFreezerSubdivision
            SET BoxPlaceAvailability = @BoxPlaceAvailability,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfSubdivision = @FreezerSubdivisionID;

            DELETE FROM @FreezerBoxLocationAvailabilitiesTemp
            WHERE FreezerSubdivisionID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect2
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @Favorites IS NOT NULL
        BEGIN
            DECLARE @UserPreferenceID AS BIGINT;

            SELECT @UserPreferenceID =
            (
                SELECT UserPreferenceUID
                FROM dbo.UserPreference
                WHERE idfUserID = @UserID
                      AND ModuleConstantID = 10508006
                      AND intRowStatus = 0
            );

            IF @UserPreferenceID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET N'UserPreference',
                                                  @UserPreferenceID OUTPUT;

                INSERT INTO dbo.UserPreference
                (
                    UserPreferenceUID,
                    idfUserID,
                    ModuleConstantID,
                    PreferenceDetail,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@UserPreferenceID, @UserID, 10508006, @FavoritesString, 0, @AuditUserName, GETDATE());
            END
            ELSE
            BEGIN
                UPDATE dbo.UserPreference
                SET idfUserID = @UserID,
                    PreferenceDetail = @FavoritesString,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE UserPreferenceUID = @UserPreferenceID;
            END
        END;

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage,
               @KeyId AS KeyId,
               'Labratory' AS KeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_REF_AccessRule_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_AccessRule_SET
--
-- Description:	Inserts or updates an access rule for configurable filtration.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		06/03/2022 Initial release.
-- Stephen Long     06/04/2022 Correction on reference type ID, and changed to use API save 
--                             response model with key ID and key name.
-- Stephen Long     12/28/2022 Fix to source system key value ID.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_AccessRule_SET] 
(
	@AccessRuleID BIGINT = NULL,
	@AccessRuleName VARCHAR(200),
	@strNationalName NVARCHAR(200),
	@LangId NVARCHAR(50),
	@intOrder INT = NULL,
	@BorderingAreaRuleIndicator BIT = 0,
	@DefaultRuleIndicator BIT = 0,
	@ReciprocalRuleIndicator BIT = 0,
	@GrantingActorSiteGroupID BIGINT = NULL,
	@GrantingActorSiteID BIGINT = NULL,
	@AccessToPersonalDataPermissionIndicator BIT = 0,
	@AccessToGenderAndAgeDataPermissionIndicator BIT = 0,
	@CreatePermissionIndicator BIT = 0,
	@DeletePermissionIndicator BIT = 0,
	@ReadPermissionIndicator BIT = 0,
	@WritePermissionIndicator BIT = 0,
	@AdministrativeLevelTypeID BIGINT = NULL,
	@RowStatus INT = 0,
	@ReceivingActors NVARCHAR(MAX) = NULL,
	@AuditUser NVARCHAR(100)
	
)
AS
BEGIN
	DECLARE @ReturnCode INT = 0
	DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS'

	DECLARE @RowAction CHAR = NULL,
			@RowID BIGINT = NULL,
			@AccessRuleActorID BIGINT = NULL,
			@GrantingActorIndicator BIT = NULL,
			@ActorSiteGroupID BIGINT = NULL,
			@ActorSiteID BIGINT = NULL,
			@ActorEmployeeGroupID BIGINT = NULL,
			@ActorUserID BIGINT = NULL;

	DECLARE @SuppressSelect TABLE 
	(
		ReturnCode INT,
		ReturnMessage VARCHAR(200)
	)
	
	DECLARE @ActorsTemp TABLE (
		AccessRuleActorID BIGINT NOT NULL
		,GrantingActorIndicator BIT NOT NULL
		,ActorSiteGroupID BIGINT NULL
		,ActorSiteID BIGINT NULL
		,ActorEmployeeGroupID BIGINT NULL
		,ActorUserID BIGINT NULL
		,RowStatus INT NOT NULL
		,RowAction INT NULL
		)


		INSERT INTO @ActorsTemp
		SELECT *
		FROM OPENJSON(@ReceivingActors) WITH 
		(
			AccessRuleActorID BIGINT,
			GrantingActorIndicator BIT,
			ActorSiteGroupID BIGINT,
			ActorSiteID BIGINT,
			ActorEmployeeGroupID BIGINT,
			ActorUserID BIGINT,
			RowStatus INT,
			RowAction INT
		);

	DECLARE @DuplicateDefault	INT = 0 -- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.
	DECLARE @intOrderNew INT = (SELECT MAX(intOrder) + 10 FROM dbo.trtBaseReference WHERE idfsReferenceType = 19000537)

	-- Set intOrder if it was passed as null
	IF @intOrder IS NULL
	BEGIN
		SET @intOrder = @intOrderNew

	END

	BEGIN TRY
				
		IF @AccessRuleID IS NULL
		BEGIN -- this is an insert.  check if the strDefault is a duplicate
			IF EXISTS (SELECT * FROM dbo.trtBaseReference WHERE strDefault = @AccessRuleName AND idfsReferenceType = 19000537 AND intRowStatus = 0)
			BEGIN
				SET @DuplicateDefault = 1
			END
		END
		ELSE
			BEGIN -- this is an update.  check if the strDefault is a duplicate
				IF EXISTS (SELECT * FROM dbo.trtBaseReference WHERE idfsBaseReference <> @AccessRuleID AND strDefault = @AccessRuleName AND idfsReferenceType = 19000537 AND intRowStatus = 0)
				BEGIN
					SET @DuplicateDefault = 1
				END
			END

		IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate
		BEGIN
			SELECT @ReturnMessage = 'DOES EXIST'
		END

		ELSE -- there is no duplicate, so continue
		BEGIN
			
			EXEC dbo.USP_GBL_BaseReference_SET
				@ReferenceID = @AccessRuleID OUTPUT, 
				@ReferenceType = 19000537, 
				@LangID = @LangID, 
				@DefaultName = @AccessRuleName, 
				@NationalName = @strNationalName, 
				@HACode = NULL, 
				@Order = @intOrder, 
				@System = 0,
				@User = @AuditUser

			IF EXISTS (SELECT * FROM dbo.AccessRule WHERE AccessRuleID = @AccessRuleID) -- there is a record, so update it
			BEGIN

				UPDATE dbo.AccessRule
				SET DefaultRuleIndicator = @DefaultRuleIndicator,
					BorderingAreaRuleIndicator = @BorderingAreaRuleIndicator,
					ReciprocalRuleIndicator = @ReciprocalRuleIndicator,
					GrantingActorSiteGroupID = @GrantingActorSiteGroupID,
					GrantingActorSiteID = @GrantingActorSiteID,
					ReadPermissionIndicator = @ReadPermissionIndicator,
					AccessToPersonalDataPermissionIndicator = @AccessToPersonalDataPermissionIndicator,
					AccessToGenderAndAgeDataPermissionIndicator = @AccessToGenderAndAgeDataPermissionIndicator,
					CreatePermissionIndicator = @CreatePermissionIndicator,
					WritePermissionIndicator = @WritePermissionIndicator,
					DeletePermissionIndicator = @DeletePermissionIndicator,
					AdministrativeLevelTypeID = @AdministrativeLevelTypeID,
					intRowStatus = @RowStatus,
					AuditUpdateUser = @AuditUser,
					AuditUpdateDTM = GETDATE()
			WHERE AccessRuleID = @AccessRuleID;
				
			END	
			
			ELSE -- There is no record, so insert it
			
			BEGIN

				INSERT INTO dbo.AccessRule 
				(
					AccessRuleID,
					DefaultRuleIndicator,
					BorderingAreaRuleIndicator,
					ReciprocalRuleIndicator,
					GrantingActorSiteGroupID,
					GrantingActorSiteID,
					ReadPermissionIndicator,
					AccessToPersonalDataPermissionIndicator,
					AccessToGenderAndAgeDataPermissionIndicator,
					CreatePermissionIndicator,
					WritePermissionIndicator,
					DeletePermissionIndicator,
					AdministrativeLevelTypeID,
					intRowStatus,
					AuditCreateDTM,
					AuditCreateUser,
					SourceSystemNameID,
					SourceSystemKeyValue
				)
				VALUES 
				(
					@AccessRuleID,
					@DefaultRuleIndicator,
					@BorderingAreaRuleIndicator,
					@ReciprocalRuleIndicator,
					@GrantingActorSiteGroupID,
					@GrantingActorSiteID,
					@ReadPermissionIndicator,
					@AccessToPersonalDataPermissionIndicator,
					@AccessToGenderAndAgeDataPermissionIndicator,
					@CreatePermissionIndicator,
					@WritePermissionIndicator,
					@DeletePermissionIndicator,
					@AdministrativeLevelTypeID,
					@RowStatus,
					GETDATE(),
					@AuditUser,
					10519001,
					'[{"AccessRuleID":' + CAST(@AccessRuleID AS NVARCHAR(24)) + '}]'
				)

			END

			WHILE EXISTS (SELECT * FROM @ActorsTemp)
			BEGIN
				SELECT TOP 1 @RowID = AccessRuleActorID,
							 @AccessRuleActorID = AccessRuleActorID,
							 @GrantingActorIndicator = GrantingActorIndicator,
							 @ActorSiteGroupID = ActorSiteGroupID,
							 @ActorSiteID = ActorSiteID,
							 @ActorEmployeeGroupID = ActorEmployeeGroupID,
							 @ActorUserID = ActorUserID,
							 @RowStatus = RowStatus,
							 @RowAction = RowAction
				FROM @ActorsTemp;

				INSERT INTO @SuppressSelect
				EXECUTE dbo.USSP_ADMIN_ACCESS_RULE_ACTOR_SET 
					@AccessRuleActorID = @AccessRuleActorID OUTPUT,
					@AccessRuleID = @AccessRuleID,
					@GrantingActorIndicator = @GrantingActorIndicator,
					@ActorSiteGroupID = @ActorSiteGroupID,
					@ActorSiteID = @ActorSiteID,
					@ActorEmployeeGroupID = @ActorEmployeeGroupID,
					@ActorUserID = @ActorUserID,
					@RowStatus = @RowStatus,
					@RowAction = @RowAction,
					@AuditUser = @AuditUser

				DELETE
				FROM @ActorsTemp
				WHERE AccessRuleActorID = @RowID
			END;

		END

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage
			,@AccessRuleID KeyId
			,'AccessRuleID' KeyIdName;
	END TRY  
	BEGIN CATCH 
	declare @error int, @message varchar(4000), @xstate int;
        select @error = ERROR_NUMBER(), @message = ERROR_MESSAGE(), @xstate = XACT_STATE();
	        if @xstate = -1
            rollback;
        --if @xstate = 1 and @trancount = 0
        --    rollback
        --if @xstate = 1 and @trancount > 0
        --    rollback transaction usp_my_procedure_name;

        raiserror ('usp_my_procedure_name: %d: %s', 16, 1, @error, @message) ;

	THROW;
	END CATCH;

END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SET]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SET
--
-- Description:	Inserts or updates veterinary surveillance session for the veterinary active surveillance 
-- session use cases.
--                      
-- Revision History:
-- Name					Date       Change Detail
-- ---------------		---------- -------------------------------------------------------------------
-- Mike Kornegay		02/02/2022 Initial release. (Copied from USP_VET_DISEASE_REPORT_SET).
-- Mike Kornegay		02/14/2022 Correct problem with saving actions - retrieve monitoring session id first.
-- Mike Kornegay		02/15/2022 Removed @SpeciesTypeID because this was the same as @ReportTypeID
-- Mike Kornegay		02/16/2022 Added back the animals temp to add or update animals 
--							  before samples are written.
-- Mike Kornegay		02/26/2022 Fixed FlockOrHerd section not passing the FarmID.
-- Mike Kornegay		03/08/2022 Removed MonitoringSessionID from samples - should come from new or update key
--							  and added @LocationID
-- Mike Kornegay		03/11/2022 Refactored Aggregate Info sections.
-- Mike Kornegay		03/18/2022 Corrected parameters for USSP_VCT_MONITORING_SESSION_SUMMARY_SET.
-- Mike Kornegay		03/19/2022 Corrected issue with farm copy for aggregate farms and saving of aggregate diseases.
-- Mike Kornegay		03/21/2022 Corrected defect in reading aggregate summary temp table.
-- Mani Govindarajan	05/26/2022 Disassociate MonitoringSession with Farm in tlbFarm Table  search for comment -- disassociate farm with session
-- Mike Kornegay		06/02/2022 Add notifications save routine.
-- Mike Kornegay		06/13/2022 Changed references for @ReportTypeID to point to the new SessionCategoryID fields.
-- Stephen Long         07/06/2022 Updates for site alerts to call new stored procedure.
-- Mike Kornegay		07/08/2022 Correct logic for removing aggregate farms from monitoring session.
-- Mike Kornegay		08/18/2022 Added logic for storing multiple diseases per sample.
-- Mike Kornegay        08/19/2022 Correct error on SampleToDisease temp table.
-- Mike Kornegay		09/05/2022 Fixed error where MonitoringSessionToDiagnosisID was not set correctly.
-- Mike Kornegay		09/30/2022 Add saving of idfsMonitoringSessionSpeciesType and correct farm save for new type.
-- Mike Kornegay		10/07/2022 Defect #5140 - EIDSSLocalOrFieldSampleID not generating correctly.
-- Mike Kornegay		11/01/2022 Correct iteration on EIDSSLocalOrFieldSampleID.
-- Leo Tracchia			12/07/2022 added logic for data auditing 
-- Leo Tracchia			12/15/2022 added additional audit logic for new parameters in GBL procs
-- Mike Kornegay		12/20/2022 corrected parameter list for USSP_GBL_TESTS_SET.
-- Stephen Long         01/16/2023 Fix for data audit on the event set.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SET]
(
    @MonitoringSessionID BIGINT = NULL,
    @SessionID NVARCHAR(200) = NULL,
    @SessionStartDate DATETIME = NULL,
    @SessionEndDate DATETIME = NULL,
    @SessionStatusTypeID BIGINT = NULL,
    @SessionCategoryID BIGINT = NULL,
    @SiteID BIGINT = NULL,
    @LegacySessionID NVARCHAR(200) = NULL,
    @CountryID BIGINT = NULL,
    @RegionID BIGINT = NULL,
    @RayonID BIGINT = NULL,
    @SettlementID BIGINT = NULL,
    @CampaignKey BIGINT = NULL,
    @CampaignID NVARCHAR(200) = NULL,
    @DateEntered DATETIME = NULL,
    @EnteredByPersonID BIGINT = NULL,
    @RowStatus INT,
    @ReportTypeID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @FlocksOrHerds NVARCHAR(MAX) = NULL,
    @DiseaseSpeciesSamples NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @Animals NVARCHAR(MAX) = NULL,
    @Farms NVARCHAR(MAX) = NULL,
    @Samples NVARCHAR(MAX) = NULL,
	@SamplesToDiseases NVARCHAR(MAX) = NULL,
    @LaboratoryTests NVARCHAR(MAX) = NULL,
    @LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
    @Actions NVARCHAR(MAX) = NULL,
    @AggregateSummaryInfo NVARCHAR(MAX) = NULL,
    @AggregateSummaryDiseases NVARCHAR(MAX) = NULL,
    @FarmsAggregate NVARCHAR(MAX) = NULL,
    @FlocksOrHerdsAggregate NVARCHAR(MAX) = NULL,
    @SpeciesAggregate NVARCHAR(MAX) = NULL,
    @DiseaseReports NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @LocationID BIGINT = NULL,
	@LinkLocalOrFieldSampleIDToReportID BIT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0;
        DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @RowAction INT = NULL,
                @RowID BIGINT,
				@ChildRowID BIGINT,
				@Iteration INT = 0,
                @NewFarmOwnerID BIGINT = NULL,
                @FarmID BIGINT = NULL,
                @FarmMasterID BIGINT = NULL,
                @FarmOwnerID BIGINT = NULL,
                @Latitude FLOAT = NULL,
                @Longitude FLOAT = NULL,
                @FlockOrHerdID BIGINT = NULL,
                @FlockOrHerdMasterID BIGINT = NULL,
                @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
                @SickAnimalQuantity INT = NULL,
                @TotalAnimalQuantity INT = NULL,
                @DeadAnimalQuantity INT = NULL,
                @Comments NVARCHAR(2000) = NULL,
                @SpeciesID BIGINT = NULL,
                @SpeciesMasterID BIGINT = NULL,
                @InternalSpeciesTypeID BIGINT = NULL,
                @StartOfSignsDate DATETIME = NULL,
                @AverageAge NVARCHAR(200) = NULL,
                @ObservationID BIGINT = NULL,
                @AnimalID BIGINT = NULL,
                @SexTypeID BIGINT = NULL,
                @DiseaseID BIGINT = NULL,
                @ConditionTypeID BIGINT = NULL,
                @AgeTypeID BIGINT = NULL,
                @EIDSSAnimalID NVARCHAR(200) = NULL,
                @AnimalName NVARCHAR(200) = NULL,
                @Color NVARCHAR(200) = NULL,
                @AnimalDescription NVARCHAR(200) = NULL,
                @ClinicalSignsIndicator BIGINT = NULL,
                @VaccinationID BIGINT,
                @VaccinationTypeID BIGINT = NULL,
                @RouteTypeID BIGINT = NULL,
                @VaccinationDate DATETIME = NULL,
                @Manufacturer NVARCHAR(200) = NULL,
                @LotNumber NVARCHAR(200) = NULL,
                @NumberVaccinated INT = NULL,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @RootSampleID BIGINT = NULL,
                @ParentSampleID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @SpeciesTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @CurrentSiteID BIGINT = NULL,
                @BirdStatusTypeID BIGINT = NULL,
                @PensideTestID BIGINT = NULL,
                @PensideTestResultTypeID BIGINT = NULL,
                @PensideTestNameTypeID BIGINT = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @TestDate DATETIME = NULL,
                @PensideTestCategoryTypeID BIGINT = NULL,
                @TestID BIGINT = NULL,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @StartedDate DATETIME = NULL,
                @ResultDate DATETIME = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestMonitoringSesssionID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @CaseLogID BIGINT,
                @LogStatusTypeID BIGINT = NULL,
                @LoggedByPersonID BIGINT = NULL,
                @LogDate DATETIME = NULL,
                @ActionRequired NVARCHAR(200) = NULL,
                @VeterinaryDiseaseReportRelationshipID BIGINT = NULL,
                @RelatedToSpeciesID BIGINT = NULL,
                @RelatedToAnimalID BIGINT = NULL,
                @RelatedToObservationID BIGINT = NULL,
                @FormTemplateID BIGINT,
                @ObservationSiteID BIGINT,
                @ActivityID BIGINT = NULL,
                @ActivityIDNew BIGINT = NULL,
                @ParameterID BIGINT = NULL,
                @ParameterValue SQL_VARIANT = NULL,
                @ParameterRowID BIGINT = NULL,
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL,
                @MonitoringSessionActionID BIGINT = NULL,
                @MonitoringSessionActionStatusTypeID BIGINT = NULL,
                @MonitoringSessionActionTypeID BIGINT = NULL,
                @MonitoringSessionToDiagnosis BIGINT = NULL,
                @MonitoringSessionSummaryID BIGINT = NULL,
				@MonitoringSessionToMaterialID BIGINT = NULL,
                @ActionDate DATETIME = NULL,
                @SampledAnimalsQuantity INT = NULL,
                @SamplesQuantity INT = NULL,
                @PositiveAnimalsQuantity INT = NULL,
                @Order INT = NULL;


        DECLARE @DiseaseSpeciesSampleTemp TABLE
        (
            MonitoringSessionToDiagnosisID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            [Order] INT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SampleTypeID BIGINT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @FarmsTemp TABLE
        (
            FarmMasterID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            TotalAnimalQuantity INT NULL,
            Latitude FLOAT NULL,
            Longitude FLOAT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
		DECLARE @SamplesToDiseasesTemp TABLE
        (
            MonitoringSessionToMaterialID BIGINT NOT NULL,
            MonitoringSessionID BIGINT NOT NULL,
			SampleID BIGINT NOT NULL,
			SampleTypeID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ActionsTemp TABLE
        (
            MonitoringSessionActionID BIGINT NOT NULL,
            MonitoringSessionActionStatusTypeID BIGINT NULL,
            MonitoringSessionActionTypeID BIGINT NULL,
            EnteredByPersonID BIGINT NULL,
            ActionDate DATETIME NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @AggregateSummaryInfoTemp TABLE
        (
            MonitoringSessionSummaryID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalSexID BIGINT NULL,
            SampleAnimalsQty INT NULL,
            SamplesQty INT NULL,
            CollectionDate DATETIME NULL,
            CollectedByPersonID BIGINT NULL,
            PositiveAnimalsQty INT NULL,
            DiseaseID BIGINT NULL,
            SampleTypeID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @AggregateSummaryDiseasesTemp TABLE
        (
            MonitoringSessionSummaryID BIGINT NULL,
            DiseaseID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FarmsAggregateTemp TABLE
        (
            FarmMasterID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            TotalAnimalQuantity INT NULL,
            Latitude FLOAT NULL,
            Longitude FLOAT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FlocksOrHerdsAggregateTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesAggregateTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL
        );

        BEGIN TRANSACTION;

        INSERT INTO @DiseaseSpeciesSampleTemp
        SELECT *
        FROM
            OPENJSON(@DiseaseSpeciesSamples)
            WITH
            (
                MonitoringSessionToDiagnosisID BIGINT,
                DiseaseID BIGINT,
                [Order] INT,
                SpeciesTypeID BIGINT,
                SampleTypeID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FarmsTemp
        SELECT *
        FROM
            OPENJSON(@Farms)
            WITH
            (
                FarmMasterID BIGINT,
                FarmID BIGINT,
                TotalAnimalQuantity INT,
                Latitude FLOAT,
                Longitude FLOAT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );
        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );
        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );

		SET @Iteration = (SELECT COUNT(*) FROM dbo.tlbMaterial WHERE idfMonitoringSession = @MonitoringSessionID);

		INSERT INTO @SamplesToDiseasesTemp
		SELECT *
		FROM
			OPENJSON(@SamplesToDiseases)
			WITH
			(
				MonitoringSessionToMaterialID BIGINT,
				MonitoringSessionID BIGINT,
				SampleID BIGINT,
				SampleTypeID BIGINT,
				DiseaseID BIGINT,
				RowStatus INT,
				RowAction INT
			);
        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @ActionsTemp
        SELECT *
        FROM
            OPENJSON(@Actions)
            WITH
            (
                MonitoringSessionActionID BIGINT,
                MonitoringSessionActionStatusTypeID BIGINT,
                MonitoringSessionActionTypeID BIGINT,
                EnteredByPersonID BIGINT,
                ActionDate DATETIME,
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @AggregateSummaryInfoTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSummaryInfo)
            WITH
            (
                MonitoringSessionSummaryID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                SpeciesID BIGINT,
                AnimalSexID BIGINT,
                SampleAnimalsQty INT,
                SamplesQty INT,
                CollectionDate DATETIME,
                CollectedByPersonID BIGINT,
                PositiveAnimalsQty INT,
                DiseaseID BIGINT,
                SampleTypeID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @AggregateSummaryDiseasesTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSummaryDiseases)
            WITH
            (
                MonitoringSessionSummaryID BIGINT,
                DiseaseID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FarmsAggregateTemp
        SELECT *
        FROM
            OPENJSON(@FarmsAggregate)
            WITH
            (
                FarmMasterID BIGINT,
                FarmID BIGINT,
                TotalAnimalQuantity INT,
                Latitude FLOAT,
                Longitude FLOAT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FlocksOrHerdsAggregateTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerdsAggregate)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @SpeciesAggregateTemp
        SELECT *
        FROM
            OPENJSON(@SpeciesAggregate)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

		--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017062; --select * from trtBaseReference where strDefault = 'Veterinary Active Surveillance Session'
		DECLARE @idfObject bigint = @MonitoringSessionID;
		DECLARE @idfObjectTable_tlbMonitoringSession bigint = 707040000000;	--select * from tauTable where strName = 'tlbMonitoringSession'	 
		DECLARE @idfDataAuditEvent bigint = NULL;		

		DECLARE @tlbMonitoringSession_BeforeEdit TABLE
		(
			idfMonitoringSession bigint,
			idfsMonitoringSessionStatus bigint,
            idfsCountry bigint,
            idfsRegion bigint,
            idfsRayon bigint,
            idfsSettlement bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            strMonitoringSessionID nvarchar(50),
            intRowStatus int,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            LegacySessionID varchar(50),            
            idfsLocation bigint,
			idfsMonitoringSessionSpeciesType bigint
		)		

		DECLARE @tlbMonitoringSession_AfterEdit TABLE
		(
			idfMonitoringSession bigint,
			idfsMonitoringSessionStatus bigint,
            idfsCountry bigint,
            idfsRegion bigint,
            idfsRayon bigint,
            idfsSettlement bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            strMonitoringSessionID nvarchar(50),
            intRowStatus int,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            LegacySessionID varchar(50),            
            idfsLocation bigint,
			idfsMonitoringSessionSpeciesType bigint
		)		
		
		-- Get and Set UserId and SiteId
		SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo

		--Data Audit--

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID
                  AND intRowStatus = 0
        )
        BEGIN

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSession',
                                              @MonitoringSessionID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vet Active Surveillance Session',
                                               @SessionID OUTPUT,                                               
											   NULL;
			--Data Audit--	

				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType = 10016001;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @MonitoringSessionID, @idfObjectTable_tlbMonitoringSession, @idfDataAuditEvent OUTPUT

			--Data Audit--

            INSERT INTO dbo.tlbMonitoringSession
            (
                [idfMonitoringSession],
                [idfsMonitoringSessionStatus],
                [idfsCountry],
                [idfsRegion],
                [idfsRayon],
                [idfsSettlement],
                [idfPersonEnteredBy],
                [idfCampaign],
                [idfsSite],
                [datEnteredDate],
                [strMonitoringSessionID],
                [intRowStatus],
                [datStartDate],
                [datEndDate],
                [SessionCategoryID],
                [LegacySessionID],
                [AuditCreateUser],
                [SourceSystemNameID],
                [SourceSystemKeyValue],
                [idfsLocation],
				[idfsMonitoringSessionSpeciesType]
            )
            VALUES
				(@MonitoringSessionID,
				 @SessionStatusTypeID,
				 @CountryID,
				 @RegionID,
				 @RayonID,
				 @SettlementID,
				 @EnteredByPersonID,
				 @CampaignKey,
				 @SiteID,
				 @DateEntered,
				 @SessionID,
				 0  ,
				 @SessionStartDate,
				 @SessionEndDate,
				 @SessionCategoryID,
				 @LegacySessionID,
				 @AuditUserName,
				 10519001,
				 '[{"idfMonitoringSessionID":' + CAST(@MonitoringSessionID AS NVARCHAR(300)) + '}]',
				 @LocationID,
				 @ReportTypeID
            );

			--Data Audit--							

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_tlbMonitoringSession, @MonitoringSessionID)
			
			--Data Audit--

            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;

        END
        ELSE
        BEGIN

			--DataAudit-- 
				
				--  tauDataAuditEvent  Event Type - Edit 
				set @idfsDataAuditEventType = 10016003;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_tlbMonitoringSession, @idfDataAuditEvent OUTPUT

			--DataAudit-- 

			INSERT INTO @tlbMonitoringSession_BeforeEdit (
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsCountry,
				idfsRegion,
				idfsRayon,
				idfsSettlement,
				idfPersonEnteredBy,
				idfCampaign,
				idfsSite,
				datEnteredDate,
				strMonitoringSessionID,
				intRowStatus,
				datStartDate,
				datEndDate,
				SessionCategoryID,
				LegacySessionID,
				idfsLocation,
				idfsMonitoringSessionSpeciesType)
			SELECT 
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsCountry,
				idfsRegion,
				idfsRayon,
				idfsSettlement,
				idfPersonEnteredBy,
				idfCampaign,
				idfsSite,
				datEnteredDate,
				strMonitoringSessionID,
				intRowStatus,
				datStartDate,
				datEndDate,
				SessionCategoryID,
				LegacySessionID,
				idfsLocation,
				idfsMonitoringSessionSpeciesType
				FROM [tlbMonitoringSession] WHERE idfMonitoringSession = @MonitoringSessionID;

            UPDATE [dbo].[tlbMonitoringSession]
            SET [idfsMonitoringSessionStatus] = @SessionStatusTypeID,
                [idfsCountry] = @CountryID,
                [idfsRegion] = @RegionID,
                [idfsRayon] = @RayonID,
                [idfsSettlement] = @SettlementID,
                [idfPersonEnteredBy] = @EnteredByPersonID,
                [idfCampaign] = @CampaignKey,
                [idfsSite] = @SiteID,
                [datEnteredDate] = @DateEntered,
                [strMonitoringSessionID] = @SessionID,
                [intRowStatus] = 0,
                [datStartDate] = @SessionStartDate,
                [datEndDate] = @SessionEndDate,
                [SessionCategoryID] = @SessionCategoryID,
                [LegacySessionID] = @LegacySessionID,
                [AuditUpdateUser] = @AuditUserName,
                [idfsLocation] = @LocationID,
				[idfsMonitoringSessionSpeciesType] = @ReportTypeID
            WHERE idfMonitoringSession = @MonitoringSessionID

			INSERT INTO @tlbMonitoringSession_AfterEdit (
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsCountry,
				idfsRegion,
				idfsRayon,
				idfsSettlement,
				idfPersonEnteredBy,
				idfCampaign,
				idfsSite,
				datEnteredDate,
				strMonitoringSessionID,
				intRowStatus,
				datStartDate,
				datEndDate,
				SessionCategoryID,
				LegacySessionID,
				idfsLocation,
				idfsMonitoringSessionSpeciesType)
			SELECT 
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsCountry,
				idfsRegion,
				idfsRayon,
				idfsSettlement,
				idfPersonEnteredBy,
				idfCampaign,
				idfsSite,
				datEnteredDate,
				strMonitoringSessionID,
				intRowStatus,
				datStartDate,
				datEndDate,
				SessionCategoryID,
				LegacySessionID,
				idfsLocation,
				idfsMonitoringSessionSpeciesType
				FROM [tlbMonitoringSession] WHERE idfMonitoringSession = @MonitoringSessionID;

			--idfsMonitoringSessionStatus
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707060000000,
				a.idfMonitoringSession,
				null,
				a.idfsMonitoringSessionStatus,
				b.idfsMonitoringSessionStatus 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsMonitoringSessionStatus <> b.idfsMonitoringSessionStatus) 
				or(a.idfsMonitoringSessionStatus is not null and b.idfsMonitoringSessionStatus is null)
				or(a.idfsMonitoringSessionStatus is null and b.idfsMonitoringSessionStatus is not null)

			--idfsCountry
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707070000000,
				a.idfMonitoringSession,
				null,
				a.idfsCountry,
				b.idfsCountry 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsCountry <> b.idfsCountry) 
				or(a.idfsCountry is not null and b.idfsCountry is null)
				or(a.idfsCountry is null and b.idfsCountry is not null)

			--idfsRegion
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707080000000,
				a.idfMonitoringSession,
				null,
				a.idfsRegion,
				b.idfsRegion 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsRegion <> b.idfsRegion) 
				or(a.idfsRegion is not null and b.idfsRegion is null)
				or(a.idfsRegion is null and b.idfsRegion is not null)

			--idfsRayon
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707090000000,
				a.idfMonitoringSession,
				null,
				a.idfsRayon,
				b.idfsRayon 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsRayon <> b.idfsRayon) 
				or(a.idfsRayon is not null and b.idfsRayon is null)
				or(a.idfsRayon is null and b.idfsRayon is not null)

			--idfsSettlement
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707100000000,
				a.idfMonitoringSession,
				null,
				a.idfsSettlement,
				b.idfsSettlement 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsSettlement <> b.idfsSettlement) 
				or(a.idfsSettlement is not null and b.idfsSettlement is null)
				or(a.idfsSettlement is null and b.idfsSettlement is not null)

			--idfPersonEnteredBy
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707110000000,
				a.idfMonitoringSession,
				null,
				a.idfPersonEnteredBy,
				b.idfPersonEnteredBy 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfPersonEnteredBy <> b.idfPersonEnteredBy) 
				or(a.idfPersonEnteredBy is not null and b.idfPersonEnteredBy is null)
				or(a.idfPersonEnteredBy is null and b.idfPersonEnteredBy is not null)

			--idfCampaign
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707120000000,
				a.idfMonitoringSession,
				null,
				a.idfCampaign,
				b.idfCampaign 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfCampaign <> b.idfCampaign) 
				or(a.idfCampaign is not null and b.idfCampaign is null)
				or(a.idfCampaign is null and b.idfCampaign is not null)

			--datEnteredDate
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707130000000,
				a.idfMonitoringSession,
				null,
				a.datEnteredDate,
				b.datEnteredDate 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.datEnteredDate <> b.datEnteredDate) 
				or(a.datEnteredDate is not null and b.datEnteredDate is null)
				or(a.datEnteredDate is null and b.datEnteredDate is not null)

			--strMonitoringSessionID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707140000000,
				a.idfMonitoringSession,
				null,
				a.strMonitoringSessionID,
				b.strMonitoringSessionID 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.strMonitoringSessionID <> b.strMonitoringSessionID) 
				or(a.strMonitoringSessionID is not null and b.strMonitoringSessionID is null)
				or(a.strMonitoringSessionID is null and b.strMonitoringSessionID is not null)

			--datStartDate
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				4578670000000,
				a.idfMonitoringSession,
				null,
				a.datStartDate,
				b.datStartDate 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.datStartDate <> b.datStartDate) 
				or(a.datStartDate is not null and b.datStartDate is null)
				or(a.datStartDate is null and b.datStartDate is not null)

			--datEndDate
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				4578680000000,
				a.idfMonitoringSession,
				null,
				a.datEndDate,
				b.datEndDate 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.datEndDate <> b.datEndDate) 
				or(a.datEndDate is not null and b.datEndDate is null)
				or(a.datEndDate is null and b.datEndDate is not null)

        END;

        WHILE EXISTS (SELECT * FROM @DiseaseSpeciesSampleTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToDiagnosisID,
				@MonitoringSessionToDiagnosis = MonitoringSessionToDiagnosisID,
                @DiseaseID = DiseaseID,
                @SpeciesTypeID = SpeciesTypeID,
                @SampleTypeID = SampleTypeID,
                @Order = [Order],
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @DiseaseSpeciesSampleTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VAS_MONITORING_SESSION_TO_DIAGNOSIS_SPECIES_SAMPLE_SET @MonitoringSessionToDiagnosis OUTPUT,
																					@idfDataAuditEvent,
                                                                                    @MonitoringSessionID,
                                                                                    @DiseaseID,
                                                                                    @SpeciesTypeID,
                                                                                    @SampleTypeID,
                                                                                    @Order,
                                                                                    @RowStatus,
                                                                                    @RowAction,
                                                                                    @AuditUserName;

            DELETE FROM @DiseaseSpeciesSampleTemp
            WHERE MonitoringSessionToDiagnosisID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FarmsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FarmMasterID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @Latitude = Latitude,
                @Longitude = Longitude,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FarmsTemp;



            IF @ReportTypeID = 129909620007069 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               @MonitoringSessionID,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

                UPDATE @FlocksOrHerdsTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

                UPDATE @SamplesTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               @MonitoringSessionID,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

                UPDATE @FlocksOrHerdsTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

                UPDATE @SamplesTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;
            END

            -- disassociate farm with session 
            if ((@MonitoringSessionID IS NOT NULL) AND (@RowStatus = 1))
            BEGIN
                UPDATE dbo.tlbFarm
                set idfMonitoringSession = null
                where idfFarm = @FarmID
                      and idfMonitoringSession = @MonitoringSessionID;
            END;


            DELETE FROM @FarmsTemp
            WHERE FarmMasterID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
										  @idfDataAuditEvent,
                                          @FlockOrHerdID OUTPUT,
                                          @FlockOrHerdMasterID,
                                          @FarmID,
                                          @EIDSSFlockOrHerdID,
                                          @SickAnimalQuantity,
                                          @TotalAnimalQuantity,
                                          @DeadAnimalQuantity,
                                          NULL,
                                          @RowStatus,
                                          @RowAction;

            UPDATE @SpeciesTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID
            FROM @SpeciesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
											 @idfDataAuditEvent,
                                             @SpeciesID OUTPUT,
                                             @SpeciesMasterID,
                                             @SpeciesTypeID,
                                             @FlockOrHerdID,
                                             @ObservationID,
                                             @StartOfSignsDate,
                                             @AverageAge,
                                             @SickAnimalQuantity,
                                             @TotalAnimalQuantity,
                                             @DeadAnimalQuantity,
                                             @Comments,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @AnimalsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @SamplesTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AnimalsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AnimalID,
                @AnimalID = AnimalID,
                @SexTypeID = SexTypeID,
                @ConditionTypeID = ConditionTypeID,
                @AgeTypeID = AgeTypeID,
                @SpeciesID = SpeciesID,
                @ObservationID = ObservationID,
                @AnimalDescription = AnimalDescription,
                @EIDSSAnimalID = EIDSSAnimalID,
                @AnimalName = AnimalName,
                @Color = Color,
                @ClinicalSignsIndicator = ClinicalSignsIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AnimalsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_ANIMAL_SET @AuditUserName,
											@idfDataAuditEvent,
                                            @AnimalID OUTPUT,
                                            @SexTypeID,
                                            @ConditionTypeID,
                                            @AgeTypeID,
                                            @SpeciesID,
                                            @ObservationID,
                                            @AnimalDescription,
                                            @EIDSSAnimalID,
                                            @AnimalName,
                                            @Color,
                                            @ClinicalSignsIndicator,
                                            @RowStatus,
                                            @RowAction;

            UPDATE @SamplesTemp
            SET AnimalID = @AnimalID
            WHERE AnimalID = @RowID;

            DELETE FROM @AnimalsTemp
            WHERE AnimalID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CollectionDate,
                @SentDate = SentDate,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @DiseaseID = DiseaseID,
                @DateEntered = EnteredDate,
                @Comments = Comments,
                @SiteID = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @BirdStatusTypeID = BirdStatusTypeID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @SamplesTemp;

			--Format the EIDSSLocalOrFieldSampleID according to system preferences.
			IF (
				@EIDSSLocalOrFieldSampleID IS NULL
				OR @EIDSSLocalOrFieldSampleID = ''
               )
               AND @LinkLocalOrFieldSampleIDToReportID = 1
            BEGIN
                SET @Iteration = @Iteration + 1;
                IF @Iteration < 10
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @SessionID + '-0' + CONVERT(NVARCHAR(4), @Iteration);
                END
                ELSE
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @SessionID + '-' + CONVERT(NVARCHAR(4), @Iteration);
                END;
            END;

			INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName,
											@idfDataAuditEvent,
											@MonitoringSessionID,
                                            @SampleID OUTPUT,
                                            @SampleTypeID,
                                            @RootSampleID,
                                            @ParentSampleID,
                                            @FarmOwnerID,
                                            @SpeciesID,
                                            @AnimalID,
                                            NULL,
                                            @MonitoringSessionID,
                                            NULL,
                                            NULL,
                                            NULL,
                                            @CollectionDate,
                                            @CollectedByPersonID,
                                            @CollectedByOrganizationID,
                                            @SentDate,
                                            @SentToOrganizationID,
                                            @EIDSSLocalOrFieldSampleID,
                                            @SiteID,
                                            @DateEntered,
                                            @ReadOnlyIndicator,
                                            @SampleStatusTypeID,
                                            @Comments,
                                            @CurrentSiteID,
                                            @DiseaseID,
                                            @BirdStatusTypeID,
                                            @RowStatus,
                                            @RowAction;
		       	   		 
            UPDATE @LaboratoryTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

			UPDATE @SamplesToDiseasesTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

		WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
		BEGIN
			SELECT TOP 1
				@RowID = MonitoringSessionToMaterialID,
				@MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
				@MonitoringSessionID = @MonitoringSessionID,
				@SampleID = SampleID,
				@SampleTypeID = SampleTypeID,
				@DiseaseID = DiseaseID,
				@RowAction = RowAction,
				@RowStatus = RowStatus
			FROM @SamplesToDiseasesTemp;

			--insert or update the diseases for this sample
			INSERT INTO @SuppressSelect
			EXECUTE dbo.USSP_VAS_SAMPLE_TO_DISEASE_SET
										@AuditUserName,
										@idfDataAuditEvent,
                                        @MonitoringSessionToMaterialID,
										@MonitoringSessionID,
										@SampleID,
										@DiseaseID,
                                        @SampleTypeID,
                                        @RowStatus,
                                        @RowAction;

			DELETE FROM @SamplesToDiseasesTemp
			WHERE MonitoringSessionToMaterialID = @RowID;
		END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @LaboratoryTestsTemp;

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --veterinary surveillance session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
                SET @TestMonitoringSesssionID = NULL;
            END
            ELSE
            BEGIN
                SET @TestMonitoringSesssionID = @MonitoringSessionID;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET 
                                          @TestID OUTPUT,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @Comments,
                                          @RowStatus,
                                          @StartedDate,
                                          @ResultDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @MonitoringSessionID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @AuditUserName,
										  @idfDataAuditEvent,
										  @MonitoringSessionID,
                                          @RowAction;

            UPDATE @LaboratoryTestInterpretationsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @LaboratoryTestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestInterpretationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @LaboratoryTestInterpretationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUserName,
														 @idfDataAuditEvent,
														 @MonitoringSessionID,
                                                         @TestInterpretationID OUTPUT,
                                                         @DiseaseID,
                                                         @InterpretedStatusTypeID,
                                                         @ValidatedByOrganizationID,
                                                         @ValidatedByPersonID,
                                                         @InterpretedByOrganizationID,
                                                         @InterpretedByPersonID,
                                                         @TestID,
                                                         @ValidatedStatusIndicator,
                                                         @ReportSessionCreatedIndicator,
                                                         @ValidatedComment,
                                                         @InterpretedComment,
                                                         @ValidatedDate,
                                                         @InterpretedDate,
                                                         @RowStatus,
                                                         @ReadOnlyIndicator,
                                                         @RowAction;

            DELETE FROM @LaboratoryTestInterpretationsTemp
            WHERE TestInterpretationID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @ActionsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionActionID,
                @MonitoringSessionActionTypeID = MonitoringSessionActionTypeID,
                @MonitoringSessionActionStatusTypeID = MonitoringSessionActionStatusTypeID,
                @EnteredByPersonID = EnteredByPersonID,
                @ActionDate = ActionDate,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActionsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VAS_MONITORING_SESSION_ACTION_SET @MonitoringSessionActionID,
															   @idfDataAuditEvent,
                                                               @MonitoringSessionID,
                                                               @EnteredByPersonID,
                                                               @MonitoringSessionActionTypeID,
                                                               @MonitoringSessionActionStatusTypeID,
                                                               @ActionDate,
                                                               @Comments,
                                                               @RowStatus,
                                                               @RowAction,
                                                               @AuditUserName;

            DELETE FROM @ActionsTemp
            WHERE MonitoringSessionActionID = @RowID;
        END;

        /* Aggregate Information Section */

        WHILE EXISTS (SELECT * FROM @FarmsAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FarmMasterID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @Latitude = Latitude,
                @Longitude = Longitude,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FarmsAggregateTemp;

            IF @ReportTypeID = 129909620007069 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               NULL,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               NULL,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

            END

            UPDATE @FlocksOrHerdsAggregateTemp
            SET FarmID = @FarmID
            WHERE FarmMasterID = @RowID;

            UPDATE @AggregateSummaryInfoTemp
            SET FarmID = @FarmID
            WHERE FarmMasterID = @RowID;

			/*farm is being removed from aggregate monitoring session*/
			IF ((@MonitoringSessionID IS NOT NULL) AND (@RowStatus = 1))
			BEGIN
				UPDATE dbo.tlbFarm 
				SET  idfMonitoringSession = null
					,intRowStatus = @RowStatus
				WHERE idfFarm = @FarmID;
			END;

            DELETE FROM @FarmsAggregateTemp
            WHERE FarmMasterID = @RowID;

        END;

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsAggregateTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
										  @idfDataAuditEvent,
                                          @FlockOrHerdID OUTPUT,
                                          @FlockOrHerdMasterID,
                                          @FarmID,
                                          @EIDSSFlockOrHerdID,
                                          @SickAnimalQuantity,
                                          @TotalAnimalQuantity,
                                          @DeadAnimalQuantity,
                                          NULL,
                                          @RowStatus,
                                          @RowAction;

            UPDATE @SpeciesAggregateTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsAggregateTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID
            FROM @SpeciesAggregateTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
											 @idfDataAuditEvent,
                                             @SpeciesID OUTPUT,
                                             @SpeciesMasterID,
                                             @SpeciesTypeID,
                                             @FlockOrHerdID,
                                             @ObservationID,
                                             @StartOfSignsDate,
                                             @AverageAge,
                                             @SickAnimalQuantity,
                                             @TotalAnimalQuantity,
                                             @DeadAnimalQuantity,
                                             @Comments,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @AggregateSummaryInfoTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesAggregateTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AggregateSummaryInfoTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionSummaryID,
                @MonitoringSessionSummaryID = MonitoringSessionSummaryID,
                @SpeciesID = SpeciesID,
                @SampledAnimalsQuantity = SampleAnimalsQty,
                @SamplesQuantity = SamplesQty,
                @CollectionDate = CollectionDate,
                @CollectedByPersonID = CollectedByPersonID,
                @PositiveAnimalsQuantity = PositiveAnimalsQty,
                @SexTypeID = AnimalSexID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @DiseaseID = DiseaseID,
                @SampleTypeID = SampleTypeID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AggregateSummaryInfoTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VCT_MONITORING_SESSION_SUMMARY_SET @MonitoringSessionSummaryID OUTPUT,
																@idfDataAuditEvent,
                                                                @MonitoringSessionID,
                                                                @FarmID,
                                                                @SpeciesID,
                                                                @SexTypeID,
                                                                @SampledAnimalsQuantity,
                                                                @SamplesQuantity,
                                                                @CollectionDate,
                                                                @PositiveAnimalsQuantity,
                                                                @RowStatus,
                                                                @DiseaseID,
                                                                @SampleTypeID,
                                                                @RowAction,
                                                                @AuditUserName;

            UPDATE @AggregateSummaryDiseasesTemp
            SET MonitoringSessionSummaryID = @MonitoringSessionSummaryID
            WHERE MonitoringSessionSummaryID = @RowID

            DELETE FROM @AggregateSummaryInfoTemp
            WHERE MonitoringSessionSummaryID = @RowID;

            PRINT @RowID
        END;

        WHILE EXISTS (SELECT * FROM @AggregateSummaryDiseasesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionSummaryID,
                @MonitoringSessionSummaryID = MonitoringSessionSummaryID,
                @DiseaseID = DiseaseID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AggregateSummaryDiseasesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VCT_MONITORING_SESSION_SUMMARY_DIAGNOSIS_SET @MonitoringSessionSummaryID,
																		  @idfDataAuditEvent,
                                                                          @RowStatus,
                                                                          @DiseaseID,
                                                                          @RowAction,
                                                                          @AuditUserName;


            DELETE FROM @AggregateSummaryDiseasesTemp
            WHERE @MonitoringSessionSummaryID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventId,
                                             @EventTypeId,
                                             @EventUserId,
                                             @EventObjectId,
                                             @EventDiseaseId,
                                             @EventSiteId,
                                             @EventInformationString,
                                             @EventLoginSiteId,
                                             @EventLocationId,
                                             @AuditUserName, 
                                             @idfDataAuditEvent,
                                             @SessionID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @MonitoringSessionID SessionKey,
               @SessionID SessionID;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_SET
--
-- Description:	Inserts or updates veterinary "case" for the avian and livestock veterinary disease 
-- report use cases.
--                      
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- -------------------------------------------------------------------
-- Stephen Long    04/02/2018 Initial release.
-- Stephen Long    04/17/2019 Updated for API; use case updates.
-- Stephen Long    04/23/2019 Added updates for herd master and species master if new ones are 
--                            added to the farm during disease report creation.
-- Stephen Long    04/29/2019 Added related to veterinary disease report fields for use case VUC11 
--                            and VUC12.
-- Stephen Long    05/26/2019 Made corrections to farm copy observation ID and species table 
--                            observation ID for flexible form saving.
-- Stephen Long    06/01/2019 Made corrections to JSON for herds and species parameters.
-- Stephen Long    06/10/2019 Added farm owner ID output parameter to USSP_VET_FARM_COPY call.
-- Stephen Long    06/19/2019 Added diagnosis date and tests conducted indicator parameters.
-- Stephen Long    06/22/2019 Added read only indicator parameter for sample set - sample import.
-- Stephen Long    06/24/2019 Update to match new parameter for USSP_VET_FARM_COPY call.
-- Stephen Long    07/26/2019 Corrected farm counts (total, sick and dead).
-- Stephen Long    09/14/2019 Corrected root sample ID/parent sample ID on sample update call.
-- Stephen Long    10/01/2019 Added monitoring session ID parameter to farm copy for the sceanrio 
--                            where a disease report is tied to a monitoring session.
-- Stephen Long    12/23/2019 Added farm latitude and longitude parameters.
-- Stephen Long    02/05/2020 Updated sample set to account for the current site ID when samples 
--                            are imported from the laboratory module.
-- Stephen Long    02/16/2020 Add logic to copy activity parameters, and add observation record for 
--                            connected disease reports.
-- Stephen Long    04/21/2020 Added additional check on clinical signs when related disease report.
-- Stephen Long    04/24/2020 Added clinical signs indicator for the animal set call.
-- Stephen Long    08/12/2020 Corrected status on report log from status type to log status type.
-- Stephen Long    08/25/2020 Added observation ID set for the update of the vet case table.
-- Stephen Long    09/18/2020 Check for null related to observation ID
-- Stephen Long    12/20/2020 Updated USSP_GBL_TEST_SET call with four new parameters.
-- Stephen Long    11/29/2021 Removed language ID and added audit user name to USSP calls.
-- Stephen Long    01/19/2022 Added missing audit user name on ussp calls, and added events.
-- Stephen Long    01/22/2022 Made disease ID nullable on SamplesTemp table variable.
-- Stephen Long    01/24/2022 Added link local or field sample ID to report ID parameter.
-- Stephen Long    01/28/2022 Removed herd actual and species actual, no longer used.
-- Stephen Long    02/18/2022 Added lab module source indicator check on sample set.
-- Stephen Long    03/08/2022 Set notification object ID after saving disease report.
-- Stephen Long    04/12/2022 Added outbreak veterinary case parameters and logic.
-- Stephen Long    04/27/2022 Added additional outbreak case parameters: status type and case 
--                            questionnaire observation ID.
-- Stephen Long    05/09/2022 Bug fix on item 4199 - local/field sample ID iteration.
-- Stephen Long    06/16/2022 Added status type ID to species set.
-- Stephen Long    07/06/2022 Updates for site alerts to call new stored procedure.
-- Stephen Long    09/15/2022 Added note parameter to event set call.  Temporarily removed!
-- Stephen Long    12/07/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long    12/09/2022 Changed object type ID reference for veterinary disease report, 
--                            and added EIDSS object ID to samples, tests and test 
--                            interpretations calls.
-- Stephen Long    12/14/2022 Fix to observation ID when adding a connected disease report; site 
--                            identifier was not picked up from the original record.
-- Stephen Long    12/17/2022 Fix to importing sample when the disease report has not been saved.
-- Stephwn Long    12/19/2022 Added connected disease laboratory test ID to the list of output.
-- Stephen Long    02/03/2023 Changed to data audit call with strMainObject.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_SET]
(
    @DiseaseReportID BIGINT,
    @EIDSSReportID NVARCHAR(200) = NULL,
    @FarmID BIGINT,
    @FarmMasterID BIGINT,
    @FarmOwnerID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @OutbreakID BIGINT = NULL,
    @RelatedToDiseaseReportID BIGINT = NULL,
    @EIDSSFieldAccessionID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT,
    @EnteredByPersonID BIGINT = NULL,
    @ReportedByOrganizationID BIGINT = NULL,
    @ReportedByPersonID BIGINT = NULL,
    @InvestigatedByOrganizationID BIGINT = NULL,
    @InvestigatedByPersonID BIGINT = NULL,
    @ReceivedByOrganizationID BIGINT = NULL,
    @ReceivedByPersonID BIGINT = NULL,
    @SiteID BIGINT,
    @DiagnosisDate DATETIME = NULL,
    @EnteredDate DATETIME = NULL,
    @ReportDate DATETIME = NULL,
    @AssignedDate DATETIME = NULL,
    @InvestigationDate DATETIME = NULL,
    @RowStatus INT,
    @ReportTypeID BIGINT = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @StatusTypeID BIGINT = NULL,
    @ReportCategoryTypeID BIGINT,
    @FarmTotalAnimalQuantity INT = NULL,
    @FarmSickAnimalQuantity INT = NULL,
    @FarmDeadAnimalQuantity INT = NULL,
    @FarmLatitude FLOAT = NULL,
    @FarmLongitude FLOAT = NULL,
    @FarmEpidemiologicalObservationID BIGINT = NULL,
    @ControlMeasuresObservationID BIGINT = NULL,
    @TestsConductedIndicator BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @FlocksOrHerds NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @Animals NVARCHAR(MAX) = NULL,
    @Vaccinations NVARCHAR(MAX) = NULL,
    @Samples NVARCHAR(MAX) = NULL,
    @PensideTests NVARCHAR(MAX) = NULL,
    @LaboratoryTests NVARCHAR(MAX) = NULL,
    @LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
    @CaseLogs NVARCHAR(MAX) = NULL,
    @ClinicalInformation NVARCHAR(MAX) = NULL,
    @Contacts NVARCHAR(MAX) = NULL,
    @CaseMonitorings NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @LinkLocalOrFieldSampleIDToReportID BIT = 0,
    @OutbreakCaseIndicator BIT = 0,
    @OutbreakCaseReportUID BIGINT = NULL,
    @OutbreakCaseStatusTypeID BIGINT = NULL,
    @OutbreakCaseQuestionnaireObservationID BIGINT = NULL,
    @PrimaryCaseIndicator BIT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT
            = 0,
                @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
                @ConnectedDiseaseReportLaboratoryTestID BIGINT = NULL,
                @RowAction INT = NULL,
                @RowID BIGINT,
                @Iteration INT = 0,
                @NewFarmOwnerID BIGINT = NULL,
                @FlockOrHerdID BIGINT = NULL,
                @FlockOrHerdMasterID BIGINT = NULL,
                @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
                @SickAnimalQuantity INT = NULL,
                @TotalAnimalQuantity INT = NULL,
                @DeadAnimalQuantity INT = NULL,
                @Comments NVARCHAR(2000) = NULL,
                @SpeciesID BIGINT = NULL,
                @SpeciesMasterID BIGINT = NULL,
                @SpeciesTypeID BIGINT = NULL,
                @StartOfSignsDate DATETIME = NULL,
                @AverageAge NVARCHAR(200) = NULL,
                @ObservationID BIGINT = NULL,
                @OutbreakSpeciesCaseStatusTypeID BIGINT = NULL,
                @AnimalID BIGINT = NULL,
                @SexTypeID BIGINT = NULL,
                @ConditionTypeID BIGINT = NULL,
                @AgeTypeID BIGINT = NULL,
                @EIDSSAnimalID NVARCHAR(200) = NULL,
                @AnimalName NVARCHAR(200) = NULL,
                @Color NVARCHAR(200) = NULL,
                @AnimalDescription NVARCHAR(200) = NULL,
                @ClinicalSignsIndicator BIGINT = NULL,
                @VaccinationID BIGINT,
                @VaccinationTypeID BIGINT = NULL,
                @RouteTypeID BIGINT = NULL,
                @VaccinationDate DATETIME = NULL,
                @Manufacturer NVARCHAR(200) = NULL,
                @LotNumber NVARCHAR(200) = NULL,
                @NumberVaccinated INT = NULL,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @RootSampleID BIGINT = NULL,
                @ParentSampleID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @CurrentSiteID BIGINT = NULL,
                @BirdStatusTypeID BIGINT = NULL,
                @PensideTestID BIGINT = NULL,
                @PensideTestResultTypeID BIGINT = NULL,
                @PensideTestNameTypeID BIGINT = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @TestDate DATETIME = NULL,
                @PensideTestCategoryTypeID BIGINT = NULL,
                @TestID BIGINT = NULL,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @StartedDate DATETIME = NULL,
                @ResultDate DATETIME = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestDiseaseReportID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @CaseLogID BIGINT,
                @LogStatusTypeID BIGINT = NULL,
                @LoggedByPersonID BIGINT = NULL,
                @LogDate DATETIME = NULL,
                @ActionRequired NVARCHAR(200) = NULL,
                @VeterinaryDiseaseReportRelationshipID BIGINT = NULL,
                @RelatedToSpeciesID BIGINT = NULL,
                @RelatedToAnimalID BIGINT = NULL,
                @RelatedToObservationID BIGINT = NULL,
                @FormTemplateID BIGINT,
                @ObservationSiteID BIGINT,
                @ActivityID BIGINT = NULL,
                @ActivityIDNew BIGINT = NULL,
                @ParameterID BIGINT = NULL,
                @ParameterValue SQL_VARIANT = NULL,
                @ParameterRowID BIGINT = NULL,
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventNote NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL,
                                                                                           -- Data audit
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = 10017085,                                           -- Veterinary disease report
                @ObjectID BIGINT = @DiseaseReportID,
                @ObjectTableID BIGINT = 75800000000,                                       -- tlbVetCase
                @ObjectVeterinaryDiseaseReportRelationshipTableID BIGINT = 53577790000004, -- VetDiseaseReportRelationship
                @ObjectObservationTableID BIGINT = 75640000000,                            -- tlbObservation
                @ObjectActivityParametersTableID BIGINT = 75410000000,                     -- tlbActivityParameters
                                                                                           -- End data audit
                @LabModuleSourceIndicator INT = 0,
                @SampleDiseaseReportID BIGINT = NULL,
                @EIDSSCaseID NVARCHAR(200) = NULL;
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL,
            OutbreakCaseStatusTypeID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @VaccinationsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            SpeciesID BIGINT NULL,
            VaccinationTypeID BIGINT NULL,
            RouteTypeID BIGINT NULL,
            DiseaseID BIGINT NULL,
            VaccinationDate DATETIME NULL,
            Manufacturer NVARCHAR(200) NULL,
            LotNumber NVARCHAR(200) NULL,
            NumberVaccinated INT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            LabModuleSourceIndicator INT NOT NULL,
            FarmID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @PensideTestsTemp TABLE
        (
            PensideTestID BIGINT NOT NULL,
            SampleID BIGINT NOT NULL,
            PensideTestNameTypeID BIGINT NULL,
            PensideTestResultTypeID BIGINT NULL,
            PensideTestCategoryTypeID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            TestedByOrganizationID BIGINT NULL,
            DiseaseID BIGINT NULL,
            TestDate DATETIME NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @CaseLogsTemp TABLE
        (
            CaseLogID BIGINT NOT NULL,
            LogStatusTypeID BIGINT NULL,
            LoggedByPersonID BIGINT NULL,
            LogDate DATETIME NULL,
            ActionRequired NVARCHAR(200) NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ClinicalInformationTemp TABLE
        (
            langId NVARCHAR(200) NULL,
            HerdID BIGINT NOT NULL,
            Herd NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SpeciesTypeName NVARCHAR(200) NULL,
            StatusTypeID BIGINT NULL,
            InvestigationPerformedTypeID BIGINT NULL
        );
        DECLARE @ActivityParametersTemp TABLE
        (
            ActivityID BIGINT NOT NULL,
            ParameterID BIGINT NOT NULL,
            ParameterValue SQL_VARIANT NULL,
            ParameterRowID BIGINT NOT NULL
        );
        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL,
            Note NVARCHAR(MAX) NULL
        );
        DECLARE @VeterinaryDiseaseReportAfterEdit TABLE
        (
            DiseaseReportID BIGINT,
            FarmID BIGINT,
            DiseaseID BIGINT,
            PersonEnteredByID BIGINT,
            PersonReportedByID BIGINT,
            PersonInvestigatedByID BIGINT,
            ObservationID BIGINT,
            ReportDate DATETIME,
            AssignedDate DATETIME,
            InvestigationDate DATETIME,
            FinalDiagnosisDate DATETIME,
            FieldAccessionID NVARCHAR(200),
            YNTestsConductedTypeID BIGINT,
            ReportedByOfficeID BIGINT,
            InvestigatedByOfficeID BIGINT,
            CaseReportTypeID BIGINT,
            CaseClassificationTypeID BIGINT,
            OutbreakID BIGINT,
            EnteredDate DATETIME,
            EIDSSReportID NVARCHAR(200),
            CaseProgressStatusTypeID BIGINT,
            ParentMonitoringSessionID BIGINT,
            CaseTypeID BIGINT,
            ReceivedByOfficeID BIGINT,
            ReceivedByPersonID BIGINT
        );
        DECLARE @VeterinaryDiseaseReportBeforeEdit TABLE
        (
            DiseaseReportID BIGINT,
            FarmID BIGINT,
            DiseaseID BIGINT,
            PersonEnteredByID BIGINT,
            PersonReportedByID BIGINT,
            PersonInvestigatedByID BIGINT,
            ObservationID BIGINT,
            ReportDate DATETIME,
            AssignedDate DATETIME,
            InvestigationDate DATETIME,
            FinalDiagnosisDate DATETIME,
            FieldAccessionID NVARCHAR(200),
            YNTestsConductedTypeID BIGINT,
            ReportedByOfficeID BIGINT,
            InvestigatedByOfficeID BIGINT,
            CaseReportTypeID BIGINT,
            CaseClassificationTypeID BIGINT,
            OutbreakID BIGINT,
            EnteredDate DATETIME,
            EIDSSReportID NVARCHAR(200),
            CaseProgressStatusTypeID BIGINT,
            ParentMonitoringSessionID BIGINT,
            CaseTypeID BIGINT,
            ReceivedByOfficeID BIGINT,
            ReceivedByPersonID BIGINT
        );

        BEGIN TRANSACTION;

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        -- Predetermine the outbreak report ID for the upcoming section
        SELECT @OutbreakCaseReportUID = OutbreakCaseReportUID
        FROM dbo.OutbreakCaseReport
        WHERE idfVetCase = @DiseaseReportID;

        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT,
                OutbreakCaseStatusTypeID BIGINT
            );

        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@Vaccinations)
            WITH
            (
                VaccinationID BIGINT,
                SpeciesID BIGINT,
                VaccinationTypeID BIGINT,
                RouteTypeID BIGINT,
                DiseaseID BIGINT,
                VaccinationDate DATETIME2,
                Manufacturer NVARCHAR(200),
                LotNumber NVARCHAR(200),
                NumberVaccinated INT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                LabModuleSourceIndicator INT,
                FarmID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );

        SET @Iteration =
        (
            SELECT COUNT(*) FROM dbo.tlbMaterial WHERE idfVetCase = @DiseaseReportID
        );

        INSERT INTO @PensideTestsTemp
        SELECT *
        FROM
            OPENJSON(@PensideTests)
            WITH
            (
                PensideTestID BIGINT,
                SampleID BIGINT,
                PensideTestNameTypeID BIGINT,
                PensideTestResultTypeID BIGINT,
                PensideTestCategoryTypeID BIGINT,
                TestedByPersonID BIGINT,
                TestedByOrganizationID BIGINT,
                DiseaseID BIGINT,
                TestDate DATETIME2,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @CaseLogsTemp
        SELECT *
        FROM
            OPENJSON(@CaseLogs)
            WITH
            (
                CaseLogID BIGINT,
                LogStatusTypeID BIGINT,
                LoggedByPersonID BIGINT,
                LogDate DATETIME2,
                ActionRequired NVARCHAR(200),
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @ClinicalInformationTemp
        SELECT *
        FROM
            OPENJSON(@ClinicalInformation)
            WITH
            (
                langId NVARCHAR(200),
                HerdID BIGINT,
                Herd NVARCHAR(200),
                ClinicalSignsTypeID BIGINT,
                SpeciesTypeID BIGINT,
                SpeciesTypeName NVARCHAR(200),
                StatusTypeID BIGINT,
                InvestigationPerformedTypeID BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX),
                Note NVARCHAR(MAX)
            );

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID
                  AND intRowStatus = 0
        )
        BEGIN
            -- Get next key value
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVetCase', @DiseaseReportID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vet Disease Report',
                                               @EIDSSReportID OUTPUT,
                                               NULL;

            -- Data audit
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @DiseaseReportID,
                                                      @ObjectTableID,
                                                      @EIDSSReportID, 
                                                      @DataAuditEventID OUTPUT;
            -- End data audit

            IF @ReportCategoryTypeID = 10012004 --Avian
            BEGIN
                UPDATE dbo.tlbFarmActual
                SET intAvianTotalAnimalQty = @FarmTotalAnimalQuantity,
                    intAvianSickAnimalQty = @FarmSickAnimalQuantity,
                    intAvianDeadAnimalQty = @FarmDeadAnimalQuantity,
                    AuditUpdateUser = @AuditUserName
                WHERE idfFarmActual = @FarmMasterID;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   NULL,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            ELSE --Livestock
            BEGIN
                UPDATE dbo.tlbFarmActual
                SET intLivestockTotalAnimalQty = @FarmTotalAnimalQuantity,
                    intLivestockSickAnimalQty = @FarmSickAnimalQuantity,
                    intLivestockDeadAnimalQty = @FarmDeadAnimalQuantity,
                    AuditUpdateUser = @AuditUserName
                WHERE idfFarmActual = @FarmMasterID;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   NULL,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END

            INSERT INTO dbo.tlbVetCase
            (
                idfVetCase,
                idfFarm,
                idfsFinalDiagnosis,
                idfPersonEnteredBy,
                idfPersonReportedBy,
                idfPersonInvestigatedBy,
                idfObservation,
                idfsSite,
                datReportDate,
                datAssignedDate,
                datInvestigationDate,
                datFinalDiagnosisDate,
                strTestNotes,
                strSummaryNotes,
                strClinicalNotes,
                strFieldAccessionID,
                idfsYNTestsConducted,
                intRowStatus,
                idfReportedByOffice,
                idfInvestigatedByOffice,
                idfsCaseReportType,
                strDefaultDisplayDiagnosis,
                idfsCaseClassification,
                idfOutbreak,
                datEnteredDate,
                strCaseID,
                idfsCaseProgressStatus,
                strSampleNotes,
                datModificationForArchiveDate,
                idfParentMonitoringSession,
                idfsCaseType,
                idfReceivedByOffice,
                idfReceivedByPerson,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@DiseaseReportID,
             @FarmID,
             @DiseaseID,
             @EnteredByPersonID,
             @ReportedByPersonID,
             @InvestigatedByPersonID,
             @ControlMeasuresObservationID,
             @SiteID,
             @ReportDate,
             @AssignedDate,
             @InvestigationDate,
             @DiagnosisDate,
             NULL,
             NULL,
             NULL,
             @EIDSSFieldAccessionID,
             @TestsConductedIndicator,
             @RowStatus,
             @ReportedByOrganizationID,
             @InvestigatedByOrganizationID,
             @ReportTypeID,
             NULL,
             @ClassificationTypeID,
             @OutbreakID,
             @EnteredDate,
             @EIDSSReportID,
             @StatusTypeID,
             NULL,
             NULL,
             @MonitoringSessionID,
             @ReportCategoryTypeID,
             @ReceivedByOrganizationID,
             @ReceivedByPersonID,
             @AuditUserName,
             10519001,
             '[{"idfVetCase":' + CAST(@DiseaseReportID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @DiseaseReportID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSReportID
            );

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSReportID
            WHERE idfObject = @FarmEpidemiologicalObservationID
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSReportID
            WHERE idfObject = @ControlMeasuresObservationID
                  AND idfDataAuditEvent IS NULL;
            -- End data audit

            UPDATE @EventsTemp
            SET ObjectId = @DiseaseReportID,
                Note = REPLACE(Note, 'diseaseReportID=0', 'diseaseReportID=' + CAST(@DiseaseReportID AS NVARCHAR(300)))
            WHERE ObjectId = 0;

            -- Update imported samples from laboratory
            UPDATE @SamplesTemp 
            SET VeterinaryDiseaseReportID = @DiseaseReportID
            WHERE VeterinaryDiseaseReportID = 0
                  AND LabModuleSourceIndicator = 1;
        END
        ELSE
        BEGIN
            -- Data audit
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @DiseaseReportID,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;
            -- End data audit

            IF @ReportCategoryTypeID = 10012004 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   @MonitoringSessionID,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   @MonitoringSessionID,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            -- Data audit
            INSERT INTO @VeterinaryDiseaseReportBeforeEdit
            (
                DiseaseReportID,
                FarmID,
                DiseaseID,
                PersonEnteredByID,
                PersonReportedByID,
                PersonInvestigatedByID,
                ObservationID,
                ReportDate,
                AssignedDate,
                InvestigationDate,
                FinalDiagnosisDate,
                FieldAccessionID,
                YNTestsConductedTypeID,
                ReportedByOfficeID,
                InvestigatedByOfficeID,
                CaseReportTypeID,
                CaseClassificationTypeID,
                OutbreakID,
                EnteredDate,
                EIDSSReportID,
                CaseProgressStatusTypeID,
                ParentMonitoringSessionID,
                CaseTypeID,
                ReceivedByOfficeID,
                ReceivedByPersonID
            )
            SELECT idfVetCase,
                   idfFarm,
                   idfsFinalDiagnosis,
                   idfPersonEnteredBy,
                   idfPersonReportedBy,
                   idfPersonInvestigatedBy,
                   idfObservation,
                   datReportDate,
                   datAssignedDate,
                   datInvestigationDate,
                   datFinalDiagnosisDate,
                   strFieldAccessionID,
                   idfsYNTestsConducted,
                   idfReportedByOffice,
                   idfInvestigatedByOffice,
                   idfsCaseReportType,
                   idfsCaseClassification,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   idfParentMonitoringSession,
                   idfsCaseType,
                   idfReceivedByOffice,
                   idfReceivedByPerson
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID;
            -- End data audit

            UPDATE dbo.tlbVetCase
            SET idfFarm = @FarmID,
                idfsFinalDiagnosis = @DiseaseID,
                idfPersonEnteredBy = @EnteredByPersonID,
                idfPersonReportedBy = @ReportedByPersonID,
                idfPersonInvestigatedBy = @InvestigatedByPersonID,
                idfReceivedByPerson = @ReceivedByPersonID,
                idfObservation = @ControlMeasuresObservationID,
                idfsSite = @SiteID,
                datReportDate = @ReportDate,
                datAssignedDate = @AssignedDate,
                datInvestigationDate = @InvestigationDate,
                datFinalDiagnosisDate = @DiagnosisDate,
                strTestNotes = NULL,
                strSummaryNotes = NULL,
                strClinicalNotes = NULL,
                strFieldAccessionID = @EIDSSFieldAccessionID,
                idfsYNTestsConducted = @TestsConductedIndicator,
                intRowStatus = @RowStatus,
                idfReportedByOffice = @ReportedByOrganizationID,
                idfInvestigatedByOffice = @InvestigatedByOrganizationID,
                idfReceivedByOffice = @ReceivedByOrganizationID,
                idfsCaseReportType = @ReportTypeID,
                idfsCaseClassification = @ClassificationTypeID,
                idfOutbreak = @OutbreakID,
                datEnteredDate = @EnteredDate,
                strCaseID = @EIDSSReportID,
                idfsCaseProgressStatus = @StatusTypeID,
                strSampleNotes = NULL,
                idfParentMonitoringSession = @MonitoringSessionID,
                idfsCaseType = @ReportCategoryTypeID,
                AuditUpdateUser = @AuditUserName
            WHERE idfVetCase = @DiseaseReportID;

            -- Data audit
            INSERT INTO @VeterinaryDiseaseReportAfterEdit
            (
                DiseaseReportID,
                FarmID,
                DiseaseID,
                PersonEnteredByID,
                PersonReportedByID,
                PersonInvestigatedByID,
                ObservationID,
                ReportDate,
                AssignedDate,
                InvestigationDate,
                FinalDiagnosisDate,
                FieldAccessionID,
                YNTestsConductedTypeID,
                ReportedByOfficeID,
                InvestigatedByOfficeID,
                CaseReportTypeID,
                CaseClassificationTypeID,
                OutbreakID,
                EnteredDate,
                EIDSSReportID,
                CaseProgressStatusTypeID,
                ParentMonitoringSessionID,
                CaseTypeID,
                ReceivedByOfficeID,
                ReceivedByPersonID
            )
            SELECT idfVetCase,
                   idfFarm,
                   idfsFinalDiagnosis,
                   idfPersonEnteredBy,
                   idfPersonReportedBy,
                   idfPersonInvestigatedBy,
                   idfObservation,
                   datReportDate,
                   datAssignedDate,
                   datInvestigationDate,
                   datFinalDiagnosisDate,
                   strFieldAccessionID,
                   idfsYNTestsConducted,
                   idfReportedByOffice,
                   idfInvestigatedByOffice,
                   idfsCaseReportType,
                   idfsCaseClassification,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   idfParentMonitoringSession,
                   idfsCaseType,
                   idfReceivedByOffice,
                   idfReceivedByPerson
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4575810000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FarmID,
                   a.FarmID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FarmID <> b.FarmID)
                  OR (
                         a.FarmID IS NOT NULL
                         AND b.FarmID IS NULL
                     )
                  OR (
                         a.FarmID IS NULL
                         AND b.FarmID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80940000000,
                   a.DiseaseReportID,
                   NULL,
                   b.DiseaseID,
                   a.DiseaseID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.DiseaseID <> b.DiseaseID)
                  OR (
                         a.DiseaseID IS NOT NULL
                         AND b.DiseaseID IS NULL
                     )
                  OR (
                         a.DiseaseID IS NULL
                         AND b.DiseaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80910000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonEnteredByID,
                   a.PersonEnteredByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonEnteredByID <> b.PersonEnteredByID)
                  OR (
                         a.PersonEnteredByID IS NOT NULL
                         AND b.PersonEnteredByID IS NULL
                     )
                  OR (
                         a.PersonEnteredByID IS NULL
                         AND b.PersonEnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80930000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonReportedByID,
                   a.PersonReportedByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonReportedByID <> b.PersonReportedByID)
                  OR (
                         a.PersonReportedByID IS NOT NULL
                         AND b.PersonReportedByID IS NULL
                     )
                  OR (
                         a.PersonReportedByID IS NULL
                         AND b.PersonReportedByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80920000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonInvestigatedByID,
                   a.PersonInvestigatedByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonInvestigatedByID <> b.PersonInvestigatedByID)
                  OR (
                         a.PersonInvestigatedByID IS NOT NULL
                         AND b.PersonInvestigatedByID IS NULL
                     )
                  OR (
                         a.PersonInvestigatedByID IS NULL
                         AND b.PersonInvestigatedByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566320000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ObservationID,
                   a.ObservationID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ObservationID <> b.ObservationID)
                  OR (
                         a.ObservationID IS NOT NULL
                         AND b.ObservationID IS NULL
                     )
                  OR (
                         a.ObservationID IS NULL
                         AND b.ObservationID IS NOT NULL
                     )

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80870000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ReportDate,
                   a.ReportDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ReportDate <> b.ReportDate)
                  OR (
                         a.ReportDate IS NOT NULL
                         AND b.ReportDate IS NULL
                     )
                  OR (
                         a.ReportDate IS NULL
                         AND b.ReportDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80850000000,
                   a.DiseaseReportID,
                   NULL,
                   b.AssignedDate,
                   a.AssignedDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.AssignedDate <> b.AssignedDate)
                  OR (
                         a.AssignedDate IS NOT NULL
                         AND b.AssignedDate IS NULL
                     )
                  OR (
                         a.AssignedDate IS NULL
                         AND b.AssignedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566330000000,
                   a.DiseaseReportID,
                   NULL,
                   b.InvestigationDate,
                   a.InvestigationDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.InvestigationDate <> b.InvestigationDate)
                  OR (
                         a.InvestigationDate IS NOT NULL
                         AND b.InvestigationDate IS NULL
                     )
                  OR (
                         a.InvestigationDate IS NULL
                         AND b.InvestigationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80860000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FinalDiagnosisDate,
                   a.FinalDiagnosisDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FinalDiagnosisDate <> b.FinalDiagnosisDate)
                  OR (
                         a.FinalDiagnosisDate IS NOT NULL
                         AND b.FinalDiagnosisDate IS NULL
                     )
                  OR (
                         a.FinalDiagnosisDate IS NULL
                         AND b.FinalDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566340000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FieldAccessionID,
                   a.FieldAccessionID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FieldAccessionID <> b.FieldAccessionID)
                  OR (
                         a.FieldAccessionID IS NOT NULL
                         AND b.FieldAccessionID IS NULL
                     )
                  OR (
                         a.FieldAccessionID IS NULL
                         AND b.FieldAccessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578870000000,
                   a.DiseaseReportID,
                   NULL,
                   b.YNTestsConductedTypeID,
                   a.YNTestsConductedTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.YNTestsConductedTypeID <> b.YNTestsConductedTypeID)
                  OR (
                         a.YNTestsConductedTypeID IS NOT NULL
                         AND b.YNTestsConductedTypeID IS NULL
                     )
                  OR (
                         a.YNTestsConductedTypeID IS NULL
                         AND b.YNTestsConductedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618090000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ReportedByOfficeID,
                   a.ReportedByOfficeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ReportedByOfficeID <> b.ReportedByOfficeID)
                  OR (
                         a.ReportedByOfficeID IS NOT NULL
                         AND b.ReportedByOfficeID IS NULL
                     )
                  OR (
                         a.ReportedByOfficeID IS NULL
                         AND b.ReportedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618100000000,
                   a.DiseaseReportID,
                   NULL,
                   b.InvestigatedByOfficeID,
                   a.InvestigatedByOfficeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.InvestigatedByOfficeID <> b.InvestigatedByOfficeID)
                  OR (
                         a.InvestigatedByOfficeID IS NOT NULL
                         AND b.InvestigatedByOfficeID IS NULL
                     )
                  OR (
                         a.InvestigatedByOfficeID IS NULL
                         AND b.InvestigatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618120000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseReportTypeID,
                   a.CaseReportTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseReportTypeID <> b.CaseReportTypeID)
                  OR (
                         a.CaseReportTypeID IS NOT NULL
                         AND b.CaseReportTypeID IS NULL
                     )
                  OR (
                         a.CaseReportTypeID IS NULL
                         AND b.CaseReportTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665470000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseClassificationTypeID,
                   a.CaseClassificationTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseClassificationTypeID <> b.CaseClassificationTypeID)
                  OR (
                         a.CaseClassificationTypeID IS NOT NULL
                         AND b.CaseClassificationTypeID IS NULL
                     )
                  OR (
                         a.CaseClassificationTypeID IS NULL
                         AND b.CaseClassificationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665490000000,
                   a.DiseaseReportID,
                   NULL,
                   b.OutbreakID,
                   a.OutbreakID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.OutbreakID <> b.OutbreakID)
                  OR (
                         a.OutbreakID IS NOT NULL
                         AND b.OutbreakID IS NULL
                     )
                  OR (
                         a.OutbreakID IS NULL
                         AND b.OutbreakID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665500000000,
                   a.DiseaseReportID,
                   NULL,
                   b.EnteredDate,
                   a.EnteredDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.EnteredDate <> b.EnteredDate)
                  OR (
                         a.EnteredDate IS NOT NULL
                         AND b.EnteredDate IS NULL
                     )
                  OR (
                         a.EnteredDate IS NULL
                         AND b.EnteredDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665510000000,
                   a.DiseaseReportID,
                   NULL,
                   b.EIDSSReportID,
                   a.EIDSSReportID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.EIDSSReportID <> b.EIDSSReportID)
                  OR (
                         a.EIDSSReportID IS NOT NULL
                         AND b.EIDSSReportID IS NULL
                     )
                  OR (
                         a.EIDSSReportID IS NULL
                         AND b.EIDSSReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665520000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseProgressStatusTypeID,
                   a.CaseProgressStatusTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseProgressStatusTypeID <> b.CaseProgressStatusTypeID)
                  OR (
                         a.CaseProgressStatusTypeID IS NOT NULL
                         AND b.CaseProgressStatusTypeID IS NULL
                     )
                  OR (
                         a.CaseProgressStatusTypeID IS NULL
                         AND b.CaseProgressStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665540000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ParentMonitoringSessionID,
                   a.ParentMonitoringSessionID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ParentMonitoringSessionID <> b.ParentMonitoringSessionID)
                  OR (
                         a.ParentMonitoringSessionID IS NOT NULL
                         AND b.ParentMonitoringSessionID IS NULL
                     )
                  OR (
                         a.ParentMonitoringSessionID IS NULL
                         AND b.ParentMonitoringSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665560000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseTypeID,
                   a.CaseTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseTypeID <> b.CaseTypeID)
                  OR (
                         a.CaseTypeID IS NOT NULL
                         AND b.CaseTypeID IS NULL
                     )
                  OR (
                         a.CaseTypeID IS NULL
                         AND b.CaseTypeID IS NOT NULL
                     );
        END;

        -- VUC11 and VUC12 - connected disease report logic.
        IF @RelatedToDiseaseReportID IS NOT NULL
        BEGIN
            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.VetDiseaseReportRelationship
                WHERE VetDiseaseReportID = @DiseaseReportID
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'VetDiseaseReportRelationship',
                                                  @VeterinaryDiseaseReportRelationshipID OUTPUT;

                INSERT INTO dbo.VetDiseaseReportRelationship
                (
                    VetDiseaseReportRelnUID,
                    VetDiseaseReportID,
                    RelatedToVetDiseaseReportID,
                    RelationshipTypeID,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@VeterinaryDiseaseReportRelationshipID,
                 @DiseaseReportID,
                 @RelatedToDiseaseReportID,
                 10503001,
                 0  ,
                 10519001,
                 '[{"VetDiseaseReportRelnUID":' + CAST(@VeterinaryDiseaseReportRelationshipID AS NVARCHAR(300))
                 + ',"VetDiseaseReportID":' + CAST(@DiseaseReportID AS NVARCHAR(300)) + '}]',
                 @AuditUserName
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectVeterinaryDiseaseReportRelationshipTableID,
                 @VeterinaryDiseaseReportRelationshipID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectVeterinaryDiseaseReportRelationshipTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @EIDSSReportID
                );
            -- End data audit
            END;
        END;

        -- An outbreak reference via a case must be created in order to tie the disease report to the outbreak session.
        IF @OutbreakCaseIndicator = 1
        BEGIN
            IF @OutbreakCaseReportUID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutbreakCaseReportUID OUTPUT;

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Vet Outbreak Case',
                                                @EIDSSCaseID OUTPUT,
                                                NULL;

                INSERT INTO dbo.OutbreakCaseReport
                (
                    OutbreakCaseReportUID,
                    idfOutbreak,
                    strOutbreakCaseID,
                    idfHumanCase,
                    idfVetCase,
                    OutbreakCaseObservationId,
                    OutbreakCaseStatusId,
                    OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM,
                    AuditUpdateUser,
                    AuditUpdateDTM
                )
                VALUES
                (@OutbreakCaseReportUID,
                 @OutbreakID,
                 @EIDSSCaseID,
                 NULL,
                 @DiseaseReportID,
                 @OutbreakCaseQuestionnaireObservationID,
                 @OutbreakCaseStatusTypeID,
                 @ClassificationTypeID,
                 @PrimaryCaseIndicator,
                 0  ,
                 10519001,
                 '[{"OutBreakCaseReportUID":' + CAST(@OutbreakCaseReportUID AS NVARCHAR(300)) + ',"idfOutbreak":'
                 + CAST(@OutbreakID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE(),
                 @AuditUserName,
                 GETDATE()
                );
            END
            ELSE
            BEGIN
                UPDATE dbo.OutbreakCaseReport
                SET OutbreakCaseStatusId = @OutbreakCaseStatusTypeID,
                    OutbreakCaseClassificationID = @ClassificationTypeID,
                    IsPrimaryCaseFlag = @PrimaryCaseIndicator,
                    intRowStatus = 0,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE(),
                    OutbreakCaseObservationID = @OutbreakCaseQuestionnaireObservationID
                WHERE OutbreakCaseReportUID = @OutbreakCaseReportUID;
            END
        END

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_FLOCK_HERD_SET @AuditUserName,
                                                @DataAuditEventID,
                                                @EIDSSReportID,
                                                @FlockOrHerdID OUTPUT,
                                                @FlockOrHerdMasterID,
                                                @FarmID,
                                                @EIDSSFlockOrHerdID,
                                                @SickAnimalQuantity,
                                                @TotalAnimalQuantity,
                                                @DeadAnimalQuantity,
                                                NULL,
                                                @RowStatus,
                                                @RowAction;

            UPDATE @SpeciesTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID,
                @OutbreakSpeciesCaseStatusTypeID = OutbreakCaseStatusTypeID
            FROM @SpeciesTemp;

            -- VUC11 and VUC12 - connected disease report logic for clinical species investigations.
            IF @RelatedToDiseaseReportID IS NOT NULL
               AND @RowAction = 1 -- Insert
            BEGIN
                IF @RelatedToObservationID IS NOT NULL
                BEGIN
                    SELECT @FormTemplateID = idfsFormTemplate,
                           @ObservationSiteID = idfsSite
                    FROM dbo.tlbObservation
                    WHERE idfObservation = @RelatedToObservationID;

                    SET @ObservationID = -1;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_GBL_OBSERVATION_SET @ObservationID OUTPUT,
                                                         @FormTemplateID,
                                                         @ObservationSiteID,
                                                         0,
                                                         1, 
                                                         @AuditUserName, 
                                                         @DataAuditEventID, 
                                                         @EIDSSReportID;

                    UPDATE @SpeciesTemp
                    SET ObservationID = @ObservationID
                    WHERE SpeciesMasterID = @SpeciesMasterID;

                    INSERT INTO @ActivityParametersTemp
                    SELECT idfActivityParameters,
                           idfsParameter,
                           varValue,
                           idfRow
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @RelatedToObservationID;

                    WHILE EXISTS (SELECT * FROM @ActivityParametersTemp)
                    BEGIN
                        SELECT TOP 1
                            @ActivityID = ActivityID,
                            @ParameterID = ParameterID,
                            @ParameterValue = ParameterValue,
                            @ParameterRowID = ParameterRowID
                        FROM @ActivityParametersTemp;

                        INSERT INTO @SuppressSelect
                        EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                          @ActivityIDNew OUTPUT;

                        INSERT INTO dbo.tlbActivityParameters
                        (
                            idfActivityParameters,
                            idfsParameter,
                            idfObservation,
                            varValue,
                            idfRow,
                            intRowStatus,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser,
                            AuditCreateDTM
                        )
                        VALUES
                        (@ActivityIDNew,
                         @ParameterID,
                         @ObservationID,
                         @ParameterValue,
                         @ParameterRowID,
                         0  ,
                         10519001,
                         '[{"idfActivityParameters":' + CAST(@ActivityIDNew AS NVARCHAR(300)) + '}]',
                         @AuditUserName,
                         GETDATE()
                        );

                        -- Data audit
                        INSERT INTO dbo.tauDataAuditDetailCreate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfObject,
                            idfObjectDetail,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser
                        )
                        VALUES
                        (@DataAuditEventID,
                         @ObjectActivityParametersTableID,
                         @ActivityIDNew,
                         @ObservationID,
                         10519001,
                         '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                         + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                         @AuditUserName
                        );
                        -- End data audit

                        DELETE FROM @ActivityParametersTemp
                        WHERE ActivityID = @ActivityID;
                    END;
                END;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_WITH_AUDITING_SET @AuditUserName,
                                                           @DataAuditEventID,
                                                           @EIDSSReportID,
                                                           @SpeciesID OUTPUT,
                                                           @SpeciesMasterID,
                                                           @SpeciesTypeID,
                                                           @FlockOrHerdID,
                                                           @ObservationID,
                                                           @StartOfSignsDate,
                                                           @AverageAge,
                                                           @SickAnimalQuantity,
                                                           @TotalAnimalQuantity,
                                                           @DeadAnimalQuantity,
                                                           @Comments,
                                                           @RowStatus,
                                                           @RowAction,
                                                           @OutbreakSpeciesCaseStatusTypeID;

            UPDATE @AnimalsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @VaccinationsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @SamplesTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AnimalsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AnimalID,
                @AnimalID = AnimalID,
                @SexTypeID = SexTypeID,
                @ConditionTypeID = ConditionTypeID,
                @AgeTypeID = AgeTypeID,
                @SpeciesID = SpeciesID,
                @ObservationID = ObservationID,
                @AnimalDescription = AnimalDescription,
                @EIDSSAnimalID = EIDSSAnimalID,
                @AnimalName = AnimalName,
                @Color = Color,
                @ClinicalSignsIndicator = ClinicalSignsIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AnimalsTemp;

            -- VUC11 and VUC12 - connected disease report logic for clinical signs.
            IF @RelatedToDiseaseReportID IS NOT NULL
               AND @RowAction = 1 -- Insert
               AND @ObservationID IS NOT NULL
            BEGIN
                SELECT @FormTemplateID = idfsFormTemplate,
                       @ObservationSiteID = idfsSite
                FROM dbo.tlbObservation
                WHERE idfObservation = @ObservationID;

                DELETE FROM @ActivityParametersTemp;

                INSERT INTO @ActivityParametersTemp
                SELECT idfActivityParameters,
                       idfsParameter,
                       varValue,
                       idfRow
                FROM dbo.tlbActivityParameters
                WHERE idfObservation = @ObservationID;

                SET @ObservationID = -1;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_OBSERVATION_SET @ObservationID OUTPUT,
                                                     @FormTemplateID,
                                                     @ObservationSiteID,
                                                     0,
                                                     1, 
                                                     @AuditUserName, 
                                                     @DataAuditEventID, 
                                                     @EIDSSReportID;

                UPDATE @AnimalsTemp
                SET ObservationID = @ObservationID
                WHERE AnimalID = @RowID;


                WHILE EXISTS (SELECT * FROM @ActivityParametersTemp)
                BEGIN
                    SELECT TOP 1
                        @ActivityID = ActivityID,
                        @ParameterID = ParameterID,
                        @ParameterValue = ParameterValue,
                        @ParameterRowID = ParameterRowID
                    FROM @ActivityParametersTemp;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                      @ActivityIDNew OUTPUT;

                    INSERT INTO dbo.tlbActivityParameters
                    (
                        idfActivityParameters,
                        idfsParameter,
                        idfObservation,
                        varValue,
                        idfRow,
                        intRowStatus,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@ActivityIDNew,
                     @ParameterID,
                     @ObservationID,
                     @ParameterValue,
                     @ParameterRowID,
                     0  ,
                     10519001,
                     '[{"idfActivityParameters":' + CAST(@ActivityIDNew AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     GETDATE()
                    );

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailCreate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        idfObjectDetail,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser
                    )
                    VALUES
                    (@DataAuditEventID,
                     @ObjectActivityParametersTableID,
                     @ActivityIDNew,
                     @ObservationID,
                     10519001,
                     '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                     + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                     @AuditUserName
                    );
                    -- End data audit

                    DELETE FROM @ActivityParametersTemp
                    WHERE ActivityID = @ActivityID;
                END;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_ANIMALS_SET @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID,
                                             @AnimalID OUTPUT,
                                             @SexTypeID,
                                             @ConditionTypeID,
                                             @AgeTypeID,
                                             @SpeciesID,
                                             @ObservationID,
                                             @AnimalDescription,
                                             @EIDSSAnimalID,
                                             @AnimalName,
                                             @Color,
                                             @ClinicalSignsIndicator,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @SamplesTemp
            SET AnimalID = @AnimalID
            WHERE AnimalID = @RowID;

            DELETE FROM @AnimalsTemp
            WHERE AnimalID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @VaccinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = VaccinationID,
                @VaccinationID = VaccinationID,
                @SpeciesID = SpeciesID,
                @VaccinationTypeID = VaccinationTypeID,
                @RouteTypeID = RouteTypeID,
                @DiseaseID = DiseaseID,
                @VaccinationDate = VaccinationDate,
                @Manufacturer = Manufacturer,
                @LotNumber = LotNumber,
                @NumberVaccinated = NumberVaccinated,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @VaccinationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_VACCINATIONS_SET @AuditUserName,
                                                  @DataAuditEventID,
                                                  @EIDSSReportID,
                                                  @VaccinationID OUTPUT,
                                                  @DiseaseReportID,
                                                  @SpeciesID,
                                                  @VaccinationTypeID,
                                                  @RouteTypeID,
                                                  @DiseaseID,
                                                  @VaccinationDate,
                                                  @Manufacturer,
                                                  @LotNumber,
                                                  @NumberVaccinated,
                                                  @Comments,
                                                  @RowStatus,
                                                  @RowAction;

            DELETE FROM @VaccinationsTemp
            WHERE VaccinationID = @RowID;
        END;

        IF @Contacts IS NOT NULL
            EXEC dbo.USSP_OMM_CONTACT_SET NULL,
                                          @Contacts,
                                          @User = @AuditUserName,
                                          @OutBreakCaseReportUID = @OutbreakCaseReportUID,
                                          @FunctionCall = 1;

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @SampleDiseaseReportID = VeterinaryDiseaseReportID,
                @MonitoringSessionID = MonitoringSessionID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CollectionDate,
                @SentDate = SentDate,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @EnteredDate = EnteredDate,
                @Comments = Comments,
                @SiteID = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @BirdStatusTypeID = BirdStatusTypeID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @LabModuleSourceIndicator = LabModuleSourceIndicator,
                @RowAction = RowAction
            FROM @SamplesTemp;

            IF (
                   @EIDSSLocalOrFieldSampleID IS NULL
                   OR @EIDSSLocalOrFieldSampleID = ''
               )
               AND @LinkLocalOrFieldSampleIDToReportID = 1
            BEGIN
                SET @Iteration = @Iteration + 1;
                IF @Iteration < 10
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @EIDSSReportID + '-0' + CONVERT(NVARCHAR(4), @Iteration);
                END
                ELSE
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @EIDSSReportID + '-' + CONVERT(NVARCHAR(4), @Iteration);
                END;
            END;

            -- Check if sample is being de-linked, so use sample disease report ID passed in from 
            -- sample record instead of parent disease report ID.
            IF @LabModuleSourceIndicator = 0
            BEGIN
                SET @SampleDiseaseReportID = @DiseaseReportID;
            END

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID,
                                             @SampleID OUTPUT,
                                             @SampleTypeID,
                                             @RootSampleID,
                                             @ParentSampleID,
                                             @FarmOwnerID,
                                             @SpeciesID,
                                             @AnimalID,
                                             NULL,
                                             @MonitoringSessionID,
                                             NULL,
                                             NULL,
                                             @SampleDiseaseReportID,
                                             @CollectionDate,
                                             @CollectedByPersonID,
                                             @CollectedByOrganizationID,
                                             @SentDate,
                                             @SentToOrganizationID,
                                             @EIDSSLocalOrFieldSampleID,
                                             @SiteID,
                                             @EnteredDate,
                                             @ReadOnlyIndicator,
                                             @SampleStatusTypeID,
                                             @Comments,
                                             @CurrentSiteID,
                                             @DiseaseID,
                                             @BirdStatusTypeID,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @PensideTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @LaboratoryTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @PensideTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = PensideTestID,
                @PensideTestID = PensideTestID,
                @SampleID = SampleID,
                @PensideTestResultTypeID = PensideTestResultTypeID,
                @PensideTestNameTypeID = PensideTestNameTypeID,
                @RowStatus = RowStatus,
                @TestedByPersonID = TestedByPersonID,
                @TestedByOrganizationID = TestedByOrganizationID,
                @DiseaseID = DiseaseID,
                @TestDate = TestDate,
                @PensideTestCategoryTypeID = PensideTestCategoryTypeID,
                @RowAction = RowAction
            FROM @PensideTestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_PENSIDE_TESTS_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @PensideTestID OUTPUT,
                                                   @SampleID,
                                                   @PensideTestResultTypeID,
                                                   @PensideTestNameTypeID,
                                                   @TestedByPersonID,
                                                   @TestedByOrganizationID,
                                                   @DiseaseID,
                                                   @TestDate,
                                                   @PensideTestCategoryTypeID,
                                                   @RowStatus,
                                                   @RowAction;

            DELETE FROM @PensideTestsTemp
            WHERE PensideTestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @LaboratoryTestsTemp;

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --veterinary disease report, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
                SET @TestDiseaseReportID = NULL;
            END
            ELSE
            BEGIN
                SET @TestDiseaseReportID = @DiseaseReportID;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET @TestID OUTPUT,
                                           @TestNameTypeID,
                                           @TestCategoryTypeID,
                                           @TestResultTypeID,
                                           @TestStatusTypeID,
                                           @DiseaseID,
                                           @SampleID,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @Comments,
                                           @RowStatus,
                                           @StartedDate,
                                           @ResultDate,
                                           @TestedByOrganizationID,
                                           @TestedByPersonID,
                                           @ResultEnteredByOrganizationID,
                                           @ResultEnteredByPersonID,
                                           @ValidatedByOrganizationID,
                                           @ValidatedByPersonID,
                                           @ReadOnlyIndicator,
                                           @NonLaboratoryTestIndicator,
                                           @ExternalTestIndicator,
                                           @PerformedByOrganizationID,
                                           @ReceivedDate,
                                           @ContactPersonName,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @TestDiseaseReportID,
                                           @AuditUserName,
                                           @DataAuditEventID,
                                           @EIDSSReportID,
                                           @RowAction;

            UPDATE @LaboratoryTestInterpretationsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @LaboratoryTestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestInterpretationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @LaboratoryTestInterpretationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUserName,
                                                          @DataAuditEventID,
                                                          @EIDSSReportID, 
                                                          @TestInterpretationID OUTPUT,
                                                          @DiseaseID,
                                                          @InterpretedStatusTypeID,
                                                          @ValidatedByOrganizationID,
                                                          @ValidatedByPersonID,
                                                          @InterpretedByOrganizationID,
                                                          @InterpretedByPersonID,
                                                          @TestID,
                                                          @ValidatedStatusIndicator,
                                                          @ReportSessionCreatedIndicator,
                                                          @ValidatedComment,
                                                          @InterpretedComment,
                                                          @ValidatedDate,
                                                          @InterpretedDate,
                                                          @RowStatus,
                                                          @ReadOnlyIndicator,
                                                          @RowAction;

            IF @ReportSessionCreatedIndicator = 1 AND @RowAction = 1
            BEGIN
                SET @ConnectedDiseaseReportLaboratoryTestID = @TestID;
            END

            DELETE FROM @LaboratoryTestInterpretationsTemp
            WHERE TestInterpretationID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @CaseLogsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = CaseLogID,
                @CaseLogID = CaseLogID,
                @LogStatusTypeID = LogStatusTypeID,
                @LoggedByPersonID = LoggedByPersonID,
                @LogDate = LogDate,
                @ActionRequired = ActionRequired,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @CaseLogsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_DISEASE_REPORT_LOG_SET @AuditUserName,
                                                        @DataAuditEventID,
                                                        @EIDSSReportID,
                                                        @CaseLogID,
                                                        @LogStatusTypeID,
                                                        @DiseaseReportID,
                                                        @LoggedByPersonID,
                                                        @LogDate,
                                                        @ActionRequired,
                                                        @Comments,
                                                        @RowStatus,
                                                        @RowAction;

            DELETE FROM @CaseLogsTemp
            WHERE CaseLogID = @RowID;
        END;

        IF @CaseMonitorings IS NOT NULL
        BEGIN
            EXEC dbo.USSP_OMM_CASE_MONITORING_SET @CaseMonitorings = @CaseMonitorings,
                                                  @VeterinaryDiseaseReportID = @DiseaseReportID,
                                                  @User = @AuditUserName;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventNote = Note,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventId,
                                             @EventTypeId,
                                             @EventUserId,
                                             @EventObjectId,
                                             @EventDiseaseId,
                                             @EventSiteId,
                                             @EventInformationString,
                                             @EventLoginSiteId,
                                             @EventLocationId,
                                             @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @DiseaseReportID DiseaseReportID,
               @EIDSSReportID EIDSSReportID,
               @OutbreakCaseReportUID CaseID,
               @EIDSSCaseID EIDSSCaseID, 
               @ConnectedDiseaseReportLaboratoryTestID ConnectedDiseaseReportLaboratoryTestID;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[USP_ADMIN_DEPARTMENTS_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_DEPARTMENTS_SET
--
-- Description: Adds or updates a department in an organization.
--
-- Author: Ricky Moss
-- 
-- Change Log:
-- Name 				Date       Description
-- -------------------- ---------- ---------------------------------------------------------------
-- Stephen Long		    12/13/2022 Initial release for data auditing for SAUC30 and 31.
-- Ann Xiong		02/17/2023 Found and fix a few issues when data audit Soft Delete
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_ADMIN_DEPARTMENTS_SET]
		@LanguageID = N'en-US',
		@DepartmentID = NULL,
		@OrganizationID = 48120000000,
		@DefaultName = N'DEP199',
		@NationalName = N'DEP1100',
		@DepartmentNameTypeID = NULL,
		@AuditUserName = N'rykermase',
		@DataAuditEventID = NULL, 
		@EIDSSObjectID = NULL, 
		@RowAction = NULL - values are R for read, I for insert, U for update and D for delete.

SELECT	'Return Value' = @return_value
*/
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_ADMIN_DEPARTMENTS_SET]
(
    @LanguageID NVARCHAR(50),
    @DepartmentID BIGINT = NULL,
    @DefaultName NVARCHAR(200),
    @NationalName NVARCHAR(200),
    @OrganizationID BIGINT,
    @DepartmentNameTypeID BIGINT,
    @Order INT = 0,
    @AuditUserName NVARCHAR(200) = NULL,
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200),
    @RowStatus INT = 0
)
AS
BEGIN
    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode INT = 0,
                                                                      -- Data audit
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @CustomizationPackageID BIGINT,
            @ObjectTypeID BIGINT = 10017016,                          -- Department
            @ObjectID BIGINT = @DepartmentID,
            @ObjectTableID BIGINT = 50815890000000,                   -- tlbDepartment
            @ObjectBaseReferenceTableID BIGINT = 75820000000,         -- trtBaseReference
            @ObjectStringNameTranslationTableID BIGINT = 75990000000; -- trtStringNameTranslation

    DECLARE @DepartmentAfterEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );
    DECLARE @DepartmentBeforeEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF @RowStatus = 1 -- Soft Delete
        BEGIN
            IF @DepartmentNameTypeID IS NULL
            BEGIN
                SELECT @DepartmentNameTypeID = idfsDepartmentName
                FROM dbo.tlbDepartment
                WHERE idfDepartment = @DepartmentID;
            END

            UPDATE dbo.tlbDepartment
            SET intRowStatus = @RowStatus,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfDepartment = @DepartmentID;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   @DepartmentID,
                   @AuditUserName,
                   @EIDSSObjectID;
            -- End data audit

            UPDATE dbo.trtBaseReference
            SET intRowStatus = @RowStatus,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @DepartmentNameTypeID
                  AND intRowStatus = 0;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectBaseReferenceTableID,
                   @DepartmentNameTypeID,
                   @AuditUserName,
                   @EIDSSObjectID;
            -- End data audit

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = @RowStatus,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @DepartmentNameTypeID;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectStringNameTranslationTableID,
                   @DepartmentNameTypeID,
                   @AuditUserName,
                   @EIDSSObjectID;
        -- End data audit
        END
        ELSE
        BEGIN
            IF
            (
                SELECT COUNT(b.idfsReference)
                FROM dbo.FN_GBL_ReferenceRepair_GET(@LanguageID, 19000164) b
                    INNER JOIN dbo.tlbDepartment d
                        ON d.idfsDepartmentName = b.idfsReference
                WHERE b.strDefault = @DefaultName
                      AND d.intRowStatus = 0
                      AND d.idfOrganization = @OrganizationID
                      AND (
                              (
                                  d.idfDepartment <> @DepartmentID
                                  AND @DepartmentID IS NOT NULL
                                  AND @DepartmentID > 0
                              ) -- Update
                              OR (
                                     @DepartmentID IS NULL
                                     OR @DepartmentID < 0
                                 )
                          ) -- Insert
            ) > 0
            BEGIN
                SELECT @ReturnMessage = 'DOES EXIST';
            END

            IF @ReturnMessage <> 'DOES EXIST'
            BEGIN
                IF @DepartmentID IS NULL
                   OR @DepartmentID < 0
                BEGIN
                    IF (UPPER(@LanguageID) = 'EN-US' AND ISNULL(@DefaultName, N'') = N'')
                    BEGIN
                        SET @DefaultName = @NationalName;
                    END

                    EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @DepartmentNameTypeID OUTPUT,
                                                            19000164,
                                                            @LanguageID,
                                                            @DefaultName,
                                                            @NationalName,
                                                            0,
                                                            @Order,
                                                            0,
                                                            @AuditUserName,
                                                            @DataAuditEventID,
                                                            @EIDSSObjectID;

                    EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbDepartment', @DepartmentID OUTPUT;

                    INSERT INTO dbo.tlbDepartment
                    (
                        idfDepartment,
                        idfsDepartmentName,
                        idfOrganization,
                        strReservedAttribute,
                        intRowStatus,
                        rowguid,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@DepartmentID,
                     @DepartmentNameTypeID,
                     @OrganizationID,
                     dbo.FN_GBL_DATACHANGE_INFO(@AuditUserName),
                     0  ,
                     NEWID(),
                     10519001,
                     N'[{"idfDepartment":' + CAST(@DepartmentID AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     GETDATE()
                    );

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailCreate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        strObject
                    )
                    VALUES
                    (@DataAuditEventID,
                     @ObjectTableID,
                     @DepartmentID,
                     10519001,
                     '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                     + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     @EIDSSObjectID
                    );
                -- End data audit
                END
                ELSE
                BEGIN
                    SELECT @DepartmentNameTypeID =
                    (
                        SELECT idfsDepartmentName
                        FROM dbo.tlbDepartment
                        WHERE idfDepartment = @DepartmentID
                    );

                    EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @DepartmentNameTypeID,
                                                            19000164,
                                                            @LanguageID,
                                                            @DefaultName,
                                                            @NationalName,
                                                            0,
                                                            @Order,
                                                            0,
                                                            @AuditUserName,
                                                            @DataAuditEventID,
                                                            @EIDSSObjectID;

                    -- Data audit
                    INSERT INTO @DepartmentBeforeEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;
                    -- End data audit

                    UPDATE dbo.tlbDepartment
                    SET idfsDepartmentName = @DepartmentNameTypeID,
                        strReservedAttribute = dbo.FN_GBL_DATACHANGE_INFO(@AuditUserName),
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfDepartment = @DepartmentID;

                    -- Data audit
                    INSERT INTO @DepartmentAfterEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50815910000000,
                           a.DepartmentID,
                           NULL,
                           b.DepartmentNameBaseReferenceID,
                           a.DepartmentNameBaseReferenceID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @DepartmentAfterEdit AS a
                        FULL JOIN @DepartmentBeforeEdit AS b
                            ON a.DepartmentID = b.DepartmentID
                    WHERE (a.DepartmentNameBaseReferenceID <> b.DepartmentNameBaseReferenceID)
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NOT NULL
                                 AND b.DepartmentNameBaseReferenceID IS NULL
                             )
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NULL
                                 AND b.DepartmentNameBaseReferenceID IS NOT NULL
                             );
                    -- End data audit
                END
            END
        END;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @DepartmentID KeyId,
               'DepartmentID' KeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ORG_SET]...';


GO
--=================================================================================================
-- Name: USP_ADMIN_ORG_SET
--
-- Description: Creates or updates an organization record.
--
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name             Date      Change
-- ---------------- --------- --------------------------------------------------------------------
-- Ricky Moss		07/12/2019 Restructured to set name and full name of organizations correctly.
-- Stephen Long     04/24/2021 Updated for location hierarchy and removed settlement type ID 
--                             parameter.
-- Stephen Long     06/14/2021 Removed latitude and longitude parameters as not needed in the use
--                             case.  Added departments list and table variable processing.
-- Stephen Long     06/17/2021 Added duplicate abbreviated and full name check as per special 
--                             requirement 1 on use SAUC05.
-- Stephen Long     06/30/2021 Removed english check on default and national name.
-- Stephen Long     08/05/2021 Added audit user name to address set.
-- Stephen Long     08/16/2021 Removal of associating a new organization to a default site ID.
--                             Association of an organization to a site will be done on the 
--                             site screen.
-- Stephen Long     09/01/2021 Changed department stored procedure call from USSP to USP to 
--                             reduce duplication of stored procedures doing the same logic.
-- Mark Wilson		10/06/2021 Added NULL Elevation parm to USP_GBL_ADDRESS_SET.
-- Stephen Long     10/29/2021 Changed from USP_GBL_ADDRESS_SET to USSP_GBL_ADDRESS_SET.
-- Stephen Long     12/13/2022 Added data audit logic for SAUC30 and 31.
-- Ann Xiong		02/17/2023 Found and fix the issue of INSERT INTO @OrganizationBeforeEdit twice.
-- 
-- Testing Code:
--
-- EXEC USP_ADMIN_ORG_SET NULL, 'Test Org 821-12', 'Test Org 821-11', 'Test Organization 821-12', 
--	'Test Organization 821-12', '404-555-4567', NULL, 226,  'TO821-12', 'en', 0,  NULL, 780000000, 
--	37130000000, 3724300000000, NULL, NULL, '2345', NULL, 'Main St', NULL, NULL, 0, NULL, NULL, 1, 
--	10504001, NULL, NULL, NULL
-- EXEC USP_ADMIN_ORG_SET 52448330000054, 'Test Org 71-3', 'Test Org 71-3', 'Test Organization 71-3', 
--	'Test Organization 71-3', '404-555-4567', NULL, 226,  'TO71-1', 'en', 0,  NULL, 780000000, 
--	37130000000, 3724300000000, 1343040000000, NULL, '2345', NULL, 'Main St', NULL, NULL, 0, NULL, 
--	NULL, 1, 10504001, NULL, NULL, NULL
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_ORG_SET]
(
    @LanguageID NVARCHAR(50),
    @OrganizationKey BIGINT = NULL,
    @OrganizationID NVARCHAR(100),
    @OrganizationTypeID BIGINT = NULL,
    @AbbreviatedNameDefaultValue NVARCHAR(200),
    @AbbreviatedNameNationalValue NVARCHAR(200),
    @FullNameDefaultValue NVARCHAR(200),
    @FullNameNationalValue NVARCHAR(200),
    @CurrentCustomizationID BIGINT = NULL,
    @AddressID BIGINT = NULL,
    @LocationID BIGINT,
    @StreetName NVARCHAR(200) = NULL,
    @Apartment NVARCHAR(200) = NULL,
    @Building NVARCHAR(200) = NULL,
    @House NVARCHAR(200) = NULL,
    @PostalCode NVARCHAR(200) = NULL,
    @ForeignAddressIndicator BIT = 0,
    @ForeignAddressString NVARCHAR(200) = NULL,
    @SharedAddressIndicator BIT = 1,
    @ContactPhone NVARCHAR(200) = NULL,
    @AccessoryCode INT,
    @Order INT,
    @OwnershipFormTypeID BIGINT = NULL,
    @LegalFormTypeID BIGINT = NULL,
    @MainFormOfActivityTypeID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @Departments NVARCHAR(MAX) = NULL
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @RowID BIGINT = NULL,
        @RowAction CHAR(1) = NULL,
        @RowStatus INT = 0,
        @DepartmentID BIGINT = NULL,
        @DefaultValue NVARCHAR(200) = NULL,
        @NationalValue NVARCHAR(200) = NULL,
        @DepartmentOrder INT = 0,
                                             -- Data audit
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectTypeID BIGINT = 10017034,     -- Organization
        @ObjectID BIGINT = @OrganizationKey,
        @ObjectTableID BIGINT = 75650000000; -- tlbOffice
DECLARE @DepartmentsTemp TABLE
(
    DepartmentID BIGINT NOT NULL,
    DepartmentNameDefaultValue NVARCHAR(200) NULL,
    DepartmentNameNationalValue NVARCHAR(200) NULL,
    OrderNumber INT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1)
);
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @SuppressDepartmentSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200),
    KeyId BIGINT NULL,
    KeyName VARCHAR(MAX)
);
DECLARE @OrganizationAfterEdit TABLE
(
    OrganizationID BIGINT,
    OrganizationFullNameID BIGINT,
    OrganizjationAbbreviationNameID BIGINT,
    CustomizationPackageID BIGINT,
    LocationID BIGINT,
    ContactPhone NVARCHAR(200),
    AccessoryCode INT,
    EIDSSOrganizationID NVARCHAR(100),
    OrganizationTypeID BIGINT, 
    OwnershipFormID BIGINT, 
    LegalFormID BIGINT, 
    MainFormOfActivityID BIGINT
);
DECLARE @OrganizationBeforeEdit TABLE
(
    OrganizationID BIGINT,
    OrganizationFullNameID BIGINT,
    OrganizjationAbbreviationNameID BIGINT,
    CustomizationPackageID BIGINT,
    LocationID BIGINT,
    ContactPhone NVARCHAR(200),
    AccessoryCode INT,
    EIDSSOrganizationID NVARCHAR(100),
    OrganizationTypeID BIGINT, 
    OwnershipFormID BIGINT, 
    LegalFormID BIGINT, 
    MainFormOfActivityID BIGINT
);
BEGIN
    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF (
               ISNULL(@OrganizationID, N'') <> N''
               AND EXISTS
        (
            SELECT idfOffice
            FROM dbo.tlbOffice
            WHERE strOrganizationID = @OrganizationID
                  AND intRowStatus = 0
        )
               AND @OrganizationKey IS NULL
           )
           OR (
                  ISNULL(@OrganizationID, N'') <> N''
                  AND EXISTS
        (
            SELECT idfOffice
            FROM dbo.tlbOffice
            WHERE strOrganizationID = @OrganizationID
                  AND idfOffice <> @OrganizationKey
                  AND intRowStatus = 0
        )
                  AND @OrganizationKey IS NOT NULL
              )
        BEGIN
            SELECT @ReturnMessage = 'ID DOES EXIST';

            SELECT @ReturnCode = 1;

            SELECT @OrganizationKey = NULL;
        END

        IF @ReturnCode = 0
           AND (
                   ISNULL(@AbbreviatedNameDefaultValue, N'') <> N''
                   AND
                   (
                       SELECT COUNT(*)
                       FROM dbo.trtBaseReference
                       WHERE strDefault = @AbbreviatedNameDefaultValue
                             AND idfsReferenceType = 19000045
                             AND intRowStatus = 0
                             AND @OrganizationKey IS NULL
                             AND @OrganizationID IS NULL
                   ) > 0 -- use 0 in this scenario as the record is brand new
                   OR
                   (
                       SELECT COUNT(*)
                       FROM dbo.trtBaseReference
                       WHERE strDefault = @AbbreviatedNameDefaultValue
                             AND idfsReferenceType = 19000045
                             AND intRowStatus = 0
                             AND @OrganizationKey IS NOT NULL
                             AND @OrganizationID IS NULL
                   ) > 1 -- use 1 in this scenario to not count a duplicate against itself
               )
           AND (
                   ISNULL(@FullNameDefaultValue, N'') <> N''
                   AND
                   (
                       SELECT COUNT(*)
                       FROM dbo.trtBaseReference
                       WHERE strDefault = @FullNameDefaultValue
                             AND idfsReferenceType = 19000046
                             AND intRowStatus = 0
                             AND @OrganizationKey IS NULL
                             AND @OrganizationID IS NULL
                   ) > 0 -- use 0 in this scenario as the record is brand new
                   OR
                   (
                       SELECT COUNT(*)
                       FROM dbo.trtBaseReference
                       WHERE strDefault = @FullNameDefaultValue
                             AND idfsReferenceType = 19000046
                             AND intRowStatus = 0
                             AND @OrganizationKey IS NOT NULL
                             AND @OrganizationID IS NULL
                   ) > 1 -- use 1 in this scenario to not count a duplicate against itself
               )
        BEGIN
            SELECT @ReturnMessage = 'NAME DOES EXIST';

            SELECT @ReturnCode = 2;

            SELECT @OrganizationKey = NULL;
        END

        IF @ReturnCode = 0
        BEGIN
            SET NOCOUNT ON;

            BEGIN TRANSACTION;

            IF @OrganizationKey IS NULL
            BEGIN
                -- Data audit
                SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

                INSERT INTO @SuppressSelect
                EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                     @AuditSiteID,
                                                     @DataAuditEventTypeID,
                                                     @ObjectTypeID,
                                                     @OrganizationKey,
                                                     @ObjectTableID,
                                                     @DataAuditEventID OUTPUT;
            -- End data audit
            END
            ELSE
            BEGIN
                -- Data audit
                SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

                INSERT INTO @SuppressSelect
                EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                     @AuditSiteID,
                                                     @DataAuditEventTypeID,
                                                     @ObjectTypeID,
                                                     @OrganizationKey,
                                                     @ObjectTableID,
                                                     @DataAuditEventID OUTPUT;
            END

            INSERT INTO @DepartmentsTemp
            SELECT *
            FROM
                OPENJSON(@Departments)
                WITH
                (
                    DepartmentID BIGINT,
                    DepartmentNameDefaultValue NVARCHAR(200),
                    DepartmentNameNationalValue NVARCHAR(200),
                    OrderNumber INT,
                    RowStatus INT,
                    RowAction CHAR(1)
                );

            DECLARE @OrganizationFullNameID BIGINT,
                    @OrganizationAbbreviatedNameID BIGINT;

            SELECT @OrganizationFullNameID = idfsOfficeName,
                   @OrganizationAbbreviatedNameID = idfsOfficeAbbreviation
            FROM dbo.tlbOffice
            WHERE idfOffice = @OrganizationKey;

            IF NOT EXISTS
            (
                SELECT idfsOfficeName
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @OrganizationFullNameID OUTPUT,
                                                        19000046,
                                                        @LanguageID,
                                                        @FullNameDefaultValue,
                                                        @FullNameNationalValue,
                                                        0,
                                                        @Order,
                                                        0,
                                                        @AuditUserName,
                                                        @DataAuditEventID,
                                                        @OrganizationID;
            END
            ELSE
            BEGIN
                SELECT @OrganizationFullNameID =
                (
                    SELECT idfsOfficeName
                    FROM dbo.tlbOffice
                    WHERE idfOffice = @OrganizationKey
                );

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @OrganizationFullNameID OUTPUT,
                                                        19000046,
                                                        @LanguageID,
                                                        @FullNameDefaultValue,
                                                        @FullNameNationalValue,
                                                        0,
                                                        @Order,
                                                        0,
                                                        @AuditUserName,
                                                        @DataAuditEventID,
                                                        @OrganizationID;
            END

            IF NOT EXISTS
            (
                SELECT idfsOfficeAbbreviation
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @OrganizationAbbreviatedNameID OUTPUT,
                                                        19000045,
                                                        @LanguageID,
                                                        @AbbreviatedNameDefaultValue,
                                                        @AbbreviatedNameNationalValue,
                                                        0,
                                                        @Order,
                                                        0,
                                                        @AuditUserName,
                                                        @DataAuditEventID,
                                                        @OrganizationID;
            END
            ELSE
            BEGIN
                SELECT @OrganizationAbbreviatedNameID =
                (
                    SELECT idfsOfficeAbbreviation
                    FROM dbo.tlbOffice
                    WHERE idfOffice = @OrganizationKey
                );

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @OrganizationAbbreviatedNameID OUTPUT,
                                                        19000045,
                                                        @LanguageID,
                                                        @AbbreviatedNameDefaultValue,
                                                        @AbbreviatedNameNationalValue,
                                                        0,
                                                        @Order,
                                                        0,
                                                        @AuditUserName,
                                                        @DataAuditEventID,
                                                        @OrganizationID;
            END

            IF @CurrentCustomizationID IS NULL
            BEGIN
                SET @CurrentCustomizationID = dbo.FN_GBL_CustomizationPackage_GET();
            END

            -- Set the address including potentially the street and postal code tables. 
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING @AddressID OUTPUT,
                                                           @DataAuditEventID,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           @LocationID,
                                                           @Apartment,
                                                           @Building,
                                                           @StreetName,
                                                           @House,
                                                           @PostalCode,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           @ForeignAddressIndicator,
                                                           @ForeignAddressString,
                                                           @SharedAddressIndicator,
                                                           @AuditUserName;

            IF @OrganizationKey IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbOffice', @OrganizationKey OUTPUT;

                INSERT INTO dbo.tlbOffice
                (
                    idfOffice,
                    idfsOfficeName,
                    idfsOfficeAbbreviation,
                    idfCustomizationPackage,
                    idfLocation,
                    idfsSite,
                    strContactPhone,
                    intHACode,
                    strOrganizationID,
                    OrganizationTypeID,
                    OwnershipFormID,
                    MainFormOfActivityID,
                    LegalFormID,
                    AuditCreateUser
                )
                VALUES
                (   @OrganizationKey,
                    @OrganizationFullNameID,
                    @OrganizationAbbreviatedNameID,
                    @CurrentCustomizationID,
                    @AddressID,
                    NULL, -- Site ID will be updated on the site screen/site set stored procedure.
                    @ContactPhone,
                    @AccessoryCode,
                    @OrganizationID,
                    @OrganizationTypeID,
                    @OwnershipFormTypeID,
                    @MainFormOfActivityTypeID,
                    @LegalFormTypeID,
                    @AuditUserName
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableID,
                 @OrganizationKey,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @OrganizationID
                );
            -- End data audit
            END
            ELSE
            BEGIN
                -- Data audit
                INSERT INTO @OrganizationBeforeEdit
                (
                    OrganizationID,
                    OrganizationFullNameID,
                    OrganizjationAbbreviationNameID,
                    CustomizationPackageID,
                    LocationID,
                    ContactPhone,
                    AccessoryCode,
                    EIDSSOrganizationID, 
                    OrganizationTypeID, 
                    OwnershipFormID,
                    LegalFormID,
                    MainFormOfActivityID
                )
                SELECT idfOffice,
                       idfsOfficeName,
                       idfsOfficeAbbreviation,
                       idfCustomizationPackage,
                       idfLocation,
                       strContactPhone,
                       intHACode,
                       strOrganizationID,
                       OrganizationTypeID,
                       OwnershipFormID,
                       LegalFormID,
                       MainFormOfActivityID
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey;
                -- End data audit

                UPDATE dbo.tlbOffice
                SET strContactPhone = @ContactPhone,
                    idfLocation = @AddressID,
                    intHACode = @AccessoryCode,
                    strOrganizationID = @OrganizationID,
                    OrganizationTypeID = @OrganizationTypeID,
                    OwnershipFormID = @OwnershipFormTypeID,
                    LegalFormID = @LegalFormTypeID,
                    MainFormOfActivityID = @MainFormofActivityTypeID,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfOffice = @OrganizationKey;

                -- Data audit
                INSERT INTO @OrganizationAfterEdit
                (
                    OrganizationID,
                    OrganizationFullNameID,
                    OrganizjationAbbreviationNameID,
                    CustomizationPackageID,
                    LocationID,
                    ContactPhone,
                    AccessoryCode,
                    EIDSSOrganizationID, 
                    OrganizationTypeID, 
                    OwnershipFormID,
                    LegalFormID,
                    MainFormOfActivityID
                )
                SELECT idfOffice,
                       idfsOfficeName,
                       idfsOfficeAbbreviation,
                       idfCustomizationPackage,
                       idfLocation,
                       strContactPhone,
                       intHACode,
                       strOrganizationID,
                       OrganizationTypeID,
                       OwnershipFormID,
                       LegalFormID,
                       MainFormOfActivityID
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80120000000,
                       a.OrganizationID,
                       NULL,
                       b.OrganizationFullNameID,
                       a.OrganizationFullNameID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.OrganizationFullNameID <> b.OrganizationFullNameID)
                      OR (
                             a.OrganizationFullNameID IS NOT NULL
                             AND b.OrganizationFullNameID IS NULL
                         )
                      OR (
                             a.OrganizationFullNameID IS NULL
                             AND b.OrganizationFullNameID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80110000000,
                       a.OrganizationID,
                       NULL,
                       b.OrganizjationAbbreviationNameID,
                       a.OrganizjationAbbreviationNameID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.OrganizjationAbbreviationNameID <> b.OrganizjationAbbreviationNameID)
                      OR (
                             a.OrganizjationAbbreviationNameID IS NOT NULL
                             AND b.OrganizjationAbbreviationNameID IS NULL
                         )
                      OR (
                             a.OrganizjationAbbreviationNameID IS NULL
                             AND b.OrganizjationAbbreviationNameID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51577490000000,
                       a.OrganizationID,
                       NULL,
                       b.CustomizationPackageID,
                       a.CustomizationPackageID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.CustomizationPackageID <> b.CustomizationPackageID)
                      OR (
                             a.CustomizationPackageID IS NOT NULL
                             AND b.CustomizationPackageID IS NULL
                         )
                      OR (
                             a.CustomizationPackageID IS NULL
                             AND b.CustomizationPackageID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4577920000000,
                       a.OrganizationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80150000000,
                       a.OrganizationID,
                       NULL,
                       b.ContactPhone,
                       a.ContactPhone,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.ContactPhone <> b.ContactPhone)
                      OR (
                             a.ContactPhone IS NOT NULL
                             AND b.ContactPhone IS NULL
                         )
                      OR (
                             a.ContactPhone IS NULL
                             AND b.ContactPhone IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815930000000,
                       a.OrganizationID,
                       NULL,
                       b.AccessoryCode,
                       a.AccessoryCode,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.AccessoryCode <> b.AccessoryCode)
                      OR (
                             a.AccessoryCode IS NOT NULL
                             AND b.AccessoryCode IS NULL
                         )
                      OR (
                             a.AccessoryCode IS NULL
                             AND b.AccessoryCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51523430000000,
                       a.OrganizationID,
                       NULL,
                       b.EIDSSOrganizationID,
                       a.EIDSSOrganizationID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.EIDSSOrganizationID <> b.EIDSSOrganizationID)
                      OR (
                             a.EIDSSOrganizationID IS NOT NULL
                             AND b.EIDSSOrganizationID IS NULL
                         )
                      OR (
                             a.EIDSSOrganizationID IS NULL
                             AND b.EIDSSOrganizationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51586990000045,
                       a.OrganizationID,
                       NULL,
                       b.OrganizationTypeID,
                       a.OrganizationTypeID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.OrganizationTypeID <> b.OrganizationTypeID)
                      OR (
                             a.OrganizationTypeID IS NOT NULL
                             AND b.OrganizationTypeID IS NULL
                         )
                      OR (
                             a.OrganizationTypeID IS NULL
                             AND b.OrganizationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51586990000046,
                       a.OrganizationID,
                       NULL,
                       b.OwnershipFormID,
                       a.OwnershipFormID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.OwnershipFormID <> b.OwnershipFormID)
                      OR (
                             a.OwnershipFormID IS NOT NULL
                             AND b.OwnershipFormID IS NULL
                         )
                      OR (
                             a.OwnershipFormID IS NULL
                             AND b.OwnershipFormID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51586990000047,
                       a.OrganizationID,
                       NULL,
                       b.LegalFormID,
                       a.LegalFormID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.LegalFormID <> b.LegalFormID)
                      OR (
                             a.LegalFormID IS NOT NULL
                             AND b.LegalFormID IS NULL
                         )
                      OR (
                             a.LegalFormID IS NULL
                             AND b.LegalFormID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51586990000048,
                       a.OrganizationID,
                       NULL,
                       b.MainFormOfActivityID,
                       a.MainFormOfActivityID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.MainFormOfActivityID <> b.MainFormOfActivityID)
                      OR (
                             a.MainFormOfActivityID IS NOT NULL
                             AND b.MainFormOfActivityID IS NULL
                         )
                      OR (
                             a.MainFormOfActivityID IS NULL
                             AND b.MainFormOfActivityID IS NOT NULL
                         );
            -- End data audit
            END

            WHILE EXISTS (SELECT * FROM @DepartmentsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = DepartmentID,
                    @DepartmentID = DepartmentID,
                    @DefaultValue = DepartmentNameDefaultValue,
                    @NationalValue = DepartmentNameNationalValue,
                    @DepartmentOrder = OrderNumber,
                    @RowStatus = RowStatus
                FROM @DepartmentsTemp
                ORDER BY RowStatus DESC,
                         DepartmentID;

                INSERT INTO @SuppressDepartmentSelect
                EXECUTE dbo.USP_ADMIN_DEPARTMENTS_SET @LanguageID,
                                                      @DepartmentID,
                                                      @DefaultValue,
                                                      @NationalValue,
                                                      @OrganizationKey,
                                                      NULL,
                                                      @DepartmentOrder,
                                                      @AuditUserName,
                                                      @DataAuditEventID,
                                                      @OrganizationID,
                                                      @RowStatus;

                SET @ReturnMessage =
                (
                    SELECT MAX(ReturnMessage) FROM @SuppressDepartmentSelect
                );

                IF @ReturnMessage = 'DOES EXIST'
                BEGIN
                    SET @ReturnMessage = 'DEPARTMENT DEFAULT VALUE DOES EXISTS,' + @DefaultValue;
                    SET @ReturnCode = 3;

                    DELETE FROM @DepartmentsTemp;
                END
                ELSE
                BEGIN
                    DELETE FROM @DepartmentsTemp
                    WHERE DepartmentID = @RowID;
                END
            END;

            IF @@TRANCOUNT > 0
                COMMIT;
        END

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @OrganizationKey KeyId,
               'OrganizationKey' KeyName,
               @AddressID AdditionalKeyId,
               'AddressID' AdditionalKeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
END
GO
PRINT N'Creating Extended Property [dbo].[tstAggrSetting].[idfCustomizationPackage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = 'Country identifier', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tstAggrSetting', @level2type = N'COLUMN', @level2name = N'idfCustomizationPackage';


GO
PRINT N'Creating Extended Property [dbo].[tstAggrSetting].[strValue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = 'Value', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tstAggrSetting', @level2type = N'COLUMN', @level2name = N'strValue';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_Diseases_BY_IDS_GETLIST_Paged]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_Diseases_BY_IDS_GETLIST_Paged]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_BASE_REFERENCEBYNAMES_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_BASE_REFERENCEBYNAMES_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_STAT_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_STAT_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_SYSTEMEVENTS_LOG_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_SYSTEMEVENTS_LOG_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_BaseRef_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_BaseRef_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_BASE_REFERENCE_Advanced_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_BASE_REFERENCE_Advanced_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST_Paged]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST_Paged]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_BASE_REFERENCE_GETBatchList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_BASE_REFERENCE_GETBatchList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_STAT_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_STAT_GetList]';


GO
PRINT N'Refreshing Procedure [Report].[USP_GBL_LKUP_BaseRef_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_GBL_LKUP_BaseRef_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_SYSTEMFUNCTION_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_SYSTEMFUNCTION_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_BASE_REFERENCE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_BASE_REFERENCE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_CHILDTABLESUSAGE_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_CHILDTABLESUSAGE_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_Employee_Permissions_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_Employee_Permissions_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Determinants_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Determinants_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParameterReferenceTypes_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParameterReferenceTypes_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_TemplateDeterminantValues_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_TemplateDeterminantValues_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_LKUP_ReferenceType_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_LKUP_ReferenceType_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ASPNetUser_GetRolesAndPermissionsByOrg]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ASPNetUser_GetRolesAndPermissionsByOrg]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_REFERENCETYPE_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_REFERENCETYPE_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_AGEGROUP_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_AGEGROUP_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_BASEREFERENCE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_BASEREFERENCE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_CASECLASSIFICATION_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_CASECLASSIFICATION_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_MEASURELIST_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_MEASURELIST_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_MEASURELIST_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_MEASURELIST_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_REPORTDIAGNOSISGROUP_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_REPORTDIAGNOSISGROUP_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SAMPLETYPEREFERENCE_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SAMPLETYPEREFERENCE_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SPECIESTYPE_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SPECIESTYPE_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_STATISTICDATATYPE_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_STATISTICDATATYPE_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VECTORSUBTYPE_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VECTORSUBTYPE_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VECTORTYPE_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VECTORTYPE_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_STAT_GETCOUNT]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_STAT_GETCOUNT]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Statistic_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Statistic_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AggregateSetting_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AggregateSetting_GetList]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseV6]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDiseaseV6]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseNew]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDiseaseNew]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_AnnualInfectiousDisease]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_AnnualInfectiousDisease]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_Form1ADiagnosticInvestigationsAZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_Form1ADiagnosticInvestigationsAZ]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_Form1ASanitaryMeasuresAZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_Form1ASanitaryMeasuresAZ]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_Form1AVaccinationMeasuresAZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_Form1AVaccinationMeasuresAZ]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_SummaryAggregateActionsAZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_SummaryAggregateActionsAZ]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_Comparative_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_Comparative_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ExternalComparative_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ExternalComparative_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeTwoYears_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeTwoYears_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_BorderRayonsComparativeReport_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_BorderRayonsComparativeReport_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Hum_ComparativeGG_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Hum_ComparativeGG_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeSeveralYearsByMonthsGG_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeSeveralYearsByMonthsGG_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDisease]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDisease]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseFatal]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDiseaseFatal]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_FormN1InfectiousDiseases]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_FormN1InfectiousDiseases]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_FormN1InfectiousDiseases_IntrahospitalInfections]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_FormN1InfectiousDiseases_IntrahospitalInfections]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_CasesByRayonAndDiseaseSummary]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_CasesByRayonAndDiseaseSummary]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_Comparative]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_Comparative]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ExternalComparative]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ExternalComparative]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeTwoYears]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeTwoYears]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeTwoYears_Graph]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeTwoYears_Graph]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Hum_ComparativeGG]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Hum_ComparativeGG]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeSeveralYearsByMonthsGG]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeSeveralYearsByMonthsGG]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParameterTemplate_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParameterTemplate_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParameterTemplateCopyOnly_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParameterTemplateCopyOnly_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ILI_Aggregate_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ILI_Aggregate_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParameterFixedPresetValue_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParameterFixedPresetValue_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Parameters_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Parameters_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParameterTypes_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParameterTypes_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Rules_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Rules_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Sections_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Sections_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Template_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Template_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VECTORTYPEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VECTORTYPEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Parameter_Copy]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Parameter_Copy]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_REP_WHOEXPORT]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_REP_WHOEXPORT]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_MatrixSeed_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_MatrixSeed_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_OMM_CONVERT_CONTACT_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Contact_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Section_Copy]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Section_Copy]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_EIDSSMenu_MenuID];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_ObjName];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_ObjType];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_PageToolTip];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetTranslation__idfsLanguage];

ALTER TABLE [dbo].[trtResourceSetTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetTranslation_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetTranslation_trtResourceSet];

ALTER TABLE [dbo].[trtResourceTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceTranslation_idfsLanguage];

ALTER TABLE [dbo].[trtResourceTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceTranslation_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceTranslation_trtResource];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_tstSite_idfsSite];


GO

UPDATE tlbEIDSSVersionControl SET intRowStatus = 1;
INSERT INTO [dbo].[tlbEIDSSVersionControl]
           ([ApplicationVersion]
           ,[DatabaseVersion]
           ,[Ver_Start_Timestamp]
           ,[Ver_End_Timestamp]
           ,[intRowStatus])
     VALUES
           ('7.0.337.9',
           '7.0.337.9',
           GETDATE(),
           DATEADD(DAY, 365, GETDATE()),
           0);

PRINT N'Update complete.';


GO
