/*
Deployment script for EIDSS7_GG_ARCHIVE_MOA

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
PRINT N'Altering Function [dbo].[fn1100SearchQuery__52593860000000]...';


GO


ALTER FUNCTION [dbo].[fn1100SearchQuery__52593860000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_PatientCRAddress_ID], 
			[ref_GL_sflHC_PatientCRAddress].[strDefaultShortAddressString] as [sflHC_PatientCRAddress], 
			v.[sflHC_PatientAge], 
			v.[sflHC_PatientAgeGroup], 
			v.[sflHC_AntimicrobialTherapy_ID], 
			[ref_sflHC_AntimicrobialTherapy].[name] as [sflHC_AntimicrobialTherapy], 
			v.[sflHC_CaseClassification_ID], 
			[ref_sflHC_CaseClassification].[name] as [sflHC_CaseClassification], 
			v.[sflHC_CaseID], 
			v.[sflHC_HospitalizationStatus_ID], 
			[ref_sflHC_HospitalizationStatus].[name] as [sflHC_HospitalizationStatus], 
			v.[sflHC_EnteredDate], 
			v.[sflHC_ModificationDate], 
			v.[sflHC_PatientDOB], 
			v.[sflHC_CompletionPaperFormDate], 
			v.[sflHC_PatientDeathDate], 
			v.[sflHC_PatientDischargeDate], 
			v.[sflHC_ExposureDate], 
			v.[sflHC_FacilityLastVisitDate], 
			v.[sflHC_SymptomOnsetDate], 
			v.[sflHC_DaysAfterNotification], 
			v.[sflHC_Diagnosis_ID], 
			[ref_sflHC_Diagnosis].[name] as [sflHC_Diagnosis], 
			v.[sflHC_DiagnosisDate], 
			v.[sflHC_DiagnosisCode], 
			v.[sflHC_PatientEmployerPhone], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_Hospitalization_ID], 
			[ref_sflHC_Hospitalization].[name] as [sflHC_Hospitalization], 
			v.[sflHC_CurrentLocation_ID], 
			[ref_sflHC_CurrentLocation].[name] as [sflHC_CurrentLocation], 
			v.[sflHC_LocalID], 
			v.[sflHC_LocationRayon_ID], 
			[ref_GIS_sflHC_LocationRayon].[ExtendedName] as [sflHC_LocationRayon], 
			[ref_GIS_sflHC_LocationRayon].[name] as [sflHC_LocationRayon_ShortGISName], 
			v.[sflHC_LocationRegion_ID], 
			[ref_GIS_sflHC_LocationRegion].[ExtendedName] as [sflHC_LocationRegion], 
			[ref_GIS_sflHC_LocationRegion].[name] as [sflHC_LocationRegion_ShortGISName], 
			v.[sflHC_PatientName], 
			v.[sflHC_PatientEmployer], 
			v.[sflHC_PatientNationality_ID], 
			[ref_sflHC_PatientNationality].[name] as [sflHC_PatientNationality], 
			v.[sflHC_NotificationDate], 
			v.[sflHC_ReceivedByPerson], 
			v.[sflHC_SentByPerson], 
			v.[sflHC_InvestigatedByOffice_ID], 
			[ref_sflHC_InvestigatedByOffice].[name] as [sflHC_InvestigatedByOffice], 
			v.[sflHC_Outcome_ID], 
			[ref_sflHC_Outcome].[name] as [sflHC_Outcome], 
			v.[sflHC_PatientPhone], 
			v.[sflHC_PatientCRRayon_ID], 
			[ref_GIS_sflHC_PatientCRRayon].[ExtendedName] as [sflHC_PatientCRRayon], 
			[ref_GIS_sflHC_PatientCRRayon].[name] as [sflHC_PatientCRRayon_ShortGISName], 
			v.[sflHC_PatientCRRegion_ID], 
			[ref_GIS_sflHC_PatientCRRegion].[ExtendedName] as [sflHC_PatientCRRegion], 
			[ref_GIS_sflHC_PatientCRRegion].[name] as [sflHC_PatientCRRegion_ShortGISName], 
			v.[sflHC_PatientCRSettlement_ID], 
			[ref_GIS_sflHC_PatientCRSettlement].[ExtendedName] as [sflHC_PatientCRSettlement], 
			[ref_GIS_sflHC_PatientCRSettlement].[name] as [sflHC_PatientCRSettlement_ShortGISName], 
			v.[sflHC_PatientSex_ID], 
			[ref_sflHC_PatientSex].[name] as [sflHC_PatientSex], 
			v.[sflHC_SamplesCollected_ID], 
			[ref_sflHC_SamplesCollected].[name] as [sflHC_SamplesCollected], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflHC_PatientNotificationStatus_ID], 
			[ref_sflHC_PatientNotificationStatus].[name] as [sflHC_PatientNotificationStatus], 
			v.[sflHC_CaseProgressStatus_ID], 
			[ref_sflHC_CaseProgressStatus].[name] as [sflHC_CaseProgressStatus], 
			v.[sflHC_InitialCaseClassification_ID], 
			[ref_sflHC_InitialCaseClassification].[name] as [sflHC_InitialCaseClassification], 
			v.[sflHC_FinalCaseClassification_ID], 
			[ref_sflHC_FinalCaseClassification].[name] as [sflHC_FinalCaseClassification], 
			v.[sflHC_FinalDiagnosisDate], 
			v.[sflHC_PatientAgeType_ID], 
			[ref_sflHC_PatientAgeType].[name] as [sflHC_PatientAgeType], 
			v.[sflHC_PatientOccupation_ID], 
			[ref_sflHC_PatientOccupation].[name] as [sflHC_PatientOccupation], 
			v.[sflHC_PatientHospitalizationDate], 
			v.[sflHC_PatientFirstSoughtCareDate], 
			v.[sflHC_LocationSettlement_ID], 
			[ref_GIS_sflHC_LocationSettlement].[ExtendedName] as [sflHC_LocationSettlement], 
			[ref_GIS_sflHC_LocationSettlement].[name] as [sflHC_LocationSettlement_ShortGISName], 
			v.[sflHC_LocationCoordinates], 
			v.[sflHC_HospitalizationPlace], 
			v.[sflHC_ClinicalDiagBasis_ID], 
			[ref_sflHC_ClinicalDiagBasis].[name] as [sflHC_ClinicalDiagBasis], 
			v.[sflHC_EpiDiagBasis_ID], 
			[ref_sflHC_EpiDiagBasis].[name] as [sflHC_EpiDiagBasis], 
			v.[sflHC_LabDiagBasis_ID], 
			[ref_sflHC_LabDiagBasis].[name] as [sflHC_LabDiagBasis], 
			v.[sflHC_ReasonForNotCollectingSample_ID], 
			[ref_sflHC_ReasonForNotCollectingSample].[name] as [sflHC_ReasonForNotCollectingSample], 
			v.[sflHC_FacilityWherePatientFSC_ID], 
			[ref_sflHC_FacilityWherePatientFSC].[name] as [sflHC_FacilityWherePatientFSC], 
			v.[sflHC_NonNotifiableDiagnosis_ID], 
			[ref_sflHC_NonNotifiableDiagnosis].[name] as [sflHC_NonNotifiableDiagnosis], 
			v.[sflHC_OtherLocation], 
			v.[sflHC_DaysAfterInitDiagUntilNotif], 
			v.[sflHC_DaysAfterOnsetSymptUntilNotif], 
			v.[sflHC_DaysAfterSymptOnsetUntilFSC], 
			v.[sflHC_DaysAfterFSCUntilNotif], 
			v.[sflHC_DaysAfterFSCUntilEntered], 
			v.[sflHC_DaysAfterNotifUntilCaseInvest], 
			v.[sflHC_DaysAfterFSCUntilFinalDiag], 
			v.[sflHC_PatientCRCoordinates], 
			v.[sflHC_TestConducted_ID], 
			[ref_sflHC_TestConducted].[name] as [sflHC_TestConducted], 
			v.[sflHC_EpidemiologistName], 
			v.[sflHC_EnteredBySite_ID], 
			[ref_sflHC_EnteredBySite].[name] as [sflHC_EnteredBySite], 
			v.[sflHC_PatientCRLongitude], 
			v.[sflHC_PatientCRLatitudee], 
			v.[sflHC_LocationLongitude], 
			v.[sflHC_LocationLatitude], 
			v.[sflHC_DateFinalCaseClassification], 
			v.[sflHC_EnteredByEmployer], 
			v.[sflHC_HospitalNameID], 
			v.[sflHC_DiagnosisIsZoonotic_ID], 
			[ref_sflHC_DiagnosisIsZoonotic].[name] as [sflHC_DiagnosisIsZoonotic], 
			v.[sflHC_DiagnosesAndGroups_ID], 
			[ref_sflHC_DiagnosesAndGroups].[name] as [sflHC_DiagnosesAndGroups], 
			v.[sflHC_PatientPersonalIDType_ID], 
			[ref_sflHC_PatientPersonalIDType].[name] as [sflHC_PatientPersonalIDType], 
			v.[sflHC_PatientPersonalID], 
			v.[sflHC_EnteredByOrganizationID], 
			v.[sflHC_FacilityWherePatientFSCCode], 
			v.[sflHC_ReceivedByOfficeID], 
			v.[sflHC_SentByOfficeID], 
			v.[sflHC_InvestigatedByOfficeID], 
			v.[sflHC_PCRElevationm], 
			v.[sflHC_LocationCountry_ID], 
			[ref_GIS_sflHC_LocationCountry].[ExtendedName] as [sflHC_LocationCountry], 
			[ref_GIS_sflHC_LocationCountry].[name] as [sflHC_LocationCountry_ShortGISName], 
			v.[sflHC_LocationIsForeignAddress_ID], 
			[ref_sflHC_LocationIsForeignAddress].[name] as [sflHC_LocationIsForeignAddress], 
			v.[sflHC_LocationForeignAddress], 
			v.[sflHC_EpiPersonalID], 
			v.[sflHC_EpiPersonalIDType_ID], 
			[ref_sflHC_EpiPersonalIDType].[name] as [sflHC_EpiPersonalIDType], 
			v.[sflHC_ReceivedByOfficerID], 
			v.[sflHC_ReceivedByOfficerIDType_ID], 
			[ref_sflHC_ReceivedByOfficerIDType].[name] as [sflHC_ReceivedByOfficerIDType], 
			v.[sflHC_SentByOfficerID], 
			v.[sflHC_SentByOfficerIDType_ID], 
			[ref_sflHC_SentByOfficerIDType].[name] as [sflHC_SentByOfficerIDType] 
from		vw1100SearchQuery__52593860000000 v

left join	fnGeoLocationTranslation(@LangID) [ref_GL_sflHC_PatientCRAddress]  
on			[ref_GL_sflHC_PatientCRAddress].idfGeoLocation = v.[sflHC_PatientCRAddress_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_AntimicrobialTherapy] 
on			[ref_sflHC_AntimicrobialTherapy].idfsReference = v.[sflHC_AntimicrobialTherapy_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_CaseClassification] 
on			[ref_sflHC_CaseClassification].idfsReference = v.[sflHC_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000041) [ref_sflHC_HospitalizationStatus] 
on			[ref_sflHC_HospitalizationStatus].idfsReference = v.[sflHC_HospitalizationStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHC_Diagnosis] 
on			[ref_sflHC_Diagnosis].idfsReference = v.[sflHC_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_Hospitalization] 
on			[ref_sflHC_Hospitalization].idfsReference = v.[sflHC_Hospitalization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflHC_CurrentLocation] 
on			[ref_sflHC_CurrentLocation].idfsReference = v.[sflHC_CurrentLocation_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHC_LocationRayon]  
on			[ref_GIS_sflHC_LocationRayon].idfsReference = v.[sflHC_LocationRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_LocationRegion]  
on			[ref_GIS_sflHC_LocationRegion].idfsReference = v.[sflHC_LocationRegion_ID] 
left join	fnReferenceRepair(@LangID, 19000054) [ref_sflHC_PatientNationality] 
on			[ref_sflHC_PatientNationality].idfsReference = v.[sflHC_PatientNationality_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_InvestigatedByOffice] 
on			[ref_sflHC_InvestigatedByOffice].idfsReference = v.[sflHC_InvestigatedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000064) [ref_sflHC_Outcome] 
on			[ref_sflHC_Outcome].idfsReference = v.[sflHC_Outcome_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHC_PatientCRRayon]  
on			[ref_GIS_sflHC_PatientCRRayon].idfsReference = v.[sflHC_PatientCRRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_PatientCRRegion]  
on			[ref_GIS_sflHC_PatientCRRegion].idfsReference = v.[sflHC_PatientCRRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHC_PatientCRSettlement]  
on			[ref_GIS_sflHC_PatientCRSettlement].idfsReference = v.[sflHC_PatientCRSettlement_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflHC_PatientSex] 
on			[ref_sflHC_PatientSex].idfsReference = v.[sflHC_PatientSex_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_SamplesCollected] 
on			[ref_sflHC_SamplesCollected].idfsReference = v.[sflHC_SamplesCollected_ID] 
left join	fnReferenceRepair(@LangID, 19000035) [ref_sflHC_PatientNotificationStatus] 
on			[ref_sflHC_PatientNotificationStatus].idfsReference = v.[sflHC_PatientNotificationStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000111) [ref_sflHC_CaseProgressStatus] 
on			[ref_sflHC_CaseProgressStatus].idfsReference = v.[sflHC_CaseProgressStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_InitialCaseClassification] 
on			[ref_sflHC_InitialCaseClassification].idfsReference = v.[sflHC_InitialCaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_FinalCaseClassification] 
on			[ref_sflHC_FinalCaseClassification].idfsReference = v.[sflHC_FinalCaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000042) [ref_sflHC_PatientAgeType] 
on			[ref_sflHC_PatientAgeType].idfsReference = v.[sflHC_PatientAgeType_ID] 
left join	fnReferenceRepair(@LangID, 19000061) [ref_sflHC_PatientOccupation] 
on			[ref_sflHC_PatientOccupation].idfsReference = v.[sflHC_PatientOccupation_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHC_LocationSettlement]  
on			[ref_GIS_sflHC_LocationSettlement].idfsReference = v.[sflHC_LocationSettlement_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_ClinicalDiagBasis] 
on			[ref_sflHC_ClinicalDiagBasis].idfsReference = v.[sflHC_ClinicalDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_EpiDiagBasis] 
on			[ref_sflHC_EpiDiagBasis].idfsReference = v.[sflHC_EpiDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_LabDiagBasis] 
on			[ref_sflHC_LabDiagBasis].idfsReference = v.[sflHC_LabDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000150) [ref_sflHC_ReasonForNotCollectingSample] 
on			[ref_sflHC_ReasonForNotCollectingSample].idfsReference = v.[sflHC_ReasonForNotCollectingSample_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_FacilityWherePatientFSC] 
on			[ref_sflHC_FacilityWherePatientFSC].idfsReference = v.[sflHC_FacilityWherePatientFSC_ID] 
left join	fnReferenceRepair(@LangID, 19000149) [ref_sflHC_NonNotifiableDiagnosis] 
on			[ref_sflHC_NonNotifiableDiagnosis].idfsReference = v.[sflHC_NonNotifiableDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_TestConducted] 
on			[ref_sflHC_TestConducted].idfsReference = v.[sflHC_TestConducted_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_EnteredBySite] 
on			[ref_sflHC_EnteredBySite].idfsReference = v.[sflHC_EnteredBySite_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_DiagnosisIsZoonotic] 
on			[ref_sflHC_DiagnosisIsZoonotic].idfsReference = v.[sflHC_DiagnosisIsZoonotic_ID] 
left join	fnDiagnosesAndGroups(@LangID) [ref_sflHC_DiagnosesAndGroups] 
on			[ref_sflHC_DiagnosesAndGroups].idfsDiagnosisOrDiagnosisGroup = v.[sflHC_DiagnosesAndGroups_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_PatientPersonalIDType] 
on			[ref_sflHC_PatientPersonalIDType].idfsReference = v.[sflHC_PatientPersonalIDType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflHC_LocationCountry]  
on			[ref_GIS_sflHC_LocationCountry].idfsReference = v.[sflHC_LocationCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_LocationIsForeignAddress] 
on			[ref_sflHC_LocationIsForeignAddress].idfsReference = v.[sflHC_LocationIsForeignAddress_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_EpiPersonalIDType] 
on			[ref_sflHC_EpiPersonalIDType].idfsReference = v.[sflHC_EpiPersonalIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_ReceivedByOfficerIDType] 
on			[ref_sflHC_ReceivedByOfficerIDType].idfsReference = v.[sflHC_ReceivedByOfficerIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_SentByOfficerIDType] 
on			[ref_sflHC_SentByOfficerIDType].idfsReference = v.[sflHC_SentByOfficerIDType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHC_EnteredDate] >=  N'20220101'))
			)
GO
PRINT N'Altering Function [dbo].[fn1100SearchQuery__53934660000000]...';


GO


ALTER FUNCTION [dbo].[fn1100SearchQuery__53934660000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_EnteredDate], 
			v.[sflHC_CaseID], 
			v.[sflHC_PatientCRRegion_ID], 
			[ref_GIS_sflHC_PatientCRRegion].[ExtendedName] as [sflHC_PatientCRRegion], 
			[ref_GIS_sflHC_PatientCRRegion].[name] as [sflHC_PatientCRRegion_ShortGISName], 
			v.[sflHC_Diagnosis_ID], 
			[ref_sflHC_Diagnosis].[name] as [sflHC_Diagnosis], 
			v.[sflHC_LocationRegion_ID], 
			[ref_GIS_sflHC_LocationRegion].[ExtendedName] as [sflHC_LocationRegion], 
			[ref_GIS_sflHC_LocationRegion].[name] as [sflHC_LocationRegion_ShortGISName], 
			v.[sflHC_PatientEmpRegion_ID], 
			[ref_GIS_sflHC_PatientEmpRegion].[ExtendedName] as [sflHC_PatientEmpRegion], 
			[ref_GIS_sflHC_PatientEmpRegion].[name] as [sflHC_PatientEmpRegion_ShortGISName] 
from		vw1100SearchQuery__53934660000000 v

left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_PatientCRRegion]  
on			[ref_GIS_sflHC_PatientCRRegion].idfsReference = v.[sflHC_PatientCRRegion_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHC_Diagnosis] 
on			[ref_sflHC_Diagnosis].idfsReference = v.[sflHC_Diagnosis_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_LocationRegion]  
on			[ref_GIS_sflHC_LocationRegion].idfsReference = v.[sflHC_LocationRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_PatientEmpRegion]  
on			[ref_GIS_sflHC_PatientEmpRegion].idfsReference = v.[sflHC_PatientEmpRegion_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHC_CaseID] =  N'HUMTBTBZ22GLDY'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__54477830000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__54477830000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHASC_SampleType_ID], 
			[ref_sflHASC_SampleType].[name] as [sflHASC_SampleType], 
			v.[sflHASC_CampaignType_ID], 
			[ref_sflHASC_CampaignType].[name] as [sflHASC_CampaignType], 
			v.[sflHASC_CampaignStatus_ID], 
			[ref_sflHASC_CampaignStatus].[name] as [sflHASC_CampaignStatus], 
			v.[sflHASC_CampaignStartDate], 
			v.[sflHASC_CampaignName], 
			v.[sflHASC_CampaignID], 
			v.[sflHASC_CampaignEndDate], 
			v.[sflHASC_CampaignAdministrator] 
from		vw1100SearchQuery__54477830000000 v

left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHASC_SampleType] 
on			[ref_sflHASC_SampleType].idfsReference = v.[sflHASC_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASC_CampaignType] 
on			[ref_sflHASC_CampaignType].idfsReference = v.[sflHASC_CampaignType_ID] 
left join	fnReferenceRepair(@LangID, 19000115) [ref_sflHASC_CampaignStatus] 
on			[ref_sflHASC_CampaignStatus].idfsReference = v.[sflHASC_CampaignStatus_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__54699090000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__54699090000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHASC_SampleType_ID], 
			[ref_sflHASC_SampleType].[name] as [sflHASC_SampleType], 
			v.[sflHASC_CampaignType_ID], 
			[ref_sflHASC_CampaignType].[name] as [sflHASC_CampaignType], 
			v.[sflHASC_CampaignStatus_ID], 
			[ref_sflHASC_CampaignStatus].[name] as [sflHASC_CampaignStatus], 
			v.[sflHASC_CampaignStartDate], 
			v.[sflHASC_CampaignName], 
			v.[sflHASC_CampaignID], 
			v.[sflHASC_CampaignEndDate], 
			v.[sflHASC_CampaignAdministrator] 
from		vw1100SearchQuery__54699090000000 v

left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHASC_SampleType] 
on			[ref_sflHASC_SampleType].idfsReference = v.[sflHASC_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASC_CampaignType] 
on			[ref_sflHASC_CampaignType].idfsReference = v.[sflHASC_CampaignType_ID] 
left join	fnReferenceRepair(@LangID, 19000115) [ref_sflHASC_CampaignStatus] 
on			[ref_sflHASC_CampaignStatus].idfsReference = v.[sflHASC_CampaignStatus_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[FN_GBL_AVR_LocationHierarchy_Flattened]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 12/1/2021
-- Description:	Returns the complete location hierarchy for the given location on a single row.
-- =============================================
CREATE FUNCTION [dbo].[FN_GBL_AVR_LocationHierarchy_Flattened] 
(
	--@languageId nvarchar(20)
)
RETURNS @ResultsTable TABLE 
(
	 idfsLocation BIGINT
	,AdminLevel1ID BIGINT
	,AdminLevel2ID BIGINT
	,AdminLevel3ID BIGINT
	,AdminLevel4ID BIGINT
	,AdminLevel5ID BIGINT
	,AdminLevel6ID BIGINT
	,AdminLevel7ID BIGINT
	,AdminLevel1Name NVARCHAR(200)
	,AdminLevel2Name NVARCHAR(200)
	,AdminLevel3Name NVARCHAR(200)
	,AdminLevel4Name NVARCHAR(200)
	,AdminLevel5Name NVARCHAR(200)
	,AdminLevel6Name NVARCHAR(200)
	,AdminLevel7Name NVARCHAR(200)
	,Node HIERARCHYID
	,Level INT
	,LevelType NVARCHAR(100)
	,idfsLanguage BIGINT

)
AS
BEGIN
	--DECLARE @lid BIGINT 

	--SELECT @lid = dbo.FN_GBL_LanguageCode_GET(@languageId)

	INSERT INTO @ResultsTable
	SELECT 
		 ld.idfsLocation
		,ld.Level1ID
		,ld.Level2ID
		,ld.Level3ID
		,ld.Level4ID
		,ld.Level5ID
		,ld.Level6ID
		,ld.Level7ID
		,ld.Level1Name
		,ld.Level2Name
		,ld.Level3Name
		,ld.Level4Name
		,ld.Level5Name
		,ld.Level6Name
		,ld.Level7Name
		,ld.Node
		,ld.Level
		,ld.LevelType
		,ld.idfsLanguage
	FROM gisLocationDenormalized ld
	--WHERE ld.idfsLanguage =@lid
	
	RETURN 
END;
GO
PRINT N'Altering Procedure [dbo].[spAsQuery_Post]...';


GO


--##SUMMARY This procedure saves changes of specified query
--##SUMMARY (including creation and deletion (in case of incorrect parameters) of the query).

--##REMARKS Author: Mirnaya O.
--##REMARKS Create date: 21.04.2010

--##REMARKS UPDATED BY: Vorobiev E.
--##REMARKS Date: 11.11.2011

--##RETURNS Don't use

/*
--Example of a call of procedure:

declare	@idflQuery					bigint
declare	@strFunctionName			nvarchar(200)
declare	@idflDescription			bigint
declare	@DefQueryName				nvarchar(2000)
declare	@QueryName					nvarchar(2000)
declare	@DefQueryDescription		nvarchar(2000)
declare	@QueryDescription			nvarchar(2000)
declare	@blnAddAllKeyFieldValues	bit
declare	@LangID						nvarchar(50)

execute	spAsQuery_Post
		 @idflQuery output
		,@strFunctionName output
		,@idflDescription output
		,@DefQueryName,
		,@QueryName
		,@DefQueryDescription,
		,@QueryDescription
		,@blnAddAllKeyFieldValues
		,@LangID

*/ 


ALTER procedure	[dbo].[spAsQuery_Post]
(
	@idflQuery					bigint output,
	@strFunctionName			nvarchar(200) = null output,
	@idflDescription			bigint output,
	@DefQueryName				nvarchar(2000),
	@QueryName					nvarchar(2000),
	@DefQueryDescription		nvarchar(2000),
	@QueryDescription			nvarchar(2000),
	@blnAddAllKeyFieldValues	bit = 0,
	@LangID						nvarchar(50)
)
as

declare	@DefFunctionNamePrefix varchar(50)
declare	@FunctionNameIndex int
declare @NewFunctionName varchar(200)

if	@DefQueryName is null
begin
	-- Delete query
	execute spAsQuery_Delete	@idflQuery
	set	@idflQuery = -1
	set	@idflDescription = -1
	set	@strFunctionName = null
end
else begin
	if	not exists	(
				select	*
				from	tasQuery q
				where	q.idflQuery = @idflQuery
					)
	begin
		-- Generate new IDs for query and its description
		execute	spsysGetNewID	@idflQuery output
		execute	spsysGetNewID	@idflDescription output

		-- Save local BR related to description
		insert into	locBaseReference
		(	idflBaseReference
		)
		values
		(	@idflDescription
		)

		-- Add translation for description
		if @QueryDescription is not null and len(rtrim(ltrim(@QueryDescription))) > 0
		begin
			execute spAsReferencePost @LangID, @idflDescription, @QueryDescription
		end

		-- Save local BR related to query and its English translation
		insert into	locBaseReference
		(	idflBaseReference
		)
		values
		(	@idflQuery
		)

		if @DefQueryName is not null and len(rtrim(ltrim(@DefQueryName))) > 0
		begin
			execute spAsReferencePost 'en', @idflQuery, @DefQueryName
		end

		-- Add translation for query
		if @QueryName is not null and (len(rtrim(ltrim(@QueryName))) > 0) and (@LangID <> N'en')
		begin
			execute spAsReferencePost @LangID, @idflQuery, @QueryName
		end

		-- Generate unique name of the query function
		select top 1	@DefFunctionNamePrefix = 'fn' + s.strSiteID + 'SearchQuery__' + cast(@idflQuery as varchar(30))
		from			tstSite s
		inner join		tstLocalSiteOptions lso
		on				lso.strName = N'SiteID'
						and lso.strValue = cast(s.idfsSite as nvarchar(200))
		where			s.intRowStatus = 0

		set @FunctionNameIndex = 0
		set @NewFunctionName = @DefFunctionNamePrefix

		while	exists
				(	select	*
					from	dbo.sysobjects
					where	xtype in ('IF','FN','TF')
							and category = 0
							and [name] = @NewFunctionName
				)
				or exists
					(	select	*
						from	tasQuery
						where	strFunctionName = @NewFunctionName
					)
		begin
			set @FunctionNameIndex = @FunctionNameIndex + 1
			set @NewFunctionName = @DefFunctionNamePrefix + '__' + cast(@FunctionNameIndex as varchar(100))
		end

		set	@strFunctionName = @NewFunctionName

		-- Create query
		insert into	tasQuery
		(	idflQuery,
			strFunctionName,
			idflDescription,
			blnReadOnly,
			blnAddAllKeyFieldValues
		)
		values
		(	@idflQuery,
			@strFunctionName,
			@idflDescription,
			0,
			IsNull(@blnAddAllKeyFieldValues, 0)
		)
		
	end
	else begin
		if	not exists	(
					select	*
					from	locBaseReference lbr
					where	lbr.idflBaseReference = @idflDescription
						)
		begin
			-- Generate new ID for query description
			execute	spsysGetNewID	@idflDescription output

			-- Save local BR related to description
			insert into	locBaseReference
			(	idflBaseReference
			)
			values
			(	@idflDescription
			)
		end

		-- Add or delete translation for query description
		if @QueryDescription is not null and len(rtrim(ltrim(@QueryDescription))) > 0
		begin
			execute spAsReferencePost @LangID, @idflDescription, @QueryDescription
		end
		else begin
			delete	lsnt
			from	locStringNameTranslation lsnt
			where	lsnt.idflBaseReference = @idflDescription
					and lsnt.idfsLanguage = dbo.fnGetLanguageCode(@LangID)
		end

		-- Save English translation for query
		execute spAsReferencePost 'en', @idflQuery, @DefQueryName

		-- Add or delete translation for query
		if @LangID<>'en' 
		begin
			if @QueryName is not null and len(rtrim(ltrim(@QueryName))) > 0
			begin
				execute spAsReferencePost @LangID, @idflQuery, @QueryName
			end
			else begin
				delete	lsnt
				from	locStringNameTranslation lsnt
				where	lsnt.idflBaseReference = @idflQuery
						and lsnt.idfsLanguage = dbo.fnGetLanguageCode(@LangID)
			end
		end
		-- Update query
		update	q
		set		q.idflDescription			= @idflDescription,
				q.blnAddAllKeyFieldValues	= IsNull(@blnAddAllKeyFieldValues, 0)
		from	tasQuery q
		where	q.idflQuery = @idflQuery

		-- Select query function name
		select	@strFunctionName = q.strFunctionName
		from	tasQuery q
		where	q.idflQuery = @idflQuery

	end
end


return 0
GO
PRINT N'Altering Procedure [dbo].[spAsQuery_SelectDetail]...';


GO


--##SUMMARY This procedure selects details of specified query 
--##SUMMARY and the tree of related query search objects.

--##REMARKS Author: Mirnaya O.
--##REMARKS Create date: 21.04.2010

--##REMARKS UPDATED BY: Vorobiev E.
--##REMARKS Date: 11.11.2011

--##RETURNS Don't use

/*
--Example of a call of procedure:

declare	@ID	bigint
exec spAsQuery_SelectDetail 49540070000000, 'en'
*/ 
 

ALTER procedure	[dbo].[spAsQuery_SelectDetail]
	@ID		bigint,
	@LangID	nvarchar(50)
as

-- tasQuery
select		q.idflQuery,
			q.strFunctionName,
			q.idflDescription,
			q.blnReadOnly,
			q.blnAddAllKeyFieldValues,
			q_snt_en.strTextString as DefQueryName,
			IsNull(q_snt_lng.strTextString, q_snt_en.strTextString) as QueryName,
			d_snt_en.strTextString as DefQueryDescription,
			IsNull(d_snt_lng.strTextString, d_snt_en.strTextString) as QueryDescription			
from		tasQuery q
left join	locStringNameTranslation q_snt_en
on			q_snt_en.idflBaseReference = q.idflQuery
			and q_snt_en.idfsLanguage = dbo.fnGetLanguageCode('en')
left join	locStringNameTranslation q_snt_lng
on			q_snt_lng.idflBaseReference = q.idflQuery
			and q_snt_lng.idfsLanguage = dbo.fnGetLanguageCode(@LangID)
left join	locStringNameTranslation d_snt_en
on			d_snt_en.idflBaseReference = q.idflDescription
			and d_snt_en.idfsLanguage = dbo.fnGetLanguageCode('en')
left join	locStringNameTranslation d_snt_lng
on			d_snt_lng.idflBaseReference = q.idflDescription
			and d_snt_lng.idfsLanguage = dbo.fnGetLanguageCode(@LangID)
where		q.idflQuery = @ID

-- tasQuerySearchObject
exec	spAsQuery_SelectObjectTree @ID, @LangID
GO
PRINT N'Altering Procedure [dbo].[spAsQueryFunction_Post]...';


GO

--##SUMMARY Creates a new function and national views for specified query.
--##SUMMARY  If function and/or national viewa with the same namea already exist, they will be dropped and re-created.


--##REMARKS Update by: Mandar P Kulkarni
--##REMARKS Date: 01:21:2022

--##REMARKS Author: Mirnaya O.
--##REMARKS Create date: 25.04.2010

--##REMARKS Updated by: Mirnaya O.
--##REMARKS Date: 05.12.2011

--##REMARKS Updated by: Mirnaya O.
--##REMARKS Date: 13.04.2018

--##RETURNS Don't use

/*
--Example of a call of procedure:
declare	@QueryID	bigint

execute	spAsQueryFunction_Post	@QueryID

*/


ALTER procedure	[dbo].[spAsQueryFunction_Post]
	 @QueryID	bigint	--##PARAM @QueryID Id of the query that corresponds result function
as
begin

exec dbo.spSetFirstDay
 
-- Define the name of the function associated with the query
declare	@functionName	nvarchar(200)
-- Define the name of the view associated with the query
declare	@viewName		nvarchar(200)

-- Select function name for the query
select	@functionName = q.strFunctionName
from	tasQuery q
where	q.idflQuery = @QueryID

if	@functionName is not null
begin

-- Generate view name
set	@viewName = @functionName
if @viewName like 'fn%'
	set	@viewName = 'vw' + right(@viewName, len(@viewName) - 2)

-- Generate SQL query for creating the function
declare @query	nvarchar(MAX)

-- Define separator
declare @s varchar(20)


-- Define @KeyFields table
declare	@KeyFields	table
(	strSearchFieldAlias	varchar(50) collate database_default not null primary key,
	intBinKey			int not null,
	blnExists			bit not null
)

insert into	@KeyFields	(strSearchFieldAlias, intBinKey, blnExists)
values	('sflHC_PatientCRRayon', 1, 0)

insert into	@KeyFields	(strSearchFieldAlias, intBinKey, blnExists)
values	('sflHC_PatientCRRegion', 2, 0)

insert into	@KeyFields	(strSearchFieldAlias, intBinKey, blnExists)
values	('sflHC_FinalDiagnosis', 4, 0)

--insert into	@KeyFields	(strSearchFieldAlias, intBinKey, blnExists)
--values	('sflHC_FinalDiagnosisCode', 8, 0)

insert into	@KeyFields	(strSearchFieldAlias, intBinKey, blnExists)
values	('sflVC_FarmAddressRayon', 16, 0)

insert into	@KeyFields	(strSearchFieldAlias, intBinKey, blnExists)
values	('sflVC_FarmAddressRegion', 32, 0)

insert into	@KeyFields	(strSearchFieldAlias, intBinKey, blnExists)
values	('sflVC_Diagnosis', 64, 0)

insert into	@KeyFields	(strSearchFieldAlias, intBinKey, blnExists)
values	('sflZD_Region', 128, 0)

insert into	@KeyFields	(strSearchFieldAlias, intBinKey, blnExists)
values	('sflZD_Rayon', 256, 0)

insert into	@KeyFields	(strSearchFieldAlias, intBinKey, blnExists)
values	('sflZD_Diagnosis', 512, 0)


update		kf
set			kf.blnExists = 1
from		@KeyFields kf
inner join	tasSearchField sf
on			sf.strSearchFieldAlias = kf.strSearchFieldAlias COLLATE DATABASE_DEFAULT
			and sf.idfsSearchFieldType <> 10081003			-- FF Field
inner join	(
	tasQuerySearchField qsf
	inner join	tasQuerySearchObject qso
	on			qso.idfQuerySearchObject = qsf.idfQuerySearchObject
	inner join	tasQuery q
	on			q.idflQuery = qso.idflQuery
			)
on			qsf.idfsSearchField = sf.idfsSearchField
where		qso.idflQuery = @QueryID
			and q.blnAddAllKeyFieldValues = 1

-- Define binary key of key reference field included in the query
declare	@BinKey	int
set	@BinKey = 0
select	@BinKey = sum(intBinKey * cast(blnExists as int))
from	@KeyFields

-- Exclude key reference fields if there are items of two groups simultaneously:
--	1) Group 1:
--		- Human Case Final Diagnosis
--		- Human Case Final Diagnosis Code
--		- Patient Current Residence Region
--		- Patient Current Residence Rayon 
--	2) Group 2:
--		- Vet Case Diagnosis
--		- Farm Address - Region
--		- Farm Address - Rayon

if	((@BinKey & 1 = 1) or (@BinKey & 2 = 2) or (@BinKey & 4 = 4)) -- Group 1
	and	((@BinKey & 16 = 16) or (@BinKey & 32 = 32) or (@BinKey & 64 = 64))	-- Group 2
begin
	set	@BinKey = 0
end


-- Generate "Select" and "From" parts (for "union") of the query
-- In case of "exist" sub-query, take union parts of objects of parent query 
declare	@QueryParts	table
(	idfUnionSearchTable	bigint not null primary key,
	strSelect			nvarchar(MAX) collate database_default null,
	strFrom				nvarchar(MAX) collate database_default null,
	strRowStatusWhere	nvarchar(200) collate database_default null
)

if not exists
	(		select	1
			from	tasQuery q
			join	tasQuerySearchObject o
			on		o.idflQuery = q.idflQuery
			join	tasQueryConditionGroup g
			on		g.idfQuerySearchObject = o.idfQuerySearchObject
			join	tasQuerySearchObject o_main_subquery
			on		o_main_subquery.idfQuerySearchObject = g.idfSubQuerySearchObject
			join	tasQuery subquery
			on		subquery.idflQuery = o_main_subquery.idflQuery
			where	subquery.idflQuery = @QueryID
					and subquery.blnSubQuery = 1
	)
begin
	-- Add "union" tables
	insert into	@QueryParts	(idfUnionSearchTable)
	select distinct
				mto.idfMainSearchTable
	from		tasQuerySearchObject qso
	inner join	tasSearchObject sob
	on			sob.idfsSearchObject = qso.idfsSearchObject
				and sob.intRowStatus = 0
	inner join	tasMainTableForObject mto
	on			mto.idfsSearchObject = sob.idfsSearchObject
	inner join	tasSearchTable st_main
	on			st_main.idfSearchTable = mto.idfMainSearchTable
	where		qso.idflQuery = @QueryID
				and	exists	(
						select		*
						from		tasMainTableForObject mto_union
						where		mto_union.idfsSearchObject = sob.idfsSearchObject
									and mto_union.idfMainSearchTable <> mto.idfMainSearchTable
							)

	-- Add main table of the root object if "union" tables don't exist
	if	not exists	(
			select	*
			from	@QueryParts
				)
	begin

		insert into	@QueryParts	(idfUnionSearchTable)
		select		mto.idfMainSearchTable
		from		tasQuerySearchObject qso_root
		inner join	tasSearchObject sob
		on			sob.idfsSearchObject = qso_root.idfsSearchObject
					and sob.intRowStatus = 0
		inner join	tasMainTableForObject mto
		on			mto.idfsSearchObject = sob.idfsSearchObject
		inner join	tasSearchTable st_main
		on			st_main.idfSearchTable = mto.idfMainSearchTable
		where		qso_root.idflQuery = @QueryID
					and qso_root.idfParentQuerySearchObject is null

	end
end
else begin
	-- Add "union" tables
	insert into	@QueryParts	(idfUnionSearchTable)
	select distinct
				mto.idfMainSearchTable
	from		tasQuerySearchObject qso
	inner join	tasSearchObject sob
	on			sob.idfsSearchObject = qso.idfsSearchObject
				and sob.intRowStatus = 0
	inner join	tasMainTableForObject mto
	on			mto.idfsSearchObject = sob.idfsSearchObject
	inner join	tasSearchTable st_main
	on			st_main.idfSearchTable = mto.idfMainSearchTable
	cross apply	(
		select	top 1 q.idflQuery
		from	tasQuery q
		join	tasQuerySearchObject o
		on		o.idflQuery = q.idflQuery
		join	tasQueryConditionGroup g
		on		g.idfQuerySearchObject = o.idfQuerySearchObject
		join	tasQuerySearchObject o_main_subquery
		on		o_main_subquery.idfQuerySearchObject = g.idfSubQuerySearchObject
		join	tasQuery subquery
		on		subquery.idflQuery = o_main_subquery.idflQuery
		where	subquery.idflQuery = @QueryID
				and subquery.blnSubQuery = 1
				and q.idflQuery = qso.idflQuery
				) existsSubQuery
	where		exists	(
					select		*
					from		tasMainTableForObject mto_union
					where		mto_union.idfsSearchObject = sob.idfsSearchObject
								and mto_union.idfMainSearchTable <> mto.idfMainSearchTable
						)

	-- Add main table of the root object if "union" tables don't exist
	if	not exists	(
			select	*
			from	@QueryParts
				)
	begin

		insert into	@QueryParts	(idfUnionSearchTable)
		select		mto.idfMainSearchTable
		from		tasQuerySearchObject qso_root
		inner join	tasSearchObject sob
		on			sob.idfsSearchObject = qso_root.idfsSearchObject
					and sob.intRowStatus = 0
		inner join	tasMainTableForObject mto
		on			mto.idfsSearchObject = sob.idfsSearchObject
		inner join	tasSearchTable st_main
		on			st_main.idfSearchTable = mto.idfMainSearchTable
		cross apply	(
			select	top 1 q.idflQuery
			from	tasQuery q
			join	tasQuerySearchObject o
			on		o.idflQuery = q.idflQuery
			join	tasQueryConditionGroup g
			on		g.idfQuerySearchObject = o.idfQuerySearchObject
			join	tasQuerySearchObject o_main_subquery
			on		o_main_subquery.idfQuerySearchObject = g.idfSubQuerySearchObject
			join	tasQuery subquery
			on		subquery.idflQuery = o_main_subquery.idflQuery
			where	subquery.idflQuery = @QueryID
					and subquery.blnSubQuery = 1
					and q.idflQuery = qso_root.idflQuery
					) existsSubQuery
		where		qso_root.idfParentQuerySearchObject is null

	end
end

-- Create @AllSearchTable table of all search tables that should be included to the query
-- for every "union" part
declare	@AllSearchTable table
(	idfUnionSearchTable		bigint not null,
	idfMainSearchTable		bigint not null,
	idfSearchTable			bigint not null,
	idfParentSearchTable	bigint null,
	strJoinType				varchar(20) collate database_default not null,
	strFrom					nvarchar(MAX) collate database_default not null,
	strJoinCondition		nvarchar(2000) collate database_default not null,
	primary key nonclustered 
	(idfUnionSearchTable asc, idfSearchTable asc) on [PRIMARY]
)

-- In case of "exist" sub-query, take union search table(-s) of root objects of parent query 
-- Add union search table(-s) of the root object with the "from" join type
if not exists
	(		select	1
			from	tasQuery q
			join	tasQuerySearchObject o
			on		o.idflQuery = q.idflQuery
			join	tasQueryConditionGroup g
			on		g.idfQuerySearchObject = o.idfQuerySearchObject
			join	tasQuerySearchObject o_main_subquery
			on		o_main_subquery.idfQuerySearchObject = g.idfSubQuerySearchObject
			join	tasQuery subquery
			on		subquery.idflQuery = o_main_subquery.idflQuery
			where	subquery.idflQuery = @QueryID
					and subquery.blnSubQuery = 1
	)
begin
	-- Add main search table(-s) of the root object with the "from" join type
	insert into	@AllSearchTable
	(	idfUnionSearchTable,
		idfMainSearchTable,
		idfSearchTable,
		idfParentSearchTable,
		strJoinType,
		strFrom,
		strJoinCondition
	)
	select		
				qp.idfUnionSearchTable,
				st_main.idfSearchTable,
				st_main.idfSearchTable,
				null,
				'from 
	',
				st_main.strFrom,
				''
	from		tasQuerySearchObject qso_root
	inner join	tasSearchObject sob
	on			sob.idfsSearchObject = qso_root.idfsSearchObject
				and sob.intRowStatus = 0
	inner join	tasMainTableForObject mto
	on			mto.idfsSearchObject = sob.idfsSearchObject
	inner join	tasSearchTable st_main
	on			st_main.idfSearchTable = mto.idfMainSearchTable
	inner join	@QueryParts qp
	on			qp.idfUnionSearchTable = st_main.idfSearchTable
				or	not exists	(
							select		*
							from		tasMainTableForObject mto_union
							where		mto_union.idfsSearchObject = sob.idfsSearchObject
										and mto_union.idfMainSearchTable <> mto.idfMainSearchTable
								)
	where		qso_root.idflQuery = @QueryID
				and qso_root.idfParentQuerySearchObject is null
end
else begin
	insert into	@AllSearchTable
	(	idfUnionSearchTable,
		idfMainSearchTable,
		idfSearchTable,
		idfParentSearchTable,
		strJoinType,
		strFrom,
		strJoinCondition
	)
	select		
				qp.idfUnionSearchTable,
				st.idfSearchTable,
				st.idfSearchTable,
				null,
				'from 
	',
				st.strFrom,
				''
	from		@QueryParts qp
	inner join	tasSearchTable st
	on			st.idfSearchTable = qp.idfUnionSearchTable
end

-- Add search tables related to selected fields of root object with the correct join types
insert into	@AllSearchTable
(	idfUnionSearchTable,
	idfMainSearchTable,
	idfSearchTable,
	idfParentSearchTable,
	strJoinType,
	strFrom,
	strJoinCondition
)
select	distinct
			qp.idfUnionSearchTable,
			st_main.idfSearchTable,
			st.idfSearchTable,
			stjr.idfParentSearchTable,
			case
				when	st.blnPrimary = 1
						or (	q.blnSubQuery = 1 
								-- to allow Sample to be connected to one of this objects 
								and st.idfSearchTable not in 
									(	4583090000090	/*Species*/,
										4583090000091	/*Animal*/
									)
							)
					then	'inner join 
'
				else	'left join 
'
			end,
			st.strFrom,
			stjr.strJoinCondition

from		tasQuerySearchField qsf
inner join	tasSearchField sf
on			sf.idfsSearchField = qsf.idfsSearchField
			and sf.intRowStatus = 0

inner join	tasQuerySearchObject qso_root
on			qso_root.idfQuerySearchObject = qsf.idfQuerySearchObject
			and qso_root.idfParentQuerySearchObject is null
inner join	tasSearchObject sob
on			sob.idfsSearchObject = qso_root.idfsSearchObject
			and sob.intRowStatus = 0

inner join	tasMainTableForObject mto
on			mto.idfsSearchObject = sob.idfsSearchObject
inner join	tasSearchTable st_main
on			st_main.idfSearchTable = mto.idfMainSearchTable

inner join	@QueryParts qp
on			qp.idfUnionSearchTable = st_main.idfSearchTable
			or	not exists	(
						select		*
						from		tasMainTableForObject mto_union
						where		mto_union.idfsSearchObject = sob.idfsSearchObject
									and mto_union.idfMainSearchTable <> mto.idfMainSearchTable
							)

inner join	tasFieldSourceForTable fst
on			fst.idfsSearchField = sf.idfsSearchField
			and fst.idfUnionSearchTable = qp.idfUnionSearchTable
inner join	tasSearchTable st
on			st.idfSearchTable = fst.idfSearchTable

inner join	tasSearchTableJoinRule stjr
on			stjr.idfSearchTable = st.idfSearchTable
			and stjr.idfMainSearchTable = st_main.idfSearchTable
			and stjr.idfUnionSearchTable = qp.idfUnionSearchTable


inner join	tasQuery q
on			q. idflQuery = @QueryID

left join	@AllSearchTable st_all_ex
on			st_all_ex.idfSearchTable = st.idfSearchTable
			and st_all_ex.idfUnionSearchTable = qp.idfUnionSearchTable

where		qso_root.idflQuery = @QueryID
			and st_all_ex.idfSearchTable is null


-- Mandatory Report Type filter
declare	@idfsReportType	bigint
declare	@ReportTypeFilter nvarchar(1000)
declare	@ReportTypeFieldAlias nvarchar(200)

select		@idfsReportType = qso_root.idfsReportType
from		tasQuery q
inner join	tasQuerySearchObject qso_root
on			qso_root.idflQuery = q.idflQuery
			and qso_root.idfParentQuerySearchObject is null
			and qso_root.idfsReportType in
				(	4578940000001,	-- Active
					4578940000002	-- Passive
				)
where		q.idflQuery = @QueryID

set	@ReportTypeFilter = N''

if	@idfsReportType is not null
begin
	select		@ReportTypeFieldAlias = sf.strSearchFieldAlias
	from		tasSearchField sf
	inner join	tasQuerySearchObject qso_root
	on			qso_root.idflQuery = @QueryID
				and qso_root.idfsSearchObject = sf.idfsSearchObject
				and qso_root.idfParentQuerySearchObject is null
	where		sf.intRowStatus = 0
				and sf.idfsReferenceType = 19000144	-- Case Report Type
				and exists	(
						select	*
						from	tasFieldSourceForTable fst
						where	fst.idfsSearchField = sf.idfsSearchField
								and (	fst.strFieldText like N'%idfsReportType%'
										or	fst.strFieldText like N'%idfsCaseReportType%'
									)
							)	

	if	@ReportTypeFieldAlias is not null
	begin
		set	@ReportTypeFilter = N'(v.[' + @ReportTypeFieldAlias + N'_ID] = ' + cast(@idfsReportType as nvarchar(20)) + N') '

		-- Add table of search field "Report Type"
		insert into	@AllSearchTable
		(	idfUnionSearchTable,
			idfMainSearchTable,
			idfSearchTable,
			idfParentSearchTable,
			strJoinType,
			strFrom,
			strJoinCondition
		)
		select	distinct
					qp.idfUnionSearchTable,
					st_main.idfSearchTable,
					st.idfSearchTable,
					stjr.idfParentSearchTable,
					case
						when	st.blnPrimary = 1
								or (	q.blnSubQuery = 1 
										-- to allow Sample to be connected to one of this objects 
										and st.idfSearchTable not in 
											(	4583090000090	/*Species*/,
												4583090000091	/*Animal*/
											)
									)
							then	'inner join 
		'
						else	'left join 
		'
					end,
					st.strFrom,
					stjr.strJoinCondition

		from		tasSearchField sf

		inner join	tasQuerySearchObject qso_root
		on			qso_root.idfsSearchObject = sf.idfsSearchObject
					and qso_root.idfParentQuerySearchObject is null
		inner join	tasSearchObject sob
		on			sob.idfsSearchObject = qso_root.idfsSearchObject
					and sob.intRowStatus = 0

		inner join	tasMainTableForObject mto
		on			mto.idfsSearchObject = sob.idfsSearchObject
		inner join	tasSearchTable st_main
		on			st_main.idfSearchTable = mto.idfMainSearchTable

		inner join	@QueryParts qp
		on			qp.idfUnionSearchTable = st_main.idfSearchTable
					or	not exists	(
								select		*
								from		tasMainTableForObject mto_union
								where		mto_union.idfsSearchObject = sob.idfsSearchObject
											and mto_union.idfMainSearchTable <> mto.idfMainSearchTable
									)

		inner join	tasFieldSourceForTable fst
		on			fst.idfsSearchField = sf.idfsSearchField
					and fst.idfUnionSearchTable = qp.idfUnionSearchTable
		inner join	tasSearchTable st
		on			st.idfSearchTable = fst.idfSearchTable

		inner join	tasSearchTableJoinRule stjr
		on			stjr.idfSearchTable = st.idfSearchTable
					and stjr.idfMainSearchTable = st_main.idfSearchTable
					and stjr.idfUnionSearchTable = qp.idfUnionSearchTable


		inner join	tasQuery q
		on			q. idflQuery = @QueryID

		left join	@AllSearchTable st_all_ex
		on			st_all_ex.idfSearchTable = st.idfSearchTable
					and st_all_ex.idfUnionSearchTable = qp.idfUnionSearchTable

		where		qso_root.idflQuery = @QueryID
					and	sf.strSearchFieldAlias = @ReportTypeFieldAlias
					and sf.intRowStatus = 0
					and st_all_ex.idfSearchTable is null
	end

end


-- Add mandatory table of root object with the correct join types
insert into	@AllSearchTable
(	idfUnionSearchTable,
	idfMainSearchTable,
	idfSearchTable,
	idfParentSearchTable,
	strJoinType,
	strFrom,
	strJoinCondition
)
select	distinct
			qp.idfUnionSearchTable,
			st_main.idfSearchTable,
			st.idfSearchTable,
			stjr.idfParentSearchTable,
			case
				when	st.blnPrimary = 1
						or (	q.blnSubQuery = 1 
								-- to allow Sample to be connected to one of this objects 
								and st.idfSearchTable not in 
									(	4583090000090	/*Species*/,
										4583090000091	/*Animal*/
									)
							)
					then	'inner join 
'
				else	'left join 
'
			end,
			st.strFrom,
			stjr.strJoinCondition

from		tasQuerySearchObject qso_root
inner join	tasSearchObject sob
on			sob.idfsSearchObject = qso_root.idfsSearchObject
			and sob.intRowStatus = 0

inner join	tasMainTableForObject mto
on			mto.idfsSearchObject = sob.idfsSearchObject
inner join	tasSearchTable st_main
on			st_main.idfSearchTable = mto.idfMainSearchTable

inner join	@QueryParts qp
on			qp.idfUnionSearchTable = st_main.idfSearchTable
			or	not exists	(
						select		*
						from		tasMainTableForObject mto_union
						where		mto_union.idfsSearchObject = sob.idfsSearchObject
									and mto_union.idfMainSearchTable <> mto.idfMainSearchTable
							)

inner join	tasSearchTable st	-- Mandatory Search Table for root object
on			st.idfSearchTable = mto.idfMandatorySearchTable
			and st.idfSearchTable <> mto.idfMainSearchTable

inner join	tasSearchTableJoinRule stjr
on			stjr.idfSearchTable = st.idfSearchTable
			and stjr.idfMainSearchTable = st_main.idfSearchTable
			and stjr.idfUnionSearchTable = qp.idfUnionSearchTable

inner join	tasQuery q
on			q. idflQuery = @QueryID


left join	@AllSearchTable st_all_ex
on			st_all_ex.idfSearchTable = st.idfSearchTable
			and st_all_ex.idfUnionSearchTable = qp.idfUnionSearchTable

where		qso_root.idflQuery = @QueryID
			and qso_root.idfParentQuerySearchObject is null
			and st_all_ex.idfSearchTable is null

-- In case of "exists" sub-query
if exists
	(		select	1
			from	tasQuery q
			join	tasQuerySearchObject o
			on		o.idflQuery = q.idflQuery
			join	tasQueryConditionGroup g
			on		g.idfQuerySearchObject = o.idfQuerySearchObject
			join	tasQuerySearchObject o_main_subquery
			on		o_main_subquery.idfQuerySearchObject = g.idfSubQuerySearchObject
			join	tasQuery subquery
			on		subquery.idflQuery = o_main_subquery.idflQuery
			where	subquery.idflQuery = @QueryID
					and subquery.blnSubQuery = 1

	)
begin
	-- Add mandatory table of root object with the correct join types
	insert into	@AllSearchTable
	(	idfUnionSearchTable,
		idfMainSearchTable,
		idfSearchTable,
		idfParentSearchTable,
		strJoinType,
		strFrom,
		strJoinCondition
	)
	select	distinct
				qp.idfUnionSearchTable,
				st_main.idfSearchTable,
				st.idfSearchTable,
				stjr.idfParentSearchTable,
				'inner join 
	',
				st.strFrom,
				stjr.strJoinCondition

	from		tasQuerySearchObject qso_root
	inner join	tasSearchObject sob
	on			sob.idfsSearchObject = qso_root.idfsSearchObject
				and sob.intRowStatus = 0

	inner join	tasMainTableForObject mto
	on			mto.idfsSearchObject = sob.idfsSearchObject
	inner join	tasSearchTable st_main
	on			st_main.idfSearchTable = mto.idfMainSearchTable

	inner join	@QueryParts qp
	on			qp.idfUnionSearchTable = st_main.idfSearchTable
				or	not exists	(
							select		*
							from		tasMainTableForObject mto_union
							where		mto_union.idfsSearchObject = sob.idfsSearchObject
										and mto_union.idfMainSearchTable <> mto.idfMainSearchTable
								)

	inner join	tasSearchTable st	-- Mandatory Search Table for root object
	on			st.idfSearchTable = mto.idfMandatorySearchTable
				and st.idfSearchTable <> qp.idfUnionSearchTable--mto.idfMainSearchTable

	inner join	tasSearchTableJoinRule stjr
	on			stjr.idfSearchTable = st.idfSearchTable
				and stjr.idfMainSearchTable = qp.idfUnionSearchTable--st_main.idfSearchTable
				and stjr.idfUnionSearchTable = qp.idfUnionSearchTable


	left join	@AllSearchTable st_all_ex
	on			st_all_ex.idfSearchTable = st.idfSearchTable
				and st_all_ex.idfUnionSearchTable = qp.idfUnionSearchTable

	where		qso_root.idflQuery = @QueryID
				and qso_root.idfParentQuerySearchObject is null
				and st_all_ex.idfSearchTable is null
end


-- Define a flag of the end of the cycle
declare @GoOn int
set @GoOn = 1

-- Add parent search tables of tables related to fields or mandatory table of root object with the correct join types
while	@GoOn > 0
begin
	insert into	@AllSearchTable
	(	idfUnionSearchTable,
		idfMainSearchTable,
		idfSearchTable,
		idfParentSearchTable,
		strJoinType,
		strFrom,
		strJoinCondition
	)
	select	distinct
				st_all.idfUnionSearchTable,
				st_all.idfMainSearchTable,
				st_parent.idfSearchTable,
				st_parent_parent.idfSearchTable,
				case
					when	st_parent.blnPrimary = 1
							or (	q.blnSubQuery = 1 
									-- to allow Sample to be connected to one of this objects 
									and st_parent.idfSearchTable not in 
										(	4583090000090	/*Species*/,
											4583090000091	/*Animal*/
										)
								)
						then	'inner join 
'
					else	'left join 
'
				end,
				st_parent.strFrom,
				stjr_parent.strJoinCondition
	from		@AllSearchTable st_all
	inner join	tasSearchTableJoinRule stjr
	on			stjr.idfSearchTable = st_all.idfSearchTable
				and stjr.idfUnionSearchTable = st_all.idfUnionSearchTable
				and stjr.idfMainSearchTable = st_all.idfMainSearchTable
	inner join	tasSearchTable st_parent
	on			st_parent.idfSearchTable = stjr.idfParentSearchTable

	inner join	(
		tasSearchTableJoinRule stjr_parent
		inner join	tasSearchTable st_parent_parent
		on			st_parent_parent.idfSearchTable = stjr_parent.idfParentSearchTable
				)
	on			stjr_parent.idfUnionSearchTable = stjr.idfUnionSearchTable
				and stjr_parent.idfMainSearchTable = stjr.idfMainSearchTable
				and stjr_parent.idfSearchTable = st_parent.idfSearchTable

	inner join	tasQuery q
	on			q. idflQuery = @QueryID

	left join	@AllSearchTable st_all_ex
	on			st_all_ex.idfSearchTable = st_parent.idfSearchTable
				and st_all_ex.idfUnionSearchTable = st_all.idfUnionSearchTable
	where		st_all_ex.idfSearchTable is null

	set	@GoOn = @@rowcount
end

-- Add search tables related to selected fields of child objects with the "left" join type
insert into	@AllSearchTable
(	idfUnionSearchTable,
	idfMainSearchTable,
	idfSearchTable,
	idfParentSearchTable,
	strJoinType,
	strFrom,
	strJoinCondition
)
select	distinct
			qp.idfUnionSearchTable,
			st_main.idfSearchTable,
			st.idfSearchTable,
			stjr.idfParentSearchTable,
			'left join 
',
			st.strFrom,
			stjr.strJoinCondition

from		tasQuerySearchField qsf
inner join	tasSearchField sf
on			sf.idfsSearchField = qsf.idfsSearchField
			and sf.intRowStatus = 0

inner join	tasQuerySearchObject qso_child
on			qso_child.idfQuerySearchObject = qsf.idfQuerySearchObject
			and qso_child.idfParentQuerySearchObject is not null

inner join	tasQuerySearchObject qso_root
on			qso_root.idfQuerySearchObject = qso_child.idfParentQuerySearchObject
			and qso_root.idfParentQuerySearchObject is null
inner join	tasSearchObject sob_root
on			sob_root.idfsSearchObject = qso_root.idfsSearchObject
			and sob_root.intRowStatus = 0

inner join	tasMainTableForObject mto_root
on			mto_root.idfsSearchObject = sob_root.idfsSearchObject
inner join	tasSearchTable st_main
on			st_main.idfSearchTable = mto_root.idfMainSearchTable

inner join	@QueryParts qp
on			qp.idfUnionSearchTable = st_main.idfSearchTable
			or	not exists	(
						select		*
						from		tasMainTableForObject mto_union
						where		mto_union.idfsSearchObject = sob_root.idfsSearchObject
									and mto_union.idfMainSearchTable <> mto_root.idfMainSearchTable
							)

inner join	tasFieldSourceForTable fst
on			fst.idfsSearchField = sf.idfsSearchField
			and fst.idfUnionSearchTable = qp.idfUnionSearchTable
inner join	tasSearchTable st
on			st.idfSearchTable = fst.idfSearchTable

inner join	tasSearchTableJoinRule stjr
on			stjr.idfSearchTable = st.idfSearchTable
			and stjr.idfMainSearchTable = st_main.idfSearchTable
			and stjr.idfUnionSearchTable = qp.idfUnionSearchTable

left join	@AllSearchTable st_all_ex
on			st_all_ex.idfSearchTable = st.idfSearchTable
			and st_all_ex.idfUnionSearchTable = qp.idfUnionSearchTable

where		qso_child.idflQuery = @QueryID
			and st_all_ex.idfSearchTable is null

-- Add mandatory tables of child objects with the "left" join type
insert into	@AllSearchTable
(	idfUnionSearchTable,
	idfMainSearchTable,
	idfSearchTable,
	idfParentSearchTable,
	strJoinType,
	strFrom,
	strJoinCondition
)
select	distinct
			qp.idfUnionSearchTable,
			st_main.idfSearchTable,
			st.idfSearchTable,
			stjr.idfParentSearchTable,
			'left join 
',
			st.strFrom,
			stjr.strJoinCondition

from		tasQuerySearchObject qso_child

inner join	tasSearchObject sob_child
on			sob_child.idfsSearchObject = qso_child.idfsSearchObject
			and sob_child.intRowStatus = 0

inner join	tasQuerySearchObject qso_root
on			qso_root.idfQuerySearchObject = qso_child.idfParentQuerySearchObject
			and qso_root.idfParentQuerySearchObject is null
inner join	tasSearchObject sob_root
on			sob_root.idfsSearchObject = qso_root.idfsSearchObject
			and sob_root.intRowStatus = 0

inner join	tasMainTableForObject mto_root
on			mto_root.idfsSearchObject = sob_root.idfsSearchObject
inner join	tasSearchTable st_main
on			st_main.idfSearchTable = mto_root.idfMainSearchTable

inner join	@QueryParts qp
on			qp.idfUnionSearchTable = st_main.idfSearchTable
			or	not exists	(
						select		*
						from		tasMainTableForObject mto_union
						where		mto_union.idfsSearchObject = sob_root.idfsSearchObject
									and mto_union.idfMainSearchTable <> mto_root.idfMainSearchTable
							)

inner join	tasMainTableForObject mto
on			mto.idfsSearchObject = sob_child.idfsSearchObject
			and mto.idfMainSearchTable = st_main.idfSearchTable
inner join	tasSearchTable st	-- Mandatory Search Table for child object
on			st.idfSearchTable = mto.idfMandatorySearchTable
			and st.idfSearchTable <> mto.idfMainSearchTable

inner join	tasSearchTableJoinRule stjr
on			stjr.idfSearchTable = st.idfSearchTable
			and stjr.idfMainSearchTable = st_main.idfSearchTable
			and stjr.idfUnionSearchTable = qp.idfUnionSearchTable

left join	@AllSearchTable st_all_ex
on			st_all_ex.idfSearchTable = st.idfSearchTable
			and st_all_ex.idfUnionSearchTable = qp.idfUnionSearchTable

where		qso_child.idflQuery = @QueryID
			and qso_child.idfParentQuerySearchObject is not null
			and st_all_ex.idfSearchTable is null



-- Reset a flag of the end of the cycle
set	@GoOn = 1

-- Add parent search tables of tables related to fields or mandatory tables of child objects with the "left" join type
while	@GoOn > 0
begin
	insert into	@AllSearchTable
	(	idfUnionSearchTable,
		idfMainSearchTable,
		idfSearchTable,
		idfParentSearchTable,
		strJoinType,
		strFrom,
		strJoinCondition
	)
	select	distinct
				st_all.idfUnionSearchTable,
				st_all.idfMainSearchTable,
				st_parent.idfSearchTable,
				st_parent_parent.idfSearchTable,
				'left join 
',
				st_parent.strFrom,
				stjr_parent.strJoinCondition

	from		@AllSearchTable st_all
	inner join	tasSearchTableJoinRule stjr
	on			stjr.idfSearchTable = st_all.idfSearchTable
				and stjr.idfUnionSearchTable = st_all.idfUnionSearchTable
				and stjr.idfMainSearchTable = st_all.idfMainSearchTable
	inner join	tasSearchTable st_parent
	on			st_parent.idfSearchTable = stjr.idfParentSearchTable

	inner join	(
		tasSearchTableJoinRule stjr_parent
		inner join	tasSearchTable st_parent_parent
		on			st_parent_parent.idfSearchTable = stjr_parent.idfParentSearchTable
				)
	on			stjr_parent.idfUnionSearchTable = stjr.idfUnionSearchTable
				and stjr_parent.idfMainSearchTable = stjr.idfMainSearchTable
				and stjr_parent.idfSearchTable = st_parent.idfSearchTable

	left join	@AllSearchTable st_all_ex
	on			st_all_ex.idfSearchTable = st_parent.idfSearchTable
				and st_all_ex.idfUnionSearchTable = st_all.idfUnionSearchTable
	where		st_all_ex.idfSearchTable is null

	set	@GoOn = @@rowcount
end

-- Create @fromTable table of all search tables that should be included to the query 
-- with updated from (including ordinary and GIS reference tables) condition and level
-- for every "union" part
declare	@fromTable table
(	idfUnionSearchTable		bigint not null,
	idfSearchTable			bigint not null,
	strFrom					nvarchar(MAX) collate database_default not null,
	fromLevel				int not null,
	primary key	(
		idfSearchTable asc, idfUnionSearchTable asc
				)
)

;
with	fromTable	(
			idfUnionSearchTable,
			idfSearchTable,
			strFrom,
			fromLevel
					)
as	(	select		st_main.idfUnionSearchTable,
					st_main.idfSearchTable,
					dbo.fnAsGetFrom	(
							@QueryID, 
							st_main.idfUnionSearchTable,
							st_main.idfSearchTable, 
							st_main.strJoinType, 
							st_main.strFrom,
							st_main.strJoinCondition,
							1	-- Default number of levels of joined sub-tables
									) as strFrom,
					0 as fromLevel
		from		@AllSearchTable st_main
		where		st_main.idfParentSearchTable is null
		union all
		select		st_all.idfUnionSearchTable,
					st_all.idfSearchTable,
					dbo.fnAsGetFrom	(
							@QueryID, 
							st_all.idfUnionSearchTable, 
							st_all.idfSearchTable, 
							st_all.strJoinType, 
							st_all.strFrom,
							st_all.strJoinCondition,
							1	-- Default number of levels of joined sub-tables
									) as strFrom,
					fromTable.fromLevel + 1 as fromLevel
		from		@AllSearchTable st_all
		inner join	fromTable
		on			fromTable.idfSearchTable = st_all.idfParentSearchTable
					and fromTable.idfUnionSearchTable = st_all.idfUnionSearchTable
	)

insert into	@fromTable
(	idfUnionSearchTable,
	idfSearchTable,
	strFrom,
	fromLevel
)
select	fTRec.idfUnionSearchTable,
		fTRec.idfSearchTable,
		fTRec.strFrom,
		fTRec.fromLevel
from	fromTable fTRec

-- Define the table with current levels of the table included to the from condition
-- for every "union" parts
declare	@Level	table
(	idfUnionSearchTable	bigint not null primary key,
	intLevel			int not null
)

insert into	@Level
(	idfUnionSearchTable,
	intLevel
)
select		ft.idfUnionSearchTable, max(ft.fromLevel) - 1
from		@fromTable ft
group by	ft.idfUnionSearchTable


-- Define the table with maximum levels of the table included to the from condition
-- for every "union" parts
declare	@MaxLevel	table
(	idfUnionSearchTable	bigint not null primary key,
	intMaxLevel			int not null
)

insert into	@MaxLevel
(	idfUnionSearchTable,
	intMaxLevel
)
select		l.idfUnionSearchTable,
			max(l.intLevel)
from		@Level l
group by	l.idfUnionSearchTable


-- Update From condition for "union" parts with maximum level of the table included to the from condition greater than 3
update		ft
set			ft.strFrom = 
				dbo.fnAsGetFrom	(
					@QueryID, 
					ft.idfUnionSearchTable, 
					ft.idfSearchTable, 
					st.strJoinType, 
					st.strFrom,
					st.strJoinCondition,
					ml.intMaxLevel
								)

from		@fromTable ft
inner join	@MaxLevel ml
on			ml.idfUnionSearchTable = ft.idfUnionSearchTable
			and ml.intMaxLevel > 2
inner join	@AllSearchTable st
on			st.idfSearchTable = ft.idfSearchTable
			and st.idfUnionSearchTable = ft.idfUnionSearchTable

-- Create @finalFromTable table of all search tables that should be included to the query 
-- with final from (including ordinary and GIS reference tables and child from conditions) conditions and levels
-- for every "union" part
declare	@finalFromTable table
(	idfUnionSearchTable		bigint not null,
	idfSearchTable			bigint not null,
	strFrom					nvarchar(MAX) collate database_default not null,
	fromLevel				int not null,
	primary key	(
		idfSearchTable asc,
		idfUnionSearchTable asc
				)
)

-- Add search tables with their from conditions of maximum levels
-- for every "union" part
insert into	@finalFromTable
(	idfUnionSearchTable,
	idfSearchTable,
	strFrom,
	fromLevel
)
select		ft.idfUnionSearchTable,
			ft.idfSearchTable,
			-- Remove brackets and internal join condition ({1}) 
			--		for single tables
			--		or for tables within "union" parts with maximum level of joined sub-tables greater than 3,
			-- or replace special brackets to ordinary ones for complex join condition
			case
				when	charindex('join', ft.strFrom, charindex('join', ft.strFrom) + 1) = 0
						or	ml.intMaxLevel > 2
					then	replace(replace(replace(ft.strFrom, '{1}', ''), '{(}', ''), '{)}', '')
				else	replace(replace(replace(ft.strFrom, '{1}', ''), '{(}', '('), '{)}', ')')
			end,
			ft.fromLevel
from		@fromTable ft
inner join	@Level l
on			l.idfUnionSearchTable = ft.idfUnionSearchTable
			and l.intLevel = ft.fromLevel - 1
inner join	@MaxLevel ml
on			ml.idfUnionSearchTable = ft.idfUnionSearchTable



-- Define current final from condition (including child from conditions)
declare	@strCurFinalFrom	nvarchar(MAX)
-- Define current from condition (without child from conditions)
declare	@strCurFrom			nvarchar(MAX)

-- Define current "union" part
declare	@idfCurUnionSearchTable	bigint
-- Define current search table
declare	@idfCurSearchTable	bigint
-- Define maximum level of joined sub-tables for current "union" part
declare	@intMaxLevel int

-- Set separator value
set @s = '
'

-- Add search tables with final from conditions of all levels ordered by their levels
-- for every "union" part
while exists	(
		select	*
		from	@Level l
		where	l.intLevel >= 0
				)
begin
	-- Define cursor for @fromTable table with current level
	declare	TableCursor	cursor local read_only forward_only for
		select		ft.idfUnionSearchTable,
					ft.idfSearchTable,
					ft.strFrom,
					ml.intMaxLevel
		from		@fromTable ft
		inner join	@Level l
		on			l.idfUnionSearchTable = ft.idfUnionSearchTable
					and l.intLevel = ft.fromLevel
					and l.intLevel >= 0
		inner join	@MaxLevel ml
		on			ml.idfUnionSearchTable = ft.idfUnionSearchTable
	open TableCursor
	fetch next from	TableCursor into	@idfCurUnionSearchTable, @idfCurSearchTable, @strCurFrom, @intMaxLevel

	while @@fetch_status <> -1
	begin
		set	@strCurFinalFrom = @strCurFrom

		-- Generate final from condition (@strCurFinalFrom) for current search table
		select		@strCurFinalFrom = replace(@strCurFinalFrom, '{1}', fTFin_child.strFrom + @s + '{1}')
		from		@AllSearchTable st_all
		inner join	@finalFromTable fTFin_child
		on			fTFin_child.idfSearchTable = st_all.idfSearchTable
					and fTFin_child.idfUnionSearchTable = st_all.idfUnionSearchTable
		where		st_all.idfParentSearchTable = @idfCurSearchTable
					and st_all.idfUnionSearchTable = @idfCurUnionSearchTable
		order by	fTFin_child.strFrom

		-- Remove internal join condition ({1})
		set	@strCurFinalFrom = replace(@strCurFinalFrom, '{1}', '')

		-- Remove brackets 
		--		for single tables
		--		or for tables within "union" parts with maximum level of joined sub-tables greater than 3,
		-- or replace special brackets to ordinary ones for complex join condition
		if (charindex('join', @strCurFinalFrom, charindex('join', @strCurFinalFrom) + 1) = 0)
			or	@intMaxLevel > 2
			set @strCurFinalFrom = replace(replace(@strCurFinalFrom, '{(}', ''), '{)}', '')
		else	set @strCurFinalFrom = replace(replace(@strCurFinalFrom, '{(}', '('), '{)}', ')')

		-- Add generated values to @finalFromTable
		insert into	@finalFromTable
		(	idfUnionSearchTable,
			idfSearchTable,
			strFrom, 
			fromLevel	
		)
		select	@idfCurUnionSearchTable,
				@idfCurSearchTable,
				@strCurFinalFrom,
				l.intLevel
		from	@Level l
		where	l.idfUnionSearchTable = @idfCurUnionSearchTable

		fetch next from	TableCursor into	@idfCurUnionSearchTable, @idfCurSearchTable, @strCurFrom, @intMaxLevel

	end
		
	close TableCursor
	deallocate TableCursor

	update	l
	set		l.intLevel = l.intLevel - 1
	from	@Level l

end

-- Generate final from text
-- for every "union" part
declare	TableCursor	cursor local read_only forward_only for
	select		fTFin.idfUnionSearchTable,
				fTFin.strFrom
	from		@finalFromTable fTFin
	where		fTFin.fromLevel = 0
	order by	fTFin.strFrom asc
open TableCursor
fetch next from	TableCursor into	@idfCurUnionSearchTable, @strCurFrom

while @@fetch_status <> -1
begin

	update		qp
	set			qp.strFrom = IsNull(qp.strFrom, N'') + @s + replace(@strCurFrom, '{1}', '')
	from		@QueryParts qp
	where		qp.idfUnionSearchTable = @idfCurUnionSearchTable

	fetch next from	TableCursor into	@idfCurUnionSearchTable, @strCurFrom

end

close TableCursor
deallocate TableCursor

-- Generate select text

-- Define table with "select" parts containing PKField of main tables and PKField of all tables included in the query
declare	@SelectPKFields	table
(	idfUnionSearchTable	bigint not null primary key,
	strSelect			nvarchar(MAX) collate database_default null
)

-- Add PK fields of main search tables to the "select" parts
insert into	@SelectPKFields
(	idfUnionSearchTable,
	strSelect
)
select		qp.idfUnionSearchTable,
			N'select		' + replace(st_main.strPKField, '{0}', '') + N' as [PKField]'
from		@QueryParts qp
inner join	@AllSearchTable st_all
on			st_all.idfUnionSearchTable = qp.idfUnionSearchTable
			and st_all.idfSearchTable = st_all.idfMainSearchTable
			and st_all.idfParentSearchTable is null
inner join	tasSearchTable st_main
on			st_main.idfSearchTable = st_all.idfMainSearchTable
inner join	tasQuery q
on			q.idflQuery = @QueryID

-- Define source for PK field of current search table
declare	@strCurPKField	nvarchar(500)

-- Set separator value
set	@s = ', 
			'

-- Add PK fields of all search tables inculded in the query to the "select" parts
declare	TableCursor	cursor local read_only forward_only for
	select		qp.idfUnionSearchTable,
				st.idfSearchTable,
				st.strPKField
	from		@QueryParts qp
	inner join	@fromTable ft
	on			ft.idfUnionSearchTable = qp.idfUnionSearchTable
	inner join	tasSearchTable st
	on			st.idfSearchTable = ft.idfSearchTable
	where		not exists	(
						select		*
						from		tasQuerySearchField qsf
						inner join	tasQuerySearchObject qso
						on			qso.idfQuerySearchObject = qsf.idfQuerySearchObject
									and qso.idflQuery = @QueryID
						inner join	tasSearchField sf
						on			sf.idfsSearchField = qsf.idfsSearchField
									and sf.idfsSearchObject = qso.idfsSearchObject
						inner join	tasFieldSourceForTable fst
						on			fst.idfsSearchField = sf.idfsSearchField
									and fst.idfUnionSearchTable = qp.idfUnionSearchTable
									and fst.idfSearchTable = ft.idfSearchTable
						where		qsf.idfsParameter is not null
							)
	union
	select distinct
				qp.idfUnionSearchTable,
				st_another.idfSearchTable,
				N'null'
	from		@QueryParts qp
	inner join	@fromTable ft_another
		inner join	@QueryParts qp_another
		on			qp_another.idfUnionSearchTable = ft_another.idfUnionSearchTable
	on			ft_another.idfUnionSearchTable <> qp.idfUnionSearchTable
	inner join	tasSearchTable st_another
	on			st_another.idfSearchTable = ft_another.idfSearchTable
	left join	@fromTable ft_ex
		inner join	tasSearchTable st_ex
		on			st_ex.idfSearchTable = ft_ex.idfSearchTable
	on			ft_ex.idfUnionSearchTable = qp.idfUnionSearchTable
				and ft_ex.idfSearchTable = ft_another.idfSearchTable
	where		ft_ex.idfSearchTable is null
				and not exists	(
							select		*
							from		tasQuerySearchField qsf
							inner join	tasQuerySearchObject qso
							on			qso.idfQuerySearchObject = qsf.idfQuerySearchObject
										and qso.idflQuery = @QueryID
							inner join	tasSearchField sf
							on			sf.idfsSearchField = qsf.idfsSearchField
										and sf.idfsSearchObject = qso.idfsSearchObject
							inner join	tasFieldSourceForTable fst
							on			fst.idfsSearchField = sf.idfsSearchField
										and fst.idfUnionSearchTable = ft_another.idfUnionSearchTable
										and fst.idfSearchTable = ft_another.idfSearchTable
							where		qsf.idfsParameter is not null
								)
	order by	qp.idfUnionSearchTable asc,
				st.idfSearchTable asc
open TableCursor
fetch next from	TableCursor into	@idfCurUnionSearchTable, @idfCurSearchTable, @strCurPKField

while @@fetch_status <> -1
begin

	update		sPK
	set			sPK.strSelect = sPK.strSelect + @s + replace(@strCurPKField, '{0}', '') +
								N' as [PKField_' + cast(@idfCurSearchTable as nvarchar(20)) + N']'

	from		@SelectPKFields sPK
	where		sPK.idfUnionSearchTable = @idfCurUnionSearchTable
	
	fetch next from	TableCursor into	@idfCurUnionSearchTable, @idfCurSearchTable, @strCurPKField

end

close TableCursor
deallocate TableCursor


-- Add PK fields to the "select" parts and existence condition to "where" parts
update		qp
set			qp.strSelect = sPK.strSelect,
			qp.strRowStatusWhere = 
				case
					when	len(rtrim(ltrim(st_main.strExistenceCondition))) > 0
						then	N'
where		' + replace(st_main.strExistenceCondition, '{0}', '') + N'
'
					else	N'
'
				end
from		@QueryParts qp
inner join	@AllSearchTable st_all
on			st_all.idfUnionSearchTable = qp.idfUnionSearchTable
			and st_all.idfSearchTable = st_all.idfMainSearchTable
			and st_all.idfParentSearchTable is null
inner join	tasSearchTable st_main
on			st_main.idfSearchTable = st_all.idfMainSearchTable
inner join	@SelectPKFields sPK
on			sPK.idfUnionSearchTable = qp.idfUnionSearchTable

-- Set separator value
set	@s = ', 
			'

-- Define current search field that should be added to the query
-- for every "union" parts
declare	@idfsCurSearchField	bigint

-- Add non FF fields to the "select" parts
-- for every "union" parts
declare	FieldCursor	cursor local read_only forward_only for
	select		sf.idfsSearchField
	from		tasQuerySearchField qsf
	inner join	tasQuerySearchObject qso
	on			qso.idfQuerySearchObject = qsf.idfQuerySearchObject
				and qso.idflQuery = @QueryID
	inner join	tasSearchField sf
	on			sf.idfsSearchField = qsf.idfsSearchField
				and sf.idfsSearchObject = qso.idfsSearchObject
				and sf.idfsSearchFieldType <> 10081003			-- FF Field
				and sf.intRowStatus = 0
	union
	-- Report Type Field
	select		sf.idfsSearchField
	from		tasQuerySearchObject qso_root
	inner join	tasSearchField sf
	on			sf.strSearchFieldAlias = @ReportTypeFieldAlias
				and sf.idfsSearchObject = qso_root.idfsSearchObject
				and sf.idfsSearchFieldType <> 10081003			-- FF Field
				and sf.intRowStatus = 0
	where		qso_root.idfParentQuerySearchObject is null
				and qso_root.idflQuery = @QueryID

	order by	sf.idfsSearchField asc
open FieldCursor
fetch next from	FieldCursor into	@idfsCurSearchField

while @@fetch_status <> -1
begin

	update		qp
	set			qp.strSelect = qp.strSelect + 
			case
				when	sf.idfsReferenceType is null and sf.idfsGISReferenceType is null
						and (sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
						and (sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
						and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
					then
							IsNull(@s + replace(fst.strFieldText, N'{0}', N'') + N' as [' + sf.strSearchFieldAlias + N']', N'')
				when	sf.idfsReferenceType is not null and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
					then
							IsNull(	@s + replace(fst.strFieldText, N'{0}', N'') + N' as [' + sf.strSearchFieldAlias + N'_ID]'
----							 + @s +
----							N'[ref_' + sf.strSearchFieldAlias + N'].[name] as [' + sf.strSearchFieldAlias + ']'
									, N'')
				when	(sf.strLookupFunction is not null and len(ltrim(rtrim(sf.strLookupFunction))) > 0)
					then
							IsNull(	@s + replace(fst.strFieldText, N'{0}', N'') + N' as [' + sf.strSearchFieldAlias + N'_ID]'
----							 + @s +
----							N'[ref_' + sf.strSearchFieldAlias + N'].[' + sf.strLookupFunctionNameField + N'] as [' + sf.strSearchFieldAlias + ']'
									, N'')
				when	sf.idfsGISReferenceType is not null
					then
							IsNull(	@s + replace(fst.strFieldText, N'{0}', N'') + N' as [' + sf.strSearchFieldAlias + N'_ID]'
----							 + @s +
----							N'[ref_GIS_' + sf.strSearchFieldAlias + N'].[ExtendedName] as [' + sf.strSearchFieldAlias + N']'
									, N'')
			when	(sf.blnGeoLocationString is not null and sf.blnGeoLocationString = 1)
					then
							IsNull(	@s + replace(fst.strFieldText, N'{0}', N'') + N' as [' + sf.strSearchFieldAlias + N'_ID]'
									, N'')
			when	(sf.blnShortAddressString is not null and sf.blnShortAddressString = 1)
					then
							IsNull(	@s + replace(fst.strFieldText, N'{0}', N'') + N' as [' + sf.strSearchFieldAlias + N'_ID]'
									, N'')
				else		N''
			end

	from		@QueryParts qp
	inner join	tasFieldSourceForTable fst
	on			fst.idfUnionSearchTable = qp.idfUnionSearchTable
				and fst.idfsSearchField = @idfsCurSearchField
	inner join	tasSearchTable st
	on			st.idfSearchTable = fst.idfSearchTable
	inner join	tasSearchField sf
	on			sf.idfsSearchField = @idfsCurSearchField

	fetch next from	FieldCursor into	@idfsCurSearchField

end

close FieldCursor
deallocate FieldCursor


-- Define current FF parameter that should be added to the query
-- for every "union" parts
declare	@idfsCurParameter	bigint

-- Add FF fields to the "select" parts
-- for every "union" parts
declare	FieldCursor	cursor local read_only forward_only for
	select		sf.idfsSearchField,
				p.idfsParameter
	from		tasQuerySearchField qsf
	inner join	(
		tasQuerySearchObject qso
		inner join	tasSearchObject sob
		on			sob.idfsSearchObject = qso.idfsSearchObject
					and sob.intRowStatus = 0
		inner join	trtBaseReference br_ft
		on			br_ft.idfsBaseReference = sob.idfsFormType
					and br_ft.idfsReferenceType = 19000034		-- Form Type
					and br_ft.intRowStatus = 0
				)
	on			qso.idfQuerySearchObject = qsf.idfQuerySearchObject
				and qso.idflQuery = @QueryID
	inner join	tasSearchField sf
	on			sf.idfsSearchField = qsf.idfsSearchField
				and sf.idfsSearchObject = sob.idfsSearchObject
				and sf.idfsSearchFieldType = 10081003			-- FF Field
				and sf.intRowStatus = 0
	inner join	(
		ffParameter p
		inner join	trtBaseReference br_p
		on			br_p.idfsBaseReference = p.idfsParameter
					and br_p.intRowStatus = 0
		inner join	ffParameterType pt
		on			pt.idfsParameterType = p.idfsParameterType
					and pt.intRowStatus = 0
		inner join	trtBaseReference br_pt
		on			br_pt.idfsBaseReference = pt.idfsParameterType
					and br_pt.intRowStatus = 0
				)
	on			p.idfsParameter = qsf.idfsParameter
				and p.idfsFormType = sob.idfsFormType
				and p.intRowStatus = 0
	order by	sf.idfsSearchField asc, p.idfsParameter asc
open FieldCursor
fetch next from	FieldCursor into	@idfsCurSearchField, @idfsCurParameter

while @@fetch_status <> -1
begin

	update		qp
	set			qp.strSelect = qp.strSelect + 
		case
			when	pt.idfsReferenceType is null
					and pt.idfsParameterType in 
						(	10071029 /*Date*/,
							10071030 /*DateTime*/
						)
				then	IsNull(@s + 
							N'case when ISDATE(cast(' + 
								replace(fst.strFieldText, N'{0}', 
								N'_' + cast(@idfsCurParameter as varchar(20))) + N' as nvarchar)) = 1 then cast(' +
							replace(fst.strFieldText, N'{0}', 
											N'_' + cast(@idfsCurParameter as varchar(20))) + N' as datetime) else cast(null as datetime) end' +
							N' as [' + sf.strSearchFieldAlias + N'__' + 
										cast(sob.idfsFormType as varchar(20)) + N'__' + 
										cast(@idfsCurParameter as varchar(20)) + N']', 
								N'')
			when	pt.idfsReferenceType is null
					and pt.idfsParameterType not in 
						(	10071029 /*Date*/,
							10071030 /*DateTime*/
						)
				then
						IsNull(@s + replace(fst.strFieldText, N'{0}', 
											N'_' + cast(@idfsCurParameter as varchar(20))) + 
							N' as [' + sf.strSearchFieldAlias + N'__' + 
										cast(sob.idfsFormType as varchar(20)) + N'__' + 
										cast(@idfsCurParameter as varchar(20)) + N']', N'')
			when	pt.idfsReferenceType is not null
				then	IsNull(	@s + replace(fst.strFieldText, N'{0}', 
											N'_' + cast(@idfsCurParameter as varchar(20))) + 
								N' as [' + sf.strSearchFieldAlias + N'__' + 
								cast(sob.idfsFormType as varchar(20)) + N'__' + 
								cast(@idfsCurParameter as varchar(20)) + N'_ID]' 
----						+ @s +
----						N'[ref_' + sf.strSearchFieldAlias + N'__' + 
----								cast(sob.idfsFormType as varchar(20)) + N'__' + 
----								cast(@idfsCurParameter as varchar(20)) + 
----								N'].[name] as [' + 
----							sf.strSearchFieldAlias + N'__' + 
----							cast(sob.idfsFormType as varchar(20)) + N'__' + 
----							cast(@idfsCurParameter as varchar(20)) + ']'
								, N'')
			else		N''
		end
	from		@QueryParts qp
	inner join	tasFieldSourceForTable fst
	on			fst.idfUnionSearchTable = qp.idfUnionSearchTable
				and fst.idfsSearchField = @idfsCurSearchField
	inner join	tasSearchTable st
	on			st.idfSearchTable = fst.idfSearchTable
	inner join	tasSearchField sf
	on			sf.idfsSearchField = @idfsCurSearchField
	inner join	tasSearchObject sob
	on			sob.idfsSearchObject = sf.idfsSearchObject
	inner join	(
		ffParameter p
		inner join	ffParameterType pt
		on			pt.idfsParameterType = p.idfsParameterType
				)
	on			p.idfsParameter = @idfsCurParameter

	fetch next from	FieldCursor into	@idfsCurSearchField, @idfsCurParameter

end

close FieldCursor
deallocate FieldCursor

-- Generate view text
set	@query = N''

-- Set separator value
set	@s = N'
'

declare	@unionText	nvarchar(20)
set	@unionText = N'
'

select		@query = @query + @unionText + qp.strSelect + @s + qp.strFrom + @s + qp.strRowStatusWhere,
			@unionText = N'
union
'
from		@QueryParts  qp

-- Drop and create query view

-- define additional SQL command
declare @sqlCmd nvarchar(MAX)
set @sqlCmd = N'
SET QUOTED_IDENTIFIER ON 
'
exec sp_executesql @sqlCmd

set @sqlCmd = N'
SET ANSI_NULLS ON 
'
exec sp_executesql @sqlCmd
set @sqlCmd = N'

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N''[dbo].[' + @viewName + N']'') AND Type = N''V'')
DROP VIEW [dbo].[' + @viewName + N']
'
exec sp_executesql @sqlCmd

set @sqlCmd = N'

CREATE VIEW [dbo].[' + @viewName + N']
as
' + @query + N'

'
exec sp_executesql @sqlCmd 
--print substring(@sqlCmd, 0, 4000)
--print substring(@sqlCmd, 4000, 4000)
--print substring(@sqlCmd, 8000, 4000)
--print substring(@sqlCmd, 12000, 4000)
--print substring(@sqlCmd, 16000, 4000)
--print substring(@sqlCmd, 20000, 4000)
--print substring(@sqlCmd, 24000, 4000)
--print substring(@sqlCmd, 28000, 4000)
--print substring(@sqlCmd, 32000, 4000)
--print substring(@sqlCmd, 36000, 4000)
--print substring(@sqlCmd, 40000, 4000)
--print substring(@sqlCmd, 44000, 4000)
--print substring(@sqlCmd, 48000, 4000)
--print substring(@sqlCmd, 52000, 4000)
--print substring(@sqlCmd, 56000, 4000)
--print substring(@sqlCmd, 60000, 4000)
--print substring(@sqlCmd, 64000, 4000)
--print substring(@sqlCmd, 72000, 4000)
--print substring(@sqlCmd, 76000, 4000)


set @sqlCmd = N'
SET QUOTED_IDENTIFIER OFF 
'
exec sp_executesql @sqlCmd

set @sqlCmd = N'
SET ANSI_NULLS ON 
'
exec sp_executesql @sqlCmd

-- Generate function text for root queries
if	exists	(	
		select	*
		from	tasQuery
		where	idflQuery = @QueryID
				and IsNull(blnSubQuery, 0) = 0
			)
begin


---------------------------------------------------------------------
-- Generate national view select text for root queries

-- Define table with national languages applicable for current customization package taken from non-default local site or global options 
declare	@NationalViews	table
(	idfsLanguage		bigint not null primary key,
	strLanguageCode		nvarchar(50) collate database_default null,
	strNationalViewName	nvarchar(200) collate database_default not null,
	strSelect			nvarchar(MAX) collate database_default not null
)

--,.:;"~`'!@#$%^&*-<>+=/|\{}()[]
insert into	@NationalViews
(	idfsLanguage,
	strLanguageCode,
	strNationalViewName,
	strSelect
)
select		l_cp.idfsLanguage,
			br_l.strBaseReferenceCode,
			N'AVR_' +
			left(
				replace(replace(
					replace(replace(
						replace(replace(
							replace(replace(
								replace(replace(replace(replace(replace(
									replace(replace(replace(replace(replace(replace(replace(
										replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(ltrim(rtrim(lsnt_q.strTextString)), N' ', N'_'), N'-', N'_'), N'''', N'_'), N',', N'_'), N';', N'_'), N':', N'_'), N'.', N'_'), N'`', N'_'), N'"', N'_'), N'/', N'_'), N'|', N'_'), N'\', N'_'), 
										N'&', N'_and_'), N'$', N'_S_'), N'#', N'_N_'), N'@', N'_a_'), N'=', N'_equal_'), N'+', N'_plus_'),
									N'*', N''), N'^', N''), N'%', N''), N'!', N''), N'?', N''), N'~', N''), 
							N'<', N''), N'>', N''),
						N'{', N''), N'}', N''),
					N'[', N''), N']', N''),
				N'(', N''), N')', N''), 128 - len(replace(replace(replace(r_l.[name], N' ', N'_'), N'(', N''), N')', N'')) - 6) + 
			N'__' + replace(replace(replace(r_l.[name], N' ', N'_'), N'(', N''), N')', N''),
			N'select		'
from		trtLanguageToCP l_cp
outer apply	(
	select		s.idfCustomizationPackage
	from		tstLocalSiteOptions lso
	inner join	tstSite s
	on			cast(s.idfsSite as nvarchar) = lso.strValue
	where		lso.strName = N'SiteID'
				and s.idfsSite <> 1 /*default site before installation*/
			) local_site
inner join	fnReference('en', 19000049 /*Language List*/) r_l
on			r_l.idfsReference = l_cp.idfsLanguage
inner join	trtBaseReference br_l
on			br_l.idfsBaseReference = l_cp.idfsLanguage
inner join	locStringNameTranslation lsnt_q
on			lsnt_q.idflBaseReference = @QueryID
			and lsnt_q.idfsLanguage = dbo.fnGetLanguageCode('en')
			and ltrim(rtrim(isnull(lsnt_q.strTextString, N''))) <> N''
where		l_cp.idfCustomizationPackage = isnull(local_site.idfCustomizationPackage, dbo.fnCustomizationPackage())



-- Define current language
declare	@idfsCurrentLanguage bigint
-- Define select text for national view associated with current language
declare	@strCurrentSelect nvarchar(MAX)
-- Define splitter between fields in select text of national view
declare	@strCurrentSplitter nvarchar(MAX)
-- Define constant text to be added to identifier fields
declare	@IDText	nvarchar(20) = N' - System ID'
-- Define constant text to be added to GIS Extended Name fields
-- NB! GIS Extended names will be commented in select text 
declare	@GISExtendedText nvarchar(20) = N' - Extended Name'

-- Define cursor for @NationalViews table
declare	LanguageCursor Cursor local read_only forward_only for
	select		nv.idfsLanguage
	from		@NationalViews nv
open LanguageCursor
fetch next from LanguageCursor into @idfsCurrentLanguage
while @@fetch_status <> -1
begin
	set @strCurrentSelect = N'select		'
	set	@strCurrentSplitter = @s
	
	-- Add non FF fields to the "select" part of national view for current language
	-- NB! GIS Extended names will be commented in select text 
		select	@strCurrentSelect = @strCurrentSelect +
				case
					when	@BinKey & 4 > 0
							and sf.strSearchFieldAlias = 'sflHC_FinalDiagnosisCode'
							and sf.idfsReferenceType is null and sf.idfsGISReferenceType is null
							and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
							and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
							and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
						then	IsNull(@strCurrentSplitter + N'AllDiagnoses.strIDC10 as [' + sf.strSearchFieldAlias + N']', N'')
					when	sf.idfsReferenceType is null and sf.idfsGISReferenceType is null
							and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
							and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
							and	(	@BinKey & 4 = 0
									or sf.strSearchFieldAlias <> 'sflHC_FinalDiagnosisCode'
								)
							and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
						then	IsNull	(
									@strCurrentSplitter + 
									replace	(
										IsNull(	case
													when	isnull(sf.strCalculatedFieldText, N'') <> N''
															and rtrim(replace(replace(sf.strCalculatedFieldText, N'	', N' '), N'
', N' ')) like N'% as ' + sf.strSearchFieldAlias collate Cyrillic_General_CI_AS
														then	left(sf.strCalculatedFieldText, dbo.fnGetLastCharIndexOfSubstringInNonTrimString(sf.strCalculatedFieldText, N' as ' + sf.strSearchFieldAlias, 0)) +
																	right(sf.strCalculatedFieldText, len(sf.strCalculatedFieldText) - dbo.fnGetLastCharIndexOfSubstringInNonTrimString(sf.strCalculatedFieldText, N' as ' + sf.strSearchFieldAlias collate Cyrillic_General_CI_AS, 0) - len(sf.strSearchFieldAlias) - 3)
													when	isnull(sf.strCalculatedFieldText, N'') <> N''
															and rtrim(replace(replace(sf.strCalculatedFieldText, N'	', N' '), N'
', N' ')) like N'% as [[]' + sf.strSearchFieldAlias + N']' collate Cyrillic_General_CI_AS
														then	left(sf.strCalculatedFieldText, dbo.fnGetLastCharIndexOfSubstringInNonTrimString(sf.strCalculatedFieldText, N' as [' + sf.strSearchFieldAlias + N']' collate Cyrillic_General_CI_AS, 0)) +
																	right(sf.strCalculatedFieldText, len(sf.strCalculatedFieldText) - dbo.fnGetLastCharIndexOfSubstringInNonTrimString(sf.strCalculatedFieldText, N' as [' + sf.strSearchFieldAlias + N']' collate Cyrillic_General_CI_AS, 0) - len(sf.strSearchFieldAlias) - 5)
													else	null
												end, 
												N'v.[' + sf.strSearchFieldAlias + N']'),
										N'{5}', 
										N'v.[' + sf.strSearchFieldAlias + N']'
											) + N' as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126) + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + ']' collate Cyrillic_General_CI_AS,
									N'')
					when	sf.idfsReferenceType is not null and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
							and	(	(	@BinKey & 4 > 0
										and sf.strSearchFieldAlias = 'sflHC_FinalDiagnosisIsZoonotic' collate Cyrillic_General_CI_AS
									)
									or	(	@BinKey & 64 > 0
											and sf.strSearchFieldAlias = 'sflVC_DiagnosisIsZoonotic' collate Cyrillic_General_CI_AS
										)
									or	(	@BinKey & 512 > 0
											and sf.strSearchFieldAlias = 'sflZD_IsZoonotic' collate Cyrillic_General_CI_AS
										)
								)
							and sf.idfsGISReferenceType is null
							and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
							and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
						then	IsNull(@strCurrentSplitter + N'(IsNull(AllDiagnoses.blnZoonotic, 0) * 10100001 + (1 - IsNull(AllDiagnoses.blnZoonotic, 0)) * 10100002) as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126 - len(@IDText)) + @IDText + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N'], 
					[ref_' + sf.strSearchFieldAlias + N'].[name] as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126) + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + ']' collate Cyrillic_General_CI_AS, N'')
					when	sf.idfsReferenceType is not null and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
							and	(	@BinKey & 4 = 0
									or sf.strSearchFieldAlias <> 'sflHC_FinalDiagnosisIsZoonotic' collate Cyrillic_General_CI_AS
								)
							and	(	@BinKey & 64 = 0
									or sf.strSearchFieldAlias <> 'sflVC_DiagnosisIsZoonotic' collate Cyrillic_General_CI_AS
								)
							and	(	@BinKey & 512 = 0
									or sf.strSearchFieldAlias <> 'sflZD_IsZoonotic' collate Cyrillic_General_CI_AS
								)
							and sf.idfsGISReferenceType is null
							and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
							and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
						then	IsNull(@strCurrentSplitter + N'v.[' + sf.strSearchFieldAlias + N'_ID] as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126 - len(@IDText)) + @IDText + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N'], 
					[ref_' + sf.strSearchFieldAlias + N'].[name] as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126) + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + ']' collate Cyrillic_General_CI_AS, N'')
					when	(sf.strLookupFunction is not null and len(ltrim(rtrim(sf.strLookupFunction))) > 0)
							and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
							and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
						then	IsNull(@strCurrentSplitter + N'v.[' + sf.strSearchFieldAlias + N'_ID] as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126 - len(@IDText)) + @IDText + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N'], 
					[ref_' + sf.strSearchFieldAlias + N'].[' + sf.strLookupFunctionNameField + '] as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126) + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N']' collate Cyrillic_General_CI_AS, N'')
					when	sf.idfsGISReferenceType is not null
							and sf.idfsReferenceType is null
							and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
							and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
							and	(sf.blnShortAddressString IS null or sf.blnShortAddressString = 0)
						then	IsNull(@strCurrentSplitter + N'v.[' + sf.strSearchFieldAlias + N'_ID] as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126 - len(@IDText)) + @IDText + + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N'], 
					--[ref_GIS_' + sf.strSearchFieldAlias + N'].[ExtendedName] as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126 - len(@GISExtendedText)) + @GISExtendedText + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N'], 
					[ref_GIS_' + sf.strSearchFieldAlias + N'].[name] as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126) + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N']' collate Cyrillic_General_CI_AS, N'')
					when	(sf.blnGeoLocationString is not null and sf.blnGeoLocationString = 1)
							and sf.idfsReferenceType is null
							and sf.idfsGISReferenceType is null
							and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
							and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
						then	IsNull(@strCurrentSplitter + N'v.[' + sf.strSearchFieldAlias + N'_ID] as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126 - len(@IDText)) + @IDText + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N'], 
					[ref_GL_' + sf.strSearchFieldAlias + N'].[name] as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126) + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N']' collate Cyrillic_General_CI_AS, N'')
					when	(sf.blnShortAddressString is not null and sf.blnShortAddressString = 1)
							and sf.idfsReferenceType is null
							and sf.idfsGISReferenceType is null
							and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
							and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
						then	IsNull(@strCurrentSplitter + N'v.[' + sf.strSearchFieldAlias + N'_ID] as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126 - len(@IDText)) + @IDText + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N'], 
					[ref_GL_' + sf.strSearchFieldAlias + N'].[strDefaultShortAddressString] as [' + left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126) + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N']' collate Cyrillic_General_CI_AS, N'')
					else		N''
				end,

					@strCurrentSplitter = N', 
					'
		from		tasQuerySearchField qsf
		inner join	tasQuerySearchObject qso
		on			qso.idfQuerySearchObject = qsf.idfQuerySearchObject
					and qso.idflQuery = @QueryID
		inner join	tasQuery q
		on			q.idflQuery = qso.idflQuery
		inner join	tasSearchField sf
		on			sf.idfsSearchField = qsf.idfsSearchField
					and sf.idfsSearchObject = qso.idfsSearchObject
					and sf.idfsSearchFieldType <> 10081003			-- FF Field
					and sf.intRowStatus = 0

		inner join	fnReference('en', 19000080) r_sf_en
		on			r_sf_en.idfsReference = sf.idfsSearchField
		left join	trtStringNameTranslation snt_sf_lng
		on			snt_sf_lng.idfsBaseReference = sf.idfsSearchField
					and snt_sf_lng.idfsLanguage = @idfsCurrentLanguage
		outer apply	(
			select	count(qsf_dupl_name.idfsSearchField) as intDuplNumber --count(cast(qsf_dupl_name.idfsSearchField as varchar(20)) + N'_' + isnull(cast(qsf_dupl_name.idfsParameter as varchar(20)), N'')) as intDuplNumber
			from	tasQuerySearchField qsf_dupl_name
			inner join	tasQuerySearchObject qso_dupl_name
			on			qso_dupl_name.idfQuerySearchObject = qsf_dupl_name.idfQuerySearchObject
						and qso_dupl_name.idflQuery = @QueryID
			inner join	tasQuery q_dupl_name
			on			q_dupl_name.idflQuery = qso_dupl_name.idflQuery
			inner join	tasSearchField sf_dupl_name
			on			sf_dupl_name.idfsSearchField = qsf_dupl_name.idfsSearchField
						and sf_dupl_name.idfsSearchObject = qso_dupl_name.idfsSearchObject
						and sf_dupl_name.idfsSearchFieldType <> 10081003			-- FF Field
						and sf_dupl_name.intRowStatus = 0

			inner join	fnReference('en', 19000080) r_sf_en_dupl_name
			on			r_sf_en_dupl_name.idfsReference = sf_dupl_name.idfsSearchField
			left join	trtStringNameTranslation snt_sf_lng_dupl_name
			on			snt_sf_lng_dupl_name.idfsBaseReference = sf_dupl_name.idfsSearchField
						and snt_sf_lng_dupl_name.idfsLanguage = @idfsCurrentLanguage
			where		

			-- Condition for the same name
(			IsNull(left(replace(rtrim(ltrim(isnull(snt_sf_lng_dupl_name.strTextString, r_sf_en_dupl_name.[name]))), N'''', N''''''), 126), N'') =
				IsNull(left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126), N'') collate Cyrillic_General_CI_AS or
			(	left(replace(rtrim(ltrim(isnull(snt_sf_lng_dupl_name.strTextString, r_sf_en_dupl_name.[name]))), N'''', N''''''), 126 - len(@IDText)) =
					left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126 - len(@IDText)) collate Cyrillic_General_CI_AS
				and (sf_dupl_name.idfsReferenceType is not null or sf_dupl_name.idfsGISReferenceType is not null or (sf_dupl_name.strLookupFunction is not null and len(ltrim(rtrim(sf_dupl_name.strLookupFunction))) > 0) or sf_dupl_name.blnGeoLocationString = 1 or sf_dupl_name.blnGeoLocationString = 1)
				and (sf.idfsReferenceType is not null or sf.idfsGISReferenceType is not null or (sf.strLookupFunction is not null and len(ltrim(rtrim(sf.strLookupFunction))) > 0) or sf.blnGeoLocationString = 1 or sf.blnGeoLocationString = 1)
			) or
			(	left(replace(rtrim(ltrim(isnull(snt_sf_lng_dupl_name.strTextString, r_sf_en_dupl_name.[name]))), N'''', N''''''), 126 - len(@GISExtendedText)) =
					left(replace(rtrim(ltrim(isnull(snt_sf_lng.strTextString, r_sf_en.[name]))), N'''', N''''''), 126 - len(@GISExtendedText)) collate Cyrillic_General_CI_AS
				and sf_dupl_name.idfsGISReferenceType is not null
				and sf.idfsGISReferenceType is not null
			)
)
			-- Condition for less Id
			and		qsf_dupl_name.idfsSearchField < qsf.idfsSearchField
					) dupl_ind

	-- Add FF fields to the "select" part  of national view for current language
	select		@strCurrentSelect = @strCurrentSelect	+ 
			case
				when	pt.idfsReferenceType is null
					then	IsNull		(	
								@strCurrentSplitter + N'v.[' + sf.strSearchFieldAlias + N'__' + 
								cast(sob.idfsFormType as varchar(20)) + N'__' + 
								cast(p.idfsParameter as varchar(20)) + N'] as [' + left(replace(rtrim(ltrim(isnull(snt_p_lng.strTextString, r_p_en.[name]))), N'''', N''''''), 126) + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N']'
								, N'') collate Cyrillic_General_CI_AS
				when	pt.idfsReferenceType is not null
					then	IsNull		(		
								@strCurrentSplitter + N'v.[' + sf.strSearchFieldAlias + N'__' + 
								cast(sob.idfsFormType as varchar(20)) + N'__' + 
								cast(p.idfsParameter as varchar(20)) + N'_ID] as [' + left(replace(rtrim(ltrim(isnull(snt_p_lng.strTextString, r_p_en.[name]))), N'''', N''''''), 126 - len(@IDText)) + @IDText + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N'], 
				[ref_' + sf.strSearchFieldAlias + N'__' + 
								cast(sob.idfsFormType as varchar(20)) + N'__' + 
								cast(p.idfsParameter as varchar(20)) + 
								N'].[name] as [' + left(replace(rtrim(ltrim(isnull(snt_p_lng.strTextString, r_p_en.[name]))), N'''', N''''''), 126) + case dupl_ind.intDuplNumber when 0 then N'' else cast(dupl_ind.intDuplNumber as nvarchar(20)) end + N']'
								, N'') collate Cyrillic_General_CI_AS
				else	N''
			end,
				@strCurrentSplitter = N', 
				'
	from		tasQuerySearchField qsf
	inner join	(
		tasQuerySearchObject qso
		inner join	tasSearchObject sob
		on			sob.idfsSearchObject = qso.idfsSearchObject
					and sob.intRowStatus = 0
		inner join	trtBaseReference br_ft
		on			br_ft.idfsBaseReference = sob.idfsFormType
					and br_ft.idfsReferenceType = 19000034		-- Form Type
					and br_ft.intRowStatus = 0
				)
	on			qso.idfQuerySearchObject = qsf.idfQuerySearchObject
				and qso.idflQuery = @QueryID
	inner join	tasSearchField sf
	on			sf.idfsSearchField = qsf.idfsSearchField
				and sf.idfsSearchObject = sob.idfsSearchObject
				and sf.idfsSearchFieldType = 10081003			-- FF Field
				and sf.intRowStatus = 0
	inner join	(
		ffParameter p
		inner join	trtBaseReference br_p
		on			br_p.idfsBaseReference = p.idfsParameter
					and br_p.intRowStatus = 0
		inner join	ffParameterType pt
		on			pt.idfsParameterType = p.idfsParameterType
					and pt.intRowStatus = 0
		inner join	trtBaseReference br_pt
		on			br_pt.idfsBaseReference = pt.idfsParameterType
					and br_pt.intRowStatus = 0
				)
	on			p.idfsParameter = qsf.idfsParameter
				and p.idfsFormType = sob.idfsFormType
				and p.intRowStatus = 0

	inner join	fnReference('en', 19000066) r_p_en
	on			r_p_en.idfsReference = p.idfsParameter
	left join	trtStringNameTranslation snt_p_lng
	on			snt_p_lng.idfsBaseReference = p.idfsParameter
				and snt_p_lng.idfsLanguage = @idfsCurrentLanguage

	outer apply	(
		select	count(qsf_dupl_name.idfQuerySearchField) as intDuplNumber --count(cast(qsf_dupl_name.idfsSearchField as varchar(20)) + N'_' + isnull(cast(qsf_dupl_name.idfsParameter as varchar(20)), N'')) as intDuplNumber
		from	tasQuerySearchField qsf_dupl_name
		inner join	(
			tasQuerySearchObject qso_dupl_name
			inner join	tasSearchObject sob_dupl_name
			on			sob_dupl_name.idfsSearchObject = qso_dupl_name.idfsSearchObject
						and sob_dupl_name.intRowStatus = 0
			inner join	trtBaseReference br_ft_dupl_name
			on			br_ft_dupl_name.idfsBaseReference = sob.idfsFormType
						and br_ft_dupl_name.idfsReferenceType = 19000034		-- Form Type
						and br_ft_dupl_name.intRowStatus = 0
					)
		on			qso_dupl_name.idfQuerySearchObject = qsf_dupl_name.idfQuerySearchObject
					and qso_dupl_name.idflQuery = @QueryID
		inner join	tasSearchField sf_dupl_name
		on			sf_dupl_name.idfsSearchField = qsf_dupl_name.idfsSearchField
					and sf_dupl_name.idfsSearchObject = sob_dupl_name.idfsSearchObject
					and sf_dupl_name.idfsSearchFieldType = 10081003			-- FF Field
					and sf_dupl_name.intRowStatus = 0
		inner join	(
			ffParameter p_dupl_name
			inner join	trtBaseReference br_p_dupl_name
			on			br_p_dupl_name.idfsBaseReference = p_dupl_name.idfsParameter
						and br_p_dupl_name.intRowStatus = 0
			inner join	ffParameterType pt_dupl_name
			on			pt_dupl_name.idfsParameterType = p_dupl_name.idfsParameterType
						and pt_dupl_name.intRowStatus = 0
			inner join	trtBaseReference br_pt_dupl_name
			on			br_pt_dupl_name.idfsBaseReference = pt_dupl_name.idfsParameterType
						and br_pt_dupl_name.intRowStatus = 0
					)
		on			p_dupl_name.idfsParameter = qsf_dupl_name.idfsParameter
					and p_dupl_name.idfsFormType = sob_dupl_name.idfsFormType
					and p_dupl_name.intRowStatus = 0

		inner join	fnReference('en', 19000066) r_p_en_dupl_name
		on			r_p_en_dupl_name.idfsReference = p_dupl_name.idfsParameter
		left join	trtStringNameTranslation snt_p_lng_dupl_name
		on			snt_p_lng_dupl_name.idfsBaseReference = p_dupl_name.idfsParameter
					and snt_p_lng_dupl_name.idfsLanguage = @idfsCurrentLanguage
		where		

		-- Condition for the same name
(			IsNull(left(replace(rtrim(ltrim(isnull(snt_p_lng_dupl_name.strTextString, r_p_en_dupl_name.[name]))), N'''', N''''''), 126), N'') =
			IsNull(left(replace(rtrim(ltrim(isnull(snt_p_lng.strTextString, r_p_en.[name]))), N'''', N''''''), 126), N'') collate Cyrillic_General_CI_AS or
		(	left(replace(rtrim(ltrim(isnull(snt_p_lng_dupl_name.strTextString, r_p_en_dupl_name.[name]))), N'''', N''''''), 126 - len(@IDText)) =
				left(replace(rtrim(ltrim(isnull(snt_p_lng.strTextString, r_p_en.[name]))), N'''', N''''''), 126 - len(@IDText)) collate Cyrillic_General_CI_AS
			and (pt_dupl_name.idfsReferenceType is not null)
			and (pt.idfsReferenceType is not null)
		)
)
		-- Condition for less Id
		and		qsf_dupl_name.idfQuerySearchField < qsf.idfQuerySearchField
				) dupl_ind

	-- Question: Is it possible to use different reference types for one search field depending on "union" part?
	-- Answer: No
	
	set	@strCurrentSelect = @strCurrentSelect + @strCurrentSplitter + N'v.[PKField]'

	update	@NationalViews
	set		strSelect = @strCurrentSelect
	where	idfsLanguage = @idfsCurrentLanguage

	fetch next from LanguageCursor into @idfsCurrentLanguage
end
close LanguageCursor
deallocate LanguageCursor 
------------------------------------------------------------------------



-- Generate "select" and "from" parts of the query
declare @select nvarchar(MAX)
set @select = N'select		'

declare @from nvarchar(MAX)
set	@from = N'from		' + @viewName + N' v
'

-- Add non FF fields to the "select" part and related lookups to the "from" part
select	@select	= @select +
		case
			when	@BinKey & 4 > 0
					and sf.strSearchFieldAlias = 'sflHC_FinalDiagnosisCode'
					and sf.idfsReferenceType is null and sf.idfsGISReferenceType is null
					and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
					and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
					and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
				then	IsNull(@s + N'AllDiagnoses.strIDC10 as [' + sf.strSearchFieldAlias + N']', N'')
			when	sf.idfsReferenceType is null and sf.idfsGISReferenceType is null
					and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
					and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
					and	(	@BinKey & 4 = 0
							or sf.strSearchFieldAlias <> 'sflHC_FinalDiagnosisCode'
						)
					and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
				then	IsNull	(
							@s + 
							replace	(
								IsNull(	sf.strCalculatedFieldText, 
										N'v.[' + sf.strSearchFieldAlias + N']'),
								N'{5}', 
								N'v.[' + sf.strSearchFieldAlias + N']'
									),
							N''	)
			when	sf.idfsReferenceType is not null and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
					and	(	(	@BinKey & 4 > 0
								and sf.strSearchFieldAlias = 'sflHC_FinalDiagnosisIsZoonotic'
							)
							or	(	@BinKey & 64 > 0
									and sf.strSearchFieldAlias = 'sflVC_DiagnosisIsZoonotic'
								)
							or	(	@BinKey & 512 > 0
									and sf.strSearchFieldAlias = 'sflZD_IsZoonotic'
								)
						)
					and sf.idfsGISReferenceType is null
					and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
					and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
				then	IsNull(@s + N'(IsNull(AllDiagnoses.blnZoonotic, 0) * 10100001 + (1 - IsNull(AllDiagnoses.blnZoonotic, 0)) * 10100002) as [' + sf.strSearchFieldAlias + N'_ID], 
			[ref_' + sf.strSearchFieldAlias + N'].[name] as [' + sf.strSearchFieldAlias + ']', N'')
			when	sf.idfsReferenceType is not null and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
					and	(	@BinKey & 4 = 0
							or sf.strSearchFieldAlias <> 'sflHC_FinalDiagnosisIsZoonotic'
						)
					and	(	@BinKey & 64 = 0
							or sf.strSearchFieldAlias <> 'sflVC_DiagnosisIsZoonotic'
						)
					and	(	@BinKey & 512 = 0
							or sf.strSearchFieldAlias <> 'sflZD_IsZoonotic'
						)
					and sf.idfsGISReferenceType is null
					and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
					and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
				then	IsNull(@s + N'v.[' + sf.strSearchFieldAlias + N'_ID], 
			[ref_' + sf.strSearchFieldAlias + N'].[name] as [' + sf.strSearchFieldAlias + ']', N'')
			when	(sf.strLookupFunction is not null and len(ltrim(rtrim(sf.strLookupFunction))) > 0)
					and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
					and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
				then	IsNull(@s + N'v.[' + sf.strSearchFieldAlias + N'_ID], 
			[ref_' + sf.strSearchFieldAlias + N'].[' + sf.strLookupFunctionNameField + '] as [' + sf.strSearchFieldAlias + ']', N'')
			when	sf.idfsGISReferenceType is not null
					and sf.idfsReferenceType is null
					and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
					and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
					and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
				then	IsNull(@s + N'v.[' + sf.strSearchFieldAlias + N'_ID], 
			[ref_GIS_' + sf.strSearchFieldAlias + N'].[ExtendedName] as [' + sf.strSearchFieldAlias + N'], 
			[ref_GIS_' + sf.strSearchFieldAlias + N'].[name] as [' + sf.strSearchFieldAlias + N'_ShortGISName]', N'')
			when	(sf.blnGeoLocationString is not null and sf.blnGeoLocationString = 1)
					and sf.idfsReferenceType is null
					and sf.idfsGISReferenceType is null
					and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
					and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
				then	IsNull(@s + N'v.[' + sf.strSearchFieldAlias + N'_ID], 
			[ref_GL_' + sf.strSearchFieldAlias + N'].[name] as [' + sf.strSearchFieldAlias + N']', N'')
			when	(sf.blnShortAddressString is not null and sf.blnShortAddressString = 1)
					and sf.idfsReferenceType is null
					and sf.idfsGISReferenceType is null
					and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
					and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
				then	IsNull(@s + N'v.[' + sf.strSearchFieldAlias + N'_ID], 
			[ref_GL_' + sf.strSearchFieldAlias + N'].[strDefaultShortAddressString] as [' + sf.strSearchFieldAlias + N']', N'')
			else		N''
		end,

		@from = @from +
		case
--			when	sf.idfsReferenceType is not null and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
--					and	(	(	@BinKey & 4 > 0
--								and sf.strSearchFieldAlias = 'sflHC_FinalDiagnosisIsZoonotic'
--							)
--							or	(	@BinKey & 64 > 0
--									and sf.strSearchFieldAlias = 'sflVC_DiagnosisIsZoonotic'
--								)
--							or	(	@BinKey & 512 > 0
--									and sf.strSearchFieldAlias = 'sflZD_IsZoonotic'
--								)
--						)
--					and sf.idfsGISReferenceType is null
--					and	(sf.blnGeoLocationString is null or sf.blnGeoLocationString = 0)
--					and	(sf.blnShortAddressString is null or sf.blnShortAddressString = 0)
--				then	IsNull	(
---- Non GIS reference table from for fields "Is Zoonotic", check-box "Add all key values..." and key field "Diagnoses" added to the query
--						N'
--left join	fnReferenceRepair(@LangID, ' + cast(sf.idfsReferenceType as varchar(20)) + N') [ref_' + sf.strSearchFieldAlias + '] 
--on			[ref_' + sf.strSearchFieldAlias + '].idfsReference = (IsNull(AllDiagnoses.blnZoonotic, 0) * 10100001 + (1 - IsNull(AllDiagnoses.blnZoonotic, 0)) * 10100002) ', 
--							N''	)
			when	(	sf.idfsReferenceType is not null
						or	sf.idfsGISReferenceType is not null
					)
					and	(	@BinKey = 0
							or	(	@BinKey > 0
									and sf.strSearchFieldAlias not in
										(	'sflHC_PatientCRRayon',
											'sflHC_PatientCRRegion',
											'sflHC_FinalDiagnosis',
--											'sflHC_FinalDiagnosisCode',
											'sflVC_FarmAddressRayon',
											'sflVC_FarmAddressRegion',
											'sflVC_Diagnosis',
											'sflZD_Region',
											'sflZD_Rayon',
											'sflZD_Diagnosis'
										)
									and	(	@BinKey & 4 = 0
											or sf.strSearchFieldAlias <> 'sflHC_FinalDiagnosisIsZoonotic'
										)
									and	(	@BinKey & 64 = 0
											or sf.strSearchFieldAlias <> 'sflVC_DiagnosisIsZoonotic'
										)
									and	(	@BinKey & 512 = 0
											or sf.strSearchFieldAlias <> 'sflZD_IsZoonotic'
										)
								)
						)
					 and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
				then	IsNull	(
-- Non GIS reference table from
						N'
left join	fnReferenceRepair(@LangID, ' + cast(sf.idfsReferenceType as varchar(20)) + N') [ref_' + sf.strSearchFieldAlias + '] 
on			[ref_' + sf.strSearchFieldAlias + '].idfsReference = v.[' + sf.strSearchFieldAlias + N'_ID] ', 
							N''	) +
						IsNull	(
-- GIS reference table from
						N'
left join	fnGisExtendedReferenceRepair(@LangID, ' + cast(sf.idfsGISReferenceType as varchar(20)) + N') ' +
						N'[ref_GIS_' + sf.strSearchFieldAlias + ']  
on			[ref_GIS_' + sf.strSearchFieldAlias + '].idfsReference = v.[' + sf.strSearchFieldAlias + N'_ID] ', 
							N''	)
			
			when	 (sf.strLookupFunction is not null and len(ltrim(rtrim(sf.strLookupFunction))) > 0)
				then	IsNull	(
-- Special lookup function from
						N'
left join	' + sf.strLookupFunction + N'(@LangID) [ref_' + sf.strSearchFieldAlias + '] 
on			[ref_' + sf.strSearchFieldAlias + '].' + sf.strLookupFunctionIdField + N' = v.[' + sf.strSearchFieldAlias + N'_ID] ', 
							N''	)
			when	(	(sf.blnGeoLocationString is not null and sf.blnGeoLocationString = 1)
						or	(sf.blnShortAddressString is not null and sf.blnShortAddressString = 1)
					)
					and	(	sf.idfsReferenceType is null
							and	sf.idfsGISReferenceType is null
							and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
						)
					and	(	@BinKey = 0
							or	(	@BinKey > 0
									and sf.strSearchFieldAlias not in
										(	'sflHC_PatientCRRayon',
											'sflHC_PatientCRRegion',
											'sflHC_FinalDiagnosis',
--											'sflHC_FinalDiagnosisCode',
											'sflVC_FarmAddressRayon',
											'sflVC_FarmAddressRegion',
											'sflVC_Diagnosis',
											'sflZD_Region',
											'sflZD_Rayon',
											'sflZD_Diagnosis'
										)
								)
						)
					and exists	(
							select	*
							from	tasFieldSourceForTable fst
							where	fst.idfsSearchField = sf.idfsSearchField
									and fst.strFieldText like N'%idfGeoLocationShared%'
								)
				then	IsNull	(
-- Geo Location Shared translation table from
						N'
left join	fnGeoLocationSharedTranslation(@LangID) [ref_GL_' + sf.strSearchFieldAlias + ']  
on			[ref_GL_' + sf.strSearchFieldAlias + '].idfGeoLocationShared = v.[' + sf.strSearchFieldAlias + N'_ID] ', 
							N''	)
							
			when	(	(sf.blnGeoLocationString is not null and sf.blnGeoLocationString = 1)
						or	(sf.blnShortAddressString is not null and sf.blnShortAddressString = 1)
					)
					and	(	sf.idfsReferenceType is null
							and	sf.idfsGISReferenceType is null
							and (sf.strLookupFunction is null or len(ltrim(rtrim(sf.strLookupFunction))) = 0)
						)
					and	(	@BinKey = 0
							or	(	@BinKey > 0
									and sf.strSearchFieldAlias not in
										(	'sflHC_PatientCRRayon',
											'sflHC_PatientCRRegion',
											'sflHC_FinalDiagnosis',
--											'sflHC_FinalDiagnosisCode',
											'sflVC_FarmAddressRayon',
											'sflVC_FarmAddressRegion',
											'sflVC_Diagnosis',
											'sflZD_Region',
											'sflZD_Rayon',
											'sflZD_Diagnosis'
										)
								)
						)
					and not exists	(
							select	*
							from	tasFieldSourceForTable fst
							where	fst.idfsSearchField = sf.idfsSearchField
									and fst.strFieldText like N'%idfGeoLocationShared%'
								)
				then	IsNull	(
-- Geo Location translation table from
						N'
left join	fnGeoLocationTranslation(@LangID) [ref_GL_' + sf.strSearchFieldAlias + ']  
on			[ref_GL_' + sf.strSearchFieldAlias + '].idfGeoLocation = v.[' + sf.strSearchFieldAlias + N'_ID] ', 
							N''	)
							
			else		N''
		end,
			@s = N', 
			'
from		tasQuerySearchField qsf
inner join	tasQuerySearchObject qso
on			qso.idfQuerySearchObject = qsf.idfQuerySearchObject
			and qso.idflQuery = @QueryID
inner join	tasQuery q
on			q.idflQuery = qso.idflQuery
inner join	tasSearchField sf
on			sf.idfsSearchField = qsf.idfsSearchField
			and sf.idfsSearchObject = qso.idfsSearchObject
			and sf.idfsSearchFieldType <> 10081003			-- FF Field
			and sf.intRowStatus = 0


-- Add FF fields to the "select" part and related lookups to the "from" part
select		@select	= @select	+ 
		case
			when	pt.idfsReferenceType is null
				then	IsNull		(	
							@s + N'v.[' + sf.strSearchFieldAlias + N'__' + 
							cast(sob.idfsFormType as varchar(20)) + N'__' + 
							cast(p.idfsParameter as varchar(20)) + N']'
							, N''	)
			when	pt.idfsReferenceType is not null
				then	IsNull		(		
							@s + N'v.[' + sf.strSearchFieldAlias + N'__' + 
							cast(sob.idfsFormType as varchar(20)) + N'__' + 
							cast(p.idfsParameter as varchar(20)) + N'_ID], 
			[ref_' + sf.strSearchFieldAlias + N'__' + 
							cast(sob.idfsFormType as varchar(20)) + N'__' + 
							cast(p.idfsParameter as varchar(20)) + 
							N'].[name] as [' + 
							sf.strSearchFieldAlias + N'__' + 
							cast(sob.idfsFormType as varchar(20)) + N'__' + 
							cast(p.idfsParameter as varchar(20)) + ']'
							, N''	)
			else	N''
		end,
			@from = @from +
		case
			when	pt.idfsReferenceType is not null
				then
					IsNull	(
						N'
left join	fnReferenceRepair(@LangID, ' + cast(pt.idfsReferenceType as varchar(20)) + N') [ref_' + 
							sf.strSearchFieldAlias + N'__' + 
							cast(sob.idfsFormType as varchar(20)) + N'__' + 
							cast(p.idfsParameter as varchar(20)) + 
							N'] 
on			[ref_' + sf.strSearchFieldAlias + N'__' + 
							cast(sob.idfsFormType as varchar(20)) + N'__' + 
							cast(p.idfsParameter as varchar(20)) + 
							N'].idfsReference = v.[' + sf.strSearchFieldAlias + N'__' + 
							cast(sob.idfsFormType as varchar(20)) + N'__' + 
							cast(p.idfsParameter as varchar(20)) + N'_ID] ', 
						N''	)
			else	N''
		end,
			@s = N', 
			'
from		tasQuerySearchField qsf
inner join	(
	tasQuerySearchObject qso
	inner join	tasSearchObject sob
	on			sob.idfsSearchObject = qso.idfsSearchObject
				and sob.intRowStatus = 0
	inner join	trtBaseReference br_ft
	on			br_ft.idfsBaseReference = sob.idfsFormType
				and br_ft.idfsReferenceType = 19000034		-- Form Type
				and br_ft.intRowStatus = 0
			)
on			qso.idfQuerySearchObject = qsf.idfQuerySearchObject
			and qso.idflQuery = @QueryID
inner join	tasSearchField sf
on			sf.idfsSearchField = qsf.idfsSearchField
			and sf.idfsSearchObject = sob.idfsSearchObject
			and sf.idfsSearchFieldType = 10081003			-- FF Field
			and sf.intRowStatus = 0
inner join	(
	ffParameter p
	inner join	trtBaseReference br_p
	on			br_p.idfsBaseReference = p.idfsParameter
				and br_p.intRowStatus = 0
	inner join	ffParameterType pt
	on			pt.idfsParameterType = p.idfsParameterType
				and pt.intRowStatus = 0
	inner join	trtBaseReference br_pt
	on			br_pt.idfsBaseReference = pt.idfsParameterType
				and br_pt.intRowStatus = 0
			)
on			p.idfsParameter = qsf.idfsParameter
			and p.idfsFormType = sob.idfsFormType
			and p.intRowStatus = 0

-- Question: Is it possible to use different reference types for one search field depending on "union" part?
-- Answer: No

-- Add full join for key references
-- Define Full Join from and where condition for key references
declare @FullJoinFrom	nvarchar(MAX)
declare @FullJoinWhere	nvarchar(MAX)

set	@FullJoinFrom = dbo.fnAsGetFullJoinFrom	(@BinKey)
set	@FullJoinWhere = dbo.fnAsGetFullJoinWhere (@BinKey)

-- Add correct full join for key references to final from text
if charindex('from', @from, 0) > 0
begin
	set @from = @from + N'

' + @FullJoinFrom
end

-- Add lookup table for (none) value to the "from" part
	if charindex('from', @from, 0) > 0
	begin
		set @from = @from + N'

--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

'
end

-- TODO: Add "where" condition
-- Generate the "where" part of the query
declare @where nvarchar(MAX)
set @where = N'
'
-- Set separator value
set	@s = N' 
			'

-- Create @whereTable table of all condition groups (conditions within one pair of brackets) 
-- that should be applied to the query with updated conditions and level
declare	@whereTable table
(				
	idfQueryConditionGroup	bigint not null primary key,
	strWhere				nvarchar(MAX) collate database_default not null,  
	strWhereInVersion5Mode	nvarchar(MAX) collate database_default not null,  
	strJoinOperator			varchar(20) collate database_default null,
	strChildJoinOperator	varchar(20) collate database_default null,
	idfSubQuery				bigint null,
	whereLevel				int not null
)

;
with	whereTable	(
			idfQueryConditionGroup,
			strWhere,
			strWhereInVersion5Mode,
			strJoinOperator,
			strChildJoinOperator,
			idfSubQuery,
			whereLevel
					)
as	(	select		qcg.idfQueryConditionGroup,
					case
						when	subquery.idflQuery is not null
								and subquery.strFunctionName like N'fn%'
								and exists	(
										select		*
										from		tasQuerySearchFieldCondition qsfc_subquery
										inner join	tasQuerySearchField qsfc_qsf_subquery
										on			qsfc_qsf_subquery.idfQuerySearchField = qsfc_subquery.idfQuerySearchField
										inner join	tasQuerySearchObject qsfc_qso_subquery 
										on			qsfc_qso_subquery.idfQuerySearchObject = qsfc_qsf_subquery.idfQuerySearchObject
													and qsfc_qso_subquery.idflQuery = subquery.idflQuery
											)
							then	'(exists (' + 
										N'select * ' +
										N'from vw' + right(subquery.strFunctionName, len(subquery.strFunctionName) - 2) + N' ' +
												N' as v_' + cast(subquery.idflQuery as nvarchar(20)) + N' ' +
										N'where (' + replace	(	so_to_so.strSubQueryJoinCondition, 
																	N'{6}', 
																	cast(subquery.idflQuery as nvarchar(20))
																) + 
												N') and ({3})))'
						when	subquery.idflQuery is not null
								and subquery.strFunctionName not like N'fn%'
								and exists	(
										select		*
										from		tasQuerySearchFieldCondition qsfc_subquery
										inner join	tasQuerySearchField qsfc_qsf_subquery
										on			qsfc_qsf_subquery.idfQuerySearchField = qsfc_subquery.idfQuerySearchField
										inner join	tasQuerySearchObject qsfc_qso_subquery 
										on			qsfc_qso_subquery.idfQuerySearchObject = qsfc_qsf_subquery.idfQuerySearchObject
													and qsfc_qso_subquery.idflQuery = subquery.idflQuery
											)
							then	'(exists (' + 
										N'select * ' +
										N'from ' + subquery.strFunctionName + N' ' +
												N' as v_' + cast(subquery.idflQuery as nvarchar(20)) + N' ' +
										N'where (' + replace	(	so_to_so.strSubQueryJoinCondition, 
																	N'{6}', 
																	cast(subquery.idflQuery as nvarchar(20))
																) + 
												N') and ({3})))'
						when	subquery.idflQuery is not null
								and subquery.strFunctionName like N'fn%'
								and not exists	(
											select		*
											from		tasQuerySearchFieldCondition qsfc_subquery
											inner join	tasQuerySearchField qsfc_qsf_subquery
											on			qsfc_qsf_subquery.idfQuerySearchField = qsfc_subquery.idfQuerySearchField
											inner join	tasQuerySearchObject qsfc_qso_subquery 
											on			qsfc_qso_subquery.idfQuerySearchObject = qsfc_qsf_subquery.idfQuerySearchObject
														and qsfc_qso_subquery.idflQuery = subquery.idflQuery
											)
							then	'(exists (' + 
										N'select * ' +
										N'from vw' + right(subquery.strFunctionName, len(subquery.strFunctionName) - 2) + N' ' +
												N' as v_' + cast(subquery.idflQuery as nvarchar(20)) + N' ' +
										N'where ' + replace	(	so_to_so.strSubQueryJoinCondition, 
																N'{6}', 
																cast(subquery.idflQuery as nvarchar(20))
															) + 
											N'))'
						when	subquery.idflQuery is not null
								and subquery.strFunctionName not like N'fn%'
								and not exists	(
											select		*
											from		tasQuerySearchFieldCondition qsfc_subquery
											inner join	tasQuerySearchField qsfc_qsf_subquery
											on			qsfc_qsf_subquery.idfQuerySearchField = qsfc_subquery.idfQuerySearchField
											inner join	tasQuerySearchObject qsfc_qso_subquery 
											on			qsfc_qso_subquery.idfQuerySearchObject = qsfc_qsf_subquery.idfQuerySearchObject
														and qsfc_qso_subquery.idflQuery = subquery.idflQuery
											)
							then	'(exists (' + 
										N'select * ' +
										N'from ' + subquery.strFunctionName + N' ' +
												N' as v_' + cast(subquery.idflQuery as nvarchar(20)) + N' ' +
										N'where ' + replace	(	so_to_so.strSubQueryJoinCondition, 
																N'{6}', 
																cast(subquery.idflQuery as nvarchar(20))
															) + 
											N'))'
						else	N'({3})'
					end	as strWhere,
					N'({3})' as strWhereInVersion5Mode,
					case
						when	qcg.blnUseNot = 1
							then	cast('and not ' as varchar(20))
						else	cast('and ' as varchar(20))
					end as strJoinOpearator,
					case	
						when	qcg.blnJoinByOr = 1
							then	'or '
						else	'and '
					end as strChildJoinOperator,
					subquery.idflQuery as idfSubQuery,
					0 as whereLevel
		from		(
			tasQueryConditionGroup qcg
			inner join	tasQuerySearchObject qso
			on			qso.idfQuerySearchObject = qcg.idfQuerySearchObject
						and qso.idflQuery = @QueryID
			left join	tasQuerySearchObject qso_subquery
				inner join	tasQuery subquery
				on			subquery.idflQuery = qso_subquery.idflQuery
				inner join	tasSearchObjectToSearchObject so_to_so
				on			so_to_so.idfsRelatedSearchObject = qso_subquery.idfsSearchObject
							and so_to_so.blnUseForSubQuery = 1
			on			qso_subquery.idfQuerySearchObject = qcg.idfSubQuerySearchObject
						and so_to_so.idfsParentSearchObject = qso.idfsSearchObject
					)
		left join	(
			tasQuerySearchFieldCondition qsfc
			left join	tasQuerySearchFieldCondition qsfc_min
			on			qsfc_min.idfQueryConditionGroup = qsfc.idfQueryConditionGroup
						and qsfc_min.idfQuerySearchFieldCondition < qsfc.idfQuerySearchFieldCondition
					)
		on			qsfc.idfQueryConditionGroup = qcg.idfQueryConditionGroup
					and qsfc_min.idfQuerySearchFieldCondition is null
		left join	(
			tasQueryConditionGroup qcg_child
			left join	tasQueryConditionGroup qcg_child_min
			on			qcg_child_min.idfParentQueryConditionGroup = qcg_child.idfParentQueryConditionGroup
						and qcg_child_min.idfQueryConditionGroup < qcg_child.idfQueryConditionGroup
					)
		on			qcg_child.idfParentQueryConditionGroup = qcg.idfQueryConditionGroup
					and qcg_child_min.idfQueryConditionGroup is null
		where		qcg.idfParentQueryConditionGroup is null
					and (	qsfc.idfQuerySearchFieldCondition is not null
							or qcg_child.idfQueryConditionGroup is not null
						)
		union all
		select		qcg.idfQueryConditionGroup,
					N'({3})' as strWhere,
					N'({3})' as strWhereInVersion5Mode,
					case
						when	qcg.blnUseNot = 1
							then	cast((whereTable.strChildJoinOperator + 'not ') as varchar(20))
						else	cast(whereTable.strChildJoinOperator as varchar(20))
					end as strJoinOpearator,
					case	
						when	qcg.blnJoinByOr = 1
							then	'or '
						else	'and '
					end as strChildJoinOperator,
					whereTable.idfSubQuery as idfSubQuery,
					whereTable.whereLevel + 1 as whereLevel
		from		(
			tasQueryConditionGroup qcg
			inner join	tasQuerySearchObject qso
			on			qso.idfQuerySearchObject = qcg.idfQuerySearchObject
----Remove for conditions of subqueries--						and qso.idflQuery = @QueryID
					)
		inner join	whereTable
		on			whereTable.idfQueryConditionGroup = qcg.idfParentQueryConditionGroup
		where		not exists	(
							select		*
							from		tasQuerySearchObject qso_subquery
							inner join	tasQuery subquery
							on			subquery.idflQuery = qso_subquery.idflQuery
							inner join	tasSearchObjectToSearchObject so_to_so
							on			so_to_so.idfsRelatedSearchObject = qso_subquery.idfsSearchObject
										and so_to_so.blnUseForSubQuery = 1
							where		qso_subquery.idfQuerySearchObject = qcg.idfSubQuerySearchObject
										and so_to_so.idfsParentSearchObject = qso.idfsSearchObject
								)
		union all
		select		qcg.idfQueryConditionGroup,
					case
						when	subquery.idflQuery is not null
								and subquery.strFunctionName like N'fn%'
								and exists	(
										select		*
										from		tasQuerySearchFieldCondition qsfc_subquery
										inner join	tasQuerySearchField qsfc_qsf_subquery
										on			qsfc_qsf_subquery.idfQuerySearchField = qsfc_subquery.idfQuerySearchField
										inner join	tasQuerySearchObject qsfc_qso_subquery 
										on			qsfc_qso_subquery.idfQuerySearchObject = qsfc_qsf_subquery.idfQuerySearchObject
													and qsfc_qso_subquery.idflQuery = subquery.idflQuery
											)
							then	'(exists (' + 
										N'select * ' +
										N'from vw' + right(subquery.strFunctionName, len(subquery.strFunctionName) - 2) + N' ' +
												N' as v_' + cast(subquery.idflQuery as nvarchar(20)) + N' ' +
										N'where (' + replace	(	so_to_so.strSubQueryJoinCondition, 
																	N'{6}', 
																	cast(subquery.idflQuery as nvarchar(20))
																) + 
												N') and ({3})))'
						when	subquery.idflQuery is not null
								and subquery.strFunctionName not like N'fn%'
								and exists	(
										select		*
										from		tasQuerySearchFieldCondition qsfc_subquery
										inner join	tasQuerySearchField qsfc_qsf_subquery
										on			qsfc_qsf_subquery.idfQuerySearchField = qsfc_subquery.idfQuerySearchField
										inner join	tasQuerySearchObject qsfc_qso_subquery 
										on			qsfc_qso_subquery.idfQuerySearchObject = qsfc_qsf_subquery.idfQuerySearchObject
													and qsfc_qso_subquery.idflQuery = subquery.idflQuery
											)
							then	'(exists (' + 
										N'select * ' +
										N'from ' + subquery.strFunctionName + N' ' +
												N' as v_' + cast(subquery.idflQuery as nvarchar(20)) + N' ' + 
										N'where (' + replace	(	so_to_so.strSubQueryJoinCondition, 
																	N'{6}', 
																	cast(subquery.idflQuery as nvarchar(20))
																) + 
												N') and ({3})))'
						when	subquery.idflQuery is not null
								and subquery.strFunctionName like N'fn%'
								and not exists	(
											select		*
											from		tasQuerySearchFieldCondition qsfc_subquery
											inner join	tasQuerySearchField qsfc_qsf_subquery
											on			qsfc_qsf_subquery.idfQuerySearchField = qsfc_subquery.idfQuerySearchField
											inner join	tasQuerySearchObject qsfc_qso_subquery 
											on			qsfc_qso_subquery.idfQuerySearchObject = qsfc_qsf_subquery.idfQuerySearchObject
														and qsfc_qso_subquery.idflQuery = subquery.idflQuery
											)
							then	'(exists (' + 
										N'select * ' +
										N'from vw' + right(subquery.strFunctionName, len(subquery.strFunctionName) - 2) + N' ' +
												N' as v_' + cast(subquery.idflQuery as nvarchar(20)) + N' ' +
										N'where ' + replace	(	so_to_so.strSubQueryJoinCondition, 
																N'{6}', 
																cast(subquery.idflQuery as nvarchar(20))
															) + 
											N'))'
						when	subquery.idflQuery is not null
								and subquery.strFunctionName not like N'fn%'
								and not exists	(
											select		*
											from		tasQuerySearchFieldCondition qsfc_subquery
											inner join	tasQuerySearchField qsfc_qsf_subquery
											on			qsfc_qsf_subquery.idfQuerySearchField = qsfc_subquery.idfQuerySearchField
											inner join	tasQuerySearchObject qsfc_qso_subquery 
											on			qsfc_qso_subquery.idfQuerySearchObject = qsfc_qsf_subquery.idfQuerySearchObject
														and qsfc_qso_subquery.idflQuery = subquery.idflQuery
											)
							then	'(exists (' + 
										N'select * ' +
										N'from ' + subquery.strFunctionName + N' ' +
												N' as v_' + cast(subquery.idflQuery as nvarchar(20)) + N' ' +
										N'where ' + replace	(	so_to_so.strSubQueryJoinCondition, 
																N'{6}', 
																cast(subquery.idflQuery as nvarchar(20))
															) + 
											N'))'
						else	N'({3})'
					end	as strWhere,
					N'({3})' as strWhereInVersion5Mode,
					case
						when	qcg.blnUseNot = 1
							then	cast((whereTable.strChildJoinOperator + 'not ') as varchar(20))
						else	cast(whereTable.strChildJoinOperator as varchar(20))
					end as strJoinOpearator,
					case	
						when	qcg.blnJoinByOr = 1
							then	'or '
						else	'and '
					end as strChildJoinOperator,
					IsNull(subquery.idflQuery, whereTable.idfSubQuery) as idfSubQuery,
					whereTable.whereLevel + 1 as whereLevel
		from		(
			tasQueryConditionGroup qcg
			inner join	tasQuerySearchObject qso
			on			qso.idfQuerySearchObject = qcg.idfQuerySearchObject
----Remove for conditions of subqueries--						and qso.idflQuery = @QueryID
			inner join	tasQuerySearchObject qso_subquery
				inner join	tasQuery subquery
				on			subquery.idflQuery = qso_subquery.idflQuery
				inner join	tasSearchObjectToSearchObject so_to_so
				on			so_to_so.idfsRelatedSearchObject = qso_subquery.idfsSearchObject
							and so_to_so.blnUseForSubQuery = 1
			on			qso_subquery.idfQuerySearchObject = qcg.idfSubQuerySearchObject
						and so_to_so.idfsParentSearchObject = qso.idfsSearchObject
					)
		inner join	whereTable
		on			whereTable.idfQueryConditionGroup = qcg.idfParentQueryConditionGroup
	)


insert into	@whereTable
(				
	idfQueryConditionGroup,
	strWhere,
	strWhereInVersion5Mode,
	strJoinOperator,
	strChildJoinOperator,
	idfSubQuery,
	whereLevel
)
select	wTRec.idfQueryConditionGroup,
		wTRec.strWhere,
		wTRec.strWhereInVersion5Mode,
		wTRec.strJoinOperator,
		wTRec.strChildJoinOperator,
		wTRec.idfSubQuery,
		wTRec.whereLevel
from	whereTable wTRec

-- Remove join operator before the first condition related to search object
update		wt
set			wt.strJoinOperator = 
			case
				when	(len(wt.strJoinOperator) >= 4)
						and (substring(wt.strJoinOperator, len(wt.strJoinOperator) - 4, 3) = 'not')
					then	'not '
				else	''
			end
from		@whereTable wt
left join	@whereTable wt_min
on			wt_min.whereLevel = wt.whereLevel
			and wt_min.idfQueryConditionGroup < wt.idfQueryConditionGroup
where		wt.whereLevel = 0
			and wt_min.idfQueryConditionGroup is null


-- Update where condititions for bracket groups

-- Define current bracket group
declare	@idfQueryConditionGroup bigint
-- Define join operator for child bracket groups and conditions of current bracket group 
declare	@strChildJoinOperator varchar(20)
-- Define correct join operator for child conditions of current bracket group 
-- (with removed join operator for the first child condition or bracket group in the current bracket group)
declare	@strJoin varchar(20)
-- Define where condition for current bracket group
declare	@strWhere nvarchar(MAX)
-- Define where condition in version 5 mode for current bracket group
declare	@strWhereInVersion5Mode nvarchar(MAX)
-- Define subquery Id for current bracket group
declare	@idfSubQuery nvarchar(MAX)

-- Define cursor for @whereTable table
declare	TableCursor Cursor local read_only forward_only for
	select		wt.idfQueryConditionGroup, wt.strChildJoinOperator, wt.idfSubQuery
	from		@whereTable wt
open TableCursor
fetch next from TableCursor into @idfQueryConditionGroup, @strChildJoinOperator, @idfSubQuery
while @@fetch_status <> -1
begin
	set	@strWhere = ''
	set	@strWhereInVersion5Mode = ''
	set	@strJoin = ''
	if	(len(@strChildJoinOperator) >= 4)
		and (substring(@strChildJoinOperator, len(@strChildJoinOperator) - 4, 3) = 'not')
		set @strJoin = 'not '

	select		@strWhere = @strWhere + @strJoin +
				dbo.fnAsGetSearchCondition
					(	IsNull(p.idfsParameterType, sf.idfsSearchFieldType),
						IsNull(pt.idfsReferenceType, sf.idfsReferenceType),
						sf.idfsGISReferenceType,
						sf.strLookupFunction,
						replace	(
							replace	(
								IsNull(	case
											when	isnull(sf.strCalculatedFieldText, N'') <> N''
--TODO: remove for where - start
--													and rtrim(replace(replace(sf.strCalculatedFieldText, N'	', N' '), N'
--', N' ')) like N'% as ' + sf.strSearchFieldAlias
--												then	left(sf.strCalculatedFieldText, dbo.fnGetLastCharIndexOfSubstringInNonTrimString(sf.strCalculatedFieldText, N' as ' + sf.strSearchFieldAlias, 0)) +
--															right(sf.strCalculatedFieldText, len(sf.strCalculatedFieldText) - dbo.fnGetLastCharIndexOfSubstringInNonTrimString(sf.strCalculatedFieldText, N' as ' + sf.strSearchFieldAlias, 0) - len(sf.strSearchFieldAlias) - 3)
--											when	isnull(sf.strCalculatedFieldText, N'') <> N''
--													and rtrim(replace(replace(sf.strCalculatedFieldText, N'	', N' '), N'
--', N' ')) like N'% as [[]' + sf.strSearchFieldAlias + N']'
--												then	left(sf.strCalculatedFieldText, dbo.fnGetLastCharIndexOfSubstringInNonTrimString(sf.strCalculatedFieldText, N' as [' + sf.strSearchFieldAlias + N']', 0)) +
--															right(sf.strCalculatedFieldText, len(sf.strCalculatedFieldText) - dbo.fnGetLastCharIndexOfSubstringInNonTrimString(sf.strCalculatedFieldText, N' as [' + sf.strSearchFieldAlias + N']', 0) - len(sf.strSearchFieldAlias) - 5)
--TODO: remove for where - end
												then N'[' + sf.strSearchFieldAlias + N']'
											else	null
										end, 
										N'v.[' + sf.strSearchFieldAlias +	
										IsNull	(	N'__' + cast(sob.idfsFormType as varchar(20)) + 
													N'__' + cast(p.idfsParameter as varchar(20)), 
													N''
												) + 
										N']'),
								N'{5}', 
								N'v' + IsNull(N'_' + cast(@idfSubQuery as nvarchar(20)), N'') + N'.[' + sf.strSearchFieldAlias + N']'
									),
							N'v.',
							N'v' + IsNull(N'_' + cast(@idfSubQuery as nvarchar(20)), N'') + N'.'
								),
						qsfc.strOperator,
						qsfc.intOperatorType,
						qsfc.blnUseNot,
						qsfc.varValue
					),
				@strWhereInVersion5Mode = @strWhereInVersion5Mode + @strJoin +
				dbo.fnAsGetSearchCondition
					(	IsNull(p.idfsParameterType, sf.idfsSearchFieldType),
						IsNull(pt.idfsReferenceType, sf.idfsReferenceType),
						sf.idfsGISReferenceType,
						sf.strLookupFunction,
						replace	(
							IsNull(	
--TODO: remove for where - start
--									sf.strCalculatedFieldText,
--TODO: remove for where - end
									case
											when	isnull(sf.strCalculatedFieldText, N'') <> N''
												then N'[' + sf.strSearchFieldAlias + N']'
											else	null
									end,											 
									N'v.[' + sf.strSearchFieldAlias +	
									IsNull	(	N'__' + cast(sob.idfsFormType as varchar(20)) + 
												N'__' + cast(p.idfsParameter as varchar(20)), 
												N''
											) + 
									N']'),
							N'{5}', 
							N'v.[' + sf.strSearchFieldAlias + N']'
								),
						qsfc.strOperator,
						qsfc.intOperatorType,
						qsfc.blnUseNot,
						qsfc.varValue
					),@strJoin = @strChildJoinOperator
	from		tasQuerySearchFieldCondition qsfc
	inner join	(
		tasQuerySearchField qsf
		inner join	tasSearchField sf
		on			sf.idfsSearchField = qsf.idfsSearchField
					and sf.intRowStatus = 0
				)
	on			qsf.idfQuerySearchField = qsfc.idfQuerySearchField
	inner join	(
		tasQuerySearchObject qso
		inner join	tasSearchObject sob
		on			sob.idfsSearchObject = qso.idfsSearchObject
					and sob.intRowStatus = 0
		left join	trtBaseReference br_ft
		on			br_ft.idfsBaseReference = sob.idfsFormType
					and br_ft.idfsReferenceType = 19000034		-- Form Type
					and br_ft.intRowStatus = 0
				)
	on			qso.idfQuerySearchObject = qsf.idfQuerySearchObject
	left join	(
		ffParameter p
		inner join	trtBaseReference br_p
		on			br_p.idfsBaseReference = p.idfsParameter
					and br_p.intRowStatus = 0
		inner join	ffParameterType pt
		on			pt.idfsParameterType = p.idfsParameterType
					and pt.intRowStatus = 0
		inner join	trtBaseReference br_pt
		on			br_pt.idfsBaseReference = pt.idfsParameterType
					and br_pt.intRowStatus = 0
				)
	on			p.idfsParameter = qsf.idfsParameter
				and p.idfsFormType = sob.idfsFormType
				and p.intRowStatus = 0
	where		qsfc.idfQueryConditionGroup = @idfQueryConditionGroup

	update	wt
	set		wt.strWhere = replace(wt.strWhere, '{3}', @strWhere + '{3}'),
			wt.strWhereInVersion5Mode = replace(wt.strWhereInVersion5Mode, '{3}', @strWhereInVersion5Mode + '{3}')
	from	@whereTable wt
	where	wt.idfQueryConditionGroup = @idfQueryConditionGroup

	fetch next from TableCursor into @idfQueryConditionGroup, @strChildJoinOperator, @idfSubQuery
end
close TableCursor
deallocate TableCursor 


-- Remove join operator before the first child bracket group of current bracket group
-- TODO: check for first "exists" where condition group
update		wt
set			wt.strJoinOperator =
			case
				when	(len(wt.strJoinOperator) >= 4) 
						and (substring(wt.strJoinOperator, len(wt.strJoinOperator) - 4, 3) = 'not')
					then	'not '
				else		''
			end
from		tasQueryConditionGroup qcg
inner join	@whereTable wt
on			wt.idfQueryConditionGroup = qcg.idfQueryConditionGroup
left join	(
	tasQueryConditionGroup qcg_min
	inner join	@whereTable wt_min
	on			wt_min.idfQueryConditionGroup = qcg_min.idfQueryConditionGroup
			)
on			IsNull(qcg_min.idfParentQueryConditionGroup, -100) = IsNull(qcg.idfParentQueryConditionGroup, -100)
			and qcg_min.idfQueryConditionGroup < qcg.idfQueryConditionGroup
left join	tasQuerySearchFieldCondition qsfc
on			qsfc.idfQueryConditionGroup = IsNull(qcg.idfParentQueryConditionGroup, -100)
where		qcg_min.idfQueryConditionGroup is null
			and qsfc.idfQuerySearchFieldCondition is null



-- Create @finalWhereTable table of all bracket groups that should be included to the query 
-- with final where condition (including child bracket group conditions) and level
declare	@finalWhereTable table
(	idfQueryConditionGroup	bigint not null primary key,
	strWhere				nvarchar(MAX) collate database_default not null,
	strWhereInVersion5Mode	nvarchar(MAX) collate database_default not null,
	strJoinOperator			varchar(20) collate database_default not null,
	whereLevel				int not null
)

-- Select maximum level of from
declare	@whereLevel	int
set	@whereLevel = -2
select	@whereLevel = max(wt.whereLevel) - 1
from	@whereTable wt

-- Add group brackets with their where conditions of maximum level
insert into	@finalWhereTable
(	idfQueryConditionGroup,
	strWhere, 
	strWhereInVersion5Mode,
	strJoinOperator,
	whereLevel
)
select	wt.idfQueryConditionGroup,
		replace(wt.strWhere, '{3}', ''),
		replace(wt.strWhereInVersion5Mode, '{3}', ''),
		wt.strJoinOperator,
		wt.whereLevel
from	@whereTable wt
where	whereLevel = @whereLevel + 1

-- Define current final where condition (including child where conditions)
declare	@strCurFinalWhere	nvarchar(MAX)
-- Define current final where condition in version 5 mode (including child where conditions)
declare	@strCurFinalWhereInVersion5Mode	nvarchar(MAX)
-- Define join operator for current bracket group
declare	@strJoinOperator	nvarchar(20)

-- Add bracket groups with final where conditions of all levels ordered by their level
while @whereLevel >= 0
begin
	-- Define cursor for @whereTable table with current level
	declare	TableCursor	cursor local read_only forward_only for
		select	wt.idfQueryConditionGroup, 
				wt.strWhere,
				wt.strWhereInVersion5Mode,
				wt.strJoinOperator,
				wt.strChildJoinOperator
		from	@whereTable wt
		where	wt.whereLevel = @whereLevel
	open TableCursor
	fetch next from	TableCursor into
		@idfQueryConditionGroup, @strWhere, @strWhereInVersion5Mode, @strJoinOperator, @strChildJoinOperator

	while @@fetch_status <> -1
	begin
		set	@strCurFinalWhere = @strWhere
		set	@strCurFinalWhereInVersion5Mode = @strWhereInVersion5Mode

		-- TODO: Check if it is needed
		------ Remove join operator before the first child condition or bracket group of current bracket group
		------ TODO: check for first "exists" where condition
		----if @strWhereInVersion5Mode = '({3})'
		----begin
		----	if	(len(@strJoinOperator) >= 4) 
		----		and (substring(@strJoinOperator, len(@strJoinOperator) - 4, 3) = 'not')
		----		set	@strJoinOperator = 'not '
		----	else
		----		set	@strJoinOperator = ''
		
		
		----	update		wtFin_child
		----	set			wtFin_child.strJoinOperator =
		----				case
		----					when	(len(wtFin_child.strJoinOperator) >= 4) 
		----							and (substring(wtFin_child.strJoinOperator, len(wtFin_child.strJoinOperator) - 4, 3) = 'not')
		----						then	'not '
		----					else		''
		----				end
		----	from		tasQueryConditionGroup qcg
		----	inner join	@finalWhereTable wtFin_child
		----	on			wtFin_child.idfQueryConditionGroup = qcg.idfQueryConditionGroup
		----	left join	(
		----		tasQueryConditionGroup qcg_min
		----		inner join	@finalWhereTable wtFin_child_min
		----		on			wtFin_child_min.idfQueryConditionGroup = qcg_min.idfQueryConditionGroup
		----				)
		----	on			qcg_min.idfParentQueryConditionGroup = qcg.idfParentQueryConditionGroup
		----				and qcg_min.idfQueryConditionGroup < qcg.idfQueryConditionGroup
		----	where		qcg.idfParentQueryConditionGroup = @idfQueryConditionGroup
		----				and qcg_min.idfQueryConditionGroup is NULL
		----end

		-- Generate final where condition (@strCurFinalWhere) for current bracket group
		select		@strCurFinalWhere = replace(@strCurFinalWhere, '{3}', wtFin_child.strJoinOperator + wtFin_child.strWhere + '{3}')
					
		from		tasQueryConditionGroup qcg
		inner join	@finalWhereTable wtFin_child
		on			wtFin_child.idfQueryConditionGroup = qcg.idfQueryConditionGroup
		where		qcg.idfParentQueryConditionGroup = @idfQueryConditionGroup
		order by	qcg.idfQueryConditionGroup

		-- Generate final where condition in version 5 mode (@strCurFinalWhereInVersion5Mode) for current bracket group
		select		@strCurFinalWhereInVersion5Mode = 
						replace(@strCurFinalWhereInVersion5Mode, 
								'{3}', 
								wtFin_child.strJoinOperator + wtFin_child.strWhereInVersion5Mode + '{3}')
					
		from		tasQueryConditionGroup qcg
		inner join	@finalWhereTable wtFin_child
		on			wtFin_child.idfQueryConditionGroup = qcg.idfQueryConditionGroup
		where		qcg.idfParentQueryConditionGroup = @idfQueryConditionGroup
		order by	qcg.idfQueryConditionGroup


		-- Add generated values to @finalWhereTable
		insert into	@finalWhereTable
		(	idfQueryConditionGroup,
			strWhere,
			strWhereInVersion5Mode,
			strJoinOperator,
			whereLevel
		)
		values
		(
			@idfQueryConditionGroup,
			replace(@strCurFinalWhere, '{3}', ''),
			replace(@strCurFinalWhereInVersion5Mode, '{3}', ''),
			@strJoinOperator,
			@whereLevel
		)

		fetch next from TableCursor into 
			@idfQueryConditionGroup, @strWhere, @strWhereInVersion5Mode, @strJoinOperator, @strChildJoinOperator
	end
	close TableCursor
	deallocate TableCursor 

	set @whereLevel = @whereLevel - 1
end


-- Generate final where text
select		@where = @where + @s + wtFin.strJoinOperator + replace(wtFin.strWhere, '{3}', '')
from		@finalWhereTable wtFin
where		wtFin.whereLevel = 0
order by	wtFin.strJoinOperator, wtFin.strWhere



-- Add Mandatory Report Type filter to where condition if it is not empty
if (len(rtrim(ltrim(@where))) > 10) and (len(rtrim(ltrim(@ReportTypeFilter))) > 10)
	set @where =	@where + N' 
					and ' + @ReportTypeFilter


else	if (len(rtrim(ltrim(IsNull(@where, N'')))) <= 10)
	set @where = @ReportTypeFilter


-- Add where condition for key values using OR operator

-- Define additional condition in case the check-box "Add all reference values" is selected 
-- and key fields are included in the query. 
declare	@FullJoinCondition	nvarchar(500)
set	@FullJoinCondition = N''

if @BinKey > 0
begin

	set	@FullJoinCondition = N'(v.[PKField] is null) '

	if	(len(rtrim(ltrim(@FullJoinWhere))) > 10)
	begin
		if	(len(rtrim(ltrim(@where))) > 10)
		begin
			set	@FullJoinWhere = N'
				and	(	(v.[PKField] is not null)	
						or	(	(v.[PKField] is null)
								and	(
' + @FullJoinWhere + N'
									)
							)
					)' 
		end
		else begin
			set	@FullJoinWhere = N'
				(	(v.[PKField] is not null)	
					or	(	(v.[PKField] is null)
							and	(
' + @FullJoinWhere + N'
								)
						)
				)' 
		end
	end
	else	
		set	@FullJoinWhere = N''

	if	(len(rtrim(ltrim(@FullJoinCondition))) > 10)
	begin
		if	(len(rtrim(ltrim(@where))) > 10)
			set @where = N'
			(
			' + @where + N'
				)	or	' + @FullJoinCondition
	end
	

end

-- Add the word "where" to where condition if it is not empty
if (len(rtrim(ltrim(@where))) > 10)
	set @where = N'where		(
' + @where + N'
			) ' + @FullJoinWhere

else if (len(rtrim(ltrim(@FullJoinWhere))) > 10)
	set @where = N'where		
' + @FullJoinWhere + N'
			 ' 
else
	set	@where = N''

-- Drop and create views for sub-queries
declare	SubQueryCursor	cursor local read_only forward_only for
	select distinct
				wt.idfSubQuery
	from		@whereTable wt
	where		wt.idfSubQuery is not null
	order by	wt.idfSubQuery
open SubQueryCursor
fetch next from	SubQueryCursor into @idfSubQuery

while @@fetch_status <> -1
begin
	
	exec spAsQueryFunction_Post @idfSubQuery
	
	fetch next from SubQueryCursor into @idfSubQuery
end
close SubQueryCursor
deallocate SubQueryCursor 


-- Drop and create query function
-- set separator value
set	@s = N' 
'

set @sqlCmd = N'
SET QUOTED_IDENTIFIER ON 
'
exec sp_executesql @sqlCmd

set @sqlCmd = N'
SET ANSI_NULLS ON 
'
exec sp_executesql @sqlCmd
set @sqlCmd = N'

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N''[dbo].[' + @functionName + N']'') AND Type in (N''FN'', N''IF'', N''TF'', N''FS'', N''FT''))
DROP FUNCTION [dbo].[' + @functionName + N']
'
exec sp_executesql @sqlCmd

set @sqlCmd = N'

CREATE FUNCTION [dbo].[' + @functionName + N']
(
@LangID	as nvarchar(50)
)
returns table
as
return
' + @select + @s + @from + @s + @where + N'

'
exec sp_executesql @sqlCmd
--print substring(@sqlCmd, 0, 4000)
--print substring(@sqlCmd, 4000, 4000)
--print substring(@sqlCmd, 8000, 4000)
--print substring(@sqlCmd, 12000, 4000)
--print substring(@sqlCmd, 16000, 4000)
--print substring(@sqlCmd, 20000, 4000)
--print substring(@sqlCmd, 24000, 4000)
--print substring(@sqlCmd, 28000, 4000)
--print substring(@sqlCmd, 32000, 4000)

set @sqlCmd = N'
SET QUOTED_IDENTIFIER OFF 
'
exec sp_executesql @sqlCmd

set @sqlCmd = N'
SET ANSI_NULLS ON 
'
exec sp_executesql @sqlCmd


---------------------------------------------------------------------
-- Generate national views for root queries

-- Define name of current national view
declare	@CurrentNationalViewName	nvarchar(200)
-- Define code of current language
declare	@CurrentLanguageCode		nvarchar(50)

-- Define cursor for @NationalViews table
declare	LanguageCursor Cursor local read_only forward_only for
	select		nv.idfsLanguage, nv.strLanguageCode, nv.strNationalViewName, nv.strSelect
	from		@NationalViews nv
open LanguageCursor
fetch next from LanguageCursor into @idfsCurrentLanguage, @CurrentLanguageCode, @CurrentNationalViewName, @strCurrentSelect
while @@fetch_status <> -1
begin

	-- set separator value
	set	@s = N' 
	'

	-- Drop and create query national view
	
	set @sqlCmd = N'
	SET QUOTED_IDENTIFIER ON 
	'
	exec sp_executesql @sqlCmd

	set @sqlCmd = N'
	SET ANSI_NULLS ON 
	'
	exec sp_executesql @sqlCmd
	set @sqlCmd = N'

	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N''[dbo].[' + @CurrentNationalViewName + N']'') AND Type = N''V'')
	DROP VIEW [dbo].[' + @CurrentNationalViewName + N']
	'
	exec sp_executesql @sqlCmd

	set @sqlCmd = N'

	CREATE VIEW [dbo].[' + @CurrentNationalViewName + N']
	as
	' + replace(@strCurrentSelect, N'@LangID', N'''' + replace(@CurrentLanguageCode, N'''', N'''''') + N'''') + @s + 
		replace(@from, N'@LangID', N'''' + replace(@CurrentLanguageCode, N'''', N'''''') + N'''') + @s + 
		replace(@where, N'@LangID', N'''' + replace(@CurrentLanguageCode, N'''', N'''''') + N'''') + N'

	'
	exec sp_executesql @sqlCmd 
	--print substring(@sqlCmd, 0, 4000)
	--print substring(@sqlCmd, 4000, 4000)
	--print substring(@sqlCmd, 8000, 4000)
	--print substring(@sqlCmd, 12000, 4000)
	--print substring(@sqlCmd, 16000, 4000)
	--print substring(@sqlCmd, 20000, 4000)
	--print substring(@sqlCmd, 24000, 4000)
	--print substring(@sqlCmd, 28000, 4000)
	--print substring(@sqlCmd, 32000, 4000)
	--print substring(@sqlCmd, 36000, 4000)
	--print substring(@sqlCmd, 40000, 4000)
	--print substring(@sqlCmd, 44000, 4000)
	--print substring(@sqlCmd, 48000, 4000)
	--print substring(@sqlCmd, 52000, 4000)
	--print substring(@sqlCmd, 56000, 4000)
	--print substring(@sqlCmd, 60000, 4000)
	--print substring(@sqlCmd, 64000, 4000)
	--print substring(@sqlCmd, 72000, 4000)
	--print substring(@sqlCmd, 76000, 4000)


	set @sqlCmd = N'
	SET QUOTED_IDENTIFIER OFF 
	'
	exec sp_executesql @sqlCmd

	set @sqlCmd = N'
	SET ANSI_NULLS ON 
	'
	exec sp_executesql @sqlCmd

	fetch next from LanguageCursor into @idfsCurrentLanguage, @CurrentLanguageCode, @CurrentNationalViewName, @strCurrentSelect
end
close LanguageCursor
deallocate LanguageCursor 
------------------------------------------------------------------------


end

end

end
GO
PRINT N'Altering Procedure [dbo].[spAsQuerySearchField_Post]...';


GO



--##SUMMARY This procedure saves changes of specified query search field 
--##SUMMARY (including creation and deletion (in case of incorrect parameters) of the object).

--##REMARKS Author: Mirnaya O.
--##REMARKS Create date: 20.04.2010

--##REMARKS UPDATED BY: Vorobiev E.
--##REMARKS Date: 11.11.2011

--##RETURNS Don't use

/*
--Example of a call of procedure:

declare	@idfQuerySearchField	bigint
declare	@idfQuerySearchObject	bigint
declare	@idfsSearchField		bigint
declare	@blnShow				bit
declare	@idfsParameter			bigint

execute	spAsQuerySearchField_Post
		 @idfQuerySearchField output
		,@idfQuerySearchObject
		,@idfsSearchField
		,@blnShow
		,@idfsParameter

*/ 


ALTER procedure	[dbo].[spAsQuerySearchField_Post]
(
	@idfQuerySearchField	bigint output,
	@idfQuerySearchObject	bigint,
	@idfsSearchField		bigint,
	@blnShow				bit = null,
	@idfsParameter			bigint = null
)
as

if	not exists	(
		select	*
		from	tasQuerySearchObject
		where	idfQuerySearchObject = @idfQuerySearchObject
				)
	or not exists	(
			select		*
			from		tasSearchField sf
			inner join	trtBaseReference br_sf
			on			br_sf.idfsBaseReference = sf.idfsSearchField
						and br_sf.intRowStatus = 0
			where		sf.idfsSearchField = @idfsSearchField
					)
	or	(	@idfsParameter is not null 
			and not exists	(
						select		*
						from		ffParameter p
						inner join	trtBaseReference br_p
						on			br_p.idfsBaseReference = p.idfsParameter
									and br_p.intRowStatus = 0
						where		p.idfsParameter = @idfsParameter
									and p.intRowStatus = 0
							)
		)
begin
	delete from	tasQuerySearchFieldCondition
	where		idfQuerySearchField = @idfQuerySearchField

	delete		lsf_date
	from		tasLayoutSearchField lsf_date
	inner join	tasLayoutSearchField lsf
	on			lsf.idfLayoutSearchField = lsf_date.idfDateLayoutSearchField
	where		lsf.idfQuerySearchField = @idfQuerySearchField

	--delete		lsf_denominator
	--from		tasLayoutSearchField lsf_denominator
	--inner join	tasLayoutSearchField lsf
	--on			lsf.idfLayoutSearchField = lsf_denominator.idfDenominatorQuerySearchField
	--where		lsf.idfQuerySearchField = @idfQuerySearchField

	delete		lsf_unit
	from		tasLayoutSearchField lsf_unit
	inner join	tasLayoutSearchField lsf
	on			lsf.idfLayoutSearchField = lsf_unit.idfUnitLayoutSearchField
	where		lsf.idfQuerySearchField = @idfQuerySearchField

	delete from	tasLayoutSearchField
	where		idfQuerySearchField = @idfQuerySearchField

	delete from	tasQuerySearchField
	where		idfQuerySearchField = @idfQuerySearchField

	set	@idfQuerySearchField = -1
end
else begin
	if	@idfsParameter is not null 
		and exists	(
				select	*
				from	tasQuerySearchField
				where	idfQuerySearchObject = @idfQuerySearchObject
						and	idfsSearchField = @idfsSearchField
						and idfsParameter = @idfsParameter
					)
	begin
		select	@idfQuerySearchField = idfQuerySearchField
		from	tasQuerySearchField
		where	idfQuerySearchObject = @idfQuerySearchObject
				and	idfsSearchField = @idfsSearchField
				and idfsParameter = @idfsParameter
	end

	if exists	(
		select	*
		from	tasQuerySearchField
		where	idfQuerySearchField = @idfQuerySearchField
				)
	begin
		update	tasQuerySearchField
		set		idfQuerySearchObject = @idfQuerySearchObject,
				idfsSearchField = @idfsSearchField,
				blnShow = @blnShow,
				idfsParameter = @idfsParameter
		where	idfQuerySearchField = @idfQuerySearchField
	end
	else begin
		execute spsysGetNewID	@idfQuerySearchField output

		insert into	tasQuerySearchField
		(
			idfQuerySearchField,
			idfQuerySearchObject,
			idfsSearchField,
			blnShow,
			idfsParameter
		)
		values
		(
			@idfQuerySearchField,
			@idfQuerySearchObject,
			@idfsSearchField,
			@blnShow,
			@idfsParameter
		)
	end
end

return 0
GO
PRINT N'Altering Procedure [dbo].[spAsQuerySelectLookup]...';


GO


--##SUMMARY select queries for analytical module

--##REMARKS Author: Vasilyev I.
--##REMARKS Create date: 12.01.2010

--##RETURNS Don't use

/*
--Example of a call of procedure:

exec spAsQuerySelectLookup 'ru'
*/ 
 
ALTER PROCEDURE [dbo].[spAsQuerySelectLookup]
	@LangID	as nvarchar(50),
	@QueryID	as bigint = null
AS
BEGIN
	select		 q.idflQuery
				,q.idfsGlobalQuery
				,refQuery.strEnglishName	as DefQueryName
				,refQuery.strName			as QueryName
				,q.strFunctionName			as strFunctionName
				,refDescription.strName		as strDescription
				,refDescription.strEnglishName		as strEnglishDescription
				,q.blnReadOnly				as blnReadOnly
				,isnull(brQuery.intOrder,0)	as intOrder
				,qso_counter.blnSingleSearchObject	
				,case
					when	qsoOutbreak.idfQuerySearchObject is not null
						then	1
					else	0
				 end							as blnIsOutbreak
				,case
					when	qsoHumanCase.idfQuerySearchObject is not null
							or qsoHCSample.idfQuerySearchObject is not null
							or qsoHCTest.idfQuerySearchObject is not null
						then	1
					else	0
				 end							as blnIsHumanCase
				,case
					when	qsoVetCase.idfQuerySearchObject is not null
							or qsoVCSample.idfQuerySearchObject is not null
							or qsoVCTest.idfQuerySearchObject is not null
						then	1
					else	0
				 end							as blnIsVetCase
				,case
					when	qsoASCampaign.idfQuerySearchObject is not null
						then	1
					else	0
				 end							as blnIsASCampaign
				,case
					when	qsoASSession.idfQuerySearchObject is not null
							or qsoASSample.idfQuerySearchObject is not null
							or qsoASTest.idfQuerySearchObject is not null
						then	1
					else	0
				 end							as blnIsASSession
				,case
					when	qsoHCSample.idfQuerySearchObject is not null
							or qsoVCSample.idfQuerySearchObject is not null
							or qsoASSample.idfQuerySearchObject is not null
						then	1
					else	0
				 end							as blnIsSample
				,case
					when	qsoHCTest.idfQuerySearchObject is not null
							or qsoVCTest.idfQuerySearchObject is not null
							or qsoASTest.idfQuerySearchObject is not null
						then	1
					else	0
				 end							as blnIsTest
				,br_so_root.intHACode
				,qso_root.idfsSearchObject

		  from	dbo.tasQuery						as q
	inner join	dbo.fnLocalReference(@LangID)	as refQuery
			on	refQuery.idflBaseReference = q.idflQuery
	 left join	dbo.fnLocalReference(@LangID)	as refDescription
			on	q.idflDescription = refDescription.idflBaseReference

	left join	(
					select	idflQuery, 
							case COUNT(idfQuerySearchObject) 
								when 1 then 1
								else 0 
							end				 as blnSingleSearchObject
					from	tasQuerySearchObject qso_root
					inner join	trtBaseReference br_so_root
					on	br_so_root.idfsBaseReference = qso_root.idfsSearchObject
					group by idflQuery
				) as qso_counter
				on	qso_counter.idflQuery = q.idflQuery

	 left join	tasQuerySearchObject qso_root
		inner join	trtBaseReference br_so_root
		on			br_so_root.idfsBaseReference = qso_root.idfsSearchObject
			on	qso_root.idflQuery = q.idflQuery
				and qso_root.idfParentQuerySearchObject is null


	 left join	dbo.tasQuerySearchObject			as qsoOutbreak
		inner join	fnReference('en', 19000082)		as ref_sob_Outbreak		-- rftSearchObject
				on	ref_sob_Outbreak.idfsReference = qsoOutbreak.idfsSearchObject
					and ref_sob_Outbreak.[name] = N'Outbreak'
			on  q.idflQuery = qsoOutbreak.idflQuery
	 left join	dbo.tasQuerySearchObject			as qsoHumanCase
		inner join	fnReference('en', 19000082)		as ref_sob_HumanCase	-- rftSearchObject
				on	ref_sob_HumanCase.idfsReference = qsoHumanCase.idfsSearchObject
					and ref_sob_HumanCase.[name] = N'Human Case'
			on  q.idflQuery = qsoHumanCase.idflQuery
	 left join	dbo.tasQuerySearchObject			as qsoVetCase
		inner join	fnReference('en', 19000082)		as ref_sob_VetCase	-- rftSearchObject
				on	ref_sob_VetCase.idfsReference = qsoVetCase.idfsSearchObject
					and ref_sob_VetCase.[name] = N'Vet Case'
			on  q.idflQuery = qsoVetCase.idflQuery
	 left join	dbo.tasQuerySearchObject			as qsoASCampaign
		inner join	fnReference('en', 19000082)		as ref_sob_ASCampaign	-- rftSearchObject
				on	ref_sob_ASCampaign.idfsReference = qsoASCampaign.idfsSearchObject
					and ref_sob_ASCampaign.[name] = N'Active Surveillance Campaign'
			on  q.idflQuery = qsoASCampaign.idflQuery
	 left join	dbo.tasQuerySearchObject			as qsoASSession
		inner join	fnReference('en', 19000082)		as ref_sob_ASSession	-- rftSearchObject
				on	ref_sob_ASSession.idfsReference = qsoASSession.idfsSearchObject
					and ref_sob_ASSession.[name] = N'Active Surveillance Session'
			on  q.idflQuery = qsoASSession.idflQuery
	 left join	dbo.tasQuerySearchObject			as qsoHCSample
		inner join	fnReference('en', 19000082)		as ref_sob_HCSample		-- rftSearchObject
				on	ref_sob_HCSample.idfsReference = qsoHCSample.idfsSearchObject
					and ref_sob_HCSample.[name] = N'Human Case Sample'
			on  q.idflQuery = qsoHCSample.idflQuery
	 left join	dbo.tasQuerySearchObject			as qsoHCTest
		inner join	fnReference('en', 19000082)		as ref_sob_HCTest		-- rftSearchObject
				on	ref_sob_HCTest.idfsReference = qsoHCTest.idfsSearchObject
					and ref_sob_HCTest.[name] = N'Human Case Test'
			on  q.idflQuery = qsoHCTest.idflQuery
	 left join	dbo.tasQuerySearchObject			as qsoVCSample
		inner join	fnReference('en', 19000082)		as ref_sob_VCSample		-- rftSearchObject
				on	ref_sob_VCSample.idfsReference = qsoVCSample.idfsSearchObject
					and ref_sob_VCSample.[name] = N'Vet Case Sample'
			on  q.idflQuery = qsoVCSample.idflQuery
	 left join	dbo.tasQuerySearchObject			as qsoVCTest
		inner join	fnReference('en', 19000082)		as ref_sob_VCTest		-- rftSearchObject
				on	ref_sob_VCTest.idfsReference = qsoVCTest.idfsSearchObject
					and ref_sob_VCTest.[name] = N'Vet Case Test'
			on  q.idflQuery = qsoVCTest.idflQuery
	 left join	dbo.tasQuerySearchObject			as qsoASSample
		inner join	fnReference('en', 19000082)		as ref_sob_ASSample		-- rftSearchObject
				on	ref_sob_ASSample.idfsReference = qsoASSample.idfsSearchObject
					and ref_sob_ASSample.[name] = N'Active Surveillance Sample'
			on  q.idflQuery = qsoASSample.idflQuery
	 left join	dbo.tasQuerySearchObject			as qsoASTest
		inner join	fnReference('en', 19000082)		as ref_sob_ASTest		-- rftSearchObject
				on	ref_sob_ASTest.idfsReference = qsoASTest.idfsSearchObject
					and ref_sob_ASTest.[name] = N'Active Surveillance Test'
			on  q.idflQuery = qsoASTest.idflQuery
	 left join trtBaseReference brQuery
		on	brQuery.idfsBaseReference = q.idfsGlobalQuery

	where		(@QueryID is null or @QueryID = q.idflQuery)
				and IsNull(q.blnSubQuery, 0) = 0
	order by	intOrder, refQuery.strName

END
GO
PRINT N'Altering Procedure [dbo].[spGetSiteInfo]...';


GO


--##SUMMARY This procedure returns site, country and organization information related with current site.

--##REMARKS Author: Zurin M.
--##REMARKS Create date: 05.11.2009

--##REMARKS Updated: Zolotareva N.
--##REMARKS Update date: 25.11.2011 
--##REMARKS Changed tlbGeoLocation to tlbGeoLocationShared


--##RETURNS Don't use


/*
--Example of a call of procedure:

exec dbo.[spGetSiteInfo] 'en'
*/


ALTER PROCEDURE [dbo].[spGetSiteInfo](
	@LangID NVARCHAR(10) --##PARAM LanguageID - language ID for localized strings
	)
AS
BEGIN
declare @idfsRealSiteID bigint
declare @idfsRealSiteType bigint
select		@idfsRealSiteID = cast(tstLocalSiteOptions.strValue as bigint)
from		tstLocalSiteOptions
where		tstLocalSiteOptions.strName='SiteID'

select		@idfsRealSiteType = cast(tstLocalSiteOptions.strValue as bigint)
from		tstLocalSiteOptions
where		tstLocalSiteOptions.strName='SiteType'

if(@idfsRealSiteType is null)
	SELECT @idfsRealSiteType = idfsSiteType
	FROM tstSite
	WHERE idfsSite = @idfsRealSiteID and intRowStatus = 0

SELECT dbo.fnGisReference.idfsReference as idfsCountry,   
  dbo.fnGisReference.[name] as strCountryName,  
  gisCountry.strHASC as strHASCCountry,  
  CAST(ISNULL(tlbGeoLocationShared.idfsRegion, -1) as bigint) as idfsRegion,  
  CAST(ISNULL(tlbGeoLocationShared.idfsRayon, -1) as bigint) as idfsRayon,  
  tstSite.idfsSite,  
  @idfsRealSiteID as idfsRealSiteID,
  @idfsRealSiteType as idfsRealSiteType,
  tstSite.strHASCsiteID,  
  tstSite.strSiteName,  
  tstSite.strSiteID,  
  tstSite.idfsSiteType,  
  dbo.fnReference.name as strSiteTypeName,  
  tstSite.idfOffice,  
  fnInstitution.[name] As strOrganizationName,
  tstSite.idfCustomizationPackage,
  dbo.fnPermissionSite() as idfsPermissionSite
FROM dbo.fnGisReference(@LangID,19000001) --'rftCountry'  
inner join gisCountry  
on  dbo.fnGisReference.idfsReference = gisCountry.idfsCountry 
JOIN tstCustomizationPackage tcpac ON
	tcpac.idfsCountry = gisCountry.idfsCountry
inner join tstSite   
on  tstSite.idfCustomizationPackage = tcpac.idfCustomizationPackage
inner join dbo.fnReference(@LangID, 19000085) --rftSiteType  
on  tstSite.idfsSiteType = fnReference.idfsReference  
inner join dbo.fnInstitution(@LangID)   
on  tstSite.idfOffice = fnInstitution.idfOffice  
Left OUTER JOIN tlbGeoLocationShared   
on  fnInstitution.idfLocation = tlbGeoLocationShared.idfGeoLocationShared  
where tstSite.idfsSite = dbo.fnSiteID()  
  

END
GO
PRINT N'Altering Procedure [dbo].[spSecurityPolicy_List]...';


GO


/*
exec spSecurityPolicy_List 'en'
*/

ALTER PROCEDURE [dbo].[spSecurityPolicy_List]
	@LangID nvarchar(50)
AS
BEGIN
/*	select	*
	from	tstGlobalSiteOptions*/
/*
	Select Policies.*,Ref.name as Description
	from
	(
		select	'AccountLockTimeout' as strName,dbo.fnPolicyValue('AccountLockTimeout') as strValue
		union
		select	'AccountTryCount' as strName,dbo.fnPolicyValue('AccountTryCount') as strValue
		union
		select	'PasswordAge' as strName,dbo.fnPolicyValue('PasswordAge') as strValue
		union
		select	'PasswordHistoryLength' as strName,dbo.fnPolicyValue('PasswordHistoryLength') as strValue
		union
		select	'PasswordMinimalLength' as strName,dbo.fnPolicyValue('PasswordMinimalLength') as strValue
		union
		select	'InactivityTimeout' as strName,dbo.fnPolicyValue('InactivityTimeout') as strValue
		union
		select	'ForcePasswordComplexity' as strName,dbo.fnPolicyValue('ForcePasswordComplexity') as strValue
		union
		select	'PasswordComplexityExpression' as strName,dbo.fnPolicyValue('PasswordComplexityExpression') as strValue
		union
		select	'PasswordComplexityDescription' as strName,dbo.fnPolicyValue('PasswordComplexityDescription') as strValue
	)	Policies
	left join	fnReference(@LangID,19000120) Ref
	on			Policies.strValue=cast(Ref.idfsReference as nvarchar(200))
*/
	
	declare		@scid bigint

	select		@scid=idfSecurityConfiguration
	from		fnPolicyValue()

	select		PolicyList.*,
				[Level].name as SecurityLevel
				--Ref.name as [Description]
	from		fnPolicyValue() PolicyList
	left join	fnReference(@LangID,19000119) [Level]
	on			[Level].idfsReference=PolicyList.idfsSecurityLevel
	--left join	fnReference(@LangID,19000120) Ref
	--on			Ref.idfsReference=PolicyList.idfsSecurityConfigurationDescription
	--where		@cid=PolicyList.idfSecurityConfiguration

	select		tstSecurityConfigurationAlphabet.*
				--Ref.name as [Description]
	from		tstSecurityConfigurationAlphabet
	inner join	tstSecurityConfigurationAlphabetParticipation
	on			tstSecurityConfigurationAlphabetParticipation.intRowStatus=0 and
				tstSecurityConfigurationAlphabet.intRowStatus=0 and
				tstSecurityConfigurationAlphabetParticipation.idfSecurityConfiguration=@scid
	--left join	fnReference(@LangID,19000118) Ref
	--on			Ref.idfsReference=dbo.tstSecurityConfigurationAlphabet.idfsSecurityConfigurationAlphabet
END
GO
PRINT N'Altering Procedure [dbo].[USP_REP_ReportFormSummary_GetList]...';


GO

--*************************************************************
-- Name 				: USP_REP_ReportFormSummary_GetList
-- Description			: Get List of Weekly Reports that fit
--						  search criteria entered
--          
-- Author               : Mark Wilson
-- Revision History
--		Name       Date       Change Detail
--	Mark Wilson	   29Mar2023  Added SET DATEFIRST 1; -- SET MONDAY AS First day of week.

--
-- Testing code:
--
/*[]

EXECUTE [dbo].[USP_REP_ReportFormSummary_GetList] 
	@LanguageID = 'ka-GE',
	@Year = 2020,
	@Month = 11

EXECUTE [dbo].[USP_REP_ReportFormSummary_GetList] 
	@LanguageID = 'ru-RU',
	@Year = 2020,
	@Month = 11,
	@RegionID = '37020000000',
	@RayonID='3260000000'

*/
ALTER PROCEDURE [dbo].[USP_REP_ReportFormSummary_GetList](
	@LanguageID AS NVARCHAR(50),
	@Year INT = NULL,
	@Month INT = NULL,
	@RegionID AS VARCHAR(50) = NULL,
	@RayonID AS VARCHAR(50) = NULL,
	@ReportFormTypeID AS BIGINT = NULL,
	@TimeIntervalTypeID AS BIGINT = NULL,
	@AdministrativeUnitID AS BIGINT = NULL, 
	@OrganizationID BIGINT = NULL,
	@SiteList VARCHAR(MAX) = NULL
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
		@ReturnCode BIGINT = 0;
	DECLARE @IDs TABLE (ID BIGINT NOT NULL);

	DECLARE @StartDate DATETIME
	DECLARE @EndDate DATETIME

	SELECT 
		@StartDate = DATEADD(YEAR, @Year - 2000, DATEADD(MONTH, @Month - 1, '20000101')),
		@EndDate = DATEADD(YEAR, @Year - 2000, DATEADD(MONTH, @Month, '20000101'))

	-- Set Fist day of week to Monday
	IF (dbo.FN_GBL_CURRENTCOUNTRY_GET() = 780000000) -- Georgia first day of week = Monday
	BEGIN
		SET DATEFIRST 1; -- SET MONDAY AS First day of week.
	END


	BEGIN TRY

		DECLARE @WeeksPerMonth TABLE
		(
			WeekOfMonth INT,
			WeekStart DATE,
			WeekEnd DATE

		)

		INSERT INTO @WeeksPerMonth
		(
		    WeekOfMonth,
		    WeekStart,
		    WeekEnd
		)
		SELECT 
			WeekOfMonth,
			WeekStart,
			WeekEnd

		FROM dbo.FN_GBL_WeeksOfMonth(@StartDate)

-----------------------------------------------------------
		DECLARE @FinalResultSet TABLE
		(
			RegionID VARCHAR(50),
			RayonID VARCHAR(50),
			RegionName NVARCHAR(300),
			RayonName NVARCHAR(300),
			WeekOfMonth INT,
			StartDate DATE,
			EndDate DATE,
			total INT,
			notified INT

		)

		INSERT INTO @FinalResultSet
		(
			RegionID,
			RayonID,
		    RegionName,
		    RayonName,
			WeekOfMonth,
			StartDate,
			EndDate,
			total,
			notified
		)
		SELECT 
			CAST(L.Level2ID AS VARCHAR)AS RegionID,
			CAST(L.Level3ID AS VARCHAR)AS RayonID,
			L.Level2Name AS RegionName,
			L.Level3Name AS RayonName,
			W.WeekOfMonth,
			W.WeekStart,
			W.WeekEnd,
			0,
			0
		FROM dbo.gisLocationDenormalized L
		LEFT JOIN @WeeksPerMonth W ON 1 = 1
		WHERE idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID) 
		AND level1ID = dbo.FN_GBL_CURRENTCOUNTRY_GET() AND Level = 3

		DECLARE @PopulatedRayons TABLE
		(
			RegionID VARCHAR(50),
			RayonID VARCHAR(50),
			RegionName NVARCHAR(300),
			RayonName NVARCHAR(300),
			StartDate DATE,
			EndDate DATE,
			total INT,
			notified INT

		)

---------------------------------------------------------------
		DECLARE @SiteOrganizationList VARCHAR(MAX) = '';

		SELECT @SiteOrganizationList = @SiteOrganizationList + ',' + CAST(o.idfOffice AS VARCHAR)
		FROM dbo.tlbOffice o
		WHERE (
				o.idfsSite IN (
					SELECT CAST([Value] AS BIGINT)
					FROM dbo.FN_GBL_SYS_SplitList(@SiteList, NULL, ',')
					)
				OR (@SiteList IS NULL)
				);

		SET @SiteOrganizationList = SUBSTRING(@SiteOrganizationList, 2, LEN(@SiteOrganizationList));

		-- Entered by and notification received by and sent to organizations
		INSERT INTO @IDs
		SELECT 
			a.idfReportForm
		FROM dbo.tlbReportForm a
		WHERE (a.intRowStatus = 0)
			AND (
				a.idfEnteredByOffice IN (
					SELECT CAST([Value] AS BIGINT)
					FROM dbo.FN_GBL_SYS_SplitList(@SiteOrganizationList, NULL, ',')
					)
				OR a.idfSentByOffice IN (
					SELECT CAST([Value] AS BIGINT)
					FROM dbo.FN_GBL_SYS_SplitList(@SiteOrganizationList, NULL, ',')
					)
				);

		--
		-- Weekly Report data shall be available to all sites of the same 
		-- administrative rayon.
		--
		-- Rayon of the report administrative unit.
		DECLARE @SiteRayonList VARCHAR(MAX) = '';

		SELECT @SiteRayonList = @SiteRayonList + ',' + CAST(l.idfsRayon AS VARCHAR)
		FROM dbo.tstSite s
		INNER JOIN dbo.tlbOffice AS o
			ON o.idfOffice = s.idfOffice
				AND o.intRowStatus = 0
		INNER JOIN dbo.tlbGeoLocationShared AS l
			ON l.idfGeoLocationShared = o.idfLocation
				AND l.intRowStatus = 0
		WHERE (
				s.idfsSite IN (
					SELECT CAST([Value] AS BIGINT)
					FROM dbo.FN_GBL_SYS_SplitList(@SiteList, NULL, ',')
					)
				OR (@SiteList IS NULL)
				);

		SET @SiteRayonList = SUBSTRING(@SiteRayonList, 2, LEN(@SiteRayonList));

		INSERT INTO @IDs
		SELECT 
			a.idfReportForm
		FROM dbo.tlbReportForm a
		INNER JOIN dbo.gisLocation L ON L.idfsLocation = a.idfsAdministrativeUnit AND L.intRowStatus = 0
		INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) LF ON LF.AdminLevel1ID = L.idfsLocation OR LF.AdminLevel2ID = LF.idfsLocation  OR LF.AdminLevel4ID = L.idfsLocation

/*		INNER JOIN dbo.gisRayon r
			ON r.idfsRayon = a.idfsAdministrativeUnit
				AND r.intRowStatus = 0
*/
		WHERE (a.intRowStatus = 0)


			AND (
					LF.AdminLevel2ID IN 
					(
						SELECT CAST([Value] AS BIGINT)
						FROM dbo.FN_GBL_SYS_SplitList(@SiteRayonList, NULL, ',')
					)

					OR LF.AdminLevel3ID IN 
					(
						SELECT CAST([Value] AS BIGINT)
						FROM dbo.FN_GBL_SYS_SplitList(@SiteRayonList, NULL, ',')
					)

				)
			AND a.idfReportForm NOT IN (
				SELECT *
				FROM @IDs
				);

		---- Rayon of the settlement of the report administrative unit.
		INSERT INTO @IDs
		SELECT 
			a.idfReportForm
		FROM dbo.tlbReportForm a
		INNER JOIN dbo.gisSettlement s
			ON s.idfsSettlement = a.idfsAdministrativeUnit
				AND s.intRowStatus = 0
		WHERE (a.intRowStatus = 0)
			AND (
				s.idfsRayon IN (
					SELECT CAST([Value] AS BIGINT)
					FROM dbo.FN_GBL_SYS_SplitList(@SiteRayonList, NULL, ',')
					)
				)
			AND a.idfReportForm NOT IN (
				SELECT *
				FROM @IDs
				);
		INSERT INTO @PopulatedRayons
		(
			RegionID,
			RayonID,
		    RegionName,
		    RayonName,
		    StartDate,
		    EndDate,
			total,
			notified
		)

		SELECT 
			CAST(summary.RegionID AS VARCHAR),
			CAST(summary.RayonID AS VARCHAR),
			summary.RegionName,
			summary.RayonName,  
			summary.StartDate, 
			summary.finishdate,
			SUM(summary.total) total,
			SUM(summary.notified) notified 
		FROM
		(SELECT RfID.ID AS ReportFormID,
			dbo.FN_GBL_FormatDate(ac.datStartDate, 'mm/dd/yyyy') AS StartDate,
			dbo.FN_GBL_FormatDate(ac.datFinishDate, 'mm/dd/yyyy') AS FinishDate,
			br.strDefault AS diseaseDefaultName,
			ac.Total,
			ac.Notified,
			L.AdminLevel2ID AS RegionID,
			L.AdminLevel3ID AS RayonID,
			L.AdminLevel2Name AS RegionName,
			L.AdminLevel3Name AS RayonName,
			L.AdminLevel4Name AS SettlementName

		FROM @IDs RfID
		INNER JOIN dbo.tlbReportForm AS ac ON ac.idfReportForm = RfID.ID
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) AS EnteredByOffice ON ac.idfEnteredByOffice = EnteredByOffice.idfOffice
		LEFT JOIN dbo.tlbPerson AS EnteredByPerson ON ac.idfEnteredByPerson = EnteredByPerson.idfPerson
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) AS SentByOffice ON ac.idfSentByOffice = SentByOffice.idfOffice
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) L ON L.idfsLocation = ac.idfsAdministrativeUnit
		LEFT JOIN dbo.trtStringNameTranslation AS per
			ON per.idfsBaseReference = CASE 
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091002 /* Day */
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6
						THEN 10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
					WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091001 /* Month */
					WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091003 /* Quarter */
					WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091005 /* Year */
					END
				AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
		JOIN dbo.trtBaseReference br ON br.idfsBaseReference = ac.idfsDiagnosis 
		LEFT JOIN dbo.trtStringNameTranslation AS Diagnosis ON Diagnosis.idfsBaseReference = ac.idfsDiagnosis AND Diagnosis.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
		WHERE (ac.intRowStatus = 0)
			AND (
				(ac.idfsReportFormType = @ReportFormTypeID)
				OR (@ReportFormTypeID IS NULL)
				)
			AND (
				(ac.idfSentByOffice = @OrganizationID)
				OR (@OrganizationID IS NULL)
				)
			--AND (
			--	(L.LevelType = @AdministrativeUnitTypeID)
			--	OR (@AdministrativeUnitTypeID IS NULL)
			--)
			AND (
				(per.idfsBaseReference = @TimeIntervalTypeID)
				OR (@TimeIntervalTypeID IS NULL)
				)
			AND (
				(ac.datStartDate >= @StartDate)
				OR (@StartDate IS NULL)
				)
			AND (
				(ac.datFinishDate < @EndDate)
				OR (@EndDate IS NULL)
				)
			AND (
				CASE 
					WHEN @AdministrativeUnitID IS NULL
						THEN 1
					WHEN (
							L.AdminLevel1ID = @AdministrativeUnitID
							OR L.AdminLevel2ID = @AdministrativeUnitID
							OR L.AdminLevel3ID = @AdministrativeUnitID
							OR L.AdminLevel4ID = @AdministrativeUnitID
						)
					THEN 1
					ELSE 0
					END = 1
				)
		) summary

		GROUP BY Summary.RegionID,Summary.RayonID,summary.RegionName,summary.RayonName,summary.StartDate,summary.FinishDate

	UPDATE F
	SET F.total = P.total,
		F.notified = P.notified
	FROM @FinalResultSet F
	INNER JOIN @PopulatedRayons P ON P.RegionID = F.RegionID AND P.RayonID = F.RayonID AND P.StartDate = F.StartDate AND P.EndDate = F.EndDate


	SELECT 
		summary.RegionName,
		summary.RayonName,
		summary.WeekOfMonth,
		Summary.StartDate,
		Summary.EndDate,
		--CONVERT(VARCHAR, Summary.StartDate,103) + ' - ' + CONVERT(VARCHAR, Summary.EndDate,103) AS WeekSpan,
		summary.total,
		summary.notified,
		summary.RegionID,
		summary.RayonID,
		@RegionID,
		@RayonID
		
	FROM @FinalResultSet summary
	WHERE  ((summary.RegionID = @RegionID) OR (ISNULL(@RegionID,'0') = '0'))
			AND ((summary.RayonID = @RayonID) OR (ISNULL(@RayonID,'0')= '0'))
	ORDER BY summary.RegionName,summary.RayonName,summary.WeekOfMonth


	SELECT @ReturnCode,
			@ReturnMessage;
	END TRY

	BEGIN CATCH
		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();

		SELECT @ReturnCode,
			@ReturnMessage;

		THROW;
	END CATCH;

	
END
GO
PRINT N'Altering Procedure [dbo].[USSP_HUM_DISEASE_GEOLOCATION_SET]...';


GO
-- ================================================================================================
-- Name: USSP_HUM_DISEASE_GEOLOCATION_SET
--
-- Description: Inserts or updates a geo-location record for a human associated with a human 
-- diease report.
--          
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                   Date       Change Detail
-- ---------------------- ---------- -------------------------------------------------------------
-- Stephen Long           11/18/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long           12/01/2022 Added EIDSS object ID; smart key that represents the parent 
--                                   object. 
--
-- Testing code:

/*
--Example of a call of procedure:
DECLARE @idfGeoLocation BIGINT
DECLARE @idfsGroundType BIGINT
DECLARE @idfsGeoLocationType BIGINT
DECLARE @idfsCountry BIGINT
DECLARE @idfsRegion BIGINT
DECLARE @idfsRayon BIGINT
DECLARE @idfsSettlement BIGINT
DECLARE @strDescription NVARCHAR(200)
DECLARE @dblDistance FLOAT
DECLARE @dblLatitude FLOAT
DECLARE @dblLongitude FLOAT
DECLARE @dblAccuracy FLOAT
DECLARE @dblAlignment FLOAT
declare @blnGeoLocationShared bit

-- TODO: Set parameter values here.

EXECUTE dbo.USP_GBL_GEOLOCATION_SET
   @idfGeoLocation
  ,@idfsGroundType
  ,@idfsGeoLocationType
  ,@idfsCountry
  ,@idfsRegion
  ,@idfsRayon
  ,@idfsSettlement
  ,@strDescription
  ,@dblDistance
  ,@dblLatitude
  ,@dblLongitude
  ,@dblAccuracy
  ,@dblAlignment
  ,@blnGeoLocationShared
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_HUM_DISEASE_GEOLOCATION_SET]
(
    @GeoLocationID BIGINT,
    @GroundTypeID BIGINT,
    @GeoLocationTypeID BIGINT,
    @CountryID BIGINT,
    @RegionID BIGINT,
    @RayonID BIGINT,
    @SettlementID BIGINT,
    @Description NVARCHAR(200),
    @Latitude FLOAT,
    @Longitude FLOAT,
    @Accuracy FLOAT,
    @Distance FLOAT,
    @Alignment FLOAT,
    @ForeignAddressString NVARCHAR(200),
    @GeoLocationSharedIndicator BIT = 0,
    @Elevation FLOAT = NULL,
    @AuditUserName NVARCHAR(100) = '',
    @DataAuditEventID BIGINT = NULL, 
    @EIDSSObjectID NVARCHAR(200) = NULL 
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @AddressString NVARCHAR(MAX),
        @LocationID BIGINT = COALESCE(@SettlementID, @RayonID, @RegionID, @CountryID),
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @ObjectID BIGINT = @GeoLocationID,
        @ObjectTableID BIGINT = 75580000000; -- tlbGeoLocation
DECLARE @GeoLocationBeforeEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
DECLARE @GeoLocationAfterEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
BEGIN
    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID
        )
        BEGIN
            -- Data audit
            INSERT INTO @GeoLocationBeforeEdit
            (
                GeoLocationID,
                ResidentTypeID,
                GroundTypeID,
                GeoLocationTypeID,
                LocationID,
                PostalCode,
                StreetName,
                House,
                Building,
                Apartment,
                AddressDescription,
                Distance,
                Latitude,
                Longitude,
                Accuracy,
                Alignment,
                ForeignAddressIndicator,
                ForeignAddressString,
                ShortAddressString
            )
            SELECT idfGeoLocation,
                   idfsResidentType,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsLocation,
                   strPostCode,
                   strStreetName,
                   strHouse,
                   strBuilding,
                   strApartment,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   blnForeignAddress,
                   strForeignAddress,
                   strShortAddressString
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID;
            -- End data audit

            UPDATE dbo.tlbGeoLocation
            SET idfsGroundType = @GroundTypeID,
                idfsGeoLocationType = @GeoLocationTypeID,
                idfsCountry = @CountryID,
                idfsRegion = @RegionID,
                idfsRayon = @RayonID,
                idfsSettlement = @SettlementID,
                idfsLocation = @LocationID,
                strDescription = @Description,
                dblDistance = @Distance,
                dblLatitude = @Latitude,
                dblLongitude = @Longitude,
                dblAccuracy = @Accuracy,
                dblAlignment = @Alignment,
                strForeignAddress = @ForeignAddressString,
                blnForeignAddress = CASE
                                        WHEN @GeoLocationTypeID = 10036001 THEN
                                            1
                                        ELSE
                                            0
                                    END,
                dblElevation = @Elevation,
                AuditUpdateUser = @AuditUserName, 
                AuditUpdateDTM = GETDATE() 
            WHERE idfGeoLocation = @GeoLocationID;

            -- Data audit
            INSERT INTO @GeoLocationAfterEdit
            (
                GeoLocationID,
                ResidentTypeID,
                GroundTypeID,
                GeoLocationTypeID,
                LocationID,
                PostalCode,
                StreetName,
                House,
                Building,
                Apartment,
                AddressDescription,
                Distance,
                Latitude,
                Longitude,
                Accuracy,
                Alignment,
                ForeignAddressIndicator,
                ForeignAddressString,
                ShortAddressString
            )
            SELECT idfGeoLocation,
                   idfsResidentType,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsLocation,
                   strPostCode,
                   strStreetName,
                   strHouse,
                   strBuilding,
                   strApartment,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   blnForeignAddress,
                   strForeignAddress,
                   strShortAddressString
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79170000000,
                   a.GeoLocationID,
                   NULL,
                   b.GroundTypeID,
                   a.GroundTypeID,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GroundTypeID <> b.GroundTypeID)
                  OR (
                         a.GroundTypeID IS NOT NULL
                         AND b.GroundTypeID IS NULL
                     )
                  OR (
                         a.GroundTypeID IS NULL
                         AND b.GroundTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79160000000,
                   a.GeoLocationID,
                   NULL,
                   b.GeoLocationTypeID,
                   a.GeoLocationTypeID,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                  OR (
                         a.GeoLocationTypeID IS NOT NULL
                         AND b.GeoLocationTypeID IS NULL
                     )
                  OR (
                         a.GeoLocationTypeID IS NULL
                         AND b.GeoLocationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51523690000000,
                   a.GeoLocationID,
                   NULL,
                   b.LocationID,
                   a.LocationID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.LocationID <> b.LocationID)
                  OR (
                         a.LocationID IS NOT NULL
                         AND b.LocationID IS NULL
                     )
                  OR (
                         a.LocationID IS NULL
                         AND b.LocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79240000000,
                   a.GeoLocationID,
                   NULL,
                   b.AddressDescription,
                   a.AddressDescription,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.AddressDescription <> b.AddressDescription)
                  OR (
                         a.AddressDescription IS NOT NULL
                         AND b.AddressDescription IS NULL
                     )
                  OR (
                         a.AddressDescription IS NULL
                         AND b.AddressDescription IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79110000000,
                   a.GeoLocationID,
                   NULL,
                   b.Distance,
                   a.Distance,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Distance <> b.Distance)
                  OR (
                         a.Distance IS NOT NULL
                         AND b.Distance IS NULL
                     )
                  OR (
                         a.Distance IS NULL
                         AND b.Distance IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79120000000,
                   a.GeoLocationID,
                   NULL,
                   b.Latitude,
                   a.Latitude,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Latitude <> b.Latitude)
                  OR (
                         a.Latitude IS NOT NULL
                         AND b.Latitude IS NULL
                     )
                  OR (
                         a.Latitude IS NULL
                         AND b.Latitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79130000000,
                   a.GeoLocationID,
                   NULL,
                   b.Longitude,
                   a.Longitude,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Longitude <> b.Longitude)
                  OR (
                         a.Longitude IS NOT NULL
                         AND b.Longitude IS NULL
                     )
                  OR (
                         a.Longitude IS NULL
                         AND b.Longitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79090000000,
                   a.GeoLocationID,
                   NULL,
                   b.Accuracy,
                   a.Accuracy,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Accuracy <> b.Accuracy)
                  OR (
                         a.Accuracy IS NOT NULL
                         AND b.Accuracy IS NULL
                     )
                  OR (
                         a.Accuracy IS NULL
                         AND b.Accuracy IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79100000000,
                   a.GeoLocationID,
                   NULL,
                   b.Alignment,
                   a.Alignment,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Alignment <> b.Alignment)
                  OR (
                         a.Alignment IS NOT NULL
                         AND b.Alignment IS NULL
                     )
                  OR (
                         a.Alignment IS NULL
                         AND b.Alignment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578780000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressIndicator,
                   a.ForeignAddressIndicator,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                  OR (
                         a.ForeignAddressIndicator IS NOT NULL
                         AND b.ForeignAddressIndicator IS NULL
                     )
                  OR (
                         a.ForeignAddressIndicator IS NULL
                         AND b.ForeignAddressIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578790000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressString,
                   a.ForeignAddressString,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                  OR (
                         a.ForeignAddressString IS NOT NULL
                         AND b.ForeignAddressString IS NULL
                     )
                  OR (
                         a.ForeignAddressString IS NULL
                         AND b.ForeignAddressString IS NOT NULL
                     );
            -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO dbo.tlbGeoLocation
            (
                idfGeoLocation,
                idfsGroundType,
                idfsGeoLocationType,
                idfsCountry,
                idfsRegion,
                idfsRayon,
                idfsSettlement,
                idfsLocation,
                strDescription,
                dblDistance,
                dblLatitude,
                dblLongitude,
                dblAccuracy,
                dblAlignment,
                strForeignAddress,
                blnForeignAddress,
                dblElevation,
                AuditCreateUser
            )
            VALUES
            (   @GeoLocationID,
                @GroundTypeID,
                @GeoLocationTypeID,
                @CountryID,
                @RegionID,
                @RayonID,
                @SettlementID,
                @LocationID,
                @Description,
                @Distance,
                @Latitude,
                @Longitude,
                @Accuracy,
                @Alignment,
                @ForeignAddressString,
                CASE
                    WHEN @GeoLocationTypeID = 10036001 THEN
                        1
                    ELSE
                        0
                END,
                @Elevation,
                @AuditUserName
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @GeoLocationID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             @EIDSSObjectID
            );
            -- End data audit
        END

        SELECT @ReturnCode,
               @ReturnMessage,
               @GeoLocationID;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode,
               @ReturnMessage,
               @GeoLocationID;
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[USP_HUM_DISEASE_REPORT_GETList_noDeploy]...';


GO

-- ================================================================================================
-- Name: USP_HUM_DISEASE_REPORT_GETList_noDeploy
--
-- Description: Get a list of human disease reports for the human module.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/26/2018 Added the person reported by name for the farm use case.
-- JWJ	            04/17/2018 Added extra col to return:  tlbHuman.idfHumanActual. Added alias 
--                             for region rayon to make them unique in results added report status 
--                             to results 
-- Harold Pryor     10/22/2018 Added input search parameters SearchStrPersonFirstName, 
--                             SearchStrPersonMiddleName, and SearchStrPersonLastName
-- Harold Pryor     10/31/2018 Added input search parameters SearchLegacyCaseID and	
--                             added strLocation (region, rayon) field to list result set
-- Harold Pryor     11/12/2018 Changed @SearchLegacyCaseID parameter from BIGINT to NVARCHAR(200)
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     07/07/2019 Added monitoring session ID to parameters and where clause.
-- Stephen Long     07/10/2019 Changed address join from exposure location to patient's current 
--                             residence address.
-- Stephen Long     07/19/2019 Corrected patient name and person entered by name ', '.
-- Stephen Long     02/26/2020 Added non-configurable site filtration rules.
-- Lamont Mitchell  03/03/2020 Modified all joins on human case and human to join on human actual.
-- Stephen Long     04/01/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Corrected the join on the rayon of the report current residence 
--                             address (human ID to human ID instead of human ID to human actual 
--                             ID).
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	11/16/2020 Added Outbreak Tied filtering
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2020 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     04/04/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	09/23/2021 Added HospitalizationStatus field
-- Stephen Long     11/03/2021 Added disease ID field.
-- Mike Kornegay	11/16/2021 Fix hospitalization field for translations
-- Mike Kornegay	12/07/2021 Added back EnteredByPersonName 
-- Mike Kornegay	12/08/2021 Swapped out FN_GBL_GIS_ReferenceRepair for new flat hierarchy
-- Mike Kornegay	12/23/2021 Fixed YN hospitalization where clause
-- Manickandan Govindarajan 03/21/2022  Rename Param PageNumber to Page
-- Stephen Long     03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay    06/06/2022 Added parameter OutcomeID.
-- Mike Kornegay	06/13/2022 Changed inner joins to left joins in final query because result set 
--                             was incorrect.
-- Stephen Long     08/14/2022 Added additional criteria for outbreak cases for laboratory module.
--                             TODO: replace filter outbreak cases parameter, and just filter in 
--                             the initial query to avoid getting extra unneeded records; also just 
--                             make it a boolean value.
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList_noDeploy 'en-US'
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US', @EIDSSReportID = 'H'
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_HUM_DISEASE_REPORT_GETList_noDeploy]
    @LanguageID NVARCHAR(50),
    @ReportKey BIGINT = NULL,
    @ReportID NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @SessionKey BIGINT = NULL,
    @PatientID BIGINT = NULL,
    @PersonID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @ReportStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @HospitalizationYNID BIGINT = NULL,
    @PatientFirstName NVARCHAR(200) = NULL,
    @PatientMiddleName NVARCHAR(200) = NULL,
    @PatientLastName NVARCHAR(200) = NULL,
    @SentByFacilityID BIGINT = NULL,
    @ReceivedByFacilityID BIGINT = NULL,
    @DiagnosisDateFrom DATETIME = NULL,
    @DiagnosisDateTo DATETIME = NULL,
    @LocalOrFieldSampleID NVARCHAR(200) = NULL,
    @DataEntrySiteID BIGINT = NULL,
    @DateOfSymptomsOnsetFrom DATETIME = NULL,
    @DateOfSymptomsOnsetTo DATETIME = NULL,
    @NotificationDateFrom DATETIME = NULL,
    @NotificationDateTo DATETIME = NULL,
    @DateOfFinalCaseClassificationFrom DATETIME = NULL,
    @DateOfFinalCaseClassificationTo DATETIME = NULL,
    @LocationOfExposureAdministrativeLevelID BIGINT = NULL,
    @OutcomeID BIGINT = NULL,
    @FilterOutbreakTiedReports INT = 0,
    @OutbreakCasesIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @Page INT = 1,
    @PageSize INT = 10
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @AdministrativeLevelNode AS HIERARCHYID,
            @LocationOfExposureLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        IF @LocationOfExposureAdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @LocationOfExposureLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @LocationOfExposureAdministrativeLevelID;
        END;

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
--------------------------------------------------------------------------------------------------------------------
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                 AND  (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase
            OPTION (RECOMPILE);
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
            1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
            WHERE hc.intRowStatus = 0
                  AND hc.idfsSite = @UserSiteID
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                 AND  (
                          hc.idfsOutcome = @OutcomeID
                   OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase
            OPTION (RECOMPILE);

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply active default site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537000;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537000;
				
                SELECT @AdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared AS l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           --AND g.intRowStatus = 0
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the report was created.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tstSite s
                        ON h.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                           AND o.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = l.idfsLocation  --AND g.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                AND 
				(
                    g.Level1ID = @AdministrativeLevelID
					OR g.Level2ID = @AdministrativeLevelID
					OR g.Level3ID = @AdministrativeLevelID
					OR g.Level4ID = @AdministrativeLevelID
					OR g.Level5ID = @AdministrativeLevelID
					OR g.Level6ID = @AdministrativeLevelID
					OR g.Level7ID = @AdministrativeLevelID
					OR @AdministrativeLevelID IS NULL
               )


                -- Administrative level specified in the rule of the report current residence address.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbHuman hu
                        ON hu.idfHuman = h.idfHuman
                           AND hu.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                         --  AND g.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                AND 
				(
                    g.Level1ID = @AdministrativeLevelID
					OR g.Level2ID = @AdministrativeLevelID
					OR g.Level3ID = @AdministrativeLevelID
					OR g.Level4ID = @AdministrativeLevelID
					OR g.Level5ID = @AdministrativeLevelID
					OR g.Level6ID = @AdministrativeLevelID
					OR g.Level7ID = @AdministrativeLevelID
					OR @AdministrativeLevelID IS NULL
				)

                -- Administrative level specified in the rule of the report location of exposure, 
                -- if corresponding field was filled in.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfPointGeoLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           --AND g.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                  AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )
            END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            --
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                 AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          ha.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )

                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                 AND  (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator
            OPTION (RECOMPILE);
        END;


        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        IF @FilterOutbreakTiedReports = 1
        BEGIN
            DELETE I
            FROM @Results I
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = I.ID
            WHERE hc.idfOutbreak IS NOT NULL;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
		
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT h.idfHumanCase
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = h.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )

              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                 OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
             AND  (
                     hc.idfsOutcome = @OutcomeID
                     OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )
              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
       AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
             AND  (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND idfActor = @UserEmployeeID
        );
		
        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;

		
        WITH paging
        AS (SELECT ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                    ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                    ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
            ORDER BY CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'ASC' THEN
                             hc.strCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'DESC' THEN
                             hc.strCaseID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'ASC' THEN
                             hc.datEnteredDate
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'DESC' THEN
                             hc.datEnteredDate
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'ASC' THEN
                             disease.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'DESC' THEN
                             disease.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PersonName'
                              AND @SortOrder = 'ASC' THEN
                             ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                             + ISNULL(' ' + h.strSecondName, N'')
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PersonName'
                              AND @SortOrder = 'DESC' THEN
                             ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                             + ISNULL(' ' + h.strSecondName, N'')
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'ASC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'DESC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'ASC' THEN
                             finalClassification.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'DESC' THEN
                             finalClassification.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'ReportStatusTypeName'
                              AND @SortOrder = 'ASC' THEN
                             reportStatus.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ReportStatusTypeName'
                              AND @SortOrder = 'DESC' THEN
                             reportStatus.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'LegacyReportID'
                              AND @SortOrder = 'ASC' THEN
                             hc.LegacyCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'LegacyReportID'
                              AND @SortOrder = 'DESC' THEN
                             hc.LegacyCaseID
                     END DESC OFFSET @PageSize * (@Page - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
     )
        SELECT res.ID AS ReportKey,
               hc.strCaseId AS ReportID,
               hc.LegacyCaseID AS LegacyReportID,
               reportStatus.name AS ReportStatusTypeName,
               reportType.name AS ReportTypeName,
               hc.datTentativeDiagnosisDate AS TentativeDiagnosisDate,
               hc.datFinalDiagnosisDate AS FinalDiagnosisDate,
               ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
               finalClassification.name AS FinalClassificationTypeName,
               hc.datOnSetDate AS DateOfOnset,
               hc.idfsFinalDiagnosis AS DiseaseID,
               disease.Name AS DiseaseName,
               h.idfHumanActual AS PersonMasterID,
               hc.idfHuman AS PersonKey,
               haai.EIDSSPersonID AS PersonID,
               h.strPersonID AS PersonalID,
               dbo.FN_GBL_ConcatFullName(h.strLastName, h.strFirstName, h.strSecondName) AS PersonName,
               ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
               + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
               ha.strEmployerName AS EmployerName,
               hc.datEnteredDate AS EnteredDate,
               ISNULL(p.strFamilyName, N'') + ISNULL(', ' + p.strFirstName, N'') + ISNULL(' ' + p.strSecondName, N'') AS EnteredByPersonName,
               hc.datModificationDate AS ModificationDate,
               ISNULL(hospitalization.name, hospitalization.strDefault) AS HospitalizationStatus,
               hc.idfsSite AS SiteID,
               res.ReadPermissionIndicator,
               res.AccessToPersonalDataPermissionIndicator,
               res.AccessToGenderAndAgeDataPermissionIndicator,
               res.WritePermissionIndicator,
               res.DeletePermissionIndicator,
               c AS RecordCount,
               (
                   SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
               ) AS TotalCount,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0),
               CurrentPage = @Page,
               LH.AdminLevel2Name Region,
			   LH.AdminLevel3Name Rayon
        FROM @FinalResults res
            INNER JOIN paging
                ON paging.ID = res.ID
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbHumanActual ha
                ON ha.idfHumanActual = h.idfHumanActual
                   AND ha.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation gl
                ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
            LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                ON LH.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.HumanActualAddlInfo haai
                ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                   AND haai.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
                ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType
                ON reportType.idfsReference = hc.DiseaseReportTypeID
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000041) hospitalization
                ON hospitalization.idfsReference = idfsHospitalizationStatus
            LEFT JOIN dbo.tlbPerson p
                ON p.idfPerson = hc.idfPersonEnteredBy
                   AND p.intRowStatus = 0
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Creating Procedure [dbo].[USP_HUM_DISEASE_REPORT_GETList_Original]...';


GO

-- ================================================================================================
-- Name: USP_HUM_DISEASE_REPORT_GETList_original
--
-- Description: Get a list of human disease reports for the human module.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/26/2018 Added the person reported by name for the farm use case.
-- JWJ	            04/17/2018 Added extra col to return:  tlbHuman.idfHumanActual. Added alias 
--                             for region rayon to make them unique in results added report status 
--                             to results 
-- Harold Pryor     10/22/2018 Added input search parameters SearchStrPersonFirstName, 
--                             SearchStrPersonMiddleName, and SearchStrPersonLastName
-- Harold Pryor     10/31/2018 Added input search parameters SearchLegacyCaseID and	
--                             added strLocation (region, rayon) field to list result set
-- Harold Pryor     11/12/2018 Changed @SearchLegacyCaseID parameter from BIGINT to NVARCHAR(200)
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     07/07/2019 Added monitoring session ID to parameters and where clause.
-- Stephen Long     07/10/2019 Changed address join from exposure location to patient's current 
--                             residence address.
-- Stephen Long     07/19/2019 Corrected patient name and person entered by name ', '.
-- Stephen Long     02/26/2020 Added non-configurable site filtration rules.
-- Lamont Mitchell  03/03/2020 Modified all joins on human case and human to join on human actual.
-- Stephen Long     04/01/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Corrected the join on the rayon of the report current residence 
--                             address (human ID to human ID instead of human ID to human actual 
--                             ID).
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	11/16/2020 Added Outbreak Tied filtering
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2020 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     04/04/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	09/23/2021 Added HospitalizationStatus field
-- Stephen Long     11/03/2021 Added disease ID field.
-- Mike Kornegay	11/16/2021 Fix hospitalization field for translations
-- Mike Kornegay	12/07/2021 Added back EnteredByPersonName 
-- Mike Kornegay	12/08/2021 Swapped out FN_GBL_GIS_ReferenceRepair for new flat hierarchy
-- Mike Kornegay	12/23/2021 Fixed YN hospitalization where clause
-- Manickandan Govindarajan 03/21/2022  Rename Param PageNumber to Page
-- Stephen Long     03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay    06/06/2022 Added parameter OutcomeID.
-- Mike Kornegay	06/13/2022 Changed inner joins to left joins in final query because result set 
--                             was incorrect.
-- Stephen Long     08/14/2022 Added additional criteria for outbreak cases for laboratory module.
--                             TODO: replace filter outbreak cases parameter, and just filter in 
--                             the initial query to avoid getting extra unneeded records; also just 
--                             make it a boolean value.
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList_original 'en'
-- EXEC USP_HUM_DISEASE_REPORT_GETList_original 'en', @EIDSSReportID = 'H'
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_HUM_DISEASE_REPORT_GETList_Original]
    @LanguageID NVARCHAR(50),
    @ReportKey BIGINT = NULL,
    @ReportID NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @SessionKey BIGINT = NULL,
    @PatientID BIGINT = NULL,
    @PersonID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @ReportStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @HospitalizationYNID BIGINT = NULL,
    @PatientFirstName NVARCHAR(200) = NULL,
    @PatientMiddleName NVARCHAR(200) = NULL,
    @PatientLastName NVARCHAR(200) = NULL,
    @SentByFacilityID BIGINT = NULL,
    @ReceivedByFacilityID BIGINT = NULL,
    @DiagnosisDateFrom DATETIME = NULL,
    @DiagnosisDateTo DATETIME = NULL,
    @LocalOrFieldSampleID NVARCHAR(200) = NULL,
    @DataEntrySiteID BIGINT = NULL,
    @DateOfSymptomsOnsetFrom DATETIME = NULL,
    @DateOfSymptomsOnsetTo DATETIME = NULL,
    @NotificationDateFrom DATETIME = NULL,
    @NotificationDateTo DATETIME = NULL,
    @DateOfFinalCaseClassificationFrom DATETIME = NULL,
    @DateOfFinalCaseClassificationTo DATETIME = NULL,
    @LocationOfExposureAdministrativeLevelID BIGINT = NULL,
    @OutcomeID BIGINT = NULL,
    @FilterOutbreakTiedReports INT = 0,
    @OutbreakCasesIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @Page INT = 1,
    @PageSize INT = 10
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @AdministrativeLevelNode AS HIERARCHYID,
            @LocationOfExposureLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        IF @LocationOfExposureAdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @LocationOfExposureLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @LocationOfExposureAdministrativeLevelID;
        END;

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = currentAddress.idfsLocation
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocation gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          gExposure.node.IsDescendantOf(@LocationOfExposureLevelNode) = 1
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                 AND  (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase
            OPTION (RECOMPILE);
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
            1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = currentAddress.idfsLocation
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocation gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
            WHERE hc.intRowStatus = 0
                  AND hc.idfsSite = @UserSiteID
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          gExposure.node.IsDescendantOf(@LocationOfExposureLevelNode) = 1
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                 AND  (
                          hc.idfsOutcome = @OutcomeID
                   OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase
            OPTION (RECOMPILE);

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply active default site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537000;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537000;
				
                SELECT @AdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared AS l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.intRowStatus = 0
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the report was created.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tstSite s
                        ON h.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                           AND o.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the report current residence address.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbHuman hu
                        ON hu.idfHuman = h.idfHuman
                           AND hu.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the report location of exposure, 
                -- if corresponding field was filled in.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfPointGeoLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            --
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                 AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = currentAddress.idfsLocation
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocation gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          ha.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          gExposure.node.IsDescendantOf(@LocationOfExposureLevelNode) = 1
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                 AND  (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator
            OPTION (RECOMPILE);
        END;


        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        IF @FilterOutbreakTiedReports = 1
        BEGIN
            DELETE I
            FROM @Results I
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = I.ID
            WHERE hc.idfOutbreak IS NOT NULL;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
		
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT h.idfHumanCase
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = h.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocation gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                 OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@LocationOfExposureLevelNode) = 1
                      OR @LocationOfExposureAdministrativeLevelID IS NULL
                  )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
             AND  (
                     hc.idfsOutcome = @OutcomeID
                     OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocation gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@LocationOfExposureLevelNode) = 1
                      OR @LocationOfExposureAdministrativeLevelID IS NULL
                  )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
       AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
             AND  (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND idfActor = @UserEmployeeID
        );
		
        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;

		
        WITH paging
        AS (SELECT ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                    ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                    ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
            ORDER BY CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'ASC' THEN
                             hc.strCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'DESC' THEN
                             hc.strCaseID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'ASC' THEN
                             hc.datEnteredDate
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'DESC' THEN
                             hc.datEnteredDate
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'ASC' THEN
                             disease.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'DESC' THEN
                             disease.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PersonName'
                              AND @SortOrder = 'ASC' THEN
                             ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                             + ISNULL(' ' + h.strSecondName, N'')
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PersonName'
                              AND @SortOrder = 'DESC' THEN
                             ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                             + ISNULL(' ' + h.strSecondName, N'')
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'ASC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'DESC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'ASC' THEN
                             finalClassification.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'DESC' THEN
                             finalClassification.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'ReportStatusTypeName'
                              AND @SortOrder = 'ASC' THEN
                             reportStatus.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ReportStatusTypeName'
                              AND @SortOrder = 'DESC' THEN
                             reportStatus.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'LegacyReportID'
                              AND @SortOrder = 'ASC' THEN
                             hc.LegacyCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'LegacyReportID'
                              AND @SortOrder = 'DESC' THEN
                             hc.LegacyCaseID
                     END DESC OFFSET @PageSize * (@Page - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
     )
        SELECT res.ID AS ReportKey,
               hc.strCaseId AS ReportID,
               hc.LegacyCaseID AS LegacyReportID,
               reportStatus.name AS ReportStatusTypeName,
               reportType.name AS ReportTypeName,
               hc.datTentativeDiagnosisDate AS TentativeDiagnosisDate,
               hc.datFinalDiagnosisDate AS FinalDiagnosisDate,
               ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
               finalClassification.name AS FinalClassificationTypeName,
               hc.datOnSetDate AS DateOfOnset,
               hc.idfsFinalDiagnosis AS DiseaseID,
               disease.Name AS DiseaseName,
               h.idfHumanActual AS PersonMasterID,
               hc.idfHuman AS PersonKey,
               haai.EIDSSPersonID AS PersonID,
               h.strPersonID AS PersonalID,
               dbo.FN_GBL_ConcatFullName(h.strLastName, h.strFirstName, h.strSecondName) AS PersonName,
               ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
               + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
               ha.strEmployerName AS EmployerName,
               hc.datEnteredDate AS EnteredDate,
               ISNULL(p.strFamilyName, N'') + ISNULL(', ' + p.strFirstName, N'') + ISNULL(' ' + p.strSecondName, N'') AS EnteredByPersonName,
               hc.datModificationDate AS ModificationDate,
               ISNULL(hospitalization.name, hospitalization.strDefault) AS HospitalizationStatus,
               hc.idfsSite AS SiteID,
               res.ReadPermissionIndicator,
               res.AccessToPersonalDataPermissionIndicator,
               res.AccessToGenderAndAgeDataPermissionIndicator,
               res.WritePermissionIndicator,
               res.DeletePermissionIndicator,
               c AS RecordCount,
               (
                   SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
               ) AS TotalCount,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0),
               CurrentPage = @Page,
               LH.AdminLevel2Name Region,
			   LH.AdminLevel3Name Rayon
        FROM @FinalResults res
            INNER JOIN paging
                ON paging.ID = res.ID
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbHumanActual ha
                ON ha.idfHumanActual = h.idfHumanActual
                   AND ha.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation gl
                ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
            LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                ON LH.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.HumanActualAddlInfo haai
                ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                   AND haai.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
                ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType
                ON reportType.idfsReference = hc.DiseaseReportTypeID
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000041) hospitalization
                ON hospitalization.idfsReference = idfsHospitalizationStatus
            LEFT JOIN dbo.tlbPerson p
                ON p.idfPerson = hc.idfPersonEnteredBy
                   AND p.intRowStatus = 0
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Creating Procedure [dbo].[USP_VCTS_Copy_DetailedCollections]...';


GO

--*************************************************************
-- Name 				: USP_VCTS_Copy_DetailedCollections
-- Description			: Create replicas of the given idfVector ids
--          
-- Author               : Doug Albanese
-- Revision History
--	Name			Date			Change Detail
--  Doug Albanese	01/21/2020		Initial Creation
-- Doug Albanese	11/5/2020		Re-worked to get the copy to associate samples and tests for the new vector.
--*************************************************************

CREATE PROCEDURE [dbo].[USP_VCTS_Copy_DetailedCollections]
(
    @idfVector								BIGINT
)

AS 

BEGIN
	DECLARE @returnCode						INT = 0 
	DECLARE	@returnMsg						NVARCHAR(max) = 'SUCCESS' 
	DECLARE @idfVectorNew					BIGINT

	DECLARE @SupressSelect TABLE
	( retrunCode INT,
		returnMsg NVARCHAR(200)
	)

	DECLARE @idfMaterials TABLE (
		idfMaterial BIGINT
	);

	DECLARE @idfTestings TABLE (
		idfTesting BIGINT,
		idfMaterial BIGINT
	);

	INSERT INTO @idfMaterials
		SELECT
			DISTINCT idfMaterial
		FROM
			tlbMaterial
		WHERE
			idfVector = @idfVector

	INSERT INTO @idfTestings
		SELECT
			DISTINCT idfTesting, idfMaterial
		FROM
			tlbTesting
		WHERE
			idfMaterial IN (
				SELECT
					idfMaterial
				FROM
					@idfMaterials
			)

	DECLARE @rowId							BIGINT
	DECLARE @idfMaterial					BIGINT
	DECLARE @idfMaterialNew					BIGINT
	DECLARE @idfVectorSurveillanceSession	BIGINT
	DECLARE @idfHostVector					BIGINT = NULL
	DECLARE @strVectorID					NVARCHAR(50)
	DECLARE @strFieldVectorID				NVARCHAR(50) = NULL
	DECLARE @idfLocation					BIGINT = NULL
	DECLARE @intElevation					BIGINT = NULL
	DECLARE @idfsSurrounding				BIGINT = NULL
	DECLARE @strGEOReferenceSources			NVARCHAR(500) = NULL
	DECLARE @idfCollectedByOffice			BIGINT
	DECLARE @idfCollectedByPerson			BIGINT = NULL
	DECLARE @datCollectionDateTime			DATETIME
	DECLARE @idfsCollectionMethod			BIGINT = NULL
	DECLARE @idfsBasisOfRecord				BIGINT = NULL
	DECLARE @idfsVectorType					BIGINT
	DECLARE @idfsVectorSubType				BIGINT
	DECLARE @intQuantity					INT
	DECLARE @idfsSex						BIGINT = NULL
	DECLARE @idfIdentIFiedByOffice			BIGINT = NULL
	DECLARE @idfIdentIFiedByPerson			BIGINT = NULL
	DECLARE @datIdentIFiedDateTime			DATETIME = NULL
	DECLARE @idfsIdentIFicationMethod		BIGINT = NULL
	DECLARE @idfObservation					BIGINT = NULL
	DECLARE @idfsDayPeriod					BIGINT = NULL
	DECLARE @strComment						NVARCHAR(500) = NULL
	DECLARE @idfsEctoparASitesCollected		BIGINT = NULL

	DECLARE @idfsSampleType 				BIGINT
	DECLARE @idfRootMaterial 				BIGINT = NULL
	DECLARE @idfParentMaterial 				BIGINT = NULL
	DECLARE @idfHuman 						BIGINT = NULL
	DECLARE @idfSpecies 					BIGINT = NULL
	DECLARE @idfAnimal 						BIGINT = NULL
	DECLARE @idfMonitoringSession 			BIGINT = NULL
	DECLARE @idfFieldCollectedByPerson 		BIGINT = NULL
	DECLARE @idfFieldCollectedByOffice 		BIGINT = NULL
	DECLARE @idfMainTest 					BIGINT = NULL
	DECLARE @datFieldCollectionDate 		DATETIME = NULL
	DECLARE @datFieldSentDate 				DATETIME = NULL
	DECLARE @strFieldBarcode 				NVARCHAR(200) = NULL
	DECLARE @strCalculatedCaseID 			NVARCHAR(200) = NULL
	DECLARE @strCalculatedHumanName 		NVARCHAR(700) = NULL
	DECLARE @idfSubdivision 				BIGINT = NULL	
	DECLARE @idfsSampleStatus 				BIGINT = NULL
	DECLARE @idfInDepartment 				BIGINT = NULL
	DECLARE @idfDestroyedByPerson 			BIGINT = NULL
	DECLARE @datEnteringDate 				DATETIME = NULL
	DECLARE @datDestructionDate 			DATETIME = NULL
	DECLARE @strBarcode 					NVARCHAR(200) = NULL
	DECLARE @strNote 						NVARCHAR(500) = NULL
	DECLARE @idfsSite 						BIGINT
	DECLARE @intRowStatus 					INT = 0
	DECLARE @idfSendToOffice 				BIGINT = NULL
	DECLARE @blnReadOnly 					BIT
	DECLARE @idfsBirdStatus 				BIGINT = NULL
	DECLARE @idfHumanCase 					BIGINT = NULL
	DECLARE @idfVetCase 					BIGINT = NULL
	DECLARE @datAccession 					DATETIME = NULL
	DECLARE @idfsAccessionCondition 		BIGINT = NULL
	DECLARE @strCondition 					NVARCHAR(200) = NULL
	DECLARE @idfAccesionByPerson 			BIGINT = NULL
	DECLARE @idfsDestructionMethod 			BIGINT = NULL
	DECLARE @idfsCurrentSite 				BIGINT = NULL
	DECLARE @idfsSampleKind 				BIGINT = NULL
	DECLARE @idfMarkedForDispositionByPerson BIGINT = NULL
	DECLARE @datOutOfRepositoryDate 		DATETIME = NULL
	DECLARE @strMaintenanceFlag 			NVARCHAR(20) = NULL

	DECLARE @idfTesting						BIGINT
	DECLARE @idfTestingNew					BIGINT
	DECLARE @idfsTestName					BIGINT = NULL
	DECLARE @idfsTestCategory				BIGINT = NULL
	DECLARE @idfsTestResult					BIGINT = NULL
	DECLARE @idfsTestStatus					BIGINT
	DECLARE @idfsDiagnosis					BIGINT
	DECLARE @idfBatchTest					BIGINT = NULL
	DECLARE @intTestNumber					INT = NULL
	DECLARE @datStartedDate					DATETIME = NULL
	DECLARE @datConcludedDate				DATETIME = NULL
	DECLARE @idfTestedByOffice				BIGINT = NULL
	DECLARE @idfTestedByPerson				BIGINT = NULL
	DECLARE @idfResultEnteredByOffice		BIGINT = NULL
	DECLARE @idfResultEnteredByPerson		BIGINT = NULL
	DECLARE @idfValidatedByOffice			BIGINT = NULL
	DECLARE @idfValidatedByPerson			BIGINT = NULL
	DECLARE @blnNonLaboratoryTest			BIT
	DECLARE @blnExternalTest				BIT = NULL
	DECLARE @idfPerformedByOffice			BIGINT = NULL
	DECLARE @datReceivedDate				DATETIME = NULL
	DECLARE @strContactPerson				NVARCHAR(200) = NULL

	BEGIN TRY
	
			BEGIN
				SELECT
						@idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
						@idfHostVector = idfHostVector, 
						@strFieldVectorID = strFieldVectorID, 
						@idfLocation = idfLocation, 
						@intElevation = intElevation, 
						@idfsSurrounding = idfsSurrounding, 
						@strGEOReferenceSources = strGEOReferenceSources, 
						@idfCollectedByOffice = idfCollectedByOffice, 
						@idfCollectedByPerson = idfCollectedByPerson, 
						@datCollectionDateTime = datCollectionDateTime, 
						@idfsCollectionMethod = idfsCollectionMethod, 
						@idfsBASisOfRecord = idfsBASisOfRecord, 
						@idfsVectorType = idfsVectorType, 
						@idfsVectorSubType = idfsVectorSubType, 
						@intQuantity = intQuantity, 
						@idfsSex = idfsSex, 
						@idfIdentIFiedByOffice = idfIdentIFiedByOffice, 
						@idfIdentIFiedByPerson = idfIdentIFiedByPerson, 
						@datIdentIFiedDateTime = datIdentIFiedDateTime, 
						@idfsIdentIFicationMethod = idfsIdentIFicationMethod, 
						@idfObservation = idfObservation,
						@idfsDayPeriod = idfsDayPeriod,
						@strComment = strComment,
						@idfsEctoparASitesCollected = idfsEctoparASitesCollected
				FROM
					tlbVector
				WHERE
						idfVector = @idfVector

				INSERT INTO @SupressSelect
				EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @idfVectorNew OUTPUT

				INSERT INTO @SupressSelect
				EXEC dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector', @strVectorID OUTPUT , NULL --N'AS Session'

				INSERT INTO dbo.tlbVector
						(
							idfVector, 
							idfVectorSurveillanceSession, 
							idfHostVector, 
							strVectorID, 
							strFieldVectorID, 
							idfLocation, 
							intElevation, 
							idfsSurrounding, 
							strGEOReferenceSources, 
							idfCollectedByOffice, 
							idfCollectedByPerson, 
							datCollectionDateTime, 
							idfsCollectionMethod, 
							idfsBasisOfRecord, 
							idfsVectorType, 
							idfsVectorSubType, 
							intQuantity, 
							idfsSex, 
							idfIdentIFiedByOffice, 
							idfIdentIFiedByPerson, 
							datIdentIFiedDateTime, 
							idfsIdentIFicationMethod, 
							idfObservation
							,idfsDayPeriod
							,strComment
							,idfsEctoparASitesCollected
						)
					VALUES
						(
							@idfVectorNew, 
							@idfVectorSurveillanceSession, 
							@idfHostVector, 
							@strVectorID, 
							@strFieldVectorID, 
							@idfLocation, 
							@intElevation, 
							@idfsSurrounding, 
							@strGEOReferenceSources, 
							@idfCollectedByOffice, 
							@idfCollectedByPerson, 
							@datCollectionDateTime, 
							@idfsCollectionMethod, 
							@idfsBasisOfRecord, 
							@idfsVectorType, 
							@idfsVectorSubType, 
							@intQuantity, 
							@idfsSex, 
							@idfIdentifiedByOffice, 
							@idfIdentIFiedByPerson, 
							@datIdentIFiedDateTime, 
							@idfsIdentIFicationMethod, 
							@idfObservation,
							@idfsDayPeriod,
							@strComment,
							@idfsEctoparASitesCollected
					)
			END;
		
		WHILE EXISTS ( SELECT * FROM @idfMaterials )
			BEGIN
				SELECT
					TOP 1
					@rowId = idfMaterial
				FROM 
					@idfMaterials

				SELECT
					@idfsSampleType = idfsSampleType, 
					@idfRootMaterial = idfRootMaterial, 
					@idfParentMaterial = idfParentMaterial, 
					@idfHuman = idfHuman, 
					@idfSpecies = idfSpecies, 
					@idfAnimal = idfAnimal, 
					@idfMonitoringSession = idfMonitoringSession, 
					@idfFieldCollectedByPerson = idfFieldCollectedByPerson, 
					@idfFieldCollectedByOffice = idfFieldCollectedByOffice, 
					@idfMainTest = idfMainTest, 
					@datFieldCollectionDate = datFieldCollectionDate, 
					@datFieldSentDate = datFieldSentDate, 
					@strFieldBarcode = strFieldBarcode, 
					@strCalculatedCaseID = strCalculatedCaseID, 
					@strCalculatedHumanName = strCalculatedHumanName, 
					@idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
					@idfVector = @idfVectorNew, 
					@idfSubdivision = idfSubdivision, 
					@idfsSampleStatus = idfsSampleStatus, 
					@idfInDepartment = idfInDepartment, 
					@idfDestroyedByPerson = idfDestroyedByPerson, 
					@datEnteringDate = datEnteringDate, 
					@datDestructionDate = datDestructionDate, 
					@strBarcode = strBarcode, 
					@strNote = strNote, 
					@idfsSite = idfsSite, 
					@intRowStatus = intRowStatus, 
					@idfSendToOffice = idfSendToOffice, 
					@blnReadOnly = blnReadOnly, 
					@idfsBirdStatus = idfsBirdStatus, 
					@idfHumanCase = idfHumanCase, 
					@idfVetCase = idfVetCase, 
					@datAccession = datAccession, 
					@idfsAccessionCondition = idfsAccessionCondition, 
					@strCondition = strCondition, 
					@idfAccesionByPerson = idfAccesionByPerson, 
					@idfsDestructionMethod = idfsDestructionMethod, 
					@idfsCurrentSite = idfsCurrentSite, 
					@idfsSampleKind = idfsSampleKind, 
					@idfMarkedForDispositionByPerson = idfMarkedForDispositionByPerson, 
					@datOutOfRepositoryDate = datOutOfRepositoryDate, 
					@strMaintenanceFlag = strMaintenanceFlag 
				FROM
					tlbMaterial
				WHERE
					idfMaterial = @rowId

				INSERT INTO @SupressSelect
				EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbMaterial', @idfMaterialNew OUTPUT;

				INSERT INTO @SupressSelect
				EXEC	dbo.USP_GBL_NextNumber_GET 'Sample Field Barcode', @strBarcode OUTPUT, NULL 

				--Update the temp table so that we will have the association between the new material and tests
				UPDATE @idfTestings
				SET idfMaterial = @idfMaterialNew
				WHERE 
					idfMaterial = @rowid

				INSERT INTO	dbo.tlbMaterial
					(						
							idfMaterial, 
							idfsSampleType, 
							idfRootMaterial, 
							idfParentMaterial, 
							idfHuman, 
							idfSpecies, 
							idfAnimal, 
							idfMonitoringSession, 
							idfFieldCollectedByPerson, 
							idfFieldCollectedByOffice, 
							idfMainTest, 
							datFieldCollectionDate, 
							datFieldSentDate, 
							strFieldBarcode, 
							strCalculatedCaseID, 
							strCalculatedHumanName, 
							idfVectorSurveillanceSession, 
							idfVector, 
							idfSubdivision, 
							idfsSampleStatus, 
							idfInDepartment, 
							idfDestroyedByPerson, 
							datEnteringDate, 
							datDestructionDate, 
							strBarcode, 
							strNote, 
							idfsSite, 
							intRowStatus, 
							idfSendToOffice, 
							blnReadOnly, 
							idfsBirdStatus, 
							idfHumanCase, 
							idfVetCase, 
							datAccession, 
							idfsAccessionCondition, 
							strCondition, 
							idfAccesionByPerson, 
							idfsDestructionMethod, 
							idfsCurrentSite, 
							idfsSampleKind, 
							idfMarkedForDispositionByPerson, 
							datOutOfRepositoryDate, 
							strMaintenanceFlag 
					)
					VALUES
					(
							@idfMaterialNew, 
							@idfsSampleType, 
							@idfRootMaterial, 
							@idfParentMaterial, 
							@idfHuman, 
							@idfSpecies, 
							@idfAnimal, 
							@idfMonitoringSession, 
							@idfFieldCollectedByPerson, 
							@idfFieldCollectedByOffice, 
							@idfMainTest, 
							@datFieldCollectionDate, 
							@datFieldSentDate, 
							@strFieldBarcode, 
							@strCalculatedCaseID, 
							@strCalculatedHumanName, 
							@idfVectorSurveillanceSession, 
							@idfVectorNew, 
							@idfSubdivision, 
							@idfsSampleStatus, 
							@idfInDepartment, 
							@idfDestroyedByPerson, 
							@datEnteringDate, 
							@datDestructionDate, 
							@strBarcode, 
							@strNote, 
							@idfsSite, 
							@intRowStatus, 
							@idfSendToOffice, 
							@blnReadOnly, 
							@idfsBirdStatus, 
							@idfHumanCase, 
							@idfVetCase, 
							@datAccession, 
							@idfsAccessionCondition, 
							@strCondition, 
							@idfAccesionByPerson, 
							@idfsDestructionMethod, 
							@idfsCurrentSite, 
							@idfsSampleKind, 
							@idfMarkedForDispositionByPerson, 
							@datOutOfRepositoryDate, 
							@strMaintenanceFlag 
					);
					
					DELETE FROM @idfMaterials
					WHERE idfMaterial = @rowId
				END;
		
		WHILE EXISTS ( SELECT * FROM @idfTestings )
			BEGIN
				SELECT
					TOP 1
					@rowId = idfTesting
				FROM 
					@idfTestings

				SELECT
					@idfsTestName = idfsTestName, 
					@idfsTestCategory = idfsTestCategory, 
					@idfsTestResult = idfsTestResult, 
					@idfsTestStatus = idfsTestStatus, 
					@idfsDiagnosis = idfsDiagnosis, 
					@idfBatchTest = idfBatchTest, 
					@idfObservation = idfObservation, 
					@intTestNumber = intTestNumber, 
					@strNote = strNote, 
					@intRowStatus = intRowStatus, 
					@datStartedDate = datStartedDate, 
					@datConcludedDate = datConcludedDate, 
					@idfTestedByOffice = idfTestedByOffice, 
					@idfTestedByPerson = idfTestedByPerson, 
					@idfResultEnteredByOffice = idfResultEnteredByOffice, 
					@idfResultEnteredByPerson = idfResultEnteredByPerson, 
					@idfValidatedByOffice = idfValidatedByOffice, 
					@idfValidatedByPerson = idfValidatedByPerson, 
					@blnReadOnly = blnReadOnly, 
					@blnNonLaboratoryTest = blnNonLaboratoryTest, 
					@blnExternalTest = blnExternalTest, 
					@idfPerformedByOffice = idfPerformedByOffice, 
					@datReceivedDate = datReceivedDate, 
					@strContactPerson = strContactPerson, 
					@strMaintenanceFlag = strMaintenanceFlag
				FROM
					tlbTesting
				WHERE
					idfTesting = @rowId

				INSERT INTO @SupressSelect
				EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @idfTestingNew OUTPUT;

				SELECT
					@idfMaterialNew = idfMaterial
				FROM
					@idfTestings
				WHERE
					idfTesting = @rowId

				INSERT INTO	dbo.tlbTesting
				(						
						idfTesting, 
						idfsTestName, 
						idfsTestCategory, 
						idfsTestResult, 
						idfsTestStatus, 
						idfsDiagnosis, 
						idfMaterial, 
						idfBatchTest, 
						idfObservation, 
						intTestNumber, 
						strNote, 
						intRowStatus, 
						datStartedDate, 
						datConcludedDate, 
						idfTestedByOffice, 
						idfTestedByPerson, 
						idfResultEnteredByOffice, 
						idfResultEnteredByPerson, 
						idfValidatedByOffice, 
						idfValidatedByPerson, 
						blnReadOnly, 
						blnNonLaboratoryTest, 
						blnExternalTest, 
						idfPerformedByOffice, 
						datReceivedDate, 
						strContactPerson, 
						strMaintenanceFlag
				)
				VALUES
				(
						@idfTestingNew, 
						@idfsTestName, 
						@idfsTestCategory, 
						@idfsTestResult, 
						@idfsTestStatus, 
						@idfsDiagnosis, 
						@idfMaterialNew, 
						@idfBatchTest, 
						@idfObservation, 
						@intTestNumber, 
						@strNote, 
						@intRowStatus, 
						@datStartedDate, 
						@datConcludedDate, 
						@idfTestedByOffice, 
						@idfTestedByPerson, 
						@idfResultEnteredByOffice, 
						@idfResultEnteredByPerson, 
						@idfValidatedByOffice, 
						@idfValidatedByPerson, 
						@blnReadOnly, 
						@blnNonLaboratoryTest, 
						@blnExternalTest, 
						@idfPerformedByOffice, 
						@datReceivedDate, 
						@strContactPerson, 
						@strMaintenanceFlag
				);
				
				DELETE FROM @idfTestings
				WHERE idfTesting = @rowId

			END;
											
		IF @@TRANCOUNT > 0 AND @returnCode =0
			COMMIT
	END TRY

	BEGIN CATCH
			IF @@Trancount > 0
				ROLLBACK
				SET @returnCode = ERROR_NUMBER()
				SET @returnMsg = 
			   'ErrorNumber: ' + convert(varchar, ERROR_NUMBER() ) 
			   + ' ErrorSeverity: ' + convert(varchar, ERROR_SEVERITY() )
			   + ' ErrorState: ' + convert(varchar,ERROR_STATE())
			   + ' ErrorProcedure: ' + isnull(ERROR_PROCEDURE() ,'')
			   + ' ErrorLine: ' +  convert(varchar,isnull(ERROR_LINE() ,''))
			   + ' ErrorMessage: '+ ERROR_MESSAGE();
			   THROW;

	END CATCH

	SELECT 
		@returnCode AS ReturnCode
		,@returnMsg AS ReturnMsg

END
GO
PRINT N'Creating Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail_Orig]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		08/10/2022	Initial release for Veterinary Aggregate Report.
-- Srini Goli		10/07/2022  used Sql Veriant data type.
-- Srini Goli		10/12/2022  Without Templete also have to display Report.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools) and correct final query

/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfsAggrCaseType = 10102002,
        @idfAggrCaseList = '155564770002071'

*/
-- ================================================================================================
CREATE PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail_Orig] (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS  BIGINT= NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		--[intNumRow] INT,
		[Type] BIGINT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		--idfsReferenceType BIGINT
		)
	
	DECLARE @tmpDetails TABLE (
		idfCaseObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfVersion BIGINT
	)

	BEGIN TRY
			BEGIN

			--Get Selected Agg Cases
			INSERT INTO @AggrCaseTable (
					[idfAggrCase],
					[intRowNumber]
					)
				SELECT CAST([Value] AS BIGINT),
					ROW_NUMBER() OVER (
						ORDER BY [Value]
						)
				FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfCaseObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
				--AND (@idfAggrCase IS NULL OR a.idfAggrCase = @idfAggrCase)
				--	AND (
				--		CASE 
				--			WHEN @idfsAggrCaseType IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfsAggrCaseType, '') = @idfsAggrCaseType
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		)
				--	AND (
				--		CASE 
				--			WHEN @idfAggrCase IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfAggrCase, '') = @idfAggrCase
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		);
				
				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfCaseObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					ROW_NUMBER() OVER (
						ORDER BY [idfCaseObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrVetCaseMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode

				FROM dbo.tlbAggrVetCaseMTX mtx
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form header details
				IF @idfsFormTemplate IS NOT NULL 
				BEGIN
					INSERT INTO @tempFlexForm
					EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
							@LangID =@LangID, 
							@idfsDiagnosis= NULL, 
							@idfsFormType = 10034012, 
							@idfsFormTemplate=@idfsFormTemplate
				END 
				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				IF (SELECT COUNT(*) FROM @tempFlexForm)>1
					SELECT	ff.ParameterName
							,sl.strSpecies
							,ff.idfsParameter
							,ff.ParameterOrder
							,m.idfsDiagnosis
							,m.strDefault
							,m.strOIECode
							,m.intNumRow
							,ap.varValue as varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
					FROM @tempFlexForm ff 
					CROSS JOIN @tmpMatrix m 
					LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter and m.idfAggrVetCaseMTX=ap.idfRow
					LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
					ORDER BY intNumRow
				 ELSE
				 	SELECT	'' as ParameterName
							,sl.strSpecies
							,null as idfsParameter
							,null as ParameterOrder
							,m.idfsDiagnosis
							,m.strDefault
							,m.strOIECode
							,m.intNumRow
							,ap.varValue as varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
					FROM @tmpMatrix m 
					LEFT JOIN @tmpActivityParameters ap ON  m.idfAggrVetCaseMTX=ap.idfRow
					LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
					ORDER BY intNumRow
				--Test
				--Dynamic Pivot
				--DECLARE @ColumnToPivot  NVARCHAR(255),
				--		@ListToPivot    NVARCHAR(255),
				--		@SqlStatement NVARCHAR(MAX)
				--SET @ColumnToPivot='ParameterName'
				--SELECT @ListToPivot= COALESCE(@ListToPivot + ',','') +  N'[' + CAST(ff.ParameterName AS varchar(100)) + ']'
				--FROM @tempFlexForm ff
				--ORDER BY ParameterOrder

				----SELECT @ListToPivot
				----EXEC dbo.USP_ADMIN_DynamicPivotTableInSql @ColumnToPivot,@ListToPivot

				--  SET @SqlStatement = N'
				--	SELECT * FROM (
				--	  SELECT
				--	    [intNumRow],
				--		[strDefault],
				--		[strIDC10],
				--		[ParameterName],
				--		[varValue]
				--	  FROM #tempReport
				--	) Results
				--	PIVOT (
				--	  MAX([varValue])
				--	  FOR ['+@ColumnToPivot+']
				--	  IN (
				--		'+@ListToPivot+'
				--	  )
				--	) AS PivotTable
				--	ORDER BY intNumRow
				--  ';

			END

		--DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[spAsQueryCopyPublished]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQueryCopyPublished]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsFolderCopyPublished]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsFolderCopyPublished]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_HUMAN_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsLayoutCopyPublished]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsLayoutCopyPublished]';


GO
PRINT N'Update complete.';


GO
