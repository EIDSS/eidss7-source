/*
Deployment script for AVRDEV_EIDSS7_GG_ARCHIVE_MOA

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
/*
The column [dbo].[tasQuery].[idfEmployee] is being dropped, data loss could occur.

The column [dbo].[tasQuery].[idfOffice] is being dropped, data loss could occur.
*/



PRINT N'Dropping Foreign Key [dbo].[FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID]...';


GO
ALTER TABLE [dbo].[AccessRule] DROP CONSTRAINT [FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRule_trtBaseReference]...';


GO
ALTER TABLE [dbo].[AccessRule] DROP CONSTRAINT [FK_AccessRule_trtBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRule] DROP CONSTRAINT [FK_AccessRule_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRule_tstSite_GrantingActorSiteID]...';


GO
ALTER TABLE [dbo].[AccessRule] DROP CONSTRAINT [FK_AccessRule_tstSite_GrantingActorSiteID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRuleActor_AccessRule_AccessRuleID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] DROP CONSTRAINT [FK_AccessRuleActor_AccessRule_AccessRuleID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRuleActor_tflSiteGroup_ActorSiteGroupID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] DROP CONSTRAINT [FK_AccessRuleActor_tflSiteGroup_ActorSiteGroupID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRuleActor_tlbEmployeGroup_ActorEmployeeGroupID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] DROP CONSTRAINT [FK_AccessRuleActor_tlbEmployeGroup_ActorEmployeeGroupID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRuleActor_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] DROP CONSTRAINT [FK_AccessRuleActor_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRuleActor_tstSite_ActorSiteID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] DROP CONSTRAINT [FK_AccessRuleActor_tstSite_ActorSiteID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRuleActor_tstUserTable_ActorUserID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] DROP CONSTRAINT [FK_AccessRuleActor_tstUserTable_ActorUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRulePermission_AccessRule_AccessRuleID]...';


GO
ALTER TABLE [dbo].[AccessRulePermission] DROP CONSTRAINT [FK_AccessRulePermission_AccessRule_AccessRuleID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRulePermission_trtBaseReference_AccessPermissionID]...';


GO
ALTER TABLE [dbo].[AccessRulePermission] DROP CONSTRAINT [FK_AccessRulePermission_trtBaseReference_AccessPermissionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRulePermission_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRulePermission] DROP CONSTRAINT [FK_AccessRulePermission_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObjectSysFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AppObjectSysFunction] DROP CONSTRAINT [FK_AppObjectSysFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObjSysFunction_AppObj_AppObjectNameID]...';


GO
ALTER TABLE [dbo].[AppObjectSysFunction] DROP CONSTRAINT [FK_AppObjSysFunction_AppObj_AppObjectNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObjSysFunction_BaseReference_SysFunctionID]...';


GO
ALTER TABLE [dbo].[AppObjectSysFunction] DROP CONSTRAINT [FK_AppObjSysFunction_BaseReference_SysFunctionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppSessionLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AppSessionLog] DROP CONSTRAINT [FK_AppSessionLog_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SesionLog_BaseRef_AppModuleGroupID]...';


GO
ALTER TABLE [dbo].[AppSessionLog] DROP CONSTRAINT [FK_SesionLog_BaseRef_AppModuleGroupID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SessionLog_BaseRef_ModuleConstantID]...';


GO
ALTER TABLE [dbo].[AppSessionLog] DROP CONSTRAINT [FK_SessionLog_BaseRef_ModuleConstantID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ArchiveSetting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ArchiveSetting] DROP CONSTRAINT [FK_ArchiveSetting_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ASPNetRole_tlbEmployeeGRoup_idfemployeeGroup]...';


GO
ALTER TABLE [dbo].[AspNetRoles] DROP CONSTRAINT [FK_ASPNetRole_tlbEmployeeGRoup_idfemployeeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserClaims] DROP CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserLogins] DROP CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ASPNetUserPreviousPasswords_AspNetUsers_Id]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [FK_ASPNetUserPreviousPasswords_AspNetUsers_Id];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles] DROP CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles] DROP CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AspNetUsers_tstUserTable_UserID]...';


GO
ALTER TABLE [dbo].[AspNetUsers] DROP CONSTRAINT [FK_AspNetUsers_tstUserTable_UserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AspNetUserTokens_AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserTokens] DROP CONSTRAINT [FK_AspNetUserTokens_AspNetUsers_UserId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventSystemLog_AppSessionLog]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] DROP CONSTRAINT [FK_AuditEventSystemLog_AppSessionLog];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventSystemLog_BaseRef_AuditObjectID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] DROP CONSTRAINT [FK_AuditEventSystemLog_BaseRef_AuditObjectID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventSystemLog_idfsModule]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] DROP CONSTRAINT [FK_AuditEventSystemLog_idfsModule];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventSystemLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] DROP CONSTRAINT [FK_AuditEventSystemLog_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventSystemLog_tstSite_idfSiteID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] DROP CONSTRAINT [FK_AuditEventSystemLog_tstSite_idfSiteID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventSystemLog_UserTable_idfAppUserID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] DROP CONSTRAINT [FK_AuditEventSystemLog_UserTable_idfAppUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventUserLog_AuditEventSystemLog_LogUID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] DROP CONSTRAINT [FK_AuditEventUserLog_AuditEventSystemLog_LogUID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventUserLog_BaseRef_AuditEventTypeID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] DROP CONSTRAINT [FK_AuditEventUserLog_BaseRef_AuditEventTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventUserLog_BaseRef_AuditObjectTypeID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] DROP CONSTRAINT [FK_AuditEventUserLog_BaseRef_AuditObjectTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventUserLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] DROP CONSTRAINT [FK_AuditEventUserLog_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventUserLog_tstSite_idfSiteID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] DROP CONSTRAINT [FK_AuditEventUserLog_tstSite_idfSiteID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventUserLog_UserTable_idfAppUserID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] DROP CONSTRAINT [FK_AuditEventUserLog_UserTable_idfAppUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_DiagnosisGroupToGender_trtBaseReference_DiagnosisGroupID]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] DROP CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_DiagnosisGroupID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_DiagnosisGroupToGender_trtBaseReference_GenderID]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] DROP CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_GenderID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_DiagnosisGroupToGender_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] DROP CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_dotNetAppenderLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[dotNetAppenderLog] DROP CONSTRAINT [FK_dotNetAppenderLog_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_EmployeeToInstitution_AspNetUserId]...';


GO
ALTER TABLE [dbo].[EmployeeToInstitution] DROP CONSTRAINT [FK_EmployeeToInstitution_AspNetUserId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_EmployeeToInstitution_Office]...';


GO
ALTER TABLE [dbo].[EmployeeToInstitution] DROP CONSTRAINT [FK_EmployeeToInstitution_Office];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_EmployeeToInstitution_UserId]...';


GO
ALTER TABLE [dbo].[EmployeeToInstitution] DROP CONSTRAINT [FK_EmployeeToInstitution_UserId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_EventSubscription_tstUserTable]...';


GO
ALTER TABLE [dbo].[EventSubscription] DROP CONSTRAINT [FK_EventSubscription_tstUserTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElement_ffFormTemplate__idfsFormTemplate_R_1373]...';


GO
ALTER TABLE [dbo].[ffDecorElement] DROP CONSTRAINT [FK_ffDecorElement_ffFormTemplate__idfsFormTemplate_R_1373];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElement_ffSection__idfsSection_R_1379]...';


GO
ALTER TABLE [dbo].[ffDecorElement] DROP CONSTRAINT [FK_ffDecorElement_ffSection__idfsSection_R_1379];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElement_trtBaseReference__idfsDecorElementType_R_1376]...';


GO
ALTER TABLE [dbo].[ffDecorElement] DROP CONSTRAINT [FK_ffDecorElement_trtBaseReference__idfsDecorElementType_R_1376];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElement_trtBaseReference__idfsLanguage_R_1375]...';


GO
ALTER TABLE [dbo].[ffDecorElement] DROP CONSTRAINT [FK_ffDecorElement_trtBaseReference__idfsLanguage_R_1375];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElement_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDecorElement] DROP CONSTRAINT [FK_ffDecorElement_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElementLine_ffDecorElement__idfDecorElement_R_1401]...';


GO
ALTER TABLE [dbo].[ffDecorElementLine] DROP CONSTRAINT [FK_ffDecorElementLine_ffDecorElement__idfDecorElement_R_1401];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElementLine_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDecorElementLine] DROP CONSTRAINT [FK_ffDecorElementLine_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElementText_ffDecorElement__idfDecorElement_R_1374]...';


GO
ALTER TABLE [dbo].[ffDecorElementText] DROP CONSTRAINT [FK_ffDecorElementText_ffDecorElement__idfDecorElement_R_1374];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElementText_trtBaseReference__idfsBaseReference_R_1389]...';


GO
ALTER TABLE [dbo].[ffDecorElementText] DROP CONSTRAINT [FK_ffDecorElementText_trtBaseReference__idfsBaseReference_R_1389];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElementText_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDecorElementText] DROP CONSTRAINT [FK_ffDecorElementText_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantType_gisReferenceType__idfsGISReferenceType_R_1669]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] DROP CONSTRAINT [FK_ffDeterminantType_gisReferenceType__idfsGISReferenceType_R_1669];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantType_trtBaseReference__idfsFormType_R_1660]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] DROP CONSTRAINT [FK_ffDeterminantType_trtBaseReference__idfsFormType_R_1660];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] DROP CONSTRAINT [FK_ffDeterminantType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantType_trtReferenceType__idfsReferenceType_R_950]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] DROP CONSTRAINT [FK_ffDeterminantType_trtReferenceType__idfsReferenceType_R_950];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantValue_gisBaseReference__idfsGISBaseReference_R_1670]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] DROP CONSTRAINT [FK_ffDeterminantValue_gisBaseReference__idfsGISBaseReference_R_1670];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantValue_trtBaseReference__idfsBaseReference_R_949]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] DROP CONSTRAINT [FK_ffDeterminantValue_trtBaseReference__idfsBaseReference_R_949];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantValue_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] DROP CONSTRAINT [FK_ffDeterminantValue_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_FFormControlValue_FFormTemplate]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] DROP CONSTRAINT [FK_FFormControlValue_FFormTemplate];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffFormTemplate_trtBaseReference__idfsFormTemplate_R_1385]...';


GO
ALTER TABLE [dbo].[ffFormTemplate] DROP CONSTRAINT [FK_ffFormTemplate_trtBaseReference__idfsFormTemplate_R_1385];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffFormTemplate_trtBaseReference__idfsFormType_R_1656]...';


GO
ALTER TABLE [dbo].[ffFormTemplate] DROP CONSTRAINT [FK_ffFormTemplate_trtBaseReference__idfsFormType_R_1656];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffFormTemplate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffFormTemplate] DROP CONSTRAINT [FK_ffFormTemplate_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_ffParameterType__idfsParameterType_R_21]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_ffParameterType__idfsParameterType_R_21];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_ffSection__idfsSection_R_1380]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_ffSection__idfsSection_R_1380];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsEditor_R_1387]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_trtBaseReference__idfsEditor_R_1387];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsFormType_R_1658]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_trtBaseReference__idfsFormType_R_1658];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsParameter_R_1382]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_trtBaseReference__idfsParameter_R_1382];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsParameterCaption_R_1383]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_trtBaseReference__idfsParameterCaption_R_1383];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterDesignOption_ffFormTemplate__idfsFormTemplate_R_1361]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] DROP CONSTRAINT [FK_ffParameterDesignOption_ffFormTemplate__idfsFormTemplate_R_1361];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterDesignOption_ffParameter__idfsParameter_R_1360]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] DROP CONSTRAINT [FK_ffParameterDesignOption_ffParameter__idfsParameter_R_1360];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterDesignOption_trtBaseReference__idfsLanguage_R_1381]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] DROP CONSTRAINT [FK_ffParameterDesignOption_trtBaseReference__idfsLanguage_R_1381];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterDesignOption_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] DROP CONSTRAINT [FK_ffParameterDesignOption_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterFixedPresetValue_ffParameterType__idfsParameterType_R_925]...';


GO
ALTER TABLE [dbo].[ffParameterFixedPresetValue] DROP CONSTRAINT [FK_ffParameterFixedPresetValue_ffParameterType__idfsParameterType_R_925];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterFixedPresetValue_trtBaseReference__idfsParameterFixedPresetValue_R_1398]...';


GO
ALTER TABLE [dbo].[ffParameterFixedPresetValue] DROP CONSTRAINT [FK_ffParameterFixedPresetValue_trtBaseReference__idfsParameterFixedPresetValue_R_1398];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterFixedPresetValue_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterFixedPresetValue] DROP CONSTRAINT [FK_ffParameterFixedPresetValue_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForAction_ffParameterForTemplate__idfsParameter_idfsFormTemplate_R]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] DROP CONSTRAINT [FK_ffParameterForAction_ffParameterForTemplate__idfsParameter_idfsFormTemplate_R];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForAction_ffRule__idfsRule_R_820]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] DROP CONSTRAINT [FK_ffParameterForAction_ffRule__idfsRule_R_820];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForAction_trtBaseReference__idfsRuleAction_R_1392]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] DROP CONSTRAINT [FK_ffParameterForAction_trtBaseReference__idfsRuleAction_R_1392];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] DROP CONSTRAINT [FK_ffParameterForAction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForFunction_ffParameterForTemplate__idfsParameter___________________________________________________idfsFormTempla]...';


GO
ALTER TABLE [dbo].[ffParameterForFunction] DROP CONSTRAINT [FK_ffParameterForFunction_ffParameterForTemplate__idfsParameter___________________________________________________idfsFormTempla];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForFunction_ffRule__idfsRule_R_1647]...';


GO
ALTER TABLE [dbo].[ffParameterForFunction] DROP CONSTRAINT [FK_ffParameterForFunction_ffRule__idfsRule_R_1647];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterForFunction] DROP CONSTRAINT [FK_ffParameterForFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForTemplate_ffFormTemplate__idfsFormTemplate_R_91]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] DROP CONSTRAINT [FK_ffParameterForTemplate_ffFormTemplate__idfsFormTemplate_R_91];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForTemplate_ffParameter__idfsParameter_R_2]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] DROP CONSTRAINT [FK_ffParameterForTemplate_ffParameter__idfsParameter_R_2];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForTemplate_trtBaseReference__idfsEditMode_R_1388]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] DROP CONSTRAINT [FK_ffParameterForTemplate_trtBaseReference__idfsEditMode_R_1388];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForTemplate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] DROP CONSTRAINT [FK_ffParameterForTemplate_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterType_trtBaseReference__idfsParameterType_R_1395]...';


GO
ALTER TABLE [dbo].[ffParameterType] DROP CONSTRAINT [FK_ffParameterType_trtBaseReference__idfsParameterType_R_1395];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterType] DROP CONSTRAINT [FK_ffParameterType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterType_trtReferenceType__idfsReferenceType_R_927]...';


GO
ALTER TABLE [dbo].[ffParameterType] DROP CONSTRAINT [FK_ffParameterType_trtReferenceType__idfsReferenceType_R_927];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_FFRule_FFormTemplate]...';


GO
ALTER TABLE [dbo].[ffRule] DROP CONSTRAINT [FK_FFRule_FFormTemplate];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRule_ffRuleFunction__idfsRuleFunction_R_1646]...';


GO
ALTER TABLE [dbo].[ffRule] DROP CONSTRAINT [FK_ffRule_ffRuleFunction__idfsRuleFunction_R_1646];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRule_trtBaseReference__idfsCheckPoint_R_1390]...';


GO
ALTER TABLE [dbo].[ffRule] DROP CONSTRAINT [FK_ffRule_trtBaseReference__idfsCheckPoint_R_1390];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRule_trtBaseReference__idfsRule_R_1394]...';


GO
ALTER TABLE [dbo].[ffRule] DROP CONSTRAINT [FK_ffRule_trtBaseReference__idfsRule_R_1394];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRule_trtBaseReference__idfsRuleMessage_R_1391]...';


GO
ALTER TABLE [dbo].[ffRule] DROP CONSTRAINT [FK_ffRule_trtBaseReference__idfsRuleMessage_R_1391];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffRule] DROP CONSTRAINT [FK_ffRule_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRuleConstant_ffRule__idfsRule_R_1648]...';


GO
ALTER TABLE [dbo].[ffRuleConstant] DROP CONSTRAINT [FK_ffRuleConstant_ffRule__idfsRule_R_1648];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRuleConstant_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffRuleConstant] DROP CONSTRAINT [FK_ffRuleConstant_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRuleFunction_trtBaseReference__idfsRuleFunction_R_1393]...';


GO
ALTER TABLE [dbo].[ffRuleFunction] DROP CONSTRAINT [FK_ffRuleFunction_trtBaseReference__idfsRuleFunction_R_1393];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRuleFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffRuleFunction] DROP CONSTRAINT [FK_ffRuleFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSection_ffSection__idfsParentSection_R_1362]...';


GO
ALTER TABLE [dbo].[ffSection] DROP CONSTRAINT [FK_ffSection_ffSection__idfsParentSection_R_1362];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSection_trtBaseReference__idfsFormType_R_1659]...';


GO
ALTER TABLE [dbo].[ffSection] DROP CONSTRAINT [FK_ffSection_trtBaseReference__idfsFormType_R_1659];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSection_trtBaseReference__idfsSection_R_1378]...';


GO
ALTER TABLE [dbo].[ffSection] DROP CONSTRAINT [FK_ffSection_trtBaseReference__idfsSection_R_1378];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSection_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSection] DROP CONSTRAINT [FK_ffSection_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSection_trtMatrixType__idfsMatrixType]...';


GO
ALTER TABLE [dbo].[ffSection] DROP CONSTRAINT [FK_ffSection_trtMatrixType__idfsMatrixType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionDesignOption_ffSectionForTemplate__idfsFormTemplate________________________________________________idfsSection_R_163]...';


GO
ALTER TABLE [dbo].[ffSectionDesignOption] DROP CONSTRAINT [FK_ffSectionDesignOption_ffSectionForTemplate__idfsFormTemplate________________________________________________idfsSection_R_163];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionDesignOption_trtBaseReference__idfsLanguage_R_1377]...';


GO
ALTER TABLE [dbo].[ffSectionDesignOption] DROP CONSTRAINT [FK_ffSectionDesignOption_trtBaseReference__idfsLanguage_R_1377];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionDesignOption_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSectionDesignOption] DROP CONSTRAINT [FK_ffSectionDesignOption_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForAction_ffRule__idfsRule_R_1403]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] DROP CONSTRAINT [FK_ffSectionForAction_ffRule__idfsRule_R_1403];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForAction_ffSectionForTemplate__idfsFormTemplate_____________________________________________idfsSection_R_1402]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] DROP CONSTRAINT [FK_ffSectionForAction_ffSectionForTemplate__idfsFormTemplate_____________________________________________idfsSection_R_1402];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForAction_trtBaseReference__idfsRuleAction_R_1404]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] DROP CONSTRAINT [FK_ffSectionForAction_trtBaseReference__idfsRuleAction_R_1404];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] DROP CONSTRAINT [FK_ffSectionForAction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForTemplate_ffFormTemplate__idfsFormTemplate_R_1400]...';


GO
ALTER TABLE [dbo].[ffSectionForTemplate] DROP CONSTRAINT [FK_ffSectionForTemplate_ffFormTemplate__idfsFormTemplate_R_1400];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForTemplate_ffSection__idfsSection_R_1399]...';


GO
ALTER TABLE [dbo].[ffSectionForTemplate] DROP CONSTRAINT [FK_ffSectionForTemplate_ffSection__idfsSection_R_1399];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForTemplate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSectionForTemplate] DROP CONSTRAINT [FK_ffSectionForTemplate_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisBaseReference_gisReferenceType__idfsGISReferenceType_R_1632]...';


GO
ALTER TABLE [dbo].[gisBaseReference] DROP CONSTRAINT [FK_gisBaseReference_gisReferenceType__idfsGISReferenceType_R_1632];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisBaseReference] DROP CONSTRAINT [FK_gisBaseReference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisCountry_gisBaseReference__idfsCountry_R_1634]...';


GO
ALTER TABLE [dbo].[gisCountry] DROP CONSTRAINT [FK_gisCountry_gisBaseReference__idfsCountry_R_1634];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisCountry_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisCountry] DROP CONSTRAINT [FK_gisCountry_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisDistrictSubdistrict_gisRayon__idfsGeoObject]...';


GO
ALTER TABLE [dbo].[gisDistrictSubdistrict] DROP CONSTRAINT [FK_gisDistrictSubdistrict_gisRayon__idfsGeoObject];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisDistrictSubdistrict_gisRayon__idfsParent]...';


GO
ALTER TABLE [dbo].[gisDistrictSubdistrict] DROP CONSTRAINT [FK_gisDistrictSubdistrict_gisRayon__idfsParent];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisDistrictSubdistrict_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisDistrictSubdistrict] DROP CONSTRAINT [FK_gisDistrictSubdistrict_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisLegendSymbol_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisLegendSymbol] DROP CONSTRAINT [FK_gisLegendSymbol_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisMainCityForRayon_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[gisMainCityForRayon] DROP CONSTRAINT [FK_gisMainCityForRayon_gisRayon__idfsRayon];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisMainCityForRayon_gisSettlement__idfsMainSettlement]...';


GO
ALTER TABLE [dbo].[gisMainCityForRayon] DROP CONSTRAINT [FK_gisMainCityForRayon_gisSettlement__idfsMainSettlement];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisMetadata_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisMetadata] DROP CONSTRAINT [FK_gisMetadata_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisNewID_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisNewID] DROP CONSTRAINT [FK_gisNewID_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisOtherBaseReference_gisReferenceType__idfsGISReferenceType_R_1678]...';


GO
ALTER TABLE [dbo].[gisOtherBaseReference] DROP CONSTRAINT [FK_gisOtherBaseReference_gisReferenceType__idfsGISReferenceType_R_1678];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisOtherBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisOtherBaseReference] DROP CONSTRAINT [FK_gisOtherBaseReference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisOtherStringNameTranslation_gisBaseReference__idfsLanguage_R_1680]...';


GO
ALTER TABLE [dbo].[gisOtherStringNameTranslation] DROP CONSTRAINT [FK_gisOtherStringNameTranslation_gisBaseReference__idfsLanguage_R_1680];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisOtherStringNameTranslation_gisOtherBaseReference__idfsGISOtherBaseReference_R_1679]...';


GO
ALTER TABLE [dbo].[gisOtherStringNameTranslation] DROP CONSTRAINT [FK_gisOtherStringNameTranslation_gisOtherBaseReference__idfsGISOtherBaseReference_R_1679];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisOtherStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisOtherStringNameTranslation] DROP CONSTRAINT [FK_gisOtherStringNameTranslation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRayon_gisBaseReference__idfsRayon_R_1636]...';


GO
ALTER TABLE [dbo].[gisRayon] DROP CONSTRAINT [FK_gisRayon_gisBaseReference__idfsRayon_R_1636];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRayon_gisCountry__idfsCountry_R_233]...';


GO
ALTER TABLE [dbo].[gisRayon] DROP CONSTRAINT [FK_gisRayon_gisCountry__idfsCountry_R_233];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRayon_gisRegion__idfsRegion_R_121]...';


GO
ALTER TABLE [dbo].[gisRayon] DROP CONSTRAINT [FK_gisRayon_gisRegion__idfsRegion_R_121];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRayon_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisRayon] DROP CONSTRAINT [FK_gisRayon_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisReferenceType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisReferenceType] DROP CONSTRAINT [FK_gisReferenceType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRegion_gisBaseReference__idfsRegion_R_1635]...';


GO
ALTER TABLE [dbo].[gisRegion] DROP CONSTRAINT [FK_gisRegion_gisBaseReference__idfsRegion_R_1635];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRegion_gisCountry__idfsCountry_R_232]...';


GO
ALTER TABLE [dbo].[gisRegion] DROP CONSTRAINT [FK_gisRegion_gisCountry__idfsCountry_R_232];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRegion_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisRegion] DROP CONSTRAINT [FK_gisRegion_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisSettlement_gisBaseReference__idfsSettlement_R_1637]...';


GO
ALTER TABLE [dbo].[gisSettlement] DROP CONSTRAINT [FK_gisSettlement_gisBaseReference__idfsSettlement_R_1637];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisSettlement_gisBaseReference__idfsSettlementType_R_1638]...';


GO
ALTER TABLE [dbo].[gisSettlement] DROP CONSTRAINT [FK_gisSettlement_gisBaseReference__idfsSettlementType_R_1638];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisSettlement_gisCountry__idfsCountry_R_7]...';


GO
ALTER TABLE [dbo].[gisSettlement] DROP CONSTRAINT [FK_gisSettlement_gisCountry__idfsCountry_R_7];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisSettlement_gisRayon__idfsRayon_R_9]...';


GO
ALTER TABLE [dbo].[gisSettlement] DROP CONSTRAINT [FK_gisSettlement_gisRayon__idfsRayon_R_9];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisSettlement_gisRegion__idfsRegion_R_8]...';


GO
ALTER TABLE [dbo].[gisSettlement] DROP CONSTRAINT [FK_gisSettlement_gisRegion__idfsRegion_R_8];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisSettlement_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisSettlement] DROP CONSTRAINT [FK_gisSettlement_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisStringNameTranslation_gisBaseReference__idfsGISBaseReference_R_1639]...';


GO
ALTER TABLE [dbo].[gisStringNameTranslation] DROP CONSTRAINT [FK_gisStringNameTranslation_gisBaseReference__idfsGISBaseReference_R_1639];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisStringNameTranslation_gisBaseReference__idfsLanguage_R_1640]...';


GO
ALTER TABLE [dbo].[gisStringNameTranslation] DROP CONSTRAINT [FK_gisStringNameTranslation_gisBaseReference__idfsLanguage_R_1640];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisStringNameTranslation] DROP CONSTRAINT [FK_gisStringNameTranslation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisUserLayer_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisUserLayer] DROP CONSTRAINT [FK_gisUserLayer_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisUserLayer_tstUserTable]...';


GO
ALTER TABLE [dbo].[gisUserLayer] DROP CONSTRAINT [FK_gisUserLayer_tstUserTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWHOMap_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWHOMap] DROP CONSTRAINT [FK_gisWHOMap_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_idfsLocation_gisLocation]...';


GO
ALTER TABLE [dbo].[gisWHOMap] DROP CONSTRAINT [FK_idfsLocation_gisLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK__gisWKBCou__idfsG__37E6D44C]...';


GO
ALTER TABLE [dbo].[gisWKBCountry] DROP CONSTRAINT [FK__gisWKBCou__idfsG__37E6D44C];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBCountry_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBCountry] DROP CONSTRAINT [FK_gisWKBCountry_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBDistrict_gisBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBDistrict] DROP CONSTRAINT [FK_gisWKBDistrict_gisBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBDistrict_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBDistrict] DROP CONSTRAINT [FK_gisWKBDistrict_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBDistrictReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBDistrictReady] DROP CONSTRAINT [FK_gisWKBDistrictReady_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBEarthRoad_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBEarthRoad] DROP CONSTRAINT [FK_gisWKBEarthRoad_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBEarthRoad_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBEarthRoad] DROP CONSTRAINT [FK_gisWKBEarthRoad_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBEarthRoad_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBEarthRoad] DROP CONSTRAINT [FK_gisWKBEarthRoad_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBForest_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBForest] DROP CONSTRAINT [FK_gisWKBForest_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBForest_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBForest] DROP CONSTRAINT [FK_gisWKBForest_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBForest_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBForest] DROP CONSTRAINT [FK_gisWKBForest_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBHighway_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBHighway] DROP CONSTRAINT [FK_gisWKBHighway_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBHighway_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBHighway] DROP CONSTRAINT [FK_gisWKBHighway_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBHighway_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBHighway] DROP CONSTRAINT [FK_gisWKBHighway_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBInlandWater_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBInlandWater] DROP CONSTRAINT [FK_gisWKBInlandWater_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBLake_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBLake] DROP CONSTRAINT [FK_gisWKBLake_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBLake_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBLake] DROP CONSTRAINT [FK_gisWKBLake_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBLake_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBLake] DROP CONSTRAINT [FK_gisWKBLake_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBLanduse_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBLanduse] DROP CONSTRAINT [FK_gisWKBLanduse_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBLanduse_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBLanduse] DROP CONSTRAINT [FK_gisWKBLanduse_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBLanduse_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBLanduse] DROP CONSTRAINT [FK_gisWKBLanduse_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBMainRiver_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBMainRiver] DROP CONSTRAINT [FK_gisWKBMainRiver_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBMainRiver_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBMainRiver] DROP CONSTRAINT [FK_gisWKBMainRiver_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBMainRiver_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBMainRiver] DROP CONSTRAINT [FK_gisWKBMainRiver_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBMajorRoad_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBMajorRoad] DROP CONSTRAINT [FK_gisWKBMajorRoad_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBMajorRoad_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBMajorRoad] DROP CONSTRAINT [FK_gisWKBMajorRoad_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBMajorRoad_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBMajorRoad] DROP CONSTRAINT [FK_gisWKBMajorRoad_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBPath_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBPath] DROP CONSTRAINT [FK_gisWKBPath_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBPath_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBPath] DROP CONSTRAINT [FK_gisWKBPath_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBPath_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBPath] DROP CONSTRAINT [FK_gisWKBPath_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRailroad_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRailroad] DROP CONSTRAINT [FK_gisWKBRailroad_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRailroad_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRailroad] DROP CONSTRAINT [FK_gisWKBRailroad_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRailroad_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRailroad] DROP CONSTRAINT [FK_gisWKBRailroad_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK__gisWKBRay__idfsG__35FE8BDA]...';


GO
ALTER TABLE [dbo].[gisWKBRayon] DROP CONSTRAINT [FK__gisWKBRay__idfsG__35FE8BDA];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRayon_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRayon] DROP CONSTRAINT [FK_gisWKBRayon_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRayonReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRayonReady] DROP CONSTRAINT [FK_gisWKBRayonReady_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK__gisWKBReg__idfsG__34164368]...';


GO
ALTER TABLE [dbo].[gisWKBRegion] DROP CONSTRAINT [FK__gisWKBReg__idfsG__34164368];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRegion_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRegion] DROP CONSTRAINT [FK_gisWKBRegion_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRegionReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRegionReady] DROP CONSTRAINT [FK_gisWKBRegionReady_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRiver_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRiver] DROP CONSTRAINT [FK_gisWKBRiver_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRiver_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRiver] DROP CONSTRAINT [FK_gisWKBRiver_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRiver_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRiver] DROP CONSTRAINT [FK_gisWKBRiver_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRiverPolygon_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRiverPolygon] DROP CONSTRAINT [FK_gisWKBRiverPolygon_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRiverPolygon_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRiverPolygon] DROP CONSTRAINT [FK_gisWKBRiverPolygon_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRiverPolygon_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRiverPolygon] DROP CONSTRAINT [FK_gisWKBRiverPolygon_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRuralDistrict_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRuralDistrict] DROP CONSTRAINT [FK_gisWKBRuralDistrict_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRuralDistrict_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRuralDistrict] DROP CONSTRAINT [FK_gisWKBRuralDistrict_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRuralDistrict_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRuralDistrict] DROP CONSTRAINT [FK_gisWKBRuralDistrict_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSea_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBSea] DROP CONSTRAINT [FK_gisWKBSea_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSea_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSea] DROP CONSTRAINT [FK_gisWKBSea_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK__gisWKBSet__idfsG__322DFAF6]...';


GO
ALTER TABLE [dbo].[gisWKBSettlement] DROP CONSTRAINT [FK__gisWKBSet__idfsG__322DFAF6];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSettlement_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSettlement] DROP CONSTRAINT [FK_gisWKBSettlement_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSettlementReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSettlementReady] DROP CONSTRAINT [FK_gisWKBSettlementReady_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSmallRiver_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBSmallRiver] DROP CONSTRAINT [FK_gisWKBSmallRiver_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSmallRiver_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBSmallRiver] DROP CONSTRAINT [FK_gisWKBSmallRiver_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSmallRiver_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSmallRiver] DROP CONSTRAINT [FK_gisWKBSmallRiver_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[[FK_HumanActualAddlInfo_Human_UID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [[FK_HumanActualAddlInfo_Human_UID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_AgeUOM]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_AgeUOM];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_ContactPhone2NbrType]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_ContactPhone2NbrType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_ContactPhoneNbrType]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_ContactPhoneNbrType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_IsEmployed]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_IsEmployed];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActualAddlInfo_tlbHUmanActual_idfHumanActual]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActualAddlInfo_tlbHUmanActual_idfHumanActual];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActualAddlInfo_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActualAddlInfo_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActulaAddlIfo_BaseRef_IsSchool]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActulaAddlIfo_BaseRef_IsSchool];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActulaAddlIfo_GeoLocationShared_AtlAddressID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActulaAddlIfo_GeoLocationShared_AtlAddressID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActulaAddlIfo_GeosharedaddressID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActulaAddlIfo_GeosharedaddressID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlIfo_BaseRef_IsSchool]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlIfo_BaseRef_IsSchool];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlIfo_Geo_addressID]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlIfo_Geo_addressID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_ContactPhoneNbr2Type]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_BaseRef_ContactPhoneNbr2Type];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_ContactPhoneNbrType]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_BaseRef_ContactPhoneNbrType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_IsEmployed]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_BaseRef_IsEmployed];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_IsInSchool]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_BaseRef_IsInSchool];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_ReportedAgeUOM]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_BaseRef_ReportedAgeUOM];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_GeoLocation_AltAddress]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_GeoLocation_AltAddress];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_Human_idfhuman]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_Human_idfhuman];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanDiseaseReportRelationship_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] DROP CONSTRAINT [FK_HumanDiseaseReportRelationship_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanDiseaseReportReln_BaseRef_RelTypeID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] DROP CONSTRAINT [FK_HumanDiseaseReportReln_BaseRef_RelTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanDiseaseReportReln_tlbHumanCase_HumanDiseaseReportID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] DROP CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_HumanDiseaseReportID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanDiseaseReportReln_tlbHumanCase_RelatedToHumanDiseaseReportIdRoot]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] DROP CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_RelatedToHumanDiseaseReportIdRoot];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanDiseaseReportReln_tlbHumanCase_RelateToHumanDiseaseReportID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] DROP CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_RelateToHumanDiseaseReportID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanDiseaseReportVaccination_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportVaccination] DROP CONSTRAINT [FK_HumanDiseaseReportVaccination_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[R_1417]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportVaccination] DROP CONSTRAINT [R_1417];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupConfigParm_trtBaseReference_idfsBaseReference]...';


GO
ALTER TABLE [dbo].[LkupConfigParm] DROP CONSTRAINT [FK_LkupConfigParm_trtBaseReference_idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupConfigParm_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupConfigParm] DROP CONSTRAINT [FK_LkupConfigParm_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_CountryRoleToStandardRoleMap_gidCountry_CountryID]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] DROP CONSTRAINT [FK_CountryRoleToStandardRoleMap_gidCountry_CountryID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_CountryRoleToStandardRoleMap_trtBaseReference_StadardRoleID]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] DROP CONSTRAINT [FK_CountryRoleToStandardRoleMap_trtBaseReference_StadardRoleID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObj_EIDSSMenu_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_AppObj_EIDSSMenu_MenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObj_ObjName]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_AppObj_ObjName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObj_ObjType]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_AppObj_ObjType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObj_PageToolTip]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_AppObj_PageToolTip];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenu_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] DROP CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_MenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenu_BaseRef_ParentMenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] DROP CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_ParentMenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenu_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] DROP CONSTRAINT [FK_LkupEIDSSMenu_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] DROP CONSTRAINT [FK_LkupEIDSSMenuToEventType_BaseRef_MenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] DROP CONSTRAINT [FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] DROP CONSTRAINT [FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenuToSystemFunction_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] DROP CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_BaseRef_MenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenuToSystemFunction_BaseRef_SystemFunctionID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] DROP CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_BaseRef_SystemFunctionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenuToSystemFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] DROP CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LKUPNextKey_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LKUPNextKey] DROP CONSTRAINT [FK_LKUPNextKey_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleDashboardObject_AppObject_SashboardObjectID]...';


GO
ALTER TABLE [dbo].[LkupRoleDashboardObject] DROP CONSTRAINT [FK_LkupRoleDashboardObject_AppObject_SashboardObjectID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleDashboardObject_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleDashboardObject] DROP CONSTRAINT [FK_LkupRoleDashboardObject_idfEmployee];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleDashboardObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupRoleDashboardObject] DROP CONSTRAINT [FK_LkupRoleDashboardObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleMenuAccess_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleMenuAccess] DROP CONSTRAINT [FK_LkupRoleMenuAccess_idfEmployee];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleMenuAccess_LkupEIDSSMenu_MenuID]...';


GO
ALTER TABLE [dbo].[LkupRoleMenuAccess] DROP CONSTRAINT [FK_LkupRoleMenuAccess_LkupEIDSSMenu_MenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleMenuAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupRoleMenuAccess] DROP CONSTRAINT [FK_LkupRoleMenuAccess_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_lkupRoleSysFunctionAccess_BaseReference_SysFunctionOperationID]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] DROP CONSTRAINT [FK_lkupRoleSysFunctionAccess_BaseReference_SysFunctionOperationID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_lkupRoleSysFunctionAccess_BaseReference_SystemFunction]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] DROP CONSTRAINT [FK_lkupRoleSysFunctionAccess_BaseReference_SystemFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_lkupRoleSysFunctionAccess_trtBaseRef_AccessPermissionID]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] DROP CONSTRAINT [FK_lkupRoleSysFunctionAccess_trtBaseRef_AccessPermissionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleSystemFunctionAccess_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] DROP CONSTRAINT [FK_LkupRoleSystemFunctionAccess_idfEmployee];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleSystemFunctionAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] DROP CONSTRAINT [FK_LkupRoleSystemFunctionAccess_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_BaseReference_idfsModule]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] DROP CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_idfsModule];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_BaseReference_SysFunctionOperationID]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] DROP CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_SysFunctionOperationID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_BaseReference_SystemFunction]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] DROP CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_SystemFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] DROP CONSTRAINT [FK_LkupSystemFunctionToOperation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_locBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[locBaseReference] DROP CONSTRAINT [FK_locBaseReference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_locStringNameTranslation_locBaseReference__idflBaseReference_R_1702]...';


GO
ALTER TABLE [dbo].[locStringNameTranslation] DROP CONSTRAINT [FK_locStringNameTranslation_locBaseReference__idflBaseReference_R_1702];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_locStringNameTranslation_trtBaseReference__idfsLanguage_R_1692]...';


GO
ALTER TABLE [dbo].[locStringNameTranslation] DROP CONSTRAINT [FK_locStringNameTranslation_trtBaseReference__idfsLanguage_R_1692];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_locStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[locStringNameTranslation] DROP CONSTRAINT [FK_locStringNameTranslation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LOINCEidssMapping_trtBaseReference__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[LOINCEidssMapping] DROP CONSTRAINT [FK_LOINCEidssMapping_trtBaseReference__idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LOINCEidssMapping_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LOINCEidssMapping] DROP CONSTRAINT [FK_LOINCEidssMapping_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LOINCEidssMapping_trtReferenecType__idfsReferenceType]...';


GO
ALTER TABLE [dbo].[LOINCEidssMapping] DROP CONSTRAINT [FK_LOINCEidssMapping_trtReferenecType__idfsReferenceType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_MonitoringSessionToSampleType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] DROP CONSTRAINT [FK_MonitoringSessionToSampleType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToSampleType_tlbMonitoringSession_MonitoringSessionID]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] DROP CONSTRAINT [FK_tlbMonitoringSessionToSampleType_tlbMonitoringSession_MonitoringSessionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToSampleType_trtSampleType_SampleType]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] DROP CONSTRAINT [FK_tlbMonitoringSessionToSampleType_trtSampleType_SampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToSampleType_trtSpeciesType_SpeciesType]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] DROP CONSTRAINT [FK_tlbMonitoringSessionToSampleType_trtSpeciesType_SpeciesType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseContact_OutbreakCase_OutbreakCaseReportUID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] DROP CONSTRAINT [FK_OutbreakCaseContact_OutbreakCase_OutbreakCaseReportUID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseContact_tlbContactedCasePerson_idfContactedCasePersonID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] DROP CONSTRAINT [FK_OutbreakCaseContact_tlbContactedCasePerson_idfContactedCasePersonID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseContact_tlbHuman_idfHuman]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] DROP CONSTRAINT [FK_OutbreakCaseContact_tlbHuman_idfHuman];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseContact_tlbObservation_ContactTracingObservationID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] DROP CONSTRAINT [FK_OutbreakCaseContact_tlbObservation_ContactTracingObservationID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseContact_trtBaseReference_ContactRelationshipTypeID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] DROP CONSTRAINT [FK_OutbreakCaseContact_trtBaseReference_ContactRelationshipTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseContact_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] DROP CONSTRAINT [FK_OutbreakCaseContact_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCase_tlbHUmanCase_idfHumanCaseID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] DROP CONSTRAINT [FK_OutbreakCase_tlbHUmanCase_idfHumanCaseID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCase_tlbObservation_CaseEPIObservationID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] DROP CONSTRAINT [FK_OutbreakCase_tlbObservation_CaseEPIObservationID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCase_tlbOutbreak_idfOutbreakID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] DROP CONSTRAINT [FK_OutbreakCase_tlbOutbreak_idfOutbreakID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCase_tlbVetCase_idfVetCaseID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] DROP CONSTRAINT [FK_OutbreakCase_tlbVetCase_idfVetCaseID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] DROP CONSTRAINT [FK_OutbreakCaseReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreatkCase_Observation_OutbreakCaseObservationID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] DROP CONSTRAINT [FK_OutbreatkCase_Observation_OutbreakCaseObservationID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_outbreakSpeciesParameter_tlbOutbreak_OutbreakID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] DROP CONSTRAINT [FK_outbreakSpeciesParameter_tlbOutbreak_OutbreakID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakSpeciesParameter_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] DROP CONSTRAINT [FK_OutbreakSpeciesParameter_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakSpeciesParm_FormTemplate_CaseMonitoringTemplateID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] DROP CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_CaseMonitoringTemplateID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakSpeciesParm_FormTemplate_CaseQuestionaireTemplateID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] DROP CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_CaseQuestionaireTemplateID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakSpeciesParm_FormTemplate_ContactTracingTemplateID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] DROP CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_ContactTracingTemplateID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SecurityPolicyConfig_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[SecurityPolicyConfiguration] DROP CONSTRAINT [FK_SecurityPolicyConfig_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SiteToSiteAccess_BaseReference_AaccessPermissionID]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] DROP CONSTRAINT [FK_SiteToSiteAccess_BaseReference_AaccessPermissionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SiteToSiteAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] DROP CONSTRAINT [FK_SiteToSiteAccess_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SiteToSiteAccess_tstSite_GranteeSite]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] DROP CONSTRAINT [FK_SiteToSiteAccess_tstSite_GranteeSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SiteToSiteAccess_tstSite_GrantToSite]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] DROP CONSTRAINT [FK_SiteToSiteAccess_tstSite_GrantToSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SystemPreference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[SystemPreference] DROP CONSTRAINT [FK_SystemPreference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasAggregateFunction_trtBaseReference__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasAggregateFunction] DROP CONSTRAINT [FK_tasAggregateFunction_trtBaseReference__idfsAggregateFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasAggregateFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasAggregateFunction] DROP CONSTRAINT [FK_tasAggregateFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasFieldSourceForTable_tasSearchField__idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] DROP CONSTRAINT [FK_tasFieldSourceForTable_tasSearchField__idfsSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasFieldSourceForTable_tasSearchTable__idfSearchTable]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] DROP CONSTRAINT [FK_tasFieldSourceForTable_tasSearchTable__idfSearchTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasFieldSourceForTable_tasSearchTable__idfUnionSearchTable]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] DROP CONSTRAINT [FK_tasFieldSourceForTable_tasSearchTable__idfUnionSearchTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasFieldSourceForTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] DROP CONSTRAINT [FK_tasFieldSourceForTable_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_tasglLayoutFolder__idfsLayoutFolder_R_1698_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_tasglLayoutFolder__idfsLayoutFolder_R_1698_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_tasglQuery__idfsQuery_R_1326_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_tasglQuery__idfsQuery_R_1326_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_tlbPerson__idfPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_trtBaseReference__idfsDefaultGroupDate]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsDefaultGroupDate];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_trtBaseReference__idfsDescription_R_1717_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsDescription_R_1717_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_trtBaseReference__idfsLayout_R_1708_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsLayout_R_1708_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutFolder_tasglLayoutFolder__idfsParentLayoutFolder_R_1715_1]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] DROP CONSTRAINT [FK_tasglLayoutFolder_tasglLayoutFolder__idfsParentLayoutFolder_R_1715_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutFolder_tasglQuery__idfsQuery_R_1697_1]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] DROP CONSTRAINT [FK_tasglLayoutFolder_tasglQuery__idfsQuery_R_1697_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutFolder_trtBaseReference__idfsLayoutFolder_R_1703_1]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] DROP CONSTRAINT [FK_tasglLayoutFolder_trtBaseReference__idfsLayoutFolder_R_1703_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutFolder_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] DROP CONSTRAINT [FK_tasglLayoutFolder_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_tasAggregateFunction__idfsAggregateFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_tasglLayoutSearchField__idfDateLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_tasglLayoutSearchField__idfDateLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_tasglLayoutSearchField__idfUnitLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_tasglLayoutSearchField__idfUnitLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_tasglQuerySearchField__idfQuerySearchField]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_tasglQuerySearchField__idfQuerySearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_tasLayout_idflLayout]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_tasLayout_idflLayout];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_trtBaseReference__idfsGroupDate]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference__idfsGroupDate];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_trtBaseReference_idfsLayoutSearchFieldName]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference_idfsLayoutSearchFieldName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutToMapImage_tasglLayout__idfsLayout]...';


GO
ALTER TABLE [dbo].[tasglLayoutToMapImage] DROP CONSTRAINT [FK_tasglLayoutToMapImage_tasglLayout__idfsLayout];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutToMapImage_tasglMapImage__idfMapImage]...';


GO
ALTER TABLE [dbo].[tasglLayoutToMapImage] DROP CONSTRAINT [FK_tasglLayoutToMapImage_tasglMapImage__idfMapImage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutToMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayoutToMapImage] DROP CONSTRAINT [FK_tasglLayoutToMapImage_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglMapImage] DROP CONSTRAINT [FK_tasglMapImage_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuery_trtBaseReference__idfsDescription_R_1718_1]...';


GO
ALTER TABLE [dbo].[tasglQuery] DROP CONSTRAINT [FK_tasglQuery_trtBaseReference__idfsDescription_R_1718_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuery_trtBaseReference__idfsQueryName_R_1709_1]...';


GO
ALTER TABLE [dbo].[tasglQuery] DROP CONSTRAINT [FK_tasglQuery_trtBaseReference__idfsQueryName_R_1709_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuery_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuery] DROP CONSTRAINT [FK_tasglQuery_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQueryConditionGroup_tasglQueryConditionGroup__idfParentQueryConditionGroup_R_1345_1]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] DROP CONSTRAINT [FK_tasglQueryConditionGroup_tasglQueryConditionGroup__idfParentQueryConditionGroup_R_1345_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfQuerySearchObject_R_1344_1]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] DROP CONSTRAINT [FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfQuerySearchObject_R_1344_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfSubQuerySearchObject]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] DROP CONSTRAINT [FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfSubQuerySearchObject];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQueryConditionGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] DROP CONSTRAINT [FK_tasglQueryConditionGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchField_ffParameter__idfsParameter_R_1353_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] DROP CONSTRAINT [FK_tasglQuerySearchField_ffParameter__idfsParameter_R_1353_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchField_tasglQuerySearchObject__idfQuerySearchObject_R_1351_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] DROP CONSTRAINT [FK_tasglQuerySearchField_tasglQuerySearchObject__idfQuerySearchObject_R_1351_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchField_tasglSearchFieldList__idfsSearchField_R_1352_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] DROP CONSTRAINT [FK_tasglQuerySearchField_tasglSearchFieldList__idfsSearchField_R_1352_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] DROP CONSTRAINT [FK_tasglQuerySearchField_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchFieldCondition_tasglQueryConditionGroup__idfQueryConditionGroup_R_1342_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] DROP CONSTRAINT [FK_tasglQuerySearchFieldCondition_tasglQueryConditionGroup__idfQueryConditionGroup_R_1342_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchFieldCondition_tasglQuerySearchField__idfQuerySearchField_R_1343_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] DROP CONSTRAINT [FK_tasglQuerySearchFieldCondition_tasglQuerySearchField__idfQuerySearchField_R_1343_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] DROP CONSTRAINT [FK_tasglQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchObject_tasglQuery__idfsQueryName_R_1327_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] DROP CONSTRAINT [FK_tasglQuerySearchObject_tasglQuery__idfsQueryName_R_1327_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchObject_tasglQuerySearchObject__idfParentQuerySearchObject_R_1329_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] DROP CONSTRAINT [FK_tasglQuerySearchObject_tasglQuerySearchObject__idfParentQuerySearchObject_R_1329_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] DROP CONSTRAINT [FK_tasglQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchObject_trtBaseReference__idfsReportType]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] DROP CONSTRAINT [FK_tasglQuerySearchObject_trtBaseReference__idfsReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] DROP CONSTRAINT [FK_tasglQuerySearchObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglView_tasglLayout__idfsLayout]...';


GO
ALTER TABLE [dbo].[tasglView] DROP CONSTRAINT [FK_tasglView_tasglLayout__idfsLayout];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglView_tasglViewColumn__idfChartXAxisViewColumn]...';


GO
ALTER TABLE [dbo].[tasglView] DROP CONSTRAINT [FK_tasglView_tasglViewColumn__idfChartXAxisViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglView_tasglViewColumn__idfMapAdminUnitViewColumn]...';


GO
ALTER TABLE [dbo].[tasglView] DROP CONSTRAINT [FK_tasglView_tasglViewColumn__idfMapAdminUnitViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglView_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasglView] DROP CONSTRAINT [FK_tasglView_trtBaseReference__idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglView_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglView] DROP CONSTRAINT [FK_tasglView_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewBand_tasglLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglViewBand] DROP CONSTRAINT [FK_tasglViewBand_tasglLayoutSearchField__idfLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewBand_tasglView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasglViewBand] DROP CONSTRAINT [FK_tasglViewBand_tasglView__idfView_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewBand_tasglViewBand__idfParentViewBand]...';


GO
ALTER TABLE [dbo].[tasglViewBand] DROP CONSTRAINT [FK_tasglViewBand_tasglViewBand__idfParentViewBand];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewBand_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglViewBand] DROP CONSTRAINT [FK_tasglViewBand_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_tasAggregateFunction__idfsAggregateFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_tasglLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_tasglLayoutSearchField__idfLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_tasglView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_tasglView__idfView_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_tasglViewBand__idfViewBand]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_tasglViewBand__idfViewBand];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_tasglViewColumn__idfDenominatorViewColumn]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_tasglViewColumn__idfDenominatorViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_tasglViewColumn__idfSourceViewColumn]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_tasglViewColumn__idfSourceViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_locBaseReference__idflDescription_R_1717]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_locBaseReference__idflDescription_R_1717];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_locBaseReference__idflLayout_R_1708]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_locBaseReference__idflLayout_R_1708];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_tasglLayout__idfsGlobalLayout_R_1794]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_tasglLayout__idfsGlobalLayout_R_1794];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_tasLayoutFolder__idflLayoutFolder_R_1698]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_tasLayoutFolder__idflLayoutFolder_R_1698];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_tasQuery__idflQuery_R_1326]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_tasQuery__idflQuery_R_1326];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_tlbPerson__idfPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_trtBaseReference__idfsDefaultGroupDate]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_trtBaseReference__idfsDefaultGroupDate];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutFolder_locBaseReference__idflLayoutFolder_R_1703]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] DROP CONSTRAINT [FK_tasLayoutFolder_locBaseReference__idflLayoutFolder_R_1703];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutFolder_tasglLayoutFolder__idfsGlobalLayoutFolder_R_1796]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] DROP CONSTRAINT [FK_tasLayoutFolder_tasglLayoutFolder__idfsGlobalLayoutFolder_R_1796];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutFolder_tasLayoutFolder__idflParentLayoutFolder_R_1715]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] DROP CONSTRAINT [FK_tasLayoutFolder_tasLayoutFolder__idflParentLayoutFolder_R_1715];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutFolder_tasQuery__idflQuery_R_1697]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] DROP CONSTRAINT [FK_tasLayoutFolder_tasQuery__idflQuery_R_1697];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutFolder_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] DROP CONSTRAINT [FK_tasLayoutFolder_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_locBaseReference_idflLayoutSearchFieldName]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_locBaseReference_idflLayoutSearchFieldName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_tasAggregateFunction__idfsAggregateFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_tasLayout_idflLayout]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_tasLayout_idflLayout];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_tasLayoutSearchField__idfDateLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_tasLayoutSearchField__idfDateLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_tasLayoutSearchField__idfUnitLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_tasLayoutSearchField__idfUnitLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_tasQuerySearchField__idfQuerySearchField]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_tasQuerySearchField__idfQuerySearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_trtBaseReference__idfsGroupDate]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_trtBaseReference__idfsGroupDate];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutToMapImage_tasLayout__idflLayout]...';


GO
ALTER TABLE [dbo].[tasLayoutToMapImage] DROP CONSTRAINT [FK_tasLayoutToMapImage_tasLayout__idflLayout];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutToMapImage_tasMapImage__idfMapImage]...';


GO
ALTER TABLE [dbo].[tasLayoutToMapImage] DROP CONSTRAINT [FK_tasLayoutToMapImage_tasMapImage__idfMapImage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutToMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayoutToMapImage] DROP CONSTRAINT [FK_tasLayoutToMapImage_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasMainTableForObject_tasSearchObject__idfsSearchObject]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] DROP CONSTRAINT [FK_tasMainTableForObject_tasSearchObject__idfsSearchObject];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasMainTableForObject_tasSearchTable__idfMainSearchTable]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] DROP CONSTRAINT [FK_tasMainTableForObject_tasSearchTable__idfMainSearchTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasMainTableForObject_tasSearchTable__idfMandatorySearchTable]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] DROP CONSTRAINT [FK_tasMainTableForObject_tasSearchTable__idfMandatorySearchTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasMainTableForObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] DROP CONSTRAINT [FK_tasMainTableForObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasMapImage_tasglMapImage__idfGlobalMapImage]...';


GO
ALTER TABLE [dbo].[tasMapImage] DROP CONSTRAINT [FK_tasMapImage_tasglMapImage__idfGlobalMapImage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasMapImage] DROP CONSTRAINT [FK_tasMapImage_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuery_locBaseReference__idflDescription_R_1718]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP CONSTRAINT [FK_tasQuery_locBaseReference__idflDescription_R_1718];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuery_locBaseReference__idflQueryName_R_1709]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP CONSTRAINT [FK_tasQuery_locBaseReference__idflQueryName_R_1709];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuery_tasglQuery__idfsGlobalQuery_R_1795]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP CONSTRAINT [FK_tasQuery_tasglQuery__idfsGlobalQuery_R_1795];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuery_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP CONSTRAINT [FK_tasQuery_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQueryConditionGroup_tasQueryConditionGroup__idfParentQueryConditionGroup_R_1345]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] DROP CONSTRAINT [FK_tasQueryConditionGroup_tasQueryConditionGroup__idfParentQueryConditionGroup_R_1345];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQueryConditionGroup_tasQuerySearchObject__idfQuerySearchObject_R_1344]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] DROP CONSTRAINT [FK_tasQueryConditionGroup_tasQuerySearchObject__idfQuerySearchObject_R_1344];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQueryConditionGroup_tasQuerySearchObject__idfSubQuerySearchObject]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] DROP CONSTRAINT [FK_tasQueryConditionGroup_tasQuerySearchObject__idfSubQuerySearchObject];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQueryConditionGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] DROP CONSTRAINT [FK_tasQueryConditionGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchField_ffParameter__idfsParameter_R_1353]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] DROP CONSTRAINT [FK_tasQuerySearchField_ffParameter__idfsParameter_R_1353];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchField_tasQuerySearchObject__idfQuerySearchObject_R_1351]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] DROP CONSTRAINT [FK_tasQuerySearchField_tasQuerySearchObject__idfQuerySearchObject_R_1351];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchField_tasSearchFieldList__idfsSearchField_R_1352]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] DROP CONSTRAINT [FK_tasQuerySearchField_tasSearchFieldList__idfsSearchField_R_1352];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] DROP CONSTRAINT [FK_tasQuerySearchField_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchFieldCondition_tasQueryConditionGroup__idfQueryConditionGroup_R_1342]...';


GO
ALTER TABLE [dbo].[tasQuerySearchFieldCondition] DROP CONSTRAINT [FK_tasQuerySearchFieldCondition_tasQueryConditionGroup__idfQueryConditionGroup_R_1342];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchFieldCondition_tasQuerySearchField__idfQuerySearchField_R_1343]...';


GO
ALTER TABLE [dbo].[tasQuerySearchFieldCondition] DROP CONSTRAINT [FK_tasQuerySearchFieldCondition_tasQuerySearchField__idfQuerySearchField_R_1343];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuerySearchFieldCondition] DROP CONSTRAINT [FK_tasQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchObject_tasQuery__idflQueryName_R_1327]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] DROP CONSTRAINT [FK_tasQuerySearchObject_tasQuery__idflQueryName_R_1327];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchObject_tasQuerySearchObject__idfParentQuerySearchObject_R_1329]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] DROP CONSTRAINT [FK_tasQuerySearchObject_tasQuerySearchObject__idfParentQuerySearchObject_R_1329];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] DROP CONSTRAINT [FK_tasQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchObject_trtBaseReference__idfsReportType]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] DROP CONSTRAINT [FK_tasQuerySearchObject_trtBaseReference__idfsReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] DROP CONSTRAINT [FK_tasQuerySearchObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchField_gisReferenceType__idfsGISReferenceType_R_1720]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchField_gisReferenceType__idfsGISReferenceType_R_1720];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchField_tasAggregateFunction__idfsDefaultAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchField_tasAggregateFunction__idfsDefaultAggregateFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchField_tasSearchObject__idfsSearchObject_R_1346]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchField_tasSearchObject__idfsSearchObject_R_1346];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchField_trtBaseReference__idfsSearchField_R_1355]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchField_trtBaseReference__idfsSearchField_R_1355];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchField_trtBaseReference__idfsSearchFieldType_R_1587]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchField_trtBaseReference__idfsSearchFieldType_R_1587];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchField_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldList_trtReferenceType__idfsReferenceType_R_1349]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchFieldList_trtReferenceType__idfsReferenceType_R_1349];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsRelatedSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] DROP CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsRelatedSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] DROP CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldsWithRelatedValues_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] DROP CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldToFFParameter_ffParameter_idfsParameter]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToFFParameter] DROP CONSTRAINT [FK_tasSearchFieldToFFParameter_ffParameter_idfsParameter];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldToFFParameter_tasSearchField_idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToFFParameter] DROP CONSTRAINT [FK_tasSearchFieldToFFParameter_tasSearchField_idfsSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldToFFParameter_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToFFParameter] DROP CONSTRAINT [FK_tasSearchFieldToFFParameter_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldToPersonalDataGroup_tasSearchField_idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] DROP CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_tasSearchField_idfsSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldToPersonalDataGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] DROP CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldToPersonalDataGroup_tstPersonalDataGroup_idfPersonalDataGroup]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] DROP CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_tstPersonalDataGroup_idfPersonalDataGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObject_trtBaseReference__idfsFormType_R_1657]...';


GO
ALTER TABLE [dbo].[tasSearchObject] DROP CONSTRAINT [FK_tasSearchObject_trtBaseReference__idfsFormType_R_1657];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObject_trtBaseReference__idfsSearchObject_R_1357]...';


GO
ALTER TABLE [dbo].[tasSearchObject] DROP CONSTRAINT [FK_tasSearchObject_trtBaseReference__idfsSearchObject_R_1357];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchObject] DROP CONSTRAINT [FK_tasSearchObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObjectToSearchObject_tasSearchObject__idfsParentSearchObject_R_1714]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSearchObject] DROP CONSTRAINT [FK_tasSearchObjectToSearchObject_tasSearchObject__idfsParentSearchObject_R_1714];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObjectToSearchObject_tasSearchObject__idfsRelatedSearchObject_R_1713]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSearchObject] DROP CONSTRAINT [FK_tasSearchObjectToSearchObject_tasSearchObject__idfsRelatedSearchObject_R_1713];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObjectToSearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSearchObject] DROP CONSTRAINT [FK_tasSearchObjectToSearchObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObjectToSystemFunction_tasSearchObject_idfsSearchObject]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] DROP CONSTRAINT [FK_tasSearchObjectToSystemFunction_tasSearchObject_idfsSearchObject];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObjectToSystemFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] DROP CONSTRAINT [FK_tasSearchObjectToSystemFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObjectToSystemFunction_trtSystemFunction_idfsSystemFunction]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] DROP CONSTRAINT [FK_tasSearchObjectToSystemFunction_trtSystemFunction_idfsSystemFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchTable] DROP CONSTRAINT [FK_tasSearchTable_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfMainSearchTable_R_1723]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] DROP CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfMainSearchTable_R_1723];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfParentSearchTable_R_1700]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] DROP CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfParentSearchTable_R_1700];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfSearchTable_R_1701]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] DROP CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfSearchTable_R_1701];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfUnionSearchTable]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] DROP CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfUnionSearchTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchTableJoinRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] DROP CONSTRAINT [FK_tasSearchTableJoinRule_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasView_tasglView__idfGlobalView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasView] DROP CONSTRAINT [FK_tasView_tasglView__idfGlobalView_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasView_tasLayout__idflLayout]...';


GO
ALTER TABLE [dbo].[tasView] DROP CONSTRAINT [FK_tasView_tasLayout__idflLayout];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasView_tasViewColumn__idfChartXAxisViewColumn]...';


GO
ALTER TABLE [dbo].[tasView] DROP CONSTRAINT [FK_tasView_tasViewColumn__idfChartXAxisViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasView_tasViewColumn__idfMapAdminUnitViewColumn]...';


GO
ALTER TABLE [dbo].[tasView] DROP CONSTRAINT [FK_tasView_tasViewColumn__idfMapAdminUnitViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasView_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasView] DROP CONSTRAINT [FK_tasView_trtBaseReference__idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasView_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasView] DROP CONSTRAINT [FK_tasView_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewBand_tasLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasViewBand] DROP CONSTRAINT [FK_tasViewBand_tasLayoutSearchField__idfLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewBand_tasView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasViewBand] DROP CONSTRAINT [FK_tasViewBand_tasView__idfView_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewBand_tasViewBand__idfParentViewBand]...';


GO
ALTER TABLE [dbo].[tasViewBand] DROP CONSTRAINT [FK_tasViewBand_tasViewBand__idfParentViewBand];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewBand_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasViewBand] DROP CONSTRAINT [FK_tasViewBand_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_tasAggregateFunction__idfsAggregateFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_tasLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_tasLayoutSearchField__idfLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_tasView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_tasView__idfView_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_tasViewBand__idfViewBand]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_tasViewBand__idfViewBand];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_tasViewColumn__idfDenominatorViewColumn]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_tasViewColumn__idfDenominatorViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_tasViewColumn__idfSourceViewColumn]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_tasViewColumn__idfSourceViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauColumn_tauTable__idfTable_R_1559]...';


GO
ALTER TABLE [dbo].[tauColumn] DROP CONSTRAINT [FK_tauColumn_tauTable__idfTable_R_1559];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauColumn] DROP CONSTRAINT [FK_tauColumn_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailCreate_tauDataAuditEvent__idfDataAuditEvent_R_1024]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailCreate] DROP CONSTRAINT [FK_tauDataAuditDetailCreate_tauDataAuditEvent__idfDataAuditEvent_R_1024];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailCreate_tauTable__idfObjectTable_R_1561]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailCreate] DROP CONSTRAINT [FK_tauDataAuditDetailCreate_tauTable__idfObjectTable_R_1561];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailCreate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailCreate] DROP CONSTRAINT [FK_tauDataAuditDetailCreate_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailDelete_tauDataAuditEvent__idfDataAuditEvent_R_1558]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailDelete] DROP CONSTRAINT [FK_tauDataAuditDetailDelete_tauDataAuditEvent__idfDataAuditEvent_R_1558];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailDelete_tauTable__idfObjectTable_R_1563]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailDelete] DROP CONSTRAINT [FK_tauDataAuditDetailDelete_tauTable__idfObjectTable_R_1563];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailDelete_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailDelete] DROP CONSTRAINT [FK_tauDataAuditDetailDelete_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailRestore_tauDataAuditEvent__idfDataAuditEvent_R_1558]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailRestore] DROP CONSTRAINT [FK_tauDataAuditDetailRestore_tauDataAuditEvent__idfDataAuditEvent_R_1558];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailRestore_tauTable__idfObjectTable_R_1563]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailRestore] DROP CONSTRAINT [FK_tauDataAuditDetailRestore_tauTable__idfObjectTable_R_1563];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailRestore_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailRestore] DROP CONSTRAINT [FK_tauDataAuditDetailRestore_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_tauColumn__idfColumn_R_1564]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] DROP CONSTRAINT [FK_tauDataAuditDetailUpdate_tauColumn__idfColumn_R_1564];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_tauDataAuditEvent__idfDataAuditEvent_R_1557]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] DROP CONSTRAINT [FK_tauDataAuditDetailUpdate_tauDataAuditEvent__idfDataAuditEvent_R_1557];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_tauTable__idfObjectTable_R_1562]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] DROP CONSTRAINT [FK_tauDataAuditDetailUpdate_tauTable__idfObjectTable_R_1562];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] DROP CONSTRAINT [FK_tauDataAuditDetailUpdate_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditEvent_tauTable__idfMainObjectTable_R_1560]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] DROP CONSTRAINT [FK_tauDataAuditEvent_tauTable__idfMainObjectTable_R_1560];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditEventType_R_1556]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] DROP CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditEventType_R_1556];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditObjectType_R_1555]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] DROP CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditObjectType_R_1555];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditEvent_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] DROP CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditEvent_tstSite__idfsSite_R_1021]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] DROP CONSTRAINT [FK_tauDataAuditEvent_tstSite__idfsSite_R_1021];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditEvent_tstUserTable__idfUserID_R_1022]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] DROP CONSTRAINT [FK_tauDataAuditEvent_tstUserTable__idfUserID_R_1022];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauPINAuditEvent_tstUserTable]...';


GO
ALTER TABLE [dbo].[tauPINAuditEvent] DROP CONSTRAINT [FK_tauPINAuditEvent_tstUserTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauTable] DROP CONSTRAINT [FK_tauTable_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExport] DROP CONSTRAINT [FK_tdeDataExport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExport_tstUserTable__idfUserID_R_1004]...';


GO
ALTER TABLE [dbo].[tdeDataExport] DROP CONSTRAINT [FK_tdeDataExport_tstUserTable__idfUserID_R_1004];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDetail_tdeDataExport__idfDataExport_R_1001]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] DROP CONSTRAINT [FK_tdeDataExportDetail_tdeDataExport__idfDataExport_R_1001];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDetail_trtBaseReference__idfsDataExportDetailStatus_R_1582]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] DROP CONSTRAINT [FK_tdeDataExportDetail_trtBaseReference__idfsDataExportDetailStatus_R_1582];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDetail_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] DROP CONSTRAINT [FK_tdeDataExportDetail_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDetail_trtDiagnosis__idfsDiagnosis_R_1003]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] DROP CONSTRAINT [FK_tdeDataExportDetail_trtDiagnosis__idfsDiagnosis_R_1003];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDiagnosis_tdeDataExport__idfDataExport_R_1000]...';


GO
ALTER TABLE [dbo].[tdeDataExportDiagnosis] DROP CONSTRAINT [FK_tdeDataExportDiagnosis_tdeDataExport__idfDataExport_R_1000];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportDiagnosis] DROP CONSTRAINT [FK_tdeDataExportDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDiagnosis_trtDiagnosis__idfsDiagnosis_R_999]...';


GO
ALTER TABLE [dbo].[tdeDataExportDiagnosis] DROP CONSTRAINT [FK_tdeDataExportDiagnosis_trtDiagnosis__idfsDiagnosis_R_999];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportFFReference_ffParameter__idfsParameter]...';


GO
ALTER TABLE [dbo].[tdeDataExportFFReference] DROP CONSTRAINT [FK_tdeDataExportFFReference_ffParameter__idfsParameter];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportFFReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportFFReference] DROP CONSTRAINT [FK_tdeDataExportFFReference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportFFReference_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tdeDataExportFFReference] DROP CONSTRAINT [FK_tdeDataExportFFReference_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportProblem_tdeDataExport__idfDataExport_R_1008]...';


GO
ALTER TABLE [dbo].[tdeDataExportProblem] DROP CONSTRAINT [FK_tdeDataExportProblem_tdeDataExport__idfDataExport_R_1008];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportProblem_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportProblem] DROP CONSTRAINT [FK_tdeDataExportProblem_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflAggrCaseFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflAggrCaseFiltered] DROP CONSTRAINT [FK_tflAggrCaseFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflAggrCaseFiltered_tlbAggrCase__idfAggrCase]...';


GO
ALTER TABLE [dbo].[tflAggrCaseFiltered] DROP CONSTRAINT [FK_tflAggrCaseFiltered_tlbAggrCase__idfAggrCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflAggrCaseFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflAggrCaseFiltered] DROP CONSTRAINT [FK_tflAggrCaseFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] DROP CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] DROP CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] DROP CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] DROP CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceFiltered_tlbBasicSyndromicSurveillance__idfBasicSyndromicSurveillance_R_1831]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] DROP CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_tlbBasicSyndromicSurveillance__idfBasicSyndromicSurveillance_R_1831];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] DROP CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBatchTestFiltered_tflSiteGroup]...';


GO
ALTER TABLE [dbo].[tflBatchTestFiltered] DROP CONSTRAINT [FK_tflBatchTestFiltered_tflSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBatchTestFiltered_tlbBatchTest]...';


GO
ALTER TABLE [dbo].[tflBatchTestFiltered] DROP CONSTRAINT [FK_tflBatchTestFiltered_tlbBatchTest];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBatchTestFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflBatchTestFiltered] DROP CONSTRAINT [FK_tflBatchTestFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflDataAuditEventFiltered_tauDataAuditEvent__idfDataAuditEvent_R_1830]...';


GO
ALTER TABLE [dbo].[tflDataAuditEventFiltered] DROP CONSTRAINT [FK_tflDataAuditEventFiltered_tauDataAuditEvent__idfDataAuditEvent_R_1830];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflDataAuditEventFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflDataAuditEventFiltered] DROP CONSTRAINT [FK_tflDataAuditEventFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflDataAuditEventFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflDataAuditEventFiltered] DROP CONSTRAINT [FK_tflDataAuditEventFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflFarmFiltered_tlbFarm]...';


GO
ALTER TABLE [dbo].[tflFarmFiltered] DROP CONSTRAINT [FK_tflFarmFiltered_tlbFarm];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflFarmFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflFarmFiltered] DROP CONSTRAINT [FK_tflFarmFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflFarmFilteredGroup_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflFarmFiltered] DROP CONSTRAINT [FK_tflFarmFilteredGroup_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflGeoLocationFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflGeoLocationFiltered] DROP CONSTRAINT [FK_tflGeoLocationFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflGeoLocationFiltered_tlbGeoLocation__idfGeoLocation_R_1805]...';


GO
ALTER TABLE [dbo].[tflGeoLocationFiltered] DROP CONSTRAINT [FK_tflGeoLocationFiltered_tlbGeoLocation__idfGeoLocation_R_1805];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflGeoLocationFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflGeoLocationFiltered] DROP CONSTRAINT [FK_tflGeoLocationFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflHumanCaseFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflHumanCaseFiltered] DROP CONSTRAINT [FK_tflHumanCaseFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflHumanCaseFiltered_tlbHumanCase__idfHumanCase]...';


GO
ALTER TABLE [dbo].[tflHumanCaseFiltered] DROP CONSTRAINT [FK_tflHumanCaseFiltered_tlbHumanCase__idfHumanCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflHumanCaseFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflHumanCaseFiltered] DROP CONSTRAINT [FK_tflHumanCaseFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflHumanFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflHumanFiltered] DROP CONSTRAINT [FK_tflHumanFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflHumanFiltered_tlbHuman]...';


GO
ALTER TABLE [dbo].[tflHumanFiltered] DROP CONSTRAINT [FK_tflHumanFiltered_tlbHuman];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflHumanFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflHumanFiltered] DROP CONSTRAINT [FK_tflHumanFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflMonitoringSessionFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflMonitoringSessionFiltered] DROP CONSTRAINT [FK_tflMonitoringSessionFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflMonitoringSessionFiltered_tlbMonitoringSession__idfMonitoringSession_R_1819]...';


GO
ALTER TABLE [dbo].[tflMonitoringSessionFiltered] DROP CONSTRAINT [FK_tflMonitoringSessionFiltered_tlbMonitoringSession__idfMonitoringSession_R_1819];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflMonitoringSessionFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflMonitoringSessionFiltered] DROP CONSTRAINT [FK_tflMonitoringSessionFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflNewID_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflNewID] DROP CONSTRAINT [FK_tflNewID_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflNotificationFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflNotificationFiltered] DROP CONSTRAINT [FK_tflNotificationFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflNotificationFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflNotificationFiltered] DROP CONSTRAINT [FK_tflNotificationFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflNotificationFiltered_tstNotification__idfNotification_R_1825]...';


GO
ALTER TABLE [dbo].[tflNotificationFiltered] DROP CONSTRAINT [FK_tflNotificationFiltered_tstNotification__idfNotification_R_1825];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflObservationFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflObservationFiltered] DROP CONSTRAINT [FK_tflObservationFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflObservationFiltered_tlbObservation__idfObservation_R_1809]...';


GO
ALTER TABLE [dbo].[tflObservationFiltered] DROP CONSTRAINT [FK_tflObservationFiltered_tlbObservation__idfObservation_R_1809];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflObservationFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflObservationFiltered] DROP CONSTRAINT [FK_tflObservationFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflOutbreakFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflOutbreakFiltered] DROP CONSTRAINT [FK_tflOutbreakFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflOutbreakFiltered_tlbOutbreak__idfOutbreak_R_1811]...';


GO
ALTER TABLE [dbo].[tflOutbreakFiltered] DROP CONSTRAINT [FK_tflOutbreakFiltered_tlbOutbreak__idfOutbreak_R_1811];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflOutbreakFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflOutbreakFiltered] DROP CONSTRAINT [FK_tflOutbreakFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSite_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSite] DROP CONSTRAINT [FK_tflSite_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSite_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tflSite] DROP CONSTRAINT [FK_tflSite_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroup_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] DROP CONSTRAINT [FK_tflSiteGroup_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroup_gisRayon_idfsRayon]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] DROP CONSTRAINT [FK_tflSiteGroup_gisRayon_idfsRayon];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroup_trtBaseReference_idfsSiteGroupType]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] DROP CONSTRAINT [FK_tflSiteGroup_trtBaseReference_idfsSiteGroupType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] DROP CONSTRAINT [FK_tflSiteGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroup_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] DROP CONSTRAINT [FK_tflSiteGroup_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroupRelation_tflSiteGroup_idfReceiverSite]...';


GO
ALTER TABLE [dbo].[tflSiteGroupRelation] DROP CONSTRAINT [FK_tflSiteGroupRelation_tflSiteGroup_idfReceiverSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroupRelation_tflSiteGroup_idfsSenderSiteGroup]...';


GO
ALTER TABLE [dbo].[tflSiteGroupRelation] DROP CONSTRAINT [FK_tflSiteGroupRelation_tflSiteGroup_idfsSenderSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroupRelation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSiteGroupRelation] DROP CONSTRAINT [FK_tflSiteGroupRelation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteToSiteGroup_tflSiteGroup_idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflSiteToSiteGroup] DROP CONSTRAINT [FK_tflSiteToSiteGroup_tflSiteGroup_idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteToSiteGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSiteToSiteGroup] DROP CONSTRAINT [FK_tflSiteToSiteGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteToSiteGroup_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tflSiteToSiteGroup] DROP CONSTRAINT [FK_tflSiteToSiteGroup_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflTransferOutFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflTransferOutFiltered] DROP CONSTRAINT [FK_tflTransferOutFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflTransferOutFiltered_tlbTransferOUT__idfTransferOut_R_1817]...';


GO
ALTER TABLE [dbo].[tflTransferOutFiltered] DROP CONSTRAINT [FK_tflTransferOutFiltered_tlbTransferOUT__idfTransferOut_R_1817];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflTransferOutFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflTransferOutFiltered] DROP CONSTRAINT [FK_tflTransferOutFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflVectorSurveillanceSessionFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] DROP CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflVectorSurveillanceSessionFiltered_tlbVectorSurveillanceSession__idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] DROP CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_tlbVectorSurveillanceSession__idfVectorSurveillanceSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflVectorSurveillanceSessionFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] DROP CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflVetCaseFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflVetCaseFiltered] DROP CONSTRAINT [FK_tflVetCaseFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflVetCaseFiltered_tlbVetCase__idfVetCase]...';


GO
ALTER TABLE [dbo].[tflVetCaseFiltered] DROP CONSTRAINT [FK_tflVetCaseFiltered_tlbVetCase__idfVetCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflVetCaseFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflVetCaseFiltered] DROP CONSTRAINT [FK_tflVetCaseFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbActivityParameters_ffParameter__idfsParameter_R_222]...';


GO
ALTER TABLE [dbo].[tlbActivityParameters] DROP CONSTRAINT [FK_tlbActivityParameters_ffParameter__idfsParameter_R_222];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbActivityParameters_tlbObservation__idfObservation_R_1423]...';


GO
ALTER TABLE [dbo].[tlbActivityParameters] DROP CONSTRAINT [FK_tlbActivityParameters_tlbObservation__idfObservation_R_1423];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbActivityParameters_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbActivityParameters] DROP CONSTRAINT [FK_tlbActivityParameters_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAdministrativeReportAudit_idfsReport]...';


GO
ALTER TABLE [dbo].[tlbAdministrativeReportAudit] DROP CONSTRAINT [FK_tlbAdministrativeReportAudit_idfsReport];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAdministrativeReportAudit_RoleID]...';


GO
ALTER TABLE [dbo].[tlbAdministrativeReportAudit] DROP CONSTRAINT [FK_tlbAdministrativeReportAudit_RoleID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_gisBaseReference__idfsAdministrativeUnit_R_1666]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_gisBaseReference__idfsAdministrativeUnit_R_1666];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfDiagnosticVersion_R_1686]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfDiagnosticVersion_R_1686];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfProphylacticVersion_R_1687]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfProphylacticVersion_R_1687];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfSanitaryVersion_R_1688]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfSanitaryVersion_R_1688];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfVersion_R_1684]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfVersion_R_1684];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfCaseObservation_R_1608]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfCaseObservation_R_1608];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfDiagnosticObservation_R_1609]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfDiagnosticObservation_R_1609];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfProphylacticObservation_R_1610]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfProphylacticObservation_R_1610];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfSanitaryObservation_R_1611]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfSanitaryObservation_R_1611];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfEnteredByOffice_R_1606]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfEnteredByOffice_R_1606];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfOffice]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfReceivedByOffice_R_1602]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfReceivedByOffice_R_1602];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfSentByOffice_R_1604]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfSentByOffice_R_1604];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbPerson__idfEnteredByPerson_R_1607]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfEnteredByPerson_R_1607];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbPerson__idfReceivedByPerson_R_1603]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfReceivedByPerson_R_1603];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbPerson__idfSentByPerson_R_1605]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfSentByPerson_R_1605];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_trtBaseReference__idfsAggrCaseType_R_1601]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_trtBaseReference__idfsAggrCaseType_R_1601];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] DROP CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_tlbAggrMatrixVersionHeader__idfVersion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtBaseReference__idfsDiagnosticAction_R_1117]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] DROP CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtBaseReference__idfsDiagnosticAction_R_1117];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] DROP CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtDiagnosis__idfsDiagnosis_R_1616]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] DROP CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtDiagnosis__idfsDiagnosis_R_1616];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtSpeciesType__idfsSpeciesType_R_1116]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] DROP CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtSpeciesType__idfsSpeciesType_R_1116];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrHumanCaseMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] DROP CONSTRAINT [FK_tlbAggrHumanCaseMTX_tlbAggrMatrixVersionHeader__idfVersion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrHumanCaseMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] DROP CONSTRAINT [FK_tlbAggrHumanCaseMTX_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrHumanCaseMTX_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] DROP CONSTRAINT [FK_tlbAggrHumanCaseMTX_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrMatrixVersionHeader_trtBaseReference__idfsAggrMatrixType_R_1685]...';


GO
ALTER TABLE [dbo].[tlbAggrMatrixVersionHeader] DROP CONSTRAINT [FK_tlbAggrMatrixVersionHeader_trtBaseReference__idfsAggrMatrixType_R_1685];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrMatrixVersionHeader_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrMatrixVersionHeader] DROP CONSTRAINT [FK_tlbAggrMatrixVersionHeader_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] DROP CONSTRAINT [FK_tlbAggrProphylacticActionMTX_tlbAggrMatrixVersionHeader__idfVersion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] DROP CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtDiagnosis__idfsDiagnosis_R_1615]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] DROP CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtDiagnosis__idfsDiagnosis_R_1615];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtProphilacticAction__idfsProphilacticAction_R_1614]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] DROP CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtProphilacticAction__idfsProphilacticAction_R_1614];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtSpeciesType__idfsSpeciesType_R_1119]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] DROP CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtSpeciesType__idfsSpeciesType_R_1119];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrSanitaryActionMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] DROP CONSTRAINT [FK_tlbAggrSanitaryActionMTX_tlbAggrMatrixVersionHeader__idfVersion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrSanitaryActionMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] DROP CONSTRAINT [FK_tlbAggrSanitaryActionMTX_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrSanitaryActionMTX_trtSanitaryAction__idfsSanitaryAction]...';


GO
ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] DROP CONSTRAINT [FK_tlbAggrSanitaryActionMTX_trtSanitaryAction__idfsSanitaryAction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] DROP CONSTRAINT [FK_tlbAggrVetCaseMTX_tlbAggrMatrixVersionHeader__idfVersion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] DROP CONSTRAINT [FK_tlbAggrVetCaseMTX_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_trtDiagnosis__idfsDiagnosis_R_1617]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] DROP CONSTRAINT [FK_tlbAggrVetCaseMTX_trtDiagnosis__idfsDiagnosis_R_1617];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_trtSpeciesType__idfsSpeciesType_R_1122]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] DROP CONSTRAINT [FK_tlbAggrVetCaseMTX_trtSpeciesType__idfsSpeciesType_R_1122];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_tlbObservation__idfObservation_R_1481]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_tlbObservation__idfObservation_R_1481];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_tlbSpecies__idfSpecies_R_1478]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_tlbSpecies__idfSpecies_R_1478];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsAnimalAge_R_1236]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalAge_R_1236];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsAnimalCondition_R_1280]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalCondition_R_1280];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsAnimalGender_R_1237]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalGender_R_1237];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsYNClinicalSigns_R_1409]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsYNClinicalSigns_R_1409];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAntimicrobialTherapy_tlbHumanCase__idfHumanCase_R_1422]...';


GO
ALTER TABLE [dbo].[tlbAntimicrobialTherapy] DROP CONSTRAINT [FK_tlbAntimicrobialTherapy_tlbHumanCase__idfHumanCase_R_1422];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAntimicrobialTherapy_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAntimicrobialTherapy] DROP CONSTRAINT [FK_tlbAntimicrobialTherapy_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tlbHuman__idfHuman]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbHuman__idfHuman];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tlbOffice__idfHospital]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbOffice__idfHospital];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tlbPerson__idfEnteredBy]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbPerson__idfEnteredBy];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsBasicSyndromicSurveillanceType]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsBasicSyndromicSurveillanceType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsMethodOfMeasurement]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsMethodOfMeasurement];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsOutcome]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsOutcome];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsTestResult]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsTestResult];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNAdministratedAntiviralMedication]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNAdministratedAntiviralMedication];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNCough]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNCough];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNFever]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNFever];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasHospitalized]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasHospitalized];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasInER]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasInER];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPostpartumPeriod]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPostpartumPeriod];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPregnant]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPregnant];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNSeasonalFluVaccine]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNSeasonalFluVaccine];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNShortnessOfBreath]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNShortnessOfBreath];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNTreatment]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNTreatment];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbOffice__idfHospital]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbOffice__idfHospital];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateDetail_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateHeader_tlbPerson__idfEnteredBy]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_tlbPerson__idfEnteredBy];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateHeader_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateHeader_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbObservation__idfObservation_R_1541]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbObservation__idfObservation_R_1541];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbOffice__idfPerformedByOffice_R_1539]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfPerformedByOffice_R_1539];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbOffice__idfResultEnteredByOffice]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfResultEnteredByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbOffice__idfValidatedByOffice_R_1542]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfValidatedByOffice_R_1542];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbPerson__idfPerformedByPerson_R_1540]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfPerformedByPerson_R_1540];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbPerson__idfResultEnteredByPerson]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfResultEnteredByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbPerson__idfValidatedByPerson_R_1543]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfValidatedByPerson_R_1543];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_trtBaseReference__idfsBatchStatus_R_1544]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_trtBaseReference__idfsBatchStatus_R_1544];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_trtBaseReference__idfsTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tstSite__idfsSite_R_1653]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tstSite__idfsSite_R_1653];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaign_trtBaseRef_CampaignCategory]...';


GO
ALTER TABLE [dbo].[tlbCampaign] DROP CONSTRAINT [FK_tlbCampaign_trtBaseRef_CampaignCategory];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaign_trtBaseReference__idfsCampaignType_R_1736]...';


GO
ALTER TABLE [dbo].[tlbCampaign] DROP CONSTRAINT [FK_tlbCampaign_trtBaseReference__idfsCampaignType_R_1736];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaign_trtBaseReference_idfsCampaignStatus]...';


GO
ALTER TABLE [dbo].[tlbCampaign] DROP CONSTRAINT [FK_tlbCampaign_trtBaseReference_idfsCampaignStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaign_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbCampaign] DROP CONSTRAINT [FK_tlbCampaign_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaign_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbCampaign] DROP CONSTRAINT [FK_tlbCampaign_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_tlbCampaign__idfCampaign_R_1738]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] DROP CONSTRAINT [FK_tlbCampaignToDiagnosis_tlbCampaign__idfCampaign_R_1738];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] DROP CONSTRAINT [FK_tlbCampaignToDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1739]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] DROP CONSTRAINT [FK_tlbCampaignToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1739];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] DROP CONSTRAINT [FK_tlbCampaignToDiagnosis_trtSampleType__idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtSpeciesType__idfsSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] DROP CONSTRAINT [FK_tlbCampaignToDiagnosis_trtSpeciesType__idfsSpeciesType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_tlbHumanCase__idfHumanCase_R_1797]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] DROP CONSTRAINT [FK_tlbChangeDiagnosisHistory_tlbHumanCase__idfHumanCase_R_1797];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] DROP CONSTRAINT [FK_tlbChangeDiagnosisHistory_tlbPerson__idfPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtBaseReference_idfsChangeDiagnosisReason]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] DROP CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtBaseReference_idfsChangeDiagnosisReason];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] DROP CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsCurrentDiagnosis_R_1799]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] DROP CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsCurrentDiagnosis_R_1799];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsPreviousDiagnosis_R_1798]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] DROP CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsPreviousDiagnosis_R_1798];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbContactedCasePerson_tlbHuman__idfHuman_R_1460]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] DROP CONSTRAINT [FK_tlbContactedCasePerson_tlbHuman__idfHuman_R_1460];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbContactedCasePerson_tlbHumanCase__idfHumanCase_R_1461]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] DROP CONSTRAINT [FK_tlbContactedCasePerson_tlbHumanCase__idfHumanCase_R_1461];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbContactedCasePerson_trtBaseReference__idfsPersonContactType_R_1462]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] DROP CONSTRAINT [FK_tlbContactedCasePerson_trtBaseReference__idfsPersonContactType_R_1462];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbContactedCasePerson_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] DROP CONSTRAINT [FK_tlbContactedCasePerson_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbDepartment_tlbOffice__idfOrganization]...';


GO
ALTER TABLE [dbo].[tlbDepartment] DROP CONSTRAINT [FK_tlbDepartment_tlbOffice__idfOrganization];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbDepartment_trtBaseReference__idfsDepartmentName]...';


GO
ALTER TABLE [dbo].[tlbDepartment] DROP CONSTRAINT [FK_tlbDepartment_trtBaseReference__idfsDepartmentName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbDepartment_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbDepartment] DROP CONSTRAINT [FK_tlbDepartment_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_Employee_Site]...';


GO
ALTER TABLE [dbo].[tlbEmployee] DROP CONSTRAINT [FK_Employee_Site];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployee_trtBaseReference__idfsEmployeeType_R_1250]...';


GO
ALTER TABLE [dbo].[tlbEmployee] DROP CONSTRAINT [FK_tlbEmployee_trtBaseReference__idfsEmployeeType_R_1250];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployee_trtBaseReference_idfsEmployeeCategory]...';


GO
ALTER TABLE [dbo].[tlbEmployee] DROP CONSTRAINT [FK_tlbEmployee_trtBaseReference_idfsEmployeeCategory];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployee_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbEmployee] DROP CONSTRAINT [FK_tlbEmployee_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroup_tlbEmployee__idfEmployeeGroup_R_832]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] DROP CONSTRAINT [FK_tlbEmployeeGroup_tlbEmployee__idfEmployeeGroup_R_832];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroup_trtBaseReference__idfsEmployeeGroupName_R_1014]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] DROP CONSTRAINT [FK_tlbEmployeeGroup_trtBaseReference__idfsEmployeeGroupName_R_1014];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] DROP CONSTRAINT [FK_tlbEmployeeGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroup_tstSite__idfsSite_R_1018]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] DROP CONSTRAINT [FK_tlbEmployeeGroup_tstSite__idfsSite_R_1018];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroupMember_tlbEmployee__idfEmployee_R_1668]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroupMember] DROP CONSTRAINT [FK_tlbEmployeeGroupMember_tlbEmployee__idfEmployee_R_1668];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroupMember_tlbEmployeeGroup__idfEmployeeGroup_R_1465]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroupMember] DROP CONSTRAINT [FK_tlbEmployeeGroupMember_tlbEmployeeGroup__idfEmployeeGroup_R_1465];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroupMember_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroupMember] DROP CONSTRAINT [FK_tlbEmployeeGroupMember_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_tlbFarmActual]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_tlbFarmActual];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_tlbGeoLocation__idfFarmAddress_R_1473]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_tlbGeoLocation__idfFarmAddress_R_1473];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_tlbHuman__idfHuman_R_1470]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_tlbHuman__idfHuman_R_1470];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_tlbMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_tlbMonitoringSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_tlbObservation__idfObservation_R_1471]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_tlbObservation__idfObservation_R_1471];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsAvianFarmType_R_1295]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsAvianFarmType_R_1295];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsAvianProductionType_R_1294]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsAvianProductionType_R_1294];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsFarmCategory_R_1288]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsFarmCategory_R_1288];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsGrazingPattern_R_1298]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsGrazingPattern_R_1298];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsIntendedUse_R_1299]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsIntendedUse_R_1299];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsLivestockProductionType_R_1296]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsLivestockProductionType_R_1296];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsMovementPattern_R_1300]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsMovementPattern_R_1300];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsOwnershipStructure_R_1287]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsOwnershipStructure_R_1287];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_tlbGeoLocationShared__idfFarmAddress_R_1473]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_tlbGeoLocationShared__idfFarmAddress_R_1473];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_tlbHumanActual__idfHumanActual_R_1470]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_tlbHumanActual__idfHumanActual_R_1470];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsAvianFarmType_R_1295]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsAvianFarmType_R_1295];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsAvianProductionType_R_1294]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsAvianProductionType_R_1294];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsFarmCategory_R_1288]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsFarmCategory_R_1288];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsGrazingPattern_R_1298]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsGrazingPattern_R_1298];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsIntendedUse_R_1299]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsIntendedUse_R_1299];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsLivestockProductionType_R_1296]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsLivestockProductionType_R_1296];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsMovementPattern_R_1300]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsMovementPattern_R_1300];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsOwnershipStructure_R_1287]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsOwnershipStructure_R_1287];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezer_trtBaseReference__idfsStorageType_R_1256]...';


GO
ALTER TABLE [dbo].[tlbFreezer] DROP CONSTRAINT [FK_tlbFreezer_trtBaseReference__idfsStorageType_R_1256];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezer_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFreezer] DROP CONSTRAINT [FK_tlbFreezer_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezer_tstSite__idfsSite_R_236]...';


GO
ALTER TABLE [dbo].[tlbFreezer] DROP CONSTRAINT [FK_tlbFreezer_tstSite__idfsSite_R_236];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_FreezerSubdivision_BaseRef_BoxSizeID]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] DROP CONSTRAINT [FK_FreezerSubdivision_BaseRef_BoxSizeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezerSubdivision_tlbFreezer__idfFreezer_R_902]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] DROP CONSTRAINT [FK_tlbFreezerSubdivision_tlbFreezer__idfFreezer_R_902];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezerSubdivision_tlbFreezerSubdivision__idfParentSubdivision_R_904]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] DROP CONSTRAINT [FK_tlbFreezerSubdivision_tlbFreezerSubdivision__idfParentSubdivision_R_904];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezerSubdivision_trtBaseReference__idfsSubdivisionType_R_1257]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] DROP CONSTRAINT [FK_tlbFreezerSubdivision_trtBaseReference__idfsSubdivisionType_R_1257];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezerSubdivision_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] DROP CONSTRAINT [FK_tlbFreezerSubdivision_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezerSubdivision_tstSite__idfsSite_R_908]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] DROP CONSTRAINT [FK_tlbFreezerSubdivision_tstSite__idfsSite_R_908];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_gisCountry__idfsCountry_R_972]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_gisCountry__idfsCountry_R_972];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_gisRayon__idfsRayon_R_974]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_gisRayon__idfsRayon_R_974];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_gisRegion__idfsRegion_R_973]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_gisRegion__idfsRegion_R_973];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_gisSettlement__idfsSettlement_R_1218]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_gisSettlement__idfsSettlement_R_1218];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference__idfsGeoLocationType_R_1238]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsGeoLocationType_R_1238];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference__idfsGroundType_R_1239]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsGroundType_R_1239];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference__idfsResidentType_R_1277]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsResidentType_R_1277];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_tstSite__idfsSite_R_1028]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_tstSite__idfsSite_R_1028];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_gisCountry__idfsCountry_R_972]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_gisCountry__idfsCountry_R_972];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_gisRayon__idfsRayon_R_974]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_gisRayon__idfsRayon_R_974];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_gisRegion__idfsRegion_R_973]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_gisRegion__idfsRegion_R_973];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_gisSettlement__idfsSettlement_R_1218]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_gisSettlement__idfsSettlement_R_1218];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference__idfsGeoLocationType_R_1238]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsGeoLocationType_R_1238];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference__idfsGroundType_R_1239]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsGroundType_R_1239];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference__idfsResidentType_R_1277]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsResidentType_R_1277];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_tstSite__idfsSite_R_1028]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_tstSite__idfsSite_R_1028];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationSharedTranslation_tlbGeoLocationShared__idfGeoLocationShared]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] DROP CONSTRAINT [FK_tlbGeoLocationSharedTranslation_tlbGeoLocationShared__idfGeoLocationShared];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationSharedTranslation_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] DROP CONSTRAINT [FK_tlbGeoLocationSharedTranslation_trtBaseReference__idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationSharedTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] DROP CONSTRAINT [FK_tlbGeoLocationSharedTranslation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationTranslation_tlbGeoLocation__idfGeoLocation]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationTranslation] DROP CONSTRAINT [FK_tlbGeoLocationTranslation_tlbGeoLocation__idfGeoLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationTranslation_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationTranslation] DROP CONSTRAINT [FK_tlbGeoLocationTranslation_trtBaseReference__idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationTranslation] DROP CONSTRAINT [FK_tlbGeoLocationTranslation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] DROP CONSTRAINT [FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGridDefinition_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] DROP CONSTRAINT [FK_tlbGridDefinition_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGridDefinition_tstUserTable_idfUserID]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] DROP CONSTRAINT [FK_tlbGridDefinition_tstUserTable_idfUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHerd_tlbFarm__idfFarm_R_1480]...';


GO
ALTER TABLE [dbo].[tlbHerd] DROP CONSTRAINT [FK_tlbHerd_tlbFarm__idfFarm_R_1480];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHerd_tlbHerdActual]...';


GO
ALTER TABLE [dbo].[tlbHerd] DROP CONSTRAINT [FK_tlbHerd_tlbHerdActual];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHerd_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHerd] DROP CONSTRAINT [FK_tlbHerd_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHerdActual_tlbFarmActual__idfFarmActual_R_1480]...';


GO
ALTER TABLE [dbo].[tlbHerdActual] DROP CONSTRAINT [FK_tlbHerdActual_tlbFarmActual__idfFarmActual_R_1480];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHerdActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHerdActual] DROP CONSTRAINT [FK_tlbHerdActual_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_tlbGeoLocation__idfCurrentResidenceAddress_R_1424]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfCurrentResidenceAddress_R_1424];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_tlbGeoLocation__idfEmployerAddress_R_1425]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfEmployerAddress_R_1425];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_tlbGeoLocation__idfRegistrationAddress_R_1426]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfRegistrationAddress_R_1426];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_tlbHumanActual]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_tlbHumanActual];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_tlbMonitoringSession_MontoringSessionID]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_tlbMonitoringSession_MontoringSessionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_trtBaseReference__idfsHumanGender_R_1232]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsHumanGender_R_1232];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_trtBaseReference__idfsNationality_R_1278]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsNationality_R_1278];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_trtBaseReference__idfsOccupationType_R_1233]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsOccupationType_R_1233];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_trtBaseReference_idfsPersonIDType]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_trtBaseReference_idfsPersonIDType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_tlbGeoLocation__idfCurrentResidenceAddress_R_1424]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfCurrentResidenceAddress_R_1424];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_tlbGeoLocation__idfEmployerAddress_R_1425]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfEmployerAddress_R_1425];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_tlbGeoLocation__idfRegistrationAddress_R_1426]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfRegistrationAddress_R_1426];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference__idfsHumanGender_R_1232]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsHumanGender_R_1232];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference__idfsNationality_R_1278]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsNationality_R_1278];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference__idfsOccupationType_R_1233]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsOccupationType_R_1233];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference_idfsPersonIDType]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_trtBaseReference_idfsPersonIDType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanCase_BaseRef_ExposureLocationKnown]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_HumanCase_BaseRef_ExposureLocationKnown];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanCase_BaseRef_PreviouslySoughtCare]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_HumanCase_BaseRef_PreviouslySoughtCare];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanCase_BaseRef_SpecificVaccinationAdministered]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_HumanCase_BaseRef_SpecificVaccinationAdministered];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumaCase_BaseRef_DiseaseReportTypeID]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumaCase_BaseRef_DiseaseReportTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbGeoLocation__idfPointGeoLocation_R_1421]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbGeoLocation__idfPointGeoLocation_R_1421];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbHuman]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbHuman];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbHumanCase__idfDeduplicationResultCase_R_1444]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbHumanCase__idfDeduplicationResultCase_R_1444];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbMonitoringSession_ParentMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbMonitoringSession_ParentMonitoringSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbObservation__idfCSObservation_R_1416]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbObservation__idfCSObservation_R_1416];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbObservation__idfEpiObservation_R_1415]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbObservation__idfEpiObservation_R_1415];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfHospital]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfHospital];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfInvestigatedByOffice_R_1420]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfInvestigatedByOffice_R_1420];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfReceivedByOffice_R_1419]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfReceivedByOffice_R_1419];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfSentByOffice_R_1418]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfSentByOffice_R_1418];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice_idfSoughtCareFacility]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbOffice_idfSoughtCareFacility];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbOutbreak__idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbOutbreak__idfOutbreak];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson__idfInvestigatedByPerson]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfInvestigatedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson__idfReceivedByPerson]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfReceivedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson__idfSentByPerson]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfSentByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson_idfPersonEnteredBy]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbPerson_idfPersonEnteredBy];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsCaseProgressStatus]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsCaseProgressStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsFinalCaseStatus_R_1676]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsFinalCaseStatus_R_1676];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsFinalState_R_1292]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsFinalState_R_1292];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsHospitalizationStatus_R_1269]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsHospitalizationStatus_R_1269];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsHumanAgeType_R_1247]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsHumanAgeType_R_1247];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsInitialCaseStatus_R_1439]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsInitialCaseStatus_R_1439];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsOutcome_R_1414]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsOutcome_R_1414];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNAntimicrobialTherapy_R_1409]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNAntimicrobialTherapy_R_1409];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNHospitalization_R_1410]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNHospitalization_R_1410];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNRelatedToOutbreak_R_1413]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNRelatedToOutbreak_R_1413];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNSpecimenCollected_R_1411]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNSpecimenCollected_R_1411];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNTestsConducted]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNTestsConducted];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference_idfsNonNotifiableDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference_idfsNonNotifiableDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference_idfsNotCollectedReason]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference_idfsNotCollectedReason];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtDiagnosis__idfsFinalDiagnosis_R_1427]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtDiagnosis__idfsFinalDiagnosis_R_1427];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtDiagnosis__idfsTentativeDiagnosis_R_1428]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtDiagnosis__idfsTentativeDiagnosis_R_1428];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbAnimal]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbAnimal];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbDepartment_idfInDepartment]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbDepartment_idfInDepartment];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbFreezerSubdivision]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbFreezerSubdivision];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbHuman]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbHuman];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbHumanCase]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbHumanCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbMaterial__idfParentMaterial_R_1222]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbMaterial__idfParentMaterial_R_1222];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbMaterial__idfRootMaterial]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbMaterial__idfRootMaterial];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbMonitoringSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbOffice__idfFieldCollectedByOffice_R_1530]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbOffice__idfFieldCollectedByOffice_R_1530];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbOffice__idfSendToOffice]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbOffice__idfSendToOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbPerson]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbPerson__idfAccesionByPerson]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbPerson__idfAccesionByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbPerson__idfFieldCollectedByPerson_R_1529]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbPerson__idfFieldCollectedByPerson_R_1529];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbPerson__idfMarkedForDispositionByPerson]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbPerson__idfMarkedForDispositionByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbSpecies]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbSpecies];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbTesting__idfMainTest]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbTesting__idfMainTest];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbVector_idfVector]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbVector_idfVector];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbVectorSurveillanceSession_idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbVectorSurveillanceSession_idfVectorSurveillanceSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbVetCase]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbVetCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference__idfsAccessionCondition]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference__idfsAccessionCondition];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_DiseaseID]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_DiseaseID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsBirdStatus]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsBirdStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsDestructionMethod]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsDestructionMethod];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsSampleKind]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsSampleKind];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsSampleStatus]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsSampleStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_PreviousSampleStatusID]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_PreviousSampleStatusID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtSampleType__idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tstSite__idfsCurrentSite]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tstSite__idfsCurrentSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tstSite__idfsSite_R_1066]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tstSite__idfsSite_R_1066];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_gisCountry__idfsCountry_R_1741]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_gisCountry__idfsCountry_R_1741];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_gisRayon__idfsRayon_R_1743]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_gisRayon__idfsRayon_R_1743];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_gisRegion__idfsRegion_R_1742]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_gisRegion__idfsRegion_R_1742];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_gisSettlement__idfsSettlement_R_1744]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_gisSettlement__idfsSettlement_R_1744];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_tlbCampaign__idfCampaign_R_1748]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_tlbCampaign__idfCampaign_R_1748];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_tlbPerson__idfPersonEnteredBy_R_1745]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_tlbPerson__idfPersonEnteredBy_R_1745];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_trtBaseRef_SessionCategoryID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_trtBaseRef_SessionCategoryID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_trtBaseReference__idfsMonitoringSessionStatus_R_1740]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_trtBaseReference__idfsMonitoringSessionStatus_R_1740];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_tstSite__idfsSite_R_1746]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_tstSite__idfsSite_R_1746];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionAction_tlbMonitoringSession__idfMonitoringSession_R_1833]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] DROP CONSTRAINT [FK_tlbMonitoringSessionAction_tlbMonitoringSession__idfMonitoringSession_R_1833];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionAction_tlbPerson__idfPersonEnteredBy_R_1836]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] DROP CONSTRAINT [FK_tlbMonitoringSessionAction_tlbPerson__idfPersonEnteredBy_R_1836];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionStatus_R_1835]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] DROP CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionStatus_R_1835];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionType_R_1834]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] DROP CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionType_R_1834];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] DROP CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_tlbFarm__idfFarm]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] DROP CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbFarm__idfFarm];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_tlbMonitoringSession__idfMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] DROP CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbMonitoringSession__idfMonitoringSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_tlbSpecies__idfSpecies]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] DROP CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbSpecies__idfSpecies];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_trtBaseReference__idfsAnimalSex]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] DROP CONSTRAINT [FK_tlbMonitoringSessionSummary_trtBaseReference__idfsAnimalSex];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] DROP CONSTRAINT [FK_tlbMonitoringSessionSummary_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummaryDiagnosis_tlbMonitoringSessionSummary__idfMonitoringSessionSummary]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_tlbMonitoringSessionSummary__idfMonitoringSessionSummary];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummarySample_tlbMonitoringSessionSummary__idfMonitoringSessionSummary]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] DROP CONSTRAINT [FK_tlbMonitoringSessionSummarySample_tlbMonitoringSessionSummary__idfMonitoringSessionSummary];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummarySample_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] DROP CONSTRAINT [FK_tlbMonitoringSessionSummarySample_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummarySample_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] DROP CONSTRAINT [FK_tlbMonitoringSessionSummarySample_trtSampleType__idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_tlbMonitoringSession__idfMonitoringSession_R_1750]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_tlbMonitoringSession__idfMonitoringSession_R_1750];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1757]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1757];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtSampleType__idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtSpeciesType__idfsSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtSpeciesType__idfsSpeciesType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_tlbMaterial]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] DROP CONSTRAINT [FK_tlbMonitoringSessionToMaterial_tlbMaterial];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseRef_idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] DROP CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseRef_idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseReference]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] DROP CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] DROP CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbObservation_ffFormTemplate__idfsFormTemplate_R_1405]...';


GO
ALTER TABLE [dbo].[tlbObservation] DROP CONSTRAINT [FK_tlbObservation_ffFormTemplate__idfsFormTemplate_R_1405];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbObservation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbObservation] DROP CONSTRAINT [FK_tlbObservation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbObservation_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbObservation] DROP CONSTRAINT [FK_tlbObservation_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_BaseRef_]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_BaseRef_];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_tlbGeoLocationShared]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_tlbGeoLocationShared];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_trtBaseReference__idfsOfficeAbbreviation_R_704]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_trtBaseReference__idfsOfficeAbbreviation_R_704];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_trtBaseReference__idfsOfficeName_R_703]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_trtBaseReference__idfsOfficeName_R_703];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_LegalFormID]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_trtBaseReference_LegalFormID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_MainFormOfActivityID]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_trtBaseReference_MainFormOfActivityID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_OwnershipFormID]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_trtBaseReference_OwnershipFormID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_tstSite__idfsSite_R_1030]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_tstSite__idfsSite_R_1030];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreak_BaseRef_OutbreakTypeID]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutbreak_BaseRef_OutbreakTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreak_tlbGeoLocation__idfGeoLocation_R_1469]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutbreak_tlbGeoLocation__idfGeoLocation_R_1469];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreak_trtBaseReference__idfsDiagnosisOrDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutbreak_trtBaseReference__idfsDiagnosisOrDiagnosisGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreak_trtBaseReference__idfsOutbreakStatus_R_1262]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutbreak_trtBaseReference__idfsOutbreakStatus_R_1262];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreak_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutbreak_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreak_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutbreak_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbHumanCase__idfHumanCase]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] DROP CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbHumanCase__idfHumanCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByOffice]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] DROP CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByPerson]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] DROP CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbObservation__idfObservation]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] DROP CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfObservation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbVetCase__idfVetCase]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] DROP CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbVetCase__idfVetCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] DROP CONSTRAINT [FK_tlbOutbreakCaseMonitoring_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakNote_BaseRef_UpdatePriorityID]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] DROP CONSTRAINT [FK_tlbOutbreakNote_BaseRef_UpdatePriorityID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakNote_tlbOutbreak__idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] DROP CONSTRAINT [FK_tlbOutbreakNote_tlbOutbreak__idfOutbreak];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakNote_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] DROP CONSTRAINT [FK_tlbOutbreakNote_tlbPerson__idfPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakNote_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] DROP CONSTRAINT [FK_tlbOutbreakNote_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_tlbMaterial__idfMaterial_R_1664]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_tlbMaterial__idfMaterial_R_1664];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_tlbOffice_idfTestedByOffice]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_tlbOffice_idfTestedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_tlbPerson_idfTestedByPerson]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_tlbPerson_idfTestedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference__idfsPensideTestCategory]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestCategory];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference__idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference__idfsPensideTestResult_R_1573]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestResult_R_1573];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_trtDiagnosis_idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_trtDiagnosis_idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPerson_tlbDepartment__idfDepartment]...';


GO
ALTER TABLE [dbo].[tlbPerson] DROP CONSTRAINT [FK_tlbPerson_tlbDepartment__idfDepartment];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPerson_tlbEmployee__idfPerson_R_1498]...';


GO
ALTER TABLE [dbo].[tlbPerson] DROP CONSTRAINT [FK_tlbPerson_tlbEmployee__idfPerson_R_1498];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPerson_tlbOffice__idfInstitution_R_1509]...';


GO
ALTER TABLE [dbo].[tlbPerson] DROP CONSTRAINT [FK_tlbPerson_tlbOffice__idfInstitution_R_1509];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPerson_trtBaseReference__idfsStaffPosition_R_1511]...';


GO
ALTER TABLE [dbo].[tlbPerson] DROP CONSTRAINT [FK_tlbPerson_trtBaseReference__idfsStaffPosition_R_1511];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPerson_trtBaseReference_PersonalIDTypeID]...';


GO
ALTER TABLE [dbo].[tlbPerson] DROP CONSTRAINT [FK_tlbPerson_trtBaseReference_PersonalIDTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPerson_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbPerson] DROP CONSTRAINT [FK_tlbPerson_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPostalCode_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] DROP CONSTRAINT [FK_tlbPostalCode_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPostalCode_gisSettlement__idfsSettlement_R_17]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] DROP CONSTRAINT [FK_tlbPostalCode_gisSettlement__idfsSettlement_R_17];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPostalCode_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] DROP CONSTRAINT [FK_tlbPostalCode_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbReportForm_idfsReportFormType]...';


GO
ALTER TABLE [dbo].[tlbReportForm] DROP CONSTRAINT [FK_tlbReportForm_idfsReportFormType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbReportForm_tlbOffice__idfEnteredByOffice]...';


GO
ALTER TABLE [dbo].[tlbReportForm] DROP CONSTRAINT [FK_tlbReportForm_tlbOffice__idfEnteredByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbReportForm_tlbOffice__idfSentByOffice]...';


GO
ALTER TABLE [dbo].[tlbReportForm] DROP CONSTRAINT [FK_tlbReportForm_tlbOffice__idfSentByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbReportForm_tlbPerson__idfEnteredByPerson]...';


GO
ALTER TABLE [dbo].[tlbReportForm] DROP CONSTRAINT [FK_tlbReportForm_tlbPerson__idfEnteredByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbReportForm_tlbPerson__idfSentByPerson]...';


GO
ALTER TABLE [dbo].[tlbReportForm] DROP CONSTRAINT [FK_tlbReportForm_tlbPerson__idfSentByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbReportForm_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbReportForm] DROP CONSTRAINT [FK_tlbReportForm_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpecies_OutbreakCaseStatus]...';


GO
ALTER TABLE [dbo].[tlbSpecies] DROP CONSTRAINT [FK_tlbSpecies_OutbreakCaseStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpecies_tlbHerd__idfHerd_R_1479]...';


GO
ALTER TABLE [dbo].[tlbSpecies] DROP CONSTRAINT [FK_tlbSpecies_tlbHerd__idfHerd_R_1479];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpecies_tlbObservation__idfObservation_R_1474]...';


GO
ALTER TABLE [dbo].[tlbSpecies] DROP CONSTRAINT [FK_tlbSpecies_tlbObservation__idfObservation_R_1474];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpecies_tlbSpeciesActual]...';


GO
ALTER TABLE [dbo].[tlbSpecies] DROP CONSTRAINT [FK_tlbSpecies_tlbSpeciesActual];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpecies_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbSpecies] DROP CONSTRAINT [FK_tlbSpecies_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpecies_trtSpeciesType__idfsSpeciesType_R_1651]...';


GO
ALTER TABLE [dbo].[tlbSpecies] DROP CONSTRAINT [FK_tlbSpecies_trtSpeciesType__idfsSpeciesType_R_1651];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpeciesActual_tlbHerdActual__idfHerdActual_R_1479]...';


GO
ALTER TABLE [dbo].[tlbSpeciesActual] DROP CONSTRAINT [FK_tlbSpeciesActual_tlbHerdActual__idfHerdActual_R_1479];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpeciesActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbSpeciesActual] DROP CONSTRAINT [FK_tlbSpeciesActual_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpeciesActual_trtSpeciesType__idfsSpeciesType_R_1651]...';


GO
ALTER TABLE [dbo].[tlbSpeciesActual] DROP CONSTRAINT [FK_tlbSpeciesActual_trtSpeciesType__idfsSpeciesType_R_1651];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_gisBaseReference__idfsArea_R_1641]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_gisBaseReference__idfsArea_R_1641];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference__idfsMainBaseReference_R_923]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsMainBaseReference_R_923];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference__idfsStatisticAreaType_R_1273]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsStatisticAreaType_R_1273];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference__idfsStatisticPeriodType_R_1272]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsStatisticPeriodType_R_1272];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference_idfsStatisticalAgeGroup]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_trtBaseReference_idfsStatisticalAgeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_trtStatisticDataType__idfsStatisticDataType_R_921]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_trtStatisticDataType__idfsStatisticDataType_R_921];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStreet_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbStreet] DROP CONSTRAINT [FK_tlbStreet_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStreet_gisSettlement__idfsSettlement_R_16]...';


GO
ALTER TABLE [dbo].[tlbStreet] DROP CONSTRAINT [FK_tlbStreet_gisSettlement__idfsSettlement_R_16];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStreet_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbStreet] DROP CONSTRAINT [FK_tlbStreet_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestAmendmentHistory_tlbOffice__idfAmendByOffice]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] DROP CONSTRAINT [FK_tlbTestAmendmentHistory_tlbOffice__idfAmendByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestAmendmentHistory_tlbPerson__idfAmendByPerson]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] DROP CONSTRAINT [FK_tlbTestAmendmentHistory_tlbPerson__idfAmendByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestAmendmentHistory_tlbTesting__idfTesting]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] DROP CONSTRAINT [FK_tlbTestAmendmentHistory_tlbTesting__idfTesting];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestAmendmentHistory_trtBaseReference__idfsNewTestResult]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] DROP CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference__idfsNewTestResult];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestAmendmentHistory_trtBaseReference__idfsOldTestResult]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] DROP CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference__idfsOldTestResult];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestAmendmentHistory_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] DROP CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbBatchTest__idfBatchTest_R_1534]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbBatchTest__idfBatchTest_R_1534];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbHumanCase]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbHumanCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbMaterial]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbMaterial];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbMonitoringSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfPerformedByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbOffice__idfPerformedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfResultEnteredByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbOffice__idfResultEnteredByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfTestedByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbOffice__idfTestedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfValidatedByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbOffice__idfValidatedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbPerson__idfResultEnteredByPerson]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbPerson__idfResultEnteredByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbPerson__idfTestedByPerson]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbPerson__idfTestedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbPerson__idfValidatedByPerson]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbPerson__idfValidatedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbVector]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbVector];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbVetCase]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbVetCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestCategory]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestCategory];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestResult_R_1243]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestResult_R_1243];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestStatus_R_1754]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestStatus_R_1754];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtBaseReference_PreviousTestStatusID]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtBaseReference_PreviousTestStatusID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_tlbOffice__idfInterpretedByOffice_R_1550]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_tlbOffice__idfInterpretedByOffice_R_1550];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_tlbOffice__idfValidatedByOffice_R_1548]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_tlbOffice__idfValidatedByOffice_R_1548];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_tlbPerson__idfInterpretedByPerson_R_1551]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_tlbPerson__idfInterpretedByPerson_R_1551];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_tlbPerson__idfValidatedByPerson_R_1549]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_tlbPerson__idfValidatedByPerson_R_1549];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_tlbTesting__idfTesting_R_1546]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_tlbTesting__idfTesting_R_1546];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_trtBaseReference__idfsInterpretedStatus_R_1552]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_trtBaseReference__idfsInterpretedStatus_R_1552];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_trtDiagnosis__idfsDiagnosis_R_1547]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_trtDiagnosis__idfsDiagnosis_R_1547];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOUT_tlbOffice__idfSendFromOffice_R_1516]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] DROP CONSTRAINT [FK_tlbTransferOUT_tlbOffice__idfSendFromOffice_R_1516];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOUT_tlbOffice__idfSendToOffice_R_1517]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] DROP CONSTRAINT [FK_tlbTransferOUT_tlbOffice__idfSendToOffice_R_1517];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOUT_tlbPerson__idfSendByPerson_R_1518]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] DROP CONSTRAINT [FK_tlbTransferOUT_tlbPerson__idfSendByPerson_R_1518];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOUT_trtBaseReference__idfsTransferStatus_R_1671]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] DROP CONSTRAINT [FK_tlbTransferOUT_trtBaseReference__idfsTransferStatus_R_1671];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOUT_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] DROP CONSTRAINT [FK_tlbTransferOUT_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOUT_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] DROP CONSTRAINT [FK_tlbTransferOUT_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOutMaterial_tlbMaterial]...';


GO
ALTER TABLE [dbo].[tlbTransferOutMaterial] DROP CONSTRAINT [FK_tlbTransferOutMaterial_tlbMaterial];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOutMaterial_tlbTransferOUT]...';


GO
ALTER TABLE [dbo].[tlbTransferOutMaterial] DROP CONSTRAINT [FK_tlbTransferOutMaterial_tlbTransferOUT];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOutMaterial_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTransferOutMaterial] DROP CONSTRAINT [FK_tlbTransferOutMaterial_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVaccination_tlbSpecies__idfSpecies_R_1654]...';


GO
ALTER TABLE [dbo].[tlbVaccination] DROP CONSTRAINT [FK_tlbVaccination_tlbSpecies__idfSpecies_R_1654];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVaccination_tlbVetCase__idfVetCase_R_1482]...';


GO
ALTER TABLE [dbo].[tlbVaccination] DROP CONSTRAINT [FK_tlbVaccination_tlbVetCase__idfVetCase_R_1482];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVaccination_trtBaseReference__idfsVaccinationRoute_R_1302]...';


GO
ALTER TABLE [dbo].[tlbVaccination] DROP CONSTRAINT [FK_tlbVaccination_trtBaseReference__idfsVaccinationRoute_R_1302];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVaccination_trtBaseReference__idfsVaccinationType_R_1301]...';


GO
ALTER TABLE [dbo].[tlbVaccination] DROP CONSTRAINT [FK_tlbVaccination_trtBaseReference__idfsVaccinationType_R_1301];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVaccination_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVaccination] DROP CONSTRAINT [FK_tlbVaccination_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVaccination_trtDiagnosis__idfsDiagnosis_R_983]...';


GO
ALTER TABLE [dbo].[tlbVaccination] DROP CONSTRAINT [FK_tlbVaccination_trtDiagnosis__idfsDiagnosis_R_983];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbGeoLocation_idfLocation]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbGeoLocation_idfLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbObservation_idfObservation]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbObservation_idfObservation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbOffice_idfCollectedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbOffice_idfCollectedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbOffice_idfIdentifiedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbOffice_idfIdentifiedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbPerson_idfCollectedByPerson]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbPerson_idfCollectedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbPerson_idfIdentifiedByPerson]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbPerson_idfIdentifiedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbVector_idfHostVector]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbVector_idfHostVector];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbVectorSurveillanceSession_idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbVectorSurveillanceSession_idfVectorSurveillanceSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference__idfsEctoparasitesCollected]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference__idfsEctoparasitesCollected];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsBasisOfREcord]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_idfsBasisOfREcord];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsCollectionMethod]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_idfsCollectionMethod];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsDayPeriod]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_idfsDayPeriod];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsIdentificationMethod]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_idfsIdentificationMethod];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsSex]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_idfsSex];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsSurrounding]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_idfsSurrounding];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtVectorSubType_idfsVectorSubType]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtVectorSubType_idfsVectorSubType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtVectorType_idfsVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_tlbGeoLocation_idfLocation]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] DROP CONSTRAINT [FK_tlbVectorSurveillanceSession_tlbGeoLocation_idfLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_tlbOutbreak_idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] DROP CONSTRAINT [FK_tlbVectorSurveillanceSession_tlbOutbreak_idfOutbreak];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] DROP CONSTRAINT [FK_tlbVectorSurveillanceSession_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_trtBaseReference_VectorSurveillanceStatus]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] DROP CONSTRAINT [FK_tlbVectorSurveillanceSession_trtBaseReference_VectorSurveillanceStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] DROP CONSTRAINT [FK_tlbVectorSurveillanceSession_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_tlbGeoLocation__idfGeoLocation]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_tlbGeoLocation__idfGeoLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_tlbVectorSurveillanceSession__idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_tlbVectorSurveillanceSession__idfVectorSurveillanceSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_trtVectorSubType__idfsVectorSubType]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_trtVectorSubType__idfsVectorSubType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummaryDiagnosis_tlbVectorSurveillanceSessionSummary__idfsVSSessionSummary]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_tlbVectorSurveillanceSessionSummary__idfsVSSessionSummary];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbFarm]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbFarm];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbMonitoringSession__idfParentMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbMonitoringSession__idfParentMonitoringSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbObservation__idfObservation_R_1447]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbObservation__idfObservation_R_1447];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbOffice__idfInvestigatedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbOffice__idfInvestigatedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbOffice__idfReportedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbOffice__idfReportedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbOffice_idfReceivedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbOffice_idfReceivedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbOutbreak__idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbOutbreak__idfOutbreak];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbPerson__idfPersonEnteredBy_R_1507]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonEnteredBy_R_1507];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbPerson__idfPersonInvestigatedBy_R_1506]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonInvestigatedBy_R_1506];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbPerson__idfPersonReportedBy_R_1508]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonReportedBy_R_1508];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbPerson_idfReceivedByPerson]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbPerson_idfReceivedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseClassification]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseClassification];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseProgressStatus]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseProgressStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseReportType]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseType]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsYNTestsConducted]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsYNTestsConducted];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsFinalDiagnosis_R_1438]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsFinalDiagnosis_R_1438];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsShowDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsShowDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis_R_1435]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis_R_1435];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis1_R_1436]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis1_R_1436];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis2_R_1437]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis2_R_1437];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tstSite__idfsSite_R_1588]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tstSite__idfsSite_R_1588];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseDisplayDiagnosis_tlbVetCase_idfVetCase]...';


GO
ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] DROP CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_tlbVetCase_idfVetCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] DROP CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] DROP CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseLog_tlbPerson__idfPerson_R_1501]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] DROP CONSTRAINT [FK_tlbVetCaseLog_tlbPerson__idfPerson_R_1501];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseLog_tlbVetCase__idfVetCase_R_1489]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] DROP CONSTRAINT [FK_tlbVetCaseLog_tlbVetCase__idfVetCase_R_1489];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseLog_trtBaseReference__idfsCaseLogStatus_R_1490]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] DROP CONSTRAINT [FK_tlbVetCaseLog_trtBaseReference__idfsCaseLogStatus_R_1490];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] DROP CONSTRAINT [FK_tlbVetCaseLog_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbxSiteDocumentMap_LkupEIDSSMenu]...';


GO
ALTER TABLE [dbo].[tlbxSiteDocumentMap] DROP CONSTRAINT [FK_tlbxSiteDocumentMap_LkupEIDSSMenu];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtAttributeType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtAttributeType] DROP CONSTRAINT [FK_trtAttributeType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReference] DROP CONSTRAINT [FK_trtBaseReference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReference_trtReferenceType__idfsReferenceType_R_381]...';


GO
ALTER TABLE [dbo].[trtBaseReference] DROP CONSTRAINT [FK_trtBaseReference_trtReferenceType__idfsReferenceType_R_381];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceAttribute_trtAttributeType__idfAttributeType]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttribute] DROP CONSTRAINT [FK_trtBaseReferenceAttribute_trtAttributeType__idfAttributeType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceAttribute_trtBaseReference__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttribute] DROP CONSTRAINT [FK_trtBaseReferenceAttribute_trtBaseReference__idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceAttribute_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttribute] DROP CONSTRAINT [FK_trtBaseReferenceAttribute_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceAttributeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] DROP CONSTRAINT [FK_trtBaseReferenceAttributeToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceAttributeToCP_trtBaseReferenceAttribute__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] DROP CONSTRAINT [FK_trtBaseReferenceAttributeToCP_trtBaseReferenceAttribute__idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceAttributeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] DROP CONSTRAINT [FK_trtBaseReferenceAttributeToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceToCP_trtBaseReference__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceToCP] DROP CONSTRAINT [FK_trtBaseReferenceToCP_trtBaseReference__idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceToCP] DROP CONSTRAINT [FK_trtBaseReferenceToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceToCP] DROP CONSTRAINT [FK_trtBaseReferenceToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBssAggregateColumns_tauColumn__idfColumn]...';


GO
ALTER TABLE [dbo].[trtBssAggregateColumns] DROP CONSTRAINT [FK_trtBssAggregateColumns_tauColumn__idfColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBssAggregateColumns_trtBaseReference__idfsBssAggregateColumn]...';


GO
ALTER TABLE [dbo].[trtBssAggregateColumns] DROP CONSTRAINT [FK_trtBssAggregateColumns_trtBaseReference__idfsBssAggregateColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBssAggregateColumns_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBssAggregateColumns] DROP CONSTRAINT [FK_trtBssAggregateColumns_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCaseClassification_trtBaseReference__idfsCaseClassification]...';


GO
ALTER TABLE [dbo].[trtCaseClassification] DROP CONSTRAINT [FK_trtCaseClassification_trtBaseReference__idfsCaseClassification];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCaseClassification_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtCaseClassification] DROP CONSTRAINT [FK_trtCaseClassification_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCollectionMethodForVectorType_trtBaseReference_idfsCollectionMethod]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorType] DROP CONSTRAINT [FK_trtCollectionMethodForVectorType_trtBaseReference_idfsCollectionMethod];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCollectionMethodForVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorType] DROP CONSTRAINT [FK_trtCollectionMethodForVectorType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCollectionMethodForVectorType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorType] DROP CONSTRAINT [FK_trtCollectionMethodForVectorType_trtVectorType_idfsVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCollectionMethodForVectorTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] DROP CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCollectionMethodForVectorTypeToCP_trtCollectionMethodForVectorType_idfCollectionMethodForVectorType]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] DROP CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_trtCollectionMethodForVectorType_idfCollectionMethodForVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCollectionMethodForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] DROP CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDerivativeForSampleType_trtBaseReference__idfsDerivativeType_R_1863]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleType] DROP CONSTRAINT [FK_trtDerivativeForSampleType_trtBaseReference__idfsDerivativeType_R_1863];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDerivativeForSampleType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleType] DROP CONSTRAINT [FK_trtDerivativeForSampleType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDerivativeForSampleType_trtSampleType__idfsSampleType_R_1862]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleType] DROP CONSTRAINT [FK_trtDerivativeForSampleType_trtSampleType__idfsSampleType_R_1862];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDerivativeForSampleTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] DROP CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDerivativeForSampleTypeToCP_trtDerivativeForSampleType__idfDerivativeForSampleType]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] DROP CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_trtDerivativeForSampleType__idfDerivativeForSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDerivativeForSampleTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] DROP CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosis_trtBaseReference__idfsDiagnosis_R_624]...';


GO
ALTER TABLE [dbo].[trtDiagnosis] DROP CONSTRAINT [FK_trtDiagnosis_trtBaseReference__idfsDiagnosis_R_624];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosis_trtBaseReference__idfsUsingType_R_1600]...';


GO
ALTER TABLE [dbo].[trtDiagnosis] DROP CONSTRAINT [FK_trtDiagnosis_trtBaseReference__idfsUsingType_R_1600];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosis] DROP CONSTRAINT [FK_trtDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroup_trtBaseReference_idfsAgeType]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroup] DROP CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_idfsAgeType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroup_trtBaseReference_idfsDiagnosisAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroup] DROP CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_idfsDiagnosisAgeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroup] DROP CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosis_idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosis_idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosisToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstPersonalDataGroup_idfDiagnosisAgeGroupToDiagnosis]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstPersonalDataGroup_idfDiagnosisAgeGroupToDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_idfsStatisticalAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_idfsStatisticalAgeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtDiagnosisAgeGroupToStatisticalAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtDiagnosisAgeGroupToStatisticalAgeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroup_trtBaseReference__idfsDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] DROP CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtBaseReference__idfsDiagnosisGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] DROP CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroup_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] DROP CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroupToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] DROP CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroupToCP_trtDiagnosisToDiagnosisGroup_idfDiagnosisToDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] DROP CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_trtDiagnosisToDiagnosisGroup_idfDiagnosisToDiagnosisGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroupToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] DROP CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtBaseReference__idfsCustomReportType_R_1871]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] DROP CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtBaseReference__idfsCustomReportType_R_1871];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] DROP CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtDiagnosis__idfsDiagnosis_R_1873]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] DROP CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtDiagnosis__idfsDiagnosis_R_1873];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtReportDiagnosisGroup__idfsReportDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] DROP CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtReportDiagnosisGroup__idfsReportDiagnosisGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtEventType_trtBaseReference__idfsEventSubscription]...';


GO
ALTER TABLE [dbo].[trtEventType] DROP CONSTRAINT [FK_trtEventType_trtBaseReference__idfsEventSubscription];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtEventType_trtBaseReference__idfsEventTypeID_R_663]...';


GO
ALTER TABLE [dbo].[trtEventType] DROP CONSTRAINT [FK_trtEventType_trtBaseReference__idfsEventTypeID_R_663];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtEventType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtEventType] DROP CONSTRAINT [FK_trtEventType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtFFObjectForCustomReport_trtBaseReference]...';


GO
ALTER TABLE [dbo].[trtFFObjectForCustomReport] DROP CONSTRAINT [FK_trtFFObjectForCustomReport_trtBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtFFObjectForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtFFObjectForCustomReport] DROP CONSTRAINT [FK_trtFFObjectForCustomReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtFFObjectToDiagnosisForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] DROP CONSTRAINT [FK_trtFFObjectToDiagnosisForCustomReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtFFObjectToDiagnosisForCustomReport_trtDiagnosis]...';


GO
ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] DROP CONSTRAINT [FK_trtFFObjectToDiagnosisForCustomReport_trtDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtFFParameterToDiagnosisForCustomReport_trtFFParameterForCustomReport]...';


GO
ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] DROP CONSTRAINT [FK_trtFFParameterToDiagnosisForCustomReport_trtFFParameterForCustomReport];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtGISBaseReferenceAttribute_gisBaseReference__idfsGISBaseReference]...';


GO
ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] DROP CONSTRAINT [FK_trtGISBaseReferenceAttribute_gisBaseReference__idfsGISBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtGISBaseReferenceAttribute_trtAttributeType__idfAttributeType]...';


GO
ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] DROP CONSTRAINT [FK_trtGISBaseReferenceAttribute_trtAttributeType__idfAttributeType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtGISBaseReferenceAttribute_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] DROP CONSTRAINT [FK_trtGISBaseReferenceAttribute_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtGISObjectForCustomReport_gisBaseReference__idfsGISBaseReference]...';


GO
ALTER TABLE [dbo].[trtGISObjectForCustomReport] DROP CONSTRAINT [FK_trtGISObjectForCustomReport_gisBaseReference__idfsGISBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtGISObjectForCustomReport_trtBaseReference__idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtGISObjectForCustomReport] DROP CONSTRAINT [FK_trtGISObjectForCustomReport_trtBaseReference__idfsCustomReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtGISObjectForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtGISObjectForCustomReport] DROP CONSTRAINT [FK_trtGISObjectForCustomReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtHACodeList_trtBaseReference__idfsCodeName_R_674]...';


GO
ALTER TABLE [dbo].[trtHACodeList] DROP CONSTRAINT [FK_trtHACodeList_trtBaseReference__idfsCodeName_R_674];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtHACodeList_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtHACodeList] DROP CONSTRAINT [FK_trtHACodeList_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtLanguageToCP_trtBaseReference__idfsLanguage_idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtLanguageToCP] DROP CONSTRAINT [FK_trtLanguageToCP_trtBaseReference__idfsLanguage_idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtLanguageToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtLanguageToCP] DROP CONSTRAINT [FK_trtLanguageToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtLanguageToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtLanguageToCP] DROP CONSTRAINT [FK_trtLanguageToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMaterialForDisease_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMaterialForDisease] DROP CONSTRAINT [FK_trtMaterialForDisease_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMaterialForDisease_trtDiagnosis__idfsDiagnosis_R_891]...';


GO
ALTER TABLE [dbo].[trtMaterialForDisease] DROP CONSTRAINT [FK_trtMaterialForDisease_trtDiagnosis__idfsDiagnosis_R_891];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMaterialForDisease_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[trtMaterialForDisease] DROP CONSTRAINT [FK_trtMaterialForDisease_trtSampleType__idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMaterialForDiseaseToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] DROP CONSTRAINT [FK_trtMaterialForDiseaseToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMaterialForDiseaseToCP_trtMaterialForDisease__idfMaterialForDisease_R_1876]...';


GO
ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] DROP CONSTRAINT [FK_trtMaterialForDiseaseToCP_trtMaterialForDisease__idfMaterialForDisease_R_1876];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMaterialForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] DROP CONSTRAINT [FK_trtMaterialForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference__idfsEditor]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] DROP CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsEditor];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference__idfsMatrixColumn]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] DROP CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsMatrixColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference__idfsParameterType]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] DROP CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsParameterType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] DROP CONSTRAINT [FK_trtMatrixColumn_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixColumn_trtMatrixType__idfsMatrixType]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] DROP CONSTRAINT [FK_trtMatrixColumn_trtMatrixType__idfsMatrixType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixType_trtBaseReference__idfsFormType]...';


GO
ALTER TABLE [dbo].[trtMatrixType] DROP CONSTRAINT [FK_trtMatrixType_trtBaseReference__idfsFormType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixType_trtBaseReference__idfsMatrixType]...';


GO
ALTER TABLE [dbo].[trtMatrixType] DROP CONSTRAINT [FK_trtMatrixType_trtBaseReference__idfsMatrixType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMatrixType] DROP CONSTRAINT [FK_trtMatrixType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectOperation_R_1620]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] DROP CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectOperation_R_1620];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectType_R_1619]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] DROP CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectType_R_1619];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectOperation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] DROP CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference__idfsParentObjectType_R_1621]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] DROP CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsParentObjectType_R_1621];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference__idfsRelatedObjectType_R_1622]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] DROP CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsRelatedObjectType_R_1622];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference__idfsStatus_R_1623]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] DROP CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsStatus_R_1623];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] DROP CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestForDisease_trtBaseReference__idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDisease] DROP CONSTRAINT [FK_trtPensideTestForDisease_trtBaseReference__idfsPensideTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestForDisease_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDisease] DROP CONSTRAINT [FK_trtPensideTestForDisease_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestForDisease_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDisease] DROP CONSTRAINT [FK_trtPensideTestForDisease_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestForDiseaseToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] DROP CONSTRAINT [FK_trtPensideTestForDiseaseToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestForDiseaseToCP_trtPensideTestForDisease__idfPensideTestForDisease]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] DROP CONSTRAINT [FK_trtPensideTestForDiseaseToCP_trtPensideTestForDisease__idfPensideTestForDisease];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] DROP CONSTRAINT [FK_trtPensideTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeForVectorType_trtBaseReference_idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] DROP CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtBaseReference_idfsPensideTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeForVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] DROP CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeForVectorType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] DROP CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtVectorType_idfsVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] DROP CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeForVectorTypeToCP_trtPensideTestTypeForVectorType_idfPensideTestTypeForVectorType]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] DROP CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_trtPensideTestTypeForVectorType_idfPensideTestTypeForVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] DROP CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] DROP CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestResult_R_1663]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] DROP CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestResult_R_1663];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeToTestResult_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] DROP CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] DROP CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeToTestResultToCP_trtPensideTestTypeToTestResult__idfsPensideTestName_idfsPensideTestResult]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] DROP CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_trtPensideTestTypeToTestResult__idfsPensideTestName_idfsPensideTestResult];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] DROP CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtProphilacticAction_trtBaseReference__idfsProphilacticAction_R_1109]...';


GO
ALTER TABLE [dbo].[trtProphilacticAction] DROP CONSTRAINT [FK_trtProphilacticAction_trtBaseReference__idfsProphilacticAction_R_1109];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtProphilacticAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtProphilacticAction] DROP CONSTRAINT [FK_trtProphilacticAction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReferenceType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtReferenceType] DROP CONSTRAINT [FK_trtReferenceType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportDiagnosisGroup_trtBaseReference__idfsReportDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtReportDiagnosisGroup] DROP CONSTRAINT [FK_trtReportDiagnosisGroup_trtBaseReference__idfsReportDiagnosisGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportDiagnosisGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtReportDiagnosisGroup] DROP CONSTRAINT [FK_trtReportDiagnosisGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsCustomReportType_R_1867]...';


GO
ALTER TABLE [dbo].[trtReportRows] DROP CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsCustomReportType_R_1867];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsDiagnosisOrReportDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtReportRows] DROP CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsDiagnosisOrReportDiagnosisGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsICDReportAdditionalText]...';


GO
ALTER TABLE [dbo].[trtReportRows] DROP CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsICDReportAdditionalText];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsReportAdditionalText_R_1895]...';


GO
ALTER TABLE [dbo].[trtReportRows] DROP CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsReportAdditionalText_R_1895];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportRows_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtReportRows] DROP CONSTRAINT [FK_trtReportRows_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResource_idfsResourceType]...';


GO
ALTER TABLE [dbo].[trtResource] DROP CONSTRAINT [FK_trtResource_idfsResourceType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResource_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResource] DROP CONSTRAINT [FK_trtResource_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSet_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSet] DROP CONSTRAINT [FK_trtResourceSet_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetHierarchy_idfsResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetHierarchy] DROP CONSTRAINT [FK_trtResourceSetHierarchy_idfsResourceSet];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetHierarchy_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetHierarchy] DROP CONSTRAINT [FK_trtResourceSetHierarchy_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetToResource_idfsResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] DROP CONSTRAINT [FK_trtResourceSetToResource_idfsResourceSet];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetToResource_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] DROP CONSTRAINT [FK_trtResourceSetToResource_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetToResource_trtResource]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] DROP CONSTRAINT [FK_trtResourceSetToResource_trtResource];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetTranslation__idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] DROP CONSTRAINT [FK_trtResourceSetTranslation__idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] DROP CONSTRAINT [FK_trtResourceSetTranslation_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetTranslation_trtResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] DROP CONSTRAINT [FK_trtResourceSetTranslation_trtResourceSet];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceTranslation_idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] DROP CONSTRAINT [FK_trtResourceTranslation_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] DROP CONSTRAINT [FK_trtResourceTranslation_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceTranslation_trtResource]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] DROP CONSTRAINT [FK_trtResourceTranslation_trtResource];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleType_trtBaseReference__idfsSampleType_R_1866]...';


GO
ALTER TABLE [dbo].[trtSampleType] DROP CONSTRAINT [FK_trtSampleType_trtBaseReference__idfsSampleType_R_1866];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSampleType] DROP CONSTRAINT [FK_trtSampleType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleTypeForVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorType] DROP CONSTRAINT [FK_trtSampleTypeForVectorType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleTypeForVectorType_trtSampleType_idfsSampleType]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorType] DROP CONSTRAINT [FK_trtSampleTypeForVectorType_trtSampleType_idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleTypeForVectorType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorType] DROP CONSTRAINT [FK_trtSampleTypeForVectorType_trtVectorType_idfsVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] DROP CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleTypeForVectorTypeToCP_trtSampleTypeForVectorType_idfSampleTypeForVectorType]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] DROP CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_trtSampleTypeForVectorType_idfSampleTypeForVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] DROP CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSanitaryAction_trtBaseReference__idfsSanitaryAction_R_1110]...';


GO
ALTER TABLE [dbo].[trtSanitaryAction] DROP CONSTRAINT [FK_trtSanitaryAction_trtBaseReference__idfsSanitaryAction_R_1110];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSanitaryAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSanitaryAction] DROP CONSTRAINT [FK_trtSanitaryAction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] DROP CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsCustomReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsReportAdditionalText]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] DROP CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsReportAdditionalText];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsSpeciesOrSpeciesGroup]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] DROP CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsSpeciesOrSpeciesGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] DROP CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesGroup_trtBaseReference_idfsSpeciesGroup]...';


GO
ALTER TABLE [dbo].[trtSpeciesGroup] DROP CONSTRAINT [FK_trtSpeciesGroup_trtBaseReference_idfsSpeciesGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesGroup] DROP CONSTRAINT [FK_trtSpeciesGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtBaseReference_idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] DROP CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtBaseReference_idfsCustomReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] DROP CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtSpeciesGroup_idfsSpeciesGroup]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] DROP CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtSpeciesGroup_idfsSpeciesGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtSpeciesType_idfsSpeciesType]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] DROP CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtSpeciesType_idfsSpeciesType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesType_trtBaseReference__idfsSpeciesType_R_1650]...';


GO
ALTER TABLE [dbo].[trtSpeciesType] DROP CONSTRAINT [FK_trtSpeciesType_trtBaseReference__idfsSpeciesType_R_1650];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesType] DROP CONSTRAINT [FK_trtSpeciesType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAge_trtBaseReference__idfsAnimalAge_R_1599]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] DROP CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtBaseReference__idfsAnimalAge_R_1599];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAge_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] DROP CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAge_trtSpeciesType__idfsSpeciesType_R_1598]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] DROP CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtSpeciesType__idfsSpeciesType_R_1598];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAgeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] DROP CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAgeToCP_trtSpeciesTypeToAnimalAge__idfSpeciesTypeToAnimalAge_R_1882]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] DROP CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_trtSpeciesTypeToAnimalAge__idfSpeciesTypeToAnimalAge_R_1882];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAgeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] DROP CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference__idfsStatisticAreaType_R_1591]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] DROP CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticAreaType_R_1591];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference__idfsStatisticDataType_R_496]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] DROP CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticDataType_R_496];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference__idfsStatisticPeriodType_R_1592]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] DROP CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticPeriodType_R_1592];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] DROP CONSTRAINT [FK_trtStatisticDataType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStatisticDataType_trtReferenceType__idfsReferenceType_R_933]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] DROP CONSTRAINT [FK_trtStatisticDataType_trtReferenceType__idfsReferenceType_R_933];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStringNameTranslation_trtBaseReference__idfsBaseReference_R_385]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslation] DROP CONSTRAINT [FK_trtStringNameTranslation_trtBaseReference__idfsBaseReference_R_385];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStringNameTranslation_trtBaseReference__idfsLanguage_R_1584]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslation] DROP CONSTRAINT [FK_trtStringNameTranslation_trtBaseReference__idfsLanguage_R_1584];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslation] DROP CONSTRAINT [FK_trtStringNameTranslation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStringNameTranslationToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslationToCP] DROP CONSTRAINT [FK_trtStringNameTranslationToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStringNameTranslationToCP_trtStringNameTranslation__idfsBaseReference_idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslationToCP] DROP CONSTRAINT [FK_trtStringNameTranslationToCP_trtStringNameTranslation__idfsBaseReference_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStringNameTranslationToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslationToCP] DROP CONSTRAINT [FK_trtStringNameTranslationToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSystemFunction_trtBaseReference__idfsObjectType_R_1581]...';


GO
ALTER TABLE [dbo].[trtSystemFunction] DROP CONSTRAINT [FK_trtSystemFunction_trtBaseReference__idfsObjectType_R_1581];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSystemFunction_trtBaseReference__idfsSystemFunction_R_1038]...';


GO
ALTER TABLE [dbo].[trtSystemFunction] DROP CONSTRAINT [FK_trtSystemFunction_trtBaseReference__idfsSystemFunction_R_1038];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSystemFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSystemFunction] DROP CONSTRAINT [FK_trtSystemFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSystemFunctionOperation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSystemFunctionOperation] DROP CONSTRAINT [FK_trtSystemFunctionOperation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDisease_trtBaseReference__idfsTestCategory]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] DROP CONSTRAINT [FK_trtTestForDisease_trtBaseReference__idfsTestCategory];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDisease_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] DROP CONSTRAINT [FK_trtTestForDisease_trtBaseReference__idfsTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDisease_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] DROP CONSTRAINT [FK_trtTestForDisease_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDisease_trtDiagnosis__idfsDiagnosis_R_892]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] DROP CONSTRAINT [FK_trtTestForDisease_trtDiagnosis__idfsDiagnosis_R_892];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDisease_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] DROP CONSTRAINT [FK_trtTestForDisease_trtSampleType__idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDiseaseToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestForDiseaseToCP] DROP CONSTRAINT [FK_trtTestForDiseaseToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDiseaseToCP_trtTestForDisease__idfTestForDisease_R_1884]...';


GO
ALTER TABLE [dbo].[trtTestForDiseaseToCP] DROP CONSTRAINT [FK_trtTestForDiseaseToCP_trtTestForDisease__idfTestForDisease_R_1884];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtTestForDiseaseToCP] DROP CONSTRAINT [FK_trtTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeForCustomReport_trtBaseReference__idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtTestTypeForCustomReport] DROP CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference__idfsCustomReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeForCustomReport_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[trtTestTypeForCustomReport] DROP CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference__idfsTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestTypeForCustomReport] DROP CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeToTestResult_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResult] DROP CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference__idfsTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeToTestResult_trtBaseReference__idfsTestResult_R_1596]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResult] DROP CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference__idfsTestResult_R_1596];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeToTestResult_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResult] DROP CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeToTestResultToCountry_trtTestTypeToTestResult__idfsTestName_idfsTestResult]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] DROP CONSTRAINT [FK_trtTestTypeToTestResultToCountry_trtTestTypeToTestResult__idfsTestName_idfsTestResult];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] DROP CONSTRAINT [FK_trtTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] DROP CONSTRAINT [FK_trtTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtVectorSubType_trtBaseReference_idfsVectorSubType]...';


GO
ALTER TABLE [dbo].[trtVectorSubType] DROP CONSTRAINT [FK_trtVectorSubType_trtBaseReference_idfsVectorSubType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtVectorSubType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtVectorSubType] DROP CONSTRAINT [FK_trtVectorSubType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtVectorSubType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtVectorSubType] DROP CONSTRAINT [FK_trtVectorSubType_trtVectorType_idfsVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtVectorType_trtBaseReference__idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtVectorType] DROP CONSTRAINT [FK_trtVectorType_trtBaseReference__idfsVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtVectorType] DROP CONSTRAINT [FK_trtVectorType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstBarcodeLayout_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstBarcodeLayout] DROP CONSTRAINT [FK_tstBarcodeLayout_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstBarcodeLayout_tstNextNumbers__idfsNumberName_R_1677]...';


GO
ALTER TABLE [dbo].[tstBarcodeLayout] DROP CONSTRAINT [FK_tstBarcodeLayout_tstNextNumbers__idfsNumberName_R_1677];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstCheckConstraints_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCheckConstraints] DROP CONSTRAINT [FK_tstCheckConstraints_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstCheckConstraints_tstCheckTables__idfCheckTable]...';


GO
ALTER TABLE [dbo].[tstCheckConstraints] DROP CONSTRAINT [FK_tstCheckConstraints_tstCheckTables__idfCheckTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstCheckTables_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCheckTables] DROP CONSTRAINT [FK_tstCheckTables_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstCustomizationPackage_gisLocation_idfsCountry]...';


GO
ALTER TABLE [dbo].[tstCustomizationPackage] DROP CONSTRAINT [FK_tstCustomizationPackage_gisLocation_idfsCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstCustomizationPackage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCustomizationPackage] DROP CONSTRAINT [FK_tstCustomizationPackage_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstCustomizationPackageSettings_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCustomizationPackageSettings] DROP CONSTRAINT [FK_tstCustomizationPackageSettings_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_gisRayon__idfsRayon];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_gisRegion__idfsRegion]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_gisRegion__idfsRegion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_trtEventType__idfsEventTypeID_R_664]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_trtEventType__idfsEventTypeID_R_664];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_tstSite__idfsLoginSite]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_tstSite__idfsLoginSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_gisRayon__idfsRayon];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_gisRegion__idfsRegion]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_gisRegion__idfsRegion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_trtEventType__idfsEventTypeID]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_trtEventType__idfsEventTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_tstSite__idfsLoginSite]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_tstSite__idfsLoginSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventClient_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEventClient] DROP CONSTRAINT [FK_tstEventClient_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventSubscription_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEventSubscription] DROP CONSTRAINT [FK_tstEventSubscription_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventSubscription_trtEventType__idfsEventTypeID_R_676]...';


GO
ALTER TABLE [dbo].[tstEventSubscription] DROP CONSTRAINT [FK_tstEventSubscription_trtEventType__idfsEventTypeID_R_676];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstGeoLocationFormat_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tstGeoLocationFormat] DROP CONSTRAINT [FK_tstGeoLocationFormat_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstGeoLocationFormat_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstGeoLocationFormat] DROP CONSTRAINT [FK_tstGeoLocationFormat_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstGlobalSiteOptions_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstGlobalSiteOptions] DROP CONSTRAINT [FK_tstGlobalSiteOptions_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstGlobalSiteOptions_tstSite__idfsSite_R_1753]...';


GO
ALTER TABLE [dbo].[tstGlobalSiteOptions] DROP CONSTRAINT [FK_tstGlobalSiteOptions_tstSite__idfsSite_R_1753];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstInvalidObjects_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstInvalidObjects] DROP CONSTRAINT [FK_tstInvalidObjects_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstInvisibleFields_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstInvisibleFields] DROP CONSTRAINT [FK_tstInvisibleFields_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstInvisibleFieldsToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstInvisibleFieldsToCP] DROP CONSTRAINT [FK_tstInvisibleFieldsToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstInvisibleFieldsToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstInvisibleFieldsToCP] DROP CONSTRAINT [FK_tstInvisibleFieldsToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstInvisibleFieldsToCP_tstInvisibleFields_idfInvisibleField]...';


GO
ALTER TABLE [dbo].[tstInvisibleFieldsToCP] DROP CONSTRAINT [FK_tstInvisibleFieldsToCP_tstInvisibleFields_idfInvisibleField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalClient_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalClient] DROP CONSTRAINT [FK_tstLocalClient_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalConnectionContext_tauDataAuditEvent__idfDataAuditEvent_R_1043]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] DROP CONSTRAINT [FK_tstLocalConnectionContext_tauDataAuditEvent__idfDataAuditEvent_R_1043];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalConnectionContext_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] DROP CONSTRAINT [FK_tstLocalConnectionContext_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalConnectionContext_tstEvent__idfEventID_R_1044]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] DROP CONSTRAINT [FK_tstLocalConnectionContext_tstEvent__idfEventID_R_1044];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalConnectionContext_tstSite__idfsSite_R_1858]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] DROP CONSTRAINT [FK_tstLocalConnectionContext_tstSite__idfsSite_R_1858];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalConnectionContext_tstUserTable__idfUserID_R_1042]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] DROP CONSTRAINT [FK_tstLocalConnectionContext_tstUserTable__idfUserID_R_1042];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_tlbMaterial__idfMaterial]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] DROP CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tlbMaterial__idfMaterial];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_tlbTesting__idfTesting]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] DROP CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tlbTesting__idfTesting];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] DROP CONSTRAINT [FK_tstLocalSamplesTestsPreferences_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_tstUserTable__idfUserID]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] DROP CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tstUserTable__idfUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalSiteOptions_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalSiteOptions] DROP CONSTRAINT [FK_tstLocalSiteOptions_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstMandatoryFields_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstMandatoryFields] DROP CONSTRAINT [FK_tstMandatoryFields_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstMandatoryFieldsToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstMandatoryFieldsToCP] DROP CONSTRAINT [FK_tstMandatoryFieldsToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstMandatoryFieldsToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstMandatoryFieldsToCP] DROP CONSTRAINT [FK_tstMandatoryFieldsToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstMandatoryFieldsToCP_tstMandatoryFields_idfMandatoryField]...';


GO
ALTER TABLE [dbo].[tstMandatoryFieldsToCP] DROP CONSTRAINT [FK_tstMandatoryFieldsToCP_tstMandatoryFields_idfMandatoryField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNewID_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNewID] DROP CONSTRAINT [FK_tstNewID_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNextNumbers_trtBaseReference__idfsNumberName_R_930]...';


GO
ALTER TABLE [dbo].[tstNextNumbers] DROP CONSTRAINT [FK_tstNextNumbers_trtBaseReference__idfsNumberName_R_930];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNextNumbers_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNextNumbers] DROP CONSTRAINT [FK_tstNextNumbers_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_trtBaseReference__idfsNotificationObjectType_R_1307]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_trtBaseReference__idfsNotificationObjectType_R_1307];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_trtBaseReference__idfsNotificationType_R_1306]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_trtBaseReference__idfsNotificationType_R_1306];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_trtBaseReference__idfsTargetSiteType_R_1304]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_trtBaseReference__idfsTargetSiteType_R_1304];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_tstSite__idfsSite_R_1035]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_tstSite__idfsSite_R_1035];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_tstSite__idfsTargetSite_R_688]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_tstSite__idfsTargetSite_R_688];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_tstUserTable__idfTargetUserID_R_720]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_tstUserTable__idfTargetUserID_R_720];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_tstUserTable__idfUserID_R_793]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_tstUserTable__idfUserID_R_793];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationActivity_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotificationActivity] DROP CONSTRAINT [FK_tstNotificationActivity_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference__idfsNotificationObjectType]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsNotificationObjectType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference__idfsNotificationType]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsNotificationType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference__idfsTargetSiteType]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsTargetSiteType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_tstSite__idfsTargetSite]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_tstSite__idfsTargetSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_tstUserTable__idfTargetUserID]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_tstUserTable__idfTargetUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_tstUserTable__idfUserID]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_tstUserTable__idfUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationStatus_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotificationStatus] DROP CONSTRAINT [FK_tstNotificationStatus_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstObjectAccess_tlbEmployee__idfActor_R_1618]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] DROP CONSTRAINT [FK_tstObjectAccess_tlbEmployee__idfActor_R_1618];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstObjectAccess_trtBaseReference__idfsObjectOperation_R_1586]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] DROP CONSTRAINT [FK_tstObjectAccess_trtBaseReference__idfsObjectOperation_R_1586];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstObjectAccess_trtBaseReference__idfsObjectType_R_1580]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] DROP CONSTRAINT [FK_tstObjectAccess_trtBaseReference__idfsObjectType_R_1580];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstObjectAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] DROP CONSTRAINT [FK_tstObjectAccess_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstObjectAccess_tstSite__idfsOnSite_R_951]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] DROP CONSTRAINT [FK_tstObjectAccess_tstSite__idfsOnSite_R_951];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstPersonalDataGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroup] DROP CONSTRAINT [FK_tstPersonalDataGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstPersonalDataGroupToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroupToCP] DROP CONSTRAINT [FK_tstPersonalDataGroupToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstPersonalDataGroupToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroupToCP] DROP CONSTRAINT [FK_tstPersonalDataGroupToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstPersonalDataGroupToCP_tstPersonalDataGroup_idfPersonalDataGroup]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroupToCP] DROP CONSTRAINT [FK_tstPersonalDataGroupToCP_tstPersonalDataGroup_idfPersonalDataGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstRayonToReportSite_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[tstRayonToReportSite] DROP CONSTRAINT [FK_tstRayonToReportSite_gisRayon__idfsRayon];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstRayonToReportSite_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstRayonToReportSite] DROP CONSTRAINT [FK_tstRayonToReportSite_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstRayonToReportSite_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstRayonToReportSite] DROP CONSTRAINT [FK_tstRayonToReportSite_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_tauDataAuditEvent__idfDataAuditEvent_R_1731]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_tauDataAuditEvent__idfDataAuditEvent_R_1731];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference__idfsAction_R_1727]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsAction_R_1727];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference__idfsProcessType_R_1729]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsProcessType_R_1729];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference__idfsResult_R_1728]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsResult_R_1728];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_tstSite]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_tstSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_tstUserTable__idfUserID_R_1726]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_tstUserTable__idfUserID_R_1726];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfiguration_trtBaseReference__idfsSecurityLevel_R_1759]...';


GO
ALTER TABLE [dbo].[tstSecurityConfiguration] DROP CONSTRAINT [FK_tstSecurityConfiguration_trtBaseReference__idfsSecurityLevel_R_1759];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfiguration_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityConfiguration] DROP CONSTRAINT [FK_tstSecurityConfiguration_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfiguration_tstSecurityConfiguration__idfParentSecurityConfiguration_R_1761]...';


GO
ALTER TABLE [dbo].[tstSecurityConfiguration] DROP CONSTRAINT [FK_tstSecurityConfiguration_tstSecurityConfiguration__idfParentSecurityConfiguration_R_1761];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabet_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabet] DROP CONSTRAINT [FK_tstSecurityConfigurationAlphabet_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabetParticipation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] DROP CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfiguration__idfSecurityConfiguration_R_1763]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] DROP CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfiguration__idfSecurityConfiguration_R_1763];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfigurationAlphabet__idfsSecurityConfigurationAlphabet_R_1762]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] DROP CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfigurationAlphabet__idfsSecurityConfigurationAlphabet_R_1762];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSite_tlbOffice__idfOffice_R_386]...';


GO
ALTER TABLE [dbo].[tstSite] DROP CONSTRAINT [FK_tstSite_tlbOffice__idfOffice_R_386];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSite_trtBaseReference__idfsSiteType_R_1305]...';


GO
ALTER TABLE [dbo].[tstSite] DROP CONSTRAINT [FK_tstSite_trtBaseReference__idfsSiteType_R_1305];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSite_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSite] DROP CONSTRAINT [FK_tstSite_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSite_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstSite] DROP CONSTRAINT [FK_tstSite_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSite_tstSite__idfsParentSite]...';


GO
ALTER TABLE [dbo].[tstSite] DROP CONSTRAINT [FK_tstSite_tstSite__idfsParentSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTable_tlbPerson_idfPerson]...';


GO
ALTER TABLE [dbo].[tstUserTable] DROP CONSTRAINT [FK_tstUserTable_tlbPerson_idfPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTable_trtBaseReference_idfsBaseReference]...';


GO
ALTER TABLE [dbo].[tstUserTable] DROP CONSTRAINT [FK_tstUserTable_trtBaseReference_idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTable] DROP CONSTRAINT [FK_tstUserTable_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTable_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tstUserTable] DROP CONSTRAINT [FK_tstUserTable_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTableLocal_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTableLocal] DROP CONSTRAINT [FK_tstUserTableLocal_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTableLocal_tstUserTable_idfUserID]...';


GO
ALTER TABLE [dbo].[tstUserTableLocal] DROP CONSTRAINT [FK_tstUserTableLocal_tstUserTable_idfUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTableOldPassword_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTableOldPassword] DROP CONSTRAINT [FK_tstUserTableOldPassword_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTableOldPassword_tstUserTable__idfUserID_R_1730]...';


GO
ALTER TABLE [dbo].[tstUserTableOldPassword] DROP CONSTRAINT [FK_tstUserTableOldPassword_tstUserTable__idfUserID_R_1730];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTicket_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTicket] DROP CONSTRAINT [FK_tstUserTicket_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTicket_tstUserTable__idfUserID]...';


GO
ALTER TABLE [dbo].[tstUserTicket] DROP CONSTRAINT [FK_tstUserTicket_tstUserTable__idfUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstVersionCompare_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstVersionCompare] DROP CONSTRAINT [FK_tstVersionCompare_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_updRunningApps_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[updRunningApps] DROP CONSTRAINT [FK_updRunningApps_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_updUpdateBlock_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[updUpdateBlock] DROP CONSTRAINT [FK_updUpdateBlock_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserAccess_BaseRef_AccessPermission]...';


GO
ALTER TABLE [dbo].[UserAccess] DROP CONSTRAINT [FK_UserAccess_BaseRef_AccessPermission];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserAccess_BaseRef_SysFunctionID]...';


GO
ALTER TABLE [dbo].[UserAccess] DROP CONSTRAINT [FK_UserAccess_BaseRef_SysFunctionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserAccess_BaseReference_OperaionID]...';


GO
ALTER TABLE [dbo].[UserAccess] DROP CONSTRAINT [FK_UserAccess_BaseReference_OperaionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserAccess_tlbEmployee_EmpID]...';


GO
ALTER TABLE [dbo].[UserAccess] DROP CONSTRAINT [FK_UserAccess_tlbEmployee_EmpID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[UserAccess] DROP CONSTRAINT [FK_UserAccess_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserAccess_tstSite_OnSite]...';


GO
ALTER TABLE [dbo].[UserAccess] DROP CONSTRAINT [FK_UserAccess_tstSite_OnSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserPreference_BAseRef_ModuleConstantID]...';


GO
ALTER TABLE [dbo].[UserPreference] DROP CONSTRAINT [FK_UserPreference_BAseRef_ModuleConstantID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserPreference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[UserPreference] DROP CONSTRAINT [FK_UserPreference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserPreference_tstUserTable_UserID]...';


GO
ALTER TABLE [dbo].[UserPreference] DROP CONSTRAINT [FK_UserPreference_tstUserTable_UserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_VetDiseaseReportRelationship_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] DROP CONSTRAINT [FK_VetDiseaseReportRelationship_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_VetDiseaseReportReln_BaseRef_RelTypeID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] DROP CONSTRAINT [FK_VetDiseaseReportReln_BaseRef_RelTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_VetDiseaseReportReln_tlbVetCase_RelateToVetDiseaseReportID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] DROP CONSTRAINT [FK_VetDiseaseReportReln_tlbVetCase_RelateToVetDiseaseReportID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_VetDiseaseReportReln_tlbVetCase_VetDiseaseReportID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] DROP CONSTRAINT [FK_VetDiseaseReportReln_tlbVetCase_VetDiseaseReportID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuery_tlbEmployee]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP CONSTRAINT [FK_tasQuery_tlbEmployee];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuery_tlbOffice]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP CONSTRAINT [FK_tasQuery_tlbOffice];


GO
PRINT N'Altering Table [dbo].[tasQuery]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP COLUMN [idfEmployee], COLUMN [idfOffice];


GO
PRINT N'Altering Table [dbo].[tlbOutbreak]...';


GO
ALTER TABLE [dbo].[tlbOutbreak]
    ADD [idfsLocation] BIGINT NULL;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID] FOREIGN KEY ([GrantingActorSiteGroupID]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_trtBaseReference]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_trtBaseReference] FOREIGN KEY ([AccessRuleID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_tstSite_GrantingActorSiteID]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_tstSite_GrantingActorSiteID] FOREIGN KEY ([GrantingActorSiteID]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRuleActor_AccessRule_AccessRuleID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRuleActor_AccessRule_AccessRuleID] FOREIGN KEY ([AccessRuleID]) REFERENCES [dbo].[AccessRule] ([AccessRuleID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRuleActor_tflSiteGroup_ActorSiteGroupID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRuleActor_tflSiteGroup_ActorSiteGroupID] FOREIGN KEY ([ActorSiteGroupID]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRuleActor_tlbEmployeGroup_ActorEmployeeGroupID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRuleActor_tlbEmployeGroup_ActorEmployeeGroupID] FOREIGN KEY ([ActorEmployeeGroupID]) REFERENCES [dbo].[tlbEmployeeGroup] ([idfEmployeeGroup]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRuleActor_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRuleActor_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRuleActor_tstSite_ActorSiteID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRuleActor_tstSite_ActorSiteID] FOREIGN KEY ([ActorSiteID]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRuleActor_tstUserTable_ActorUserID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRuleActor_tstUserTable_ActorUserID] FOREIGN KEY ([ActorUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRulePermission_AccessRule_AccessRuleID]...';


GO
ALTER TABLE [dbo].[AccessRulePermission] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRulePermission_AccessRule_AccessRuleID] FOREIGN KEY ([AccessRuleID]) REFERENCES [dbo].[AccessRule] ([AccessRuleID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRulePermission_trtBaseReference_AccessPermissionID]...';


GO
ALTER TABLE [dbo].[AccessRulePermission] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRulePermission_trtBaseReference_AccessPermissionID] FOREIGN KEY ([AccessPermissionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRulePermission_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRulePermission] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRulePermission_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObjectSysFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AppObjectSysFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObjectSysFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObjSysFunction_AppObj_AppObjectNameID]...';


GO
ALTER TABLE [dbo].[AppObjectSysFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObjSysFunction_AppObj_AppObjectNameID] FOREIGN KEY ([AppObjectNameID]) REFERENCES [dbo].[LkupEIDSSAppObject] ([AppObjectNameID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObjSysFunction_BaseReference_SysFunctionID]...';


GO
ALTER TABLE [dbo].[AppObjectSysFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObjSysFunction_BaseReference_SysFunctionID] FOREIGN KEY ([SystemFunctionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppSessionLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AppSessionLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AppSessionLog_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SesionLog_BaseRef_AppModuleGroupID]...';


GO
ALTER TABLE [dbo].[AppSessionLog] WITH NOCHECK
    ADD CONSTRAINT [FK_SesionLog_BaseRef_AppModuleGroupID] FOREIGN KEY ([AppModuleGroupID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SessionLog_BaseRef_ModuleConstantID]...';


GO
ALTER TABLE [dbo].[AppSessionLog] WITH NOCHECK
    ADD CONSTRAINT [FK_SessionLog_BaseRef_ModuleConstantID] FOREIGN KEY ([ModuleConstantID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ArchiveSetting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ArchiveSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_ArchiveSetting_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ASPNetRole_tlbEmployeeGRoup_idfemployeeGroup]...';


GO
ALTER TABLE [dbo].[AspNetRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_ASPNetRole_tlbEmployeeGRoup_idfemployeeGroup] FOREIGN KEY ([idfEmployeeGroup]) REFERENCES [dbo].[tlbEmployeeGroup] ([idfEmployeeGroup]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserClaims] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserLogins] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ASPNetUserPreviousPasswords_AspNetUsers_Id]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] WITH NOCHECK
    ADD CONSTRAINT [FK_ASPNetUserPreviousPasswords_AspNetUsers_Id] FOREIGN KEY ([Id]) REFERENCES [dbo].[AspNetUsers] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] WITH NOCHECK
    ADD CONSTRAINT [FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AspNetRoles] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AspNetUsers_tstUserTable_UserID]...';


GO
ALTER TABLE [dbo].[AspNetUsers] WITH NOCHECK
    ADD CONSTRAINT [FK_AspNetUsers_tstUserTable_UserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AspNetUserTokens_AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserTokens] WITH NOCHECK
    ADD CONSTRAINT [FK_AspNetUserTokens_AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventSystemLog_AppSessionLog]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventSystemLog_AppSessionLog] FOREIGN KEY ([AppSessionLogID]) REFERENCES [dbo].[AppSessionLog] ([AppSessionLogUID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventSystemLog_BaseRef_AuditObjectID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventSystemLog_BaseRef_AuditObjectID] FOREIGN KEY ([AuditObjectID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventSystemLog_idfsModule]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventSystemLog_idfsModule] FOREIGN KEY ([idfsModule]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventSystemLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventSystemLog_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventSystemLog_tstSite_idfSiteID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventSystemLog_tstSite_idfSiteID] FOREIGN KEY ([idfSiteID]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventSystemLog_UserTable_idfAppUserID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventSystemLog_UserTable_idfAppUserID] FOREIGN KEY ([idfAppUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventUserLog_AuditEventSystemLog_LogUID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventUserLog_AuditEventSystemLog_LogUID] FOREIGN KEY ([AuditEventSystemLogUID]) REFERENCES [dbo].[AuditEventSystemLog] ([AuditEventSystemLogUID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventUserLog_BaseRef_AuditEventTypeID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventUserLog_BaseRef_AuditEventTypeID] FOREIGN KEY ([AuditEventTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventUserLog_BaseRef_AuditObjectTypeID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventUserLog_BaseRef_AuditObjectTypeID] FOREIGN KEY ([AuditObjectTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventUserLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventUserLog_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventUserLog_tstSite_idfSiteID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventUserLog_tstSite_idfSiteID] FOREIGN KEY ([idfSiteID]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventUserLog_UserTable_idfAppUserID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventUserLog_UserTable_idfAppUserID] FOREIGN KEY ([idfAppUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DiagnosisGroupToGender_trtBaseReference_DiagnosisGroupID]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] WITH NOCHECK
    ADD CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_DiagnosisGroupID] FOREIGN KEY ([DisgnosisGroupID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DiagnosisGroupToGender_trtBaseReference_GenderID]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] WITH NOCHECK
    ADD CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_GenderID] FOREIGN KEY ([GenderID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DiagnosisGroupToGender_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] WITH NOCHECK
    ADD CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_dotNetAppenderLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[dotNetAppenderLog] WITH NOCHECK
    ADD CONSTRAINT [FK_dotNetAppenderLog_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_EmployeeToInstitution_AspNetUserId]...';


GO
ALTER TABLE [dbo].[EmployeeToInstitution] WITH NOCHECK
    ADD CONSTRAINT [FK_EmployeeToInstitution_AspNetUserId] FOREIGN KEY ([aspNetUserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_EmployeeToInstitution_Office]...';


GO
ALTER TABLE [dbo].[EmployeeToInstitution] WITH NOCHECK
    ADD CONSTRAINT [FK_EmployeeToInstitution_Office] FOREIGN KEY ([idfInstitution]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_EmployeeToInstitution_UserId]...';


GO
ALTER TABLE [dbo].[EmployeeToInstitution] WITH NOCHECK
    ADD CONSTRAINT [FK_EmployeeToInstitution_UserId] FOREIGN KEY ([idfUserId]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_EventSubscription_tstUserTable]...';


GO
ALTER TABLE [dbo].[EventSubscription] WITH NOCHECK
    ADD CONSTRAINT [FK_EventSubscription_tstUserTable] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElement_ffFormTemplate__idfsFormTemplate_R_1373]...';


GO
ALTER TABLE [dbo].[ffDecorElement] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElement_ffFormTemplate__idfsFormTemplate_R_1373] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElement_ffSection__idfsSection_R_1379]...';


GO
ALTER TABLE [dbo].[ffDecorElement] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElement_ffSection__idfsSection_R_1379] FOREIGN KEY ([idfsSection]) REFERENCES [dbo].[ffSection] ([idfsSection]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElement_trtBaseReference__idfsDecorElementType_R_1376]...';


GO
ALTER TABLE [dbo].[ffDecorElement] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElement_trtBaseReference__idfsDecorElementType_R_1376] FOREIGN KEY ([idfsDecorElementType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElement_trtBaseReference__idfsLanguage_R_1375]...';


GO
ALTER TABLE [dbo].[ffDecorElement] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElement_trtBaseReference__idfsLanguage_R_1375] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElement_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDecorElement] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElement_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElementLine_ffDecorElement__idfDecorElement_R_1401]...';


GO
ALTER TABLE [dbo].[ffDecorElementLine] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElementLine_ffDecorElement__idfDecorElement_R_1401] FOREIGN KEY ([idfDecorElement]) REFERENCES [dbo].[ffDecorElement] ([idfDecorElement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElementLine_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDecorElementLine] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElementLine_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElementText_ffDecorElement__idfDecorElement_R_1374]...';


GO
ALTER TABLE [dbo].[ffDecorElementText] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElementText_ffDecorElement__idfDecorElement_R_1374] FOREIGN KEY ([idfDecorElement]) REFERENCES [dbo].[ffDecorElement] ([idfDecorElement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElementText_trtBaseReference__idfsBaseReference_R_1389]...';


GO
ALTER TABLE [dbo].[ffDecorElementText] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElementText_trtBaseReference__idfsBaseReference_R_1389] FOREIGN KEY ([idfsBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElementText_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDecorElementText] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElementText_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantType_gisReferenceType__idfsGISReferenceType_R_1669]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantType_gisReferenceType__idfsGISReferenceType_R_1669] FOREIGN KEY ([idfsGISReferenceType]) REFERENCES [dbo].[gisReferenceType] ([idfsGISReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantType_trtBaseReference__idfsFormType_R_1660]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantType_trtBaseReference__idfsFormType_R_1660] FOREIGN KEY ([idfsFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantType_trtReferenceType__idfsReferenceType_R_950]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantType_trtReferenceType__idfsReferenceType_R_950] FOREIGN KEY ([idfsReferenceType]) REFERENCES [dbo].[trtReferenceType] ([idfsReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantValue_gisBaseReference__idfsGISBaseReference_R_1670]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantValue_gisBaseReference__idfsGISBaseReference_R_1670] FOREIGN KEY ([idfsGISBaseReference]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantValue_trtBaseReference__idfsBaseReference_R_949]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantValue_trtBaseReference__idfsBaseReference_R_949] FOREIGN KEY ([idfsBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantValue_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantValue_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_FFormControlValue_FFormTemplate]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] WITH NOCHECK
    ADD CONSTRAINT [FK_FFormControlValue_FFormTemplate] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffFormTemplate_trtBaseReference__idfsFormTemplate_R_1385]...';


GO
ALTER TABLE [dbo].[ffFormTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffFormTemplate_trtBaseReference__idfsFormTemplate_R_1385] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffFormTemplate_trtBaseReference__idfsFormType_R_1656]...';


GO
ALTER TABLE [dbo].[ffFormTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffFormTemplate_trtBaseReference__idfsFormType_R_1656] FOREIGN KEY ([idfsFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffFormTemplate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffFormTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffFormTemplate_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_ffParameterType__idfsParameterType_R_21]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_ffParameterType__idfsParameterType_R_21] FOREIGN KEY ([idfsParameterType]) REFERENCES [dbo].[ffParameterType] ([idfsParameterType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_ffSection__idfsSection_R_1380]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_ffSection__idfsSection_R_1380] FOREIGN KEY ([idfsSection]) REFERENCES [dbo].[ffSection] ([idfsSection]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsEditor_R_1387]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_trtBaseReference__idfsEditor_R_1387] FOREIGN KEY ([idfsEditor]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsFormType_R_1658]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_trtBaseReference__idfsFormType_R_1658] FOREIGN KEY ([idfsFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsParameter_R_1382]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_trtBaseReference__idfsParameter_R_1382] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsParameterCaption_R_1383]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_trtBaseReference__idfsParameterCaption_R_1383] FOREIGN KEY ([idfsParameterCaption]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterDesignOption_ffFormTemplate__idfsFormTemplate_R_1361]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterDesignOption_ffFormTemplate__idfsFormTemplate_R_1361] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterDesignOption_ffParameter__idfsParameter_R_1360]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterDesignOption_ffParameter__idfsParameter_R_1360] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterDesignOption_trtBaseReference__idfsLanguage_R_1381]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterDesignOption_trtBaseReference__idfsLanguage_R_1381] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterDesignOption_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterDesignOption_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterFixedPresetValue_ffParameterType__idfsParameterType_R_925]...';


GO
ALTER TABLE [dbo].[ffParameterFixedPresetValue] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterFixedPresetValue_ffParameterType__idfsParameterType_R_925] FOREIGN KEY ([idfsParameterType]) REFERENCES [dbo].[ffParameterType] ([idfsParameterType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterFixedPresetValue_trtBaseReference__idfsParameterFixedPresetValue_R_1398]...';


GO
ALTER TABLE [dbo].[ffParameterFixedPresetValue] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterFixedPresetValue_trtBaseReference__idfsParameterFixedPresetValue_R_1398] FOREIGN KEY ([idfsParameterFixedPresetValue]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterFixedPresetValue_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterFixedPresetValue] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterFixedPresetValue_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForAction_ffParameterForTemplate__idfsParameter_idfsFormTemplate_R]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForAction_ffParameterForTemplate__idfsParameter_idfsFormTemplate_R] FOREIGN KEY ([idfsParameter], [idfsFormTemplate]) REFERENCES [dbo].[ffParameterForTemplate] ([idfsParameter], [idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForAction_ffRule__idfsRule_R_820]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForAction_ffRule__idfsRule_R_820] FOREIGN KEY ([idfsRule]) REFERENCES [dbo].[ffRule] ([idfsRule]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForAction_trtBaseReference__idfsRuleAction_R_1392]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForAction_trtBaseReference__idfsRuleAction_R_1392] FOREIGN KEY ([idfsRuleAction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForAction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForFunction_ffParameterForTemplate__idfsParameter___________________________________________________idfsFormTempla]...';


GO
ALTER TABLE [dbo].[ffParameterForFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForFunction_ffParameterForTemplate__idfsParameter___________________________________________________idfsFormTempla] FOREIGN KEY ([idfsParameter], [idfsFormTemplate]) REFERENCES [dbo].[ffParameterForTemplate] ([idfsParameter], [idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForFunction_ffRule__idfsRule_R_1647]...';


GO
ALTER TABLE [dbo].[ffParameterForFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForFunction_ffRule__idfsRule_R_1647] FOREIGN KEY ([idfsRule]) REFERENCES [dbo].[ffRule] ([idfsRule]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterForFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForTemplate_ffFormTemplate__idfsFormTemplate_R_91]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForTemplate_ffFormTemplate__idfsFormTemplate_R_91] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForTemplate_ffParameter__idfsParameter_R_2]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForTemplate_ffParameter__idfsParameter_R_2] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForTemplate_trtBaseReference__idfsEditMode_R_1388]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForTemplate_trtBaseReference__idfsEditMode_R_1388] FOREIGN KEY ([idfsEditMode]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForTemplate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForTemplate_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterType_trtBaseReference__idfsParameterType_R_1395]...';


GO
ALTER TABLE [dbo].[ffParameterType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterType_trtBaseReference__idfsParameterType_R_1395] FOREIGN KEY ([idfsParameterType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterType_trtReferenceType__idfsReferenceType_R_927]...';


GO
ALTER TABLE [dbo].[ffParameterType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterType_trtReferenceType__idfsReferenceType_R_927] FOREIGN KEY ([idfsReferenceType]) REFERENCES [dbo].[trtReferenceType] ([idfsReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_FFRule_FFormTemplate]...';


GO
ALTER TABLE [dbo].[ffRule] WITH NOCHECK
    ADD CONSTRAINT [FK_FFRule_FFormTemplate] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRule_ffRuleFunction__idfsRuleFunction_R_1646]...';


GO
ALTER TABLE [dbo].[ffRule] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRule_ffRuleFunction__idfsRuleFunction_R_1646] FOREIGN KEY ([idfsRuleFunction]) REFERENCES [dbo].[ffRuleFunction] ([idfsRuleFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRule_trtBaseReference__idfsCheckPoint_R_1390]...';


GO
ALTER TABLE [dbo].[ffRule] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRule_trtBaseReference__idfsCheckPoint_R_1390] FOREIGN KEY ([idfsCheckPoint]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRule_trtBaseReference__idfsRule_R_1394]...';


GO
ALTER TABLE [dbo].[ffRule] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRule_trtBaseReference__idfsRule_R_1394] FOREIGN KEY ([idfsRule]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRule_trtBaseReference__idfsRuleMessage_R_1391]...';


GO
ALTER TABLE [dbo].[ffRule] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRule_trtBaseReference__idfsRuleMessage_R_1391] FOREIGN KEY ([idfsRuleMessage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffRule] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRule_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRuleConstant_ffRule__idfsRule_R_1648]...';


GO
ALTER TABLE [dbo].[ffRuleConstant] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRuleConstant_ffRule__idfsRule_R_1648] FOREIGN KEY ([idfsRule]) REFERENCES [dbo].[ffRule] ([idfsRule]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRuleConstant_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffRuleConstant] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRuleConstant_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRuleFunction_trtBaseReference__idfsRuleFunction_R_1393]...';


GO
ALTER TABLE [dbo].[ffRuleFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRuleFunction_trtBaseReference__idfsRuleFunction_R_1393] FOREIGN KEY ([idfsRuleFunction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRuleFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffRuleFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRuleFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSection_ffSection__idfsParentSection_R_1362]...';


GO
ALTER TABLE [dbo].[ffSection] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSection_ffSection__idfsParentSection_R_1362] FOREIGN KEY ([idfsParentSection]) REFERENCES [dbo].[ffSection] ([idfsSection]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSection_trtBaseReference__idfsFormType_R_1659]...';


GO
ALTER TABLE [dbo].[ffSection] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSection_trtBaseReference__idfsFormType_R_1659] FOREIGN KEY ([idfsFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSection_trtBaseReference__idfsSection_R_1378]...';


GO
ALTER TABLE [dbo].[ffSection] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSection_trtBaseReference__idfsSection_R_1378] FOREIGN KEY ([idfsSection]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSection_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSection] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSection_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSection_trtMatrixType__idfsMatrixType]...';


GO
ALTER TABLE [dbo].[ffSection] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSection_trtMatrixType__idfsMatrixType] FOREIGN KEY ([idfsMatrixType]) REFERENCES [dbo].[trtMatrixType] ([idfsMatrixType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionDesignOption_ffSectionForTemplate__idfsFormTemplate________________________________________________idfsSection_R_163]...';


GO
ALTER TABLE [dbo].[ffSectionDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionDesignOption_ffSectionForTemplate__idfsFormTemplate________________________________________________idfsSection_R_163] FOREIGN KEY ([idfsFormTemplate], [idfsSection]) REFERENCES [dbo].[ffSectionForTemplate] ([idfsFormTemplate], [idfsSection]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionDesignOption_trtBaseReference__idfsLanguage_R_1377]...';


GO
ALTER TABLE [dbo].[ffSectionDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionDesignOption_trtBaseReference__idfsLanguage_R_1377] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionDesignOption_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSectionDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionDesignOption_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForAction_ffRule__idfsRule_R_1403]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForAction_ffRule__idfsRule_R_1403] FOREIGN KEY ([idfsRule]) REFERENCES [dbo].[ffRule] ([idfsRule]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForAction_ffSectionForTemplate__idfsFormTemplate_____________________________________________idfsSection_R_1402]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForAction_ffSectionForTemplate__idfsFormTemplate_____________________________________________idfsSection_R_1402] FOREIGN KEY ([idfsFormTemplate], [idfsSection]) REFERENCES [dbo].[ffSectionForTemplate] ([idfsFormTemplate], [idfsSection]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForAction_trtBaseReference__idfsRuleAction_R_1404]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForAction_trtBaseReference__idfsRuleAction_R_1404] FOREIGN KEY ([idfsRuleAction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForAction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForTemplate_ffFormTemplate__idfsFormTemplate_R_1400]...';


GO
ALTER TABLE [dbo].[ffSectionForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForTemplate_ffFormTemplate__idfsFormTemplate_R_1400] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForTemplate_ffSection__idfsSection_R_1399]...';


GO
ALTER TABLE [dbo].[ffSectionForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForTemplate_ffSection__idfsSection_R_1399] FOREIGN KEY ([idfsSection]) REFERENCES [dbo].[ffSection] ([idfsSection]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForTemplate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSectionForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForTemplate_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisBaseReference_gisReferenceType__idfsGISReferenceType_R_1632]...';


GO
ALTER TABLE [dbo].[gisBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_gisBaseReference_gisReferenceType__idfsGISReferenceType_R_1632] FOREIGN KEY ([idfsGISReferenceType]) REFERENCES [dbo].[gisReferenceType] ([idfsGISReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_gisBaseReference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisCountry_gisBaseReference__idfsCountry_R_1634]...';


GO
ALTER TABLE [dbo].[gisCountry] WITH NOCHECK
    ADD CONSTRAINT [FK_gisCountry_gisBaseReference__idfsCountry_R_1634] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisCountry_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisCountry] WITH NOCHECK
    ADD CONSTRAINT [FK_gisCountry_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisDistrictSubdistrict_gisRayon__idfsGeoObject]...';


GO
ALTER TABLE [dbo].[gisDistrictSubdistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisDistrictSubdistrict_gisRayon__idfsGeoObject] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisDistrictSubdistrict_gisRayon__idfsParent]...';


GO
ALTER TABLE [dbo].[gisDistrictSubdistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisDistrictSubdistrict_gisRayon__idfsParent] FOREIGN KEY ([idfsParent]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisDistrictSubdistrict_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisDistrictSubdistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisDistrictSubdistrict_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisLegendSymbol_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisLegendSymbol] WITH NOCHECK
    ADD CONSTRAINT [FK_gisLegendSymbol_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisMainCityForRayon_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[gisMainCityForRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisMainCityForRayon_gisRayon__idfsRayon] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisMainCityForRayon_gisSettlement__idfsMainSettlement]...';


GO
ALTER TABLE [dbo].[gisMainCityForRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisMainCityForRayon_gisSettlement__idfsMainSettlement] FOREIGN KEY ([idfsMainSettlement]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisMetadata_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisMetadata] WITH NOCHECK
    ADD CONSTRAINT [FK_gisMetadata_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisNewID_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisNewID] WITH NOCHECK
    ADD CONSTRAINT [FK_gisNewID_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisOtherBaseReference_gisReferenceType__idfsGISReferenceType_R_1678]...';


GO
ALTER TABLE [dbo].[gisOtherBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_gisOtherBaseReference_gisReferenceType__idfsGISReferenceType_R_1678] FOREIGN KEY ([idfsGISReferenceType]) REFERENCES [dbo].[gisReferenceType] ([idfsGISReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisOtherBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisOtherBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_gisOtherBaseReference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisOtherStringNameTranslation_gisBaseReference__idfsLanguage_R_1680]...';


GO
ALTER TABLE [dbo].[gisOtherStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_gisOtherStringNameTranslation_gisBaseReference__idfsLanguage_R_1680] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisOtherStringNameTranslation_gisOtherBaseReference__idfsGISOtherBaseReference_R_1679]...';


GO
ALTER TABLE [dbo].[gisOtherStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_gisOtherStringNameTranslation_gisOtherBaseReference__idfsGISOtherBaseReference_R_1679] FOREIGN KEY ([idfsGISOtherBaseReference]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisOtherStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisOtherStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_gisOtherStringNameTranslation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRayon_gisBaseReference__idfsRayon_R_1636]...';


GO
ALTER TABLE [dbo].[gisRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRayon_gisBaseReference__idfsRayon_R_1636] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRayon_gisCountry__idfsCountry_R_233]...';


GO
ALTER TABLE [dbo].[gisRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRayon_gisCountry__idfsCountry_R_233] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRayon_gisRegion__idfsRegion_R_121]...';


GO
ALTER TABLE [dbo].[gisRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRayon_gisRegion__idfsRegion_R_121] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRayon_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRayon_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisReferenceType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisReferenceType] WITH NOCHECK
    ADD CONSTRAINT [FK_gisReferenceType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRegion_gisBaseReference__idfsRegion_R_1635]...';


GO
ALTER TABLE [dbo].[gisRegion] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRegion_gisBaseReference__idfsRegion_R_1635] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRegion_gisCountry__idfsCountry_R_232]...';


GO
ALTER TABLE [dbo].[gisRegion] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRegion_gisCountry__idfsCountry_R_232] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRegion_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisRegion] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRegion_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisSettlement_gisBaseReference__idfsSettlement_R_1637]...';


GO
ALTER TABLE [dbo].[gisSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisSettlement_gisBaseReference__idfsSettlement_R_1637] FOREIGN KEY ([idfsSettlement]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisSettlement_gisBaseReference__idfsSettlementType_R_1638]...';


GO
ALTER TABLE [dbo].[gisSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisSettlement_gisBaseReference__idfsSettlementType_R_1638] FOREIGN KEY ([idfsSettlementType]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisSettlement_gisCountry__idfsCountry_R_7]...';


GO
ALTER TABLE [dbo].[gisSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisSettlement_gisCountry__idfsCountry_R_7] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisSettlement_gisRayon__idfsRayon_R_9]...';


GO
ALTER TABLE [dbo].[gisSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisSettlement_gisRayon__idfsRayon_R_9] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisSettlement_gisRegion__idfsRegion_R_8]...';


GO
ALTER TABLE [dbo].[gisSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisSettlement_gisRegion__idfsRegion_R_8] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisSettlement_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisSettlement_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisStringNameTranslation_gisBaseReference__idfsGISBaseReference_R_1639]...';


GO
ALTER TABLE [dbo].[gisStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_gisStringNameTranslation_gisBaseReference__idfsGISBaseReference_R_1639] FOREIGN KEY ([idfsGISBaseReference]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisStringNameTranslation_gisBaseReference__idfsLanguage_R_1640]...';


GO
ALTER TABLE [dbo].[gisStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_gisStringNameTranslation_gisBaseReference__idfsLanguage_R_1640] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_gisStringNameTranslation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisUserLayer_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisUserLayer] WITH NOCHECK
    ADD CONSTRAINT [FK_gisUserLayer_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisUserLayer_tstUserTable]...';


GO
ALTER TABLE [dbo].[gisUserLayer] WITH NOCHECK
    ADD CONSTRAINT [FK_gisUserLayer_tstUserTable] FOREIGN KEY ([idfUser]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWHOMap_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWHOMap] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWHOMap_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_idfsLocation_gisLocation]...';


GO
ALTER TABLE [dbo].[gisWHOMap] WITH NOCHECK
    ADD CONSTRAINT [FK_idfsLocation_gisLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK__gisWKBCou__idfsG__37E6D44C]...';


GO
ALTER TABLE [dbo].[gisWKBCountry] WITH NOCHECK
    ADD CONSTRAINT [FK__gisWKBCou__idfsG__37E6D44C] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBCountry_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBCountry] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBCountry_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBDistrict_gisBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBDistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBDistrict_gisBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBDistrict_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBDistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBDistrict_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBDistrictReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBDistrictReady] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBDistrictReady_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBEarthRoad_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBEarthRoad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBEarthRoad_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBEarthRoad_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBEarthRoad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBEarthRoad_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBEarthRoad_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBEarthRoad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBEarthRoad_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBForest_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBForest] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBForest_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBForest_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBForest] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBForest_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBForest_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBForest] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBForest_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBHighway_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBHighway] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBHighway_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBHighway_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBHighway] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBHighway_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBHighway_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBHighway] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBHighway_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBInlandWater_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBInlandWater] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBInlandWater_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBLake_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBLake] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBLake_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBLake_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBLake] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBLake_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBLake_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBLake] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBLake_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBLanduse_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBLanduse] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBLanduse_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBLanduse_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBLanduse] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBLanduse_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBLanduse_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBLanduse] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBLanduse_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBMainRiver_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBMainRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBMainRiver_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBMainRiver_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBMainRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBMainRiver_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBMainRiver_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBMainRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBMainRiver_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBMajorRoad_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBMajorRoad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBMajorRoad_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBMajorRoad_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBMajorRoad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBMajorRoad_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBMajorRoad_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBMajorRoad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBMajorRoad_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBPath_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBPath] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBPath_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBPath_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBPath] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBPath_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBPath_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBPath] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBPath_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRailroad_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRailroad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRailroad_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRailroad_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRailroad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRailroad_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRailroad_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRailroad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRailroad_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK__gisWKBRay__idfsG__35FE8BDA]...';


GO
ALTER TABLE [dbo].[gisWKBRayon] WITH NOCHECK
    ADD CONSTRAINT [FK__gisWKBRay__idfsG__35FE8BDA] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRayon_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRayon_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRayonReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRayonReady] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRayonReady_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK__gisWKBReg__idfsG__34164368]...';


GO
ALTER TABLE [dbo].[gisWKBRegion] WITH NOCHECK
    ADD CONSTRAINT [FK__gisWKBReg__idfsG__34164368] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRegion_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRegion] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRegion_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRegionReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRegionReady] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRegionReady_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRiver_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRiver_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRiver_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRiver_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRiver_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRiver_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRiverPolygon_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRiverPolygon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRiverPolygon_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRiverPolygon_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRiverPolygon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRiverPolygon_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRiverPolygon_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRiverPolygon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRiverPolygon_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRuralDistrict_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRuralDistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRuralDistrict_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRuralDistrict_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRuralDistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRuralDistrict_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRuralDistrict_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRuralDistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRuralDistrict_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSea_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBSea] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSea_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSea_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSea] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSea_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK__gisWKBSet__idfsG__322DFAF6]...';


GO
ALTER TABLE [dbo].[gisWKBSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK__gisWKBSet__idfsG__322DFAF6] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSettlement_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSettlement_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSettlementReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSettlementReady] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSettlementReady_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSmallRiver_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBSmallRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSmallRiver_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSmallRiver_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBSmallRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSmallRiver_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSmallRiver_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSmallRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSmallRiver_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[[FK_HumanActualAddlInfo_Human_UID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [[FK_HumanActualAddlInfo_Human_UID] FOREIGN KEY ([HumanActualAddlInfoUID]) REFERENCES [dbo].[tlbHumanActual] ([idfHumanActual]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_AgeUOM]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_AgeUOM] FOREIGN KEY ([ReportedAgeUOMID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_ContactPhone2NbrType]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_ContactPhone2NbrType] FOREIGN KEY ([ContactPhone2NbrTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_ContactPhoneNbrType]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_ContactPhoneNbrType] FOREIGN KEY ([ContactPhoneNbrTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_IsEmployed]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_IsEmployed] FOREIGN KEY ([IsEmployedID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActualAddlInfo_tlbHUmanActual_idfHumanActual]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActualAddlInfo_tlbHUmanActual_idfHumanActual] FOREIGN KEY ([DeduplicationResultHumanActualID]) REFERENCES [dbo].[tlbHumanActual] ([idfHumanActual]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActualAddlInfo_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActualAddlInfo_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActulaAddlIfo_BaseRef_IsSchool]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActulaAddlIfo_BaseRef_IsSchool] FOREIGN KEY ([IsStudentID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActulaAddlIfo_GeoLocationShared_AtlAddressID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActulaAddlIfo_GeoLocationShared_AtlAddressID] FOREIGN KEY ([AltAddressID]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActulaAddlIfo_GeosharedaddressID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActulaAddlIfo_GeosharedaddressID] FOREIGN KEY ([SchoolAddressID]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlIfo_BaseRef_IsSchool]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlIfo_BaseRef_IsSchool] FOREIGN KEY ([IsStudentID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlIfo_Geo_addressID]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlIfo_Geo_addressID] FOREIGN KEY ([SchoolAddressID]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_ContactPhoneNbr2Type]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_BaseRef_ContactPhoneNbr2Type] FOREIGN KEY ([ContactPhone2NbrTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_ContactPhoneNbrType]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_BaseRef_ContactPhoneNbrType] FOREIGN KEY ([ContactPhoneNbrTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_IsEmployed]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_BaseRef_IsEmployed] FOREIGN KEY ([IsEmployedID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_IsInSchool]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_BaseRef_IsInSchool] FOREIGN KEY ([IsStudentID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_ReportedAgeUOM]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_BaseRef_ReportedAgeUOM] FOREIGN KEY ([ReportedAgeUOMID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_GeoLocation_AltAddress]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_GeoLocation_AltAddress] FOREIGN KEY ([AltAddressID]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_Human_idfhuman]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_Human_idfhuman] FOREIGN KEY ([HumanAdditionalInfo]) REFERENCES [dbo].[tlbHuman] ([idfHuman]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanDiseaseReportRelationship_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanDiseaseReportRelationship_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanDiseaseReportReln_BaseRef_RelTypeID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanDiseaseReportReln_BaseRef_RelTypeID] FOREIGN KEY ([RelationshipTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanDiseaseReportReln_tlbHumanCase_HumanDiseaseReportID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_HumanDiseaseReportID] FOREIGN KEY ([HumanDiseaseReportID]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanDiseaseReportReln_tlbHumanCase_RelatedToHumanDiseaseReportIdRoot]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_RelatedToHumanDiseaseReportIdRoot] FOREIGN KEY ([RelatedToHumanDiseaseReportIdRoot]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanDiseaseReportReln_tlbHumanCase_RelateToHumanDiseaseReportID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_RelateToHumanDiseaseReportID] FOREIGN KEY ([RelateToHumanDiseaseReportID]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanDiseaseReportVaccination_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanDiseaseReportVaccination_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[R_1417]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportVaccination] WITH NOCHECK
    ADD CONSTRAINT [R_1417] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupConfigParm_trtBaseReference_idfsBaseReference]...';


GO
ALTER TABLE [dbo].[LkupConfigParm] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupConfigParm_trtBaseReference_idfsBaseReference] FOREIGN KEY ([ConfigParmNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupConfigParm_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupConfigParm] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupConfigParm_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CountryRoleToStandardRoleMap_gidCountry_CountryID]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] WITH NOCHECK
    ADD CONSTRAINT [FK_CountryRoleToStandardRoleMap_gidCountry_CountryID] FOREIGN KEY ([CountryID]) REFERENCES [dbo].[gisCountry] ([idfsCountry]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CountryRoleToStandardRoleMap_trtBaseReference_StadardRoleID]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] WITH NOCHECK
    ADD CONSTRAINT [FK_CountryRoleToStandardRoleMap_trtBaseReference_StadardRoleID] FOREIGN KEY ([StandardRoleID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_EIDSSMenu_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_EIDSSMenu_MenuID] FOREIGN KEY ([RelatedEIDSSMenuID]) REFERENCES [dbo].[LkupEIDSSMenu] ([EIDSSMenuID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_ObjName]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_ObjName] FOREIGN KEY ([AppObjectNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_ObjType]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_ObjType] FOREIGN KEY ([AppObjectTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_PageToolTip]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_PageToolTip] FOREIGN KEY ([PageTitleID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenu_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_MenuID] FOREIGN KEY ([EIDSSMenuID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenu_BaseRef_ParentMenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_ParentMenuID] FOREIGN KEY ([EIDSSParentMenuID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenu_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenu_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToEventType_BaseRef_MenuID] FOREIGN KEY ([EIDSSMenuID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId] FOREIGN KEY ([EventTypeID]) REFERENCES [dbo].[trtEventType] ([idfsEventTypeID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToSystemFunction_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_BaseRef_MenuID] FOREIGN KEY ([EIDSSMenuID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToSystemFunction_BaseRef_SystemFunctionID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_BaseRef_SystemFunctionID] FOREIGN KEY ([SystemFunctionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToSystemFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LKUPNextKey_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LKUPNextKey] WITH NOCHECK
    ADD CONSTRAINT [FK_LKUPNextKey_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleDashboardObject_AppObject_SashboardObjectID]...';


GO
ALTER TABLE [dbo].[LkupRoleDashboardObject] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleDashboardObject_AppObject_SashboardObjectID] FOREIGN KEY ([DashboardObjectID]) REFERENCES [dbo].[LkupEIDSSAppObject] ([AppObjectNameID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleDashboardObject_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleDashboardObject] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleDashboardObject_idfEmployee] FOREIGN KEY ([idfEmployee]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleDashboardObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupRoleDashboardObject] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleDashboardObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleMenuAccess_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleMenuAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleMenuAccess_idfEmployee] FOREIGN KEY ([idfEmployee]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleMenuAccess_LkupEIDSSMenu_MenuID]...';


GO
ALTER TABLE [dbo].[LkupRoleMenuAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleMenuAccess_LkupEIDSSMenu_MenuID] FOREIGN KEY ([EIDSSMenuID]) REFERENCES [dbo].[LkupEIDSSMenu] ([EIDSSMenuID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleMenuAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupRoleMenuAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleMenuAccess_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_lkupRoleSysFunctionAccess_BaseReference_SysFunctionOperationID]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_lkupRoleSysFunctionAccess_BaseReference_SysFunctionOperationID] FOREIGN KEY ([SystemFunctionOperationID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_lkupRoleSysFunctionAccess_BaseReference_SystemFunction]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_lkupRoleSysFunctionAccess_BaseReference_SystemFunction] FOREIGN KEY ([SystemFunctionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_lkupRoleSysFunctionAccess_trtBaseRef_AccessPermissionID]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_lkupRoleSysFunctionAccess_trtBaseRef_AccessPermissionID] FOREIGN KEY ([AccessPermissionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleSystemFunctionAccess_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleSystemFunctionAccess_idfEmployee] FOREIGN KEY ([idfEmployee]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleSystemFunctionAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleSystemFunctionAccess_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_BaseReference_idfsModule]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_idfsModule] FOREIGN KEY ([idfsModuleName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_BaseReference_SysFunctionOperationID]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_SysFunctionOperationID] FOREIGN KEY ([SystemFunctionOperationID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_BaseReference_SystemFunction]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_SystemFunction] FOREIGN KEY ([SystemFunctionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupSystemFunctionToOperation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_locBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[locBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_locBaseReference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_locStringNameTranslation_locBaseReference__idflBaseReference_R_1702]...';


GO
ALTER TABLE [dbo].[locStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_locStringNameTranslation_locBaseReference__idflBaseReference_R_1702] FOREIGN KEY ([idflBaseReference]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_locStringNameTranslation_trtBaseReference__idfsLanguage_R_1692]...';


GO
ALTER TABLE [dbo].[locStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_locStringNameTranslation_trtBaseReference__idfsLanguage_R_1692] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_locStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[locStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_locStringNameTranslation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LOINCEidssMapping_trtBaseReference__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[LOINCEidssMapping] WITH NOCHECK
    ADD CONSTRAINT [FK_LOINCEidssMapping_trtBaseReference__idfsBaseReference] FOREIGN KEY ([idfsBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_LOINCEidssMapping_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LOINCEidssMapping] WITH NOCHECK
    ADD CONSTRAINT [FK_LOINCEidssMapping_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LOINCEidssMapping_trtReferenecType__idfsReferenceType]...';


GO
ALTER TABLE [dbo].[LOINCEidssMapping] WITH NOCHECK
    ADD CONSTRAINT [FK_LOINCEidssMapping_trtReferenecType__idfsReferenceType] FOREIGN KEY ([idfsReferenceType]) REFERENCES [dbo].[trtReferenceType] ([idfsReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_MonitoringSessionToSampleType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_MonitoringSessionToSampleType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToSampleType_tlbMonitoringSession_MonitoringSessionID]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToSampleType_tlbMonitoringSession_MonitoringSessionID] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToSampleType_trtSampleType_SampleType]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToSampleType_trtSampleType_SampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToSampleType_trtSpeciesType_SpeciesType]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToSampleType_trtSpeciesType_SpeciesType] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseContact_OutbreakCase_OutbreakCaseReportUID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseContact_OutbreakCase_OutbreakCaseReportUID] FOREIGN KEY ([OutBreakCaseReportUID]) REFERENCES [dbo].[OutbreakCaseReport] ([OutBreakCaseReportUID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseContact_tlbContactedCasePerson_idfContactedCasePersonID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseContact_tlbContactedCasePerson_idfContactedCasePersonID] FOREIGN KEY ([ContactedHumanCasePersonID]) REFERENCES [dbo].[tlbContactedCasePerson] ([idfContactedCasePerson]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseContact_tlbHuman_idfHuman]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseContact_tlbHuman_idfHuman] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseContact_tlbObservation_ContactTracingObservationID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseContact_tlbObservation_ContactTracingObservationID] FOREIGN KEY ([ContactTracingObservationID]) REFERENCES [dbo].[tlbObservation] ([idfObservation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseContact_trtBaseReference_ContactRelationshipTypeID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseContact_trtBaseReference_ContactRelationshipTypeID] FOREIGN KEY ([ContactRelationshipTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseContact_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseContact_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCase_tlbHUmanCase_idfHumanCaseID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCase_tlbHUmanCase_idfHumanCaseID] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCase_tlbObservation_CaseEPIObservationID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCase_tlbObservation_CaseEPIObservationID] FOREIGN KEY ([CaseEPIObservationID]) REFERENCES [dbo].[tlbObservation] ([idfObservation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCase_tlbOutbreak_idfOutbreakID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCase_tlbOutbreak_idfOutbreakID] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCase_tlbVetCase_idfVetCaseID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCase_tlbVetCase_idfVetCaseID] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreatkCase_Observation_OutbreakCaseObservationID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreatkCase_Observation_OutbreakCaseObservationID] FOREIGN KEY ([OutbreakCaseObservationID]) REFERENCES [dbo].[tlbObservation] ([idfObservation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_outbreakSpeciesParameter_tlbOutbreak_OutbreakID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_outbreakSpeciesParameter_tlbOutbreak_OutbreakID] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakSpeciesParameter_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakSpeciesParameter_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakSpeciesParm_FormTemplate_CaseMonitoringTemplateID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_CaseMonitoringTemplateID] FOREIGN KEY ([CaseMonitoringTemplateID]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakSpeciesParm_FormTemplate_CaseQuestionaireTemplateID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_CaseQuestionaireTemplateID] FOREIGN KEY ([CaseQuestionaireTemplateID]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakSpeciesParm_FormTemplate_ContactTracingTemplateID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_ContactTracingTemplateID] FOREIGN KEY ([ContactTracingTemplateID]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SecurityPolicyConfig_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[SecurityPolicyConfiguration] WITH NOCHECK
    ADD CONSTRAINT [FK_SecurityPolicyConfig_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SiteToSiteAccess_BaseReference_AaccessPermissionID]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_SiteToSiteAccess_BaseReference_AaccessPermissionID] FOREIGN KEY ([AccessPermissionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SiteToSiteAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_SiteToSiteAccess_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SiteToSiteAccess_tstSite_GranteeSite]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_SiteToSiteAccess_tstSite_GranteeSite] FOREIGN KEY ([GranteeSite]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SiteToSiteAccess_tstSite_GrantToSite]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_SiteToSiteAccess_tstSite_GrantToSite] FOREIGN KEY ([GrantToSite]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SystemPreference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[SystemPreference] WITH NOCHECK
    ADD CONSTRAINT [FK_SystemPreference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasAggregateFunction_trtBaseReference__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasAggregateFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_tasAggregateFunction_trtBaseReference__idfsAggregateFunction] FOREIGN KEY ([idfsAggregateFunction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasAggregateFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasAggregateFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_tasAggregateFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasFieldSourceForTable_tasSearchField__idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tasFieldSourceForTable_tasSearchField__idfsSearchField] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasFieldSourceForTable_tasSearchTable__idfSearchTable]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tasFieldSourceForTable_tasSearchTable__idfSearchTable] FOREIGN KEY ([idfSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasFieldSourceForTable_tasSearchTable__idfUnionSearchTable]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tasFieldSourceForTable_tasSearchTable__idfUnionSearchTable] FOREIGN KEY ([idfUnionSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasFieldSourceForTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tasFieldSourceForTable_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_tasglLayoutFolder__idfsLayoutFolder_R_1698_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_tasglLayoutFolder__idfsLayoutFolder_R_1698_1] FOREIGN KEY ([idfsLayoutFolder]) REFERENCES [dbo].[tasglLayoutFolder] ([idfsLayoutFolder]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_tasglQuery__idfsQuery_R_1326_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_tasglQuery__idfsQuery_R_1326_1] FOREIGN KEY ([idfsQuery]) REFERENCES [dbo].[tasglQuery] ([idfsQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_tlbPerson__idfPerson] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_trtBaseReference__idfsDefaultGroupDate]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsDefaultGroupDate] FOREIGN KEY ([idfsDefaultGroupDate]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_trtBaseReference__idfsDescription_R_1717_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsDescription_R_1717_1] FOREIGN KEY ([idfsDescription]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_trtBaseReference__idfsLayout_R_1708_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsLayout_R_1708_1] FOREIGN KEY ([idfsLayout]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutFolder_tasglLayoutFolder__idfsParentLayoutFolder_R_1715_1]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutFolder_tasglLayoutFolder__idfsParentLayoutFolder_R_1715_1] FOREIGN KEY ([idfsParentLayoutFolder]) REFERENCES [dbo].[tasglLayoutFolder] ([idfsLayoutFolder]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutFolder_tasglQuery__idfsQuery_R_1697_1]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutFolder_tasglQuery__idfsQuery_R_1697_1] FOREIGN KEY ([idfsQuery]) REFERENCES [dbo].[tasglQuery] ([idfsQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutFolder_trtBaseReference__idfsLayoutFolder_R_1703_1]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutFolder_trtBaseReference__idfsLayoutFolder_R_1703_1] FOREIGN KEY ([idfsLayoutFolder]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutFolder_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutFolder_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_tasAggregateFunction__idfsAggregateFunction] FOREIGN KEY ([idfsAggregateFunction]) REFERENCES [dbo].[tasAggregateFunction] ([idfsAggregateFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_tasglLayoutSearchField__idfDateLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_tasglLayoutSearchField__idfDateLayoutSearchField] FOREIGN KEY ([idfDateLayoutSearchField]) REFERENCES [dbo].[tasglLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_tasglLayoutSearchField__idfUnitLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_tasglLayoutSearchField__idfUnitLayoutSearchField] FOREIGN KEY ([idfUnitLayoutSearchField]) REFERENCES [dbo].[tasglLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_tasglQuerySearchField__idfQuerySearchField]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_tasglQuerySearchField__idfQuerySearchField] FOREIGN KEY ([idfQuerySearchField]) REFERENCES [dbo].[tasglQuerySearchField] ([idfQuerySearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_tasLayout_idflLayout]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_tasLayout_idflLayout] FOREIGN KEY ([idfsLayout]) REFERENCES [dbo].[tasglLayout] ([idfsLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_trtBaseReference__idfsGroupDate]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference__idfsGroupDate] FOREIGN KEY ([idfsGroupDate]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_trtBaseReference_idfsLayoutSearchFieldName]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference_idfsLayoutSearchFieldName] FOREIGN KEY ([idfsLayoutSearchFieldName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutToMapImage_tasglLayout__idfsLayout]...';


GO
ALTER TABLE [dbo].[tasglLayoutToMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutToMapImage_tasglLayout__idfsLayout] FOREIGN KEY ([idfsLayout]) REFERENCES [dbo].[tasglLayout] ([idfsLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutToMapImage_tasglMapImage__idfMapImage]...';


GO
ALTER TABLE [dbo].[tasglLayoutToMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutToMapImage_tasglMapImage__idfMapImage] FOREIGN KEY ([idfMapImage]) REFERENCES [dbo].[tasglMapImage] ([idfMapImage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutToMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayoutToMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutToMapImage_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglMapImage_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuery_trtBaseReference__idfsDescription_R_1718_1]...';


GO
ALTER TABLE [dbo].[tasglQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuery_trtBaseReference__idfsDescription_R_1718_1] FOREIGN KEY ([idfsDescription]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuery_trtBaseReference__idfsQueryName_R_1709_1]...';


GO
ALTER TABLE [dbo].[tasglQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuery_trtBaseReference__idfsQueryName_R_1709_1] FOREIGN KEY ([idfsQuery]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuery_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuery_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQueryConditionGroup_tasglQueryConditionGroup__idfParentQueryConditionGroup_R_1345_1]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQueryConditionGroup_tasglQueryConditionGroup__idfParentQueryConditionGroup_R_1345_1] FOREIGN KEY ([idfParentQueryConditionGroup]) REFERENCES [dbo].[tasglQueryConditionGroup] ([idfQueryConditionGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfQuerySearchObject_R_1344_1]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfQuerySearchObject_R_1344_1] FOREIGN KEY ([idfQuerySearchObject]) REFERENCES [dbo].[tasglQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfSubQuerySearchObject]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfSubQuerySearchObject] FOREIGN KEY ([idfSubQuerySearchObject]) REFERENCES [dbo].[tasglQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQueryConditionGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQueryConditionGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchField_ffParameter__idfsParameter_R_1353_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchField_ffParameter__idfsParameter_R_1353_1] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchField_tasglQuerySearchObject__idfQuerySearchObject_R_1351_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchField_tasglQuerySearchObject__idfQuerySearchObject_R_1351_1] FOREIGN KEY ([idfQuerySearchObject]) REFERENCES [dbo].[tasglQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchField_tasglSearchFieldList__idfsSearchField_R_1352_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchField_tasglSearchFieldList__idfsSearchField_R_1352_1] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchField_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchFieldCondition_tasglQueryConditionGroup__idfQueryConditionGroup_R_1342_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchFieldCondition_tasglQueryConditionGroup__idfQueryConditionGroup_R_1342_1] FOREIGN KEY ([idfQueryConditionGroup]) REFERENCES [dbo].[tasglQueryConditionGroup] ([idfQueryConditionGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchFieldCondition_tasglQuerySearchField__idfQuerySearchField_R_1343_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchFieldCondition_tasglQuerySearchField__idfQuerySearchField_R_1343_1] FOREIGN KEY ([idfQuerySearchField]) REFERENCES [dbo].[tasglQuerySearchField] ([idfQuerySearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchObject_tasglQuery__idfsQueryName_R_1327_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchObject_tasglQuery__idfsQueryName_R_1327_1] FOREIGN KEY ([idfsQuery]) REFERENCES [dbo].[tasglQuery] ([idfsQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchObject_tasglQuerySearchObject__idfParentQuerySearchObject_R_1329_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchObject_tasglQuerySearchObject__idfParentQuerySearchObject_R_1329_1] FOREIGN KEY ([idfParentQuerySearchObject]) REFERENCES [dbo].[tasglQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328_1] FOREIGN KEY ([idfsSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchObject_trtBaseReference__idfsReportType]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchObject_trtBaseReference__idfsReportType] FOREIGN KEY ([idfsReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglView_tasglLayout__idfsLayout]...';


GO
ALTER TABLE [dbo].[tasglView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglView_tasglLayout__idfsLayout] FOREIGN KEY ([idfsLayout]) REFERENCES [dbo].[tasglLayout] ([idfsLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglView_tasglViewColumn__idfChartXAxisViewColumn]...';


GO
ALTER TABLE [dbo].[tasglView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglView_tasglViewColumn__idfChartXAxisViewColumn] FOREIGN KEY ([idfChartXAxisViewColumn]) REFERENCES [dbo].[tasglViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglView_tasglViewColumn__idfMapAdminUnitViewColumn]...';


GO
ALTER TABLE [dbo].[tasglView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglView_tasglViewColumn__idfMapAdminUnitViewColumn] FOREIGN KEY ([idfMapAdminUnitViewColumn]) REFERENCES [dbo].[tasglViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglView_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasglView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglView_trtBaseReference__idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglView_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglView_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewBand_tasglLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewBand_tasglLayoutSearchField__idfLayoutSearchField] FOREIGN KEY ([idfLayoutSearchField]) REFERENCES [dbo].[tasglLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewBand_tasglView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasglViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewBand_tasglView__idfView_idfsLanguage] FOREIGN KEY ([idfView], [idfsLanguage]) REFERENCES [dbo].[tasglView] ([idfView], [idfsLanguage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewBand_tasglViewBand__idfParentViewBand]...';


GO
ALTER TABLE [dbo].[tasglViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewBand_tasglViewBand__idfParentViewBand] FOREIGN KEY ([idfParentViewBand]) REFERENCES [dbo].[tasglViewBand] ([idfViewBand]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewBand_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewBand_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_tasAggregateFunction__idfsAggregateFunction] FOREIGN KEY ([idfsAggregateFunction]) REFERENCES [dbo].[tasAggregateFunction] ([idfsAggregateFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_tasglLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_tasglLayoutSearchField__idfLayoutSearchField] FOREIGN KEY ([idfLayoutSearchField]) REFERENCES [dbo].[tasglLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_tasglView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_tasglView__idfView_idfsLanguage] FOREIGN KEY ([idfView], [idfsLanguage]) REFERENCES [dbo].[tasglView] ([idfView], [idfsLanguage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_tasglViewBand__idfViewBand]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_tasglViewBand__idfViewBand] FOREIGN KEY ([idfViewBand]) REFERENCES [dbo].[tasglViewBand] ([idfViewBand]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_tasglViewColumn__idfDenominatorViewColumn]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_tasglViewColumn__idfDenominatorViewColumn] FOREIGN KEY ([idfDenominatorViewColumn]) REFERENCES [dbo].[tasglViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_tasglViewColumn__idfSourceViewColumn]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_tasglViewColumn__idfSourceViewColumn] FOREIGN KEY ([idfSourceViewColumn]) REFERENCES [dbo].[tasglViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_locBaseReference__idflDescription_R_1717]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_locBaseReference__idflDescription_R_1717] FOREIGN KEY ([idflDescription]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_locBaseReference__idflLayout_R_1708]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_locBaseReference__idflLayout_R_1708] FOREIGN KEY ([idflLayout]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_tasglLayout__idfsGlobalLayout_R_1794]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_tasglLayout__idfsGlobalLayout_R_1794] FOREIGN KEY ([idfsGlobalLayout]) REFERENCES [dbo].[tasglLayout] ([idfsLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_tasLayoutFolder__idflLayoutFolder_R_1698]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_tasLayoutFolder__idflLayoutFolder_R_1698] FOREIGN KEY ([idflLayoutFolder]) REFERENCES [dbo].[tasLayoutFolder] ([idflLayoutFolder]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_tasQuery__idflQuery_R_1326]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_tasQuery__idflQuery_R_1326] FOREIGN KEY ([idflQuery]) REFERENCES [dbo].[tasQuery] ([idflQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_tlbPerson__idfPerson] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_trtBaseReference__idfsDefaultGroupDate]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_trtBaseReference__idfsDefaultGroupDate] FOREIGN KEY ([idfsDefaultGroupDate]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutFolder_locBaseReference__idflLayoutFolder_R_1703]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutFolder_locBaseReference__idflLayoutFolder_R_1703] FOREIGN KEY ([idflLayoutFolder]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutFolder_tasglLayoutFolder__idfsGlobalLayoutFolder_R_1796]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutFolder_tasglLayoutFolder__idfsGlobalLayoutFolder_R_1796] FOREIGN KEY ([idfsGlobalLayoutFolder]) REFERENCES [dbo].[tasglLayoutFolder] ([idfsLayoutFolder]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutFolder_tasLayoutFolder__idflParentLayoutFolder_R_1715]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutFolder_tasLayoutFolder__idflParentLayoutFolder_R_1715] FOREIGN KEY ([idflParentLayoutFolder]) REFERENCES [dbo].[tasLayoutFolder] ([idflLayoutFolder]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutFolder_tasQuery__idflQuery_R_1697]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutFolder_tasQuery__idflQuery_R_1697] FOREIGN KEY ([idflQuery]) REFERENCES [dbo].[tasQuery] ([idflQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutFolder_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutFolder_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_locBaseReference_idflLayoutSearchFieldName]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_locBaseReference_idflLayoutSearchFieldName] FOREIGN KEY ([idflLayoutSearchFieldName]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_tasAggregateFunction__idfsAggregateFunction] FOREIGN KEY ([idfsAggregateFunction]) REFERENCES [dbo].[tasAggregateFunction] ([idfsAggregateFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_tasLayout_idflLayout]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_tasLayout_idflLayout] FOREIGN KEY ([idflLayout]) REFERENCES [dbo].[tasLayout] ([idflLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_tasLayoutSearchField__idfDateLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_tasLayoutSearchField__idfDateLayoutSearchField] FOREIGN KEY ([idfDateLayoutSearchField]) REFERENCES [dbo].[tasLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_tasLayoutSearchField__idfUnitLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_tasLayoutSearchField__idfUnitLayoutSearchField] FOREIGN KEY ([idfUnitLayoutSearchField]) REFERENCES [dbo].[tasLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_tasQuerySearchField__idfQuerySearchField]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_tasQuerySearchField__idfQuerySearchField] FOREIGN KEY ([idfQuerySearchField]) REFERENCES [dbo].[tasQuerySearchField] ([idfQuerySearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_trtBaseReference__idfsGroupDate]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_trtBaseReference__idfsGroupDate] FOREIGN KEY ([idfsGroupDate]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutToMapImage_tasLayout__idflLayout]...';


GO
ALTER TABLE [dbo].[tasLayoutToMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutToMapImage_tasLayout__idflLayout] FOREIGN KEY ([idflLayout]) REFERENCES [dbo].[tasLayout] ([idflLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutToMapImage_tasMapImage__idfMapImage]...';


GO
ALTER TABLE [dbo].[tasLayoutToMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutToMapImage_tasMapImage__idfMapImage] FOREIGN KEY ([idfMapImage]) REFERENCES [dbo].[tasMapImage] ([idfMapImage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutToMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayoutToMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutToMapImage_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasMainTableForObject_tasSearchObject__idfsSearchObject]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasMainTableForObject_tasSearchObject__idfsSearchObject] FOREIGN KEY ([idfsSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasMainTableForObject_tasSearchTable__idfMainSearchTable]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasMainTableForObject_tasSearchTable__idfMainSearchTable] FOREIGN KEY ([idfMainSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasMainTableForObject_tasSearchTable__idfMandatorySearchTable]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasMainTableForObject_tasSearchTable__idfMandatorySearchTable] FOREIGN KEY ([idfMandatorySearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasMainTableForObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasMainTableForObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasMapImage_tasglMapImage__idfGlobalMapImage]...';


GO
ALTER TABLE [dbo].[tasMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasMapImage_tasglMapImage__idfGlobalMapImage] FOREIGN KEY ([idfGlobalMapImage]) REFERENCES [dbo].[tasglMapImage] ([idfMapImage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasMapImage_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuery_locBaseReference__idflDescription_R_1718]...';


GO
ALTER TABLE [dbo].[tasQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuery_locBaseReference__idflDescription_R_1718] FOREIGN KEY ([idflDescription]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuery_locBaseReference__idflQueryName_R_1709]...';


GO
ALTER TABLE [dbo].[tasQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuery_locBaseReference__idflQueryName_R_1709] FOREIGN KEY ([idflQuery]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuery_tasglQuery__idfsGlobalQuery_R_1795]...';


GO
ALTER TABLE [dbo].[tasQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuery_tasglQuery__idfsGlobalQuery_R_1795] FOREIGN KEY ([idfsGlobalQuery]) REFERENCES [dbo].[tasglQuery] ([idfsQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuery_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuery_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQueryConditionGroup_tasQueryConditionGroup__idfParentQueryConditionGroup_R_1345]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQueryConditionGroup_tasQueryConditionGroup__idfParentQueryConditionGroup_R_1345] FOREIGN KEY ([idfParentQueryConditionGroup]) REFERENCES [dbo].[tasQueryConditionGroup] ([idfQueryConditionGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQueryConditionGroup_tasQuerySearchObject__idfQuerySearchObject_R_1344]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQueryConditionGroup_tasQuerySearchObject__idfQuerySearchObject_R_1344] FOREIGN KEY ([idfQuerySearchObject]) REFERENCES [dbo].[tasQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQueryConditionGroup_tasQuerySearchObject__idfSubQuerySearchObject]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQueryConditionGroup_tasQuerySearchObject__idfSubQuerySearchObject] FOREIGN KEY ([idfSubQuerySearchObject]) REFERENCES [dbo].[tasQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQueryConditionGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQueryConditionGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchField_ffParameter__idfsParameter_R_1353]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchField_ffParameter__idfsParameter_R_1353] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchField_tasQuerySearchObject__idfQuerySearchObject_R_1351]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchField_tasQuerySearchObject__idfQuerySearchObject_R_1351] FOREIGN KEY ([idfQuerySearchObject]) REFERENCES [dbo].[tasQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchField_tasSearchFieldList__idfsSearchField_R_1352]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchField_tasSearchFieldList__idfsSearchField_R_1352] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchField_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchFieldCondition_tasQueryConditionGroup__idfQueryConditionGroup_R_1342]...';


GO
ALTER TABLE [dbo].[tasQuerySearchFieldCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchFieldCondition_tasQueryConditionGroup__idfQueryConditionGroup_R_1342] FOREIGN KEY ([idfQueryConditionGroup]) REFERENCES [dbo].[tasQueryConditionGroup] ([idfQueryConditionGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchFieldCondition_tasQuerySearchField__idfQuerySearchField_R_1343]...';


GO
ALTER TABLE [dbo].[tasQuerySearchFieldCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchFieldCondition_tasQuerySearchField__idfQuerySearchField_R_1343] FOREIGN KEY ([idfQuerySearchField]) REFERENCES [dbo].[tasQuerySearchField] ([idfQuerySearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuerySearchFieldCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchObject_tasQuery__idflQueryName_R_1327]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchObject_tasQuery__idflQueryName_R_1327] FOREIGN KEY ([idflQuery]) REFERENCES [dbo].[tasQuery] ([idflQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchObject_tasQuerySearchObject__idfParentQuerySearchObject_R_1329]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchObject_tasQuerySearchObject__idfParentQuerySearchObject_R_1329] FOREIGN KEY ([idfParentQuerySearchObject]) REFERENCES [dbo].[tasQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328] FOREIGN KEY ([idfsSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchObject_trtBaseReference__idfsReportType]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchObject_trtBaseReference__idfsReportType] FOREIGN KEY ([idfsReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchField_gisReferenceType__idfsGISReferenceType_R_1720]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchField_gisReferenceType__idfsGISReferenceType_R_1720] FOREIGN KEY ([idfsGISReferenceType]) REFERENCES [dbo].[gisReferenceType] ([idfsGISReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchField_tasAggregateFunction__idfsDefaultAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchField_tasAggregateFunction__idfsDefaultAggregateFunction] FOREIGN KEY ([idfsDefaultAggregateFunction]) REFERENCES [dbo].[tasAggregateFunction] ([idfsAggregateFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchField_tasSearchObject__idfsSearchObject_R_1346]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchField_tasSearchObject__idfsSearchObject_R_1346] FOREIGN KEY ([idfsSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchField_trtBaseReference__idfsSearchField_R_1355]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchField_trtBaseReference__idfsSearchField_R_1355] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchField_trtBaseReference__idfsSearchFieldType_R_1587]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchField_trtBaseReference__idfsSearchFieldType_R_1587] FOREIGN KEY ([idfsSearchFieldType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchField_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldList_trtReferenceType__idfsReferenceType_R_1349]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldList_trtReferenceType__idfsReferenceType_R_1349] FOREIGN KEY ([idfsReferenceType]) REFERENCES [dbo].[trtReferenceType] ([idfsReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsRelatedSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsRelatedSearchField] FOREIGN KEY ([idfsRelatedSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsSearchField] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldsWithRelatedValues_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldToFFParameter_ffParameter_idfsParameter]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToFFParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldToFFParameter_ffParameter_idfsParameter] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldToFFParameter_tasSearchField_idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToFFParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldToFFParameter_tasSearchField_idfsSearchField] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldToFFParameter_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToFFParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldToFFParameter_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldToPersonalDataGroup_tasSearchField_idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_tasSearchField_idfsSearchField] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldToPersonalDataGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldToPersonalDataGroup_tstPersonalDataGroup_idfPersonalDataGroup]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_tstPersonalDataGroup_idfPersonalDataGroup] FOREIGN KEY ([idfPersonalDataGroup]) REFERENCES [dbo].[tstPersonalDataGroup] ([idfPersonalDataGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObject_trtBaseReference__idfsFormType_R_1657]...';


GO
ALTER TABLE [dbo].[tasSearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObject_trtBaseReference__idfsFormType_R_1657] FOREIGN KEY ([idfsFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObject_trtBaseReference__idfsSearchObject_R_1357]...';


GO
ALTER TABLE [dbo].[tasSearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObject_trtBaseReference__idfsSearchObject_R_1357] FOREIGN KEY ([idfsSearchObject]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObjectToSearchObject_tasSearchObject__idfsParentSearchObject_R_1714]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObjectToSearchObject_tasSearchObject__idfsParentSearchObject_R_1714] FOREIGN KEY ([idfsParentSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObjectToSearchObject_tasSearchObject__idfsRelatedSearchObject_R_1713]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObjectToSearchObject_tasSearchObject__idfsRelatedSearchObject_R_1713] FOREIGN KEY ([idfsRelatedSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObjectToSearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObjectToSearchObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObjectToSystemFunction_tasSearchObject_idfsSearchObject]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObjectToSystemFunction_tasSearchObject_idfsSearchObject] FOREIGN KEY ([idfsSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObjectToSystemFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObjectToSystemFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObjectToSystemFunction_trtSystemFunction_idfsSystemFunction]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObjectToSystemFunction_trtSystemFunction_idfsSystemFunction] FOREIGN KEY ([idfsSystemFunction]) REFERENCES [dbo].[trtSystemFunction] ([idfsSystemFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchTable_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfMainSearchTable_R_1723]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfMainSearchTable_R_1723] FOREIGN KEY ([idfMainSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfParentSearchTable_R_1700]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfParentSearchTable_R_1700] FOREIGN KEY ([idfParentSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfSearchTable_R_1701]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfSearchTable_R_1701] FOREIGN KEY ([idfSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfUnionSearchTable]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfUnionSearchTable] FOREIGN KEY ([idfUnionSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchTableJoinRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchTableJoinRule_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasView_tasglView__idfGlobalView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasView_tasglView__idfGlobalView_idfsLanguage] FOREIGN KEY ([idfGlobalView], [idfsLanguage]) REFERENCES [dbo].[tasglView] ([idfView], [idfsLanguage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasView_tasLayout__idflLayout]...';


GO
ALTER TABLE [dbo].[tasView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasView_tasLayout__idflLayout] FOREIGN KEY ([idflLayout]) REFERENCES [dbo].[tasLayout] ([idflLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasView_tasViewColumn__idfChartXAxisViewColumn]...';


GO
ALTER TABLE [dbo].[tasView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasView_tasViewColumn__idfChartXAxisViewColumn] FOREIGN KEY ([idfChartXAxisViewColumn]) REFERENCES [dbo].[tasViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasView_tasViewColumn__idfMapAdminUnitViewColumn]...';


GO
ALTER TABLE [dbo].[tasView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasView_tasViewColumn__idfMapAdminUnitViewColumn] FOREIGN KEY ([idfMapAdminUnitViewColumn]) REFERENCES [dbo].[tasViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasView_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasView_trtBaseReference__idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasView_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasView_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewBand_tasLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewBand_tasLayoutSearchField__idfLayoutSearchField] FOREIGN KEY ([idfLayoutSearchField]) REFERENCES [dbo].[tasLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewBand_tasView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewBand_tasView__idfView_idfsLanguage] FOREIGN KEY ([idfView], [idfsLanguage]) REFERENCES [dbo].[tasView] ([idfView], [idfsLanguage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewBand_tasViewBand__idfParentViewBand]...';


GO
ALTER TABLE [dbo].[tasViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewBand_tasViewBand__idfParentViewBand] FOREIGN KEY ([idfParentViewBand]) REFERENCES [dbo].[tasViewBand] ([idfViewBand]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewBand_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewBand_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_tasAggregateFunction__idfsAggregateFunction] FOREIGN KEY ([idfsAggregateFunction]) REFERENCES [dbo].[tasAggregateFunction] ([idfsAggregateFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_tasLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_tasLayoutSearchField__idfLayoutSearchField] FOREIGN KEY ([idfLayoutSearchField]) REFERENCES [dbo].[tasLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_tasView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_tasView__idfView_idfsLanguage] FOREIGN KEY ([idfView], [idfsLanguage]) REFERENCES [dbo].[tasView] ([idfView], [idfsLanguage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_tasViewBand__idfViewBand]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_tasViewBand__idfViewBand] FOREIGN KEY ([idfViewBand]) REFERENCES [dbo].[tasViewBand] ([idfViewBand]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_tasViewColumn__idfDenominatorViewColumn]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_tasViewColumn__idfDenominatorViewColumn] FOREIGN KEY ([idfDenominatorViewColumn]) REFERENCES [dbo].[tasViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_tasViewColumn__idfSourceViewColumn]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_tasViewColumn__idfSourceViewColumn] FOREIGN KEY ([idfSourceViewColumn]) REFERENCES [dbo].[tasViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauColumn_tauTable__idfTable_R_1559]...';


GO
ALTER TABLE [dbo].[tauColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tauColumn_tauTable__idfTable_R_1559] FOREIGN KEY ([idfTable]) REFERENCES [dbo].[tauTable] ([idfTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tauColumn_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailCreate_tauDataAuditEvent__idfDataAuditEvent_R_1024]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailCreate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailCreate_tauDataAuditEvent__idfDataAuditEvent_R_1024] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailCreate_tauTable__idfObjectTable_R_1561]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailCreate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailCreate_tauTable__idfObjectTable_R_1561] FOREIGN KEY ([idfObjectTable]) REFERENCES [dbo].[tauTable] ([idfTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailCreate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailCreate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailCreate_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailDelete_tauDataAuditEvent__idfDataAuditEvent_R_1558]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailDelete] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailDelete_tauDataAuditEvent__idfDataAuditEvent_R_1558] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailDelete_tauTable__idfObjectTable_R_1563]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailDelete] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailDelete_tauTable__idfObjectTable_R_1563] FOREIGN KEY ([idfObjectTable]) REFERENCES [dbo].[tauTable] ([idfTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailDelete_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailDelete] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailDelete_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailRestore_tauDataAuditEvent__idfDataAuditEvent_R_1558]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailRestore] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailRestore_tauDataAuditEvent__idfDataAuditEvent_R_1558] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailRestore_tauTable__idfObjectTable_R_1563]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailRestore] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailRestore_tauTable__idfObjectTable_R_1563] FOREIGN KEY ([idfObjectTable]) REFERENCES [dbo].[tauTable] ([idfTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailRestore_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailRestore] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailRestore_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_tauColumn__idfColumn_R_1564]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailUpdate_tauColumn__idfColumn_R_1564] FOREIGN KEY ([idfColumn]) REFERENCES [dbo].[tauColumn] ([idfColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_tauDataAuditEvent__idfDataAuditEvent_R_1557]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailUpdate_tauDataAuditEvent__idfDataAuditEvent_R_1557] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_tauTable__idfObjectTable_R_1562]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailUpdate_tauTable__idfObjectTable_R_1562] FOREIGN KEY ([idfObjectTable]) REFERENCES [dbo].[tauTable] ([idfTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailUpdate_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditEvent_tauTable__idfMainObjectTable_R_1560]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditEvent_tauTable__idfMainObjectTable_R_1560] FOREIGN KEY ([idfMainObjectTable]) REFERENCES [dbo].[tauTable] ([idfTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditEventType_R_1556]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditEventType_R_1556] FOREIGN KEY ([idfsDataAuditEventType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditObjectType_R_1555]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditObjectType_R_1555] FOREIGN KEY ([idfsDataAuditObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditEvent_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditEvent_tstSite__idfsSite_R_1021]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditEvent_tstSite__idfsSite_R_1021] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditEvent_tstUserTable__idfUserID_R_1022]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditEvent_tstUserTable__idfUserID_R_1022] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauPINAuditEvent_tstUserTable]...';


GO
ALTER TABLE [dbo].[tauPINAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauPINAuditEvent_tstUserTable] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tauTable_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExport] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExport_tstUserTable__idfUserID_R_1004]...';


GO
ALTER TABLE [dbo].[tdeDataExport] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExport_tstUserTable__idfUserID_R_1004] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDetail_tdeDataExport__idfDataExport_R_1001]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDetail_tdeDataExport__idfDataExport_R_1001] FOREIGN KEY ([idfDataExport]) REFERENCES [dbo].[tdeDataExport] ([idfDataExport]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDetail_trtBaseReference__idfsDataExportDetailStatus_R_1582]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDetail_trtBaseReference__idfsDataExportDetailStatus_R_1582] FOREIGN KEY ([idfsDataExportDetailStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDetail_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDetail_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDetail_trtDiagnosis__idfsDiagnosis_R_1003]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDetail_trtDiagnosis__idfsDiagnosis_R_1003] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDiagnosis_tdeDataExport__idfDataExport_R_1000]...';


GO
ALTER TABLE [dbo].[tdeDataExportDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDiagnosis_tdeDataExport__idfDataExport_R_1000] FOREIGN KEY ([idfDataExport]) REFERENCES [dbo].[tdeDataExport] ([idfDataExport]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDiagnosis_trtDiagnosis__idfsDiagnosis_R_999]...';


GO
ALTER TABLE [dbo].[tdeDataExportDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDiagnosis_trtDiagnosis__idfsDiagnosis_R_999] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportFFReference_ffParameter__idfsParameter]...';


GO
ALTER TABLE [dbo].[tdeDataExportFFReference] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportFFReference_ffParameter__idfsParameter] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportFFReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportFFReference] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportFFReference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportFFReference_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tdeDataExportFFReference] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportFFReference_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportProblem_tdeDataExport__idfDataExport_R_1008]...';


GO
ALTER TABLE [dbo].[tdeDataExportProblem] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportProblem_tdeDataExport__idfDataExport_R_1008] FOREIGN KEY ([idfDataExport]) REFERENCES [dbo].[tdeDataExport] ([idfDataExport]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportProblem_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportProblem] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportProblem_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflAggrCaseFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflAggrCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflAggrCaseFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflAggrCaseFiltered_tlbAggrCase__idfAggrCase]...';


GO
ALTER TABLE [dbo].[tflAggrCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflAggrCaseFiltered_tlbAggrCase__idfAggrCase] FOREIGN KEY ([idfAggrCase]) REFERENCES [dbo].[tlbAggrCase] ([idfAggrCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflAggrCaseFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflAggrCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflAggrCaseFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader] FOREIGN KEY ([idfAggregateHeader]) REFERENCES [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] ([idfAggregateHeader]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceFiltered_tlbBasicSyndromicSurveillance__idfBasicSyndromicSurveillance_R_1831]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_tlbBasicSyndromicSurveillance__idfBasicSyndromicSurveillance_R_1831] FOREIGN KEY ([idfBasicSyndromicSurveillance]) REFERENCES [dbo].[tlbBasicSyndromicSurveillance] ([idfBasicSyndromicSurveillance]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBatchTestFiltered_tflSiteGroup]...';


GO
ALTER TABLE [dbo].[tflBatchTestFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBatchTestFiltered_tflSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBatchTestFiltered_tlbBatchTest]...';


GO
ALTER TABLE [dbo].[tflBatchTestFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBatchTestFiltered_tlbBatchTest] FOREIGN KEY ([idfBatchTest]) REFERENCES [dbo].[tlbBatchTest] ([idfBatchTest]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBatchTestFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflBatchTestFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBatchTestFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflDataAuditEventFiltered_tauDataAuditEvent__idfDataAuditEvent_R_1830]...';


GO
ALTER TABLE [dbo].[tflDataAuditEventFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflDataAuditEventFiltered_tauDataAuditEvent__idfDataAuditEvent_R_1830] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflDataAuditEventFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflDataAuditEventFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflDataAuditEventFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflDataAuditEventFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflDataAuditEventFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflDataAuditEventFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflFarmFiltered_tlbFarm]...';


GO
ALTER TABLE [dbo].[tflFarmFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflFarmFiltered_tlbFarm] FOREIGN KEY ([idfFarm]) REFERENCES [dbo].[tlbFarm] ([idfFarm]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflFarmFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflFarmFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflFarmFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflFarmFilteredGroup_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflFarmFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflFarmFilteredGroup_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflGeoLocationFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflGeoLocationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflGeoLocationFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflGeoLocationFiltered_tlbGeoLocation__idfGeoLocation_R_1805]...';


GO
ALTER TABLE [dbo].[tflGeoLocationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflGeoLocationFiltered_tlbGeoLocation__idfGeoLocation_R_1805] FOREIGN KEY ([idfGeoLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflGeoLocationFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflGeoLocationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflGeoLocationFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflHumanCaseFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflHumanCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflHumanCaseFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflHumanCaseFiltered_tlbHumanCase__idfHumanCase]...';


GO
ALTER TABLE [dbo].[tflHumanCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflHumanCaseFiltered_tlbHumanCase__idfHumanCase] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflHumanCaseFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflHumanCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflHumanCaseFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflHumanFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflHumanFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflHumanFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflHumanFiltered_tlbHuman]...';


GO
ALTER TABLE [dbo].[tflHumanFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflHumanFiltered_tlbHuman] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflHumanFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflHumanFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflHumanFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflMonitoringSessionFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflMonitoringSessionFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflMonitoringSessionFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflMonitoringSessionFiltered_tlbMonitoringSession__idfMonitoringSession_R_1819]...';


GO
ALTER TABLE [dbo].[tflMonitoringSessionFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflMonitoringSessionFiltered_tlbMonitoringSession__idfMonitoringSession_R_1819] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflMonitoringSessionFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflMonitoringSessionFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflMonitoringSessionFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflNewID_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflNewID] WITH NOCHECK
    ADD CONSTRAINT [FK_tflNewID_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflNotificationFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflNotificationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflNotificationFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflNotificationFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflNotificationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflNotificationFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflNotificationFiltered_tstNotification__idfNotification_R_1825]...';


GO
ALTER TABLE [dbo].[tflNotificationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflNotificationFiltered_tstNotification__idfNotification_R_1825] FOREIGN KEY ([idfNotification]) REFERENCES [dbo].[tstNotification] ([idfNotification]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflObservationFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflObservationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflObservationFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflObservationFiltered_tlbObservation__idfObservation_R_1809]...';


GO
ALTER TABLE [dbo].[tflObservationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflObservationFiltered_tlbObservation__idfObservation_R_1809] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflObservationFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflObservationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflObservationFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflOutbreakFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflOutbreakFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflOutbreakFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflOutbreakFiltered_tlbOutbreak__idfOutbreak_R_1811]...';


GO
ALTER TABLE [dbo].[tflOutbreakFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflOutbreakFiltered_tlbOutbreak__idfOutbreak_R_1811] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflOutbreakFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflOutbreakFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflOutbreakFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSite_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSite_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSite_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tflSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSite_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroup_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroup_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroup_gisRayon_idfsRayon]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroup_gisRayon_idfsRayon] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroup_trtBaseReference_idfsSiteGroupType]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroup_trtBaseReference_idfsSiteGroupType] FOREIGN KEY ([idfsSiteGroupType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroup_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroup_tstSite_idfsSite] FOREIGN KEY ([idfsCentralSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroupRelation_tflSiteGroup_idfReceiverSite]...';


GO
ALTER TABLE [dbo].[tflSiteGroupRelation] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroupRelation_tflSiteGroup_idfReceiverSite] FOREIGN KEY ([idfReceiverSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroupRelation_tflSiteGroup_idfsSenderSiteGroup]...';


GO
ALTER TABLE [dbo].[tflSiteGroupRelation] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroupRelation_tflSiteGroup_idfsSenderSiteGroup] FOREIGN KEY ([idfSenderSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroupRelation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSiteGroupRelation] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroupRelation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteToSiteGroup_tflSiteGroup_idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflSiteToSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteToSiteGroup_tflSiteGroup_idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteToSiteGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSiteToSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteToSiteGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteToSiteGroup_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tflSiteToSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteToSiteGroup_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflTransferOutFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflTransferOutFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflTransferOutFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflTransferOutFiltered_tlbTransferOUT__idfTransferOut_R_1817]...';


GO
ALTER TABLE [dbo].[tflTransferOutFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflTransferOutFiltered_tlbTransferOUT__idfTransferOut_R_1817] FOREIGN KEY ([idfTransferOut]) REFERENCES [dbo].[tlbTransferOUT] ([idfTransferOut]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflTransferOutFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflTransferOutFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflTransferOutFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflVectorSurveillanceSessionFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflVectorSurveillanceSessionFiltered_tlbVectorSurveillanceSession__idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_tlbVectorSurveillanceSession__idfVectorSurveillanceSession] FOREIGN KEY ([idfVectorSurveillanceSession]) REFERENCES [dbo].[tlbVectorSurveillanceSession] ([idfVectorSurveillanceSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflVectorSurveillanceSessionFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflVetCaseFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflVetCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflVetCaseFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflVetCaseFiltered_tlbVetCase__idfVetCase]...';


GO
ALTER TABLE [dbo].[tflVetCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflVetCaseFiltered_tlbVetCase__idfVetCase] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflVetCaseFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflVetCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflVetCaseFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbActivityParameters_ffParameter__idfsParameter_R_222]...';


GO
ALTER TABLE [dbo].[tlbActivityParameters] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbActivityParameters_ffParameter__idfsParameter_R_222] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbActivityParameters_tlbObservation__idfObservation_R_1423]...';


GO
ALTER TABLE [dbo].[tlbActivityParameters] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbActivityParameters_tlbObservation__idfObservation_R_1423] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbActivityParameters_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbActivityParameters] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbActivityParameters_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAdministrativeReportAudit_idfsReport]...';


GO
ALTER TABLE [dbo].[tlbAdministrativeReportAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAdministrativeReportAudit_idfsReport] FOREIGN KEY ([idfsReport]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAdministrativeReportAudit_RoleID]...';


GO
ALTER TABLE [dbo].[tlbAdministrativeReportAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAdministrativeReportAudit_RoleID] FOREIGN KEY ([RoleID]) REFERENCES [dbo].[tlbEmployeeGroup] ([idfEmployeeGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_gisBaseReference__idfsAdministrativeUnit_R_1666]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_gisBaseReference__idfsAdministrativeUnit_R_1666] FOREIGN KEY ([idfsAdministrativeUnit]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfDiagnosticVersion_R_1686]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfDiagnosticVersion_R_1686] FOREIGN KEY ([idfDiagnosticVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfProphylacticVersion_R_1687]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfProphylacticVersion_R_1687] FOREIGN KEY ([idfProphylacticVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfSanitaryVersion_R_1688]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfSanitaryVersion_R_1688] FOREIGN KEY ([idfSanitaryVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfVersion_R_1684]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfVersion_R_1684] FOREIGN KEY ([idfVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfCaseObservation_R_1608]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfCaseObservation_R_1608] FOREIGN KEY ([idfCaseObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfDiagnosticObservation_R_1609]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfDiagnosticObservation_R_1609] FOREIGN KEY ([idfDiagnosticObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfProphylacticObservation_R_1610]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfProphylacticObservation_R_1610] FOREIGN KEY ([idfProphylacticObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfSanitaryObservation_R_1611]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfSanitaryObservation_R_1611] FOREIGN KEY ([idfSanitaryObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfEnteredByOffice_R_1606]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfEnteredByOffice_R_1606] FOREIGN KEY ([idfEnteredByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfOffice]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfOffice] FOREIGN KEY ([idfOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfReceivedByOffice_R_1602]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfReceivedByOffice_R_1602] FOREIGN KEY ([idfReceivedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfSentByOffice_R_1604]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfSentByOffice_R_1604] FOREIGN KEY ([idfSentByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbPerson__idfEnteredByPerson_R_1607]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfEnteredByPerson_R_1607] FOREIGN KEY ([idfEnteredByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbPerson__idfReceivedByPerson_R_1603]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfReceivedByPerson_R_1603] FOREIGN KEY ([idfReceivedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbPerson__idfSentByPerson_R_1605]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfSentByPerson_R_1605] FOREIGN KEY ([idfSentByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_trtBaseReference__idfsAggrCaseType_R_1601]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_trtBaseReference__idfsAggrCaseType_R_1601] FOREIGN KEY ([idfsAggrCaseType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_tlbAggrMatrixVersionHeader__idfVersion] FOREIGN KEY ([idfVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtBaseReference__idfsDiagnosticAction_R_1117]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtBaseReference__idfsDiagnosticAction_R_1117] FOREIGN KEY ([idfsDiagnosticAction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtDiagnosis__idfsDiagnosis_R_1616]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtDiagnosis__idfsDiagnosis_R_1616] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtSpeciesType__idfsSpeciesType_R_1116]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtSpeciesType__idfsSpeciesType_R_1116] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrHumanCaseMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrHumanCaseMTX_tlbAggrMatrixVersionHeader__idfVersion] FOREIGN KEY ([idfVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrHumanCaseMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrHumanCaseMTX_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrHumanCaseMTX_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrHumanCaseMTX_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrMatrixVersionHeader_trtBaseReference__idfsAggrMatrixType_R_1685]...';


GO
ALTER TABLE [dbo].[tlbAggrMatrixVersionHeader] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrMatrixVersionHeader_trtBaseReference__idfsAggrMatrixType_R_1685] FOREIGN KEY ([idfsMatrixType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrMatrixVersionHeader_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrMatrixVersionHeader] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrMatrixVersionHeader_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrProphylacticActionMTX_tlbAggrMatrixVersionHeader__idfVersion] FOREIGN KEY ([idfVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtDiagnosis__idfsDiagnosis_R_1615]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtDiagnosis__idfsDiagnosis_R_1615] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtProphilacticAction__idfsProphilacticAction_R_1614]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtProphilacticAction__idfsProphilacticAction_R_1614] FOREIGN KEY ([idfsProphilacticAction]) REFERENCES [dbo].[trtProphilacticAction] ([idfsProphilacticAction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtSpeciesType__idfsSpeciesType_R_1119]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtSpeciesType__idfsSpeciesType_R_1119] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrSanitaryActionMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrSanitaryActionMTX_tlbAggrMatrixVersionHeader__idfVersion] FOREIGN KEY ([idfVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrSanitaryActionMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrSanitaryActionMTX_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrSanitaryActionMTX_trtSanitaryAction__idfsSanitaryAction]...';


GO
ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrSanitaryActionMTX_trtSanitaryAction__idfsSanitaryAction] FOREIGN KEY ([idfsSanitaryAction]) REFERENCES [dbo].[trtSanitaryAction] ([idfsSanitaryAction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrVetCaseMTX_tlbAggrMatrixVersionHeader__idfVersion] FOREIGN KEY ([idfVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrVetCaseMTX_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_trtDiagnosis__idfsDiagnosis_R_1617]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrVetCaseMTX_trtDiagnosis__idfsDiagnosis_R_1617] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_trtSpeciesType__idfsSpeciesType_R_1122]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrVetCaseMTX_trtSpeciesType__idfsSpeciesType_R_1122] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_tlbObservation__idfObservation_R_1481]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_tlbObservation__idfObservation_R_1481] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_tlbSpecies__idfSpecies_R_1478]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_tlbSpecies__idfSpecies_R_1478] FOREIGN KEY ([idfSpecies]) REFERENCES [dbo].[tlbSpecies] ([idfSpecies]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsAnimalAge_R_1236]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalAge_R_1236] FOREIGN KEY ([idfsAnimalAge]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsAnimalCondition_R_1280]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalCondition_R_1280] FOREIGN KEY ([idfsAnimalCondition]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsAnimalGender_R_1237]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalGender_R_1237] FOREIGN KEY ([idfsAnimalGender]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsYNClinicalSigns_R_1409]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsYNClinicalSigns_R_1409] FOREIGN KEY ([idfsYNClinicalSigns]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAntimicrobialTherapy_tlbHumanCase__idfHumanCase_R_1422]...';


GO
ALTER TABLE [dbo].[tlbAntimicrobialTherapy] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAntimicrobialTherapy_tlbHumanCase__idfHumanCase_R_1422] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAntimicrobialTherapy_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAntimicrobialTherapy] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAntimicrobialTherapy_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tlbHuman__idfHuman]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbHuman__idfHuman] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tlbOffice__idfHospital]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbOffice__idfHospital] FOREIGN KEY ([idfHospital]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tlbPerson__idfEnteredBy]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbPerson__idfEnteredBy] FOREIGN KEY ([idfEnteredBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsBasicSyndromicSurveillanceType]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsBasicSyndromicSurveillanceType] FOREIGN KEY ([idfsBasicSyndromicSurveillanceType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsMethodOfMeasurement]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsMethodOfMeasurement] FOREIGN KEY ([idfsMethodOfMeasurement]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsOutcome]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsOutcome] FOREIGN KEY ([idfsOutcome]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsTestResult]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsTestResult] FOREIGN KEY ([idfsTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNAdministratedAntiviralMedication]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNAdministratedAntiviralMedication] FOREIGN KEY ([idfsYNAdministratedAntiviralMedication]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNCough]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNCough] FOREIGN KEY ([idfsYNCough]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNFever]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNFever] FOREIGN KEY ([idfsYNFever]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasHospitalized]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasHospitalized] FOREIGN KEY ([idfsYNPatientWasHospitalized]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasInER]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasInER] FOREIGN KEY ([idfsYNPatientWasInER]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPostpartumPeriod]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPostpartumPeriod] FOREIGN KEY ([idfsYNPostpartumPeriod]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPregnant]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPregnant] FOREIGN KEY ([idfsYNPregnant]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNSeasonalFluVaccine]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNSeasonalFluVaccine] FOREIGN KEY ([idfsYNSeasonalFluVaccine]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNShortnessOfBreath]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNShortnessOfBreath] FOREIGN KEY ([idfsYNShortnessOfBreath]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNTreatment]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNTreatment] FOREIGN KEY ([idfsYNTreatment]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader] FOREIGN KEY ([idfAggregateHeader]) REFERENCES [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] ([idfAggregateHeader]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbOffice__idfHospital]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbOffice__idfHospital] FOREIGN KEY ([idfHospital]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateDetail_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateHeader_tlbPerson__idfEnteredBy]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_tlbPerson__idfEnteredBy] FOREIGN KEY ([idfEnteredBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateHeader_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateHeader_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbObservation__idfObservation_R_1541]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbObservation__idfObservation_R_1541] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbOffice__idfPerformedByOffice_R_1539]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfPerformedByOffice_R_1539] FOREIGN KEY ([idfPerformedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbOffice__idfResultEnteredByOffice]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfResultEnteredByOffice] FOREIGN KEY ([idfResultEnteredByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbOffice__idfValidatedByOffice_R_1542]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfValidatedByOffice_R_1542] FOREIGN KEY ([idfValidatedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbPerson__idfPerformedByPerson_R_1540]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfPerformedByPerson_R_1540] FOREIGN KEY ([idfPerformedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbPerson__idfResultEnteredByPerson]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfResultEnteredByPerson] FOREIGN KEY ([idfResultEnteredByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbPerson__idfValidatedByPerson_R_1543]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfValidatedByPerson_R_1543] FOREIGN KEY ([idfValidatedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_trtBaseReference__idfsBatchStatus_R_1544]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_trtBaseReference__idfsBatchStatus_R_1544] FOREIGN KEY ([idfsBatchStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_trtBaseReference__idfsTestName] FOREIGN KEY ([idfsTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tstSite__idfsSite_R_1653]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tstSite__idfsSite_R_1653] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaign_trtBaseRef_CampaignCategory]...';


GO
ALTER TABLE [dbo].[tlbCampaign] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaign_trtBaseRef_CampaignCategory] FOREIGN KEY ([CampaignCategoryID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaign_trtBaseReference__idfsCampaignType_R_1736]...';


GO
ALTER TABLE [dbo].[tlbCampaign] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaign_trtBaseReference__idfsCampaignType_R_1736] FOREIGN KEY ([idfsCampaignType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaign_trtBaseReference_idfsCampaignStatus]...';


GO
ALTER TABLE [dbo].[tlbCampaign] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaign_trtBaseReference_idfsCampaignStatus] FOREIGN KEY ([idfsCampaignStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaign_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbCampaign] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaign_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaign_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbCampaign] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaign_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_tlbCampaign__idfCampaign_R_1738]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaignToDiagnosis_tlbCampaign__idfCampaign_R_1738] FOREIGN KEY ([idfCampaign]) REFERENCES [dbo].[tlbCampaign] ([idfCampaign]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaignToDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1739]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaignToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1739] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaignToDiagnosis_trtSampleType__idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtSpeciesType__idfsSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaignToDiagnosis_trtSpeciesType__idfsSpeciesType] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_tlbHumanCase__idfHumanCase_R_1797]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbChangeDiagnosisHistory_tlbHumanCase__idfHumanCase_R_1797] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbChangeDiagnosisHistory_tlbPerson__idfPerson] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtBaseReference_idfsChangeDiagnosisReason]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtBaseReference_idfsChangeDiagnosisReason] FOREIGN KEY ([idfsChangeDiagnosisReason]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsCurrentDiagnosis_R_1799]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsCurrentDiagnosis_R_1799] FOREIGN KEY ([idfsCurrentDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsPreviousDiagnosis_R_1798]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsPreviousDiagnosis_R_1798] FOREIGN KEY ([idfsPreviousDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbContactedCasePerson_tlbHuman__idfHuman_R_1460]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbContactedCasePerson_tlbHuman__idfHuman_R_1460] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbContactedCasePerson_tlbHumanCase__idfHumanCase_R_1461]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbContactedCasePerson_tlbHumanCase__idfHumanCase_R_1461] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbContactedCasePerson_trtBaseReference__idfsPersonContactType_R_1462]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbContactedCasePerson_trtBaseReference__idfsPersonContactType_R_1462] FOREIGN KEY ([idfsPersonContactType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbContactedCasePerson_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbContactedCasePerson_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbDepartment_tlbOffice__idfOrganization]...';


GO
ALTER TABLE [dbo].[tlbDepartment] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbDepartment_tlbOffice__idfOrganization] FOREIGN KEY ([idfOrganization]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbDepartment_trtBaseReference__idfsDepartmentName]...';


GO
ALTER TABLE [dbo].[tlbDepartment] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbDepartment_trtBaseReference__idfsDepartmentName] FOREIGN KEY ([idfsDepartmentName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbDepartment_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbDepartment] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbDepartment_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Employee_Site]...';


GO
ALTER TABLE [dbo].[tlbEmployee] WITH NOCHECK
    ADD CONSTRAINT [FK_Employee_Site] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployee_trtBaseReference__idfsEmployeeType_R_1250]...';


GO
ALTER TABLE [dbo].[tlbEmployee] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployee_trtBaseReference__idfsEmployeeType_R_1250] FOREIGN KEY ([idfsEmployeeType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployee_trtBaseReference_idfsEmployeeCategory]...';


GO
ALTER TABLE [dbo].[tlbEmployee] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployee_trtBaseReference_idfsEmployeeCategory] FOREIGN KEY ([idfsEmployeeCategory]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployee_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbEmployee] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployee_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroup_tlbEmployee__idfEmployeeGroup_R_832]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroup_tlbEmployee__idfEmployeeGroup_R_832] FOREIGN KEY ([idfEmployeeGroup]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroup_trtBaseReference__idfsEmployeeGroupName_R_1014]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroup_trtBaseReference__idfsEmployeeGroupName_R_1014] FOREIGN KEY ([idfsEmployeeGroupName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroup_tstSite__idfsSite_R_1018]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroup_tstSite__idfsSite_R_1018] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroupMember_tlbEmployee__idfEmployee_R_1668]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroupMember] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroupMember_tlbEmployee__idfEmployee_R_1668] FOREIGN KEY ([idfEmployee]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroupMember_tlbEmployeeGroup__idfEmployeeGroup_R_1465]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroupMember] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroupMember_tlbEmployeeGroup__idfEmployeeGroup_R_1465] FOREIGN KEY ([idfEmployeeGroup]) REFERENCES [dbo].[tlbEmployeeGroup] ([idfEmployeeGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroupMember_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroupMember] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroupMember_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_tlbFarmActual]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_tlbFarmActual] FOREIGN KEY ([idfFarmActual]) REFERENCES [dbo].[tlbFarmActual] ([idfFarmActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_tlbGeoLocation__idfFarmAddress_R_1473]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_tlbGeoLocation__idfFarmAddress_R_1473] FOREIGN KEY ([idfFarmAddress]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_tlbHuman__idfHuman_R_1470]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_tlbHuman__idfHuman_R_1470] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_tlbMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_tlbMonitoringSession] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_tlbObservation__idfObservation_R_1471]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_tlbObservation__idfObservation_R_1471] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsAvianFarmType_R_1295]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsAvianFarmType_R_1295] FOREIGN KEY ([idfsAvianFarmType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsAvianProductionType_R_1294]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsAvianProductionType_R_1294] FOREIGN KEY ([idfsAvianProductionType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsFarmCategory_R_1288]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsFarmCategory_R_1288] FOREIGN KEY ([idfsFarmCategory]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsGrazingPattern_R_1298]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsGrazingPattern_R_1298] FOREIGN KEY ([idfsGrazingPattern]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsIntendedUse_R_1299]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsIntendedUse_R_1299] FOREIGN KEY ([idfsIntendedUse]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsLivestockProductionType_R_1296]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsLivestockProductionType_R_1296] FOREIGN KEY ([idfsLivestockProductionType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsMovementPattern_R_1300]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsMovementPattern_R_1300] FOREIGN KEY ([idfsMovementPattern]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsOwnershipStructure_R_1287]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsOwnershipStructure_R_1287] FOREIGN KEY ([idfsOwnershipStructure]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_tlbGeoLocationShared__idfFarmAddress_R_1473]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_tlbGeoLocationShared__idfFarmAddress_R_1473] FOREIGN KEY ([idfFarmAddress]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_tlbHumanActual__idfHumanActual_R_1470]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_tlbHumanActual__idfHumanActual_R_1470] FOREIGN KEY ([idfHumanActual]) REFERENCES [dbo].[tlbHumanActual] ([idfHumanActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsAvianFarmType_R_1295]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsAvianFarmType_R_1295] FOREIGN KEY ([idfsAvianFarmType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsAvianProductionType_R_1294]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsAvianProductionType_R_1294] FOREIGN KEY ([idfsAvianProductionType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsFarmCategory_R_1288]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsFarmCategory_R_1288] FOREIGN KEY ([idfsFarmCategory]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsGrazingPattern_R_1298]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsGrazingPattern_R_1298] FOREIGN KEY ([idfsGrazingPattern]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsIntendedUse_R_1299]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsIntendedUse_R_1299] FOREIGN KEY ([idfsIntendedUse]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsLivestockProductionType_R_1296]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsLivestockProductionType_R_1296] FOREIGN KEY ([idfsLivestockProductionType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsMovementPattern_R_1300]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsMovementPattern_R_1300] FOREIGN KEY ([idfsMovementPattern]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsOwnershipStructure_R_1287]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsOwnershipStructure_R_1287] FOREIGN KEY ([idfsOwnershipStructure]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezer_trtBaseReference__idfsStorageType_R_1256]...';


GO
ALTER TABLE [dbo].[tlbFreezer] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezer_trtBaseReference__idfsStorageType_R_1256] FOREIGN KEY ([idfsStorageType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezer_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFreezer] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezer_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezer_tstSite__idfsSite_R_236]...';


GO
ALTER TABLE [dbo].[tlbFreezer] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezer_tstSite__idfsSite_R_236] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_FreezerSubdivision_BaseRef_BoxSizeID]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH NOCHECK
    ADD CONSTRAINT [FK_FreezerSubdivision_BaseRef_BoxSizeID] FOREIGN KEY ([BoxSizeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezerSubdivision_tlbFreezer__idfFreezer_R_902]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezerSubdivision_tlbFreezer__idfFreezer_R_902] FOREIGN KEY ([idfFreezer]) REFERENCES [dbo].[tlbFreezer] ([idfFreezer]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezerSubdivision_tlbFreezerSubdivision__idfParentSubdivision_R_904]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezerSubdivision_tlbFreezerSubdivision__idfParentSubdivision_R_904] FOREIGN KEY ([idfParentSubdivision]) REFERENCES [dbo].[tlbFreezerSubdivision] ([idfSubdivision]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezerSubdivision_trtBaseReference__idfsSubdivisionType_R_1257]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezerSubdivision_trtBaseReference__idfsSubdivisionType_R_1257] FOREIGN KEY ([idfsSubdivisionType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezerSubdivision_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezerSubdivision_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezerSubdivision_tstSite__idfsSite_R_908]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezerSubdivision_tstSite__idfsSite_R_908] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_gisCountry__idfsCountry_R_972]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_gisCountry__idfsCountry_R_972] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_gisRayon__idfsRayon_R_974]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_gisRayon__idfsRayon_R_974] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_gisRegion__idfsRegion_R_973]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_gisRegion__idfsRegion_R_973] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_gisSettlement__idfsSettlement_R_1218]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_gisSettlement__idfsSettlement_R_1218] FOREIGN KEY ([idfsSettlement]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference__idfsGeoLocationType_R_1238]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsGeoLocationType_R_1238] FOREIGN KEY ([idfsGeoLocationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference__idfsGroundType_R_1239]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsGroundType_R_1239] FOREIGN KEY ([idfsGroundType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference__idfsResidentType_R_1277]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsResidentType_R_1277] FOREIGN KEY ([idfsResidentType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_tstSite__idfsSite_R_1028]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_tstSite__idfsSite_R_1028] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_gisCountry__idfsCountry_R_972]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_gisCountry__idfsCountry_R_972] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_gisRayon__idfsRayon_R_974]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_gisRayon__idfsRayon_R_974] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_gisRegion__idfsRegion_R_973]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_gisRegion__idfsRegion_R_973] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_gisSettlement__idfsSettlement_R_1218]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_gisSettlement__idfsSettlement_R_1218] FOREIGN KEY ([idfsSettlement]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference__idfsGeoLocationType_R_1238]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsGeoLocationType_R_1238] FOREIGN KEY ([idfsGeoLocationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference__idfsGroundType_R_1239]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsGroundType_R_1239] FOREIGN KEY ([idfsGroundType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference__idfsResidentType_R_1277]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsResidentType_R_1277] FOREIGN KEY ([idfsResidentType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_tstSite__idfsSite_R_1028]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_tstSite__idfsSite_R_1028] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationSharedTranslation_tlbGeoLocationShared__idfGeoLocationShared]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationSharedTranslation_tlbGeoLocationShared__idfGeoLocationShared] FOREIGN KEY ([idfGeoLocationShared]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) ON DELETE CASCADE NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationSharedTranslation_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationSharedTranslation_trtBaseReference__idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationSharedTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationSharedTranslation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationTranslation_tlbGeoLocation__idfGeoLocation]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationTranslation_tlbGeoLocation__idfGeoLocation] FOREIGN KEY ([idfGeoLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) ON DELETE CASCADE NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationTranslation_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationTranslation_trtBaseReference__idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationTranslation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGridDefinition_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGridDefinition_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGridDefinition_tstUserTable_idfUserID]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGridDefinition_tstUserTable_idfUserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHerd_tlbFarm__idfFarm_R_1480]...';


GO
ALTER TABLE [dbo].[tlbHerd] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHerd_tlbFarm__idfFarm_R_1480] FOREIGN KEY ([idfFarm]) REFERENCES [dbo].[tlbFarm] ([idfFarm]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHerd_tlbHerdActual]...';


GO
ALTER TABLE [dbo].[tlbHerd] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHerd_tlbHerdActual] FOREIGN KEY ([idfHerdActual]) REFERENCES [dbo].[tlbHerdActual] ([idfHerdActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHerd_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHerd] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHerd_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHerdActual_tlbFarmActual__idfFarmActual_R_1480]...';


GO
ALTER TABLE [dbo].[tlbHerdActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHerdActual_tlbFarmActual__idfFarmActual_R_1480] FOREIGN KEY ([idfFarmActual]) REFERENCES [dbo].[tlbFarmActual] ([idfFarmActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHerdActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHerdActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHerdActual_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_tlbGeoLocation__idfCurrentResidenceAddress_R_1424]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfCurrentResidenceAddress_R_1424] FOREIGN KEY ([idfCurrentResidenceAddress]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_tlbGeoLocation__idfEmployerAddress_R_1425]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfEmployerAddress_R_1425] FOREIGN KEY ([idfEmployerAddress]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_tlbGeoLocation__idfRegistrationAddress_R_1426]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfRegistrationAddress_R_1426] FOREIGN KEY ([idfRegistrationAddress]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_tlbHumanActual]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_tlbHumanActual] FOREIGN KEY ([idfHumanActual]) REFERENCES [dbo].[tlbHumanActual] ([idfHumanActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_tlbMonitoringSession_MontoringSessionID]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_tlbMonitoringSession_MontoringSessionID] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_trtBaseReference__idfsHumanGender_R_1232]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsHumanGender_R_1232] FOREIGN KEY ([idfsHumanGender]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_trtBaseReference__idfsNationality_R_1278]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsNationality_R_1278] FOREIGN KEY ([idfsNationality]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_trtBaseReference__idfsOccupationType_R_1233]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsOccupationType_R_1233] FOREIGN KEY ([idfsOccupationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_trtBaseReference_idfsPersonIDType]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_trtBaseReference_idfsPersonIDType] FOREIGN KEY ([idfsPersonIDType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_tlbGeoLocation__idfCurrentResidenceAddress_R_1424]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfCurrentResidenceAddress_R_1424] FOREIGN KEY ([idfCurrentResidenceAddress]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_tlbGeoLocation__idfEmployerAddress_R_1425]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfEmployerAddress_R_1425] FOREIGN KEY ([idfEmployerAddress]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_tlbGeoLocation__idfRegistrationAddress_R_1426]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfRegistrationAddress_R_1426] FOREIGN KEY ([idfRegistrationAddress]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference__idfsHumanGender_R_1232]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsHumanGender_R_1232] FOREIGN KEY ([idfsHumanGender]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference__idfsNationality_R_1278]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsNationality_R_1278] FOREIGN KEY ([idfsNationality]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference__idfsOccupationType_R_1233]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsOccupationType_R_1233] FOREIGN KEY ([idfsOccupationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference_idfsPersonIDType]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_trtBaseReference_idfsPersonIDType] FOREIGN KEY ([idfsPersonIDType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanCase_BaseRef_ExposureLocationKnown]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanCase_BaseRef_ExposureLocationKnown] FOREIGN KEY ([idfsYNExposureLocationKnown]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanCase_BaseRef_PreviouslySoughtCare]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanCase_BaseRef_PreviouslySoughtCare] FOREIGN KEY ([idfsYNPreviouslySoughtCare]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanCase_BaseRef_SpecificVaccinationAdministered]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanCase_BaseRef_SpecificVaccinationAdministered] FOREIGN KEY ([idfsYNSpecificVaccinationAdministered]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumaCase_BaseRef_DiseaseReportTypeID]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumaCase_BaseRef_DiseaseReportTypeID] FOREIGN KEY ([DiseaseReportTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbGeoLocation__idfPointGeoLocation_R_1421]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbGeoLocation__idfPointGeoLocation_R_1421] FOREIGN KEY ([idfPointGeoLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbHuman]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbHuman] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbHumanCase__idfDeduplicationResultCase_R_1444]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbHumanCase__idfDeduplicationResultCase_R_1444] FOREIGN KEY ([idfDeduplicationResultCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbMonitoringSession_ParentMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbMonitoringSession_ParentMonitoringSession] FOREIGN KEY ([idfParentMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbObservation__idfCSObservation_R_1416]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbObservation__idfCSObservation_R_1416] FOREIGN KEY ([idfCSObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbObservation__idfEpiObservation_R_1415]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbObservation__idfEpiObservation_R_1415] FOREIGN KEY ([idfEpiObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfHospital]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfHospital] FOREIGN KEY ([idfHospital]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfInvestigatedByOffice_R_1420]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfInvestigatedByOffice_R_1420] FOREIGN KEY ([idfInvestigatedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfReceivedByOffice_R_1419]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfReceivedByOffice_R_1419] FOREIGN KEY ([idfReceivedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfSentByOffice_R_1418]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfSentByOffice_R_1418] FOREIGN KEY ([idfSentByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice_idfSoughtCareFacility]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbOffice_idfSoughtCareFacility] FOREIGN KEY ([idfSoughtCareFacility]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbOutbreak__idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbOutbreak__idfOutbreak] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson__idfInvestigatedByPerson]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfInvestigatedByPerson] FOREIGN KEY ([idfInvestigatedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson__idfReceivedByPerson]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfReceivedByPerson] FOREIGN KEY ([idfReceivedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson__idfSentByPerson]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfSentByPerson] FOREIGN KEY ([idfSentByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson_idfPersonEnteredBy]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbPerson_idfPersonEnteredBy] FOREIGN KEY ([idfPersonEnteredBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsCaseProgressStatus]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsCaseProgressStatus] FOREIGN KEY ([idfsCaseProgressStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsFinalCaseStatus_R_1676]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsFinalCaseStatus_R_1676] FOREIGN KEY ([idfsFinalCaseStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsFinalState_R_1292]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsFinalState_R_1292] FOREIGN KEY ([idfsFinalState]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsHospitalizationStatus_R_1269]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsHospitalizationStatus_R_1269] FOREIGN KEY ([idfsHospitalizationStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsHumanAgeType_R_1247]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsHumanAgeType_R_1247] FOREIGN KEY ([idfsHumanAgeType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsInitialCaseStatus_R_1439]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsInitialCaseStatus_R_1439] FOREIGN KEY ([idfsInitialCaseStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsOutcome_R_1414]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsOutcome_R_1414] FOREIGN KEY ([idfsOutcome]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNAntimicrobialTherapy_R_1409]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNAntimicrobialTherapy_R_1409] FOREIGN KEY ([idfsYNAntimicrobialTherapy]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNHospitalization_R_1410]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNHospitalization_R_1410] FOREIGN KEY ([idfsYNHospitalization]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNRelatedToOutbreak_R_1413]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNRelatedToOutbreak_R_1413] FOREIGN KEY ([idfsYNRelatedToOutbreak]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNSpecimenCollected_R_1411]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNSpecimenCollected_R_1411] FOREIGN KEY ([idfsYNSpecimenCollected]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNTestsConducted]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNTestsConducted] FOREIGN KEY ([idfsYNTestsConducted]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference_idfsNonNotifiableDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference_idfsNonNotifiableDiagnosis] FOREIGN KEY ([idfsNonNotifiableDiagnosis]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference_idfsNotCollectedReason]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference_idfsNotCollectedReason] FOREIGN KEY ([idfsNotCollectedReason]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtDiagnosis__idfsFinalDiagnosis_R_1427]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtDiagnosis__idfsFinalDiagnosis_R_1427] FOREIGN KEY ([idfsFinalDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtDiagnosis__idfsTentativeDiagnosis_R_1428]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtDiagnosis__idfsTentativeDiagnosis_R_1428] FOREIGN KEY ([idfsTentativeDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbAnimal]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbAnimal] FOREIGN KEY ([idfAnimal]) REFERENCES [dbo].[tlbAnimal] ([idfAnimal]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbDepartment_idfInDepartment]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbDepartment_idfInDepartment] FOREIGN KEY ([idfInDepartment]) REFERENCES [dbo].[tlbDepartment] ([idfDepartment]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbFreezerSubdivision]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbFreezerSubdivision] FOREIGN KEY ([idfSubdivision]) REFERENCES [dbo].[tlbFreezerSubdivision] ([idfSubdivision]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbHuman]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbHuman] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbHumanCase]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbHumanCase] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbMaterial__idfParentMaterial_R_1222]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbMaterial__idfParentMaterial_R_1222] FOREIGN KEY ([idfParentMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbMaterial__idfRootMaterial]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbMaterial__idfRootMaterial] FOREIGN KEY ([idfRootMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbMonitoringSession] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbOffice__idfFieldCollectedByOffice_R_1530]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbOffice__idfFieldCollectedByOffice_R_1530] FOREIGN KEY ([idfFieldCollectedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbOffice__idfSendToOffice]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbOffice__idfSendToOffice] FOREIGN KEY ([idfSendToOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbPerson]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbPerson] FOREIGN KEY ([idfDestroyedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbPerson__idfAccesionByPerson]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbPerson__idfAccesionByPerson] FOREIGN KEY ([idfAccesionByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbPerson__idfFieldCollectedByPerson_R_1529]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbPerson__idfFieldCollectedByPerson_R_1529] FOREIGN KEY ([idfFieldCollectedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbPerson__idfMarkedForDispositionByPerson]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbPerson__idfMarkedForDispositionByPerson] FOREIGN KEY ([idfMarkedForDispositionByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbSpecies]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbSpecies] FOREIGN KEY ([idfSpecies]) REFERENCES [dbo].[tlbSpecies] ([idfSpecies]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbTesting__idfMainTest]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbTesting__idfMainTest] FOREIGN KEY ([idfMainTest]) REFERENCES [dbo].[tlbTesting] ([idfTesting]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbVector_idfVector]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbVector_idfVector] FOREIGN KEY ([idfVector]) REFERENCES [dbo].[tlbVector] ([idfVector]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbVectorSurveillanceSession_idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbVectorSurveillanceSession_idfVectorSurveillanceSession] FOREIGN KEY ([idfVectorSurveillanceSession]) REFERENCES [dbo].[tlbVectorSurveillanceSession] ([idfVectorSurveillanceSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbVetCase]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbVetCase] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference__idfsAccessionCondition]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference__idfsAccessionCondition] FOREIGN KEY ([idfsAccessionCondition]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_DiseaseID]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_DiseaseID] FOREIGN KEY ([DiseaseID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsBirdStatus]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsBirdStatus] FOREIGN KEY ([idfsBirdStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsDestructionMethod]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsDestructionMethod] FOREIGN KEY ([idfsDestructionMethod]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsSampleKind]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsSampleKind] FOREIGN KEY ([idfsSampleKind]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsSampleStatus]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsSampleStatus] FOREIGN KEY ([idfsSampleStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_PreviousSampleStatusID]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_PreviousSampleStatusID] FOREIGN KEY ([PreviousSampleStatusID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtSampleType__idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tstSite__idfsCurrentSite]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tstSite__idfsCurrentSite] FOREIGN KEY ([idfsCurrentSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tstSite__idfsSite_R_1066]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tstSite__idfsSite_R_1066] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_gisCountry__idfsCountry_R_1741]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_gisCountry__idfsCountry_R_1741] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_gisRayon__idfsRayon_R_1743]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_gisRayon__idfsRayon_R_1743] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_gisRegion__idfsRegion_R_1742]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_gisRegion__idfsRegion_R_1742] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_gisSettlement__idfsSettlement_R_1744]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_gisSettlement__idfsSettlement_R_1744] FOREIGN KEY ([idfsSettlement]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType] FOREIGN KEY ([idfsMonitoringSessionSpeciesType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_tlbCampaign__idfCampaign_R_1748]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_tlbCampaign__idfCampaign_R_1748] FOREIGN KEY ([idfCampaign]) REFERENCES [dbo].[tlbCampaign] ([idfCampaign]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_tlbPerson__idfPersonEnteredBy_R_1745]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_tlbPerson__idfPersonEnteredBy_R_1745] FOREIGN KEY ([idfPersonEnteredBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_trtBaseRef_SessionCategoryID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_trtBaseRef_SessionCategoryID] FOREIGN KEY ([SessionCategoryID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_trtBaseReference__idfsMonitoringSessionStatus_R_1740]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_trtBaseReference__idfsMonitoringSessionStatus_R_1740] FOREIGN KEY ([idfsMonitoringSessionStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_tstSite__idfsSite_R_1746]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_tstSite__idfsSite_R_1746] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionAction_tlbMonitoringSession__idfMonitoringSession_R_1833]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionAction_tlbMonitoringSession__idfMonitoringSession_R_1833] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionAction_tlbPerson__idfPersonEnteredBy_R_1836]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionAction_tlbPerson__idfPersonEnteredBy_R_1836] FOREIGN KEY ([idfPersonEnteredBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionStatus_R_1835]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionStatus_R_1835] FOREIGN KEY ([idfsMonitoringSessionActionStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionType_R_1834]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionType_R_1834] FOREIGN KEY ([idfsMonitoringSessionActionType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_tlbFarm__idfFarm]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbFarm__idfFarm] FOREIGN KEY ([idfFarm]) REFERENCES [dbo].[tlbFarm] ([idfFarm]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_tlbMonitoringSession__idfMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbMonitoringSession__idfMonitoringSession] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_tlbSpecies__idfSpecies]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbSpecies__idfSpecies] FOREIGN KEY ([idfSpecies]) REFERENCES [dbo].[tlbSpecies] ([idfSpecies]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_trtBaseReference__idfsAnimalSex]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummary_trtBaseReference__idfsAnimalSex] FOREIGN KEY ([idfsAnimalSex]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummary_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummaryDiagnosis_tlbMonitoringSessionSummary__idfMonitoringSessionSummary]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_tlbMonitoringSessionSummary__idfMonitoringSessionSummary] FOREIGN KEY ([idfMonitoringSessionSummary]) REFERENCES [dbo].[tlbMonitoringSessionSummary] ([idfMonitoringSessionSummary]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummarySample_tlbMonitoringSessionSummary__idfMonitoringSessionSummary]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummarySample_tlbMonitoringSessionSummary__idfMonitoringSessionSummary] FOREIGN KEY ([idfMonitoringSessionSummary]) REFERENCES [dbo].[tlbMonitoringSessionSummary] ([idfMonitoringSessionSummary]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummarySample_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummarySample_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummarySample_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummarySample_trtSampleType__idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_tlbMonitoringSession__idfMonitoringSession_R_1750]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_tlbMonitoringSession__idfMonitoringSession_R_1750] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1757]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1757] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtSampleType__idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtSpeciesType__idfsSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtSpeciesType__idfsSpeciesType] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_tlbMaterial]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToMaterial_tlbMaterial] FOREIGN KEY ([idfMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseRef_idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseRef_idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseReference]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference] FOREIGN KEY ([idfsDisease]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbObservation_ffFormTemplate__idfsFormTemplate_R_1405]...';


GO
ALTER TABLE [dbo].[tlbObservation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbObservation_ffFormTemplate__idfsFormTemplate_R_1405] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbObservation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbObservation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbObservation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbObservation_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbObservation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbObservation_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_BaseRef_]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_BaseRef_] FOREIGN KEY ([OrganizationTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_tlbGeoLocationShared]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_tlbGeoLocationShared] FOREIGN KEY ([idfLocation]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_trtBaseReference__idfsOfficeAbbreviation_R_704]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_trtBaseReference__idfsOfficeAbbreviation_R_704] FOREIGN KEY ([idfsOfficeAbbreviation]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_trtBaseReference__idfsOfficeName_R_703]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_trtBaseReference__idfsOfficeName_R_703] FOREIGN KEY ([idfsOfficeName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_LegalFormID]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_trtBaseReference_LegalFormID] FOREIGN KEY ([LegalFormID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_MainFormOfActivityID]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_trtBaseReference_MainFormOfActivityID] FOREIGN KEY ([MainFormOfActivityID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_OwnershipFormID]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_trtBaseReference_OwnershipFormID] FOREIGN KEY ([OwnershipFormID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_tstSite__idfsSite_R_1030]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_tstSite__idfsSite_R_1030] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreak_BaseRef_OutbreakTypeID]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreak_BaseRef_OutbreakTypeID] FOREIGN KEY ([OutbreakTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreak_tlbGeoLocation__idfGeoLocation_R_1469]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreak_tlbGeoLocation__idfGeoLocation_R_1469] FOREIGN KEY ([idfGeoLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreak_trtBaseReference__idfsDiagnosisOrDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreak_trtBaseReference__idfsDiagnosisOrDiagnosisGroup] FOREIGN KEY ([idfsDiagnosisOrDiagnosisGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreak_trtBaseReference__idfsOutbreakStatus_R_1262]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreak_trtBaseReference__idfsOutbreakStatus_R_1262] FOREIGN KEY ([idfsOutbreakStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreak_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreak_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreak_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreak_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbHumanCase__idfHumanCase]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbHumanCase__idfHumanCase] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByOffice]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByOffice] FOREIGN KEY ([idfInvestigatedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByPerson]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByPerson] FOREIGN KEY ([idfInvestigatedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbObservation__idfObservation]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfObservation] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbVetCase__idfVetCase]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbVetCase__idfVetCase] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakCaseMonitoring_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakNote_BaseRef_UpdatePriorityID]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakNote_BaseRef_UpdatePriorityID] FOREIGN KEY ([UpdatePriorityID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakNote_tlbOutbreak__idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakNote_tlbOutbreak__idfOutbreak] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakNote_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakNote_tlbPerson__idfPerson] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakNote_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakNote_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_tlbMaterial__idfMaterial_R_1664]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_tlbMaterial__idfMaterial_R_1664] FOREIGN KEY ([idfMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_tlbOffice_idfTestedByOffice]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_tlbOffice_idfTestedByOffice] FOREIGN KEY ([idfTestedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_tlbPerson_idfTestedByPerson]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_tlbPerson_idfTestedByPerson] FOREIGN KEY ([idfTestedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference__idfsPensideTestCategory]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestCategory] FOREIGN KEY ([idfsPensideTestCategory]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference__idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestName] FOREIGN KEY ([idfsPensideTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference__idfsPensideTestResult_R_1573]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestResult_R_1573] FOREIGN KEY ([idfsPensideTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_trtDiagnosis_idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_trtDiagnosis_idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPerson_tlbDepartment__idfDepartment]...';


GO
ALTER TABLE [dbo].[tlbPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPerson_tlbDepartment__idfDepartment] FOREIGN KEY ([idfDepartment]) REFERENCES [dbo].[tlbDepartment] ([idfDepartment]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPerson_tlbEmployee__idfPerson_R_1498]...';


GO
ALTER TABLE [dbo].[tlbPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPerson_tlbEmployee__idfPerson_R_1498] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPerson_tlbOffice__idfInstitution_R_1509]...';


GO
ALTER TABLE [dbo].[tlbPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPerson_tlbOffice__idfInstitution_R_1509] FOREIGN KEY ([idfInstitution]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPerson_trtBaseReference__idfsStaffPosition_R_1511]...';


GO
ALTER TABLE [dbo].[tlbPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPerson_trtBaseReference__idfsStaffPosition_R_1511] FOREIGN KEY ([idfsStaffPosition]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPerson_trtBaseReference_PersonalIDTypeID]...';


GO
ALTER TABLE [dbo].[tlbPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPerson_trtBaseReference_PersonalIDTypeID] FOREIGN KEY ([PersonalIDTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPerson_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPerson_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPostalCode_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPostalCode_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPostalCode_gisSettlement__idfsSettlement_R_17]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPostalCode_gisSettlement__idfsSettlement_R_17] FOREIGN KEY ([idfsSettlement]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPostalCode_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPostalCode_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbReportForm_idfsReportFormType]...';


GO
ALTER TABLE [dbo].[tlbReportForm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbReportForm_idfsReportFormType] FOREIGN KEY ([idfsReportFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbReportForm_tlbOffice__idfEnteredByOffice]...';


GO
ALTER TABLE [dbo].[tlbReportForm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbReportForm_tlbOffice__idfEnteredByOffice] FOREIGN KEY ([idfEnteredByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbReportForm_tlbOffice__idfSentByOffice]...';


GO
ALTER TABLE [dbo].[tlbReportForm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbReportForm_tlbOffice__idfSentByOffice] FOREIGN KEY ([idfSentByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbReportForm_tlbPerson__idfEnteredByPerson]...';


GO
ALTER TABLE [dbo].[tlbReportForm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbReportForm_tlbPerson__idfEnteredByPerson] FOREIGN KEY ([idfEnteredByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbReportForm_tlbPerson__idfSentByPerson]...';


GO
ALTER TABLE [dbo].[tlbReportForm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbReportForm_tlbPerson__idfSentByPerson] FOREIGN KEY ([idfSentByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbReportForm_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbReportForm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbReportForm_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_OutbreakCaseStatus]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_OutbreakCaseStatus] FOREIGN KEY ([idfsOutbreakCaseStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_tlbHerd__idfHerd_R_1479]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_tlbHerd__idfHerd_R_1479] FOREIGN KEY ([idfHerd]) REFERENCES [dbo].[tlbHerd] ([idfHerd]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_tlbObservation__idfObservation_R_1474]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_tlbObservation__idfObservation_R_1474] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_tlbSpeciesActual]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_tlbSpeciesActual] FOREIGN KEY ([idfSpeciesActual]) REFERENCES [dbo].[tlbSpeciesActual] ([idfSpeciesActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_trtSpeciesType__idfsSpeciesType_R_1651]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_trtSpeciesType__idfsSpeciesType_R_1651] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpeciesActual_tlbHerdActual__idfHerdActual_R_1479]...';


GO
ALTER TABLE [dbo].[tlbSpeciesActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpeciesActual_tlbHerdActual__idfHerdActual_R_1479] FOREIGN KEY ([idfHerdActual]) REFERENCES [dbo].[tlbHerdActual] ([idfHerdActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpeciesActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbSpeciesActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpeciesActual_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpeciesActual_trtSpeciesType__idfsSpeciesType_R_1651]...';


GO
ALTER TABLE [dbo].[tlbSpeciesActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpeciesActual_trtSpeciesType__idfsSpeciesType_R_1651] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_gisBaseReference__idfsArea_R_1641]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_gisBaseReference__idfsArea_R_1641] FOREIGN KEY ([idfsArea]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference__idfsMainBaseReference_R_923]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsMainBaseReference_R_923] FOREIGN KEY ([idfsMainBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference__idfsStatisticAreaType_R_1273]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsStatisticAreaType_R_1273] FOREIGN KEY ([idfsStatisticAreaType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference__idfsStatisticPeriodType_R_1272]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsStatisticPeriodType_R_1272] FOREIGN KEY ([idfsStatisticPeriodType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference_idfsStatisticalAgeGroup]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_trtBaseReference_idfsStatisticalAgeGroup] FOREIGN KEY ([idfsStatisticalAgeGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_trtStatisticDataType__idfsStatisticDataType_R_921]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_trtStatisticDataType__idfsStatisticDataType_R_921] FOREIGN KEY ([idfsStatisticDataType]) REFERENCES [dbo].[trtStatisticDataType] ([idfsStatisticDataType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStreet_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbStreet] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStreet_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStreet_gisSettlement__idfsSettlement_R_16]...';


GO
ALTER TABLE [dbo].[tlbStreet] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStreet_gisSettlement__idfsSettlement_R_16] FOREIGN KEY ([idfsSettlement]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStreet_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbStreet] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStreet_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestAmendmentHistory_tlbOffice__idfAmendByOffice]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestAmendmentHistory_tlbOffice__idfAmendByOffice] FOREIGN KEY ([idfAmendByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestAmendmentHistory_tlbPerson__idfAmendByPerson]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestAmendmentHistory_tlbPerson__idfAmendByPerson] FOREIGN KEY ([idfAmendByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestAmendmentHistory_tlbTesting__idfTesting]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestAmendmentHistory_tlbTesting__idfTesting] FOREIGN KEY ([idfTesting]) REFERENCES [dbo].[tlbTesting] ([idfTesting]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestAmendmentHistory_trtBaseReference__idfsNewTestResult]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference__idfsNewTestResult] FOREIGN KEY ([idfsNewTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestAmendmentHistory_trtBaseReference__idfsOldTestResult]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference__idfsOldTestResult] FOREIGN KEY ([idfsOldTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestAmendmentHistory_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbBatchTest__idfBatchTest_R_1534]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbBatchTest__idfBatchTest_R_1534] FOREIGN KEY ([idfBatchTest]) REFERENCES [dbo].[tlbBatchTest] ([idfBatchTest]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbHumanCase]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbHumanCase] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbMaterial]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbMaterial] FOREIGN KEY ([idfMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbMonitoringSession] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfPerformedByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbOffice__idfPerformedByOffice] FOREIGN KEY ([idfPerformedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfResultEnteredByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbOffice__idfResultEnteredByOffice] FOREIGN KEY ([idfResultEnteredByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfTestedByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbOffice__idfTestedByOffice] FOREIGN KEY ([idfTestedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfValidatedByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbOffice__idfValidatedByOffice] FOREIGN KEY ([idfValidatedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbPerson__idfResultEnteredByPerson]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbPerson__idfResultEnteredByPerson] FOREIGN KEY ([idfResultEnteredByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbPerson__idfTestedByPerson]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbPerson__idfTestedByPerson] FOREIGN KEY ([idfTestedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbPerson__idfValidatedByPerson]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbPerson__idfValidatedByPerson] FOREIGN KEY ([idfValidatedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbVector]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbVector] FOREIGN KEY ([idfVector]) REFERENCES [dbo].[tlbVector] ([idfVector]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbVetCase]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbVetCase] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestCategory]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestCategory] FOREIGN KEY ([idfsTestCategory]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestName] FOREIGN KEY ([idfsTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestResult_R_1243]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestResult_R_1243] FOREIGN KEY ([idfsTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestStatus_R_1754]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestStatus_R_1754] FOREIGN KEY ([idfsTestStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtBaseReference_PreviousTestStatusID]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtBaseReference_PreviousTestStatusID] FOREIGN KEY ([PreviousTestStatusID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_tlbOffice__idfInterpretedByOffice_R_1550]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_tlbOffice__idfInterpretedByOffice_R_1550] FOREIGN KEY ([idfInterpretedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_tlbOffice__idfValidatedByOffice_R_1548]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_tlbOffice__idfValidatedByOffice_R_1548] FOREIGN KEY ([idfValidatedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_tlbPerson__idfInterpretedByPerson_R_1551]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_tlbPerson__idfInterpretedByPerson_R_1551] FOREIGN KEY ([idfInterpretedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_tlbPerson__idfValidatedByPerson_R_1549]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_tlbPerson__idfValidatedByPerson_R_1549] FOREIGN KEY ([idfValidatedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_tlbTesting__idfTesting_R_1546]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_tlbTesting__idfTesting_R_1546] FOREIGN KEY ([idfTesting]) REFERENCES [dbo].[tlbTesting] ([idfTesting]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_trtBaseReference__idfsInterpretedStatus_R_1552]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_trtBaseReference__idfsInterpretedStatus_R_1552] FOREIGN KEY ([idfsInterpretedStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_trtDiagnosis__idfsDiagnosis_R_1547]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_trtDiagnosis__idfsDiagnosis_R_1547] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOUT_tlbOffice__idfSendFromOffice_R_1516]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOUT_tlbOffice__idfSendFromOffice_R_1516] FOREIGN KEY ([idfSendFromOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOUT_tlbOffice__idfSendToOffice_R_1517]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOUT_tlbOffice__idfSendToOffice_R_1517] FOREIGN KEY ([idfSendToOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOUT_tlbPerson__idfSendByPerson_R_1518]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOUT_tlbPerson__idfSendByPerson_R_1518] FOREIGN KEY ([idfSendByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOUT_trtBaseReference__idfsTransferStatus_R_1671]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOUT_trtBaseReference__idfsTransferStatus_R_1671] FOREIGN KEY ([idfsTransferStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOUT_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOUT_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOUT_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOUT_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOutMaterial_tlbMaterial]...';


GO
ALTER TABLE [dbo].[tlbTransferOutMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOutMaterial_tlbMaterial] FOREIGN KEY ([idfMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOutMaterial_tlbTransferOUT]...';


GO
ALTER TABLE [dbo].[tlbTransferOutMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOutMaterial_tlbTransferOUT] FOREIGN KEY ([idfTransferOut]) REFERENCES [dbo].[tlbTransferOUT] ([idfTransferOut]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOutMaterial_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTransferOutMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOutMaterial_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVaccination_tlbSpecies__idfSpecies_R_1654]...';


GO
ALTER TABLE [dbo].[tlbVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVaccination_tlbSpecies__idfSpecies_R_1654] FOREIGN KEY ([idfSpecies]) REFERENCES [dbo].[tlbSpecies] ([idfSpecies]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVaccination_tlbVetCase__idfVetCase_R_1482]...';


GO
ALTER TABLE [dbo].[tlbVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVaccination_tlbVetCase__idfVetCase_R_1482] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVaccination_trtBaseReference__idfsVaccinationRoute_R_1302]...';


GO
ALTER TABLE [dbo].[tlbVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVaccination_trtBaseReference__idfsVaccinationRoute_R_1302] FOREIGN KEY ([idfsVaccinationRoute]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVaccination_trtBaseReference__idfsVaccinationType_R_1301]...';


GO
ALTER TABLE [dbo].[tlbVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVaccination_trtBaseReference__idfsVaccinationType_R_1301] FOREIGN KEY ([idfsVaccinationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVaccination_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVaccination_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVaccination_trtDiagnosis__idfsDiagnosis_R_983]...';


GO
ALTER TABLE [dbo].[tlbVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVaccination_trtDiagnosis__idfsDiagnosis_R_983] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbGeoLocation_idfLocation]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbGeoLocation_idfLocation] FOREIGN KEY ([idfLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbObservation_idfObservation]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbObservation_idfObservation] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbOffice_idfCollectedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbOffice_idfCollectedByOffice] FOREIGN KEY ([idfCollectedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbOffice_idfIdentifiedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbOffice_idfIdentifiedByOffice] FOREIGN KEY ([idfIdentifiedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbPerson_idfCollectedByPerson]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbPerson_idfCollectedByPerson] FOREIGN KEY ([idfCollectedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbPerson_idfIdentifiedByPerson]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbPerson_idfIdentifiedByPerson] FOREIGN KEY ([idfIdentifiedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbVector_idfHostVector]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbVector_idfHostVector] FOREIGN KEY ([idfHostVector]) REFERENCES [dbo].[tlbVector] ([idfVector]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbVectorSurveillanceSession_idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbVectorSurveillanceSession_idfVectorSurveillanceSession] FOREIGN KEY ([idfVectorSurveillanceSession]) REFERENCES [dbo].[tlbVectorSurveillanceSession] ([idfVectorSurveillanceSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference__idfsEctoparasitesCollected]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference__idfsEctoparasitesCollected] FOREIGN KEY ([idfsEctoparasitesCollected]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsBasisOfREcord]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_idfsBasisOfREcord] FOREIGN KEY ([idfsBasisOfRecord]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsCollectionMethod]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_idfsCollectionMethod] FOREIGN KEY ([idfsCollectionMethod]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsDayPeriod]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_idfsDayPeriod] FOREIGN KEY ([idfsDayPeriod]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsIdentificationMethod]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_idfsIdentificationMethod] FOREIGN KEY ([idfsIdentificationMethod]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsSex]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_idfsSex] FOREIGN KEY ([idfsSex]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsSurrounding]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_idfsSurrounding] FOREIGN KEY ([idfsSurrounding]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtVectorSubType_idfsVectorSubType]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtVectorSubType_idfsVectorSubType] FOREIGN KEY ([idfsVectorSubType]) REFERENCES [dbo].[trtVectorSubType] ([idfsVectorSubType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtVectorType_idfsVectorType] FOREIGN KEY ([idfsVectorType]) REFERENCES [dbo].[trtVectorType] ([idfsVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_tlbGeoLocation_idfLocation]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSession_tlbGeoLocation_idfLocation] FOREIGN KEY ([idfLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_tlbOutbreak_idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSession_tlbOutbreak_idfOutbreak] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSession_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_trtBaseReference_VectorSurveillanceStatus]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSession_trtBaseReference_VectorSurveillanceStatus] FOREIGN KEY ([idfsVectorSurveillanceStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSession_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_tlbGeoLocation__idfGeoLocation]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_tlbGeoLocation__idfGeoLocation] FOREIGN KEY ([idfGeoLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_tlbVectorSurveillanceSession__idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_tlbVectorSurveillanceSession__idfVectorSurveillanceSession] FOREIGN KEY ([idfVectorSurveillanceSession]) REFERENCES [dbo].[tlbVectorSurveillanceSession] ([idfVectorSurveillanceSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_trtVectorSubType__idfsVectorSubType]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_trtVectorSubType__idfsVectorSubType] FOREIGN KEY ([idfsVectorSubType]) REFERENCES [dbo].[trtVectorSubType] ([idfsVectorSubType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummaryDiagnosis_tlbVectorSurveillanceSessionSummary__idfsVSSessionSummary]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_tlbVectorSurveillanceSessionSummary__idfsVSSessionSummary] FOREIGN KEY ([idfsVSSessionSummary]) REFERENCES [dbo].[tlbVectorSurveillanceSessionSummary] ([idfsVSSessionSummary]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbFarm]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbFarm] FOREIGN KEY ([idfFarm]) REFERENCES [dbo].[tlbFarm] ([idfFarm]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbMonitoringSession__idfParentMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbMonitoringSession__idfParentMonitoringSession] FOREIGN KEY ([idfParentMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbObservation__idfObservation_R_1447]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbObservation__idfObservation_R_1447] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbOffice__idfInvestigatedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbOffice__idfInvestigatedByOffice] FOREIGN KEY ([idfInvestigatedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbOffice__idfReportedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbOffice__idfReportedByOffice] FOREIGN KEY ([idfReportedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbOffice_idfReceivedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbOffice_idfReceivedByOffice] FOREIGN KEY ([idfReceivedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbOutbreak__idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbOutbreak__idfOutbreak] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbPerson__idfPersonEnteredBy_R_1507]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonEnteredBy_R_1507] FOREIGN KEY ([idfPersonEnteredBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbPerson__idfPersonInvestigatedBy_R_1506]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonInvestigatedBy_R_1506] FOREIGN KEY ([idfPersonInvestigatedBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbPerson__idfPersonReportedBy_R_1508]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonReportedBy_R_1508] FOREIGN KEY ([idfPersonReportedBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbPerson_idfReceivedByPerson]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbPerson_idfReceivedByPerson] FOREIGN KEY ([idfReceivedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseClassification]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseClassification] FOREIGN KEY ([idfsCaseClassification]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseProgressStatus]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseProgressStatus] FOREIGN KEY ([idfsCaseProgressStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseReportType]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseReportType] FOREIGN KEY ([idfsCaseReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseType]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseType] FOREIGN KEY ([idfsCaseType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsYNTestsConducted]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsYNTestsConducted] FOREIGN KEY ([idfsYNTestsConducted]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsFinalDiagnosis_R_1438]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsFinalDiagnosis_R_1438] FOREIGN KEY ([idfsFinalDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsShowDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsShowDiagnosis] FOREIGN KEY ([idfsShowDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis_R_1435]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis_R_1435] FOREIGN KEY ([idfsTentativeDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis1_R_1436]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis1_R_1436] FOREIGN KEY ([idfsTentativeDiagnosis1]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis2_R_1437]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis2_R_1437] FOREIGN KEY ([idfsTentativeDiagnosis2]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tstSite__idfsSite_R_1588]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tstSite__idfsSite_R_1588] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseDisplayDiagnosis_tlbVetCase_idfVetCase]...';


GO
ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_tlbVetCase_idfVetCase] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseLog_tlbPerson__idfPerson_R_1501]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseLog_tlbPerson__idfPerson_R_1501] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseLog_tlbVetCase__idfVetCase_R_1489]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseLog_tlbVetCase__idfVetCase_R_1489] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseLog_trtBaseReference__idfsCaseLogStatus_R_1490]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseLog_trtBaseReference__idfsCaseLogStatus_R_1490] FOREIGN KEY ([idfsCaseLogStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseLog_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbxSiteDocumentMap_LkupEIDSSMenu]...';


GO
ALTER TABLE [dbo].[tlbxSiteDocumentMap] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbxSiteDocumentMap_LkupEIDSSMenu] FOREIGN KEY ([EIDSSMenuId]) REFERENCES [dbo].[LkupEIDSSMenu] ([EIDSSMenuID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtAttributeType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtAttributeType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtAttributeType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReference_trtReferenceType__idfsReferenceType_R_381]...';


GO
ALTER TABLE [dbo].[trtBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReference_trtReferenceType__idfsReferenceType_R_381] FOREIGN KEY ([idfsReferenceType]) REFERENCES [dbo].[trtReferenceType] ([idfsReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceAttribute_trtAttributeType__idfAttributeType]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceAttribute_trtAttributeType__idfAttributeType] FOREIGN KEY ([idfAttributeType]) REFERENCES [dbo].[trtAttributeType] ([idfAttributeType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceAttribute_trtBaseReference__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceAttribute_trtBaseReference__idfsBaseReference] FOREIGN KEY ([idfsBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceAttribute_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceAttribute_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceAttributeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceAttributeToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceAttributeToCP_trtBaseReferenceAttribute__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceAttributeToCP_trtBaseReferenceAttribute__idfsBaseReference] FOREIGN KEY ([idfBaseReferenceAttribute]) REFERENCES [dbo].[trtBaseReferenceAttribute] ([idfBaseReferenceAttribute]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceAttributeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceAttributeToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceToCP_trtBaseReference__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceToCP_trtBaseReference__idfsBaseReference] FOREIGN KEY ([idfsBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBssAggregateColumns_tauColumn__idfColumn]...';


GO
ALTER TABLE [dbo].[trtBssAggregateColumns] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBssAggregateColumns_tauColumn__idfColumn] FOREIGN KEY ([idfColumn]) REFERENCES [dbo].[tauColumn] ([idfColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBssAggregateColumns_trtBaseReference__idfsBssAggregateColumn]...';


GO
ALTER TABLE [dbo].[trtBssAggregateColumns] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBssAggregateColumns_trtBaseReference__idfsBssAggregateColumn] FOREIGN KEY ([idfsBssAggregateColumn]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBssAggregateColumns_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBssAggregateColumns] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBssAggregateColumns_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCaseClassification_trtBaseReference__idfsCaseClassification]...';


GO
ALTER TABLE [dbo].[trtCaseClassification] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCaseClassification_trtBaseReference__idfsCaseClassification] FOREIGN KEY ([idfsCaseClassification]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCaseClassification_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtCaseClassification] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCaseClassification_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCollectionMethodForVectorType_trtBaseReference_idfsCollectionMethod]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCollectionMethodForVectorType_trtBaseReference_idfsCollectionMethod] FOREIGN KEY ([idfsCollectionMethod]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCollectionMethodForVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCollectionMethodForVectorType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCollectionMethodForVectorType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCollectionMethodForVectorType_trtVectorType_idfsVectorType] FOREIGN KEY ([idfsVectorType]) REFERENCES [dbo].[trtVectorType] ([idfsVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCollectionMethodForVectorTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCollectionMethodForVectorTypeToCP_trtCollectionMethodForVectorType_idfCollectionMethodForVectorType]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_trtCollectionMethodForVectorType_idfCollectionMethodForVectorType] FOREIGN KEY ([idfCollectionMethodForVectorType]) REFERENCES [dbo].[trtCollectionMethodForVectorType] ([idfCollectionMethodForVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCollectionMethodForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDerivativeForSampleType_trtBaseReference__idfsDerivativeType_R_1863]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDerivativeForSampleType_trtBaseReference__idfsDerivativeType_R_1863] FOREIGN KEY ([idfsDerivativeType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDerivativeForSampleType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDerivativeForSampleType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDerivativeForSampleType_trtSampleType__idfsSampleType_R_1862]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDerivativeForSampleType_trtSampleType__idfsSampleType_R_1862] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDerivativeForSampleTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDerivativeForSampleTypeToCP_trtDerivativeForSampleType__idfDerivativeForSampleType]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_trtDerivativeForSampleType__idfDerivativeForSampleType] FOREIGN KEY ([idfDerivativeForSampleType]) REFERENCES [dbo].[trtDerivativeForSampleType] ([idfDerivativeForSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDerivativeForSampleTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosis_trtBaseReference__idfsDiagnosis_R_624]...';


GO
ALTER TABLE [dbo].[trtDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosis_trtBaseReference__idfsDiagnosis_R_624] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosis_trtBaseReference__idfsUsingType_R_1600]...';


GO
ALTER TABLE [dbo].[trtDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosis_trtBaseReference__idfsUsingType_R_1600] FOREIGN KEY ([idfsUsingType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroup_trtBaseReference_idfsAgeType]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_idfsAgeType] FOREIGN KEY ([idfsAgeType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroup_trtBaseReference_idfsDiagnosisAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_idfsDiagnosisAgeGroup] FOREIGN KEY ([idfsDiagnosisAgeGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosis_idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosis_idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup] FOREIGN KEY ([idfsDiagnosisAgeGroup]) REFERENCES [dbo].[trtDiagnosisAgeGroup] ([idfsDiagnosisAgeGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosisToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstPersonalDataGroup_idfDiagnosisAgeGroupToDiagnosis]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstPersonalDataGroup_idfDiagnosisAgeGroupToDiagnosis] FOREIGN KEY ([idfDiagnosisAgeGroupToDiagnosis]) REFERENCES [dbo].[trtDiagnosisAgeGroupToDiagnosis] ([idfDiagnosisAgeGroupToDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_idfsStatisticalAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_idfsStatisticalAgeGroup] FOREIGN KEY ([idfsStatisticalAgeGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup] FOREIGN KEY ([idfsDiagnosisAgeGroup]) REFERENCES [dbo].[trtDiagnosisAgeGroup] ([idfsDiagnosisAgeGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtDiagnosisAgeGroupToStatisticalAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtDiagnosisAgeGroupToStatisticalAgeGroup] FOREIGN KEY ([idfDiagnosisAgeGroupToStatisticalAgeGroup]) REFERENCES [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] ([idfDiagnosisAgeGroupToStatisticalAgeGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroup_trtBaseReference__idfsDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtBaseReference__idfsDiagnosisGroup] FOREIGN KEY ([idfsDiagnosisGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroup_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroupToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroupToCP_trtDiagnosisToDiagnosisGroup_idfDiagnosisToDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_trtDiagnosisToDiagnosisGroup_idfDiagnosisToDiagnosisGroup] FOREIGN KEY ([idfDiagnosisToDiagnosisGroup]) REFERENCES [dbo].[trtDiagnosisToDiagnosisGroup] ([idfDiagnosisToDiagnosisGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroupToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtBaseReference__idfsCustomReportType_R_1871]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtBaseReference__idfsCustomReportType_R_1871] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtDiagnosis__idfsDiagnosis_R_1873]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtDiagnosis__idfsDiagnosis_R_1873] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtReportDiagnosisGroup__idfsReportDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtReportDiagnosisGroup__idfsReportDiagnosisGroup] FOREIGN KEY ([idfsReportDiagnosisGroup]) REFERENCES [dbo].[trtReportDiagnosisGroup] ([idfsReportDiagnosisGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtEventType_trtBaseReference__idfsEventSubscription]...';


GO
ALTER TABLE [dbo].[trtEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtEventType_trtBaseReference__idfsEventSubscription] FOREIGN KEY ([idfsEventSubscription]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtEventType_trtBaseReference__idfsEventTypeID_R_663]...';


GO
ALTER TABLE [dbo].[trtEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtEventType_trtBaseReference__idfsEventTypeID_R_663] FOREIGN KEY ([idfsEventTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtEventType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtEventType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtFFObjectForCustomReport_trtBaseReference]...';


GO
ALTER TABLE [dbo].[trtFFObjectForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtFFObjectForCustomReport_trtBaseReference] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtFFObjectForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtFFObjectForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtFFObjectForCustomReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtFFObjectToDiagnosisForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtFFObjectToDiagnosisForCustomReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtFFObjectToDiagnosisForCustomReport_trtDiagnosis]...';


GO
ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtFFObjectToDiagnosisForCustomReport_trtDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtFFParameterToDiagnosisForCustomReport_trtFFParameterForCustomReport]...';


GO
ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtFFParameterToDiagnosisForCustomReport_trtFFParameterForCustomReport] FOREIGN KEY ([idfFFObjectForCustomReport]) REFERENCES [dbo].[trtFFObjectForCustomReport] ([idfFFObjectForCustomReport]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtGISBaseReferenceAttribute_gisBaseReference__idfsGISBaseReference]...';


GO
ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_trtGISBaseReferenceAttribute_gisBaseReference__idfsGISBaseReference] FOREIGN KEY ([idfsGISBaseReference]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtGISBaseReferenceAttribute_trtAttributeType__idfAttributeType]...';


GO
ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_trtGISBaseReferenceAttribute_trtAttributeType__idfAttributeType] FOREIGN KEY ([idfAttributeType]) REFERENCES [dbo].[trtAttributeType] ([idfAttributeType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtGISBaseReferenceAttribute_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_trtGISBaseReferenceAttribute_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtGISObjectForCustomReport_gisBaseReference__idfsGISBaseReference]...';


GO
ALTER TABLE [dbo].[trtGISObjectForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtGISObjectForCustomReport_gisBaseReference__idfsGISBaseReference] FOREIGN KEY ([idfsGISBaseReference]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtGISObjectForCustomReport_trtBaseReference__idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtGISObjectForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtGISObjectForCustomReport_trtBaseReference__idfsCustomReportType] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtGISObjectForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtGISObjectForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtGISObjectForCustomReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtHACodeList_trtBaseReference__idfsCodeName_R_674]...';


GO
ALTER TABLE [dbo].[trtHACodeList] WITH NOCHECK
    ADD CONSTRAINT [FK_trtHACodeList_trtBaseReference__idfsCodeName_R_674] FOREIGN KEY ([idfsCodeName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtHACodeList_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtHACodeList] WITH NOCHECK
    ADD CONSTRAINT [FK_trtHACodeList_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtLanguageToCP_trtBaseReference__idfsLanguage_idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtLanguageToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtLanguageToCP_trtBaseReference__idfsLanguage_idfsBaseReference] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtLanguageToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtLanguageToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtLanguageToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtLanguageToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtLanguageToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtLanguageToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMaterialForDisease_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMaterialForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMaterialForDisease_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMaterialForDisease_trtDiagnosis__idfsDiagnosis_R_891]...';


GO
ALTER TABLE [dbo].[trtMaterialForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMaterialForDisease_trtDiagnosis__idfsDiagnosis_R_891] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMaterialForDisease_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[trtMaterialForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMaterialForDisease_trtSampleType__idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMaterialForDiseaseToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMaterialForDiseaseToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMaterialForDiseaseToCP_trtMaterialForDisease__idfMaterialForDisease_R_1876]...';


GO
ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMaterialForDiseaseToCP_trtMaterialForDisease__idfMaterialForDisease_R_1876] FOREIGN KEY ([idfMaterialForDisease]) REFERENCES [dbo].[trtMaterialForDisease] ([idfMaterialForDisease]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMaterialForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMaterialForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference__idfsEditor]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsEditor] FOREIGN KEY ([idfsEditor]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference__idfsMatrixColumn]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsMatrixColumn] FOREIGN KEY ([idfsMatrixColumn]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference__idfsParameterType]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsParameterType] FOREIGN KEY ([idfsParameterType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixColumn_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixColumn_trtMatrixType__idfsMatrixType]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixColumn_trtMatrixType__idfsMatrixType] FOREIGN KEY ([idfsMatrixType]) REFERENCES [dbo].[trtMatrixType] ([idfsMatrixType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixType_trtBaseReference__idfsFormType]...';


GO
ALTER TABLE [dbo].[trtMatrixType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixType_trtBaseReference__idfsFormType] FOREIGN KEY ([idfsFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixType_trtBaseReference__idfsMatrixType]...';


GO
ALTER TABLE [dbo].[trtMatrixType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixType_trtBaseReference__idfsMatrixType] FOREIGN KEY ([idfsMatrixType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMatrixType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectOperation_R_1620]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectOperation_R_1620] FOREIGN KEY ([idfsObjectOperation]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectType_R_1619]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectType_R_1619] FOREIGN KEY ([idfsObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectOperation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference__idfsParentObjectType_R_1621]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsParentObjectType_R_1621] FOREIGN KEY ([idfsParentObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference__idfsRelatedObjectType_R_1622]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsRelatedObjectType_R_1622] FOREIGN KEY ([idfsRelatedObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference__idfsStatus_R_1623]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsStatus_R_1623] FOREIGN KEY ([idfsStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestForDisease_trtBaseReference__idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestForDisease_trtBaseReference__idfsPensideTestName] FOREIGN KEY ([idfsPensideTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestForDisease_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestForDisease_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestForDisease_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestForDisease_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestForDiseaseToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestForDiseaseToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestForDiseaseToCP_trtPensideTestForDisease__idfPensideTestForDisease]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestForDiseaseToCP_trtPensideTestForDisease__idfPensideTestForDisease] FOREIGN KEY ([idfPensideTestForDisease]) REFERENCES [dbo].[trtPensideTestForDisease] ([idfPensideTestForDisease]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeForVectorType_trtBaseReference_idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtBaseReference_idfsPensideTestName] FOREIGN KEY ([idfsPensideTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeForVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeForVectorType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtVectorType_idfsVectorType] FOREIGN KEY ([idfsVectorType]) REFERENCES [dbo].[trtVectorType] ([idfsVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeForVectorTypeToCP_trtPensideTestTypeForVectorType_idfPensideTestTypeForVectorType]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_trtPensideTestTypeForVectorType_idfPensideTestTypeForVectorType] FOREIGN KEY ([idfPensideTestTypeForVectorType]) REFERENCES [dbo].[trtPensideTestTypeForVectorType] ([idfPensideTestTypeForVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestName] FOREIGN KEY ([idfsPensideTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestResult_R_1663]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestResult_R_1663] FOREIGN KEY ([idfsPensideTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeToTestResult_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeToTestResultToCP_trtPensideTestTypeToTestResult__idfsPensideTestName_idfsPensideTestResult]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_trtPensideTestTypeToTestResult__idfsPensideTestName_idfsPensideTestResult] FOREIGN KEY ([idfsPensideTestName], [idfsPensideTestResult]) REFERENCES [dbo].[trtPensideTestTypeToTestResult] ([idfsPensideTestName], [idfsPensideTestResult]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtProphilacticAction_trtBaseReference__idfsProphilacticAction_R_1109]...';


GO
ALTER TABLE [dbo].[trtProphilacticAction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtProphilacticAction_trtBaseReference__idfsProphilacticAction_R_1109] FOREIGN KEY ([idfsProphilacticAction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtProphilacticAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtProphilacticAction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtProphilacticAction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReferenceType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtReferenceType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReferenceType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportDiagnosisGroup_trtBaseReference__idfsReportDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtReportDiagnosisGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportDiagnosisGroup_trtBaseReference__idfsReportDiagnosisGroup] FOREIGN KEY ([idfsReportDiagnosisGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportDiagnosisGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtReportDiagnosisGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportDiagnosisGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsCustomReportType_R_1867]...';


GO
ALTER TABLE [dbo].[trtReportRows] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsCustomReportType_R_1867] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsDiagnosisOrReportDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtReportRows] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsDiagnosisOrReportDiagnosisGroup] FOREIGN KEY ([idfsDiagnosisOrReportDiagnosisGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsICDReportAdditionalText]...';


GO
ALTER TABLE [dbo].[trtReportRows] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsICDReportAdditionalText] FOREIGN KEY ([idfsICDReportAdditionalText]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsReportAdditionalText_R_1895]...';


GO
ALTER TABLE [dbo].[trtReportRows] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsReportAdditionalText_R_1895] FOREIGN KEY ([idfsReportAdditionalText]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportRows_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtReportRows] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportRows_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResource_idfsResourceType]...';


GO
ALTER TABLE [dbo].[trtResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResource_idfsResourceType] FOREIGN KEY ([idfsResourceType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResource_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResource_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSet_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSet] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSet_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetHierarchy_idfsResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetHierarchy] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetHierarchy_idfsResourceSet] FOREIGN KEY ([idfsResourceSet]) REFERENCES [dbo].[trtResourceSet] ([idfsResourceSet]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetHierarchy_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetHierarchy] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetHierarchy_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetToResource_idfsResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetToResource_idfsResourceSet] FOREIGN KEY ([idfsResourceSet]) REFERENCES [dbo].[trtResourceSet] ([idfsResourceSet]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetToResource_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetToResource_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetToResource_trtResource]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetToResource_trtResource] FOREIGN KEY ([idfsResource]) REFERENCES [dbo].[trtResource] ([idfsResource]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetTranslation__idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetTranslation__idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetTranslation_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetTranslation_trtResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetTranslation_trtResourceSet] FOREIGN KEY ([idfsResourceSet]) REFERENCES [dbo].[trtResourceSet] ([idfsResourceSet]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceTranslation_idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceTranslation_idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceTranslation_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceTranslation_trtResource]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceTranslation_trtResource] FOREIGN KEY ([idfsResource]) REFERENCES [dbo].[trtResource] ([idfsResource]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleType_trtBaseReference__idfsSampleType_R_1866]...';


GO
ALTER TABLE [dbo].[trtSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleType_trtBaseReference__idfsSampleType_R_1866] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleTypeForVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleTypeForVectorType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleTypeForVectorType_trtSampleType_idfsSampleType]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleTypeForVectorType_trtSampleType_idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleTypeForVectorType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleTypeForVectorType_trtVectorType_idfsVectorType] FOREIGN KEY ([idfsVectorType]) REFERENCES [dbo].[trtVectorType] ([idfsVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleTypeForVectorTypeToCP_trtSampleTypeForVectorType_idfSampleTypeForVectorType]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_trtSampleTypeForVectorType_idfSampleTypeForVectorType] FOREIGN KEY ([idfSampleTypeForVectorType]) REFERENCES [dbo].[trtSampleTypeForVectorType] ([idfSampleTypeForVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSanitaryAction_trtBaseReference__idfsSanitaryAction_R_1110]...';


GO
ALTER TABLE [dbo].[trtSanitaryAction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSanitaryAction_trtBaseReference__idfsSanitaryAction_R_1110] FOREIGN KEY ([idfsSanitaryAction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSanitaryAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSanitaryAction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSanitaryAction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsCustomReportType] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsReportAdditionalText]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsReportAdditionalText] FOREIGN KEY ([idfsReportAdditionalText]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsSpeciesOrSpeciesGroup]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsSpeciesOrSpeciesGroup] FOREIGN KEY ([idfsSpeciesOrSpeciesGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesGroup_trtBaseReference_idfsSpeciesGroup]...';


GO
ALTER TABLE [dbo].[trtSpeciesGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesGroup_trtBaseReference_idfsSpeciesGroup] FOREIGN KEY ([idfsSpeciesGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtBaseReference_idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtBaseReference_idfsCustomReportType] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtSpeciesGroup_idfsSpeciesGroup]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtSpeciesGroup_idfsSpeciesGroup] FOREIGN KEY ([idfsSpeciesGroup]) REFERENCES [dbo].[trtSpeciesGroup] ([idfsSpeciesGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtSpeciesType_idfsSpeciesType]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtSpeciesType_idfsSpeciesType] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesType_trtBaseReference__idfsSpeciesType_R_1650]...';


GO
ALTER TABLE [dbo].[trtSpeciesType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesType_trtBaseReference__idfsSpeciesType_R_1650] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAge_trtBaseReference__idfsAnimalAge_R_1599]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtBaseReference__idfsAnimalAge_R_1599] FOREIGN KEY ([idfsAnimalAge]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAge_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAge_trtSpeciesType__idfsSpeciesType_R_1598]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtSpeciesType__idfsSpeciesType_R_1598] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAgeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAgeToCP_trtSpeciesTypeToAnimalAge__idfSpeciesTypeToAnimalAge_R_1882]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_trtSpeciesTypeToAnimalAge__idfSpeciesTypeToAnimalAge_R_1882] FOREIGN KEY ([idfSpeciesTypeToAnimalAge]) REFERENCES [dbo].[trtSpeciesTypeToAnimalAge] ([idfSpeciesTypeToAnimalAge]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAgeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference__idfsStatisticAreaType_R_1591]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticAreaType_R_1591] FOREIGN KEY ([idfsStatisticAreaType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference__idfsStatisticDataType_R_496]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticDataType_R_496] FOREIGN KEY ([idfsStatisticDataType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference__idfsStatisticPeriodType_R_1592]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticPeriodType_R_1592] FOREIGN KEY ([idfsStatisticPeriodType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStatisticDataType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStatisticDataType_trtReferenceType__idfsReferenceType_R_933]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStatisticDataType_trtReferenceType__idfsReferenceType_R_933] FOREIGN KEY ([idfsReferenceType]) REFERENCES [dbo].[trtReferenceType] ([idfsReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStringNameTranslation_trtBaseReference__idfsBaseReference_R_385]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStringNameTranslation_trtBaseReference__idfsBaseReference_R_385] FOREIGN KEY ([idfsBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStringNameTranslation_trtBaseReference__idfsLanguage_R_1584]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStringNameTranslation_trtBaseReference__idfsLanguage_R_1584] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStringNameTranslation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStringNameTranslationToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslationToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStringNameTranslationToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStringNameTranslationToCP_trtStringNameTranslation__idfsBaseReference_idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslationToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStringNameTranslationToCP_trtStringNameTranslation__idfsBaseReference_idfsLanguage] FOREIGN KEY ([idfsBaseReference], [idfsLanguage]) REFERENCES [dbo].[trtStringNameTranslation] ([idfsBaseReference], [idfsLanguage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStringNameTranslationToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslationToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStringNameTranslationToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSystemFunction_trtBaseReference__idfsObjectType_R_1581]...';


GO
ALTER TABLE [dbo].[trtSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSystemFunction_trtBaseReference__idfsObjectType_R_1581] FOREIGN KEY ([idfsObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSystemFunction_trtBaseReference__idfsSystemFunction_R_1038]...';


GO
ALTER TABLE [dbo].[trtSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSystemFunction_trtBaseReference__idfsSystemFunction_R_1038] FOREIGN KEY ([idfsSystemFunction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSystemFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSystemFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSystemFunctionOperation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSystemFunctionOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSystemFunctionOperation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDisease_trtBaseReference__idfsTestCategory]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDisease_trtBaseReference__idfsTestCategory] FOREIGN KEY ([idfsTestCategory]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDisease_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDisease_trtBaseReference__idfsTestName] FOREIGN KEY ([idfsTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDisease_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDisease_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDisease_trtDiagnosis__idfsDiagnosis_R_892]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDisease_trtDiagnosis__idfsDiagnosis_R_892] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDisease_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDisease_trtSampleType__idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDiseaseToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDiseaseToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDiseaseToCP_trtTestForDisease__idfTestForDisease_R_1884]...';


GO
ALTER TABLE [dbo].[trtTestForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDiseaseToCP_trtTestForDisease__idfTestForDisease_R_1884] FOREIGN KEY ([idfTestForDisease]) REFERENCES [dbo].[trtTestForDisease] ([idfTestForDisease]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtTestForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeForCustomReport_trtBaseReference__idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtTestTypeForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference__idfsCustomReportType] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeForCustomReport_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[trtTestTypeForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference__idfsTestName] FOREIGN KEY ([idfsTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestTypeForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeToTestResult_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResult] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference__idfsTestName] FOREIGN KEY ([idfsTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeToTestResult_trtBaseReference__idfsTestResult_R_1596]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResult] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference__idfsTestResult_R_1596] FOREIGN KEY ([idfsTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeToTestResult_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResult] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeToTestResultToCountry_trtTestTypeToTestResult__idfsTestName_idfsTestResult]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeToTestResultToCountry_trtTestTypeToTestResult__idfsTestName_idfsTestResult] FOREIGN KEY ([idfsTestName], [idfsTestResult]) REFERENCES [dbo].[trtTestTypeToTestResult] ([idfsTestName], [idfsTestResult]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtVectorSubType_trtBaseReference_idfsVectorSubType]...';


GO
ALTER TABLE [dbo].[trtVectorSubType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtVectorSubType_trtBaseReference_idfsVectorSubType] FOREIGN KEY ([idfsVectorSubType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtVectorSubType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtVectorSubType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtVectorSubType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtVectorSubType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtVectorSubType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtVectorSubType_trtVectorType_idfsVectorType] FOREIGN KEY ([idfsVectorType]) REFERENCES [dbo].[trtVectorType] ([idfsVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtVectorType_trtBaseReference__idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtVectorType_trtBaseReference__idfsVectorType] FOREIGN KEY ([idfsVectorType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtVectorType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941] FOREIGN KEY ([idfsAggrCaseType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612] FOREIGN KEY ([idfsStatisticAreaType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613] FOREIGN KEY ([idfsStatisticPeriodType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstBarcodeLayout_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstBarcodeLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tstBarcodeLayout_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstBarcodeLayout_tstNextNumbers__idfsNumberName_R_1677]...';


GO
ALTER TABLE [dbo].[tstBarcodeLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tstBarcodeLayout_tstNextNumbers__idfsNumberName_R_1677] FOREIGN KEY ([idfsNumberName]) REFERENCES [dbo].[tstNextNumbers] ([idfsNumberName]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstCheckConstraints_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCheckConstraints] WITH NOCHECK
    ADD CONSTRAINT [FK_tstCheckConstraints_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstCheckConstraints_tstCheckTables__idfCheckTable]...';


GO
ALTER TABLE [dbo].[tstCheckConstraints] WITH NOCHECK
    ADD CONSTRAINT [FK_tstCheckConstraints_tstCheckTables__idfCheckTable] FOREIGN KEY ([idfCheckTable]) REFERENCES [dbo].[tstCheckTables] ([idfCheckTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstCheckTables_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCheckTables] WITH NOCHECK
    ADD CONSTRAINT [FK_tstCheckTables_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstCustomizationPackage_gisLocation_idfsCountry]...';


GO
ALTER TABLE [dbo].[tstCustomizationPackage] WITH NOCHECK
    ADD CONSTRAINT [FK_tstCustomizationPackage_gisLocation_idfsCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstCustomizationPackage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCustomizationPackage] WITH NOCHECK
    ADD CONSTRAINT [FK_tstCustomizationPackage_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstCustomizationPackageSettings_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCustomizationPackageSettings] WITH NOCHECK
    ADD CONSTRAINT [FK_tstCustomizationPackageSettings_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_gisRayon__idfsRayon] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_gisRegion__idfsRegion]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_gisRegion__idfsRegion] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_trtEventType__idfsEventTypeID_R_664]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_trtEventType__idfsEventTypeID_R_664] FOREIGN KEY ([idfsEventTypeID]) REFERENCES [dbo].[trtEventType] ([idfsEventTypeID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_tstSite__idfsLoginSite]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_tstSite__idfsLoginSite] FOREIGN KEY ([idfsLoginSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_gisRayon__idfsRayon] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_gisRegion__idfsRegion]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_gisRegion__idfsRegion] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_trtEventType__idfsEventTypeID]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_trtEventType__idfsEventTypeID] FOREIGN KEY ([idfsEventTypeID]) REFERENCES [dbo].[trtEventType] ([idfsEventTypeID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_tstSite__idfsLoginSite]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_tstSite__idfsLoginSite] FOREIGN KEY ([idfsLoginSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventClient_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEventClient] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventClient_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventSubscription_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEventSubscription] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventSubscription_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventSubscription_trtEventType__idfsEventTypeID_R_676]...';


GO
ALTER TABLE [dbo].[tstEventSubscription] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventSubscription_trtEventType__idfsEventTypeID_R_676] FOREIGN KEY ([idfsEventTypeID]) REFERENCES [dbo].[trtEventType] ([idfsEventTypeID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstGeoLocationFormat_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tstGeoLocationFormat] WITH NOCHECK
    ADD CONSTRAINT [FK_tstGeoLocationFormat_gisLocation_idfsLocation] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstGeoLocationFormat_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstGeoLocationFormat] WITH NOCHECK
    ADD CONSTRAINT [FK_tstGeoLocationFormat_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstGlobalSiteOptions_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstGlobalSiteOptions] WITH NOCHECK
    ADD CONSTRAINT [FK_tstGlobalSiteOptions_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstGlobalSiteOptions_tstSite__idfsSite_R_1753]...';


GO
ALTER TABLE [dbo].[tstGlobalSiteOptions] WITH NOCHECK
    ADD CONSTRAINT [FK_tstGlobalSiteOptions_tstSite__idfsSite_R_1753] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstInvalidObjects_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstInvalidObjects] WITH NOCHECK
    ADD CONSTRAINT [FK_tstInvalidObjects_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstInvisibleFields_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstInvisibleFields] WITH NOCHECK
    ADD CONSTRAINT [FK_tstInvisibleFields_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstInvisibleFieldsToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstInvisibleFieldsToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstInvisibleFieldsToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstInvisibleFieldsToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstInvisibleFieldsToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstInvisibleFieldsToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstInvisibleFieldsToCP_tstInvisibleFields_idfInvisibleField]...';


GO
ALTER TABLE [dbo].[tstInvisibleFieldsToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstInvisibleFieldsToCP_tstInvisibleFields_idfInvisibleField] FOREIGN KEY ([idfInvisibleField]) REFERENCES [dbo].[tstInvisibleFields] ([idfInvisibleField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalClient_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalClient] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalClient_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalConnectionContext_tauDataAuditEvent__idfDataAuditEvent_R_1043]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalConnectionContext_tauDataAuditEvent__idfDataAuditEvent_R_1043] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalConnectionContext_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalConnectionContext_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalConnectionContext_tstEvent__idfEventID_R_1044]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalConnectionContext_tstEvent__idfEventID_R_1044] FOREIGN KEY ([idfEventID]) REFERENCES [dbo].[tstEvent] ([idfEventID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalConnectionContext_tstSite__idfsSite_R_1858]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalConnectionContext_tstSite__idfsSite_R_1858] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalConnectionContext_tstUserTable__idfUserID_R_1042]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalConnectionContext_tstUserTable__idfUserID_R_1042] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_tlbMaterial__idfMaterial]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tlbMaterial__idfMaterial] FOREIGN KEY ([idfMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_tlbTesting__idfTesting]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tlbTesting__idfTesting] FOREIGN KEY ([idfTesting]) REFERENCES [dbo].[tlbTesting] ([idfTesting]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalSamplesTestsPreferences_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_tstUserTable__idfUserID]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tstUserTable__idfUserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalSiteOptions_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalSiteOptions] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalSiteOptions_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstMandatoryFields_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstMandatoryFields] WITH NOCHECK
    ADD CONSTRAINT [FK_tstMandatoryFields_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstMandatoryFieldsToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstMandatoryFieldsToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstMandatoryFieldsToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstMandatoryFieldsToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstMandatoryFieldsToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstMandatoryFieldsToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstMandatoryFieldsToCP_tstMandatoryFields_idfMandatoryField]...';


GO
ALTER TABLE [dbo].[tstMandatoryFieldsToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstMandatoryFieldsToCP_tstMandatoryFields_idfMandatoryField] FOREIGN KEY ([idfMandatoryField]) REFERENCES [dbo].[tstMandatoryFields] ([idfMandatoryField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNewID_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNewID] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNewID_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNextNumbers_trtBaseReference__idfsNumberName_R_930]...';


GO
ALTER TABLE [dbo].[tstNextNumbers] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNextNumbers_trtBaseReference__idfsNumberName_R_930] FOREIGN KEY ([idfsNumberName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNextNumbers_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNextNumbers] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNextNumbers_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_trtBaseReference__idfsNotificationObjectType_R_1307]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_trtBaseReference__idfsNotificationObjectType_R_1307] FOREIGN KEY ([idfsNotificationObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_trtBaseReference__idfsNotificationType_R_1306]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_trtBaseReference__idfsNotificationType_R_1306] FOREIGN KEY ([idfsNotificationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_trtBaseReference__idfsTargetSiteType_R_1304]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_trtBaseReference__idfsTargetSiteType_R_1304] FOREIGN KEY ([idfsTargetSiteType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_tstSite__idfsSite_R_1035]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_tstSite__idfsSite_R_1035] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_tstSite__idfsTargetSite_R_688]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_tstSite__idfsTargetSite_R_688] FOREIGN KEY ([idfsTargetSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_tstUserTable__idfTargetUserID_R_720]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_tstUserTable__idfTargetUserID_R_720] FOREIGN KEY ([idfTargetUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_tstUserTable__idfUserID_R_793]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_tstUserTable__idfUserID_R_793] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationActivity_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotificationActivity] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationActivity_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference__idfsNotificationObjectType]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsNotificationObjectType] FOREIGN KEY ([idfsNotificationObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference__idfsNotificationType]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsNotificationType] FOREIGN KEY ([idfsNotificationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference__idfsTargetSiteType]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsTargetSiteType] FOREIGN KEY ([idfsTargetSiteType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_tstSite__idfsTargetSite]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_tstSite__idfsTargetSite] FOREIGN KEY ([idfsTargetSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_tstUserTable__idfTargetUserID]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_tstUserTable__idfTargetUserID] FOREIGN KEY ([idfTargetUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_tstUserTable__idfUserID]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_tstUserTable__idfUserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationStatus_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotificationStatus] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationStatus_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstObjectAccess_tlbEmployee__idfActor_R_1618]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_tstObjectAccess_tlbEmployee__idfActor_R_1618] FOREIGN KEY ([idfActor]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstObjectAccess_trtBaseReference__idfsObjectOperation_R_1586]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_tstObjectAccess_trtBaseReference__idfsObjectOperation_R_1586] FOREIGN KEY ([idfsObjectOperation]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstObjectAccess_trtBaseReference__idfsObjectType_R_1580]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_tstObjectAccess_trtBaseReference__idfsObjectType_R_1580] FOREIGN KEY ([idfsObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstObjectAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_tstObjectAccess_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstObjectAccess_tstSite__idfsOnSite_R_951]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_tstObjectAccess_tstSite__idfsOnSite_R_951] FOREIGN KEY ([idfsOnSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstPersonalDataGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tstPersonalDataGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstPersonalDataGroupToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstPersonalDataGroupToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstPersonalDataGroupToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstPersonalDataGroupToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstPersonalDataGroupToCP_tstPersonalDataGroup_idfPersonalDataGroup]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstPersonalDataGroupToCP_tstPersonalDataGroup_idfPersonalDataGroup] FOREIGN KEY ([idfPersonalDataGroup]) REFERENCES [dbo].[tstPersonalDataGroup] ([idfPersonalDataGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstRayonToReportSite_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[tstRayonToReportSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstRayonToReportSite_gisRayon__idfsRayon] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstRayonToReportSite_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstRayonToReportSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstRayonToReportSite_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstRayonToReportSite_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstRayonToReportSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstRayonToReportSite_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_tauDataAuditEvent__idfDataAuditEvent_R_1731]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_tauDataAuditEvent__idfDataAuditEvent_R_1731] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference__idfsAction_R_1727]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsAction_R_1727] FOREIGN KEY ([idfsAction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference__idfsProcessType_R_1729]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsProcessType_R_1729] FOREIGN KEY ([idfsProcessType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference__idfsResult_R_1728]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsResult_R_1728] FOREIGN KEY ([idfsResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_tstSite]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_tstSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_tstUserTable__idfUserID_R_1726]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_tstUserTable__idfUserID_R_1726] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfiguration_trtBaseReference__idfsSecurityLevel_R_1759]...';


GO
ALTER TABLE [dbo].[tstSecurityConfiguration] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfiguration_trtBaseReference__idfsSecurityLevel_R_1759] FOREIGN KEY ([idfsSecurityLevel]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfiguration_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityConfiguration] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfiguration_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfiguration_tstSecurityConfiguration__idfParentSecurityConfiguration_R_1761]...';


GO
ALTER TABLE [dbo].[tstSecurityConfiguration] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfiguration_tstSecurityConfiguration__idfParentSecurityConfiguration_R_1761] FOREIGN KEY ([idfParentSecurityConfiguration]) REFERENCES [dbo].[tstSecurityConfiguration] ([idfSecurityConfiguration]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabet_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabet] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfigurationAlphabet_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabetParticipation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfiguration__idfSecurityConfiguration_R_1763]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfiguration__idfSecurityConfiguration_R_1763] FOREIGN KEY ([idfSecurityConfiguration]) REFERENCES [dbo].[tstSecurityConfiguration] ([idfSecurityConfiguration]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfigurationAlphabet__idfsSecurityConfigurationAlphabet_R_1762]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfigurationAlphabet__idfsSecurityConfigurationAlphabet_R_1762] FOREIGN KEY ([idfsSecurityConfigurationAlphabet]) REFERENCES [dbo].[tstSecurityConfigurationAlphabet] ([idfsSecurityConfigurationAlphabet]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSite_tlbOffice__idfOffice_R_386]...';


GO
ALTER TABLE [dbo].[tstSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSite_tlbOffice__idfOffice_R_386] FOREIGN KEY ([idfOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSite_trtBaseReference__idfsSiteType_R_1305]...';


GO
ALTER TABLE [dbo].[tstSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSite_trtBaseReference__idfsSiteType_R_1305] FOREIGN KEY ([idfsSiteType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSite_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSite_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSite_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSite_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSite_tstSite__idfsParentSite]...';


GO
ALTER TABLE [dbo].[tstSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSite_tstSite__idfsParentSite] FOREIGN KEY ([idfsParentSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTable_tlbPerson_idfPerson]...';


GO
ALTER TABLE [dbo].[tstUserTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTable_tlbPerson_idfPerson] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTable_trtBaseReference_idfsBaseReference]...';


GO
ALTER TABLE [dbo].[tstUserTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTable_trtBaseReference_idfsBaseReference] FOREIGN KEY ([PreferredLanguageID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTable_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTable_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tstUserTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTable_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTableLocal_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTableLocal] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTableLocal_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTableLocal_tstUserTable_idfUserID]...';


GO
ALTER TABLE [dbo].[tstUserTableLocal] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTableLocal_tstUserTable_idfUserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTableOldPassword_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTableOldPassword] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTableOldPassword_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTableOldPassword_tstUserTable__idfUserID_R_1730]...';


GO
ALTER TABLE [dbo].[tstUserTableOldPassword] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTableOldPassword_tstUserTable__idfUserID_R_1730] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTicket_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTicket] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTicket_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTicket_tstUserTable__idfUserID]...';


GO
ALTER TABLE [dbo].[tstUserTicket] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTicket_tstUserTable__idfUserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstVersionCompare_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstVersionCompare] WITH NOCHECK
    ADD CONSTRAINT [FK_tstVersionCompare_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_updRunningApps_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[updRunningApps] WITH NOCHECK
    ADD CONSTRAINT [FK_updRunningApps_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_updUpdateBlock_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[updUpdateBlock] WITH NOCHECK
    ADD CONSTRAINT [FK_updUpdateBlock_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserAccess_BaseRef_AccessPermission]...';


GO
ALTER TABLE [dbo].[UserAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccess_BaseRef_AccessPermission] FOREIGN KEY ([AccessPermissionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserAccess_BaseRef_SysFunctionID]...';


GO
ALTER TABLE [dbo].[UserAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccess_BaseRef_SysFunctionID] FOREIGN KEY ([SystemFunctionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserAccess_BaseReference_OperaionID]...';


GO
ALTER TABLE [dbo].[UserAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccess_BaseReference_OperaionID] FOREIGN KEY ([SystemFunctionOperationID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserAccess_tlbEmployee_EmpID]...';


GO
ALTER TABLE [dbo].[UserAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccess_tlbEmployee_EmpID] FOREIGN KEY ([UserEmployeeID]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[UserAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccess_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserAccess_tstSite_OnSite]...';


GO
ALTER TABLE [dbo].[UserAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccess_tstSite_OnSite] FOREIGN KEY ([OnSite]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserPreference_BAseRef_ModuleConstantID]...';


GO
ALTER TABLE [dbo].[UserPreference] WITH NOCHECK
    ADD CONSTRAINT [FK_UserPreference_BAseRef_ModuleConstantID] FOREIGN KEY ([ModuleConstantID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserPreference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[UserPreference] WITH NOCHECK
    ADD CONSTRAINT [FK_UserPreference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserPreference_tstUserTable_UserID]...';


GO
ALTER TABLE [dbo].[UserPreference] WITH NOCHECK
    ADD CONSTRAINT [FK_UserPreference_tstUserTable_UserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_VetDiseaseReportRelationship_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_VetDiseaseReportRelationship_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_VetDiseaseReportReln_BaseRef_RelTypeID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_VetDiseaseReportReln_BaseRef_RelTypeID] FOREIGN KEY ([RelationshipTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_VetDiseaseReportReln_tlbVetCase_RelateToVetDiseaseReportID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_VetDiseaseReportReln_tlbVetCase_RelateToVetDiseaseReportID] FOREIGN KEY ([RelatedToVetDiseaseReportID]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_VetDiseaseReportReln_tlbVetCase_VetDiseaseReportID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_VetDiseaseReportReln_tlbVetCase_VetDiseaseReportID] FOREIGN KEY ([VetDiseaseReportID]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutBreak_idfsLocation_gisLocation]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutBreak_idfsLocation_gisLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Altering Trigger [dbo].[TR_AccessRule_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_AccessRule_A_Update]
    ON [dbo].[AccessRule];


GO
PRINT N'Altering Trigger [dbo].[TR_AccessRule_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_AccessRule_I_Delete]
    ON [dbo].[AccessRule];


GO
PRINT N'Altering Trigger [dbo].[TR_AppObjectSysFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_AppObjectSysFunction_A_Update]
    ON [dbo].[AppObjectSysFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_AppObjectSysFunction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_AppObjectSysFunction_I_Delete]
    ON [dbo].[AppObjectSysFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_AppSessionLog_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_AppSessionLog_A_Update]
    ON [dbo].[AppSessionLog];


GO
PRINT N'Altering Trigger [dbo].[TR_ArchiveSetting_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ArchiveSetting_A_Update]
    ON [dbo].[ArchiveSetting];


GO
PRINT N'Altering Trigger [dbo].[TR_ArchiveSetting_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ArchiveSetting_I_Delete]
    ON [dbo].[ArchiveSetting];


GO
PRINT N'Altering Trigger [dbo].[TR_DiagnosisGroupToGender_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_DiagnosisGroupToGender_A_Update]
    ON [dbo].[DiagnosisGroupToGender];


GO
PRINT N'Altering Trigger [dbo].[TR_DiagnosisGroupToGender_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_DiagnosisGroupToGender_I_Delete]
    ON [dbo].[DiagnosisGroupToGender];


GO
PRINT N'Altering Trigger [dbo].[TR_dotNetAppenderLog_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_dotNetAppenderLog_A_Update]
    ON [dbo].[dotNetAppenderLog];


GO
PRINT N'Altering Trigger [dbo].[TR_EmployeeToInstitution_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_EmployeeToInstitution_A_Update]
    ON [dbo].[EmployeeToInstitution];


GO
PRINT N'Altering Trigger [dbo].[TR_EmployeeToInstitution_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_EmployeeToInstitution_I_Delete]
    ON [dbo].[EmployeeToInstitution];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDecorElement_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDecorElement_A_Update]
    ON [dbo].[ffDecorElement];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDecorElement_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDecorElement_I_Delete]
    ON [dbo].[ffDecorElement];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDecorElementLine_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDecorElementLine_A_Update]
    ON [dbo].[ffDecorElementLine];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDecorElementLine_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDecorElementLine_I_Delete]
    ON [dbo].[ffDecorElementLine];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDecorElementText_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDecorElementText_A_Update]
    ON [dbo].[ffDecorElementText];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDecorElementText_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDecorElementText_I_Delete]
    ON [dbo].[ffDecorElementText];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDeterminantType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDeterminantType_A_Update]
    ON [dbo].[ffDeterminantType];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDeterminantValue_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDeterminantValue_A_Update]
    ON [dbo].[ffDeterminantValue];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDeterminantValue_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDeterminantValue_I_Delete]
    ON [dbo].[ffDeterminantValue];


GO
PRINT N'Altering Trigger [dbo].[TR_ffFormTemplate_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffFormTemplate_A_Update]
    ON [dbo].[ffFormTemplate];


GO
PRINT N'Altering Trigger [dbo].[TR_ffFormTemplate_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffFormTemplate_I_Delete]
    ON [dbo].[ffFormTemplate];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameter_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameter_A_Update]
    ON [dbo].[ffParameter];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameter_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameter_I_Delete]
    ON [dbo].[ffParameter];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterDesignOption_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterDesignOption_A_Update]
    ON [dbo].[ffParameterDesignOption];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterDesignOption_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterDesignOption_I_Delete]
    ON [dbo].[ffParameterDesignOption];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterFixedPresetValue_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterFixedPresetValue_A_Update]
    ON [dbo].[ffParameterFixedPresetValue];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterFixedPresetValue_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterFixedPresetValue_I_Delete]
    ON [dbo].[ffParameterFixedPresetValue];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterForAction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterForAction_A_Update]
    ON [dbo].[ffParameterForAction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterForAction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterForAction_I_Delete]
    ON [dbo].[ffParameterForAction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterForFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterForFunction_A_Update]
    ON [dbo].[ffParameterForFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterForFunction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterForFunction_I_Delete]
    ON [dbo].[ffParameterForFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterForTemplate_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterForTemplate_A_Update]
    ON [dbo].[ffParameterForTemplate];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterForTemplate_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterForTemplate_I_Delete]
    ON [dbo].[ffParameterForTemplate];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterType_A_Update]
    ON [dbo].[ffParameterType];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterType_I_Delete]
    ON [dbo].[ffParameterType];


GO
PRINT N'Altering Trigger [dbo].[TR_ffRule_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffRule_A_Update]
    ON [dbo].[ffRule];


GO
PRINT N'Altering Trigger [dbo].[TR_ffRule_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffRule_I_Delete]
    ON [dbo].[ffRule];


GO
PRINT N'Altering Trigger [dbo].[TR_ffRuleConstant_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffRuleConstant_A_Update]
    ON [dbo].[ffRuleConstant];


GO
PRINT N'Altering Trigger [dbo].[TR_ffRuleConstant_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffRuleConstant_I_Delete]
    ON [dbo].[ffRuleConstant];


GO
PRINT N'Altering Trigger [dbo].[TR_ffRuleFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffRuleFunction_A_Update]
    ON [dbo].[ffRuleFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSection_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSection_A_Update]
    ON [dbo].[ffSection];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSection_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSection_I_Delete]
    ON [dbo].[ffSection];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSectionDesignOption_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSectionDesignOption_A_Update]
    ON [dbo].[ffSectionDesignOption];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSectionDesignOption_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSectionDesignOption_I_Delete]
    ON [dbo].[ffSectionDesignOption];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSectionForAction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSectionForAction_A_Update]
    ON [dbo].[ffSectionForAction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSectionForAction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSectionForAction_I_Delete]
    ON [dbo].[ffSectionForAction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSectionForTemplate_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSectionForTemplate_A_Update]
    ON [dbo].[ffSectionForTemplate];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSectionForTemplate_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSectionForTemplate_I_Delete]
    ON [dbo].[ffSectionForTemplate];


GO
PRINT N'Altering Trigger [dbo].[TR_gisBaseReference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisBaseReference_A_Update]
    ON [dbo].[gisBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_gisBaseReference_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisBaseReference_I_Delete]
    ON [dbo].[gisBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_gisCountry_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisCountry_A_Update]
    ON [dbo].[gisCountry];


GO
PRINT N'Altering Trigger [dbo].[TR_gisCountry_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisCountry_I_Delete]
    ON [dbo].[gisCountry];


GO
PRINT N'Altering Trigger [dbo].[TR_gisDistrictSubdistrict_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisDistrictSubdistrict_A_Update]
    ON [dbo].[gisDistrictSubdistrict];


GO
PRINT N'Altering Trigger [dbo].[TR_gisLegendSymbol_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisLegendSymbol_A_Update]
    ON [dbo].[gisLegendSymbol];


GO
PRINT N'Altering Trigger [dbo].[TR_gisLocation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisLocation_I_Delete]
    ON [dbo].[gisLocation];


GO
PRINT N'Altering Trigger [dbo].[TR_gisLocation_UpdateDenormalizedHierarchy]...';


GO
ENABLE TRIGGER [dbo].[TR_gisLocation_UpdateDenormalizedHierarchy]
    ON [dbo].[gisLocation];


GO
PRINT N'Altering Trigger [dbo].[TR_gisMetadata_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisMetadata_A_Update]
    ON [dbo].[gisMetadata];


GO
PRINT N'Altering Trigger [dbo].[TR_gisNewID_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisNewID_A_Update]
    ON [dbo].[gisNewID];


GO
PRINT N'Altering Trigger [dbo].[TR_gisOtherBaseReference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisOtherBaseReference_A_Update]
    ON [dbo].[gisOtherBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_gisOtherStringNameTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisOtherStringNameTranslation_A_Update]
    ON [dbo].[gisOtherStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_gisRayon_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisRayon_A_Update]
    ON [dbo].[gisRayon];


GO
PRINT N'Altering Trigger [dbo].[TR_gisRayon_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisRayon_I_Delete]
    ON [dbo].[gisRayon];


GO
PRINT N'Altering Trigger [dbo].[TR_gisReferenceType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisReferenceType_A_Update]
    ON [dbo].[gisReferenceType];


GO
PRINT N'Altering Trigger [dbo].[TR_gisReferenceType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisReferenceType_I_Delete]
    ON [dbo].[gisReferenceType];


GO
PRINT N'Altering Trigger [dbo].[TR_gisRegion_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisRegion_A_Update]
    ON [dbo].[gisRegion];


GO
PRINT N'Altering Trigger [dbo].[TR_gisRegion_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisRegion_I_Delete]
    ON [dbo].[gisRegion];


GO
PRINT N'Altering Trigger [dbo].[TR_gisSettlement_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisSettlement_A_Update]
    ON [dbo].[gisSettlement];


GO
PRINT N'Altering Trigger [dbo].[TR_gisSettlement_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisSettlement_I_Delete]
    ON [dbo].[gisSettlement];


GO
PRINT N'Altering Trigger [dbo].[TR_gisStringNameTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisStringNameTranslation_A_Update]
    ON [dbo].[gisStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_gisStringNameTranslation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisStringNameTranslation_I_Delete]
    ON [dbo].[gisStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_gisUserLayer_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisUserLayer_A_Update]
    ON [dbo].[gisUserLayer];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBCountry_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBCountry_A_Update]
    ON [dbo].[gisWKBCountry];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBDistrict_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBDistrict_A_Update]
    ON [dbo].[gisWKBDistrict];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBDistrictReady_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBDistrictReady_A_Update]
    ON [dbo].[gisWKBDistrictReady];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBEarthRoad_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBEarthRoad_A_Update]
    ON [dbo].[gisWKBEarthRoad];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBForest_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBForest_A_Update]
    ON [dbo].[gisWKBForest];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBHighway_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBHighway_A_Update]
    ON [dbo].[gisWKBHighway];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBInlandWater_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBInlandWater_A_Update]
    ON [dbo].[gisWKBInlandWater];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBLake_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBLake_A_Update]
    ON [dbo].[gisWKBLake];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBLandUse_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBLandUse_A_Update]
    ON [dbo].[gisWKBLanduse];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBMainRiver_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBMainRiver_A_Update]
    ON [dbo].[gisWKBMainRiver];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBMajorRoad_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBMajorRoad_A_Update]
    ON [dbo].[gisWKBMajorRoad];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBPath_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBPath_A_Update]
    ON [dbo].[gisWKBPath];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRailroad_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRailroad_A_Update]
    ON [dbo].[gisWKBRailroad];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRayon_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRayon_A_Update]
    ON [dbo].[gisWKBRayon];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRayonReady_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRayonReady_A_Update]
    ON [dbo].[gisWKBRayonReady];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRegion_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRegion_A_Update]
    ON [dbo].[gisWKBRegion];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRegionReady_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRegionReady_A_Update]
    ON [dbo].[gisWKBRegionReady];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRiver_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRiver_A_Update]
    ON [dbo].[gisWKBRiver];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRiverPolygon_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRiverPolygon_A_Update]
    ON [dbo].[gisWKBRiverPolygon];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBSea_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBSea_A_Update]
    ON [dbo].[gisWKBSea];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBSettlement_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBSettlement_A_Update]
    ON [dbo].[gisWKBSettlement];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBSettlementReady_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBSettlementReady_A_Update]
    ON [dbo].[gisWKBSettlementReady];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBSmallRiver_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBSmallRiver_A_Update]
    ON [dbo].[gisWKBSmallRiver];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanActualAddlInfo_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanActualAddlInfo_A_Update]
    ON [dbo].[HumanActualAddlInfo];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanActualAddlInfo_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanActualAddlInfo_I_Delete]
    ON [dbo].[HumanActualAddlInfo];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanAddlInfo_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanAddlInfo_A_Update]
    ON [dbo].[HumanAddlInfo];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanAddlInfo_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanAddlInfo_I_Delete]
    ON [dbo].[HumanAddlInfo];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanDiseaseReportRelationship_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanDiseaseReportRelationship_A_Update]
    ON [dbo].[HumanDiseaseReportRelationship];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanDiseaseReportRelationship_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanDiseaseReportRelationship_I_Delete]
    ON [dbo].[HumanDiseaseReportRelationship];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanDiseaseReportVaccination_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanDiseaseReportVaccination_A_Update]
    ON [dbo].[HumanDiseaseReportVaccination];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanDiseaseReportVaccination_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanDiseaseReportVaccination_I_Delete]
    ON [dbo].[HumanDiseaseReportVaccination];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupConfigParm_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupConfigParm_A_Update]
    ON [dbo].[LkupConfigParm];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupConfigParm_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupConfigParm_I_Delete]
    ON [dbo].[LkupConfigParm];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupEIDSSAppObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupEIDSSAppObject_A_Update]
    ON [dbo].[LkupEIDSSAppObject];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupEIDSSAppObject_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupEIDSSAppObject_I_Delete]
    ON [dbo].[LkupEIDSSAppObject];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupEIDSSMenu_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupEIDSSMenu_A_Update]
    ON [dbo].[LkupEIDSSMenu];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupEIDSSMenu_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupEIDSSMenu_I_Delete]
    ON [dbo].[LkupEIDSSMenu];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupEIDSSMenuToSystemFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupEIDSSMenuToSystemFunction_A_Update]
    ON [dbo].[LkupEIDSSMenuToSystemFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupEIDSSMenuToSystemFunction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupEIDSSMenuToSystemFunction_I_Delete]
    ON [dbo].[LkupEIDSSMenuToSystemFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_LKUPNextKey_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LKUPNextKey_A_Update]
    ON [dbo].[LKUPNextKey];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupNextKey_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupNextKey_I_Delete]
    ON [dbo].[LKUPNextKey];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupRoleDashboardObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupRoleDashboardObject_A_Update]
    ON [dbo].[LkupRoleDashboardObject];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupRoleDashboardObject_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupRoleDashboardObject_I_Delete]
    ON [dbo].[LkupRoleDashboardObject];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupRoleMenuAccess_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupRoleMenuAccess_A_Update]
    ON [dbo].[LkupRoleMenuAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupRoleMenuAccess_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupRoleMenuAccess_I_Delete]
    ON [dbo].[LkupRoleMenuAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupRoleSystemFunctionAccess_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupRoleSystemFunctionAccess_A_Update]
    ON [dbo].[LkupRoleSystemFunctionAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupRoleSystemFunctionAccess_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupRoleSystemFunctionAccess_I_Delete]
    ON [dbo].[LkupRoleSystemFunctionAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupSystemFunctionToOperation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupSystemFunctionToOperation_A_Update]
    ON [dbo].[LkupSystemFunctionToOperation];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupSystemFunctionToOperation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupSystemFunctionToOperation_I_Delete]
    ON [dbo].[LkupSystemFunctionToOperation];


GO
PRINT N'Altering Trigger [dbo].[TR_locBaseReference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_locBaseReference_A_Update]
    ON [dbo].[locBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_locStringNameTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_locStringNameTranslation_A_Update]
    ON [dbo].[locStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_MonitoringSessionToSampleType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_MonitoringSessionToSampleType_A_Update]
    ON [dbo].[MonitoringSessionToSampleType];


GO
PRINT N'Altering Trigger [dbo].[TR_MonitoringSessionToSampleType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_MonitoringSessionToSampleType_I_Delete]
    ON [dbo].[MonitoringSessionToSampleType];


GO
PRINT N'Altering Trigger [dbo].[TR_OutbreakCaseContact_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_OutbreakCaseContact_A_Update]
    ON [dbo].[OutbreakCaseContact];


GO
PRINT N'Altering Trigger [dbo].[TR_OutbreakCaseContact_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_OutbreakCaseContact_I_Delete]
    ON [dbo].[OutbreakCaseContact];


GO
PRINT N'Altering Trigger [dbo].[TR_OutbreakCaseReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_OutbreakCaseReport_A_Update]
    ON [dbo].[OutbreakCaseReport];


GO
PRINT N'Altering Trigger [dbo].[TR_OutbreakCaseReport_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_OutbreakCaseReport_I_Delete]
    ON [dbo].[OutbreakCaseReport];


GO
PRINT N'Altering Trigger [dbo].[TR_OutbreakSpeciesParameter_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_OutbreakSpeciesParameter_A_Update]
    ON [dbo].[OutbreakSpeciesParameter];


GO
PRINT N'Altering Trigger [dbo].[TR_OutbreakSpeciesParameter_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_OutbreakSpeciesParameter_I_Delete]
    ON [dbo].[OutbreakSpeciesParameter];


GO
PRINT N'Altering Trigger [dbo].[TR_SecurityPolicyConfiguration_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_SecurityPolicyConfiguration_A_Update]
    ON [dbo].[SecurityPolicyConfiguration];


GO
PRINT N'Altering Trigger [dbo].[TR_SecurityPolicyConfiguration_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_SecurityPolicyConfiguration_I_Delete]
    ON [dbo].[SecurityPolicyConfiguration];


GO
PRINT N'Altering Trigger [dbo].[TR_SiteToSiteAccess_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_SiteToSiteAccess_A_Update]
    ON [dbo].[SiteToSiteAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_SiteToSiteAccess_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_SiteToSiteAccess_I_Delete]
    ON [dbo].[SiteToSiteAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_SystemPreference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_SystemPreference_A_Update]
    ON [dbo].[SystemPreference];


GO
PRINT N'Altering Trigger [dbo].[TR_SystemPreference_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_SystemPreference_I_Delete]
    ON [dbo].[SystemPreference];


GO
PRINT N'Altering Trigger [dbo].[TR_tasAggregateFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasAggregateFunction_A_Update]
    ON [dbo].[tasAggregateFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_tasFieldSourceForTable_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasFieldSourceForTable_A_Update]
    ON [dbo].[tasFieldSourceForTable];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglLayout_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglLayout_A_Update]
    ON [dbo].[tasglLayout];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglLayoutFolder_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglLayoutFolder_A_Update]
    ON [dbo].[tasglLayoutFolder];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglLayoutSearchField_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglLayoutSearchField_A_Update]
    ON [dbo].[tasglLayoutSearchField];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglLayoutToMapImage_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglLayoutToMapImage_A_Update]
    ON [dbo].[tasglLayoutToMapImage];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglMapImage_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglMapImage_A_Update]
    ON [dbo].[tasglMapImage];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglQuery_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglQuery_A_Update]
    ON [dbo].[tasglQuery];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglQueryConditionGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglQueryConditionGroup_A_Update]
    ON [dbo].[tasglQueryConditionGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglQuerySearchField_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglQuerySearchField_A_Update]
    ON [dbo].[tasglQuerySearchField];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglQuerySearchFieldCondition_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglQuerySearchFieldCondition_A_Update]
    ON [dbo].[tasglQuerySearchFieldCondition];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglQuerySearchObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglQuerySearchObject_A_Update]
    ON [dbo].[tasglQuerySearchObject];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglView_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglView_A_Update]
    ON [dbo].[tasglView];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglViewBand_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglViewBand_A_Update]
    ON [dbo].[tasglViewBand];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglViewColumn_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglViewColumn_A_Update]
    ON [dbo].[tasglViewColumn];


GO
PRINT N'Altering Trigger [dbo].[TR_tasLayout_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasLayout_A_Update]
    ON [dbo].[tasLayout];


GO
PRINT N'Altering Trigger [dbo].[TR_tasLayoutFolder_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasLayoutFolder_A_Update]
    ON [dbo].[tasLayoutFolder];


GO
PRINT N'Altering Trigger [dbo].[TR_tasLayoutSearchField_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasLayoutSearchField_A_Update]
    ON [dbo].[tasLayoutSearchField];


GO
PRINT N'Altering Trigger [dbo].[TR_tasLayoutToMapImage_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasLayoutToMapImage_A_Update]
    ON [dbo].[tasLayoutToMapImage];


GO
PRINT N'Altering Trigger [dbo].[TR_tasMainTableForObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasMainTableForObject_A_Update]
    ON [dbo].[tasMainTableForObject];


GO
PRINT N'Altering Trigger [dbo].[TR_tasMapImage_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasMapImage_A_Update]
    ON [dbo].[tasMapImage];


GO
PRINT N'Altering Trigger [dbo].[TR_tasQuery_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasQuery_A_Update]
    ON [dbo].[tasQuery];


GO
PRINT N'Altering Trigger [dbo].[TR_tasQueryConditionGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasQueryConditionGroup_A_Update]
    ON [dbo].[tasQueryConditionGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tasQuerySearchField_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasQuerySearchField_A_Update]
    ON [dbo].[tasQuerySearchField];


GO
PRINT N'Altering Trigger [dbo].[TR_tasQuerySearchFieldCondition_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasQuerySearchFieldCondition_A_Update]
    ON [dbo].[tasQuerySearchFieldCondition];


GO
PRINT N'Altering Trigger [dbo].[TR_tasQuerySearchObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasQuerySearchObject_A_Update]
    ON [dbo].[tasQuerySearchObject];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchField_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchField_A_Update]
    ON [dbo].[tasSearchField];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchField_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchField_I_Delete]
    ON [dbo].[tasSearchField];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchFieldsWithRelatedValues_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchFieldsWithRelatedValues_A_Update]
    ON [dbo].[tasSearchFieldsWithRelatedValues];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchFieldToFFParameter_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchFieldToFFParameter_A_Update]
    ON [dbo].[tasSearchFieldToFFParameter];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchFieldToPersonalDataGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchFieldToPersonalDataGroup_A_Update]
    ON [dbo].[tasSearchFieldToPersonalDataGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchObject_A_Update]
    ON [dbo].[tasSearchObject];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchObject_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchObject_I_Delete]
    ON [dbo].[tasSearchObject];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchObjectToSearchObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchObjectToSearchObject_A_Update]
    ON [dbo].[tasSearchObjectToSearchObject];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchObjectToSystemFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchObjectToSystemFunction_A_Update]
    ON [dbo].[tasSearchObjectToSystemFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchTable_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchTable_A_Update]
    ON [dbo].[tasSearchTable];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchTableJoinRule_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchTableJoinRule_A_Update]
    ON [dbo].[tasSearchTableJoinRule];


GO
PRINT N'Altering Trigger [dbo].[TR_tasView_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasView_A_Update]
    ON [dbo].[tasView];


GO
PRINT N'Altering Trigger [dbo].[TR_tasViewBand_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasViewBand_A_Update]
    ON [dbo].[tasViewBand];


GO
PRINT N'Altering Trigger [dbo].[TR_tasViewColumn_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasViewColumn_A_Update]
    ON [dbo].[tasViewColumn];


GO
PRINT N'Altering Trigger [dbo].[TR_tauDataAuditEvent_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tauDataAuditEvent_I_Delete]
    ON [dbo].[tauDataAuditEvent];


GO
PRINT N'Altering Trigger [dbo].[TR_tdeDataExport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tdeDataExport_A_Update]
    ON [dbo].[tdeDataExport];


GO
PRINT N'Altering Trigger [dbo].[TR_tdeDataExportDetail_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tdeDataExportDetail_A_Update]
    ON [dbo].[tdeDataExportDetail];


GO
PRINT N'Altering Trigger [dbo].[TR_tdeDataExportDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tdeDataExportDiagnosis_A_Update]
    ON [dbo].[tdeDataExportDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tdeDataExportFFReference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tdeDataExportFFReference_A_Update]
    ON [dbo].[tdeDataExportFFReference];


GO
PRINT N'Altering Trigger [dbo].[TR_tdeDataExportProblem_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tdeDataExportProblem_A_Update]
    ON [dbo].[tdeDataExportProblem];


GO
PRINT N'Altering Trigger [dbo].[TR_tflAggrCaseFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflAggrCaseFiltered_A_Update]
    ON [dbo].[tflAggrCaseFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_A_Update]
    ON [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflBasicSyndromicSurveillanceFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflBasicSyndromicSurveillanceFiltered_A_Update]
    ON [dbo].[tflBasicSyndromicSurveillanceFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflBatchTestFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflBatchTestFiltered_A_Update]
    ON [dbo].[tflBatchTestFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflDataAuditEventFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflDataAuditEventFiltered_A_Update]
    ON [dbo].[tflDataAuditEventFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflFarmFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflFarmFiltered_A_Update]
    ON [dbo].[tflFarmFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflGeoLocationFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflGeoLocationFiltered_A_Update]
    ON [dbo].[tflGeoLocationFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflHumanCaseFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflHumanCaseFiltered_A_Update]
    ON [dbo].[tflHumanCaseFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflHumanFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflHumanFiltered_A_Update]
    ON [dbo].[tflHumanFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflMonitoringSessionFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflMonitoringSessionFiltered_A_Update]
    ON [dbo].[tflMonitoringSessionFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflNotificationFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflNotificationFiltered_A_Update]
    ON [dbo].[tflNotificationFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflObservationFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflObservationFiltered_A_Update]
    ON [dbo].[tflObservationFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflOutbreakFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflOutbreakFiltered_A_Update]
    ON [dbo].[tflOutbreakFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflSite_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflSite_A_Update]
    ON [dbo].[tflSite];


GO
PRINT N'Altering Trigger [dbo].[TR_tflSite_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tflSite_I_Delete]
    ON [dbo].[tflSite];


GO
PRINT N'Altering Trigger [dbo].[TR_tflSiteGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflSiteGroup_A_Update]
    ON [dbo].[tflSiteGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tflSiteGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tflSiteGroup_I_Delete]
    ON [dbo].[tflSiteGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tflSiteGroupRelation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflSiteGroupRelation_A_Update]
    ON [dbo].[tflSiteGroupRelation];


GO
PRINT N'Altering Trigger [dbo].[TR_tflSiteToSiteGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflSiteToSiteGroup_A_Update]
    ON [dbo].[tflSiteToSiteGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tflTransferOutFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflTransferOutFiltered_A_Update]
    ON [dbo].[tflTransferOutFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflVectorSurveillanceSessionFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflVectorSurveillanceSessionFiltered_A_Update]
    ON [dbo].[tflVectorSurveillanceSessionFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflVetCaseFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflVetCaseFiltered_A_Update]
    ON [dbo].[tflVetCaseFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbActivityParameters_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbActivityParameters_A_Update]
    ON [dbo].[tlbActivityParameters];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbActivityParameters_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbActivityParameters_I_Delete]
    ON [dbo].[tlbActivityParameters];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrCase_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrCase_A_Update]
    ON [dbo].[tlbAggrCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrCase_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrCase_I_Delete]
    ON [dbo].[tlbAggrCase];


GO
PRINT N'Altering Trigger [dbo].[trtAggrCaseReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtAggrCaseReplicationUp]
    ON [dbo].[tlbAggrCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrDiagnosticActionMTX_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrDiagnosticActionMTX_A_Update]
    ON [dbo].[tlbAggrDiagnosticActionMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrDiagnosticActionMTX_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrDiagnosticActionMTX_I_Delete]
    ON [dbo].[tlbAggrDiagnosticActionMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrHumanCaseMTX_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrHumanCaseMTX_A_Update]
    ON [dbo].[tlbAggrHumanCaseMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrHumanCaseMTX_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrHumanCaseMTX_I_Delete]
    ON [dbo].[tlbAggrHumanCaseMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrMatrixVersionHeader_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrMatrixVersionHeader_A_Update]
    ON [dbo].[tlbAggrMatrixVersionHeader];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrMatrixVersionHeader_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrMatrixVersionHeader_I_Delete]
    ON [dbo].[tlbAggrMatrixVersionHeader];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrProphylacticActionMTX_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrProphylacticActionMTX_A_Update]
    ON [dbo].[tlbAggrProphylacticActionMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrProphylacticActionMTX_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrProphylacticActionMTX_I_Delete]
    ON [dbo].[tlbAggrProphylacticActionMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrSanitaryActionMTX_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrSanitaryActionMTX_A_Update]
    ON [dbo].[tlbAggrSanitaryActionMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrSanitaryActionMTX_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrSanitaryActionMTX_I_Delete]
    ON [dbo].[tlbAggrSanitaryActionMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrVetCaseMTX_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrVetCaseMTX_A_Update]
    ON [dbo].[tlbAggrVetCaseMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrVetCaseMTX_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrVetCaseMTX_I_Delete]
    ON [dbo].[tlbAggrVetCaseMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAnimal_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAnimal_A_Update]
    ON [dbo].[tlbAnimal];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAnimal_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAnimal_I_Delete]
    ON [dbo].[tlbAnimal];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAntimicrobialTherapy_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAntimicrobialTherapy_A_Update]
    ON [dbo].[tlbAntimicrobialTherapy];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAntimicrobialTherapy_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAntimicrobialTherapy_I_Delete]
    ON [dbo].[tlbAntimicrobialTherapy];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBasicSyndromicSurveillance_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBasicSyndromicSurveillance_A_Update]
    ON [dbo].[tlbBasicSyndromicSurveillance];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBasicSyndromicSurveillance_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBasicSyndromicSurveillance_I_Delete]
    ON [dbo].[tlbBasicSyndromicSurveillance];


GO
PRINT N'Altering Trigger [dbo].[trtBasicSyndromicSurveillanceReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtBasicSyndromicSurveillanceReplicationUp]
    ON [dbo].[tlbBasicSyndromicSurveillance];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateDetail_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateDetail_A_Update]
    ON [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateDetail_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateDetail_I_Delete]
    ON [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateHeader_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateHeader_A_Update]
    ON [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateHeader_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateHeader_I_Delete]
    ON [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader];


GO
PRINT N'Altering Trigger [dbo].[trtBasicSyndromicSurveillanceAggregateHeaderReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtBasicSyndromicSurveillanceAggregateHeaderReplicationUp]
    ON [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBatchTest_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBatchTest_A_Update]
    ON [dbo].[tlbBatchTest];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBatchTest_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBatchTest_I_Delete]
    ON [dbo].[tlbBatchTest];


GO
PRINT N'Altering Trigger [dbo].[trtBatchTestReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtBatchTestReplicationUp]
    ON [dbo].[tlbBatchTest];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbCampaign_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbCampaign_A_Update]
    ON [dbo].[tlbCampaign];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbCampaign_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbCampaign_I_Delete]
    ON [dbo].[tlbCampaign];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbChangeDiagnosisHistory_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbChangeDiagnosisHistory_A_Update]
    ON [dbo].[tlbChangeDiagnosisHistory];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbChangeDiagnosisHistory_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbChangeDiagnosisHistory_I_Delete]
    ON [dbo].[tlbChangeDiagnosisHistory];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbContactedCasePerson_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbContactedCasePerson_A_Update]
    ON [dbo].[tlbContactedCasePerson];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbContactedCasePerson_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbContactedCasePerson_I_Delete]
    ON [dbo].[tlbContactedCasePerson];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbDepartment_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbDepartment_A_Update]
    ON [dbo].[tlbDepartment];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbDepartment_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbDepartment_I_Delete]
    ON [dbo].[tlbDepartment];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbEmployee_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbEmployee_A_Update]
    ON [dbo].[tlbEmployee];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbEmployee_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbEmployee_I_Delete]
    ON [dbo].[tlbEmployee];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbEmployeeGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbEmployeeGroup_A_Update]
    ON [dbo].[tlbEmployeeGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbEmployeeGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbEmployeeGroup_I_Delete]
    ON [dbo].[tlbEmployeeGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbEmployeeGroupMember_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbEmployeeGroupMember_A_Update]
    ON [dbo].[tlbEmployeeGroupMember];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbEmployeeGroupMember_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbEmployeeGroupMember_I_Delete]
    ON [dbo].[tlbEmployeeGroupMember];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFarm_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFarm_A_Update]
    ON [dbo].[tlbFarm];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFarm_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFarm_I_Delete]
    ON [dbo].[tlbFarm];


GO
PRINT N'Altering Trigger [dbo].[trtFarmReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtFarmReplicationUp]
    ON [dbo].[tlbFarm];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFarmActual_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFarmActual_A_Update]
    ON [dbo].[tlbFarmActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFarmActual_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFarmActual_I_Delete]
    ON [dbo].[tlbFarmActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFreezer_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFreezer_A_Update]
    ON [dbo].[tlbFreezer];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFreezer_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFreezer_I_Delete]
    ON [dbo].[tlbFreezer];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFreezerSubdivision_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFreezerSubdivision_A_Update]
    ON [dbo].[tlbFreezerSubdivision];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFreezerSubdivision_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFreezerSubdivision_I_Delete]
    ON [dbo].[tlbFreezerSubdivision];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocation_A_Insert]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocation_A_Insert]
    ON [dbo].[tlbGeoLocation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocation_A_Update]
    ON [dbo].[tlbGeoLocation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocation_I_Delete]
    ON [dbo].[tlbGeoLocation];


GO
PRINT N'Altering Trigger [dbo].[trtGeoLocationReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtGeoLocationReplicationUp]
    ON [dbo].[tlbGeoLocation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocationShared_A_Insert]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocationShared_A_Insert]
    ON [dbo].[tlbGeoLocationShared];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocationShared_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocationShared_A_Update]
    ON [dbo].[tlbGeoLocationShared];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocationShared_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocationShared_I_Delete]
    ON [dbo].[tlbGeoLocationShared];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocationSharedTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocationSharedTranslation_A_Update]
    ON [dbo].[tlbGeoLocationSharedTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocationTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocationTranslation_A_Update]
    ON [dbo].[tlbGeoLocationTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHerd_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHerd_A_Update]
    ON [dbo].[tlbHerd];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHerd_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHerd_I_Delete]
    ON [dbo].[tlbHerd];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHerdActual_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHerdActual_A_Update]
    ON [dbo].[tlbHerdActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHerdActual_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHerdActual_I_Delete]
    ON [dbo].[tlbHerdActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHuman_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHuman_A_Update]
    ON [dbo].[tlbHuman];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHuman_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHuman_I_Delete]
    ON [dbo].[tlbHuman];


GO
PRINT N'Altering Trigger [dbo].[trtHumanReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtHumanReplicationUp]
    ON [dbo].[tlbHuman];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHumanActual_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHumanActual_A_Update]
    ON [dbo].[tlbHumanActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHumanActual_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHumanActual_I_Delete]
    ON [dbo].[tlbHumanActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHumanCase_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHumanCase_A_Update]
    ON [dbo].[tlbHumanCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHumanCase_ChangeArchiveDate]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHumanCase_ChangeArchiveDate]
    ON [dbo].[tlbHumanCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHumanCase_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHumanCase_I_Delete]
    ON [dbo].[tlbHumanCase];


GO
PRINT N'Altering Trigger [dbo].[trtHumanCaseReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtHumanCaseReplicationUp]
    ON [dbo].[tlbHumanCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMaterial_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMaterial_A_Update]
    ON [dbo].[tlbMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMaterial_Calculate]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMaterial_Calculate]
    ON [dbo].[tlbMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMaterial_ChangeArchiveDate]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMaterial_ChangeArchiveDate]
    ON [dbo].[tlbMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMaterial_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMaterial_I_Delete]
    ON [dbo].[tlbMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSession_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSession_A_Update]
    ON [dbo].[tlbMonitoringSession];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSession_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSession_I_Delete]
    ON [dbo].[tlbMonitoringSession];


GO
PRINT N'Altering Trigger [dbo].[trtMonitoringSessionReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtMonitoringSessionReplicationUp]
    ON [dbo].[tlbMonitoringSession];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionAction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionAction_A_Update]
    ON [dbo].[tlbMonitoringSessionAction];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionAction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionAction_I_Delete]
    ON [dbo].[tlbMonitoringSessionAction];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionSummary_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionSummary_A_Update]
    ON [dbo].[tlbMonitoringSessionSummary];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionSummary_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionSummary_I_Delete]
    ON [dbo].[tlbMonitoringSessionSummary];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionSummaryDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionSummaryDiagnosis_A_Update]
    ON [dbo].[tlbMonitoringSessionSummaryDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionSummaryDiagnosis_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionSummaryDiagnosis_I_Delete]
    ON [dbo].[tlbMonitoringSessionSummaryDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionSummarySample_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionSummarySample_A_Update]
    ON [dbo].[tlbMonitoringSessionSummarySample];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionSummarySample_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionSummarySample_I_Delete]
    ON [dbo].[tlbMonitoringSessionSummarySample];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionToDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionToDiagnosis_A_Update]
    ON [dbo].[tlbMonitoringSessionToDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionToDiagnosis_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionToDiagnosis_I_Delete]
    ON [dbo].[tlbMonitoringSessionToDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbObservation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbObservation_A_Update]
    ON [dbo].[tlbObservation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbObservation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbObservation_I_Delete]
    ON [dbo].[tlbObservation];


GO
PRINT N'Altering Trigger [dbo].[trtObservationReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtObservationReplicationUp]
    ON [dbo].[tlbObservation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOffice_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOffice_A_Update]
    ON [dbo].[tlbOffice];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOffice_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOffice_I_Delete]
    ON [dbo].[tlbOffice];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOutbreak_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOutbreak_A_Update]
    ON [dbo].[tlbOutbreak];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOutbreak_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOutbreak_I_Delete]
    ON [dbo].[tlbOutbreak];


GO
PRINT N'Altering Trigger [dbo].[trtOutbreakReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtOutbreakReplicationUp]
    ON [dbo].[tlbOutbreak];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOutbreakCaseMonitoring_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOutbreakCaseMonitoring_A_Update]
    ON [dbo].[tlbOutbreakCaseMonitoring];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOutbreakCaseMonitoring_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOutbreakCaseMonitoring_I_Delete]
    ON [dbo].[tlbOutbreakCaseMonitoring];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOutbreakNote_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOutbreakNote_A_Update]
    ON [dbo].[tlbOutbreakNote];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOutbreakNote_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOutbreakNote_I_Delete]
    ON [dbo].[tlbOutbreakNote];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbPensideTest_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbPensideTest_A_Update]
    ON [dbo].[tlbPensideTest];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbPensideTest_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbPensideTest_I_Delete]
    ON [dbo].[tlbPensideTest];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbPerson_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbPerson_A_Update]
    ON [dbo].[tlbPerson];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbPerson_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbPerson_I_Delete]
    ON [dbo].[tlbPerson];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbPostalCode_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbPostalCode_A_Update]
    ON [dbo].[tlbPostalCode];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbPostalCode_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbPostalCode_I_Delete]
    ON [dbo].[tlbPostalCode];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbReportForm_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbReportForm_A_Update]
    ON [dbo].[tlbReportForm];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbReportForm_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbReportForm_I_Delete]
    ON [dbo].[tlbReportForm];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbSpecies_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbSpecies_A_Update]
    ON [dbo].[tlbSpecies];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbSpecies_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbSpecies_I_Delete]
    ON [dbo].[tlbSpecies];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbSpeciesActual_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbSpeciesActual_A_Update]
    ON [dbo].[tlbSpeciesActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbSpeciesActual_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbSpeciesActual_I_Delete]
    ON [dbo].[tlbSpeciesActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbStatistic_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbStatistic_A_Update]
    ON [dbo].[tlbStatistic];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbStatistic_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbStatistic_I_Delete]
    ON [dbo].[tlbStatistic];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbStreet_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbStreet_A_Update]
    ON [dbo].[tlbStreet];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbStreet_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbStreet_I_Delete]
    ON [dbo].[tlbStreet];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTestAmendmentHistory_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTestAmendmentHistory_A_Update]
    ON [dbo].[tlbTestAmendmentHistory];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTestAmendmentHistory_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTestAmendmentHistory_I_Delete]
    ON [dbo].[tlbTestAmendmentHistory];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTesting_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTesting_A_Update]
    ON [dbo].[tlbTesting];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTesting_ChangeArchiveDate]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTesting_ChangeArchiveDate]
    ON [dbo].[tlbTesting];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTesting_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTesting_I_Delete]
    ON [dbo].[tlbTesting];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTestValidation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTestValidation_A_Update]
    ON [dbo].[tlbTestValidation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTestValidation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTestValidation_I_Delete]
    ON [dbo].[tlbTestValidation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTransferOUT_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTransferOUT_A_Update]
    ON [dbo].[tlbTransferOUT];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTransferOUT_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTransferOUT_I_Delete]
    ON [dbo].[tlbTransferOUT];


GO
PRINT N'Altering Trigger [dbo].[trtTransferOutReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtTransferOutReplicationUp]
    ON [dbo].[tlbTransferOUT];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTransferOutMaterial_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTransferOutMaterial_A_Update]
    ON [dbo].[tlbTransferOutMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTransferOutMaterial_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTransferOutMaterial_I_Delete]
    ON [dbo].[tlbTransferOutMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVaccination_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVaccination_A_Update]
    ON [dbo].[tlbVaccination];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVaccination_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVaccination_I_Delete]
    ON [dbo].[tlbVaccination];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVector_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVector_A_Update]
    ON [dbo].[tlbVector];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVector_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVector_I_Delete]
    ON [dbo].[tlbVector];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSession_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSession_A_Update]
    ON [dbo].[tlbVectorSurveillanceSession];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSession_ChangeArchiveDate]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSession_ChangeArchiveDate]
    ON [dbo].[tlbVectorSurveillanceSession];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSession_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSession_I_Delete]
    ON [dbo].[tlbVectorSurveillanceSession];


GO
PRINT N'Altering Trigger [dbo].[trtVectorSurveillanceSessionReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtVectorSurveillanceSessionReplicationUp]
    ON [dbo].[tlbVectorSurveillanceSession];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSessionSummary_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSessionSummary_A_Update]
    ON [dbo].[tlbVectorSurveillanceSessionSummary];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSessionSummary_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSessionSummary_I_Delete]
    ON [dbo].[tlbVectorSurveillanceSessionSummary];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSessionSummaryDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSessionSummaryDiagnosis_A_Update]
    ON [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSessionSummaryDiagnosis_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSessionSummaryDiagnosis_I_Delete]
    ON [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCase_A_Insert]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCase_A_Insert]
    ON [dbo].[tlbVetCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCase_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCase_A_Update]
    ON [dbo].[tlbVetCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCase_ChangeArchiveDate]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCase_ChangeArchiveDate]
    ON [dbo].[tlbVetCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCase_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCase_I_Delete]
    ON [dbo].[tlbVetCase];


GO
PRINT N'Altering Trigger [dbo].[TR_VetCaseReplicationUp_A_Insert]...';


GO
ENABLE TRIGGER [dbo].[TR_VetCaseReplicationUp_A_Insert]
    ON [dbo].[tlbVetCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCaseDisplayDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCaseDisplayDiagnosis_A_Update]
    ON [dbo].[tlbVetCaseDisplayDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCaseDisplayDiagnosis_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCaseDisplayDiagnosis_I_Delete]
    ON [dbo].[tlbVetCaseDisplayDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCaseLog_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCaseLog_A_Update]
    ON [dbo].[tlbVetCaseLog];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCaseLog_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCaseLog_I_Delete]
    ON [dbo].[tlbVetCaseLog];


GO
PRINT N'Altering Trigger [dbo].[TR_trtAttributeType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtAttributeType_A_Update]
    ON [dbo].[trtAttributeType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBaseReference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBaseReference_A_Update]
    ON [dbo].[trtBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBaseReference_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBaseReference_I_Delete]
    ON [dbo].[trtBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBaseReferenceAttribute_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBaseReferenceAttribute_A_Update]
    ON [dbo].[trtBaseReferenceAttribute];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBaseReferenceAttributeToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBaseReferenceAttributeToCP_A_Update]
    ON [dbo].[trtBaseReferenceAttributeToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBaseReferenceToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBaseReferenceToCP_A_Update]
    ON [dbo].[trtBaseReferenceToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBssAggregateColumns_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBssAggregateColumns_A_Update]
    ON [dbo].[trtBssAggregateColumns];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBssAggregateColumns_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBssAggregateColumns_I_Delete]
    ON [dbo].[trtBssAggregateColumns];


GO
PRINT N'Altering Trigger [dbo].[TR_trtCaseClassification_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtCaseClassification_A_Update]
    ON [dbo].[trtCaseClassification];


GO
PRINT N'Altering Trigger [dbo].[TR_trtCollectionMethodForVectorType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtCollectionMethodForVectorType_A_Update]
    ON [dbo].[trtCollectionMethodForVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtCollectionMethodForVectorType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtCollectionMethodForVectorType_I_Delete]
    ON [dbo].[trtCollectionMethodForVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtCollectionMethodForVectorTypeToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtCollectionMethodForVectorTypeToCP_A_Update]
    ON [dbo].[trtCollectionMethodForVectorTypeToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDerivativeForSampleType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDerivativeForSampleType_A_Update]
    ON [dbo].[trtDerivativeForSampleType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDerivativeForSampleType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDerivativeForSampleType_I_Delete]
    ON [dbo].[trtDerivativeForSampleType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDerivativeForSampleTypeToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDerivativeForSampleTypeToCP_A_Update]
    ON [dbo].[trtDerivativeForSampleTypeToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosis_A_Update]
    ON [dbo].[trtDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosis_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosis_I_Delete]
    ON [dbo].[trtDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroup_A_Update]
    ON [dbo].[trtDiagnosisAgeGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroup_I_Delete]
    ON [dbo].[trtDiagnosisAgeGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroupToDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroupToDiagnosis_A_Update]
    ON [dbo].[trtDiagnosisAgeGroupToDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroupToDiagnosis_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroupToDiagnosis_I_Delete]
    ON [dbo].[trtDiagnosisAgeGroupToDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroupToDiagnosisToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroupToDiagnosisToCP_A_Update]
    ON [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroupToStatisticalAgeGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroupToStatisticalAgeGroup_A_Update]
    ON [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroupToStatisticalAgeGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroupToStatisticalAgeGroup_I_Delete]
    ON [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_A_Update]
    ON [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisToDiagnosisGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisToDiagnosisGroup_A_Update]
    ON [dbo].[trtDiagnosisToDiagnosisGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisToDiagnosisGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisToDiagnosisGroup_I_Delete]
    ON [dbo].[trtDiagnosisToDiagnosisGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisToDiagnosisGroupToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisToDiagnosisGroupToCP_A_Update]
    ON [dbo].[trtDiagnosisToDiagnosisGroupToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisToGroupForReportType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisToGroupForReportType_A_Update]
    ON [dbo].[trtDiagnosisToGroupForReportType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtEventType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtEventType_A_Update]
    ON [dbo].[trtEventType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtEventType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtEventType_I_Delete]
    ON [dbo].[trtEventType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtFFObjectForCustomReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtFFObjectForCustomReport_A_Update]
    ON [dbo].[trtFFObjectForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtFFObjectForCustomReport_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtFFObjectForCustomReport_I_Delete]
    ON [dbo].[trtFFObjectForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtFFObjectToDiagnosisForCustomReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtFFObjectToDiagnosisForCustomReport_A_Update]
    ON [dbo].[trtFFObjectToDiagnosisForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtFFObjectToDiagnosisForCustomReport_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtFFObjectToDiagnosisForCustomReport_I_Delete]
    ON [dbo].[trtFFObjectToDiagnosisForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtGISBaseReferenceAttribute_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtGISBaseReferenceAttribute_A_Update]
    ON [dbo].[trtGISBaseReferenceAttribute];


GO
PRINT N'Altering Trigger [dbo].[TR_trtGISObjectForCustomReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtGISObjectForCustomReport_A_Update]
    ON [dbo].[trtGISObjectForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtHACodeList_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtHACodeList_A_Update]
    ON [dbo].[trtHACodeList];


GO
PRINT N'Altering Trigger [dbo].[TR_trtHACodeList_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtHACodeList_I_Delete]
    ON [dbo].[trtHACodeList];


GO
PRINT N'Altering Trigger [dbo].[TR_trtLanguageToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtLanguageToCP_A_Update]
    ON [dbo].[trtLanguageToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtMaterialForDisease_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtMaterialForDisease_A_Update]
    ON [dbo].[trtMaterialForDisease];


GO
PRINT N'Altering Trigger [dbo].[TR_trtMaterialForDisease_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtMaterialForDisease_I_Delete]
    ON [dbo].[trtMaterialForDisease];


GO
PRINT N'Altering Trigger [dbo].[TR_trtMaterialForDiseaseToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtMaterialForDiseaseToCP_A_Update]
    ON [dbo].[trtMaterialForDiseaseToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtMatrixColumn_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtMatrixColumn_A_Update]
    ON [dbo].[trtMatrixColumn];


GO
PRINT N'Altering Trigger [dbo].[TR_trtMatrixType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtMatrixType_A_Update]
    ON [dbo].[trtMatrixType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtObjectTypeToObjectOperation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtObjectTypeToObjectOperation_A_Update]
    ON [dbo].[trtObjectTypeToObjectOperation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtObjectTypeToObjectType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtObjectTypeToObjectType_A_Update]
    ON [dbo].[trtObjectTypeToObjectType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestForDisease_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestForDisease_A_Update]
    ON [dbo].[trtPensideTestForDisease];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestForDisease_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestForDisease_I_Delete]
    ON [dbo].[trtPensideTestForDisease];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestForDiseaseToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestForDiseaseToCP_A_Update]
    ON [dbo].[trtPensideTestForDiseaseToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestTypeForVectorType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestTypeForVectorType_A_Update]
    ON [dbo].[trtPensideTestTypeForVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestTypeForVectorType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestTypeForVectorType_I_Delete]
    ON [dbo].[trtPensideTestTypeForVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestTypeForVectorTypeToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestTypeForVectorTypeToCP_A_Update]
    ON [dbo].[trtPensideTestTypeForVectorTypeToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestTypeToTestResult_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestTypeToTestResult_A_Update]
    ON [dbo].[trtPensideTestTypeToTestResult];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestTypeToTestResult_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestTypeToTestResult_I_Delete]
    ON [dbo].[trtPensideTestTypeToTestResult];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestTypeToTestResultToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestTypeToTestResultToCP_A_Update]
    ON [dbo].[trtPensideTestTypeToTestResultToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtProphilacticAction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtProphilacticAction_A_Update]
    ON [dbo].[trtProphilacticAction];


GO
PRINT N'Altering Trigger [dbo].[TR_trtProphilacticAction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtProphilacticAction_I_Delete]
    ON [dbo].[trtProphilacticAction];


GO
PRINT N'Altering Trigger [dbo].[TR_trtReferenceType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtReferenceType_A_Update]
    ON [dbo].[trtReferenceType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtReferenceType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtReferenceType_I_Delete]
    ON [dbo].[trtReferenceType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtReportDiagnosisGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtReportDiagnosisGroup_A_Update]
    ON [dbo].[trtReportDiagnosisGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtReportDiagnosisGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtReportDiagnosisGroup_I_Delete]
    ON [dbo].[trtReportDiagnosisGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtReportRows_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtReportRows_A_Update]
    ON [dbo].[trtReportRows];


GO
PRINT N'Altering Trigger [dbo].[TR_trtReportRows_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtReportRows_I_Delete]
    ON [dbo].[trtReportRows];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResource_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResource_A_Update]
    ON [dbo].[trtResource];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResource_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResource_I_Delete]
    ON [dbo].[trtResource];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSet_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSet_A_Update]
    ON [dbo].[trtResourceSet];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSet_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSet_I_Delete]
    ON [dbo].[trtResourceSet];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSetHierarchy_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSetHierarchy_A_Update]
    ON [dbo].[trtResourceSetHierarchy];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSetHierarchy_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSetHierarchy_I_Delete]
    ON [dbo].[trtResourceSetHierarchy];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSetToResource_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSetToResource_A_Update]
    ON [dbo].[trtResourceSetToResource];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSetToResource_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSetToResource_I_Delete]
    ON [dbo].[trtResourceSetToResource];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSetTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSetTranslation_A_Update]
    ON [dbo].[trtResourceSetTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSetTranslation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSetTranslation_I_Delete]
    ON [dbo].[trtResourceSetTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceTranslation_A_Update]
    ON [dbo].[trtResourceTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceTranslation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceTranslation_I_Delete]
    ON [dbo].[trtResourceTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSampleType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSampleType_A_Update]
    ON [dbo].[trtSampleType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSampleType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSampleType_I_Delete]
    ON [dbo].[trtSampleType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSampleTypeForVectorType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSampleTypeForVectorType_A_Update]
    ON [dbo].[trtSampleTypeForVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSampleTypeForVectorType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSampleTypeForVectorType_I_Delete]
    ON [dbo].[trtSampleTypeForVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSampleTypeForVectorTypeToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSampleTypeForVectorTypeToCP_A_Update]
    ON [dbo].[trtSampleTypeForVectorTypeToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSanitaryAction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSanitaryAction_A_Update]
    ON [dbo].[trtSanitaryAction];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSanitaryAction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSanitaryAction_I_Delete]
    ON [dbo].[trtSanitaryAction];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesContentInCustomReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesContentInCustomReport_A_Update]
    ON [dbo].[trtSpeciesContentInCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesContentInCustomReport_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesContentInCustomReport_I_Delete]
    ON [dbo].[trtSpeciesContentInCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesGroup_A_Update]
    ON [dbo].[trtSpeciesGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesGroup_I_Delete]
    ON [dbo].[trtSpeciesGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesToGroupForCustomReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesToGroupForCustomReport_A_Update]
    ON [dbo].[trtSpeciesToGroupForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesToGroupForCustomReport_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesToGroupForCustomReport_I_Delete]
    ON [dbo].[trtSpeciesToGroupForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesType_A_Update]
    ON [dbo].[trtSpeciesType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesType_I_Delete]
    ON [dbo].[trtSpeciesType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesTypeToAnimalAge_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesTypeToAnimalAge_A_Update]
    ON [dbo].[trtSpeciesTypeToAnimalAge];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesTypeToAnimalAge_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesTypeToAnimalAge_I_Delete]
    ON [dbo].[trtSpeciesTypeToAnimalAge];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesTypeToAnimalAgeToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesTypeToAnimalAgeToCP_A_Update]
    ON [dbo].[trtSpeciesTypeToAnimalAgeToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtStatisticDataType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtStatisticDataType_A_Update]
    ON [dbo].[trtStatisticDataType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtStatisticDataType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtStatisticDataType_I_Delete]
    ON [dbo].[trtStatisticDataType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtStringNameTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtStringNameTranslation_A_Update]
    ON [dbo].[trtStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtStringNameTranslation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtStringNameTranslation_I_Delete]
    ON [dbo].[trtStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtStringNameTranslationToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtStringNameTranslationToCP_A_Update]
    ON [dbo].[trtStringNameTranslationToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSystemFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSystemFunction_A_Update]
    ON [dbo].[trtSystemFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSystemFunction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSystemFunction_I_Delete]
    ON [dbo].[trtSystemFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSystemFunctionOperation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSystemFunctionOperation_A_Update]
    ON [dbo].[trtSystemFunctionOperation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestForDisease_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestForDisease_A_Update]
    ON [dbo].[trtTestForDisease];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestForDisease_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestForDisease_I_Delete]
    ON [dbo].[trtTestForDisease];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestForDiseaseToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestForDiseaseToCP_A_Update]
    ON [dbo].[trtTestForDiseaseToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestTypeForCustomReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestTypeForCustomReport_A_Update]
    ON [dbo].[trtTestTypeForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestTypeForCustomReport_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestTypeForCustomReport_I_Delete]
    ON [dbo].[trtTestTypeForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestTypeToTestResult_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestTypeToTestResult_A_Update]
    ON [dbo].[trtTestTypeToTestResult];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestTypeToTestResult_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestTypeToTestResult_I_Delete]
    ON [dbo].[trtTestTypeToTestResult];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestTypeToTestResultToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestTypeToTestResultToCP_A_Update]
    ON [dbo].[trtTestTypeToTestResultToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtVectorSubType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtVectorSubType_A_Update]
    ON [dbo].[trtVectorSubType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtVectorSubType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtVectorSubType_I_Delete]
    ON [dbo].[trtVectorSubType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtVectorType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtVectorType_A_Update]
    ON [dbo].[trtVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtVectorType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtVectorType_I_Delete]
    ON [dbo].[trtVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_tstAggrSetting_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstAggrSetting_A_Update]
    ON [dbo].[tstAggrSetting];


GO
PRINT N'Altering Trigger [dbo].[TR_tstAggrSetting_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstAggrSetting_I_Delete]
    ON [dbo].[tstAggrSetting];


GO
PRINT N'Altering Trigger [dbo].[TR_tstBarcodeLayout_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstBarcodeLayout_A_Update]
    ON [dbo].[tstBarcodeLayout];


GO
PRINT N'Altering Trigger [dbo].[TR_tstCheckConstraints_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstCheckConstraints_A_Update]
    ON [dbo].[tstCheckConstraints];


GO
PRINT N'Altering Trigger [dbo].[TR_tstCheckTables_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstCheckTables_A_Update]
    ON [dbo].[tstCheckTables];


GO
PRINT N'Altering Trigger [dbo].[TR_tstCustomizationPackage_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstCustomizationPackage_A_Update]
    ON [dbo].[tstCustomizationPackage];


GO
PRINT N'Altering Trigger [dbo].[TR_tstCustomizationPackageSettings_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstCustomizationPackageSettings_A_Update]
    ON [dbo].[tstCustomizationPackageSettings];


GO
PRINT N'Altering Trigger [dbo].[TR_tstEvent_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstEvent_A_Update]
    ON [dbo].[tstEvent];


GO
PRINT N'Altering Trigger [dbo].[TR_tstEventActive_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstEventActive_A_Update]
    ON [dbo].[tstEventActive];


GO
PRINT N'Altering Trigger [dbo].[TR_tstEventClient_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstEventClient_A_Update]
    ON [dbo].[tstEventClient];


GO
PRINT N'Altering Trigger [dbo].[TR_tstEventSubscription_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstEventSubscription_A_Update]
    ON [dbo].[tstEventSubscription];


GO
PRINT N'Altering Trigger [dbo].[TR_tstGeoLocationFormat_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstGeoLocationFormat_A_Update]
    ON [dbo].[tstGeoLocationFormat];


GO
PRINT N'Altering Trigger [dbo].[TR_tstGlobalSiteOptions_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstGlobalSiteOptions_A_Update]
    ON [dbo].[tstGlobalSiteOptions];


GO
PRINT N'Altering Trigger [dbo].[TR_tstInvalidObjects_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstInvalidObjects_A_Update]
    ON [dbo].[tstInvalidObjects];


GO
PRINT N'Altering Trigger [dbo].[TR_tstInvisibleFields_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstInvisibleFields_A_Update]
    ON [dbo].[tstInvisibleFields];


GO
PRINT N'Altering Trigger [dbo].[TR_tstInvisibleFieldsToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstInvisibleFieldsToCP_A_Update]
    ON [dbo].[tstInvisibleFieldsToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_tstLocalClient_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstLocalClient_A_Update]
    ON [dbo].[tstLocalClient];


GO
PRINT N'Altering Trigger [dbo].[TR_tstLocalConnectionContext_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstLocalConnectionContext_A_Update]
    ON [dbo].[tstLocalConnectionContext];


GO
PRINT N'Altering Trigger [dbo].[TR_tstLocalSamplesTestsPreferences_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstLocalSamplesTestsPreferences_A_Update]
    ON [dbo].[tstLocalSamplesTestsPreferences];


GO
PRINT N'Altering Trigger [dbo].[TR_tstLocalSiteOptions_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstLocalSiteOptions_A_Update]
    ON [dbo].[tstLocalSiteOptions];


GO
PRINT N'Altering Trigger [dbo].[TR_tstMandatoryFields_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstMandatoryFields_A_Update]
    ON [dbo].[tstMandatoryFields];


GO
PRINT N'Altering Trigger [dbo].[TR_tstMandatoryFieldsToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstMandatoryFieldsToCP_A_Update]
    ON [dbo].[tstMandatoryFieldsToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_tstNextNumbers_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstNextNumbers_A_Update]
    ON [dbo].[tstNextNumbers];


GO
PRINT N'Altering Trigger [dbo].[TR_tstNotification_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstNotification_A_Update]
    ON [dbo].[tstNotification];


GO
PRINT N'Altering Trigger [dbo].[TR_tstNotification_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstNotification_I_Delete]
    ON [dbo].[tstNotification];


GO
PRINT N'Altering Trigger [dbo].[trtNotificationReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtNotificationReplicationUp]
    ON [dbo].[tstNotification];


GO
PRINT N'Altering Trigger [dbo].[TR_tstNotificationShared_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstNotificationShared_A_Update]
    ON [dbo].[tstNotificationShared];


GO
PRINT N'Altering Trigger [dbo].[TR_tstNotificationStatus_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstNotificationStatus_A_Update]
    ON [dbo].[tstNotificationStatus];


GO
PRINT N'Altering Trigger [dbo].[TR_tstObjectAccess_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstObjectAccess_A_Update]
    ON [dbo].[tstObjectAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_tstObjectAccess_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstObjectAccess_I_Delete]
    ON [dbo].[tstObjectAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_tstPersonalDataGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstPersonalDataGroup_A_Update]
    ON [dbo].[tstPersonalDataGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tstPersonalDataGroupToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstPersonalDataGroupToCP_A_Update]
    ON [dbo].[tstPersonalDataGroupToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_tstRayonToReportSite_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstRayonToReportSite_A_Update]
    ON [dbo].[tstRayonToReportSite];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityAudit_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityAudit_A_Update]
    ON [dbo].[tstSecurityAudit];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityConfiguration_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityConfiguration_A_Update]
    ON [dbo].[tstSecurityConfiguration];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityConfiguration_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityConfiguration_I_Delete]
    ON [dbo].[tstSecurityConfiguration];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityConfigurationAlphabet_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityConfigurationAlphabet_A_Update]
    ON [dbo].[tstSecurityConfigurationAlphabet];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityConfigurationAlphabet_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityConfigurationAlphabet_I_Delete]
    ON [dbo].[tstSecurityConfigurationAlphabet];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityConfigurationAlphabetParticipation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityConfigurationAlphabetParticipation_A_Update]
    ON [dbo].[tstSecurityConfigurationAlphabetParticipation];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityConfigurationAlphabetParticipation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityConfigurationAlphabetParticipation_I_Delete]
    ON [dbo].[tstSecurityConfigurationAlphabetParticipation];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSite_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSite_A_Update]
    ON [dbo].[tstSite];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSite_CopyToTfl]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSite_CopyToTfl]
    ON [dbo].[tstSite];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSite_DeleteFromTfl]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSite_DeleteFromTfl]
    ON [dbo].[tstSite];


GO
PRINT N'Altering Trigger [dbo].[TR_tstUserTable_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstUserTable_A_Update]
    ON [dbo].[tstUserTable];


GO
PRINT N'Altering Trigger [dbo].[TR_tstUserTable_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstUserTable_I_Delete]
    ON [dbo].[tstUserTable];


GO
PRINT N'Altering Trigger [dbo].[TR_tstUserTableLocal_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstUserTableLocal_A_Update]
    ON [dbo].[tstUserTableLocal];


GO
PRINT N'Altering Trigger [dbo].[TR_tstUserTableOldPassword_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstUserTableOldPassword_A_Update]
    ON [dbo].[tstUserTableOldPassword];


GO
PRINT N'Altering Trigger [dbo].[TR_tstUserTableOldPassword_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstUserTableOldPassword_I_Delete]
    ON [dbo].[tstUserTableOldPassword];


GO
PRINT N'Altering Trigger [dbo].[TR_tstUserTicket_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstUserTicket_A_Update]
    ON [dbo].[tstUserTicket];


GO
PRINT N'Altering Trigger [dbo].[TR_tstVersionCompare_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstVersionCompare_A_Update]
    ON [dbo].[tstVersionCompare];


GO
PRINT N'Altering Trigger [dbo].[TR_updRunningApps_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_updRunningApps_A_Update]
    ON [dbo].[updRunningApps];


GO
PRINT N'Altering Trigger [dbo].[TR_updUpdateBlock_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_updUpdateBlock_A_Update]
    ON [dbo].[updUpdateBlock];


GO
PRINT N'Altering Trigger [dbo].[TR_UserAccess_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_UserAccess_A_Update]
    ON [dbo].[UserAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_UserAccess_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_UserAccess_I_Delete]
    ON [dbo].[UserAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_UserPreference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_UserPreference_A_Update]
    ON [dbo].[UserPreference];


GO
PRINT N'Altering Trigger [dbo].[TR_UserPreference_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_UserPreference_I_Delete]
    ON [dbo].[UserPreference];


GO
PRINT N'Altering Trigger [dbo].[TR_VetDiseaseReportRelationship_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_VetDiseaseReportRelationship_A_Update]
    ON [dbo].[VetDiseaseReportRelationship];


GO
PRINT N'Refreshing View [dbo].[Human_Case_Epi_Investigation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Epi_Investigation]';


GO
PRINT N'Refreshing View [dbo].[VM_OMM_HeatMap]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[VM_OMM_HeatMap]';


GO
PRINT N'Refreshing View [dbo].[vw_AVR_HumanCaseReport]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vw_AVR_HumanCaseReport]';


GO
PRINT N'Refreshing View [dbo].[vwDataforTIBCOFromH02_IDs]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vwDataforTIBCOFromH02_IDs]';


GO
PRINT N'Refreshing View [dbo].[vwOutbreakIzZoonotic]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vwOutbreakIzZoonotic]';


GO
PRINT N'Refreshing View [dbo].[vwDataforTIBCOFromH02_AZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vwDataforTIBCOFromH02_AZ]';


GO
PRINT N'Refreshing View [dbo].[vwDataforTIBCOFromH02_EN]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vwDataforTIBCOFromH02_EN]';


GO
PRINT N'Refreshing View [dbo].[vwDataforTIBCOFromH02_RU]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[vwDataforTIBCOFromH02_RU]';


GO
PRINT N'Altering Function [dbo].[FN_GBL_HACodeNames_ToCSV]...';


GO
--=================================================================================================
-- Author: Phil Shaffer
--
-- Description:	Takes an HACode and breaks it down into a CSV with the names of the bitmasks that 
-- make it up.
--
-- 1) If @HACode = NULL returns NULL
-- 2) If @HACode = 0 returns corresponding entry from [trtHACodeList] table (i.e "None")
-- 3) A string of [intHACode] values that matched a bitwise AND with @HACode (e.g. 34 => "Human, 
-- Livestock").
-- 4) Names of [intHACode] values returned in the string are in ascending order of the [intHACode] 
-- values.
-- 5) This implementation will only execute on SQL Server 2017 or greater due to use of function 
-- "STRING_AGG".
-- 6) If passed an invalid @HACode that doesn't match any of the bitmasks, return the value of none 
-- (i.e. "None").
--							
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Philip Shaffer	2018/09/27 Created for EIDSS 7.0.
-- Ricky Moss		2018/09/30 Removed 510 and 0 from returned value
-- Stephen Long     2020/05/19 Added space between comma.
-- Doug Albanese	03/21/2023 Swapped out function with FN_GBL_LanguageCode_GET to get correct translation code.
--
-- Test Code:
-- declare @LangID nvarchar(50) = N'en';
-- declare @HACode int = -1; -- any bitwise OR'd values from table [trtHACodeList]. Value -1 will 
-- match all. Value NULL will return NULL.
-- select dbo.FN_GBL_HACodeNames_ToCSV(@LangID, @HACode);
--=================================================================================================
ALTER FUNCTION [dbo].[FN_GBL_HACodeNames_ToCSV] (
	@LangID NVARCHAR(50),
	@HACode BIGINT
	)
RETURNS NVARCHAR(4000)
AS
BEGIN
	DECLARE @CSV NVARCHAR(4000) = N'', -- size string returned by STRING_AGG
		@LanguageCode BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	-- if passed a null, we return a null result
	IF (@HACode IS NULL)
		RETURN NULL;

	-- if not passed a zero, we process the list
	IF (@HACode <> 0)
	BEGIN
		WITH cteOrderedResults (
			[intHACode],
			[strDisplayText]
			)
		AS (
			SELECT TOP 100 PERCENT hcl.[intHACode],
				COALESCE(snt.[strTextString], br.[strDefault]) AS [strDisplayText]
			FROM [dbo].[trtHACodeList] AS hcl
			INNER JOIN [dbo].[trtBaseReference] AS br
				ON hcl.[idfsCodeName] = br.[idfsBaseReference]
			LEFT OUTER JOIN [dbo].[trtStringNameTranslation] AS snt
				ON hcl.[idfsCodeName] = snt.[idfsBaseReference]
					AND snt.[idfsLanguage] = @LanguageCode
			WHERE (
					hcl.[intHACode] <> 0
					AND hcl.intHACode <> 510
					)
				AND ((@HACode & hcl.[intHACode]) = hcl.[intHACode])
			ORDER BY hcl.[intHACode] ASC
			)
		SELECT @CSV = STRING_AGG([strDisplayText], N', ')
		FROM cteOrderedResults;-- needed CTE to get ordered result set due to AGGREGATE function

		-- do we have a valid result to return?
		IF (
				@CSV IS NOT NULL
				AND LEN(@CSV) > 0
				)
			RETURN @CSV;-- yes
	END

	-- if we got to here, then we need to return the display text for HACode zero (i.e. "None").
	SELECT TOP 1 @CSV = COALESCE(snt.[strTextString], br.[strDefault])
	FROM [dbo].[trtHACodeList] AS hcl
	INNER JOIN [dbo].[trtBaseReference] AS br
		ON hcl.[idfsCodeName] = br.[idfsBaseReference]
	LEFT OUTER JOIN [dbo].[trtStringNameTranslation] AS snt
		ON hcl.[idfsCodeName] = snt.[idfsBaseReference]
			AND snt.[idfsLanguage] = @LanguageCode
	WHERE hcl.[intHACode] = 0;

	RETURN @CSV;
END
GO
PRINT N'Altering Function [dbo].[fnAsGetSearchCondition]...';


GO


--##SUMMARY Returns correct filter condition, including correct operator and, if necessary, additional quotes to the value
--##SUMMARY depending on the Type of the field and a reference to the reference table.

--##REMARKS Author: Mirnaya O.
--##REMARKS Create date: 14.08.2010

--##REMARKS Updated by: Mirnaya O.
--##REMARKS Date: 14.12.2011

--##RETURNS Function returns correct filter condition, including correct operator and, if necessary, additional quotes.


/*
--Example of a call of function:
declare @idfsFieldType			bigint
declare @idfsReferenceType		bigint
declare @idfsGISReferenceType	bigint
declare @strField				nvarchar(2050)
declare @strOperator			nvarchar(200)
declare @intOperatorType		int
declare @blnUseNot				bit
declare @varValue				sql_variant

select	dbo.fnAsGetSearchCondition
		(	@idfsFieldType,
			@idfsReferenceType,
			@idfsGISReferenceType,
			@varValue
		)

*/


ALTER	function	[dbo].[fnAsGetSearchCondition]
(
	@idfsFieldType			bigint,			--##PARAM @idfsFieldType Id of the search field Type or parameter Type
	@idfsReferenceType		bigint,			--##PARAM @idfsReferenceType Id of the reference Type that should contain the specified value
	@idfsGISReferenceType	bigint,			--##PARAM @idfsGISReferenceType Id of the GIS reference Type that should contain the specified value
	@strLookupFunction		nvarchar(2100),	--##PARAM @strLookupFunction Name of Lookup Function that should return the specified value
	@strField				nvarchar(2100),	--##PARAM @strField Text of the search field included in filter condition
	@strOperator			nvarchar(200),	--##PARAM @strOperator The name of the operator Type (Unary or Binary)
	@intOperatorType		int,			--##PARAM @intOperatorType The number from the Operator Type enum for specified operator
	@blnUseNot				bit,			--##PARAM @blnUseNot The parameter that determines whether to use NOT for specified operator
	@varValue				sql_variant		--##PARAM @varValue The value to be converted to a string
)
returns nvarchar(MAX)
as
begin

declare	@Condition	nvarchar(MAX)
set	@Condition = N''

declare @Operator	varchar(2000)
set @Operator = ''

declare @strValue	nvarchar(MAX)
set @strValue = N''

declare @Not		bit
set	@Not = IsNull(@blnUseNot, 0)

if (@idfsReferenceType is not null or @idfsGISReferenceType is not null or len(ltrim(rtrim(isnull(@strLookupFunction, N'')))) > 0) and @strField not like '%_ID]'
begin
	set @strField = replace(@strField, N']', N'_ID]')
end

if (@strOperator = 'Binary')
begin
	if	((@intOperatorType = 0) and (@Not = 0))
		or ((@intOperatorType = 1) and (@Not = 1))
		set	@Operator = '='
	else if	((@intOperatorType = 1) and (@Not = 0))
			or ((@intOperatorType = 0) and (@Not = 1))
		set @Operator = '<>'
	else if	((@intOperatorType = 2) and (@Not = 0))
			or ((@intOperatorType = 4) and (@Not = 1))
		set @Operator = '>'
	else if	((@intOperatorType = 3) and (@Not = 0))
			or ((@intOperatorType = 5) and (@Not = 1))
		set @Operator = '<'
	else if	((@intOperatorType = 4) and (@Not = 0))
			or ((@intOperatorType = 2) and (@Not = 1))
		set @Operator = '<='
	else if	((@intOperatorType = 5) and (@Not = 0))
			or ((@intOperatorType = 3) and (@Not = 1))
		set @Operator = '>='
	else if	(@intOperatorType = 6) and (@Not = 0)
	begin
		if	@idfsFieldType not in	-- FF Field
				(	-- Search field Type
					10081001,	-- Bit
					10081004,	-- Float
					10081006,	-- Integer
					10081002,	-- Date
					10081004,	-- Float
					10081005,	-- ID
					10081007	-- String
				)
			set @strField = N'cast(' + @strField + N' as nvarchar)'
		set @Operator = 'like'
	end
	else if	(@intOperatorType = 6) and (@Not = 1)
	begin
		if	@idfsFieldType not in	-- FF Field
				(	-- Search field Type
					10081001,	-- Bit
					10081004,	-- Float
					10081006,	-- Integer
					10081002,	-- Date
					10081004,	-- Float
					10081005,	-- ID
					10081007	-- String
				)
			set @strField = N'cast(' + @strField + N' as nvarchar)'
		set @Operator = 'not like'
	end

	if	@varValue is not null
	begin
		if	@idfsReferenceType is not null 
			or @idfsGISReferenceType is not null
			or len(ltrim(rtrim(isnull(@strLookupFunction, N'')))) > 0
			or @idfsFieldType in
				(	-- Search field Type
					10081001,	-- Bit
					10081004,	-- Float
					10081006,	-- Integer
					-- FF parameter Type
					10071007,	-- Numeric
					10071025,	-- Boolean
					10071059,	-- Numeric Natural
					10071060,	-- Numeric Positive
					10071061	-- Numeric Integer
				)
		begin
				set	@strValue = cast(@varValue as nvarchar(MAX))
		end
		else begin
			if cast(SQL_VARIANT_PROPERTY(@varValue, 'BaseType')  as nvarchar) like N'%date%'
				set	@strValue = N' ' + 'N''' + 
					replace(replace(left(CONVERT(nvarchar, CAST(@varValue as datetime), 120), 10), N'-', N''), '''', '''''') + ''''
			else if @Operator in ('like', 'not like')
			begin
				set	@strValue = replace(cast(@varValue as nvarchar(MAX)), '''', '''''')
				set	@strValue = REPLACE(@strValue, N'*', N'%')
				if	@strValue not like N'[%]%'
					set	@strValue = N'%' + @strValue
				if	@strValue not like N'%[%]'
					set	@strValue = @strValue + N'%'
				set	@strValue = N' ' + 'N''' + @strValue + ''''
			end
			else
				set	@strValue = N' ' + 'N''' + replace(cast(@varValue as nvarchar(MAX)), '''', '''''') + ''''
		end
	end

	set	@Condition = IsNull(N'(' + @strField + N' ' + @Operator + N' ' + @strValue + N')', N'')
end
else if (@strOperator = 'Unary')
		or	(	@strOperator = 'OutlookInterval'
				and @intOperatorType = 4
			)
begin
	if (@intOperatorType = 4) and (@Not = 0)
		set	@Operator = 'is null'
	else if	(@intOperatorType = 4) and (@Not = 1)
		set @Operator = 'is not null'

	set	@Condition = IsNull(N'(' + @strField + N' ' + @Operator + N')', N'')
end
else if (	@strOperator = 'OutlookInterval'
			and @intOperatorType = 5
		)
begin
	if (@Not = 0)
		set	@Operator = '{x} is null or cast({x} as nvarchar) = N'''''
	else if (@Not = 1)
		set @Operator = '{x} is not null and cast({x} as nvarchar) <> N'''''

	set	@Condition = IsNull(N'(' + replace(@Operator, N'{x}', @strField) + N')', N'')
end
else if (	@strOperator = 'OutlookInterval'
			and @idfsReferenceType is null 
			and	@idfsGISReferenceType is null
			and len(ltrim(rtrim(isnull(@strLookupFunction, N'')))) = 0
			and	@idfsFieldType in
				(	-- Search field Type
					10081007,	-- String
					-- FF parameter Type
					10071045	-- String
				)
			and @varValue is not null
			and	@intOperatorType in
				(	46,			-- Begins with/Does not begin with
					47,			-- Ends with/Does not end with
					48			-- Contains/Does not contain
				)
		) 
begin
	set	@strValue = replace(cast(@varValue as nvarchar(MAX)), '''', '''''')
	set	@strValue = REPLACE(@strValue, N'*', N'%')
	
	if	(@intOperatorType = 46) and (@Not = 0)	-- Begins with
	begin
		set	@Operator = 'like'
		if	@strValue not like N'%[%]'
			set	@strValue = @strValue + N'%'
	end
	else if	(@intOperatorType = 46) and (@Not = 1)	-- Does not begin with
	begin
		set	@Operator = 'not like'
		if	@strValue not like N'%[%]'
			set	@strValue = @strValue + N'%'
	end
	else if	(@intOperatorType = 47) and (@Not = 0)	-- Ends with
	begin
		set	@Operator = 'like'
		if	@strValue not like N'[%]%'
			set	@strValue = N'%' + @strValue
	end
	else if	(@intOperatorType = 47) and (@Not = 1)	-- Does not end with
	begin
		set	@Operator = 'not like'
		if	@strValue not like N'[%]%'
			set	@strValue = N'%' + @strValue
	end
	else if	(@intOperatorType = 48) and (@Not = 0)	-- Contains
	begin
		set	@Operator = 'like'
		if	@strValue not like N'[%]%'
			set	@strValue = N'%' + @strValue
		if	@strValue not like N'%[%]'
			set	@strValue = @strValue + N'%'
	end
	else if	(@intOperatorType = 48) and (@Not = 1)	-- Does not contain
	begin
		set	@Operator = 'not like'
		if	@strValue not like N'[%]%'
			set	@strValue = N'%' + @strValue
		if	@strValue not like N'%[%]'
			set	@strValue = @strValue + N'%'
	end
	
	set	@strValue = N' ' + 'N''' + @strValue + ''''
	set	@Condition = IsNull(N'(' + @strField + N' ' + @Operator + N' ' + @strValue + N')', N'')
end
else if (@strOperator = 'OutlookInterval') 
		and (@idfsFieldType in	(10081002, 10071029, 10071030))	-- Field Date, Parameter Dste, Parameter DateTime
begin
--	set	@strField = N'cast(' + @strField + N' as date)'	
/*	if (@intOperatorType = 59) and (@Not = 0)	-- Is Interval Beyond This Year
		set	@Condition = IsNull(N'(year(' + @strField + N') <> year(getdate()))', N'')
	else if	(@intOperatorType = 59) and (@Not = 1) -- Is Interval Within This Year
		set	@Condition = IsNull(N'(year(' + @strField + N') = year(getdate()))', N'')
	
	else if (@intOperatorType = 60) and (@Not = 0)	-- Is Interval Later This Year
		set	@Condition = IsNull(N'(year(' + @strField + N') > year(getdate()))', N'')
	else if	(@intOperatorType = 60) and (@Not = 1) -- Is Interval Earlier Or Equal To This Year
		set	@Condition = IsNull(N'(year(' + @strField + N') <= year(getdate()))', N'')
	
	else if (@intOperatorType = 61) and (@Not = 0)	-- Is Interval Later This Month
		set	@Condition = IsNull(N'((month(' + @strField + N') > month(getdate()) ' +
									N'and year(' + @strField + N') = year(getdate())) ' +
								N'or (year(' + @strField + N') > year(getdate())))', N'')
	else if	(@intOperatorType = 61) and (@Not = 1) -- Is Interval Earlier Or Equal To This Month
		set	@Condition = IsNull(N'((month(' + @strField + N') <= month(getdate()) ' +
									N'and year(' + @strField + N') = year(getdate())) ' +
								N'or (year(' + @strField + N') < year(getdate())))', N'')

	else if (@intOperatorType = 62) and (@Not = 0)	-- Is Interval Next Week
		set	@Condition = IsNull(N'(' + @strField + N' > getdate() and datediff(ww, getdate(), ' + @strField + N') = 1)', N'')
	else if	(@intOperatorType = 62) and (@Not = 1) -- Is Interval Not Next Week
		set	@Condition = IsNull(N'((' + @strField + N' > getdate() and datediff(ww, getdate(), ' + @strField + N') <> 1)) ' + 
									N'or (' + @strField + N' <= getdate())', N'')

	else if (@intOperatorType = 63) and (@Not = 0)	-- Is Interval Later This Week
		set	@Condition = IsNull(N'((datepart(ww, ' + @strField + N') > datepart(ww, getdate()) ' +
									N'and year(' + @strField + N') = year(getdate())) ' +
								N'or (year(' + @strField + N') > year(getdate())))', N'')
	else if	(@intOperatorType = 63) and (@Not = 1) -- Is Interval Earlier Or Equal To This Week
		set	@Condition = IsNull(N'((datepart(ww, ' + @strField + N') <= datepart(ww, getdate()) ' +
									N'and year(' + @strField + N') = year(getdate())) ' +
								N'or (year(' + @strField + N') < year(getdate())))', N'')

	else if (@intOperatorType = 64) and (@Not = 0)	-- Is Interval Tomorrow
		set	@Condition = IsNull(N'(' + @strField + N' > getdate() and datediff(dd, getdate(), ' + @strField + N') = 1)', N'')
--		set	@Condition = IsNull(N'(' + @strField + N' = dateadd(dd, 1, getdate())', N'')
	else if	(@intOperatorType = 64) and (@Not = 1) -- Is Interval Not Tomorrow
		set	@Condition = IsNull(N'((' + @strField + N' > getdate() and datediff(dd, getdate(), ' + @strField + N') <> 1)) ' + 
									N'or (' + @strField + N' <= getdate())', N'')
--		set	@Condition = IsNull(N'(' + @strField + N' <> dateadd(dd, 1, getdate())', N'')

	else */if (@intOperatorType = 73) and (@Not = 0)	-- Is Interval Today
		--	IsOutlookIntervalToday, // Today <= x < Tomorrow
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (datediff(dd, ' + @strField + N', getdate()) = 0))', N'')

	else if	(@intOperatorType = 73) and (@Not = 1) -- Is Interval Not Today
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (datediff(dd, ' + @strField + N', getdate()) <> 0))', N'')

	else if (@intOperatorType = 74) and (@Not = 0)	-- Is Interval Yesterday
		--	IsOutlookIntervalYesterday, // Yesterday <= x < Today
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (' + @strField + N' < getdate()) and (datediff(dd, ' + @strField + N', getdate()) = 1))', N'')

	else if	(@intOperatorType = 74) and (@Not = 1) -- Is Interval Not Yesterday
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (((' + @strField + N' < getdate()) and (datediff(dd, ' + @strField + N', getdate()) <> 1)) ' + 
									N'or (' + @strField + N' >= getdate()))', N'')

	else if (@intOperatorType = 75) and (@Not = 0)	-- Is Interval Earlier This Week
		--	IsOutlookIntervalEarlierThisWeek, // ThisWeek <= x < Yesterday
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (' + @strField + N' < getdate()) and (datediff(dd, ' + @strField + N', getdate()) > 1) ' +
									N'and (dbo.fnWeekDatediff(' + @strField + N', getdate()) = 0))', N'')

	else if	(@intOperatorType = 75) and (@Not = 1) -- Is Interval Later Or Equal To This Week
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (((' + @strField + N' < getdate()) ' + 
									N'and ((datediff(dd, ' + @strField + N', getdate()) <= 1) ' + 
									N'or (dbo.fnWeekDatediff(' + @strField + N', getdate()) <> 0))) ' + 
									N'or (' + @strField + N' >= getdate())))', N'')

	else if (@intOperatorType = 76) and (@Not = 0)	-- Is Interval Last Week
		--	IsOutlookIntervalLastWeek, // LastWeek <= x < ThisWeek
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (' + @strField + N' < getdate()) and (dbo.fnWeekDatediff(' + @strField + N', getdate()) = 1))', N'')

	else if	(@intOperatorType = 76) and (@Not = 1) -- Is Interval Not Last Week
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (((' + @strField + N' < getdate()) and (dbo.fnWeekDatediff(' + @strField + N', getdate()) <> 1)) ' + 
									N'or (' + @strField + N' >= getdate()))', N'')

	else if (@intOperatorType = 77) and (@Not = 0)	-- Is Interval Earlier This Month
	--	IsOutlookIntervalEarlierThisMonth, // ThisMonth <= x < LastWeek
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (' + @strField + N' < getdate()) and (dbo.fnWeekDatediff(' + @strField + N', getdate()) > 1) ' +
									N'and (datediff(mm, ' + @strField + N', getdate()) = 0))', N'')

	else if	(@intOperatorType = 77) and (@Not = 1) -- Is Interval Later Or Equal To This Month
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (((' + @strField + N' < getdate()) ' + 
									N'and ((dbo.fnWeekDatediff(ww, ' + @strField + N', getdate()) <= 1) ' + 
									N'or (datediff(mm, ' + @strField + N', getdate()) <> 0))) ' + 
									N'or (' + @strField + N' >= getdate())))', N'')

	else if (@intOperatorType = 78) and (@Not = 0)	-- Is Interval Earlier This Year
		--	IsOutlookIntervalEarlierThisYear, // ThisYear <= x < ThisMonth
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (' + @strField + N' < getdate()) and (datediff(mm, ' + @strField + N', getdate()) >= 1) ' +
									N'and (datediff(yyyy, ' + @strField + N', getdate()) = 0))', N'')

	else if	(@intOperatorType = 78) and (@Not = 1) -- Is Interval Later Or Equal To This Year
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (((' + @strField + N' < getdate()) ' + 
									N'and ((datediff(mm, ' + @strField + N', getdate()) < 1) ' + 
									N'or (datediff(yyyy, ' + @strField + N', getdate()) <> 0))) ' + 
									N'or (' + @strField + N' >= getdate())))', N'')

	else if (@intOperatorType = 79) and (@Not = 0)	-- Is Interval Prior This Year
		--	IsOutlookIntervalPriorThisYear, // x < ThisYear
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (datediff(yyyy, ' + @strField + N', getdate()) >= 1))', N'')

	else if	(@intOperatorType = 79) and (@Not = 1) -- Is Interval Not Prior This Year
		set	@Condition = IsNull(N'((' + @strField + N' is not null) and (datediff(yyyy, ' + @strField + N', getdate()) < 1))', N'')
	
end

return @Condition
end
GO
PRINT N'Altering Function [dbo].[fnGetLanguageCode]...';


GO



-- select * from fnGetLanguageCode('en','rftCountry')

ALTER          function [dbo].[fnGetLanguageCode](@LangID  nvarchar(50))
returns bigint
as
BEGIN
DECLARE @LanguageCode bigint
SET @LanguageCode = CASE @LangID WHEN N'az-L'	THEN 10049001
		WHEN N'ru'			THEN 10049006
		WHEN N'ka'			THEN 10049004
		WHEN N'kk'			THEN 10049005
		WHEN N'uz-C'		THEN 10049007
		WHEN N'uz-L'		THEN 10049008
		WHEN N'uk'			THEN 10049009
		WHEN N'CISID-AZ'	THEN 10049002
		WHEN N'hy'			THEN 10049010
		WHEN N'ar'			THEN 10049011
		WHEN N'vi'			THEN 10049012
		WHEN N'lo'			THEN 10049013
		WHEN N'th'			THEN 10049014
		ELSE 10049003 END
return @LanguageCode
END
GO
PRINT N'Refreshing Function [dbo].[FN_VCTS_VSSESSION_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FN_VCTS_VSSESSION_GetList]';


GO
PRINT N'Refreshing Function [dbo].[fnGetPermissionOnOutbreak]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnGetPermissionOnOutbreak]';


GO
PRINT N'Refreshing Function [dbo].[fnGetPermissionOnHumanCase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnGetPermissionOnHumanCase]';


GO
PRINT N'Refreshing Function [dbo].[fnGetPermissionOnVetCase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnGetPermissionOnVetCase]';


GO
PRINT N'Refreshing Function [dbo].[fnGetPermissionOnSample]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnGetPermissionOnSample]';


GO
PRINT N'Altering Function [dbo].[fnEvaluatePermissions]...';


GO


/*
	select * from fnEvaluatePermissions(1)
*/

ALTER FUNCTION [dbo].[fnEvaluatePermissions]
(	
	@idfEmployee bigint
)
RETURNS TABLE 
AS
RETURN 
(
select		trtSystemFunction.idfsSystemFunction,
			trtBaseReference.strBaseReferenceCode,
			trtObjectTypeToObjectOperation.idfsObjectOperation,
			COALESCE(
						nullif(min(isnull(InstanceUser.intPermission,999)),999),
						nullif(min(isnull(InstanceDefault.intPermission,999)),999),
						nullif(min(isnull(TypeUser.intPermission,999)),999),
						nullif(min(isnull(TypeDefault.intPermission,999)),999),
						2
					) as intPermission
from		trtSystemFunction
inner join	trtBaseReference
on			trtBaseReference.idfsBaseReference=trtSystemFunction.idfsSystemFunction
inner join	trtObjectTypeToObjectOperation
on			trtSystemFunction.idfsObjectType=trtObjectTypeToObjectOperation.idfsObjectType
--user rights on instance
left join
(
			select		tstObjectAccess.idfsObjectID,
						tstObjectAccess.idfsObjectOperation,
						tstObjectAccess.intPermission
			from		tstObjectAccess
			inner join	fn_ObjectActorRelations(@idfEmployee) Groups
			on			tstObjectAccess.idfActor=Groups.idfEmployee and
						tstObjectAccess.intRowStatus=0 and
						tstObjectAccess.intPermission in (1,2) and 
						tstObjectAccess.idfsOnSite=dbo.fnPermissionSite()
)InstanceUser
on			trtSystemFunction.idfsSystemFunction=InstanceUser.idfsObjectID and
			trtObjectTypeToObjectOperation.idfsObjectOperation=InstanceUser.idfsObjectOperation
--default rights on instance
left join
(
			select		tstObjectAccess.idfsObjectID,
						tstObjectAccess.idfsObjectOperation,
						tstObjectAccess.intPermission
			from		tstObjectAccess
			where		tstObjectAccess.idfActor=-1 and
						tstObjectAccess.intRowStatus=0 and 
						tstObjectAccess.idfsOnSite=dbo.fnPermissionSite()
)InstanceDefault
on			trtSystemFunction.idfsSystemFunction=InstanceDefault.idfsObjectID and
			trtObjectTypeToObjectOperation.idfsObjectOperation=InstanceDefault.idfsObjectOperation
--user rights on Type
left join
(
			select		tstObjectAccess.idfsObjectOperation,
						tstObjectAccess.idfsObjectType,
						tstObjectAccess.intPermission
			from		tstObjectAccess
			inner join	fn_ObjectActorRelations(@idfEmployee) Groups
			on			tstObjectAccess.idfActor=Groups.idfEmployee and
						tstObjectAccess.intRowStatus=0 and
						tstObjectAccess.idfsObjectID is null and 
						tstObjectAccess.idfsOnSite=dbo.fnPermissionSite()

)TypeUser
on			trtSystemFunction.idfsObjectType=TypeUser.idfsObjectType and
			trtObjectTypeToObjectOperation.idfsObjectOperation=TypeUser.idfsObjectOperation
--default rights on Type
left join
(
			select		tstObjectAccess.idfsObjectOperation,
						tstObjectAccess.idfsObjectType,
						tstObjectAccess.intPermission
			from		tstObjectAccess
			WHERE		tstObjectAccess.idfActor=-1 and
						tstObjectAccess.intRowStatus=0 and
						tstObjectAccess.idfsObjectID is null and 
						tstObjectAccess.idfsOnSite=dbo.fnPermissionSite()
)TypeDefault
on			trtSystemFunction.idfsObjectType=TypeDefault.idfsObjectType and
			trtObjectTypeToObjectOperation.idfsObjectOperation=TypeDefault.idfsObjectOperation

where		trtBaseReference.intRowStatus=0
	AND trtSystemFunction.intRowStatus = 0

group by	trtSystemFunction.idfsSystemFunction,
			trtBaseReference.strBaseReferenceCode,
			trtObjectTypeToObjectOperation.idfsObjectOperation
)
GO
PRINT N'Refreshing Function [dbo].[fnGisExtendedReferenceRepair]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnGisExtendedReferenceRepair]';


GO
PRINT N'Refreshing Function [dbo].[fnLocalReference]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnLocalReference]';


GO
PRINT N'Refreshing Function [dbo].[fnGeoLocationTranslation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnGeoLocationTranslation]';


GO
PRINT N'Refreshing Function [dbo].[FN_ADMIN_STAT_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FN_ADMIN_STAT_GetList]';


GO
PRINT N'Refreshing Function [dbo].[fnGisExtendedReference]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnGisExtendedReference]';


GO
PRINT N'Refreshing Function [dbo].[fnInstitution]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnInstitution]';


GO
PRINT N'Refreshing Function [dbo].[fnReference_FullRepair]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnReference_FullRepair]';


GO
PRINT N'Refreshing Function [dbo].[fnGisReferenceRepair]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnGisReferenceRepair]';


GO
PRINT N'Refreshing Function [dbo].[fnReference_Full]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnReference_Full]';


GO
PRINT N'Refreshing Function [dbo].[fnInstitutionRepair]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnInstitutionRepair]';


GO
PRINT N'Refreshing Function [dbo].[fnGeoLocationSharedTranslation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnGeoLocationSharedTranslation]';


GO
PRINT N'Refreshing Function [dbo].[fnReferenceRepairWithNoneValue]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnReferenceRepairWithNoneValue]';


GO
PRINT N'Refreshing Function [dbo].[FN_GBL_LKUP_GISBaseReference_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FN_GBL_LKUP_GISBaseReference_GetList]';


GO
PRINT N'Refreshing Function [dbo].[fnReference]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnReference]';


GO
PRINT N'Refreshing Function [dbo].[fnReferenceRepair]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnReferenceRepair]';


GO
PRINT N'Refreshing Function [dbo].[fnAggregateCaseList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnAggregateCaseList]';


GO
PRINT N'Refreshing Function [dbo].[fnReferenceLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnReferenceLookup]';


GO
PRINT N'Refreshing Function [dbo].[fnGisReference]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnGisReference]';


GO
PRINT N'Refreshing Function [dbo].[fnDepartment]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnDepartment]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_BasicSyndromicSurveillanceReport]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_BasicSyndromicSurveillanceReport]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_HumanCasesWithSamplesAndTestsReport]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_HumanCasesWithSamplesAndTestsReport]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_VetCaseReport_Active]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_VetCaseReport_Active]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_VetCaseReport_Both]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_VetCaseReport_Both]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_VetCaseReport_Passive]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_VetCaseReport_Passive]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_VetCasesWithSamplesAndTestsReport_Active]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_VetCasesWithSamplesAndTestsReport_Active]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_VetCasesWithSamplesAndTestsReport_Both]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_VetCasesWithSamplesAndTestsReport_Both]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_VetCasesWithSamplesAndTestsReport_Passive]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_VetCasesWithSamplesAndTestsReport_Passive]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_ZoonoticDiseaseReport_Active]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_ZoonoticDiseaseReport_Active]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_ZoonoticDiseaseReport_Both]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_ZoonoticDiseaseReport_Both]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_ZoonoticDiseaseReport_Passive]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_ZoonoticDiseaseReport_Passive]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_and_Event_Tracking_AJ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_and_Event_Tracking_AJ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_and_Event_Tracking_AM]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_and_Event_Tracking_AM]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_and_Event_Tracking_EN]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_and_Event_Tracking_EN]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_and_Event_Tracking_GG]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_and_Event_Tracking_GG]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_and_Event_Tracking_KZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_and_Event_Tracking_KZ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_and_Event_Tracking_RU]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_and_Event_Tracking_RU]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_and_Event_Tracking_UA]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_and_Event_Tracking_UA]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Disease_Exposure_AJ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Disease_Exposure_AJ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Disease_Exposure_AM]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Disease_Exposure_AM]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Disease_Exposure_EN]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Disease_Exposure_EN]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Disease_Exposure_GG]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Disease_Exposure_GG]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Disease_Exposure_KZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Disease_Exposure_KZ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Disease_Exposure_RU]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Disease_Exposure_RU]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Disease_Exposure_UA]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Disease_Exposure_UA]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Persons_Place_Time_AJ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Persons_Place_Time_AJ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Persons_Place_Time_AM]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Persons_Place_Time_AM]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Persons_Place_Time_EN]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Persons_Place_Time_EN]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Persons_Place_Time_GG]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Persons_Place_Time_GG]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Persons_Place_Time_KZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Persons_Place_Time_KZ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Persons_Place_Time_RU]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Persons_Place_Time_RU]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Persons_Place_Time_UA]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Persons_Place_Time_UA]';


GO
PRINT N'Refreshing Function [dbo].[fnRepGetHumanCaseProperties]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnRepGetHumanCaseProperties]';


GO
PRINT N'Refreshing Function [dbo].[fn_HumanCase_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_HumanCase_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_HumanCase_SelectListWithDeleted]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_HumanCase_SelectListWithDeleted]';


GO
PRINT N'Refreshing Function [Report].[FN_REP_HumanCaseProperties_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[FN_REP_HumanCaseProperties_GET]';


GO
PRINT N'Refreshing Function [dbo].[FN_REP_HumanCaseProperties_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FN_REP_HumanCaseProperties_GET]';


GO
PRINT N'Refreshing Function [dbo].[fn_SiteActivationServer_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_SiteActivationServer_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_LaboratorySectionGetByFieldBarcode_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_LaboratorySectionGetByFieldBarcode_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_Organization_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_Organization_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_Organization_SelectList_ALL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_Organization_SelectList_ALL]';


GO
PRINT N'Refreshing Function [dbo].[fn_SampleTransfer_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_SampleTransfer_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fnAggregate_FindDuplicates]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnAggregate_FindDuplicates]';


GO
PRINT N'Refreshing Function [dbo].[fn_Patient_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_Patient_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_BasicSyndromicSurveillance_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_BasicSyndromicSurveillance_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_UsersAndGroups_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_UsersAndGroups_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fnAggregateSettings]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnAggregateSettings]';


GO
PRINT N'Refreshing Function [dbo].[FN_GBL_LKUP_GeoLoc_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FN_GBL_LKUP_GeoLoc_GetList]';


GO
PRINT N'Refreshing Function [dbo].[fnAccessoryCode]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnAccessoryCode]';


GO
PRINT N'Refreshing Function [dbo].[fnAddressAsRow]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnAddressAsRow]';


GO
PRINT N'Refreshing Function [dbo].[fnAddressSharedAsRow]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnAddressSharedAsRow]';


GO
PRINT N'Refreshing Function [dbo].[fnAnimalNameList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnAnimalNameList]';


GO
PRINT N'Refreshing Function [dbo].[fnASCampain_GetDiagnosisString]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnASCampain_GetDiagnosisString]';


GO
PRINT N'Refreshing Function [dbo].[fnCase_DiagnosisList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnCase_DiagnosisList]';


GO
PRINT N'Refreshing Function [dbo].[fnGeoLocationAsRow]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnGeoLocationAsRow]';


GO
PRINT N'Refreshing Function [dbo].[fnGeoLocationSharedAsRow]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnGeoLocationSharedAsRow]';


GO
PRINT N'Refreshing Function [dbo].[fn_RepositoryScheme_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_RepositoryScheme_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_DataAudit_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_DataAudit_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_Event_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_Event_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_Vector_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_Vector_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_AsCampaign_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AsCampaign_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_NextNumbers_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_NextNumbers_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_BatchTest_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_BatchTest_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_VsSession_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_VsSession_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_SecurityEventLog_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_SecurityEventLog_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_BasicSyndromicSurveillanceAggregateReport]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_BasicSyndromicSurveillanceAggregateReport]';


GO
PRINT N'Refreshing Function [dbo].[fn_SystemFunction_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_SystemFunction_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_UserGroup_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_UserGroup_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fnAnimalList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnAnimalList]';


GO
PRINT N'Refreshing Function [dbo].[fnDiagnosesAndGroups]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnDiagnosesAndGroups]';


GO
PRINT N'Refreshing Function [dbo].[fnDiagnosisRepair]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnDiagnosisRepair]';


GO
PRINT N'Refreshing Function [dbo].[fnVectorList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnVectorList]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Antibiotic_Use_and_Sample_AJ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Antibiotic_Use_and_Sample_AJ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Antibiotic_Use_and_Sample_AM]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Antibiotic_Use_and_Sample_AM]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Antibiotic_Use_and_Sample_EN]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Antibiotic_Use_and_Sample_EN]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Antibiotic_Use_and_Sample_GG]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Antibiotic_Use_and_Sample_GG]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Antibiotic_Use_and_Sample_KZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Antibiotic_Use_and_Sample_KZ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Antibiotic_Use_and_Sample_RU]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Antibiotic_Use_and_Sample_RU]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Antibiotic_Use_and_Sample_UA]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Antibiotic_Use_and_Sample_UA]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Diagnosis_AJ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Diagnosis_AJ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Diagnosis_AM]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Diagnosis_AM]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Diagnosis_EN]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Diagnosis_EN]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Diagnosis_GG]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Diagnosis_GG]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Diagnosis_KZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Diagnosis_KZ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Diagnosis_RU]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Diagnosis_RU]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Diagnosis_UA]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Diagnosis_UA]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Surveillance_Indicators_AJ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Surveillance_Indicators_AJ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Surveillance_Indicators_AM]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Surveillance_Indicators_AM]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Surveillance_Indicators_EN]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Surveillance_Indicators_EN]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Surveillance_Indicators_GG]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Surveillance_Indicators_GG]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Surveillance_Indicators_KZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Surveillance_Indicators_KZ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Surveillance_Indicators_RU]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Surveillance_Indicators_RU]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Surveillance_Indicators_UA]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Surveillance_Indicators_UA]';


GO
PRINT N'Refreshing View [dbo].[Human_Sample_and_Test_AJ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Sample_and_Test_AJ]';


GO
PRINT N'Refreshing View [dbo].[Human_Sample_and_Test_AM]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Sample_and_Test_AM]';


GO
PRINT N'Refreshing View [dbo].[Human_Sample_and_Test_EN]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Sample_and_Test_EN]';


GO
PRINT N'Refreshing View [dbo].[Human_Sample_and_Test_GG]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Sample_and_Test_GG]';


GO
PRINT N'Refreshing View [dbo].[Human_Sample_and_Test_KZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Sample_and_Test_KZ]';


GO
PRINT N'Refreshing View [dbo].[Human_Sample_and_Test_RU]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Sample_and_Test_RU]';


GO
PRINT N'Refreshing View [dbo].[Human_Sample_and_Test_UA]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Sample_and_Test_UA]';


GO
PRINT N'Refreshing Function [dbo].[fn_HumanAggregateCase_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_HumanAggregateCase_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_VetAggregateAction_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_VetAggregateAction_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_VetAggregateCase_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_VetAggregateCase_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_AggregateCase_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AggregateCase_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fnRepGetAggParams]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnRepGetAggParams]';


GO
PRINT N'Refreshing Function [dbo].[fn_AggregateCaseDeduplication_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AggregateCaseDeduplication_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_VetAggregateActionDeduplication_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_VetAggregateActionDeduplication_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_VetAggregateCaseDeduplication_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_VetAggregateCaseDeduplication_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[FN_GBL_LKUP_OutBreak_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FN_GBL_LKUP_OutBreak_GetList]';


GO
PRINT N'Refreshing Function [dbo].[fn_Outbreak_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_Outbreak_SelectList]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Epi_Investigation_AJ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Epi_Investigation_AJ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Epi_Investigation_AM]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Epi_Investigation_AM]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Epi_Investigation_EN]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Epi_Investigation_EN]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Epi_Investigation_GG]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Epi_Investigation_GG]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Epi_Investigation_KZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Epi_Investigation_KZ]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Epi_Investigation_RU]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Epi_Investigation_RU]';


GO
PRINT N'Refreshing View [dbo].[Human_Case_Epi_Investigation_UA]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Human_Case_Epi_Investigation_UA]';


GO
PRINT N'Refreshing Function [dbo].[fn_AVR_HumanCaseReport]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_AVR_HumanCaseReport]';


GO
PRINT N'Refreshing Function [dbo].[fn_HumanCaseDeduplicationWeb_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_HumanCaseDeduplicationWeb_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_HumanCaseDeduplication_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_HumanCaseDeduplication_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_SampleDestruction_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_SampleDestruction_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fnSampleListOptimized]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnSampleListOptimized]';


GO
PRINT N'Refreshing Function [dbo].[fn_Statistic_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_Statistic_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_Farm_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_Farm_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_VetCase_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_VetCase_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_Sample_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_Sample_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_GetRayonStatInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_GetRayonStatInfo]';


GO
PRINT N'Refreshing Function [dbo].[fnTestListOptimized]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnTestListOptimized]';


GO
PRINT N'Refreshing Function [dbo].[fn_LabTest_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_LabTest_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_SampleLogBook_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_SampleLogBook_SelectList]';


GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Session_GetDetail]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Session_GetDetail
-- Description: Gets the details of an outbreak session.
--          
-- Author: Doug Albanese
--
-- Revision History:
-- Name                 Date       Change Detail
-- -------------------- ---------- ---------------------------------------------------------------
-- Doug Albanese        08/30/2021 Refactored to work with "AdminLevel" identifiers.
-- Doug Albanese        09/02/2021 Changed the output to match with the model used within the 
--                                 Location user control
-- Doug Albanese        09/10/2021 Change to correct a model property issue
-- Doug Albanese        09/14/2021 Refactored to use all location fields from hierarchy
-- Doug Albanese        09/27/2021 Cleaned up administration levels to reflect "Admin" instead of 
--                                 static name
-- Doug Albanese        10/21/2021 Corrected the return of the AdminLevel3 value
-- Doug Albanese        02/16/2022 Refactored to use function calls for "Repair"
-- Stephen Long         06/28/2022 Modified description and changed references types to use the 
--                                 national value instead of default.
-- Doug Albanese		03/15/2023 Change over from idfGeoLocation to idfsLocation
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Session_GetDetail]
(    
	@LangID			NVARCHAR(50),
	@idfOutbreak	BIGINT
)
AS

BEGIN    

	DECLARE	@returnCode								INT = 0;
	DECLARE @returnMsg								NVARCHAR(MAX) = 'SUCCESS';

	BEGIN TRY
		SELECT
			idfOutbreak,
			idfsDiagnosisOrDiagnosisGroup,
			D.name AS [strDiagnosis],
			idfsOutbreakStatus,
			os.name AS strOutbreakStatus,
			OutbreakTypeId,
			ot.name AS strOutbreakType,
			lh.AdminLevel1ID AS AdminLevel0Value,
			lh.AdminLevel2ID AS AdminLevel1Value,
			lh.AdminLevel2Name AS AdminLevel1Text,
			lh.AdminLevel3ID AS AdminLevel2Value,
			lh.AdminLevel3Name AS AdminLevel2Text,
			lh.AdminLevel4ID AS AdminLevel3Value,
			lh.AdminLevel4Name AS AdminLevel3Text,
			datStartDate,
			datFinishDate AS datCloseDate,
			strOutbreakID,
			o.strDescription,
			o.intRowStatus,
			o.rowguid,
			o.datModificationForArchiveDate,
			idfPrimaryCaseOrSession,
			o.idfsSite,
			o.strMaintenanceFlag,
			o.strReservedAttribute
		FROM
			dbo.tlbOutbreak o
        LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lh				    ON lh.idfsLocation = o.idfsLocation
		INNER JOIN	dbo.FN_GBL_Repair(@LangID, 19000019) D								ON	D.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
		INNER JOIN	dbo.FN_GBL_Repair(@LangID,19000063) os								ON	os.idfsReference = o.idfsOutbreakStatus
		INNER JOIN	dbo.FN_GBL_Repair(@LangID,19000513) ot								ON	ot.idfsReference = o.OutbreakTypeId
		WHERE
			idfOutbreak = @idfOutbreak;

	END TRY
	BEGIN CATCH
		SET		@returnCode = ERROR_NUMBER();
		SET		@returnMsg = 
					'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) 
					+ ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY())
					+ ' ErrorState: ' + CONVERT(VARCHAR,ERROR_STATE())
					+ ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '')
					+ ' ErrorLine: ' +  CONVERT(VARCHAR, ISNULL(ERROR_LINE(), ''))
					+ ' ErrorMessage: '+ ERROR_MESSAGE();
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Session_GetList]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Session_GetList
--
-- Description: Get a list of outbreak sessions for the outbreak module.
--          
-- Author: Doug Albanese
--
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Lamont Mitchell 01/09/2019 Removed ReturnCode and Return Message
-- Stephen Long	   01/13/2020 Changed from strDefault to name to pick up language translation.
-- Stephen Long	   01/26/2020 Added site list parameter for site filtration.
-- Stephen Long	   05/19/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long	   11/18/2020 Added site ID to the query.
-- Stephen Long	   11/27/2020 Added configurable site filtration rules.
-- Stephen Long	   12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long	   12/24/2020 Modified join on disease filtration default role rule.  Changed 
--                            function call to bring back inactive outbreak status and type to 
--                            handle v6.1 data that has been made obsolete.
-- Stephen Long	   12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long	   04/04/2021 Added updated pagination and location hierarchy.
-- Stephen Long	   08/16/2021 Added gisLocation and location joins where IsDescendent is called.
-- Doug Albanese   11/17/2021 Fixed the default range for returning Outbreak for the past year only.
-- Doug Albanese   12/03/2021 Integrated the new FN_GBL_LocationHierarchy_Flattened for use with 
--                             the Location Hierarchy
-- Stephen Long    03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Doug Albanese   05/16/2022 Corrected Date Range, when not passed. This causes other searches 
--                            not to work well.
-- Stephen Long    06/03/2022 Updated to point default access rules to base reference.
-- Doug Albanese   01/10/2023 Changed the default sorting to correctly sort for "Status" and then 
--                            "Start Date"
-- Stephen Long    01/11/2023 Updated for site filtration queries.
-- Doug Albanese   01/12/2023 Further correction on default sorting on initial load.
-- Stephen Long    01/14/2023 Fix on site filtration queries; added site permission table 
--                            variables.
-- Doug Albanese   01/25/2023 Added logic to exclude migration status in the base reference
-- Doug Albanese   01/25/2023 Included "intOrder" for Outbreak Status to correctly order the initial 
--                            listing of sessions
-- Doug Albanese   02/10/2023 Change the "Quick Search" to operate against "Name" instead of 
--                            "Default"
-- Doug Albanese   03/10/2023 Defect 5586: Migrated data, with foreign addresses, are not 
--                            searchable.
-- Doug Albanese   03/15/2023 Changes to swap out idfGeoLocation with idfsLocation
-- Stephen Long    04/03/2023 Fixes for bug #5511.
--
-- exec [dbo].[USP_OMM_Session_GetList] @LanguageId = 'en-us', @UserSiteId = 0, @UserOrganizationID = 0, @UserEmployeeId = 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Session_GetList]
(
    @LanguageID NVARCHAR(50),
    @OutbreakID NVARCHAR(200) = NULL,
    @OutbreakTypeID BIGINT = NULL,
    @SearchDiagnosesGroup BIGINT = NULL,
    @StartDateFrom DATETIME = NULL,
    @StartDateTo DATETIME = NULL,
    @OutbreakStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @QuickSearch NVARCHAR(200) = '',
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'INIT',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT = (@PageNumber - 1) * @pagesize,
            @lastRec INT = (@PageNumber * @pageSize + 1),
            @AdministrativeLevelNode AS HIERARCHYID,
            @RuleActiveStatus INT = 0,
            @AdministrativeLevelTypeID INT,
            @OrganizationAdministrativeLevelNode HIERARCHYID;
    DECLARE @DefaultAccessRules AS TABLE
    (
        AccessRuleID BIGINT NOT NULL,
        ActiveIndicator INT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        AdministrativeLevelTypeID INT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FilteredResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID)
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        IF @QuickSearch = ''
           OR @QuickSearch IS NULL
        BEGIN
            -- ========================================================================================
            -- NO CONFIGURABLE FILTRATION RULES APPLIED
            --
            -- For first and second level sites, do not apply any site configurable rules.
            -- ========================================================================================
            IF @ApplySiteFiltrationIndicator = 0
            BEGIN
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          );
            END
            ELSE
            BEGIN
                -- =======================================================================================
                -- CONFIGURABLE FILTRATION RULES
                -- 
                -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
                -- overlap the default rules.
                -- =======================================================================================
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          );

                -- =======================================================================================
                -- DEFAULT CONFIGURABLE FILTRATION RULES
                --
                -- Apply active default configurable filtration rules for third level sites.
                -- =======================================================================================
                INSERT INTO @DefaultAccessRules
                SELECT AccessRuleID,
                       a.intRowStatus,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator,
                       a.AdministrativeLevelTypeID
                FROM dbo.AccessRule a
                WHERE AccessRuleID = 10537022;

                SELECT @RuleActiveStatus = ActiveIndicator
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537022;

                IF @RuleActiveStatus = 0
                BEGIN
                    SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                    FROM @DefaultAccessRules
                    WHERE AccessRuleID = 10537022;

                    SELECT @AdministrativeLevelNode
                        = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                    WHERE o.idfOffice = @UserOrganizationID
                          AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                    -- Administrative level specified in the rule of the site where the session was created.
                    INSERT INTO @FilteredResults
                    SELECT ob.idfOutbreak,
                           a.ReadPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           a.WritePermissionIndicator,
                           a.DeletePermissionIndicator
                    FROM dbo.tlbOutbreak ob
                        INNER JOIN dbo.tstSite s
                            ON ob.idfsSite = s.idfsSite
                        INNER JOIN dbo.tlbOffice o
                            ON o.idfOffice = s.idfOffice
                               AND o.intRowStatus = 0
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                               AND l.intRowStatus = 0
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                        INNER JOIN @DefaultAccessRules a
                            ON a.AccessRuleID = 10537022
                    WHERE ob.intRowStatus = 0
                          AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
                END;

                --
                -- Apply at the user's site group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                        ON userSiteGroup.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's employee group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's ID level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup sgs
                        ON sgs.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND sgs.idfsSite = o.idfsSite;

                -- 
                -- Apply at the user's site level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's employee group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's ID level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- Copy filtered results to results and use search criteria
                INSERT INTO @Results
                SELECT ID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator
                FROM @FilteredResults
                    INNER JOIN dbo.tlbOutbreak o
                        ON o.idfOutbreak = ID
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          )
                GROUP BY ID,
                         ReadPermissionIndicator,
                         AccessToPersonalDataPermissionIndicator,
                         AccessToGenderAndAgeDataPermissionIndicator,
                         WritePermissionIndicator,
                         DeletePermissionIndicator;
            END;

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================		
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND oa.idfActor = -506 -- Default role
                        );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND o.intRowStatus = 0
                  AND oa.idfActor = egm.idfEmployeeGroup
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE o.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND o.intRowStatus = 0
                  AND oa.idfActor = @UserEmployeeID
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1 -- Deny permission
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND idfActor = @UserEmployeeID
                        );

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================		
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT o.idfOutbreak
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = o.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE o.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserGroupSitePermissions WHERE SiteID = o.idfsSite
            )
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = o.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003; -- Read permission

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserSitePermissions WHERE SiteID = o.idfsSite
            )
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN @UserSitePermissions usp
                                    ON usp.SiteID = o.idfsSite
                            WHERE usp.Permission = 4 -- Deny permission
                                  AND usp.PermissionTypeID = 10059003 -- Read permission
                        );
        END
        ELSE
        BEGIN
            -- ========================================================================================
            -- NO CONFIGURABLE FILTRATION RULES APPLIED
            --
            -- For first and second level sites, do not apply any configurable filtration rules.
            -- ========================================================================================
            IF @ApplySiteFiltrationIndicator = 0
            BEGIN
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.name LIKE '%' + @QuickSearch + '%'
                              OR ot.name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          );
            END
            ELSE
            BEGIN
                -- =======================================================================================
                -- CONFIGURABLE FILTRATION RULES
                -- 
                -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
                -- overlap the default rules.
                -- =======================================================================================
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.name LIKE '%' + @QuickSearch + '%'
                              OR ot.name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          );

                -- =======================================================================================
                -- DEFAULT CONFIGURABLE FILTRATION RULES
                --
                -- Apply active default configurable filtration rules for third level sites.
                -- =======================================================================================
                INSERT INTO @DefaultAccessRules
                SELECT AccessRuleID,
                       a.intRowStatus,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator,
                       a.AdministrativeLevelTypeID
                FROM dbo.AccessRule a
                WHERE AccessRuleID = 10537022;

                SELECT @RuleActiveStatus = ActiveIndicator
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537022;

                IF @RuleActiveStatus = 0
                BEGIN
                    SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                    FROM @DefaultAccessRules
                    WHERE AccessRuleID = 10537022;

                    SELECT @AdministrativeLevelNode
                        = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                    WHERE o.idfOffice = @UserOrganizationID
                          AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                    -- Administrative level specified in the rule of the site where the session was created.
                    INSERT INTO @FilteredResults
                    SELECT ob.idfOutbreak,
                           a.ReadPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           a.WritePermissionIndicator,
                           a.DeletePermissionIndicator
                    FROM dbo.tlbOutbreak ob
                        INNER JOIN dbo.tstSite s
                            ON ob.idfsSite = s.idfsSite
                        INNER JOIN dbo.tlbOffice o
                            ON o.idfOffice = s.idfOffice
                               AND o.intRowStatus = 0
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                               AND l.intRowStatus = 0
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                        INNER JOIN @DefaultAccessRules a
                            ON a.AccessRuleID = 10537022
                    WHERE ob.intRowStatus = 0
                          AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
                END;

                --
                -- Apply at the user's site group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                        ON userSiteGroup.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's employee group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's ID level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup sgs
                        ON sgs.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND sgs.idfsSite = o.idfsSite;

                -- 
                -- Apply at the user's site level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's employee group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's ID level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- Copy filtered results to results and use search criteria
                INSERT INTO @Results
                SELECT ID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator
                FROM @FilteredResults
                    INNER JOIN dbo.tlbOutbreak o
                        ON o.idfOutbreak = ID
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.name LIKE '%' + @QuickSearch + '%'
                              OR ot.name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          )
                GROUP BY ID,
                         ReadPermissionIndicator,
                         AccessToPersonalDataPermissionIndicator,
                         AccessToGenderAndAgeDataPermissionIndicator,
                         WritePermissionIndicator,
                         DeletePermissionIndicator;
            END;

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================		
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND oa.idfActor = -506 -- Default role
                        );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE oa.intPermission = 2 -- Allow permission
                  AND o.intRowStatus = 0
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE oa.intPermission = 2 -- Allow permission
                  AND o.intRowStatus = 0
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1 -- Deny permission
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND idfActor = @UserEmployeeID
                        );

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================		
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT o.idfOutbreak
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = o.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE o.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserGroupSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = o.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003; -- Read permission

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN @UserSitePermissions usp
                                    ON usp.SiteID = o.idfsSite
                            WHERE usp.Permission = 4 -- Deny permission
                                  AND usp.PermissionTypeID = 10059003 -- Read permission
                        );
        END;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY ID;
		
        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'OutbreakID'
                                                        AND @SortOrder = 'ASC' THEN
                                          (os.name + ' ' + o.strOutbreakID)
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakID'
                                                        AND @SortOrder = 'DESC' THEN
                                               (os.name + ' ' + o.strOutbreakID)
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       os.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       os.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ot.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ot.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel1Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel1Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel4Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel4Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel4Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel4Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel5Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel5Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel5Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel5Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel6Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel6Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel6Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel6Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel7Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel7Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel7Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel7Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       d.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       d.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       o.datStartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       o.datStartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'INIT' THEN
                                                       CAST(os.intOrder AS NVARCHAR) + ',' + CONVERT(NVARCHAR, o.datStartDate, 12) + ' DESC'
                                               END DESC
                                     ) AS ROWNUM,
                   ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
           )
        SELECT paging.ROWNUM,
               o.idfOutbreak,
               strOutbreakID AS OutbreakID,
               d.name AS DiseaseName,
               os.name AS OutbreakStatusTypeName,
               ot.name AS OutbreakTypeName,
               lh.AdminLevel1Name AS AdministrativeLevel1Name,
               lh.AdminLevel2Name AS AdministrativeLevel2Name,
               lh.AdminLevel3Name AS AdministrativeLevel3Name,
               lh.AdminLevel4Name AS AdministrativeLevel4Name,
               lh.AdminLevel5Name AS AdministrativeLevel5Name,
               lh.AdminLevel6Name AS AdministrativeLevel6Name,
               lh.AdminLevel7Name AS AdministrativeLevel7Name,
               o.datStartDate AS StartDate,
               o.idfsSite AS SiteID,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               c AS RecordCount,
               (
                   SELECT COUNT(*) FROM dbo.tlbOutbreak WHERE intRowStatus = 0
               ) AS TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
        FROM @FinalResults res
            INNER JOIN paging
                ON paging.ID = res.ID
            INNER JOIN dbo.tlbOutbreak o
                ON o.idfOutbreak = res.ID
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
			LEFT JOIN FN_GBL_LocationHierarchy_Flattened (@LanguageID) lh
                ON lh.idfsLocation = o.idfsLocation
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                ON ot.idfsReference = o.OutbreakTypeId
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        ORDER BY paging.ROWNUM;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_DISEASE_GETDetail]...';


GO
--*************************************************************
-- Name 				: USP_HUM_DISEASE_GETDetail
-- Description			: List Human Disease Report
--          
-- Author               : Mandar Kulkarni
-- Revision History
-- Name	Date		Change Detail
-- JWJ	20180418	Added cols for hum disease summary section of the hum disease page
-- HAP  20180801    Added columns DiseaseReportTypeID and strMonitoringSessionID to be returned
-- HAP  20181102    Added column LegacyCaseID to be returned 
-- HAP  20181130    Added columns blnClinicalDiagBasis, blnLabDiagBasis, blnEpiDiagBasis, DateofClassification, idfsYNExposureLocationKnown to be returned
-- HAP  20181207    Added column tlbOutBreak.strOutbreakID to be returned
-- HAP  20181213    Removed VaccinationName and VaccinationDate columns to be returned
-- HAP  20190210    Added column idfCSObservation to be returned for Flex Form integration
-- HAP  20190409    Added columns parentHumanDiseaseReportID and relatedHumanDiseaseReportIdList to be returned for use case HUC11 Changed Diagnosis Human Disease Report​ 
-- HAP  20190614    Added columns for Point location values to be returned
-- HAP  20190629    Added column strPointForeignAddress to be returned
-- SLV	20190703	Removed redundant call to FN_GBL_ReferenceRepair
-- Ann Xiong	   09/12/2019 Added script to select PatientStatus, HospitalName, PreviouslySoughtCare, 
--                            YNSpecificVaccinationAdministered, YNSpecimenCollected, YNExposureLocationKnown, 
--                            ExposureLocationType, ExposureLocationDescription, Country, Settlement for Human Disease Report Deduplication.
-- Ann Xiong	   09/13/2019 Modified SP to replace InitialCaseClassification.idfsReferenceType = 19000111 with InitialCaseClassification.idfsReferenceType = 19000011,
-- 							  replace NonNotifiableDiagnosis.idfsReferenceType = 19000019 with NonNotifiableDiagnosis.idfsReferenceType = 19000149
-- Ann Xiong	   09/16/2019 Modified SP to replace SoughtCareFacility.name as strSoughtCareFacility with tlbHumanCase.strSoughtCareFacility
-- 							  replace HospitalizationStatus.idfsReferenceType = 19000100 with HospitalizationStatus.idfsReferenceType = 19000041
-- Stephen Long    10/02/2019 Changed select person calls over to left joins to person.  POCO was not generating with the function call.
-- Ann Xiong	   03/13/2020 Uncommented 10 fields of Human Disease Report Deduplication were commented out
-- LM				06/07/2020 Updated Selecting Connected Disease Reports
-- LM				11/02/2020 Added strNotCollectedReason To Ouput
-- Mark Wilson		12/22/2020 Changed Institution join to E7 SP
-- Mike Kornegay	09/23/2021 Removed duplicate fields from select.
-- Mark Wilson		09/23/2021 Fixed Locations and offices
-- Mark Wilson		10/01/2021 updated join to gisLocation
-- Minal Shah	    10/22/2021 Added strGroundType, dblPointAccuracy and dblPointAlignment
-- Minal Shah		11/03/2021 Added blnInitialSSD and blnFinalSSD columns
-- Minal Shah		01/25/2021 Replaced long name to org abbrev
-- Stephen Long     01/16/2023 Fixes to use translated values on reference types.
-- Mani Govindarajan 03/20/2023 Added idfParentMonitoringSession in output
-- Testing code:
-- 
/* 
EXEC USP_HUM_DISEASE_GETDetail 'en-US', 71413

*/
--*************************************************************
ALTER PROCEDURE [dbo].[USP_HUM_DISEASE_GETDetail]
(
    @LangID NVARCHAR(50),
    @SearchHumanCaseId BIGINT = NULL
)
AS
BEGIN
    BEGIN TRY
        SET NOCOUNT ON;

        DECLARE @ReturnMessage VARCHAR(MAX) = 'Success';
        DECLARE @ReturnCode BIGINT = 0;
        --Declare @ConnectedReports Varchar(Max);
        --		Select @ConnectedReports = ( SELECT ',' + CAST(RelatedToHumanDiseaseReportIdRoot AS VARCHAR)  + '-' +  (Select strCaseId from tlbhumancase where idfHumancase =  RelatedToHumanDiseaseReportIdRoot)
        --		From  dbo.HumanDiseaseReportRelationship where RelatedToHumanDiseaseReportIdRoot =  @SearchHumanCaseId)
        DECLARE @parentHumanCaseId int
        DECLARE @ParentCaseId int
        DECLARE @ChildCaseId int
        SET @ParentCaseId =
        (
            SELECT TOP 1
                RelatedToHumanDiseaseReportIdRoot
            FROM dbo.HumanDiseaseReportRelationship
            WHERE (HumanDiseaseReportID = @SearchHumanCaseId)
        )
        SET @ChildCaseId =
        (
            SELECT TOP 1
                HumanDiseaseReportID
            FROM dbo.HumanDiseaseReportRelationship
            WHERE (RelatedToHumanDiseaseReportIdRoot = @SearchHumanCaseId)
        )
        SELECT hc.idfHumanCase,
               NULL AS parentHumanDiseaseReportID,     --HumanDiseaseReportRelationship.RelateToHumanDiseaseReportID as parentHumanDiseaseReportID,  
               (
                   SELECT DISTINCT
                       STUFF(
                       (
                           SELECT ',' + CAST(t2.RelatedToHumanDiseaseReportIdRoot AS VARCHAR) + '-' +
                                  (
                                      SELECT strCaseId
                                      FROM dbo.tlbhumancase
                                      WHERE idfHumancase = t2.RelatedToHumanDiseaseReportIdRoot
                                  )
                           FROM dbo.HumanDiseaseReportRelationship t2
                           WHERE t2.RelatedToHumanDiseaseReportIdRoot = @ParentCaseId -- (Select top 1 RelatedToHumanDiseaseReportIdRoot  from HumanDiseaseReportRelationship where (HumanDiseaseReportID = @SearchHumanCaseId) )
                                 --AND ((t2.RelateToHumanDiseaseReportID = hc.idfHumanCase) or (t2.HumanDiseaseReportID = hc.idfHumanCase)))
                                 AND t2.intRowStatus = 0
                           FOR XML PATH('')
                       ),
                       1,
                       1,
                       ''
                            )
                   FROM dbo.HumanDiseaseReportRelationship t1
               --NULL
               ) AS relatedParentHumanDiseaseReportIdList,
               (
                   SELECT DISTINCT
                       STUFF(
                       (
                           SELECT ',' + CAST(t2.HumanDiseaseReportID AS VARCHAR) + '-' +
                                  (
                                      SELECT strCaseId
                                      FROM dbo.tlbhumancase
                                      WHERE idfHumancase = t2.HumanDiseaseReportID
                                  )
                           FROM dbo.HumanDiseaseReportRelationship t2
                           WHERE t2.HumanDiseaseReportID = @ChildCaseId -- (Select top 1 RelatedToHumanDiseaseReportIdRoot  from HumanDiseaseReportRelationship where (HumanDiseaseReportID = @SearchHumanCaseId) )
                                 --AND ((t2.RelateToHumanDiseaseReportID = hc.idfHumanCase) or (t2.HumanDiseaseReportID = hc.idfHumanCase)))
                                 AND t2.intRowStatus = 0
                           FOR XML PATH('')
                       ),
                       1,
                       1,
                       ''
                            )
                   FROM dbo.HumanDiseaseReportRelationship t1
               --NULL
               ) AS relatedChildHumanDiseaseReportIdList,
               hc.idfHuman,
               hc.idfsHospitalizationStatus,
               hc.idfsYNSpecimenCollected,
               hc.idfsHumanAgeType,
               hc.idfsYNAntimicrobialTherapy,
               hc.idfsYNHospitalization,
               hc.idfsYNRelatedToOutbreak,
               hc.idfsOutCome,
               hc.idfsInitialCaseStatus,
               hc.idfsFinalDiagnosis,
               FinalDiagnosis.name AS strFinalDiagnosis,
               hc.idfsFinalCaseStatus,
               FinalCaseClassification.name AS strFinalCaseStatus,
               hc.idfSentByOffice,
               hc.idfInvestigatedByOffice,
               hc.idfReceivedByOffice,
               hc.idfEpiObservation,
               hc.idfCSObservation,
               hc.datNotificationDate,
               hc.datCompletionPaperFormDate,
               hc.datFirstSoughtCareDate,
               hc.datHospitalizationDate,
               hc.datFacilityLastVisit,
               hc.datExposureDate,
               hc.datDischargeDate,
               hc.datOnSetDate,
               hc.datInvestigationStartDate AS StartDateofInvestigation,
               hc.datFinalDiagnosisDate AS datDateOfDiagnosis,
               hc.datFinalDiagnosisDate,
               hc.strNote,
               hc.strCurrentLocation,
               hc.strHospitalizationPlace,
               hc.strLocalIdentifier,
               SoughtByOfficeRef.name AS strSoughtCareFacility,
               hc.strSentByFirstName,
               hc.strSentByPatronymicName,
               hc.strSentByLastName,
               hc.strReceivedByFirstName,
               hc.strReceivedByPatronymicName,
               hc.strReceivedByLastName,
               hc.strEpidemiologistsName,
               hc.strClinicalDiagnosis,
               hc.strClinicalNotes,
               hc.strSummaryNotes,
               hc.intPatientAge,
               hc.blnClinicalDiagBasis,
               hc.blnLabDiagBasis,
               hc.blnEpiDiagBasis,
               hc.idfPersonEnteredBy,
               hc.idfPointGeoLocation,
               gl.idfsGroundType AS idfsPointGroundType,
               gl.idfsGeoLocationType AS idfsPointGeoLocationType,
               gl.idfsCountry AS idfsPointCountry,
               gl.idfsRegion AS idfsPointRegion,
               gl.idfsRayon AS idfsPointRayon,
               gl.idfsSettlement AS idfsPointSettlement,
               gl.dblDistance AS dblPointDistance,
               gl.dblLatitude AS dblPointLatitude,
               gl.dblLongitude AS dblPointLongitude,
               gl.dblElevation AS dblPointElevation,
               gl.dblAlignment AS dblPointAlignment,
               gl.dblAccuracy AS dblPointAccuracy,
               gl.strForeignAddress AS strPointForeignAddress,
               hc.idfSentByPerson,
               hc.idfReceivedByPerson,
               hc.idfInvestigatedByPerson,
               hc.idfsYNTestsConducted,
               hc.idfSoughtCareFacility,
               hc.idfsNonNotifiableDiagnosis,
               NonNotifiableDiagnosisRef.name AS stridfsNonNotifiableDiagnosis,
               hc.idfOutbreak,
               hc.strCaseId,
               hc.idfsCaseProgressStatus,
               hc.idfsSite,
               hc.strSampleNotes,
               hc.uidOfflineCaseID,
               hc.datFinalCaseClassificationDate,
               hc.idfHospital,
               hc.idfsYNSpecificVaccinationAdministered,
               hc.idfsNotCollectedReason,
               hc.strNotCollectedReason,
               hc.idfsYNPreviouslySoughtCare,
               hc.idfsYNExposureLocationKnown,
               hc.datEnteredDate,
               hc.datModificationDate,
               hc.idfsFinalDiagnosis AS idfsDiagnosis, --possible duplicate
               hc.idfsFinalState,
               hc.DiseaseReportTypeID,
               ReportTypeRef.name AS 'ReportType',
               hc.LegacyCaseID,
               hc.datFinalCaseClassificationDate AS DateofClassification,
               o.strOutbreakID,
               o.strDescription,
               h.strPersonId,
               h.datDateOfDeath,
               RegionRef.[name] AS Region,
               RayonRef.[name] AS Rayon,
               HumanAgeRef.[name] AS HumanAgeType,
               OutcomeRef.[name] AS Outcome,
               NonNotifiableDiagnosisRef.[name] AS NonNotifiableDiagnosis,
               NotCollectedReasonRef.[name] AS NotCollectedReason,
               CaseProgressStatusRef.[name] AS CaseProgressStatus,
               SpecificVaccinationAdministered.[name] AS YNSpecificVaccinationAdministered,
               PreviouslySoughtCareRef.[name] AS PreviouslySoughtCare,
               ExposureLocationKnown.[name] AS YNExposureLocationKnown,
               HospitalizationStatusRef.[name] AS HospitalizationStatus,
               Hospitalization.[name] AS YNHospitalization,
               AntimicrobialTherapy.[name] AS YNAntimicrobialTherapy,
               SpecimenCollection.[name] AS YNSpecimenCollected,
               RelatedToOutBreak.[name] AS YNRelatedToOutBreak,
               tentativeDiagnosisRef.[name] AS TentativeDiagnosis,
               FinalDiagnosis.[name] AS SummaryIdfsFinalDiagnosis,
               InitialCaseClassification.[name] AS InitialCaseStatus,
               FinalCaseClassification.[name] AS FinalCaseStatus,
               SentByOfficeRef.LongName AS SentByOffice,
               ReceivedByOfficeRef.LongName AS ReceivedByOffice,
               HospitalRef.LongName AS HospitalName,
               InvestigateByOfficeRef.LongName AS InvestigatedByOffice,
               TestConducted.[name] AS YNTestConducted,
               MonitoringSession.strMonitoringSessionID,
               ExposureLocationTypeRef.[name] AS ExposureLocationType,
               groundTypeRef.[name] AS strGroundType,
               gl.strDescription AS ExposureLocationDescription,
               ISNULL(FinalCaseClassification.[name], InitialCaseClassification.[name]) AS SummaryCaseClassification,
               ISNULL(sentByPersonRef.strFamilyName, N'') + ISNULL(' ' + sentByPersonRef.strFirstName, '')
               + ISNULL(' ' + sentByPersonRef.strSecondName, '') AS SentByPerson,
               ISNULL(receivedByPersonRef.strFamilyName, N'') + ISNULL(' ' + receivedByPersonRef.strFirstName, '')
               + ISNULL(' ' + receivedByPersonRef.strSecondName, '') AS ReceivedByPerson,
               ISNULL(investigatedByPersonRef.strFamilyName, N'')
               + ISNULL(' ' + investigatedByPersonRef.strFirstName, '')
               + ISNULL(' ' + investigatedByPersonRef.strSecondName, '') AS InvestigatedByPerson,
               dbo.fnConcatFullName(
                                       personEnteredByRef.strFamilyName,
                                       personEnteredByRef.strFirstName,
                                       personEnteredByRef.strSecondName
                                   ) AS EnteredByPerson,
               tlbEnteredByOffice.name AS strOfficeEnteredBy,
               tlbEnteredByOffice.idfOffice AS idfOfficeEnteredBy,
               SentByOfficeRef.name AS strNotificationSentby,
               '' AS strNotificationReceivedby,
               PatientState.[name] AS PatientStatus,
               CountryRef.[name] AS Country,
               SettlementRef.[name] AS Settlement,
               ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
               addinfo.EIDSSPersonID AS EIDSSPersonID,
               ha.idfHumanActual AS HumanActualId,
               initialSyndromicSurveielanceDiseases.blnSyndrome AS blnInitialSSD,
               finalSyndromicSurveielanceDiseases.blnSyndrome AS blnFinalSSD,
               relatedTo.RelateToHumanDiseaseReportID AS RelateToHumanDiseaseReportID,
               relatedToReport.strCaseID AS RelatedToHumanDiseaseEIDSSReportID,
               connectedTo.HumanDiseaseReportID AS ConnectedDiseaseReportID,
               connectedToReport.strCaseID AS ConnectedDiseaseEIDSSReportID,
			   hc.idfParentMonitoringSession
        FROM dbo.tlbHumanCase hc WITH (NOLOCK)
            LEFT JOIN dbo.tlbOutbreak AS o
                ON o.idfOutbreak = hc.idfOutbreak
            LEFT JOIN dbo.tlbHuman AS h
                ON h.idfHuman = hc.idfHuman
            LEFT JOIN dbo.tlbHumanActual AS ha
                ON ha.idfHumanActual = h.idfHumanActual
                   AND h.intRowStatus = 0
            LEFT JOIN dbo.HumanActualAddlInfo AS addinfo
                ON addinfo.HumanActualAddlInfoUID = h.idfHumanActual
                   AND addinfo.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation AS gl
                ON gl.idfGeoLocation = hc.idfPointGeoLocation
                   AND gl.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS sentByPersonRef
                ON sentByPersonRef.idfPerson = hc.idfSentByPerson
                   AND sentByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS receivedByPersonRef
                ON receivedByPersonRef.idfPerson = hc.idfReceivedByPerson
                   AND receivedByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS investigatedByPersonRef
                ON investigatedByPersonRef.idfPerson = hc.idfInvestigatedByPerson
                   AND investigatedByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS personEnteredByRef
                ON personEnteredByRef.idfPerson = hc.idfPersonEnteredBy
                   AND personEnteredByRef.intRowStatus = 0
            LEFT JOIN dbo.gisLocation L
                ON L.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS CountryRef
                ON L.node.IsDescendantOf(CountryRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS RegionRef
                ON L.node.IsDescendantOf(RegionRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS RayonRef
                ON L.node.IsDescendantOf(RayonRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS SettlementRef
                ON L.node.IsDescendantOf(SettlementRef.node) = 1
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042) AS HumanAgeRef
                ON HumanAgeRef.idfsReference = hc.idfsHumanAgeType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000064) AS OutcomeRef
                ON OutcomeRef.idfsReference = hc.idfsOutcome
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS FinalDiagnosis
                ON FinalDiagnosis.idfsReference = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011) AS InitialCaseClassification
                ON InitialCaseClassification.idfsReference = hc.idfsInitialCaseStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011) AS FinalCaseClassification
                ON FinalCaseClassification.idfsReference = hc.idfsFinalCaseStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000149) AS NonNotifiableDiagnosisRef
                ON NonNotifiableDiagnosisRef.idfsReference = hc.idfsNonNotifiableDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000144) AS ReportTypeRef
                ON ReportTypeRef.idfsReference = hc.DiseaseReportTypeID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS NotCollectedReasonRef
                ON NotCollectedReasonRef.idfsReference = hc.idfsNotCollectedReason
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000111) CaseProgressStatusRef
                ON CaseProgressStatusRef.idfsReference = hc.idfsCaseProgressStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS SpecificVaccinationAdministered
                ON SpecificVaccinationAdministered.idfsReference = hc.idfsYNSpecificVaccinationAdministered
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS PreviouslySoughtCareRef
                ON PreviouslySoughtCareRef.idfsReference = hc.idfsYNPreviouslySoughtCare
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS ExposureLocationKnown
                ON ExposureLocationKnown.idfsReference = hc.idfsYNExposureLocationKnown
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000041) AS HospitalizationStatusRef
                ON HospitalizationStatusRef.idfsReference = hc.idfsHospitalizationStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS Hospitalization
                ON Hospitalization.idfsReference = hc.idfsYNHospitalization
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS AntimicrobialTherapy
                ON AntimicrobialTherapy.idfsReference = hc.idfsYNAntimicrobialTherapy
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS SpecimenCollection
                ON SpecimenCollection.idfsReference = hc.idfsYNSpecimenCollected
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS RelatedToOutBreak
                ON RelatedToOutBreak.idfsReference = hc.idfsYNRelatedToOutbreak
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000036) AS ExposureLocationTypeRef
                ON ExposureLocationTypeRef.idfsReference = gl.idfsGeoLocationType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS tentativeDiagnosisRef
                ON tentativeDiagnosisRef.idfsReference = hc.idfsTentativeDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000038) AS groundTypeRef
                ON groundTypeRef.idfsReference = gl.idfsGroundType
            LEFT JOIN dbo.tlbOffice RBO
                ON RBO.idfOffice = hc.idfReceivedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) ReceivedByOfficeRef
                ON ReceivedByOfficeRef.idfsReference = RBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice IBO
                ON IBO.idfOffice = hc.idfInvestigatedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) InvestigateByOfficeRef
                ON InvestigateByOfficeRef.idfsReference = IBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice SBO
                ON SBO.idfOffice = hc.idfSentByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SentByOfficeRef
                ON SentByOfficeRef.idfsReference = SBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice SoughtByOffice
                ON SBO.idfOffice = hc.idfSoughtCareFacility
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SoughtByOfficeRef
                ON SoughtByOfficeRef.idfsReference = SoughtByOffice.idfsOfficeAbbreviation
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS TestConducted
                ON TestConducted.idfsReference = hc.idfsYNTestsConducted
            LEFT JOIN dbo.tlbMonitoringSession AS MonitoringSession
                ON MonitoringSession.idfMonitoringSession = hc.idfParentMonitoringSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000035) AS PatientState
                ON PatientState.idfsReference = hc.idfsFinalState
            LEFT JOIN dbo.tlbOffice Hospital
                ON Hospital.idfOffice = hc.idfHospital
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) HospitalRef
                ON HospitalRef.idfsReference = Hospital.idfsOfficeAbbreviation
            LEFT JOIN dbo.tstSite S
                ON S.idfsSite = hc.idfsSite
            LEFT JOIN dbo.FN_HUM_Institution_GET(@LangID) AS tlbEnteredByOffice
                ON tlbEnteredByOffice.idfOffice = S.idfOffice
                   AND tlbEnteredByOffice.idfsSite = hc.idfsSite
            LEFT JOIN dbo.trtDiagnosis AS finalSyndromicSurveielanceDiseases
                ON finalSyndromicSurveielanceDiseases.idfsDiagnosis = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.trtDiagnosis AS initialSyndromicSurveielanceDiseases
                ON initialSyndromicSurveielanceDiseases.idfsDiagnosis = hc.idfsTentativeDiagnosis
            LEFT JOIN dbo.HumanDiseaseReportRelationship relatedTo
                ON relatedTo.HumanDiseaseReportID = hc.idfHumanCase
                   AND relatedTo.intRowStatus = 0
                   AND relatedTo.RelationshipTypeID = 10503001
            LEFT JOIN dbo.tlbHumanCase relatedToReport
                ON relatedToReport.idfHumanCase = relatedTo.RelateToHumanDiseaseReportID
                   AND relatedToReport.intRowStatus = 0
            LEFT JOIN dbo.HumanDiseaseReportRelationship connectedTo
                ON connectedTo.RelateToHumanDiseaseReportID = hc.idfHumanCase
                   AND connectedTo.intRowStatus = 0
                   AND connectedTo.RelationshipTypeID = 10503001
            LEFT JOIN dbo.tlbHumanCase connectedToReport
                ON connectedToReport.idfHumanCase = connectedTo.HumanDiseaseReportID
                   AND connectedToReport.intRowStatus = 0
        WHERE hc.idfHumanCase = @SearchHumanCaseId
              OR @SearchHumanCaseId IS NULL;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_LAB_Journal60B]...';


GO
--*************************************************************************
-- Name 				: report.USP_REP_LAB_Journal60B
-- Description			: Select data for 60B Journal.
-- 
-- Author               : Srini Goli
-- Revision History
--		Name			Date		Change Detail
--		Srini Goli		02/06/2023	Updated based on 6.0 Base
--      Steven Verner   03/10/2023  Removed INNER JOIN on tentative diagnosis join.  Apparently there's no longer a concept of tentative diagnosis
--                                  This was causing the query to exclude all new EIDSS7 disease reports and outbreaks.

-- Testing code:
/*
 EXEC report.USP_REP_LAB_Journal60B 'ka', '20150101', '20151231', 9844050000000, 1101
 
 EXEC report.USP_REP_LAB_Journal60B 'en-US', '20150101', '20151231', 9844050000000, 1101

 EXEC report.USP_REP_LAB_Journal60B 'en-US', '20150101', '20150630', NULL,NULL

 EXEC report.USP_REP_LAB_Journal60B 'en-US', '20230101', '20230201', NULL,NULL
 */
  --*************************************************************************
 
 ALTER   Procedure [Report].[USP_REP_LAB_Journal60B]
 	(
 		@LangID		AS NVARCHAR(10), 
 		@StartDate	AS DATETIME,	 
 		@FinishDate	AS DATETIME,
 		@Diagnosis	AS BIGINT	=NULL,		-- filter value ofa drop-down list of all diseases accounted in EIDSS as case-based diseases with HA Code �Human� or �Human, Livestock� or �Human, Avian� or �Human, Avian, Livestock� (non-mandatory field).
 		@SiteID		AS BIGINT = NULL
 	)
 AS	
 
 -- Field description may be found here
 -- "https://repos.btrp.net/BTRP/Project_Documents/08x-Implementation/Customizations/GG/Reports/Specification for report development - 60B Journal Human GG v1.0.doc"
 -- by number marked red at screen form prototype 
 
 DECLARE	@ReportTable 	TABLE
 (	
 	strName						NVARCHAR(2000), --2	
	LegacyCaseID				NVARCHAR(100),
	intRow						NVARCHAR(100),
 	strAge						NVARCHAR(2000), --3
 	strGender					NVARCHAR(2000), --4
 	strAddress					NVARCHAR(2000), --5
 	strPlaceOfStudyWork			NVARCHAR(2000), --6
 	datDiseaseOnsetDate			DATETIME, --7
 	datDateOfFirstPresentation		DATETIME, --8
 	strFacilityThatSentNotification NVARCHAR(2000), --9
 	strProvisionalDiagnosis			NVARCHAR(2000), --10
 	datDateProvisionalDiagnosis		DATETIME, --11
 	datDateSpecificTreatment		DATETIME, --12
 	datDateSpecimenTaken			NVARCHAR(MAX), --13
 	strResultAndDate			NVARCHAR(MAX), --14
 	strVaccinationStatus		NVARCHAR(2000), --15
 	datDateCaseInvestigation	DATETIME, --16
 	strFinalDS					NVARCHAR(2000), --17
 	strFinalClassification		NVARCHAR(2000), --18
 	datDateFinalDS				DATETIME, --19
 	strOutcome					NVARCHAR(2000), --20
 	strCaseStatus				NVARCHAR(2000), --24
 	strComments					NVARCHAR(MAX), --25
 	strCaseID					NVARCHAR(200),
 	-- todo: fill this new field:
 	datEnteredDate				DATETIME  -- for sorting in EIDSS
 )	
 
 DECLARE	@OutbreakID	NVARCHAR(300)
 SELECT	@OutbreakID = ISNULL(RTRIM(r.[name]) + N' ', N'')
 FROM	dbo.FN_GBL_ReferenceRepair(@LangID, 19000132) r	-- Additional report Text
 WHERE	r.strDefault = N'Outbreak ID'
 PRINT @OutbreakID
 
 DECLARE	@CurrentResidence	NVARCHAR(300)
 SELECT	@CurrentResidence = ISNULL(RTRIM(r.[name]) + N' ' , N'') 
 FROM	dbo.FN_GBL_ReferenceRepair(@LangID, 19000132) r	-- Additional report Text
 WHERE	r.strDefault = N'Current Residence:'
 
 DECLARE	@PermanentResidence	NVARCHAR(300)
 SELECT	@PermanentResidence = ISNULL(RTRIM(r.[name]) + N' ' , N'') 
 FROM	dbo.FN_GBL_ReferenceRepair(@LangID, 19000132) r	-- Additional report Text
 WHERE	r.strDefault = N'Permanent Residence:'
 
 DECLARE 
	 @OPV5field BIGINT
	,@OPV4field BIGINT
	,@OPV3field BIGINT
	,@OPV2field BIGINT
	,@OPV1field BIGINT
	,@Thirdfield BIGINT
	,@Secondfield BIGINT
	,@Firstfield BIGINT 
	,@NumberOfImmunizationsReceived BIGINT
	,@ArePatientsImmunizationRecordsAvailable BIGINT
	,@WasSpecificVaccinationAdministered BIGINT
	,@VaccinatedAgainstRubella BIGINT
	,@NumberOfReceivedDoses_WithDiphtheriaComponent BIGINT
	,@RabiesVaccineGiven BIGINT
	,@NumberOfReceivedDoses_WithMeaslesComponent BIGINT
	,@HibVaccinationStatus BIGINT
	,@NumberOfReceivedDoses_WithMumpsComponent BIGINT
	,@MothersTetanusToxoidHistoryPriorToChildsDisease BIGINT
	,@NumberOfReceivedDoses_WithPertussisComponent BIGINT
	,@NumberOfReceivedDoses_WithRubellaComponent BIGINT
	,@IncludeDosesOfALLTetanusContainingToxoids BIGINT
	,@WasVaccinationAdministered BIGINT
	,@Revaccination BIGINT
	,@DateOfVaccination BIGINT
	,@DateOfRevaccination BIGINT
	,@ImmunizationHistory_DateOfLastVaccination BIGINT
	,@SpecificVaccination_DateOfLastVaccination BIGINT
	,@IfYes_IndicateDatesOfDoses BIGINT
	,@IfYes_NumberOfVaccinesReceived BIGINT
	,@IntervalSinceLastTetanusToxoidDose BIGINT
	,@DateOfLastOPVDoseReceived BIGINT
	,@NameVaccine BIGINT
	
	--NEW!!!
	--Is patient vaccinated against leptospirosis?
	,@IsPatientVaccinatedAgainstLeptospirosis BIGINT
	
	--Date of vaccination of patient against leptospirosis
	,@DateOfVaccinationOfPatientAgainstLeptospirosis BIGINT


	--NEW!!! 22.06.2016
	--Rabies vaccine dose
	,@RabiesVaccineDose BIGINT
	
	--Rabies vaccination date
	,@RabiesVaccinationDate BIGINT

	--HEI S. pneumonae caused infection GG: S. pneumonae vaccination status
	,@PneumonaeVaccinationStatus BIGINT
	
	--HEI S. pneumonae caused infection GG: Number of received doses of S. pneumonae vaccine
	,@PneumonaeNumberReceivedDoses BIGINT
	
	--HEI S. pneumonae caused infection GG: Date of last vaccination
	,@PneumonaeDateLastVaccination BIGINT
	
	--HEI Acute Viral Hepatitis A GG: Number of received doses of Hepatitis A vaccine
	,@HepatitisANumberReceivedDoses BIGINT
	
	--HEI Acute Viral Hepatitis A GG: Date of last vaccination
	,@HepatitisADateLastVaccination BIGINT


	,@Section_AdditionalOPVdoses BIGINT
	,@Section_Maternalhistory BIGINT

	,@PVT_Immunization3 BIGINT
	,@PVT_Immunization5 BIGINT
	,@PVT_VaccineTypes BIGINT
	,@PVT_OPVDoses BIGINT
	,@PVT_Y_N_Unk BIGINT
     
     
	,@ft_HEI_Acute_viral_hepatitis_B_GG BIGINT
	,@ft_HEI_AFP_Acute_poliomyelitis_GG BIGINT
	,@ft_HEI_Anthrax_GG BIGINT
	,@ft_HEI_Botulism_GG BIGINT
	,@ft_HEI_Brucellosis_GG BIGINT
	,@ft_HEI_CRS_GG BIGINT
	,@ft_HEI_Congenital_Syphilis_GG BIGINT
	,@ft_HEI_CCHF_GG BIGINT
	,@ft_HEI_Diphtheria_GG BIGINT
	,@ft_HEI_Gonococcal_Infection_GG BIGINT
	,@ft_HEI_Bacterial_Meningitis_GG BIGINT
	,@ft_HEI_HFRS_GG BIGINT
	,@ft_HEI_Influenza_Virus_GG BIGINT
	,@ft_HEI_Measles_GG BIGINT
	,@ft_HEI_Mumps_GG BIGINT
	,@ft_HEI_Pertussis_GG BIGINT
	,@ft_HEI_Plague_GG BIGINT
	,@ft_HEI_Post_vaccination_unusual_reactions_and_complications_GG BIGINT
	,@ft_HEI_Rabies_GG BIGINT
	,@ft_HEI_Rubella_GG BIGINT
	,@ft_HEI_Smallpox_GG BIGINT
	,@ft_HEI_Syphilis_GG BIGINT
	,@ft_HEI_Tetanus_GG BIGINT
	,@ft_HEI_TBE_GG BIGINT
	,@ft_HEI_Tularemia_GG BIGINT
	,@ft_UNI_HEI_GG BIGINT
	--NEW!!!
	,@ft_HEI_Leptospirosis_GG BIGINT
	--NEW!!! 22.06.2016
	,@ft_HEI_Pneumonae_GG BIGINT
	,@ft_HEI_Acute_Viral_Hepatitis_A_GG BIGINT

    
	,@DG_MotherTtetanusToxoidHistoryPriorToChildDisease BIGINT

	,@idfsCustomReportType BIGINT
 
 
SET @idfsCustomReportType = 10290013 --GG 60B Journal


SELECT @OPV5field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV5field'
AND intRowStatus = 0

SELECT @OPV4field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV4field'
AND intRowStatus = 0

SELECT @OPV3field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV3field'
AND intRowStatus = 0

SELECT @OPV2field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV2field'
AND intRowStatus = 0

SELECT @OPV1field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV1field'
AND intRowStatus = 0

SELECT @Thirdfield = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Thirdfield'
AND intRowStatus = 0

SELECT @Secondfield = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Secondfield'
AND intRowStatus = 0

SELECT @Firstfield = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Firstfield'
AND intRowStatus = 0

SELECT @NumberOfImmunizationsReceived = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfImmunizationsReceived'
AND intRowStatus = 0

SELECT @ArePatientsImmunizationRecordsAvailable = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ArePatientsImmunizationRecordsAvailable'
AND intRowStatus = 0

SELECT @WasSpecificVaccinationAdministered = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'WasSpecificVaccinationAdministered'
AND intRowStatus = 0

SELECT @VaccinatedAgainstRubella = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'VaccinatedAgainstRubella'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithDiphtheriaComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithDiphtheriaComponent'
AND intRowStatus = 0

SELECT @RabiesVaccineGiven = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'RabiesVaccineGiven'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithMeaslesComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithMeaslesComponent'
AND intRowStatus = 0

SELECT @HibVaccinationStatus = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'HibVaccinationStatus'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithMumpsComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithMumpsComponent'
AND intRowStatus = 0

SELECT @MothersTetanusToxoidHistoryPriorToChildsDisease = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'MothersTetanusToxoidHistoryPriorToChildsDisease'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithPertussisComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithPertussisComponent'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithRubellaComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithRubellaComponent'
AND intRowStatus = 0

SELECT @IncludeDosesOfALLTetanusContainingToxoids = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IncludeDosesOfALLTetanusContainingToxoids'
AND intRowStatus = 0

SELECT @WasVaccinationAdministered = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'WasVaccinationAdministered'
AND intRowStatus = 0

SELECT @Revaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Revaccination'
AND intRowStatus = 0

SELECT @DateOfVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'DateOfVaccination'
AND intRowStatus = 0

SELECT @DateOfRevaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'DateOfRevaccination'
AND intRowStatus = 0

SELECT @ImmunizationHistory_DateOfLastVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ImmunizationHistory_DateOfLastVaccination'
AND intRowStatus = 0

SELECT @SpecificVaccination_DateOfLastVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'SpecificVaccination_DateOfLastVaccination'
AND intRowStatus = 0

SELECT @IfYes_IndicateDatesOfDoses = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IfYes_IndicateDatesOfDoses'
AND intRowStatus = 0

SELECT @IfYes_NumberOfVaccinesReceived = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IfYes_NumberOfVaccinesReceived'
AND intRowStatus = 0

SELECT @IntervalSinceLastTetanusToxoidDose = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IntervalSinceLastTetanusToxoidDose'
AND intRowStatus = 0

SELECT @DateOfLastOPVDoseReceived = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'DateOfLastOPVDoseReceived'
AND intRowStatus = 0

SELECT @NameVaccine = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NameVaccine' --Vaccine type that caused post vaccination complications: Name of vaccine
AND intRowStatus = 0

--NEW!!!
SELECT @IsPatientVaccinatedAgainstLeptospirosis = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IsPatientVaccinatedAgainstLeptospirosis'
AND intRowStatus = 0

SELECT @DateOfVaccinationOfPatientAgainstLeptospirosis = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'DateOfVaccinationOfPatientAgainstLeptospirosis'
AND intRowStatus = 0

--NEW!!! 22.06.2016
SELECT @RabiesVaccineDose = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'RabiesVaccineDose'
AND intRowStatus = 0	

SELECT @RabiesVaccinationDate = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'RabiesVaccinationDate'
AND intRowStatus = 0		

SELECT @PneumonaeVaccinationStatus = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PneumonaeVaccinationStatus'
AND intRowStatus = 0	
	
SELECT @PneumonaeNumberReceivedDoses = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PneumonaeNumberReceivedDoses'
AND intRowStatus = 0	
	
SELECT @PneumonaeDateLastVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PneumonaeDateLastVaccination'
AND intRowStatus = 0	
	
SELECT @HepatitisANumberReceivedDoses = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'HepatitisANumberReceivedDoses'
AND intRowStatus = 0		
	
SELECT @HepatitisADateLastVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'HepatitisADateLastVaccination'
AND intRowStatus = 0	

--SELECT 
--@RabiesVaccineDose as RabiesVaccineDose
--,@RabiesVaccinationDate as RabiesVaccinationDate
--,@PneumonaeVaccinationStatus as PneumonaeVaccinationStatus
--,@PneumonaeNumberReceivedDoses as PneumonaeNumberReceivedDoses
--,@PneumonaeDateLastVaccination as PneumonaeDateLastVaccination
--,@HepatitisANumberReceivedDoses as HepatitisANumberReceivedDoses
--,@HepatitisADateLastVaccination as HepatitisADateLastVaccination




-- sections
SELECT @Section_AdditionalOPVdoses = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Section_AdditionalOPVdoses'
AND intRowStatus = 0    
 
SELECT @Section_Maternalhistory = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Section_Maternalhistory'
AND intRowStatus = 0

--parameter values type
SELECT @PVT_Immunization3 = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_Immunization3'
AND pfc.intRowStatus = 0

SELECT @PVT_Immunization5 = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_Immunization5'
AND pfc.intRowStatus = 0

SELECT @PVT_VaccineTypes = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_VaccineTypes'
AND pfc.intRowStatus = 0

SELECT @PVT_OPVDoses = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_OPVDoses'
AND pfc.intRowStatus = 0

SELECT @PVT_Y_N_Unk = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_Y_N_Unk'
AND pfc.intRowStatus = 0
     

--Templates
--ft_HEI_Acute_viral_hepatitis_B_GG
SELECT @ft_HEI_Acute_viral_hepatitis_B_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Acute_viral_hepatitis_B_GG'
AND pfc.intRowStatus = 0

--ft_HEI_AFP_Acute_poliomyelitis_GG
SELECT @ft_HEI_AFP_Acute_poliomyelitis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_AFP_Acute_poliomyelitis_GG'
AND pfc.intRowStatus = 0
	
--ft_HEI_Anthrax_GG
SELECT @ft_HEI_Anthrax_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Anthrax_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Botulism_GG
SELECT @ft_HEI_Botulism_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Botulism_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Brucellosis_GG
SELECT @ft_HEI_Brucellosis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Brucellosis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_CRS_GG
SELECT @ft_HEI_CRS_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_CRS_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Congenital_Syphilis_GG
SELECT @ft_HEI_Congenital_Syphilis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Congenital_Syphilis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_CCHF_GG
SELECT @ft_HEI_CCHF_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_CCHF_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Diphtheria_GG
SELECT @ft_HEI_Diphtheria_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Diphtheria_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Gonococcal_Infection_GG
SELECT @ft_HEI_Gonococcal_Infection_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Gonococcal_Infection_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Bacterial_Meningitis_GG
SELECT @ft_HEI_Bacterial_Meningitis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Bacterial_Meningitis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_HFRS_GG
SELECT @ft_HEI_HFRS_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_HFRS_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Influenza_Virus_GG
SELECT @ft_HEI_Influenza_Virus_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Influenza_Virus_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Measles_GG
SELECT @ft_HEI_Measles_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Measles_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Mumps_GG
SELECT @ft_HEI_Mumps_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Mumps_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Pertussis_GG
SELECT @ft_HEI_Pertussis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Pertussis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Plague_GG
SELECT @ft_HEI_Plague_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Plague_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Post_vaccination_unusual_reactions_and_comp
SELECT @ft_HEI_Post_vaccination_unusual_reactions_and_complications_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Post_vaccination_unusual_reactions_and_comp'
AND pfc.intRowStatus = 0

--ft_HEI_Rabies_GG
SELECT @ft_HEI_Rabies_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Rabies_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Rubella_GG
SELECT @ft_HEI_Rubella_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Rubella_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Smallpox_GG
SELECT @ft_HEI_Smallpox_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Smallpox_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Syphilis_GG
SELECT @ft_HEI_Syphilis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Syphilis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Tetanus_GG
SELECT @ft_HEI_Tetanus_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Tetanus_GG'
AND pfc.intRowStatus = 0

--ft_HEI_TBE_GG
SELECT @ft_HEI_TBE_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_TBE_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Tularemia_GG
SELECT @ft_HEI_Tularemia_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Tularemia_GG'
AND pfc.intRowStatus = 0

--ft_UNI_HEI_GG
SELECT @ft_UNI_HEI_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_UNI_HEI_GG'
AND pfc.intRowStatus = 0

--NEW!!!
--ft_HEI_Leptospirosis_GG
SELECT @ft_HEI_Leptospirosis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Leptospirosis_GG'
AND pfc.intRowStatus = 0


--NEW!!! 22.06.2016
--@ft_HEI_Pneumonae_GG 
SELECT @ft_HEI_Pneumonae_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Pneumonae_GG'
AND pfc.intRowStatus = 0
	
--@ft_HEI_Acute_Viral_Hepatitis_A_GG 
SELECT @ft_HEI_Acute_Viral_Hepatitis_A_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Acute_Viral_Hepatitis_A_GG'
AND pfc.intRowStatus = 0	

--SELECT 
--	 @ft_HEI_Acute_viral_hepatitis_B_GG 
--	,@ft_HEI_AFP_Acute_poliomyelitis_GG 
--	,@ft_HEI_Anthrax_GG 
--	,@ft_HEI_Botulism_GG 
--	,@ft_HEI_Brucellosis_GG 
--	,@ft_HEI_CRS_GG 
--	,@ft_HEI_Congenital_Syphilis_GG 
--	,@ft_HEI_CCHF_GG 
--	,@ft_HEI_Diphtheria_GG 
--	,@ft_HEI_Gonococcal_Infection_GG 
--	,@ft_HEI_Bacterial_Meningitis_GG 
--	,@ft_HEI_HFRS_GG 
--	,@ft_HEI_Influenza_Virus_GG 
--	,@ft_HEI_Measles_GG 
--	,@ft_HEI_Mumps_GG 
--	,@ft_HEI_Pertussis_GG 
--	,@ft_HEI_Plague_GG 
--	,@ft_HEI_Post_vaccination_unusual_reactions_AND_complications_GG 
--	,@ft_HEI_Rabies_GG 
--	,@ft_HEI_Rubella_GG 
--	,@ft_HEI_Smallpox_GG 
--	,@ft_HEI_Syphilis_GG 
--	,@ft_HEI_Tetanus_GG 
--	,@ft_HEI_TBE_GG 
--	,@ft_HEI_Tularemia_GG 
--	,@ft_UNI_HEI_GG 
--	,@ft_HEI_Leptospirosis_GG  as ft_HEI_Leptospirosis_GG
--	,@ft_HEI_Pneumonae_GG as ft_HEI_Pneumonae_GG
--	,@ft_HEI_Acute_Viral_Hepatitis_A_GG as ft_HEI_Acute_Viral_Hepatitis_A_GG
	

---- Diagnosis groups
  
--DG_MotherTtetanusToxoidHistoryPriorToChildDisease
SELECT @DG_MotherTtetanusToxoidHistoryPriorToChildDisease = dg.idfsReportDiagnosisGroup
FROM dbo.trtReportDiagnosisGroup dg
WHERE dg.intRowStatus = 0 AND
   dg.strDiagnosisGroupAlias = 'DG_MotherTtetanusToxoidHistoryPriorToChildDisease'      
    

      
      
 
 INSERT INTO @ReportTable (
 	strName,
	LegacyCaseID,
	intRow,
 	strAge,
 	strGender,
 	strAddress,
 	strPlaceOfStudyWork,
 	datDiseaseOnsetDate,
 	datDateOfFirstPresentation,
 	strFacilityThatSentNotification,
 	strProvisionalDiagnosis,
 	datDateProvisionalDiagnosis,
 	datDateSpecificTreatment,
 	datDateSpecimenTaken,
 	strResultAndDate,
 	strVaccinationStatus,
 	datDateCaseInvestigation,
 	strFinalDS,
 	strFinalClassification,
 	datDateFinalDS,
 	strOutcome,
 	strCaseStatus,
 	strComments,
 	strCaseID
 ) 
 SELECT
   dbo.FN_GBL_ConcatFullName(h.strLastName, h.strFirstName, h.strSecondName) AS strName,
   hc.LegacyCaseID,
   ROW_NUMBER() OVER (PARTITION BY hc.LegacyCaseID ORDER BY hc.idfHumanCase),
   CAST(hc.intPatientAge AS VARCHAR(10)) + N' (' + ref_AgeType.[name] + N')' +
     CASE WHEN	(ISNULL(hc.intPatientAge, 100) < 15 AND ISNULL(hc.idfsHumanAgeType, 10042003) = 10042003 /*years*/)
 				or (ISNULL(hc.idfsHumanAgeType, 10042003) <> 10042003 /*years*/)
          THEN ISNULL(N', ' + CONVERT(VARCHAR(10), h.datDateofBirth , 104), N'')
          ELSE N'' 
     END AS strAge,
   ref_hg.[name] AS strGender,
   ISNULL(@CurrentResidence, N'') + 
 		report.FN_REP_CreateAddressString
 				(	gl_cr.Country,
 					gl_cr.Region,
 					gl_cr.Rayon,
 					gl_cr.PostalCode,
 					gl_cr.SettlementType,
 					gl_cr.Settlement,
 					gl_cr.Street,
 					gl_cr.House,
 					gl_cr.Building,
 					gl_cr.Appartment,
 					gl_cr.blnForeignAddress,
 					gl_cr.strForeignAddress
 				) +
     CASE WHEN report.FN_REP_CreateAddressString
 				(	gl_cr.Country,
 					gl_cr.Region,
 					gl_cr.Rayon,
 					gl_cr.PostalCode,
 					gl_cr.SettlementType,
 					gl_cr.Settlement,
 					gl_cr.Street,
 					gl_cr.House,
 					gl_cr.Building,
 					gl_cr.Appartment,
 					gl_cr.blnForeignAddress,
 					gl_cr.strForeignAddress
 				) <> 
 			report.FN_REP_CreateAddressString
 				(	gl_r.Country,
 					gl_r.Region,
 					gl_r.Rayon,
 					gl_r.PostalCode,
 					gl_r.SettlementType,
 					gl_r.Settlement,
 					gl_r.Street,
 					gl_r.House,
 					gl_r.Building,
 					gl_r.Appartment,
 					gl_r.blnForeignAddress,
 					gl_r.strForeignAddress
 				)
 				AND ISNULL(gl_r.Region, N'') <> N''
          THEN '; ' +  ISNULL(@PermanentResidence, N'') + 
 				report.FN_REP_CreateAddressString
 						(	gl_r.Country,
 							gl_r.Region,
 							gl_r.Rayon,
 							gl_r.PostalCode,
 							gl_r.SettlementType,
 							gl_r.Settlement,
 							gl_r.Street,
 							gl_r.House,
 							gl_r.Building,
 							gl_r.Appartment,
 							gl_r.blnForeignAddress,
 							gl_r.strForeignAddress
 						)
 		ELSE N''
     END AS strAddress,
   ISNULL(CASE WHEN h.strEmployerName = '' THEN NULL ELSE h.strEmployerName END + '; ', N'') + 
     CASE WHEN ISNULL(gl_em.Region, N'') <> N''
          THEN 		ISNULL(report.FN_REP_CreateAddressString
 					(	gl_em.Country,
 						gl_em.Region,
 						gl_em.Rayon,
 						gl_em.PostalCode,
 						gl_em.SettlementType,
 						gl_em.Settlement,
 						gl_em.Street,
 						gl_em.House,
 						gl_em.Building,
 						gl_em.Appartment,
 						gl_em.blnForeignAddress,
 						gl_em.strForeignAddress
 					), '')
 		ELSE N''
 	END AS   strPlaceOfStudyWork,
   hc.datOnSetDate AS datDiseaseOnsetDate,
   hc.datFirstSoughtCareDate AS datDateOfFirstPresentation,
   ISNULL(fi.name, '') + 
 	ISNULL(', ' + tp.strFamilyName, '') + ISNULL(' ' + tp.strFirstName, '') + ISNULL(' ' + tp.strSecondName, '') + 
     ISNULL(', ' + CONVERT(VARCHAR(10),hc.datNotificationDate, 104),'') AS strFacilityThatSentNotification,
   ref_diag.[name] AS strProvisionalDiagnosis,
   hc.datTentativeDiagnosisDate AS datDateProvisionalDiagnosis,
   CASE WHEN hc.idfsYNAntimicrobialTherapy = 10100001 THEN
         (SELECT TOP 1 a.datFirstAdministeredDate 
           FROM tlbAntimicrobialTherapy a
           WHERE a.idfHumanCase = hc.idfHumanCase 
 				AND a.intRowStatus = 0
           ORDER BY 1 ASC)
      ELSE NULL END AS datDateSpecificTreatment,
 	CAST((SELECT 	
   	          ref_st_collected.[name] +
   	          ISNULL(', ' + CONVERT(VARCHAR, m_collected.datFieldCollectionDate, 103), '') + '; '
 			FROM tlbMaterial m_collected
 			INNER JOIN	dbo.FN_GBL_ReferenceRepair(@LangID, 19000087 /*rftSpecimenType*/) ref_st_collected
   						ON ref_st_collected.idfsReference = m_collected.idfsSampleType
 			WHERE m_collected.idfHuman = h.idfHuman
 				AND m_collected.idfHumanCase = hc.idfHumanCase
 				AND m_collected.blnShowInLabList = 1
 					AND m_collected.intRowStatus = 0
 					
 			ORDER BY	m_collected.datFieldCollectionDate 	                
   	        FOR XML PATH('')		
     ) AS NVARCHAR(MAX))  AS datDateSpecimenTaken,
 	CAST((SELECT 	
   	          ref_st.[name] +
   	          ISNULL(', ' + ref_tt.[name], '') +
   	          ISNULL(', ' + ref_tr.[name], '') +
   	          ISNULL(', ' + CONVERT(VARCHAR, b.datValidatedDate, 103), '') + '; '
   	        FROM	(
 				tlbTesting t
   	            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000097 /*rftTestName*/)  AS ref_tt
   	            ON ref_tt.idfsReference = t.idfsTestName
 					)
 			INNER JOIN	(
 				tlbMaterial m
   	                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000087 /*rftSpecimenType*/) ref_st
   	                ON ref_st.idfsReference = m.idfsSampleType
 						)
   	            ON m.idfMaterial = t.idfMaterial AND
   	               m.intRowStatus = 0
   	            LEFT OUTER JOIN tlbBatchTest b
   	            ON t.idfBatchTest = b.idfBatchTest
 					AND b.intRowStatus = 0
   	            
   	            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000096 /*rftTestResult*/)  AS ref_tr
   	            ON ref_tr.idfsReference = t.idfsTestResult
   	         WHERE t.intRowStatus = 0 AND
   	                m.idfHuman = h.idfHuman
   	        ORDER BY	b.datValidatedDate
   	        FOR XML PATH('')		
     ) AS NVARCHAR(MAX))  AS strResultANDDate,
   --------------------------------------------------------------------------------------------------------------------
   CASE 
 --------------------
     /*Number of immunizations received + Date of last vaccination*/ 
     WHEN obs.idfsFormTemplate in (@ft_HEI_Acute_viral_hepatitis_B_GG) 
         THEN ISNULL(ref_ap1.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103) 
 --------------------    
     /*Are patient is immunization records available*/    
     WHEN obs.idfsFormTemplate in (@ft_HEI_AFP_Acute_poliomyelitis_GG) 
         /*
			Show the following string "{1} [- {2} - {3}; ][[{4}: {5} - {6}; ]]{7}", 
			WHERE {1} is the value of the parameter with tooltip "Are patient's immunization records available";
			{2} is the tooltip of the first not blank parameter with a value different 
				from "Unknown", which is taken from the following list 
				in specified order: "OPV-5", "OPV-4", "OPV-3", "OPV-2", and "OPV-1";
			{3} is the value of the parameter SELECTed for {2};
			{4} is the name of the section with full 
				path “Immunization history>Additional OPV doses received during mass campaigns”;
			{5} is the tooltip of the first not blank parameter with a value different 
				from "Unknown", which is taken from the following list in specified order: 
				"Third additional OPV dose", "Second additional OPV dose", "First additional OPV dose";
			{6} is the value of the parameter SELECTed for {5};
			{7} is the value of the parameter with tooltip "Date of last OPV dose received";
			and the parts [...] and [[...]] are optional and depend on the following conditions:
			- the part [...] shall be displayed if {1} is equal to "Yes"
			- the part [[...]] shall be displayed if {6} is not blank;
			the square brackets that indicate the beginning and end of the optional parts 
			shall not be displayed in the report
		*/
         THEN 
             /*{1} -*/
              ISNULL(ref_ap2.name + '- ', '')
             /*{2} - {3};*/  
              +
              CASE WHEN ref_ap2.idfsReference = 10100001 /*yes*/
                   THEN 
                     CASE WHEN ref_ap26.name IS NOT NULL AND ref_ap26.idfsReference <> 995360000000 /*Unknown*/ 
                          THEN (SELECT [name] 
                                 FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                 WHERE idfsReference = @OPV5field -- /*"OPV-5" field*/
                                ) + '-' + ref_ap26.name + '; '
                          ELSE
                          CASE WHEN ref_ap25.name IS NOT NULL AND ref_ap25.idfsReference <> 995360000000 /*Unknown*/ 
                              THEN (SELECT [name] 
                                     FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                     WHERE idfsReference = @OPV4field -- /*"OPV-4" field*/
                                    ) + '-' + ref_ap25.name + '; '
                              ELSE
                              CASE WHEN ref_ap24.name IS NOT NULL AND ref_ap24.idfsReference <> 995360000000 /*Unknown*/ 
                                  THEN (SELECT [name] 
                                         FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                         WHERE idfsReference = @OPV3field -- /*"OPV-3" field*/
                                        ) + '-' + ref_ap24.name + '; '
                                  ELSE
                                  CASE WHEN ref_ap23.name IS NOT NULL AND ref_ap23.idfsReference <> 995360000000 /*Unknown*/ 
                                      THEN (SELECT [name] 
                                             FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                             WHERE idfsReference = @OPV2field -- /*"OPV-2" field*/
                                            ) + '-' + ref_ap23.name + '; '
                                      ELSE
                                      CASE WHEN ref_ap22.name IS NOT NULL AND ref_ap22.idfsReference <> 995360000000 /*Unknown*/ 
                                          THEN (SELECT [name] 
                                                 FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                                 WHERE idfsReference = @OPV1field -- /*"OPV-1" field*/
                                                ) + '-' + ref_ap22.name + '; '
                                          ELSE ''
                                      END /*OPV-1*/                                      
                                  END /*OPV-2*/                              
                              END /*OPV-3*/                              
                          END /*OPV-4*/   
                      END /*OPV-5*/          
                   ELSE ''
              END --CASE WHEN ref_ap2.idfsReference = 10100001 /*yes*/    
             /* {4} : */  
              +
              CASE WHEN ref_ap29.name /*"Third" field*/ IS NOT NULL OR 
                        ref_ap28.name /*"Second" field*/ IS NOT NULL OR
                        ref_ap27.name /*"First" field*/ IS NOT NULL
                   THEN (SELECT snt.strTextString FROM trtStringNameTranslation snt
                            WHERE snt.idfsBaseReference = @Section_AdditionalOPVdoses /*section name - Additional OPV doses received during mass campaigns*/
                                   AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID) 
                                   AND snt.intRowStatus = 0                
                         ) + ':' +
                             /*{5} - {6}; */  
                             CASE WHEN ref_ap29.name IS NOT NULL AND ref_ap29.idfsReference <> 995360000000 /*Unknown*/ 
                                  THEN (SELECT [name] 
                                         FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                         WHERE idfsReference = @Thirdfield -- /*"Third" field*/
                                        ) + '-' + ref_ap29.name
                                  ELSE
                                  CASE WHEN ref_ap28.name IS NOT NULL AND ref_ap28.idfsReference <> 995360000000 /*Unknown*/ 
                                      THEN (SELECT [name] 
                                             FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                             WHERE idfsReference = @Secondfield -- /*"Second" field*/
                                            ) + '-' + ref_ap28.name
                                      ELSE
                                      CASE WHEN ref_ap27.name IS NOT NULL AND ref_ap27.idfsReference <> 995360000000 /*Unknown*/ 
                                          THEN (SELECT [name] 
                                                 FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                                 WHERE idfsReference = @Firstfield -- /*"First" field*/
                                                ) + '-' + ref_ap27.name
                                          ELSE ''
                                      END /*First*/               
                                  END /*Second*/
                              END /*Third*/  
                              /*7)*/
                              + '; '                       
                   ELSE ''
              END  
             /* {7} */  
              +    
             CONVERT(VARCHAR(10), CAST(ap30.varValue AS DATETIME), 103) 
 
 --------------------    
     /*Was specific vaccination administered? + Date of last vaccination*/
     WHEN  obs.idfsFormTemplate IN  (
     									@ft_HEI_Anthrax_GG,
     									@ft_HEI_Botulism_GG,
     									@ft_HEI_Brucellosis_GG,
     									@ft_HEI_Congenital_Syphilis_GG,
     									@ft_HEI_CCHF_GG,    
     									@ft_HEI_Gonococcal_Infection_GG, 
     									@ft_HEI_HFRS_GG,
     									@ft_HEI_Plague_GG ,
     									@ft_HEI_Smallpox_GG,
     									@ft_HEI_Syphilis_GG,
     									@ft_HEI_TBE_GG,
     									@ft_HEI_Tularemia_GG   
     
									)
         THEN ISNULL(ref_ap3.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap18_2.varValue AS DATETIME), 103) 
 --------------------    
     /*Vaccinated against rubella
		 name of section "Maternal history" then ":" then name of "Vaccinated against rubella" 
		 then "-" and value in "Vaccinated against rubella".*/    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_CRS_GG         
									)
         THEN (SELECT snt.strTextString FROM trtStringNameTranslation snt
                 WHERE snt.idfsBaseReference = @Section_Maternalhistory /*name of section "Maternal history"*/
                       AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID) 
                       AND snt.intRowStatus = 0                
               ) + ':' + 
               (SELECT [name] 
                 FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                 WHERE idfsReference = @VaccinatedAgainstRubella
                ) + '-' +  ref_ap4.name
 --------------------    
     /* Number of received doses (any vaccine with diphtheria component) + Date of last vaccination
        1) value in "Number of received doses (any vaccine with diphtheria component)"; 
        2) if value in 1) is not blank then "," otherwise nothing; 
        3) value in "Immunization history: Date of last vaccination". 
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Diphtheria_GG         
									)
         
         THEN ISNULL(ref_ap5.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103) 
 --------------------    
     /*Hib vaccination status + If "Yes", number of vaccines received + Date of last vaccination
      1) value in "Hib vaccination status"; 
      2) if value in 1) is not blank then "," otherwise nothing;
      3) value in "Number of Hib vaccines received"; 
      4) if value in 3) is not blank then "," otherwise nothing; 
      5) value in "Immunization history: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Bacterial_Meningitis_GG         
									)
         THEN ISNULL(ref_ap8.name + ', ','') + 
              ISNULL(ref_ap20.name + ', ','') + 
              CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103) 
 --------------------    
     /*Number of received doses (any vaccine with measles component) + Date of last vaccination
     1) value in "Number of received doses (any vaccine with measles component)"; 
     2) if value in 1) is not blank then "," otherwise nothing; 
     3) value in "Immunization history: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Measles_GG         
									)
         THEN ISNULL(ref_ap7.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103) 
--------------------    
     /*Number of received doses (any vaccine with mumps component) + Date of last vaccination
     1) value in "Number of received doses (any vaccine with mumps component)"; 
     2) if value in 1) is not blank then "," otherwise nothing; 
     3) value in "Immunization history: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Mumps_GG         
									)
         THEN ISNULL(ref_ap9.name+ ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103)  
--------------------    
     /*Number of received doses (any vaccine with pertussis component) + Date of last vaccination
     1) value in "Number of received doses (any vaccine with pertussis component)";
     2) if value in 1) is not blank then "," otherwise nothing; 
     3) value in "Immunization history: Date of last vaccination".
     */    
     WHEN  obs.idfsFormTemplate IN  (
     									@ft_HEI_Pertussis_GG         
									)
         THEN ISNULL(ref_ap11.name+ ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103)
 --------------------    
     /*Vaccine type that caused post vaccination complications: Name of vaccine
     Show all distinct values from the column of the table section, 
     which is linked to the parameter tooltip "Vaccine type that caused post vaccination complications: Name of vaccine", 
     combined in the string of the following format: "{1};{2};{3}", WHERE {n} is a unique value from the specified column.
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Post_vaccination_unusual_reactions_and_complications_GG         
									)
         THEN 
			cast(	(	SELECT distinct
							ISNULL(ref_ap34.name + '; ', '') 
     	 				FROM	tlbObservation obs34
							 INNER JOIN tlbActivityParameters ap34
							 ON ap34.idfObservation = obs34.idfObservation AND
								ap34.idfsParameter = @NameVaccine /* Vaccine type that caused post vaccination complications: Name of vaccine*/ AND 
								ap34.intRowStatus = 0   
				 
							 LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_VaccineTypes /*Vaccine types*/)  ref_ap34
							 ON ref_ap34.idfsReference = ap34.varValue
			     	 	WHERE	obs34.idfObservation = hc.idfEpiObservation AND
								obs34.intRowStatus = 0  
					FOR	XML PATH('')
					) AS NVARCHAR(MAX)
				)         	
 --------------------    
	-- UPDATED
     /*Show combination of following: 
     *	1) value in "Rabies vaccine given?"; 
     *	2) if value in 1) is not blank then ";" otherwise nothing; 
     *	3) value from "Rabies vaccine dose" field that corresponds the latest value in "Rabies vaccination date" field of table 
     *	section "Rabies Immunization Details" followed by ","; 
     *	4) respective value in "Rabies vaccination date" field.
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Rabies_GG         
									)
         THEN ISNULL(ref_ap6.name+ '; ','') + ISNULL(RabiesVacination.RabiesVaccinationDate + ', ', '') + ISNULL(RabiesVacination.RabiesVaccineDose, '')
---------------------   
     /*Number of received doses (any vaccine with rubella component) + Date of last vaccination
     1) value in "Number of received doses (any vaccine with rubella component)"; 
     2) if value in 1) is not blank then "," otherwise nothing; 
     3) value in "Immunization history: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Rubella_GG         
									)
         THEN ISNULL(ref_ap12.name+ ', ','')  + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103)       
                 
 --------------------    
     /*Mother's tetanus toxoid history prior to child's disease (known doses only) + Interval since last tetanus toxoid dose (years)
     For cases, WHERE "Final Diagnosis" = "Neonatal Tetanus": show combination of following: 
     1) value in "Mother's tetanus toxoid history prior to child's disease (known doses only)"; 
     2) if value in 1) is not blank then ";" otherwise nothing; 
     3) value in "Interval since last tetanus toxoid dose (years) (mother's)"
     */    
     when	obs.idfsFormTemplate in		(
     										@ft_HEI_Tetanus_GG         
										) 
			AND				
			COALESCE(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) IN
			(SELECT idfsDiagnosis 
				FROM dbo.trtDiagnosisToGroupForReportType 
				WHERE idfsCustomReportType = @idfsCustomReportType
				AND idfsReportDiagnosisGroup = @DG_MotherTtetanusToxoidHistoryPriorToChildDisease --"Final Diagnosis" = "Neonatal Tetanus"
			)
         THEN ISNULL(ref_ap10.name + '; ', '') + CAST(ap21.varValue AS NVARCHAR(300))
 --------------------    
     /*Include doses of ALL tetanus-containing toxoids. Exclude doses received after this particular injury + 
      Interval since last tetanus toxoid dose (years)
     For cases, WHERE "Final Diagnosis" does not equal to "Neonatal Tetanus": show combination of following: 
     1) value in "Include doses of ALL tetanus-containing toxoids. Exclude doses received after this particular injury"; 
     2) if value in 1) is not blank then "," otherwise nothing 
     3) value in "Interval since last tetanus toxoid dose (years)".
     */    
     WHEN obs.idfsFormTemplate in		(
     										@ft_HEI_Tetanus_GG         
										) 
			AND				
			COALESCE(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) not IN
			(SELECT idfsDiagnosis 
				FROM dbo.trtDiagnosisToGroupForReportType 
				WHERE idfsCustomReportType = @idfsCustomReportType
				AND idfsReportDiagnosisGroup = @DG_MotherTtetanusToxoidHistoryPriorToChildDisease --"Final Diagnosis" = "Neonatal Tetanus"
			)
         THEN ISNULL(ref_ap13.name  + '; ','') + CAST(ap21.varValue AS NVARCHAR(300))
         
 --------------------    
     /*Revaccination + Date of revaccination
     1)  if the value in "Revaccination" is "Yes" show the combination of the following:
     a) the value in "Revaccination"
     b) if the value in 1a) is not blank then "," otherwise nothing
     c) the value in "Date of revaccination" 
     */    
     WHEN  obs.idfsFormTemplate in		(
     										@ft_UNI_HEI_GG         
										)
         AND ref_ap15.idfsReference = 10100001
         THEN ISNULL(ref_ap15.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap17.varValue AS DATETIME), 103)
 
 --------------------    
     /*Was vaccination administered? + Date of vaccination
     if the value in "Revaccination" is empty, or equals to "No", or "Unknown" show the combination of the following:
     a) the value in "Was vaccination administered?"
     b) if the value in 2a) is not blank then "," otherwise nothing
     c) the value in "Date of vaccination"
     */    
     WHEN obs.idfsFormTemplate in		(
     										@ft_UNI_HEI_GG         
										)
         AND ref_ap15.idfsReference <> 10100001
         THEN ISNULL(ref_ap14.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap16.varValue AS DATETIME), 103)        
         
  
 
  --------------------    
  --NEW!!!
     /*Show combination of following: 
     *			1) value in "Is patient vaccinated against leptospirosis?"; 
     *			2) if value in 1) is not blank then "," otherwise nothing; 
     *			3) value in "Date of vaccination of patient against leptospirosis".
     */    
     WHEN obs.idfsFormTemplate IN		(
     										@ft_HEI_Leptospirosis_GG         
										)
         THEN ISNULL(ref_ap31.name,'') + CASE WHEN ref_ap31.name IS NOT NULL AND ap32.varValue IS NOT NULL THEN ',' ELSE '' END +   ISNULL( CONVERT(VARCHAR(10),CAST(ap32.varValue AS DATETIME), 103), '')      
         
  
 
  --------------------      
  --NEW!!!
     /*Show combination of following: 
     * 1) value in "HEI S. pneumonae caused infection GG: S. pneumonae vaccination status"; 
     * 2) if value in 1) is not blank then "," otherwise nothing; 
     * 3) value in "HEI S. pneumonae caused infection GG: Number of received doses of S. pneumonae vaccine"; 
     * 4) if value in 3) is not blank then "," otherwise nothing; 
     * 5) value in "HEI S. pneumonae caused infection GG: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate in		(
     										@ft_HEI_Pneumonae_GG         
										)
         THEN ISNULL(ref_ap37.name, '') + ISNULL(', ' + ref_ap38.name, '') + ISNULL( ', ' + CONVERT(VARCHAR(10),CAST(ap39.varValue AS DATETIME), 103), '')      

  --------------------    
  --NEW!!!
     /*Show combination of following: 
     * 1) value in "HEI Acute Viral Hepatitis A GG: Number of received doses of Hepatitis A vaccine"; 
     * 2) if value in 1) is not blank then "," otherwise nothing; 
     * 3) value in "HEI Acute Viral Hepatitis A GG: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate in		(
     										@ft_HEI_Acute_Viral_Hepatitis_A_GG         
										)
         THEN ISNULL(ref_ap40.name,'') + CASE WHEN ref_ap40.name IS NOT NULL AND ap41.varValue IS NOT NULL THEN ',' ELSE '' END +   ISNULL( CONVERT(VARCHAR(10),CAST(ap41.varValue AS DATETIME), 103), '')      
         

  --------------------      
  
  
     ELSE NULL
   END AS strVaccinationStatus,
  
 ----------------------------------------------------------------------------------------------
   hc.datInvestigationStartDate AS datDateCaseInvestigation,
   ISNULL(ref_diag_f.[name], ref_diag.[name]) AS strFinalDS,
   ISNULL(ref_final_cs.[name], ref_init_cs.[name]) AS strFinalClassification,
   CASE WHEN hc.datFinalDiagnosisDate IS NULL AND ref_diag_f.idfsReference IS NULL 
         THEN hc.datTentativeDiagnosisDate
         ELSE hc.datFinalDiagnosisDate 
        END AS datDateFinalDS,
   ref_outcome.[name] +  CASE WHEN hc.idfsOutcome = 10760000000 /*outRecovered*/ 
                                 THEN ISNULL(', ' + CONVERT(VARCHAR(10),hc.datDischargeDate, 104), '')
                              WHEN hc.idfsOutcome = 10770000000 /*outDied*/ 
                                 THEN ISNULL(', ' + CONVERT(VARCHAR(10),h.datDateOfDeath, 104), '')
                              ELSE ''
                          END AS strOutcome      ,
   ISNULL(@OutbreakID, N'') + o.strOutbreakID  AS  strCaseStatus,
 	ISNULL(CASE WHEN hc.strNote = '' THEN NULL ELSE hc.strNote END + N'; ', N'') + 
 		ISNULL(CASE WHEN hc.strClinicalNotes = '' THEN NULL ELSE hc.strClinicalNotes END + N'; ', N'') + 
 		ISNULL(CASE WHEN hc.strSummaryNotes = '' THEN NULL ELSE hc.strSummaryNotes END + N';', N'') AS strComments,
 ----------------------------------------------------------------------------------------------
          
   hc.strCaseID
   
 FROM tlbHumanCase hc
		INNER JOIN 
		(tlbHuman h
		   LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043/*rftHumanGender*/) ref_hg
		   ON ref_hg.idfsReference = h.idfsHumanGender
		    
		   LEFT JOIN		report.FN_GBL_AdressAsRow(@LangID) gl_cr
					on			gl_cr.idfGeoLocation = h.idfCurrentResidenceAddress
		    
		   LEFT JOIN		report.FN_GBL_AdressAsRow(@LangID) gl_r
					on			gl_r.idfGeoLocation = h.idfRegistrationAddress
		    
		   LEFT JOIN		report.FN_GBL_AdressAsRow(@LangID) gl_em
					on			gl_em.idfGeoLocation = h.idfEmployerAddress
		)
		ON hc.idfHuman = h.idfHuman AND
		  h.intRowStatus = 0
             
             
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042/*rftHumanAgeType*/) ref_AgeType
         ON ref_AgeType.idfsReference = hc.idfsHumanAgeType
         
         LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019/*rftDiagnosis*/) ref_diag
         ON ref_diag.idfsReference = hc.idfsTentativeDiagnosis
         
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019/*rftDiagnosis*/) ref_diag_f
         ON ref_diag_f.idfsReference = hc.idfsFinalDiagnosis
         
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011/*rftCaseStatus*/) ref_final_cs
         ON ref_final_cs.idfsReference = hc.idfsFinalCaseStatus
         
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011/*rftCaseStatus*/) ref_init_cs
         ON ref_init_cs.idfsReference = hc.idfsInitialCaseStatus
 
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000064 /*rftOutcome*/) ref_outcome
         ON ref_outcome.idfsReference = hc.idfsOutcome
         
         LEFT OUTER JOIN tlbObservation obs
         ON obs.idfObservation = hc.idfEpiObservation AND
            obs.intRowStatus = 0
                     
         LEFT OUTER JOIN 
         (tlbObservation obs1
             INNER JOIN tlbActivityParameters ap1
             ON ap1.idfObservation = obs1.idfObservation AND
                ap1.idfsParameter = @NumberOfImmunizationsReceived --  /*Number of immunizations received*/ 
                AND ap1.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap1
             ON ref_ap1.idfsReference = ap1.varValue 
         )
         ON obs1.idfObservation = hc.idfEpiObservation AND
            obs1.intRowStatus = 0
            
         LEFT OUTER JOIN 
         (tlbObservation obs2
             INNER JOIN tlbActivityParameters ap2
             ON ap2.idfObservation = obs2.idfObservation AND
                ap2.idfsParameter =  @ArePatientsImmunizationRecordsAvailable/* Are patient�s immunization records available*/ AND 
                ap2.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap2
             ON ref_ap2.idfsReference = ap2.varValue 
         )
         ON obs2.idfObservation = hc.idfEpiObservation AND
            obs2.intRowStatus = 0
      
         LEFT OUTER JOIN 
         (tlbObservation obs3
             INNER JOIN tlbActivityParameters ap3
             ON ap3.idfObservation = obs3.idfObservation AND
                ap3.idfsParameter =  @WasSpecificVaccinationAdministered/* Was specific vaccination administered?*/ AND 
                ap3.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap3
             ON ref_ap3.idfsReference = ap3.varValue 
         )
         ON obs3.idfObservation = hc.idfEpiObservation AND
            obs3.intRowStatus = 0  
               
         LEFT OUTER JOIN 
         (tlbObservation obs4
             INNER JOIN tlbActivityParameters ap4
             ON ap4.idfObservation = obs4.idfObservation AND
                ap4.idfsParameter =  @VaccinatedAgainstRubella/* Vaccinated against rubella*/ AND 
                ap4.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap4
             ON ref_ap4.idfsReference = ap4.varValue 
         )
         ON obs4.idfObservation = hc.idfEpiObservation AND
            obs4.intRowStatus = 0     
            
         LEFT OUTER JOIN 
         (tlbObservation obs5
             INNER JOIN tlbActivityParameters ap5
             ON ap5.idfObservation = obs5.idfObservation AND
                ap5.idfsParameter =  @NumberOfReceivedDoses_WithDiphtheriaComponent/* Number of received doses (any vaccine with diphtheria component)*/ AND 
                ap5.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap5
             ON ref_ap5.idfsReference = ap5.varValue 
         )
         ON obs5.idfObservation = hc.idfEpiObservation AND
            obs5.intRowStatus = 0             
            
         LEFT OUTER JOIN 
         (tlbObservation obs6
             INNER JOIN tlbActivityParameters ap6
             ON ap6.idfObservation = obs6.idfObservation AND
                ap6.idfsParameter =  @RabiesVaccineGiven/* Rabies vaccine given?*/ AND 
                ap6.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap6
             ON ref_ap6.idfsReference = ap6.varValue 
         )
         ON obs6.idfObservation = hc.idfEpiObservation AND
            obs6.intRowStatus = 0             
            
            
         LEFT OUTER JOIN 
         (tlbObservation obs7
             INNER JOIN tlbActivityParameters ap7
             ON ap7.idfObservation = obs7.idfObservation AND
                ap7.idfsParameter =  @NumberOfReceivedDoses_WithMeaslesComponent/* Number of received doses (any vaccine with measles component)*/ AND 
                ap7.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization3 /*Immunization 3+*/)  ref_ap7
             ON ref_ap7.idfsReference = ap7.varValue 
         )
         ON obs7.idfObservation = hc.idfEpiObservation AND
            obs7.intRowStatus = 0             
            
            
         LEFT OUTER JOIN 
         (tlbObservation obs8
             INNER JOIN tlbActivityParameters ap8
             ON ap8.idfObservation = obs8.idfObservation AND
                ap8.idfsParameter =  @HibVaccinationStatus/* Hib vaccination status*/ AND 
                ap8.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap8
             ON ref_ap8.idfsReference = ap8.varValue 
         )
         ON obs8.idfObservation = hc.idfEpiObservation AND
            obs8.intRowStatus = 0                 
            
         LEFT OUTER JOIN 
         (tlbObservation obs9
             INNER JOIN tlbActivityParameters ap9
             ON ap9.idfObservation = obs9.idfObservation AND
                ap9.idfsParameter =  @NumberOfReceivedDoses_WithMumpsComponent/* Number of received doses (any vaccine with mumps component)*/ AND 
                ap9.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization3 /*Immunization 3+*/)  ref_ap9
             ON ref_ap9.idfsReference = ap9.varValue 
         )
         ON obs9.idfObservation = hc.idfEpiObservation AND
            obs9.intRowStatus = 0      
                    
         LEFT OUTER JOIN 
         (tlbObservation obs10
             INNER JOIN tlbActivityParameters ap10
             ON ap10.idfObservation = obs10.idfObservation AND
                ap10.idfsParameter =  @MothersTetanusToxoidHistoryPriorToChildsDisease/* Mother's tetanus toxoid history prior to child's disease (known doses only)*/ AND 
                ap10.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap10
             ON ref_ap10.idfsReference = ap10.varValue 
         )
         ON obs10.idfObservation = hc.idfEpiObservation AND
            obs10.intRowStatus = 0      
               
         LEFT OUTER JOIN 
         (tlbObservation obs11
             INNER JOIN tlbActivityParameters ap11
             ON ap11.idfObservation = obs11.idfObservation AND
                ap11.idfsParameter =  @NumberOfReceivedDoses_WithPertussisComponent/* Number of received doses (any vaccine with pertussis component)*/ AND 
                ap11.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap11
             ON ref_ap11.idfsReference = ap11.varValue 
         )
         ON obs11.idfObservation = hc.idfEpiObservation AND
            obs11.intRowStatus = 0      
                             
         LEFT OUTER JOIN 
         (tlbObservation obs12
             INNER JOIN tlbActivityParameters ap12
             ON ap12.idfObservation = obs12.idfObservation AND
                ap12.idfsParameter =  @NumberOfReceivedDoses_WithRubellaComponent/* Number of received doses (any vaccine with rubella component)*/ AND 
                ap12.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization3 /*Immunization 3+*/)  ref_ap12
             ON ref_ap12.idfsReference = ap12.varValue 
         )
         ON obs12.idfObservation = hc.idfEpiObservation AND
            obs12.intRowStatus = 0      
                
         LEFT OUTER JOIN 
         (tlbObservation obs13
             INNER JOIN tlbActivityParameters ap13
             ON ap13.idfObservation = obs13.idfObservation AND
                ap13.idfsParameter = @IncludeDosesOfALLTetanusContainingToxoids /* Include doses of ALL tetanus-containing toxoids. Exclude doses received after this particular injury*/ AND 
                ap13.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap13
             ON ref_ap13.idfsReference = ap13.varValue 
         )
         ON obs13.idfObservation = hc.idfEpiObservation AND
            obs13.intRowStatus = 0                 
                
         LEFT OUTER JOIN 
         (tlbObservation obs14
             INNER JOIN tlbActivityParameters ap14
             ON ap14.idfObservation = obs14.idfObservation AND
                ap14.idfsParameter =  @WasVaccinationAdministered /* Was vaccination administered?*/ AND 
                ap14.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap14
             ON ref_ap14.idfsReference = ap14.varValue 
         )
         ON obs14.idfObservation = hc.idfEpiObservation AND
            obs14.intRowStatus = 0                      
                      
         LEFT OUTER JOIN 
         (tlbObservation obs15
             INNER JOIN tlbActivityParameters ap15
             ON ap15.idfObservation = obs15.idfObservation AND
                ap15.idfsParameter = @Revaccination /*Revaccination*/ AND 
                ap15.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap15
             ON ref_ap15.idfsReference = ap15.varValue 
         )
         ON obs15.idfObservation = hc.idfEpiObservation AND
            obs15.intRowStatus = 0 
         LEFT OUTER JOIN 
         (tlbObservation obs16
             INNER JOIN tlbActivityParameters ap16
             ON ap16.idfObservation = obs16.idfObservation AND
                ap16.idfsParameter = @DateOfVaccination /* Date of vaccination*/ AND 
                ap16.intRowStatus = 0
         )
         ON obs16.idfObservation = hc.idfEpiObservation AND
            obs16.intRowStatus = 0            
            
                         
         LEFT OUTER JOIN 
         (tlbObservation obs17
             INNER JOIN tlbActivityParameters ap17
             ON ap17.idfObservation = obs17.idfObservation AND
                ap17.idfsParameter = @DateOfRevaccination /* Date of revaccination*/ AND 
                ap17.intRowStatus = 0
         )
         ON obs17.idfObservation = hc.idfEpiObservation AND
            obs17.intRowStatus = 0     
         LEFT OUTER JOIN 
         (tlbObservation obs18
             INNER JOIN tlbActivityParameters ap18
             ON ap18.idfObservation = obs18.idfObservation AND
                ap18.idfsParameter = @ImmunizationHistory_DateOfLastVaccination /* Date of last vaccination*/ AND 
                ap18.intRowStatus = 0
         )
         ON obs18.idfObservation = hc.idfEpiObservation AND
            obs18.intRowStatus = 0   
                      
         LEFT OUTER JOIN 
         (tlbObservation obs18_2
             INNER JOIN tlbActivityParameters ap18_2
             ON ap18_2.idfObservation = obs18_2.idfObservation AND
                ap18_2.idfsParameter =  @SpecificVaccination_DateOfLastVaccination /* Date of last vaccination*/ AND 
                ap18_2.intRowStatus = 0
         )
         ON obs18_2.idfObservation = hc.idfEpiObservation AND
            obs18_2.intRowStatus = 0             
 
         --LEFT OUTER JOIN 
         --(tlbObservation obs19
         --    INNER JOIN tlbActivityParameters ap19
         --    ON ap19.idfObservation = obs19.idfObservation AND
         --       ap19.idfsParameter = @IfYes_IndicateDatesOfDoses /* Dates and doses of rabies vaccine given*/ AND 
         --       ap19.intRowStatus = 0
         --)
         --ON obs19.idfObservation = hc.idfEpiObservation AND
         --   obs19.intRowStatus = 0     
         
         OUTER APPLY(
         		SELECT TOP 1
         					convert(VARCHAR(10),cast(ap35.varValue as DATETIME), 104) as RabiesVaccinationDate,
         					cast(ap36.varValue as NVARCHAR(20)) as RabiesVaccineDose
     	 				FROM	tlbObservation obs35
							 INNER JOIN tlbActivityParameters ap35
							 on ap35.idfObservation = obs35.idfObservation AND
								ap35.idfsParameter = @RabiesVaccinationDate /* Rabies vaccination date*/ AND 
								ap35.intRowStatus = 0   
								AND (cast(SQL_VARIANT_PROPERTY(ap35.varValue, 'BaseType') as NVARCHAR) like N'%date%' or
									(
										cast(SQL_VARIANT_PROPERTY(ap35.varValue, 'BaseType') as NVARCHAR) like N'%char%' AND ISDATE(cast(ap35.varValue as NVARCHAR)) = 1 )	)
							 left  JOIN tlbActivityParameters ap36
							 on ap36.idfObservation = obs35.idfObservation AND
								ap36.idfsParameter = @RabiesVaccineDose /* Rabies vaccination dose*/ AND 
								ap36.intRowStatus = 0   
								AND ap35.idfRow = ap36.idfRow
			     	 	WHERE	obs35.idfObservation = hc.idfEpiObservation AND
								obs35.intRowStatus = 0  
         		ORDER BY cast(ap35.varValue as DATETIME) desc
         ) as RabiesVacination
 
         LEFT OUTER JOIN 
         (tlbObservation obs20
             INNER JOIN tlbActivityParameters ap20
             ON ap20.idfObservation = obs20.idfObservation AND
                ap20.idfsParameter = @IfYes_NumberOfVaccinesReceived /* Number of vaccines received*/ AND 
                ap20.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap20
             ON ref_ap20.idfsReference = ap20.varValue 
         )
         ON obs20.idfObservation = hc.idfEpiObservation AND
            obs20.intRowStatus = 0 
 
         LEFT OUTER JOIN 
         (tlbObservation obs21
             INNER JOIN tlbActivityParameters ap21
             ON ap21.idfObservation = obs21.idfObservation AND
                ap21.idfsParameter = @IntervalSinceLastTetanusToxoidDose /* Interval since last tetanus toxoid dose (years)*/ AND 
                ap21.intRowStatus = 0     
         )
         ON obs21.idfObservation = hc.idfEpiObservation AND
            obs21.intRowStatus = 0  
 
         --LEFT OUTER JOIN 
         --(tlbObservation obs21_2
         --    INNER JOIN tlbActivityParameters ap21_2
         --    ON ap21_2.idfObservation = obs21_2.idfObservation AND
         --       ap21_2.idfsParameter = @IntervalSinceLastTetanusToxoidDose1 /* Interval since last tetanus toxoid dose (years)*/ AND 
         --       ap21_2.intRowStatus = 0     
         --)
         --ON obs21_2.idfObservation = hc.idfEpiObservation AND
         --   obs21_2.intRowStatus = 0  
 
         LEFT OUTER JOIN 
         (tlbObservation obs22
             INNER JOIN tlbActivityParameters ap22
             ON ap22.idfObservation = obs22.idfObservation AND
                ap22.idfsParameter = @OPV1field   /* OPV-1*/ 
                AND ap22.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap22
             ON ref_ap22.idfsReference = ap22.varValue 
         )
         ON obs22.idfObservation = hc.idfEpiObservation AND
            obs22.intRowStatus = 0 
 
         LEFT OUTER JOIN 
         (tlbObservation obs23
             INNER JOIN tlbActivityParameters ap23
             ON ap23.idfObservation = obs23.idfObservation AND
                ap23.idfsParameter = @OPV2field  /* OPV-2*/ 
                AND ap23.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap23
             ON ref_ap23.idfsReference = ap23.varValue 
         )
         ON obs23.idfObservation = hc.idfEpiObservation AND
            obs23.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs24
             INNER JOIN tlbActivityParameters ap24
             ON ap24.idfObservation = obs24.idfObservation AND
                ap24.idfsParameter = @OPV3field  /* OPV-3*/ 
                AND ap24.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap24
             ON ref_ap24.idfsReference = ap24.varValue 
         )
         ON obs24.idfObservation = hc.idfEpiObservation AND
            obs24.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs25
             INNER JOIN tlbActivityParameters ap25
             ON ap25.idfObservation = obs25.idfObservation AND
                ap25.idfsParameter = @OPV4field  /* OPV-4*/  
                AND ap25.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap25
             ON ref_ap25.idfsReference = ap25.varValue 
         )
         ON obs25.idfObservation = hc.idfEpiObservation AND
            obs25.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs26
             INNER JOIN tlbActivityParameters ap26
             ON ap26.idfObservation = obs26.idfObservation AND
                ap26.idfsParameter = @OPV5field  /* OPV-5*/  
                AND ap26.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap26
             ON ref_ap26.idfsReference = ap26.varValue 
         )
         ON obs26.idfObservation = hc.idfEpiObservation AND
            obs26.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs27
             INNER JOIN tlbActivityParameters ap27
             ON ap27.idfObservation = obs27.idfObservation AND
                ap27.idfsParameter = @Firstfield  /* First*/ 
                AND ap27.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap27
             ON ref_ap27.idfsReference = ap27.varValue 
         )
         ON obs27.idfObservation = hc.idfEpiObservation AND
            obs27.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs28
             INNER JOIN tlbActivityParameters ap28
             ON ap28.idfObservation = obs28.idfObservation AND
                ap28.idfsParameter = @Secondfield  /* Second*/ 
                AND ap28.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap28
             ON ref_ap28.idfsReference = ap28.varValue 
         )
         ON obs28.idfObservation = hc.idfEpiObservation AND
            obs28.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs29
             INNER JOIN tlbActivityParameters ap29
             ON ap29.idfObservation = obs29.idfObservation AND
                ap29.idfsParameter = @Thirdfield   /* Third*/ 
                AND ap29.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap29
             ON ref_ap29.idfsReference = ap29.varValue 
         )
         ON obs29.idfObservation = hc.idfEpiObservation AND
            obs29.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs30
             INNER JOIN tlbActivityParameters ap30
             ON ap30.idfObservation = obs30.idfObservation AND
                ap30.idfsParameter = @DateOfLastOPVDoseReceived /* Date of last OPV dose received*/ AND 
                ap30.intRowStatus = 0     
         )
         ON obs30.idfObservation = hc.idfEpiObservation AND
            obs30.intRowStatus = 0  
		
		--NEW!!!
		 LEFT OUTER JOIN 
         (tlbObservation obs31
             INNER JOIN tlbActivityParameters ap31
             ON ap31.idfObservation = obs31.idfObservation AND
                ap31.idfsParameter =  @IsPatientVaccinatedAgainstLeptospirosis /*Is patient vaccinated against leptospirosis?*/ AND 
                ap31.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap31
             ON ref_ap31.idfsReference = ap31.varValue 
         )
         ON obs31.idfObservation = hc.idfEpiObservation AND
            obs31.intRowStatus = 0   
            
         LEFT OUTER JOIN 
         (tlbObservation obs32
             INNER JOIN tlbActivityParameters ap32
             ON ap32.idfObservation = obs32.idfObservation AND
                ap32.idfsParameter = @DateOfVaccinationOfPatientAgainstLeptospirosis /*Date of vaccination of patient against leptospirosis*/ AND 
                ap32.intRowStatus = 0     
         )
         ON obs32.idfObservation = hc.idfEpiObservation AND
            obs32.intRowStatus = 0              
 
         --LEFT OUTER JOIN 
         --(tlbObservation obs31
         --    INNER JOIN tlbActivityParameters ap31
         --    ON ap31.idfObservation = obs31.idfObservation AND
         --       ap31.idfsParameter = @NameVaccine1 /* Vaccine 1: Name of vaccine*/ AND 
         --       ap31.intRowStatus = 0   
 
         --    LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_VaccineTypes /*Vaccine types*/)  ref_ap31
         --    ON ref_ap31.idfsReference = ap31.varValue 
                  
         --)
         --ON obs31.idfObservation = hc.idfEpiObservation AND
         --   obs31.intRowStatus = 0  
 
         --LEFT OUTER JOIN 
         --(tlbObservation obs32
         --    INNER JOIN tlbActivityParameters ap32
         --    ON ap32.idfObservation = obs32.idfObservation AND
         --       ap32.idfsParameter = @NameVaccine2 /* Vaccine 2: Name of vaccine*/ AND 
         --       ap32.intRowStatus = 0   
 
         --    LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_VaccineTypes /*Vaccine types*/)  ref_ap32
         --    ON ref_ap32.idfsReference = ap32.varValue 
                  
         --)
         --ON obs32.idfObservation = hc.idfEpiObservation AND
         --   obs32.intRowStatus = 0  
            
         --LEFT OUTER JOIN 
         --(tlbObservation obs33
         --    INNER JOIN tlbActivityParameters ap33
         --    ON ap33.idfObservation = obs33.idfObservation AND
         --       ap33.idfsParameter = @NameVaccine3 /* Vaccine 3: Name of vaccine*/ AND 
         --       ap33.intRowStatus = 0   
 
         --    LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_VaccineTypes /*Vaccine types*/)  ref_ap33
         --    ON ref_ap33.idfsReference = ap33.varValue 
                  
         --)
         --ON obs33.idfObservation = hc.idfEpiObservation AND
         --   obs33.intRowStatus = 0         
         
     LEFT OUTER JOIN 
         (tlbObservation obs37
             INNER JOIN tlbActivityParameters ap37
             ON ap37.idfObservation = obs37.idfObservation AND
                ap37.idfsParameter =  @PneumonaeNumberReceivedDoses/*HEI S. pneumonae caused infection GG: Number of received doses of S. pneumonae vaccine*/ AND 
                ap37.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization3 /*Immunization 3+*/)  ref_ap37
             ON ref_ap37.idfsReference = ap37.varValue 
         )
         ON obs37.idfObservation = hc.idfEpiObservation AND
            obs37.intRowStatus = 0    
     
     LEFT OUTER JOIN 
         (tlbObservation obs38
             INNER JOIN tlbActivityParameters ap38
             ON ap38.idfObservation = obs38.idfObservation AND
                ap38.idfsParameter =  @PneumonaeVaccinationStatus /*HEI S. pneumonae caused infection GG: S. pneumonae vaccination status*/ AND 
                ap38.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap38
             ON ref_ap38.idfsReference = ap38.varValue 
         )
         ON obs38.idfObservation = hc.idfEpiObservation AND
            obs38.intRowStatus = 0     
            
     LEFT OUTER JOIN 
         (tlbObservation obs39
             INNER JOIN tlbActivityParameters ap39
             ON ap39.idfObservation = obs39.idfObservation AND
                ap39.idfsParameter = @PneumonaeDateLastVaccination /*HEI S. pneumonae caused infection GG: Date of last vaccination*/ AND 
                ap39.intRowStatus = 0     
                AND (cast(SQL_VARIANT_PROPERTY(ap39.varValue, 'BaseType') as NVARCHAR) like N'%date%' or
					(cast(SQL_VARIANT_PROPERTY(ap39.varValue, 'BaseType') as NVARCHAR) like N'%char%' AND ISDATE(cast(ap39.varValue as NVARCHAR)) = 1 )	)
         )
         ON obs39.idfObservation = hc.idfEpiObservation AND
            obs39.intRowStatus = 0         

         LEFT OUTER JOIN 
         (tlbObservation obs40
             INNER JOIN tlbActivityParameters ap40
             ON ap40.idfObservation = obs40.idfObservation AND
                ap40.idfsParameter = @HepatitisANumberReceivedDoses /* HEI Acute Viral Hepatitis A GG: Number of received doses of Hepatitis A vaccine*/ AND 
                ap40.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap40
             ON ref_ap40.idfsReference = ap40.varValue 
         )
         ON obs40.idfObservation = hc.idfEpiObservation AND
            obs40.intRowStatus = 0             
            
      LEFT OUTER JOIN 
         (tlbObservation obs41
             INNER JOIN tlbActivityParameters ap41
             ON ap41.idfObservation = obs41.idfObservation AND
                ap41.idfsParameter = @HepatitisADateLastVaccination /*HEI Acute Viral Hepatitis A GG: Date of last vaccination*/ AND 
                ap41.intRowStatus = 0     
                AND (cast(SQL_VARIANT_PROPERTY(ap41.varValue, 'BaseType') as NVARCHAR) like N'%date%' or
					(cast(SQL_VARIANT_PROPERTY(ap41.varValue, 'BaseType') as NVARCHAR) like N'%char%' AND ISDATE(cast(ap41.varValue as NVARCHAR)) = 1 )	)
         )
         ON obs41.idfObservation = hc.idfEpiObservation AND
            obs41.intRowStatus = 0   
 
 
 
 
     LEFT OUTER JOIN tlbOutbreak o
     ON hc.idfOutbreak = o.idfOutbreak
 		AND o.intRowStatus = 0
 		
 	LEFT JOIN tlbPerson tp ON
 		tp.idfPerson = hc.idfSentByPerson
 
 	LEFT JOIN dbo.FN_GBL_Institution(@LangID) fi ON
 		fi.idfOffice = hc.idfSentByOffice
 		
 		
 		
 WHERE    hc.idfsSite = ISNULL(@SiteID, dbo.FN_GBL_SITEID_GET()) AND
          hc.intRowStatus = 0 AND 
          DATEDIFF(D, @StartDate, ISNULL(hc.datNotificationDate ,hc.datEnteredDate)) >= 0 AND
          DATEDIFF(D, @FinishDate, ISNULL(hc.datNotificationDate ,hc.datEnteredDate)) <= 0 AND
 			(ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) = @Diagnosis OR @Diagnosis is null)
 		
 		
SELECT
	strName,	
 	strAge, 
 	strGender,
 	strAddress,
 	strPlaceOfStudyWork,
 	datDiseaseOnsetDate,
 	datDateOfFirstPresentation,
 	strFacilityThatSentNotification,
 	strProvisionalDiagnosis,
 	datDateProvisionalDiagnosis,
 	datDateSpecificTreatment,
 	datDateSpecimenTaken,
 	strResultAndDate,
 	strVaccinationStatus,
 	datDateCaseInvestigation,
 	strFinalDS,
 	strFinalClassification,
 	datDateFinalDS,
 	strOutcome,
 	strCaseStatus,
 	strComments,
 	strCaseID,
	datEnteredDate
FROM @ReportTable
ORDER BY datEnteredDate
GO
PRINT N'Altering Procedure [dbo].[USP_VET_DISEASE_REPORT_DEL]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_DEL
--
-- Description:	Sets a disease report record to "inactive".
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/25/2019 Initial release.
-- Stephen Long     12/13/2019 Added comment for rollback statement.
-- Ann Xiong        03/23/2020 Added paramter @DeduplicationIndicator to skip checking 
--                             HerdFlockCount and SpeciesCount when @DeduplicationIndicator = 1
-- Ann Xiong        03/27/2020 Modified to skip checking any dependent child objects for 
--                             Deduplication.
-- Stephen Long     11/29/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     12/08/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long     03/06/2023 Changed data audit call to USSP_GBL_DATA_AUDIT_EVENT_SET.
-- Ann Xiong	    03/09/2023 Added @DataAuditEventID parameter
-- Ann Xiong		03/10/2023 Added check for @DataAuditEventID IS NULL when @DeduplicationIndicator = 1
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_DEL]
(
    @DiseaseReportID BIGINT,
    @DeduplicationIndicator BIT = 0,
    @DataAuditEventID BIGINT = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        DECLARE @ReturnCode INT
            = 0,
                @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
                @FarmCount AS INT = 0,
                @HerdFlockCount AS INT = 0,
                @SpeciesCount AS INT = 0,
                @AnimalCount AS INT = 0,
                @VaccinationCount AS INT = 0,
                @SampleCount AS INT = 0,
                @PensideTestCount AS INT = 0,
                @LabTestCount AS INT = 0,
                @TestInterpretationCount AS INT = 0,
                @ReportLogCount AS INT = 0,
                @OutbreakSessionCount AS INT = 0,
                @DataAuditEventTypeid BIGINT = 10016002,               -- Delete audit event type
                @ObjectTypeID BIGINT = 10017085,                       -- Veterinary disease report
                @ObjectID BIGINT = @DiseaseReportID,
                @ObjectTableID BIGINT = 75800000000,                   -- tlbVetCase
                @ObjectFarmTableID BIGINT = 75550000000,               -- tlbFarm
                @ObjectActivityParametersTableID BIGINT = 75410000000, -- tlbActivityParameters
                @ObjectObservationTableID BIGINT = 75640000000,        -- tlbObservation
                --@DataAuditEventID BIGINT,
                @AuditUserID BIGINT,
                @AuditSiteID BIGINT,
                @EIDSSObjectID NVARCHAR(200) = (
                                                   SELECT strCaseID FROM dbo.tlbVetCase WHERE idfVetCase = @DiseaseReportID
                                               ),
                @FarmID BIGINT = (
                                     SELECT idfFarm FROM dbo.tlbVetCase WHERE idfVetCase = @DiseaseReportID
                                 );
        DECLARE @ControlMeasuresObservationID BIGINT = (
                                                           SELECT idfObservation
                                                           FROM dbo.tlbVetCase
                                                           WHERE idfVetCase = @DiseaseReportID
                                                       ),
                @FarmEpiObservationID BIGINT = (
                                                   SELECT idfObservation FROM dbo.tlbFarm WHERE idfFarm = @FarmID
                                               );

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        SELECT @HerdFlockCount = COUNT(*)
        FROM dbo.tlbHerd h
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = h.idfFarm
                   AND f.intRowStatus = 0
            INNER JOIN dbo.tlbVetCase v
                ON v.idfFarm = f.idfFarm
        WHERE v.idfVetCase = @DiseaseReportID
              AND h.intRowStatus = 0;

        SELECT @SpeciesCount = COUNT(*)
        FROM dbo.tlbSpecies s
            INNER JOIN dbo.tlbHerd h
                ON h.idfHerd = s.idfHerd
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = h.idfFarm
                   AND f.intRowStatus = 0
            INNER JOIN dbo.tlbVetCase v
                ON v.idfFarm = f.idfFarm
        WHERE v.idfVetCase = @DiseaseReportID
              AND s.intRowStatus = 0;

        SELECT @AnimalCount = COUNT(*)
        FROM dbo.tlbAnimal a
            INNER JOIN dbo.tlbSpecies s
                ON s.idfSpecies = a.idfSpecies
                   AND s.intRowStatus = 0
            INNER JOIN dbo.tlbHerd h
                ON h.idfHerd = s.idfHerd
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = h.idfFarm
                   AND f.intRowStatus = 0
            INNER JOIN dbo.tlbVetCase v
                ON v.idfFarm = f.idfFarm
        WHERE v.idfVetCase = @DiseaseReportID
              AND a.intRowStatus = 0;

        SELECT @VaccinationCount = COUNT(*)
        FROM dbo.tlbVaccination
        WHERE idfVetCase = @DiseaseReportID
              AND intRowStatus = 0;

        SELECT @SampleCount = COUNT(*)
        FROM dbo.tlbMaterial
        WHERE idfVetCase = @DiseaseReportID
              AND intRowStatus = 0;

        SELECT @PensideTestCount = COUNT(*)
        FROM dbo.tlbPensideTest p
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = p.idfMaterial
                   AND m.intRowStatus = 0
        WHERE m.idfVetCase = @DiseaseReportID
              AND p.intRowStatus = 0;

        SELECT @LabTestCount = COUNT(*)
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE m.idfVetCase = @DiseaseReportID
              AND t.intRowStatus = 0;

        SELECT @TestInterpretationCount = COUNT(*)
        FROM dbo.tlbTestValidation tv
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = tv.idfTesting
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE m.idfVetCase = @DiseaseReportID
              AND tv.intRowStatus = 0;

        SELECT @ReportLogCount = COUNT(*)
        FROM dbo.tlbVetCaseLog
        WHERE idfVetCase = @DiseaseReportID
              AND intRowStatus = 0;

        SELECT @OutbreakSessionCount = COUNT(*)
        FROM dbo.tlbVetCase v
            INNER JOIN dbo.tlbOutbreak o
                ON o.idfOutbreak = v.idfOutbreak
                   AND o.intRowStatus = 0
        WHERE v.idfVetCase = @DiseaseReportID
              AND v.idfOutbreak IS NOT NULL

        IF @DeduplicationIndicator = 0
        BEGIN
            IF @AnimalCount = 0
               AND @VaccinationCount = 0
               AND @SampleCount = 0
               AND @PensideTestCount = 0
               AND @LabTestCount = 0
               AND @TestInterpretationCount = 0
               AND @ReportLogCount = 0
               AND @OutbreakSessionCount = 0
               AND @HerdFlockCount = 0
               AND @SpeciesCount = 0
            BEGIN
                -- Data audit
        		IF @DataAuditEventID IS NULL
        		BEGIN 
					EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                          @AuditSiteID,
                                                          @DataAuditEventTypeID,
                                                          @ObjectTypeID,
                                                          @DiseaseReportID,
                                                          @ObjectTableID,
                                                          @EIDSSObjectID, 
                                                          @DataAuditEventID OUTPUT;
				END
                -- End data audit

                UPDATE dbo.tlbVetCase
                SET idfParentMonitoringSession = NULL,
                    idfOutbreak = NULL
                WHERE idfVetCase = @DiseaseReportID;

                IF @ControlMeasuresObservationID IS NOT NULL
                BEGIN
                    UPDATE dbo.tlbActivityParameters
                    SET intRowStatus = 1
                    WHERE idfObservation = @ControlMeasuresObservationID
                          AND intRowStatus = 0;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectActivityParametersTableID,
                           idfActivityParameters,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @ControlMeasuresObservationID
                          AND intRowStatus = 1;
                    -- End data audit

                    UPDATE dbo.tlbObservation
                    SET intRowStatus = 1
                    WHERE idfObservation = @ControlMeasuresObservationID;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectObservationTableID,
                           @ControlMeasuresObservationID,
                           @AuditUserName,
                           @EIDSSObjectID;
                -- End data audit
                END

                UPDATE dbo.tlbVetCase
                SET intRowStatus = 1,
                    datModificationForArchiveDate = GETDATE()
                WHERE idfVetCase = @DiseaseReportID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       @DiseaseReportID,
                       @AuditUserName,
                       @EIDSSObjectID;
                -- End data audit

                IF @FarmEpiObservationID IS NOT NULL
                BEGIN
                    UPDATE dbo.tlbActivityParameters
                    SET intRowStatus = 1
                    WHERE idfObservation = @FarmEpiObservationID
                          AND intRowStatus = 0;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectActivityParametersTableID,
                           idfActivityParameters,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @FarmEpiObservationID
                          AND intRowStatus = 1;
                    -- End data audit

                    UPDATE dbo.tlbObservation
                    SET intRowStatus = 1
                    WHERE idfObservation = @FarmEpiObservationID;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectObservationTableID,
                           @FarmEpiObservationID,
                           @AuditUserName,
                           @EIDSSObjectID;
                -- End data audit
                END

                UPDATE dbo.tlbFarm
                SET intRowStatus = 1
                WHERE idfFarm =
                (
                    SELECT idfFarm FROM dbo.tlbVetCase WHERE idfVetCase = @DiseaseReportID
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectFarmTableID,
                       @FarmID,
                       @AuditUserName,
                       @EIDSSObjectID;
            -- End data audit
            END
            ELSE
            BEGIN
                IF @OutbreakSessionCount > 0
                BEGIN
                    SET @ReturnCode = 2;
                    SET @ReturnMessage = 'Unable to delete this record as it is dependent on another object.';
                END;
                ELSE
                BEGIN
                    SET @ReturnCode = 1;
                    SET @ReturnMessage = 'Unable to delete this record as it contains dependent child objects.';
                END;
            END;
        END
        ELSE
        BEGIN
            -- Data audit
        	IF @DataAuditEventID IS NULL
        	BEGIN 
				EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @ObjectID,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;
			END

            UPDATE dbo.tlbVetCase
            SET idfParentMonitoringSession = NULL,
                idfOutbreak = NULL
            WHERE idfVetCase = @DiseaseReportID;

            IF @ControlMeasuresObservationID IS NOT NULL
            BEGIN
                UPDATE dbo.tlbActivityParameters
                SET intRowStatus = 1
                WHERE idfObservation = @ControlMeasuresObservationID
                      AND intRowStatus = 0;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectActivityParametersTableID,
                       idfActivityParameters,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM dbo.tlbActivityParameters
                WHERE idfObservation = @ControlMeasuresObservationID
                      AND intRowStatus = 1;
                -- End data audit

                UPDATE dbo.tlbObservation
                SET intRowStatus = 1
                WHERE idfObservation = @ControlMeasuresObservationID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectObservationTableID,
                       @ControlMeasuresObservationID,
                       @AuditUserName,
                       @EIDSSObjectID;
            -- End data audit
            END

            UPDATE dbo.tlbVetCase
            SET intRowStatus = 1,
                datModificationForArchiveDate = GETDATE()
            WHERE idfVetCase = @DiseaseReportID;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   @DiseaseReportID,
                   @AuditUserName,
                   @EIDSSObjectID;
            -- End data audit

            IF @FarmEpiObservationID IS NOT NULL
            BEGIN
                UPDATE dbo.tlbActivityParameters
                SET intRowStatus = 1
                WHERE idfObservation = @FarmEpiObservationID
                      AND intRowStatus = 0;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectActivityParametersTableID,
                       idfActivityParameters,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM dbo.tlbActivityParameters
                WHERE idfObservation = @FarmEpiObservationID
                      AND intRowStatus = 0;
                -- End data audit

                UPDATE dbo.tlbObservation
                SET intRowStatus = 1
                WHERE idfObservation = @FarmEpiObservationID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectObservationTableID,
                       @FarmEpiObservationID,
                       @AuditUserName,
                       @EIDSSObjectID;
            -- End data audit
            END

            UPDATE dbo.tlbFarm
            SET intRowStatus = 1
            WHERE idfFarm =
            (
                SELECT idfFarm FROM dbo.tlbVetCase WHERE idfVetCase = @DiseaseReportID
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectFarmTableID,
                   @FarmID,
                   @AuditUserName,
                   @EIDSSObjectID;
        -- End data audit
        END

        IF @@TRANCOUNT > 0
           AND @returnCode = 0
            COMMIT;
        ELSE
            ROLLBACK;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FREEZER_SET]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FREEZER_SET
--
-- Description:	Inserts or updates freezer for the laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/29/2018 Initial release.
-- Stephen Long     01/25/2019 Added box place availability.
-- Stephen Long     03/06/2019 Changed the get next number object name paramater value from the ID 
--                             to the name.
-- Stephen Long     03/28/2019 Changed Notes parameter to FreezerNote.
-- Stephen Long     03/04/2020 Changed box size type from int to bigint.
-- Stephen Long     03/24/2020 Added rack barcode.
-- Stephen Long     03/30/2020 Added audit user name parameter.
-- Leo Tracchia     09/15/2020 Added update for subdivions if intRowStatus = 1
-- Leo Tracchia		11/04/2021 Added logic to correctly update barcode
-- Stephen Long     02/22/2023 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FREEZER_SET]
(
    @LanguageID NVARCHAR(50),
    @FreezerID BIGINT,
    @StorageTypeID BIGINT,
    @OrganizationID BIGINT,
    @FreezerName NVARCHAR(200) = NULL,
    @FreezerNote NVARCHAR(200) = NULL,
    @EIDSSFreezerID NVARCHAR(200) = NULL,
    @Building NVARCHAR(200) = NULL,
    @Room NVARCHAR(200) = NULL,
    @RowStatus INT,
    @FreezerSubdivisions NVARCHAR(MAX) = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                                                                   -- Data audit
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @DataAuditEventID BIGINT = NULL,
            @DataAuditEventTypeID BIGINT = NULL,
            @ObjectTypeID BIGINT = 10017044,                       -- Repository Scheme
            @ObjectTableFreezerID BIGINT = 75560000000,            -- tlbFreezer
            @ObjectTableFreezerSubdivisionID BIGINT = 75570000000, -- tlbFreezerSubdivision
            @RowID BIGINT,
            @FreezerSubdivisionID BIGINT,
            @SubdivisionTypeID BIGINT = NULL,
            @ParentFreezerSubdivisionID BIGINT = NULL,
            @EIDSSFreezerSubdivisionID NVARCHAR(200) = NULL,
            @FreezerSubdivisionName NVARCHAR(200) = NULL,
            @SubdivisionNote NVARCHAR(200) = NULL,
            @NumberOfLocations INT = NULL,
            @BoxSizeTypeID BIGINT = NULL,
            @BoxPlaceAvailability NVARCHAR(MAX) = NULL,
            @RowAction CHAR = NULL;
    DECLARE @FreezerBeforeEdit TABLE
    (
        FreezerID BIGINT,
        StorageTypeID BIGINT,
        FreezerName NVARCHAR(200),
        FreezerNote NVARCHAR(200),
        EIDSSFreezerID NVARCHAR(200),
        RowStatus INT,
        Building NVARCHAR(200),
        Room NVARCHAR(200)
    );
    DECLARE @FreezerAfterEdit TABLE
    (
        FreezerID BIGINT,
        StorageTypeID BIGINT,
        FreezerName NVARCHAR(200),
        FreezerNote NVARCHAR(200),
        EIDSSFreezerID NVARCHAR(200),
        RowStatus INT,
        Building NVARCHAR(200),
        Room NVARCHAR(200)
    );
    DECLARE @FreezerSubdivisionBeforeEdit TABLE
    (
        FreezerSubdivisionID BIGINT NOT NULL,
        SubdivisionTypeID BIGINT NULL,
        FreezerID BIGINT NOT NULL,
        ParentFreezerSubdivisionID BIGINT NULL,
        EIDSSFreezerSubdivisionID NVARCHAR(200) NULL,
        FreezerSubdivisionName NVARCHAR(200) NULL,
        SubdivisionNote NVARCHAR(200) NULL,
        NumberOfLocations INT NULL,
        BoxSizeTypeID BIGINT NULL,
        BoxPlaceAvailability NVARCHAR(4000) NULL,
        RowStatus INT NOT NULL
    );
    DECLARE @FreezerSubdivisionAfterEdit TABLE
    (
        FreezerSubdivisionID BIGINT NOT NULL,
        SubdivisionTypeID BIGINT NULL,
        FreezerID BIGINT NOT NULL,
        ParentFreezerSubdivisionID BIGINT NULL,
        EIDSSFreezerSubdivisionID NVARCHAR(200) NULL,
        FreezerSubdivisionName NVARCHAR(200) NULL,
        SubdivisionNote NVARCHAR(200) NULL,
        NumberOfLocations INT NULL,
        BoxSizeTypeID BIGINT NULL,
        BoxPlaceAvailability NVARCHAR(4000) NULL,
        RowStatus INT NOT NULL
    );
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @FreezerSubdivisionTemp TABLE
    (
        FreezerSubdivisionID BIGINT NOT NULL,
        SubdivisionTypeID BIGINT NULL,
        FreezerID BIGINT NOT NULL,
        ParentFreezerSubdivisionID BIGINT NULL,
        OrganizationID BIGINT NOT NULL,
        EIDSSFreezerSubdivisionID NVARCHAR(200) NULL,
        FreezerSubdivisionName NVARCHAR(200) NULL,
        SubdivisionNote NVARCHAR(200) NULL,
        NumberOfLocations INT NULL,
        BoxSizeTypeID BIGINT NULL,
        BoxPlaceAvailability NVARCHAR(MAX) NULL,
        RowStatus INT NOT NULL,
        RowAction CHAR NULL
    );
    BEGIN TRY
        BEGIN TRANSACTION;
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @EIDSSFreezerID IS NULL
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = 'Freezer Barcode',
                                               @NextNumberValue = @EIDSSFreezerID OUTPUT,
                                               @InstallationSite = @OrganizationID;
        END;

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbFreezer
            WHERE idfFreezer = @FreezerID
                  AND intRowStatus = 0
        )
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbFreezer',
                                              @idfsKey = @FreezerID OUTPUT;

            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @FreezerID,
                                                      @ObjectTableFreezerID,
                                                      @EIDSSFreezerID,
                                                      @DataAuditEventID OUTPUT;

            INSERT INTO dbo.tlbFreezer
            (
                idfFreezer,
                idfsStorageType,
                idfsSite,
                strFreezerName,
                strNote,
                strBarcode,
                intRowStatus,
                LocBuildingName,
                LocRoom,
                AuditCreateUser
            )
            VALUES
            (@FreezerID,
             @StorageTypeID,
             @OrganizationID,
             @FreezerName,
             @FreezerNote,
             @EIDSSFreezerID,
             @RowStatus,
             @Building,
             @Room,
             @AuditUserName
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableFreezerID,
             @FreezerID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableFreezerID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSFreezerID
            );
        -- End data audit
        END;
        ELSE
        BEGIN
            -- Data audit
            INSERT INTO @FreezerBeforeEdit
            SELECT idfFreezer,
                   idfsStorageType,
                   strFreezerName,
                   strNote,
                   strBarcode,
                   intRowStatus,
                   LocBuildingName,
                   LocRoom
            FROM dbo.tlbFreezer
            WHERE idfFreezer = @FreezerID;
            -- End data audit

            IF @FreezerSubdivisions IS NULL
               AND @RowStatus = 1
            BEGIN
                UPDATE tlbFreezer
                SET intRowStatus = @RowStatus
                WHERE idfFreezer = @FreezerID

                UPDATE tlbFreezerSubdivision
                SET intRowStatus = @RowStatus
                WHERE idfFreezer = @FreezerID
            END
            ELSE
            BEGIN
                UPDATE dbo.tlbFreezer
                SET idfsStorageType = @StorageTypeID,
                    idfsSite = @OrganizationID,
                    strFreezerName = @FreezerName,
                    strNote = @FreezerNote,
                    strBarcode = @EIDSSFreezerID,
                    intRowStatus = @RowStatus,
                    LocBuildingName = @Building,
                    LocRoom = @Room,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfFreezer = @FreezerID;
            END

            -- Data audit
            INSERT INTO @FreezerAfterEdit
            SELECT idfFreezer,
                   idfsStorageType,
                   strFreezerName,
                   strNote,
                   strBarcode,
                   intRowStatus,
                   LocBuildingName,
                   LocRoom
            FROM dbo.tlbFreezer
            WHERE idfFreezer = @FreezerID;

            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @FreezerID,
                                                      @ObjectTableFreezerID,
                                                      @EIDSSFreezerID,
                                                      @DataAuditEventID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableFreezerID,
                   79000000000,
                   a.FreezerID,
                   NULL,
                   b.StorageTypeID,
                   a.StorageTypeID,
                   @AuditUserName,
                   @EIDSSFreezerID
            FROM @FreezerAfterEdit a
                FULL JOIN @FreezerBeforeEdit b
                    ON a.FreezerID = b.FreezerID
            WHERE (a.StorageTypeID <> b.StorageTypeID)
                  OR (
                         a.StorageTypeID IS NOT NULL
                         AND b.StorageTypeID IS NULL
                     )
                  OR (
                         a.StorageTypeID IS NULL
                         AND b.StorageTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableFreezerID,
                   79010000000,
                   a.FreezerID,
                   NULL,
                   b.EIDSSFreezerID,
                   a.EIDSSFreezerID,
                   @AuditUserName,
                   @EIDSSFreezerID
            FROM @FreezerAfterEdit a
                FULL JOIN @FreezerBeforeEdit b
                    ON a.FreezerID = b.FreezerID
            WHERE (a.EIDSSFreezerID <> b.EIDSSFreezerID)
                  OR (
                         a.EIDSSFreezerID IS NOT NULL
                         AND b.EIDSSFreezerID IS NULL
                     )
                  OR (
                         a.EIDSSFreezerID IS NULL
                         AND b.EIDSSFreezerID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableFreezerID,
                   79020000000,
                   a.FreezerID,
                   NULL,
                   b.FreezerName,
                   a.FreezerName,
                   @AuditUserName,
                   @EIDSSFreezerID
            FROM @FreezerAfterEdit a
                FULL JOIN @FreezerBeforeEdit b
                    ON a.FreezerID = b.FreezerID
            WHERE (a.FreezerName <> b.FreezerName)
                  OR (
                         a.FreezerName IS NOT NULL
                         AND b.FreezerName IS NULL
                     )
                  OR (
                         a.FreezerName IS NULL
                         AND b.FreezerName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableFreezerID,
                   79030000000,
                   a.FreezerID,
                   NULL,
                   b.FreezerNote,
                   a.FreezerNote,
                   @AuditUserName,
                   @EIDSSFreezerID
            FROM @FreezerAfterEdit a
                FULL JOIN @FreezerBeforeEdit b
                    ON a.FreezerID = b.FreezerID
            WHERE (a.FreezerNote <> b.FreezerNote)
                  OR (
                         a.FreezerNote IS NOT NULL
                         AND b.FreezerNote IS NULL
                     )
                  OR (
                         a.FreezerNote IS NULL
                         AND b.FreezerNote IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableFreezerID,
                   51586990000043,
                   a.FreezerID,
                   NULL,
                   b.Building,
                   a.Building,
                   @AuditUserName,
                   @EIDSSFreezerID
            FROM @FreezerAfterEdit a
                FULL JOIN @FreezerBeforeEdit b
                    ON a.FreezerID = b.FreezerID
            WHERE (a.Building <> b.Building)
                  OR (
                         a.Building IS NOT NULL
                         AND b.Building IS NULL
                     )
                  OR (
                         a.Building IS NULL
                         AND b.Building IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableFreezerID,
                   51586990000044,
                   a.FreezerID,
                   NULL,
                   b.Room,
                   a.Room,
                   @AuditUserName,
                   @EIDSSFreezerID
            FROM @FreezerAfterEdit a
                FULL JOIN @FreezerBeforeEdit b
                    ON a.FreezerID = b.FreezerID
            WHERE (a.Room <> b.Room)
                  OR (
                         a.Room IS NOT NULL
                         AND b.Room IS NULL
                     )
                  OR (
                         a.Room IS NULL
                         AND b.Room IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableFreezerID,
                   a.FreezerID,
                   NULL,
                   @AuditUserName,
                   @EIDSSFreezerID
            FROM @FreezerAfterEdit AS a
                FULL JOIN @FreezerBeforeEdit AS b
                    ON a.FreezerID = b.FreezerID
            WHERE a.RowStatus = 0
                  AND b.RowStatus = 1;
        END;

        INSERT INTO @FreezerSubdivisionTemp
        SELECT *
        FROM
            OPENJSON(@FreezerSubdivisions)
            WITH
            (
                FreezerSubdivisionID BIGINT,
                SubdivisionTypeID BIGINT,
                FreezerID BIGINT,
                ParentFreezerSubdivisionID BIGINT,
                OrganizationID BIGINT,
                EIDSSFreezerSubdivisionID NVARCHAR(200),
                FreezerSubdivisionName NVARCHAR(200),
                SubdivisionNote NVARCHAR(200),
                NumberOfLocations INT,
                BoxSizeTypeID BIGINT,
                BoxPlaceAvailability NVARCHAR(MAX),
                RowStatus INT,
                RowAction CHAR
            );

        WHILE EXISTS (SELECT * FROM @FreezerSubdivisionTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FreezerSubdivisionID,
                @FreezerSubdivisionID = FreezerSubdivisionID,
                @SubdivisionTypeID = SubdivisionTypeID,
                @ParentFreezerSubdivisionID = ParentFreezerSubdivisionID,
                @OrganizationID = OrganizationID,
                @EIDSSFreezerSubdivisionID = EIDSSFreezerSubdivisionID,
                @FreezerSubdivisionName = FreezerSubdivisionName,
                @SubdivisionNote = SubdivisionNote,
                @NumberOfLocations = NumberOfLocations,
                @BoxSizeTypeID = BoxSizeTypeID,
                @BoxPlaceAvailability = BoxPlaceAvailability,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FreezerSubdivisionTemp;

            IF @RowAction = 'I'
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbFreezerSubdivision',
                                                  @idfsKey = @FreezerSubdivisionID OUTPUT;

                IF (
                       @SubdivisionTypeID = 39890000000
                       AND (
                               TRIM(@EIDSSFreezerSubdivisionID) = N''
                               OR @EIDSSFreezerSubdivisionID IS NULL
                           )
                   ) --Box
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Box Barcode',
                                                       @NextNumberValue = @EIDSSFreezerSubdivisionID OUTPUT,
                                                       @InstallationSite = NULL;
                END
                ELSE IF (
                            @SubdivisionTypeID = 39900000000
                            AND (
                                    TRIM(@EIDSSFreezerSubdivisionID) = N''
                                    OR @EIDSSFreezerSubdivisionID IS NULL
                                )
                        ) -- Shelf
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Shelf Barcode',
                                                       @NextNumberValue = @EIDSSFreezerSubdivisionID OUTPUT,
                                                       @InstallationSite = NULL;
                END
                ELSE IF (
                            @SubdivisionTypeID = 10093001
                            AND (
                                    TRIM(@EIDSSFreezerSubdivisionID) = N''
                                    OR @EIDSSFreezerSubdivisionID IS NULL
                                )
                        ) -- Rack
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Rack Barcode',
                                                       @NextNumberValue = @EIDSSFreezerSubdivisionID OUTPUT,
                                                       @InstallationSite = NULL;
                END;

                INSERT INTO dbo.tlbFreezerSubdivision
                (
                    idfSubdivision,
                    idfsSubdivisionType,
                    idfFreezer,
                    idfParentSubdivision,
                    idfsSite,
                    strBarcode,
                    strNameChars,
                    strNote,
                    intCapacity,
                    intRowStatus,
                    BoxSizeID,
                    BoxPlaceAvailability,
                    AuditCreateUser
                )
                VALUES
                (@FreezerSubdivisionID,
                 @SubdivisionTypeID,
                 @FreezerID,
                 @ParentFreezerSubdivisionID,
                 @OrganizationID,
                 @EIDSSFreezerSubdivisionID,
                 @FreezerSubdivisionName,
                 @SubdivisionNote,
                 @NumberOfLocations,
                 @RowStatus,
                 @BoxSizeTypeID,
                 @BoxPlaceAvailability,
                 @AuditUserName
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableFreezerSubdivisionID,
                 @FreezerSubdivisionID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableFreezerSubdivisionID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @EIDSSFreezerSubdivisionID
                );
            -- End data audit
            END;
            ELSE
            BEGIN
                IF (
                       @SubdivisionTypeID = 39890000000
                       AND (
                               TRIM(@EIDSSFreezerSubdivisionID) = N''
                               OR @EIDSSFreezerSubdivisionID IS NULL
                           )
                   ) --Box
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Box Barcode',
                                                       @NextNumberValue = @EIDSSFreezerSubdivisionID OUTPUT,
                                                       @InstallationSite = NULL;
                END
                ELSE IF (
                            @SubdivisionTypeID = 39900000000
                            AND (
                                    TRIM(@EIDSSFreezerSubdivisionID) = N''
                                    OR @EIDSSFreezerSubdivisionID IS NULL
                                )
                        ) -- Shelf
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Shelf Barcode',
                                                       @NextNumberValue = @EIDSSFreezerSubdivisionID OUTPUT,
                                                       @InstallationSite = NULL;
                END
                ELSE IF (
                            @SubdivisionTypeID = 10093001
                            AND (
                                    TRIM(@EIDSSFreezerSubdivisionID) = N''
                                    OR @EIDSSFreezerSubdivisionID IS NULL
                                )
                        ) -- Rack
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Rack Barcode',
                                                       @NextNumberValue = @EIDSSFreezerSubdivisionID OUTPUT,
                                                       @InstallationSite = NULL;
                END;

                -- Data audit
                INSERT INTO @FreezerSubdivisionBeforeEdit
                SELECT idfSubdivision,
                       idfsSubdivisionType,
                       idfFreezer,
                       idfParentSubdivision,
                       strBarcode,
                       strNameChars,
                       strNote,
                       intCapacity,
                       intRowStatus,
                       BoxSizeID,
                       BoxPlaceAvailability
                FROM dbo.tlbFreezerSubdivision
                WHERE idfSubdivision = @FreezerSubdivisionID;
                -- End data audit

                UPDATE dbo.tlbFreezerSubdivision
                SET idfsSubdivisionType = @SubdivisionTypeID,
                    idfFreezer = @FreezerID,
                    idfParentSubdivision = @ParentFreezerSubdivisionID,
                    idfsSite = @OrganizationID,
                    strBarcode = @EIDSSFreezerSubdivisionID,
                    strNameChars = @FreezerSubdivisionName,
                    strNote = @SubdivisionNote,
                    intCapacity = @NumberOfLocations,
                    intRowStatus = @RowStatus,
                    BoxSizeID = @BoxSizeTypeID,
                    BoxPlaceAvailability = @BoxPlaceAvailability,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfSubdivision = @FreezerSubdivisionID;

                -- Data audit
                INSERT INTO @FreezerSubdivisionAfterEdit
                SELECT idfSubdivision,
                       idfsSubdivisionType,
                       idfFreezer,
                       idfParentSubdivision,
                       strBarcode,
                       strNameChars,
                       strNote,
                       intCapacity,
                       intRowStatus,
                       BoxSizeID,
                       BoxPlaceAvailability
                FROM dbo.tlbFreezerSubdivision
                WHERE idfSubdivision = @FreezerSubdivisionID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableFreezerSubdivisionID,
                       79050000000,
                       a.FreezerSubdivisionID,
                       NULL,
                       b.SubdivisionTypeID,
                       a.SubdivisionTypeID,
                       @AuditUserName,
                       @EIDSSFreezerSubdivisionID
                FROM @FreezerSubdivisionAfterEdit a
                    FULL JOIN @FreezerSubdivisionBeforeEdit b
                        ON a.FreezerSubdivisionID = b.FreezerSubdivisionID
                WHERE (a.SubdivisionTypeID <> b.SubdivisionTypeID)
                      OR (
                             a.SubdivisionTypeID IS NOT NULL
                             AND b.SubdivisionTypeID IS NULL
                         )
                      OR (
                             a.SubdivisionTypeID IS NULL
                             AND b.SubdivisionTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableFreezerSubdivisionID,
                       79060000000,
                       a.FreezerSubdivisionID,
                       NULL,
                       b.EIDSSFreezerSubdivisionID,
                       a.EIDSSFreezerSubdivisionID,
                       @AuditUserName,
                       @EIDSSFreezerSubdivisionID
                FROM @FreezerSubdivisionAfterEdit a
                    FULL JOIN @FreezerSubdivisionBeforeEdit b
                        ON a.FreezerSubdivisionID = b.FreezerSubdivisionID
                WHERE (a.EIDSSFreezerSubdivisionID <> b.EIDSSFreezerSubdivisionID)
                      OR (
                             a.EIDSSFreezerSubdivisionID IS NOT NULL
                             AND b.EIDSSFreezerSubdivisionID IS NULL
                         )
                      OR (
                             a.EIDSSFreezerSubdivisionID IS NULL
                             AND b.EIDSSFreezerSubdivisionID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableFreezerSubdivisionID,
                       79070000000,
                       a.FreezerSubdivisionID,
                       NULL,
                       b.FreezerSubdivisionName,
                       a.FreezerSubdivisionName,
                       @AuditUserName,
                       @EIDSSFreezerSubdivisionID
                FROM @FreezerSubdivisionAfterEdit a
                    FULL JOIN @FreezerSubdivisionBeforeEdit b
                        ON a.FreezerSubdivisionID = b.FreezerSubdivisionID
                WHERE (a.FreezerSubdivisionName <> b.FreezerSubdivisionName)
                      OR (
                             a.FreezerSubdivisionName IS NOT NULL
                             AND b.FreezerSubdivisionName IS NULL
                         )
                      OR (
                             a.FreezerSubdivisionName IS NULL
                             AND b.FreezerSubdivisionName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableFreezerSubdivisionID,
                       79080000000,
                       a.FreezerSubdivisionID,
                       NULL,
                       b.SubdivisionNote,
                       a.SubdivisionNote,
                       @AuditUserName,
                       @EIDSSFreezerSubdivisionID
                FROM @FreezerSubdivisionAfterEdit a
                    FULL JOIN @FreezerSubdivisionBeforeEdit b
                        ON a.FreezerSubdivisionID = b.FreezerSubdivisionID
                WHERE (a.SubdivisionNote <> b.SubdivisionNote)
                      OR (
                             a.SubdivisionNote IS NOT NULL
                             AND b.SubdivisionNote IS NULL
                         )
                      OR (
                             a.SubdivisionNote IS NULL
                             AND b.SubdivisionNote IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableFreezerSubdivisionID,
                       749100000000,
                       a.FreezerSubdivisionID,
                       NULL,
                       b.FreezerID,
                       a.FreezerID,
                       @AuditUserName,
                       @EIDSSFreezerSubdivisionID
                FROM @FreezerSubdivisionAfterEdit a
                    FULL JOIN @FreezerSubdivisionBeforeEdit b
                        ON a.FreezerSubdivisionID = b.FreezerSubdivisionID
                WHERE (a.FreezerID <> b.FreezerID)
                      OR (
                             a.FreezerID IS NOT NULL
                             AND b.FreezerID IS NULL
                         )
                      OR (
                             a.FreezerID IS NULL
                             AND b.FreezerID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableFreezerSubdivisionID,
                       749110000000,
                       a.FreezerSubdivisionID,
                       NULL,
                       b.ParentFreezerSubdivisionID,
                       a.ParentFreezerSubdivisionID,
                       @AuditUserName,
                       @EIDSSFreezerSubdivisionID
                FROM @FreezerSubdivisionAfterEdit a
                    FULL JOIN @FreezerSubdivisionBeforeEdit b
                        ON a.FreezerSubdivisionID = b.FreezerSubdivisionID
                WHERE (a.ParentFreezerSubdivisionID <> b.ParentFreezerSubdivisionID)
                      OR (
                             a.ParentFreezerSubdivisionID IS NOT NULL
                             AND b.ParentFreezerSubdivisionID IS NULL
                         )
                      OR (
                             a.ParentFreezerSubdivisionID IS NULL
                             AND b.ParentFreezerSubdivisionID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableFreezerSubdivisionID,
                       749120000000,
                       a.FreezerSubdivisionID,
                       NULL,
                       b.NumberOfLocations,
                       a.NumberOfLocations,
                       @AuditUserName,
                       @EIDSSFreezerSubdivisionID
                FROM @FreezerSubdivisionAfterEdit a
                    FULL JOIN @FreezerSubdivisionBeforeEdit b
                        ON a.FreezerSubdivisionID = b.FreezerSubdivisionID
                WHERE (a.NumberOfLocations <> b.NumberOfLocations)
                      OR (
                             a.NumberOfLocations IS NOT NULL
                             AND b.NumberOfLocations IS NULL
                         )
                      OR (
                             a.NumberOfLocations IS NULL
                             AND b.NumberOfLocations IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableFreezerSubdivisionID,
                       51586990000041,
                       a.FreezerSubdivisionID,
                       NULL,
                       b.BoxPlaceAvailability,
                       a.BoxPlaceAvailability,
                       @AuditUserName,
                       @EIDSSFreezerSubdivisionID
                FROM @FreezerSubdivisionAfterEdit a
                    FULL JOIN @FreezerSubdivisionBeforeEdit b
                        ON a.FreezerSubdivisionID = b.FreezerSubdivisionID
                WHERE (a.BoxPlaceAvailability <> b.BoxPlaceAvailability)
                      OR (
                             a.BoxPlaceAvailability IS NOT NULL
                             AND b.BoxPlaceAvailability IS NULL
                         )
                      OR (
                             a.BoxPlaceAvailability IS NULL
                             AND b.BoxPlaceAvailability IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableFreezerSubdivisionID,
                       51586990000042,
                       a.FreezerSubdivisionID,
                       NULL,
                       b.BoxSizeTypeID,
                       a.BoxSizeTypeID,
                       @AuditUserName,
                       @EIDSSFreezerSubdivisionID
                FROM @FreezerSubdivisionAfterEdit a
                    FULL JOIN @FreezerSubdivisionBeforeEdit b
                        ON a.FreezerSubdivisionID = b.FreezerSubdivisionID
                WHERE (a.BoxSizeTypeID <> b.BoxSizeTypeID)
                      OR (
                             a.BoxSizeTypeID IS NOT NULL
                             AND b.BoxSizeTypeID IS NULL
                         )
                      OR (
                             a.BoxSizeTypeID IS NULL
                             AND b.BoxSizeTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailRestore
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    idfObjectDetail,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableFreezerSubdivisionID,
                       a.FreezerSubdivisionID,
                       NULL,
                       @AuditUserName,
                       @EIDSSFreezerSubdivisionID
                FROM @FreezerSubdivisionAfterEdit AS a
                    FULL JOIN @FreezerSubdivisionBeforeEdit AS b
                        ON a.FreezerSubdivisionID = b.FreezerSubdivisionID
                WHERE a.RowStatus = 0
                      AND b.RowStatus = 1;
            END;

            UPDATE @FreezerSubdivisionTemp
            SET ParentFreezerSubdivisionID = @FreezerSubdivisionID
            WHERE ParentFreezerSubdivisionID = @RowID;

            DELETE FROM @FreezerSubdivisionTemp
            WHERE FreezerSubdivisionID = @RowID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @FreezerID FreezerID,
               @EIDSSFreezerID EIDSSFreezerID;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @FreezerID FreezerID,
               @EIDSSFreezerID EIDSSFreezerID;
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_BATCH_TEST_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_BATCH_TEST_SET
--
-- Description:	Inserts or updates batch test records for various use cases.
--
-- Revision History:
-- Name  Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/22/2018 Initial release.
-- Stephen Long     02/19/2019 Remove positive control, negative control and reagent lot numbers 
--                             to match use case.  Increased test requested from 100 to 200 and 
--                             made nvarchar.
-- Stephen Long     03/28/2019 Updated get next number call to use the name instead of the ID.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
-- Stephen Long     02/21/2023 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_BATCH_TEST_SET]
(
    @BatchTestID BIGINT OUTPUT,
    @TestNameTypeID BIGINT = NULL,
    @BatchStatusTypeID BIGINT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @PerformedByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ObservationID BIGINT,
    @SiteID BIGINT,
    @PerformedDate DATETIME = NULL,
    @ValidationDate DATETIME = NULL,
    @EIDSSBatchTestID NVARCHAR(200) = NULL,
    @RowStatus INT,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @RowAction INT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Data audit
        DECLARE @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = 10017012,
                @ObjectTableBatchTestID BIGINT = 75480000000; -- tlbBatchTest
        DECLARE @BatchTestBeforeEdit TABLE
        (
            BatchTestID BIGINT,
            TestNameTypeID BIGINT,
            BatchStatusTypeID BIGINT,
            PerformedByOrganizationID BIGINT,
            PerformedByPersonID BIGINT,
            ValidatedByOrganizationID BIGINT,
            ValidatedByPersonID BIGINT,
            ObservationID BIGINT,
            PerformedDate DATETIME,
            ValidationDate DATETIME,
            EIDSSBatchTestID NVARCHAR(200),
            RowStatus INT,
            ResultEnteredByPersonID BIGINT,
            ResultEnteredByOrganizationID BIGINT
        );
        DECLARE @BatchTestAfterEdit TABLE
        (
            BatchTestID BIGINT,
            TestNameTypeID BIGINT,
            BatchStatusTypeID BIGINT,
            PerformedByOrganizationID BIGINT,
            PerformedByPersonID BIGINT,
            ValidatedByOrganizationID BIGINT,
            ValidatedByPersonID BIGINT,
            ObservationID BIGINT,
            PerformedDate DATETIME,
            ValidationDate DATETIME,
            EIDSSBatchTestID NVARCHAR(200),
            RowStatus INT,
            ResultEnteredByPersonID BIGINT,
            ResultEnteredByOrganizationID BIGINT
        );

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF @RowAction = 1
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbBatchTest',
                                              @idfsKey = @BatchTestID OUTPUT;

            EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Batch Test Barcode',
                                               @NextNumberValue = @EIDSSBatchTestID OUTPUT,
                                               @InstallationSite = @SiteID;

            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @BatchTestID,
                                                      @ObjectTableBatchTestID,
                                                      @EIDSSBatchTestID,
                                                      @DataAuditEventID OUTPUT;

            INSERT INTO dbo.tlbBatchTest
            (
                idfBatchTest,
                idfsTestName,
                idfsBatchStatus,
                idfPerformedByOffice,
                idfPerformedByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                idfObservation,
                idfsSite,
                datPerformedDate,
                datValidatedDate,
                strBarcode,
                intRowStatus,
                idfResultEnteredByPerson,
                idfResultEnteredByOffice,
                AuditCreateUser
            )
            VALUES
            (@BatchTestID,
             @TestNameTypeID,
             @BatchStatusTypeID,
             @PerformedByOrganizationID,
             @PerformedByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ObservationID,
             @SiteID,
             @PerformedDate,
             @ValidationDate,
             @EIDSSBatchTestID,
             @RowStatus,
             @ResultEnteredByPersonID,
             @ResultEnteredByOrganizationID,
             @AuditUserName
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableBatchTestID,
             @BatchTestID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableBatchTestID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSBatchTestID
            );
        -- End data audit
        END;
        ELSE
        BEGIN
            INSERT INTO @BatchTestBeforeEdit
            SELECT idfBatchTest,
                   idfsTestName,
                   idfsBatchStatus,
                   idfPerformedByOffice,
                   idfPerformedByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   idfObservation,
                   datPerformedDate,
                   datValidatedDate,
                   strBarcode,
                   intRowStatus,
                   idfResultEnteredByPerson,
                   idfResultEnteredByOffice
            FROM dbo.tlbBatchTest
            WHERE idfBatchTest = @BatchTestID;

            UPDATE dbo.tlbBatchTest
            SET idfsTestName = @TestNameTypeID,
                idfsBatchStatus = @BatchStatusTypeID,
                idfPerformedByOffice = @PerformedByOrganizationID,
                idfPerformedByPerson = @PerformedByPersonID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                idfObservation = @ObservationID,
                idfsSite = @SiteID,
                datPerformedDate = @PerformedDate,
                datValidatedDate = @ValidationDate,
                strBarcode = @EIDSSBatchTestID,
                intRowStatus = @RowStatus,
                idfResultEnteredByPerson = @ResultEnteredByPersonID,
                idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfBatchTest = @BatchTestID;

            INSERT INTO @BatchTestAfterEdit
            SELECT idfBatchTest,
                   idfsTestName,
                   idfsBatchStatus,
                   idfPerformedByOffice,
                   idfPerformedByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   idfObservation,
                   datPerformedDate,
                   datValidatedDate,
                   strBarcode,
                   intRowStatus,
                   idfResultEnteredByPerson,
                   idfResultEnteredByOffice
            FROM dbo.tlbBatchTest
            WHERE idfBatchTest = @BatchTestID;

            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @BatchTestID,
                                                      @ObjectTableBatchTestID,
                                                      @EIDSSBatchTestID,
                                                      @DataAuditEventID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   78370000000,
                   a.BatchTestID,
                   NULL,
                   b.ValidationDate,
                   a.ValidationDate,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit a
                FULL JOIN @BatchTestBeforeEdit b
                    ON a.BatchTestID = b.BatchTestID
            WHERE (a.ValidationDate <> b.ValidationDate)
                  OR (
                         a.ValidationDate IS NOT NULL
                         AND b.ValidationDate IS NULL
                     )
                  OR (
                         a.ValidationDate IS NULL
                         AND b.ValidationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   78390000000,
                   a.BatchTestID,
                   NULL,
                   b.ObservationID,
                   a.ObservationID,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit a
                FULL JOIN @BatchTestBeforeEdit b
                    ON a.BatchTestID = b.BatchTestID
            WHERE (a.ObservationID <> b.ObservationID)
                  OR (
                         a.ObservationID IS NOT NULL
                         AND b.ObservationID IS NULL
                     )
                  OR (
                         a.ObservationID IS NULL
                         AND b.ObservationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   78410000000,
                   a.BatchTestID,
                   NULL,
                   b.ValidatedByOrganizationID,
                   a.ValidatedByOrganizationID,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit a
                FULL JOIN @BatchTestBeforeEdit b
                    ON a.BatchTestID = b.BatchTestID
            WHERE (a.ValidatedByOrganizationID <> b.ValidatedByOrganizationID)
                  OR (
                         a.ValidatedByOrganizationID IS NOT NULL
                         AND b.ValidatedByOrganizationID IS NULL
                     )
                  OR (
                         a.ValidatedByOrganizationID IS NULL
                         AND b.ValidatedByOrganizationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   78420000000,
                   a.BatchTestID,
                   NULL,
                   b.ValidatedByPersonID,
                   a.ValidatedByPersonID,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit a
                FULL JOIN @BatchTestBeforeEdit b
                    ON a.BatchTestID = b.BatchTestID
            WHERE (a.ValidatedByPersonID <> b.ValidatedByPersonID)
                  OR (
                         a.ValidatedByPersonID IS NOT NULL
                         AND b.ValidatedByPersonID IS NULL
                     )
                  OR (
                         a.ValidatedByPersonID IS NULL
                         AND b.ValidatedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   4577820000000,
                   a.BatchTestID,
                   NULL,
                   b.BatchStatusTypeID,
                   a.BatchStatusTypeID,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit a
                FULL JOIN @BatchTestBeforeEdit b
                    ON a.BatchTestID = b.BatchTestID
            WHERE (a.BatchStatusTypeID <> b.BatchStatusTypeID)
                  OR (
                         a.BatchStatusTypeID IS NOT NULL
                         AND b.BatchStatusTypeID IS NULL
                     )
                  OR (
                         a.BatchStatusTypeID IS NULL
                         AND b.BatchStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   4577830000000,
                   a.BatchTestID,
                   NULL,
                   b.PerformedByOrganizationID,
                   a.PerformedByOrganizationID,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit a
                FULL JOIN @BatchTestBeforeEdit b
                    ON a.BatchTestID = b.BatchTestID
            WHERE (a.PerformedByOrganizationID <> b.PerformedByOrganizationID)
                  OR (
                         a.PerformedByOrganizationID IS NOT NULL
                         AND b.PerformedByOrganizationID IS NULL
                     )
                  OR (
                         a.PerformedByOrganizationID IS NULL
                         AND b.PerformedByOrganizationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   4577840000000,
                   a.BatchTestID,
                   NULL,
                   b.PerformedByPersonID,
                   a.PerformedByPersonID,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit a
                FULL JOIN @BatchTestBeforeEdit b
                    ON a.BatchTestID = b.BatchTestID
            WHERE (a.PerformedByPersonID <> b.PerformedByPersonID)
                  OR (
                         a.PerformedByPersonID IS NOT NULL
                         AND b.PerformedByPersonID IS NULL
                     )
                  OR (
                         a.PerformedByPersonID IS NULL
                         AND b.PerformedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   4577850000000,
                   a.BatchTestID,
                   NULL,
                   b.PerformedDate,
                   a.PerformedDate,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit a
                FULL JOIN @BatchTestBeforeEdit b
                    ON a.BatchTestID = b.BatchTestID
            WHERE (a.PerformedDate <> b.PerformedDate)
                  OR (
                         a.PerformedDate IS NOT NULL
                         AND b.PerformedDate IS NULL
                     )
                  OR (
                         a.PerformedDate IS NULL
                         AND b.PerformedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   4577860000000,
                   a.BatchTestID,
                   NULL,
                   b.EIDSSBatchTestID,
                   a.EIDSSBatchTestID,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit a
                FULL JOIN @BatchTestBeforeEdit b
                    ON a.BatchTestID = b.BatchTestID
            WHERE (a.EIDSSBatchTestID <> b.EIDSSBatchTestID)
                  OR (
                         a.EIDSSBatchTestID IS NOT NULL
                         AND b.EIDSSBatchTestID IS NULL
                     )
                  OR (
                         a.EIDSSBatchTestID IS NULL
                         AND b.EIDSSBatchTestID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   6617390000000,
                   a.BatchTestID,
                   NULL,
                   b.ResultEnteredByPersonID,
                   a.ResultEnteredByPersonID,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit a
                FULL JOIN @BatchTestBeforeEdit b
                    ON a.BatchTestID = b.BatchTestID
            WHERE (a.ResultEnteredByPersonID <> b.ResultEnteredByPersonID)
                  OR (
                         a.ResultEnteredByPersonID IS NOT NULL
                         AND b.ResultEnteredByPersonID IS NULL
                     )
                  OR (
                         a.ResultEnteredByPersonID IS NULL
                         AND b.ResultEnteredByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   6617400000000,
                   a.BatchTestID,
                   NULL,
                   b.ResultEnteredByOrganizationID,
                   a.ResultEnteredByOrganizationID,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit a
                FULL JOIN @BatchTestBeforeEdit b
                    ON a.BatchTestID = b.BatchTestID
            WHERE (a.ResultEnteredByOrganizationID <> b.ResultEnteredByOrganizationID)
                  OR (
                         a.ResultEnteredByOrganizationID IS NOT NULL
                         AND b.ResultEnteredByOrganizationID IS NULL
                     )
                  OR (
                         a.ResultEnteredByOrganizationID IS NULL
                         AND b.ResultEnteredByOrganizationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   49545490000000,
                   a.BatchTestID,
                   NULL,
                   b.TestNameTypeID,
                   a.TestNameTypeID,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit a
                FULL JOIN @BatchTestBeforeEdit b
                    ON a.BatchTestID = b.BatchTestID
            WHERE (a.TestNameTypeID <> b.TestNameTypeID)
                  OR (
                         a.TestNameTypeID IS NOT NULL
                         AND b.TestNameTypeID IS NULL
                     )
                  OR (
                         a.TestNameTypeID IS NULL
                         AND b.TestNameTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableBatchTestID,
                   a.BatchTestID,
                   NULL,
                   @AuditUserName,
                   @EIDSSBatchTestID
            FROM @BatchTestAfterEdit AS a
                FULL JOIN @BatchTestBeforeEdit AS b
                    ON a.BatchTestID = b.BatchTestID
            WHERE a.RowStatus = 0
                  AND b.RowStatus = 1;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_LAB_TRANSFER_SET]...';


GO
-- ================================================================================================
-- Name: USSP_LAB_TRANSFER_SET
--
-- Description:	Inserts or updates transfer records for various use cases.
--
-- Revision History:
-- Name  Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/01/2018 Initial release.
-- Stephen Long     02/19/2019 Added test requested parameter to match use case.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
-- Stephen Long     02/11/2021 Added logic to set transfer indicator.
-- Stephen Long     09/24/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     01/31/2022 Added source system name and key value update on insert.
-- Stephen Long     02/22/2023 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_LAB_TRANSFER_SET]
(
    @TransferID BIGINT OUTPUT,
    @SampleID BIGINT,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @TransferStatusTypeID BIGINT,
    @TransferredFromOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @SentByPersonID BIGINT = NULL,
    @TransferDate DATETIME = NULL,
    @Note NVARCHAR(200) = NULL,
    @SiteID BIGINT,
    @TestRequested NVARCHAR(200) = NULL,
    @RowStatus INT,
    @RowAction INT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Data audit
        DECLARE @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = 10017056,                     -- Sample Transfer
                @ObjectTableTransferOutID BIGINT = 75770000000,      -- tlbTransferOUT
                @ObjectTableTransferSampleID BIGINT = 4576460000000, -- tlbTransferOutMaterial
                @ObjectTableSampleID BIGINT = 75620000000;           -- tlbMaterial
        DECLARE @TransferBeforeEdit TABLE
        (
            TransferID BIGINT,
            TransferStatusTypeID BIGINT,
            TransferredFromOrganizationID BIGINT,
            TransferredToOrganizationID BIGINT,
            SentByPersonID BIGINT,
            TransferDate DATETIME,
            Note NVARCHAR(200),
            EIDSSTransferID NVARCHAR(200),
            TestRequested NVARCHAR(200),
            RowStatus INT
        );
        DECLARE @TransferAfterEdit TABLE
        (
            TransferID BIGINT,
            TransferStatusTypeID BIGINT,
            TransferredFromOrganizationID BIGINT,
            TransferredToOrganizationID BIGINT,
            SentByPersonID BIGINT,
            TransferDate DATETIME,
            Note NVARCHAR(200),
            EIDSSTransferID NVARCHAR(200),
            TestRequested NVARCHAR(200),
            RowStatus INT
        );
        DECLARE @TransferSampleBeforeEdit TABLE
        (
            TransferID BIGINT,
            SampleID BIGINT,
            RowStatus INT
        );
        DECLARE @TransferSampleAfterEdit TABLE
        (
            TransferID BIGINT,
            SampleID BIGINT,
            RowStatus INT
        );
        DECLARE @SampleBeforeEdit TABLE
        (
            SampleID BIGINT,
            TransferIndicator BIT
        );
        DECLARE @SampleAfterEdit TABLE
        (
            SampleID BIGINT,
            TransferIndicator BIT
        );

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbTransferOut',
                                              @idfsKey = @TransferID OUTPUT;

            EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Sample Transfer Barcode',
                                               @NextNumberValue = @EIDSSTransferID OUTPUT,
                                               @InstallationSite = NULL;

            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @TransferID,
                                                      @ObjectTableTransferOutID,
                                                      @EIDSSTransferID,
                                                      @DataAuditEventID OUTPUT;
        END
        ELSE
        BEGIN
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @TransferID,
                                                      @ObjectTableTransferOutID,
                                                      @EIDSSTransferID,
                                                      @DataAuditEventID OUTPUT;
        END
        -- End data audit

        IF @RowStatus = 0
        BEGIN
            IF @TransferStatusTypeID = 10001001 -- Final
            BEGIN
                -- Data audit
                INSERT INTO @SampleBeforeEdit
                SELECT idfMaterial,
                       TransferIndicator
                FROM dbo.tlbMaterial
                WHERE idfMaterial = @SampleID;
                -- End data audit

                UPDATE dbo.tlbMaterial
                SET TransferIndicator = 0
                WHERE idfMaterial = @SampleID;

                -- Data audit
                INSERT INTO @SampleAfterEdit
                SELECT idfMaterial,
                       TransferIndicator
                FROM dbo.tlbMaterial
                WHERE idfMaterial = @SampleID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableSampleID,
                       51586990000039,
                       a.SampleID,
                       NULL,
                       b.TransferIndicator,
                       a.TransferIndicator,
                       @AuditUserName,
                       @EIDSSTransferID
                FROM @SampleAfterEdit a
                    FULL JOIN @SampleBeforeEdit b
                        ON a.SampleID = b.SampleID
                WHERE (a.TransferIndicator <> b.TransferIndicator)
                      OR (
                             a.TransferIndicator IS NOT NULL
                             AND b.TransferIndicator IS NULL
                         )
                      OR (
                             a.TransferIndicator IS NULL
                             AND b.TransferIndicator IS NOT NULL
                         );
            -- End data audit
            END
            ELSE
            BEGIN
                -- Data audit
                INSERT INTO @SampleBeforeEdit
                SELECT idfMaterial,
                       TransferIndicator
                FROM dbo.tlbMaterial
                WHERE idfMaterial = @SampleID;
                -- End data audit

                UPDATE dbo.tlbMaterial
                SET TransferIndicator = 1
                WHERE idfMaterial = @SampleID;

                -- Data audit
                INSERT INTO @SampleAfterEdit
                SELECT idfMaterial,
                       TransferIndicator
                FROM dbo.tlbMaterial
                WHERE idfMaterial = @SampleID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableSampleID,
                       51586990000039,
                       a.SampleID,
                       NULL,
                       b.TransferIndicator,
                       a.TransferIndicator,
                       @AuditUserName,
                       @EIDSSTransferID
                FROM @SampleAfterEdit a
                    FULL JOIN @SampleBeforeEdit b
                        ON a.SampleID = b.SampleID
                WHERE (a.TransferIndicator <> b.TransferIndicator)
                      OR (
                             a.TransferIndicator IS NOT NULL
                             AND b.TransferIndicator IS NULL
                         )
                      OR (
                             a.TransferIndicator IS NULL
                             AND b.TransferIndicator IS NOT NULL
                         );
            -- End data audit
            END
        END
        ELSE
        BEGIN
            -- Data audit
            INSERT INTO @SampleBeforeEdit
            SELECT idfMaterial,
                   TransferIndicator
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;
            -- End data audit

            UPDATE dbo.tlbMaterial
            SET TransferIndicator = 0
            WHERE idfMaterial = @SampleID;

            -- Data audit
            INSERT INTO @SampleAfterEdit
            SELECT idfMaterial,
                   TransferIndicator
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000039,
                   a.SampleID,
                   NULL,
                   b.TransferIndicator,
                   a.TransferIndicator,
                   @AuditUserName,
                   @EIDSSTransferID
            FROM @SampleAfterEdit a
                FULL JOIN @SampleBeforeEdit b
                    ON a.SampleID = b.SampleID
            WHERE (a.TransferIndicator <> b.TransferIndicator)
                  OR (
                         a.TransferIndicator IS NOT NULL
                         AND b.TransferIndicator IS NULL
                     )
                  OR (
                         a.TransferIndicator IS NULL
                         AND b.TransferIndicator IS NOT NULL
                     );
        -- End data audit
        END;

        IF @RowAction = 1 -- Insert
        BEGIN
            INSERT INTO dbo.tlbTransferOUT
            (
                idfTransferOut,
                idfsTransferStatus,
                idfSendFromOffice,
                idfSendToOffice,
                idfSendByPerson,
                datSendDate,
                strNote,
                strBarcode,
                idfsSite,
                TestRequested,
                intRowStatus,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@TransferID,
             @TransferStatusTypeID,
             @TransferredFromOrganizationID,
             @TransferredToOrganizationID,
             @SentByPersonID,
             @TransferDate,
             @Note,
             @EIDSSTransferID,
             @SiteID,
             @TestRequested,
             @RowStatus,
             10519001,
             '[{"idfTransferOut":' + CAST(@TransferID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );

            INSERT INTO dbo.tlbTransferOutMaterial
            (
                idfMaterial,
                idfTransferOut,
                intRowStatus,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@SampleID,
             @TransferID,
             0  ,
             10519001,
             '[{"idfTransferOut":' + CAST(@TransferID AS NVARCHAR(300)) + ',"idfMaterial":'
             + CAST(@SampleID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableTransferOutID,
             @TransferID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableTransferOutID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSTransferID
            );

            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableTransferSampleID,
             @SampleID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableTransferSampleID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSTransferID
            );
        -- End data audit
        END;
        ELSE
        BEGIN
            -- Data audit
            INSERT INTO @TransferBeforeEdit
            SELECT idfTransferOut,
                   idfsTransferStatus,
                   idfSendFromOffice,
                   idfSendToOffice,
                   idfSendByPerson,
                   datSendDate,
                   strNote,
                   strBarcode,
                   TestRequested,
                   intRowStatus
            FROM dbo.tlbTransferOUT
            WHERE idfTransferOut = @TransferID;
            -- End data audit

            UPDATE dbo.tlbTransferOUT
            SET idfsTransferStatus = @TransferStatusTypeID,
                idfSendFromOffice = @TransferredFromOrganizationID,
                idfSendToOffice = @TransferredToOrganizationID,
                idfSendByPerson = @SentByPersonID,
                datSendDate = @TransferDate,
                strNote = @Note,
                strBarcode = @EIDSSTransferID,
                idfsSite = @SiteID,
                TestRequested = @TestRequested,
                intRowStatus = @RowStatus,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfTransferOut = @TransferID;

            -- Data audit
            INSERT INTO @TransferAfterEdit
            SELECT idfTransferOut,
                   idfsTransferStatus,
                   idfSendFromOffice,
                   idfSendToOffice,
                   idfSendByPerson,
                   datSendDate,
                   strNote,
                   strBarcode,
                   TestRequested,
                   intRowStatus
            FROM dbo.tlbTransferOUT
            WHERE idfTransferOut = @TransferID;

            INSERT INTO @TransferSampleBeforeEdit
            SELECT idfTransferOut,
                   idfMaterial, 
                   intRowStatus
            FROM dbo.tlbTransferOutMaterial
            WHERE idfTransferOut = @TransferID;
            -- End data audit

            UPDATE dbo.tlbTransferOutMaterial
            SET intRowStatus = @RowStatus,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfTransferOut = @TransferID;

            -- Data audit
            INSERT INTO @TransferSampleAfterEdit
            SELECT idfTransferOut,
                   idfMaterial, 
                   intRowStatus
            FROM dbo.tlbTransferOutMaterial
            WHERE idfTransferOut = @TransferID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTransferOutID,
                   80720000000,
                   a.TransferID,
                   NULL,
                   b.TransferDate,
                   a.TransferDate,
                   @AuditUserName,
                   @EIDSSTransferID
            FROM @TransferAfterEdit a
                FULL JOIN @TransferBeforeEdit b
                    ON a.TransferID = b.TransferID
            WHERE (a.TransferDate <> b.TransferDate)
                  OR (
                         a.TransferDate IS NOT NULL
                         AND b.TransferDate IS NULL
                     )
                  OR (
                         a.TransferDate IS NULL
                         AND b.TransferDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTransferOutID,
                   80730000000,
                   a.TransferID,
                   NULL,
                   b.SentByPersonID,
                   a.SentByPersonID,
                   @AuditUserName,
                   @EIDSSTransferID
            FROM @TransferAfterEdit a
                FULL JOIN @TransferBeforeEdit b
                    ON a.TransferID = b.TransferID
            WHERE (a.SentByPersonID <> b.SentByPersonID)
                  OR (
                         a.SentByPersonID IS NOT NULL
                         AND b.SentByPersonID IS NULL
                     )
                  OR (
                         a.SentByPersonID IS NULL
                         AND b.SentByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTransferOutID,
                   80740000000,
                   a.TransferID,
                   NULL,
                   b.TransferredFromOrganizationID,
                   a.TransferredFromOrganizationID,
                   @AuditUserName,
                   @EIDSSTransferID
            FROM @TransferAfterEdit a
                FULL JOIN @TransferBeforeEdit b
                    ON a.TransferID = b.TransferID
            WHERE (a.TransferredFromOrganizationID <> b.TransferredFromOrganizationID)
                  OR (
                         a.TransferredFromOrganizationID IS NOT NULL
                         AND b.TransferredFromOrganizationID IS NULL
                     )
                  OR (
                         a.TransferredFromOrganizationID IS NULL
                         AND b.TransferredFromOrganizationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTransferOutID,
                   80750000000,
                   a.TransferID,
                   NULL,
                   b.TransferredToOrganizationID,
                   a.TransferredToOrganizationID,
                   @AuditUserName,
                   @EIDSSTransferID
            FROM @TransferAfterEdit a
                FULL JOIN @TransferBeforeEdit b
                    ON a.TransferID = b.TransferID
            WHERE (a.TransferredToOrganizationID <> b.TransferredToOrganizationID)
                  OR (
                         a.TransferredToOrganizationID IS NOT NULL
                         AND b.TransferredToOrganizationID IS NULL
                     )
                  OR (
                         a.TransferredToOrganizationID IS NULL
                         AND b.TransferredToOrganizationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTransferOutID,
                   80770000000,
                   a.TransferID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUserName,
                   @EIDSSTransferID
            FROM @TransferAfterEdit a
                FULL JOIN @TransferBeforeEdit b
                    ON a.TransferID = b.TransferID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTransferOutID,
                   4577940000000,
                   a.TransferID,
                   NULL,
                   b.TransferStatusTypeID,
                   a.TransferStatusTypeID,
                   @AuditUserName,
                   @EIDSSTransferID
            FROM @TransferAfterEdit a
                FULL JOIN @TransferBeforeEdit b
                    ON a.TransferID = b.TransferID
            WHERE (a.TransferStatusTypeID <> b.TransferStatusTypeID)
                  OR (
                         a.TransferStatusTypeID IS NOT NULL
                         AND b.TransferStatusTypeID IS NULL
                     )
                  OR (
                         a.TransferStatusTypeID IS NULL
                         AND b.TransferStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTransferOutID,
                   4577950000000,
                   a.TransferID,
                   NULL,
                   b.EIDSSTransferID,
                   a.EIDSSTransferID,
                   @AuditUserName,
                   @EIDSSTransferID
            FROM @TransferAfterEdit a
                FULL JOIN @TransferBeforeEdit b
                    ON a.TransferID = b.TransferID
            WHERE (a.EIDSSTransferID <> b.EIDSSTransferID)
                  OR (
                         a.EIDSSTransferID IS NOT NULL
                         AND b.EIDSSTransferID IS NULL
                     )
                  OR (
                         a.EIDSSTransferID IS NULL
                         AND b.EIDSSTransferID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTransferOutID,
                   51586990000040,
                   a.TransferID,
                   NULL,
                   b.TestRequested,
                   a.TestRequested,
                   @AuditUserName,
                   @EIDSSTransferID
            FROM @TransferAfterEdit a
                FULL JOIN @TransferBeforeEdit b
                    ON a.TransferID = b.TransferID
            WHERE (a.TestRequested <> b.TestRequested)
                  OR (
                         a.TestRequested IS NOT NULL
                         AND b.TestRequested IS NULL
                     )
                  OR (
                         a.TestRequested IS NULL
                         AND b.TestRequested IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTransferOutID,
                   a.TransferID,
                   NULL,
                   @AuditUserName,
                   @EIDSSTransferID
            FROM @TransferAfterEdit AS a
                FULL JOIN @TransferBeforeEdit AS b
                    ON a.TransferID = b.TransferID
            WHERE a.RowStatus = 0
                  AND b.RowStatus = 1;

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTransferSampleID,
                   a.SampleID,
                   NULL,
                   @AuditUserName,
                   @EIDSSTransferID
            FROM @TransferSampleAfterEdit AS a
                FULL JOIN @TransferSampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE a.RowStatus = 0
                  AND b.RowStatus = 1;
        -- End data audit
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEDUPLICATION_FARM_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_DEDUPLICATION_FARM_SET
--
-- Description:	Deduplication for farm record.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		04/12/2022 Initial version
-- Ann Xiong		04/12/2022 Updated superseded disease reports with the Survivor Farm 
--                             information.
-- Mark Wilson		09/21/2022 Re-write to use FarmActual as source
-- Ann Xiong		09/30/2022 Updated superseded disease reports with the Survivor Farm Owner 
--                             information.
-- Stephen Long     03/14/2023 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEDUPLICATION_FARM_SET]
(
    @FarmMasterID BIGINT,
    @SupersededFarmMasterID BIGINT,
    @AvianFarmTypeID BIGINT = NULL,
    @AvianProductionTypeID BIGINT = NULL,
    @FarmCategory BIGINT = NULL,
    @FarmOwnerID BIGINT = NULL,
    @FarmNationalName NVARCHAR(200) = NULL,
    @FarmInterNationalName NVARCHAR(200) = NULL,
    @EIDSSFarmID NVARCHAR(200) = NULL,
    @OwnershipStructureTypeID BIGINT = NULL,
    @Fax NVARCHAR(200) = NULL,
    @Email NVARCHAR(200) = NULL,
    @Phone NVARCHAR(200) = NULL,
    @FarmAddressID BIGINT = NULL,
    @ForeignAddressIndicator BIT = 0,
    @FarmAddressIdfsLocation BIGINT = NULL,
    @FarmAddressStreet NVARCHAR(200) = NULL,
    @FarmAddressApartment NVARCHAR(200) = NULL,
    @FarmAddressBuilding NVARCHAR(200) = NULL,
    @FarmAddressHouse NVARCHAR(200) = NULL,
    @FarmAddressPostalCode NVARCHAR(200) = NULL,
    @FarmAddressLatitude FLOAT = NULL,
    @FarmAddressLongitude FLOAT = NULL,
    @NumberOfBuildings INT = NULL,
    @NumberOfBirdsPerBuilding INT = NULL,
    @HerdsOrFlocks NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @AuditUser NVARCHAR(100) = NULL
)
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @idfGeoLocationShared BIGINT = (
                                                   SELECT idfFarmAddress
                                                   FROM dbo.tlbFarmActual
                                                   WHERE idfFarmActual = @FarmMasterID
                                               ),
                                                                        -- Data audit
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = 10016003,                -- Edit data audit event type
                @ObjectTypeID BIGINT = 10017076,                        -- Farm deduplication data audit object type
                @ObjectID BIGINT = NULL,
                @ObjectTableGeoLoationID BIGINT = 75580000000,          -- tlbGeolocation
                @ObjectTableGeoLocationSharedID BIGINT = 4572590000000, -- tlbGeolocationShared
                @ObjectTableFarmActualID BIGINT = 4572790000000,        -- tlbFarmActual
                @ObjectTableFarmID BIGINT = 75550000000,                -- tlbFarm
                @ObjectTableHumanID BIGINT = 75600000000,               -- tlbHuman
                @EIDSSObjectID NVARCHAR(200);
        -- End data audit
        DECLARE @Farm TABLE (idfFarm BIGINT);
        DECLARE @Location TABLE (idfGeoLocation BIGINT);
        DECLARE @FarmAfterEdit TABLE
        (
            FarmActualID BIGINT,
            AvianFarmTypeID BIGINT,
            AvianProductionTypeID BIGINT,
            FarmCategoryTypeID BIGINT,
            OwnershipStructureTypeID BIGINT,
            MovementPatternTypeID BIGINT,
            IntendedUseTypeID BIGINT,
            GrazingPatternTypeID BIGINT,
            LivestockProductionTypeID BIGINT,
            HumanActualID BIGINT,
            FarmAddressID BIGINT,
            InternationalName NVARCHAR(200),
            NationalName NVARCHAR(200),
            EIDSSFarmID NVARCHAR(200),
            Fax NVARCHAR(200),
            Email NVARCHAR(200),
            ContactPhone NVARCHAR(200),
            LivestockTotalAnimalQuantity INT,
            AvianTotalAnimalQuantity INT,
            LivestockSickAnimalQuantity INT,
            AvianSickAnimalQuantity INT,
            LivestockDeadAnimalQuantity INT,
            AvianDeadAnimalQuantity INT,
            BuidingsQuantity INT,
            BirdsPerBuildingQuantity INT,
            Note NVARCHAR(2000),
            AccessoryCode INT,
            ModificationDate DATETIME
        );
        DECLARE @FarmBeforeEdit TABLE
        (
            FarmActualID BIGINT,
            AvianFarmTypeID BIGINT,
            AvianProductionTypeID BIGINT,
            FarmCategoryTypeID BIGINT,
            OwnershipStructureTypeID BIGINT,
            MovementPatternTypeID BIGINT,
            IntendedUseTypeID BIGINT,
            GrazingPatternTypeID BIGINT,
            LivestockProductionTypeID BIGINT,
            HumanActualID BIGINT,
            FarmAddressID BIGINT,
            InternationalName NVARCHAR(200),
            NationalName NVARCHAR(200),
            EIDSSFarmID NVARCHAR(200),
            Fax NVARCHAR(200),
            Email NVARCHAR(200),
            ContactPhone NVARCHAR(200),
            LivestockTotalAnimalQuantity INT,
            AvianTotalAnimalQuantity INT,
            LivestockSickAnimalQuantity INT,
            AvianSickAnimalQuantity INT,
            LivestockDeadAnimalQuantity INT,
            AvianDeadAnimalQuantity INT,
            BuidingsQuantity INT,
            BirdsPerBuildingQuantity INT,
            Note NVARCHAR(2000),
            AccessoryCode INT,
            ModificationDate DATETIME
        );
        DECLARE @GeoLocationBeforeEdit TABLE
        (
            GeoLocationID BIGINT,
            ResidentTypeID BIGINT,
            GroundTypeID BIGINT,
            GeoLocationTypeID BIGINT,
            LocationID BIGINT,
            PostalCode NVARCHAR(200),
            StreetName NVARCHAR(200),
            House NVARCHAR(200),
            Building NVARCHAR(200),
            Apartment NVARCHAR(200),
            AddressDescription NVARCHAR(200),
            Distance FLOAT,
            Latitude FLOAT,
            Longitude FLOAT,
            Accuracy FLOAT,
            Alignment FLOAT,
            ForeignAddressIndicator BIT,
            ForeignAddressString NVARCHAR(200),
            ShortAddressString NVARCHAR(2000)
        );
        DECLARE @GeoLocationAfterEdit TABLE
        (
            GeoLocationID BIGINT,
            ResidentTypeID BIGINT,
            GroundTypeID BIGINT,
            GeoLocationTypeID BIGINT,
            LocationID BIGINT,
            PostalCode NVARCHAR(200),
            StreetName NVARCHAR(200),
            House NVARCHAR(200),
            Building NVARCHAR(200),
            Apartment NVARCHAR(200),
            AddressDescription NVARCHAR(200),
            Distance FLOAT,
            Latitude FLOAT,
            Longitude FLOAT,
            Accuracy FLOAT,
            Alignment FLOAT,
            ForeignAddressIndicator BIT,
            ForeignAddressString NVARCHAR(200),
            ShortAddressString NVARCHAR(2000)
        );
        DECLARE @HumanBeforeEdit TABLE
        (
            HumanID BIGINT,
            HumanActualID BIGINT,
            OccupationTypeID BIGINT,
            NationalityTypeID BIGINT,
            GenderTypeID BIGINT,
            CurrentResidenceAddressID BIGINT,
            EmployerAddressID BIGINT,
            RegistrationAddressID BIGINT,
            DateOfBirth DATETIME,
            DateOfDeath DATETIME,
            LastName NVARCHAR(200),
            SecondName NVARCHAR(200),
            FirstName NVARCHAR(200),
            RegistrationPhone NVARCHAR(200),
            EmployerName NVARCHAR(200),
            HomePhone NVARCHAR(200),
            WorkPhone NVARCHAR(200),
            PersonIDType BIGINT,
            PersonID NVARCHAR(100),
            PermanentAddressAsCurrentIndicator BIT,
            EnteredDate DATETIME,
            ModificationDate DATETIME
        );
        DECLARE @HumanAfterEdit TABLE
        (
            HumanID BIGINT,
            HumanActualID BIGINT,
            OccupationTypeID BIGINT,
            NationalityTypeID BIGINT,
            GenderTypeID BIGINT,
            CurrentResidenceAddressID BIGINT,
            EmployerAddressID BIGINT,
            RegistrationAddressID BIGINT,
            DateOfBirth DATETIME,
            DateOfDeath DATETIME,
            LastName NVARCHAR(200),
            SecondName NVARCHAR(200),
            FirstName NVARCHAR(200),
            RegistrationPhone NVARCHAR(200),
            EmployerName NVARCHAR(200),
            HomePhone NVARCHAR(200),
            WorkPhone NVARCHAR(200),
            PersonIDType BIGINT,
            PersonID NVARCHAR(100),
            PermanentAddressAsCurrentIndicator BIT,
            EnteredDate DATETIME,
            ModificationDate DATETIME
        );

        SET @AuditUser = ISNULL(@AuditUser, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo;

        EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                  @AuditSiteID,
                                                  @DataAuditEventTypeID,
                                                  @ObjectTypeID,
                                                  @FarmMasterID,
                                                  @ObjectTableFarmActualID,
                                                  @EIDSSFarmID,
                                                  @DataAuditEventID OUTPUT;
        -- End data audit

        INSERT INTO @Farm
        (
            idfFarm
        )
        SELECT idfFarm
        FROM dbo.tlbFarm
        WHERE idfFarmActual = @FarmMasterID;

        INSERT INTO @Location
        (
            idfGeoLocation
        )
        SELECT idfFarmAddress
        FROM dbo.tlbFarm
        WHERE idfFarmActual = @SupersededFarmMasterID;

        --------------------------------------------------------------------------------------------------
        -- Update surviving farm address records
        --------------------------------------------------------------------------------------------------
        -- Farm master address update
        -- Data audit
        INSERT INTO @GeoLocationBeforeEdit
        (
            GeoLocationID,
            ResidentTypeID,
            GroundTypeID,
            GeoLocationTypeID,
            LocationID,
            PostalCode,
            StreetName,
            House,
            Building,
            Apartment,
            AddressDescription,
            Distance,
            Latitude,
            Longitude,
            Accuracy,
            Alignment,
            ForeignAddressIndicator,
            ForeignAddressString,
            ShortAddressString
        )
        SELECT idfGeoLocationShared,
               idfsResidentType,
               idfsGroundType,
               idfsGeoLocationType,
               idfsLocation,
               strPostCode,
               strStreetName,
               strHouse,
               strBuilding,
               strApartment,
               strDescription,
               dblDistance,
               dblLatitude,
               dblLongitude,
               dblAccuracy,
               dblAlignment,
               blnForeignAddress,
               strForeignAddress,
               strShortAddressString
        FROM dbo.tlbGeoLocationShared
        WHERE idfGeoLocationShared = @idfGeoLocationShared;
        -- End data audit

        UPDATE T
        SET T.idfsResidentType = S.idfsResidentType,
            T.idfsGroundType = S.idfsGroundType,
            T.idfsGeoLocationType = S.idfsGeoLocationType,
            T.idfsCountry = S.idfsCountry,
            T.idfsRegion = S.idfsRegion,
            T.idfsRayon = S.idfsRayon,
            T.idfsSettlement = S.idfsSettlement,
            T.idfsLocation = S.idfslocation,
            T.idfsSite = S.idfsSite,
            T.strPostCode = ISNULL(@FarmAddressPostalCode, S.strPostCode),
            T.strStreetName = ISNULL(@FarmAddressStreet, S.strStreetName),
            T.strHouse = ISNULL(@FarmAddressHouse, S.strHouse),
            T.strBuilding = ISNULL(@FarmAddressBuilding, S.strBuilding),
            T.strApartment = ISNULL(@FarmAddressApartment, S.strApartment),
            T.strDescription = S.strDescription,
            T.dblLongitude = ISNULL(@FarmAddressLongitude, S.dblLongitude),
            T.dblLatitude = ISNULL(@FarmAddressLatitude, S.dblLatitude),
            T.dblAccuracy = S.dblAccuracy,
            T.dblAlignment = S.dblAlignment,
            T.blnForeignAddress = ISNULL(@ForeignAddressIndicator, S.blnForeignAddress),
            T.strAddressString = S.strAddressString,
            T.strShortAddressString = S.strShortAddressString,
            T.AuditUpdateUser = @AuditUser,
            T.AuditUpdateDTM = GETDATE(),
            T.dblElevation = S.dblElevation
        FROM dbo.tlbGeoLocationShared T
            INNER JOIN dbo.tlbGeoLocationShared S
                ON S.idfGeoLocationShared = @idfGeoLocationShared
        WHERE T.idfGeoLocationShared = @idfGeoLocationShared;

        -- Data audit
        INSERT INTO @GeoLocationAfterEdit
        (
            GeoLocationID,
            ResidentTypeID,
            GroundTypeID,
            GeoLocationTypeID,
            LocationID,
            PostalCode,
            StreetName,
            House,
            Building,
            Apartment,
            AddressDescription,
            Distance,
            Latitude,
            Longitude,
            Accuracy,
            Alignment,
            ForeignAddressIndicator,
            ForeignAddressString,
            ShortAddressString
        )
        SELECT idfGeoLocationShared,
               idfsResidentType,
               idfsGroundType,
               idfsGeoLocationType,
               idfsLocation,
               strPostCode,
               strStreetName,
               strHouse,
               strBuilding,
               strApartment,
               strDescription,
               dblDistance,
               dblLatitude,
               dblLongitude,
               dblAccuracy,
               dblAlignment,
               blnForeignAddress,
               strForeignAddress,
               strShortAddressString
        FROM dbo.tlbGeoLocationShared
        WHERE idfGeoLocationShared = @idfGeoLocationShared;

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79200000000,
               a.GeoLocationID,
               NULL,
               b.ResidentTypeID,
               a.ResidentTypeID,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.ResidentTypeID <> b.ResidentTypeID)
              OR (
                     a.ResidentTypeID IS NOT NULL
                     AND b.ResidentTypeID IS NULL
                 )
              OR (
                     a.ResidentTypeID IS NULL
                     AND b.ResidentTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79170000000,
               a.GeoLocationID,
               NULL,
               b.GroundTypeID,
               a.GroundTypeID,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.GroundTypeID <> b.GroundTypeID)
              OR (
                     a.GroundTypeID IS NOT NULL
                     AND b.GroundTypeID IS NULL
                 )
              OR (
                     a.GroundTypeID IS NULL
                     AND b.GroundTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79160000000,
               a.GeoLocationID,
               NULL,
               b.GeoLocationTypeID,
               a.GeoLocationTypeID,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
              OR (
                     a.GeoLocationTypeID IS NOT NULL
                     AND b.GeoLocationTypeID IS NULL
                 )
              OR (
                     a.GeoLocationTypeID IS NULL
                     AND b.GeoLocationTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               51523700000000,
               a.GeoLocationID,
               NULL,
               b.LocationID,
               a.LocationID,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.LocationID <> b.LocationID)
              OR (
                     a.LocationID IS NOT NULL
                     AND b.LocationID IS NULL
                 )
              OR (
                     a.LocationID IS NULL
                     AND b.LocationID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79260000000,
               a.GeoLocationID,
               NULL,
               b.PostalCode,
               a.PostalCode,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.PostalCode <> b.PostalCode)
              OR (
                     a.PostalCode IS NOT NULL
                     AND b.PostalCode IS NULL
                 )
              OR (
                     a.PostalCode IS NULL
                     AND b.PostalCode IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79270000000,
               a.GeoLocationID,
               NULL,
               b.StreetName,
               a.StreetName,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.StreetName <> b.StreetName)
              OR (
                     a.StreetName IS NOT NULL
                     AND b.StreetName IS NULL
                 )
              OR (
                     a.StreetName IS NULL
                     AND b.StreetName IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79250000000,
               a.GeoLocationID,
               NULL,
               b.House,
               a.House,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.House <> b.House)
              OR (
                     a.House IS NOT NULL
                     AND b.House IS NULL
                 )
              OR (
                     a.House IS NULL
                     AND b.House IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79230000000,
               a.GeoLocationID,
               NULL,
               b.Building,
               a.Building,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Building <> b.Building)
              OR (
                     a.Building IS NOT NULL
                     AND b.Building IS NULL
                 )
              OR (
                     a.Building IS NULL
                     AND b.Building IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               4577890000000,
               a.GeoLocationID,
               NULL,
               b.Apartment,
               a.Apartment,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Apartment <> b.Apartment)
              OR (
                     a.Apartment IS NOT NULL
                     AND b.Apartment IS NULL
                 )
              OR (
                     a.Apartment IS NULL
                     AND b.Apartment IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79240000000,
               a.GeoLocationID,
               NULL,
               b.AddressDescription,
               a.AddressDescription,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.AddressDescription <> b.AddressDescription)
              OR (
                     a.AddressDescription IS NOT NULL
                     AND b.AddressDescription IS NULL
                 )
              OR (
                     a.AddressDescription IS NULL
                     AND b.AddressDescription IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79110000000,
               a.GeoLocationID,
               NULL,
               b.Distance,
               a.Distance,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Distance <> b.Distance)
              OR (
                     a.Distance IS NOT NULL
                     AND b.Distance IS NULL
                 )
              OR (
                     a.Distance IS NULL
                     AND b.Distance IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79120000000,
               a.GeoLocationID,
               NULL,
               b.Latitude,
               a.Latitude,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Latitude <> b.Latitude)
              OR (
                     a.Latitude IS NOT NULL
                     AND b.Latitude IS NULL
                 )
              OR (
                     a.Latitude IS NULL
                     AND b.Latitude IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79130000000,
               a.GeoLocationID,
               NULL,
               b.Longitude,
               a.Longitude,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Longitude <> b.Longitude)
              OR (
                     a.Longitude IS NOT NULL
                     AND b.Longitude IS NULL
                 )
              OR (
                     a.Longitude IS NULL
                     AND b.Longitude IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79090000000,
               a.GeoLocationID,
               NULL,
               b.Accuracy,
               a.Accuracy,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Accuracy <> b.Accuracy)
              OR (
                     a.Accuracy IS NOT NULL
                     AND b.Accuracy IS NULL
                 )
              OR (
                     a.Accuracy IS NULL
                     AND b.Accuracy IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               79100000000,
               a.GeoLocationID,
               NULL,
               b.Alignment,
               a.Alignment,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Alignment <> b.Alignment)
              OR (
                     a.Alignment IS NOT NULL
                     AND b.Alignment IS NULL
                 )
              OR (
                     a.Alignment IS NULL
                     AND b.Alignment IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               4578780000000,
               a.GeoLocationID,
               NULL,
               b.ForeignAddressIndicator,
               a.ForeignAddressIndicator,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
              OR (
                     a.ForeignAddressIndicator IS NOT NULL
                     AND b.ForeignAddressIndicator IS NULL
                 )
              OR (
                     a.ForeignAddressIndicator IS NULL
                     AND b.ForeignAddressIndicator IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               4578790000000,
               a.GeoLocationID,
               NULL,
               b.ForeignAddressString,
               a.ForeignAddressString,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.ForeignAddressString <> b.ForeignAddressString)
              OR (
                     a.ForeignAddressString IS NOT NULL
                     AND b.ForeignAddressString IS NULL
                 )
              OR (
                     a.ForeignAddressString IS NULL
                     AND b.ForeignAddressString IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLocationSharedID,
               51523680000000,
               a.GeoLocationID,
               NULL,
               b.ShortAddressString,
               a.ShortAddressString,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.ShortAddressString <> b.ShortAddressString)
              OR (
                     a.ShortAddressString IS NOT NULL
                     AND b.ShortAddressString IS NULL
                 )
              OR (
                     a.ShortAddressString IS NULL
                     AND b.ShortAddressString IS NOT NULL
                 );
        -- End data audit

        -- Update farm master record

        -- Data audit
        INSERT INTO @FarmBeforeEdit
        (
            FarmActualID,
            AvianFarmTypeID,
            AvianProductionTypeID,
            FarmCategoryTypeID,
            OwnershipStructureTypeID,
            MovementPatternTypeID,
            IntendedUseTypeID,
            GrazingPatternTypeID,
            LivestockProductionTypeID,
            HumanActualID,
            FarmAddressID,
            InternationalName,
            NationalName,
            EIDSSFarmID,
            Fax,
            Email,
            ContactPhone,
            LivestockTotalAnimalQuantity,
            AvianTotalAnimalQuantity,
            LivestockSickAnimalQuantity,
            AvianSickAnimalQuantity,
            LivestockDeadAnimalQuantity,
            AvianDeadAnimalQuantity,
            BuidingsQuantity,
            BirdsPerBuildingQuantity,
            Note,
            AccessoryCode,
            ModificationDate
        )
        SELECT idfFarmActual,
               idfsAvianFarmType,
               idfsAvianProductionType,
               idfsFarmCategory,
               idfsOwnershipStructure,
               idfsMovementPattern,
               idfsIntendedUse,
               idfsGrazingPattern,
               idfsLivestockProductionType,
               idfHumanActual,
               idfFarmAddress,
               strInternationalName,
               strNationalName,
               strFarmCode,
               strFax,
               strEmail,
               strContactPhone,
               intLivestockTotalAnimalQty,
               intAvianTotalAnimalQty,
               intLivestockSickAnimalQty,
               intAvianSickAnimalQty,
               intLivestockDeadAnimalQty,
               intAvianDeadAnimalQty,
               intBuidings,
               intBirdsPerBuilding,
               strNote,
               intHACode,
               datModificationDate
        FROM dbo.tlbFarmActual
        WHERE idfFarmActual = @FarmMasterID;
        -- End data audit

        UPDATE dbo.tlbFarmActual
        SET idfsAvianFarmType = ISNULL(@AvianFarmTypeID, idfsAvianFarmType),
            idfsAvianProductionType = ISNULL(@AvianProductionTypeID, idfsAvianProductionType),
            idfsFarmCategory = ISNULL(@FarmCategory, idfsFarmCategory),
            idfsOwnershipStructure = ISNULL(@OwnershipStructureTypeID, idfsOwnershipStructure),
            idfsMovementPattern = idfsMovementPattern,
            idfsIntendedUse = idfsIntendedUse,
            idfsGrazingPattern = idfsGrazingPattern,
            idfsLivestockProductionType = idfsLivestockProductionType,
            idfHumanActual = @FarmOwnerID,
            idfFarmAddress = @FarmAddressID,
            strInternationalName = strInternationalName,
            strNationalName = strNationalName,
            strFarmCode = strFarmCode,
            strFax = strFax,
            strEmail = strEmail,
            strContactPhone = strContactPhone,
            intBuidings = ISNULL(@NumberOfBuildings, intBuidings),
            intBirdsPerBuilding = ISNULL(@NumberOfBirdsPerBuilding, intBirdsPerBuilding),
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE idfFarmActual = @FarmMasterID;

        -- Data audit
        INSERT INTO @FarmAfterEdit
        (
            FarmActualID,
            AvianFarmTypeID,
            AvianProductionTypeID,
            FarmCategoryTypeID,
            OwnershipStructureTypeID,
            MovementPatternTypeID,
            IntendedUseTypeID,
            GrazingPatternTypeID,
            LivestockProductionTypeID,
            HumanActualID,
            FarmAddressID,
            InternationalName,
            NationalName,
            EIDSSFarmID,
            Fax,
            Email,
            ContactPhone,
            LivestockTotalAnimalQuantity,
            AvianTotalAnimalQuantity,
            LivestockSickAnimalQuantity,
            AvianSickAnimalQuantity,
            LivestockDeadAnimalQuantity,
            AvianDeadAnimalQuantity,
            BuidingsQuantity,
            BirdsPerBuildingQuantity,
            Note,
            AccessoryCode,
            ModificationDate
        )
        SELECT idfFarmActual,
               idfsAvianFarmType,
               idfsAvianProductionType,
               idfsFarmCategory,
               idfsOwnershipStructure,
               idfsMovementPattern,
               idfsIntendedUse,
               idfsGrazingPattern,
               idfsLivestockProductionType,
               idfHumanActual,
               idfFarmAddress,
               strInternationalName,
               strNationalName,
               strFarmCode,
               strFax,
               strEmail,
               strContactPhone,
               intLivestockTotalAnimalQty,
               intAvianTotalAnimalQty,
               intLivestockSickAnimalQty,
               intAvianSickAnimalQty,
               intLivestockDeadAnimalQty,
               intAvianDeadAnimalQty,
               intBuidings,
               intBirdsPerBuilding,
               strNote,
               intHACode,
               datModificationDate
        FROM dbo.tlbFarmActual
        WHERE idfFarmActual = @FarmMasterID;

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572810000000,
               a.FarmActualID,
               NULL,
               b.AvianFarmTypeID,
               a.AvianFarmTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.AvianFarmTypeID <> b.AvianFarmTypeID)
              OR (
                     a.AvianFarmTypeID IS NOT NULL
                     AND b.AvianFarmTypeID IS NULL
                 )
              OR (
                     a.AvianFarmTypeID IS NULL
                     AND b.AvianFarmTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572820000000,
               a.FarmActualID,
               NULL,
               b.AvianProductionTypeID,
               a.AvianProductionTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.AvianProductionTypeID <> b.AvianProductionTypeID)
              OR (
                     a.AvianProductionTypeID IS NOT NULL
                     AND b.AvianProductionTypeID IS NULL
                 )
              OR (
                     a.AvianProductionTypeID IS NULL
                     AND b.AvianProductionTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572830000000,
               a.FarmActualID,
               NULL,
               b.FarmCategoryTypeID,
               a.FarmCategoryTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.FarmCategoryTypeID <> b.FarmCategoryTypeID)
              OR (
                     a.FarmCategoryTypeID IS NOT NULL
                     AND b.FarmCategoryTypeID IS NULL
                 )
              OR (
                     a.FarmCategoryTypeID IS NULL
                     AND b.FarmCategoryTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572840000000,
               a.FarmActualID,
               NULL,
               b.OwnershipStructureTypeID,
               a.OwnershipStructureTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.OwnershipStructureTypeID <> b.OwnershipStructureTypeID)
              OR (
                     a.OwnershipStructureTypeID IS NOT NULL
                     AND b.OwnershipStructureTypeID IS NULL
                 )
              OR (
                     a.OwnershipStructureTypeID IS NULL
                     AND b.OwnershipStructureTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572850000000,
               a.FarmActualID,
               NULL,
               b.MovementPatternTypeID,
               a.MovementPatternTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.MovementPatternTypeID <> b.MovementPatternTypeID)
              OR (
                     a.MovementPatternTypeID IS NOT NULL
                     AND b.MovementPatternTypeID IS NULL
                 )
              OR (
                     a.MovementPatternTypeID IS NULL
                     AND b.MovementPatternTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572860000000,
               a.FarmActualID,
               NULL,
               b.IntendedUseTypeID,
               a.IntendedUseTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.IntendedUseTypeID <> b.IntendedUseTypeID)
              OR (
                     a.IntendedUseTypeID IS NOT NULL
                     AND b.IntendedUseTypeID IS NULL
                 )
              OR (
                     a.IntendedUseTypeID IS NULL
                     AND b.IntendedUseTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572870000000,
               a.FarmActualID,
               NULL,
               b.GrazingPatternTypeID,
               a.GrazingPatternTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.GrazingPatternTypeID <> b.GrazingPatternTypeID)
              OR (
                     a.GrazingPatternTypeID IS NOT NULL
                     AND b.GrazingPatternTypeID IS NULL
                 )
              OR (
                     a.GrazingPatternTypeID IS NULL
                     AND b.GrazingPatternTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572880000000,
               a.FarmActualID,
               NULL,
               b.LivestockProductionTypeID,
               a.LivestockProductionTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.LivestockProductionTypeID <> b.LivestockProductionTypeID)
              OR (
                     a.LivestockProductionTypeID IS NOT NULL
                     AND b.LivestockProductionTypeID IS NULL
                 )
              OR (
                     a.LivestockProductionTypeID IS NULL
                     AND b.LivestockProductionTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572890000000,
               a.FarmActualID,
               NULL,
               b.HumanActualID,
               a.HumanActualID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.HumanActualID <> b.HumanActualID)
              OR (
                     a.HumanActualID IS NOT NULL
                     AND b.HumanActualID IS NULL
                 )
              OR (
                     a.HumanActualID IS NULL
                     AND b.HumanActualID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572900000000,
               a.FarmActualID,
               NULL,
               b.FarmAddressID,
               a.FarmAddressID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.FarmAddressID <> b.FarmAddressID)
              OR (
                     a.FarmAddressID IS NOT NULL
                     AND b.FarmAddressID IS NULL
                 )
              OR (
                     a.FarmAddressID IS NULL
                     AND b.FarmAddressID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572920000000,
               a.FarmActualID,
               NULL,
               b.InternationalName,
               a.InternationalName,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.InternationalName <> b.InternationalName)
              OR (
                     a.InternationalName IS NOT NULL
                     AND b.InternationalName IS NULL
                 )
              OR (
                     a.InternationalName IS NULL
                     AND b.InternationalName IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572930000000,
               a.FarmActualID,
               NULL,
               b.NationalName,
               a.NationalName,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.NationalName <> b.NationalName)
              OR (
                     a.NationalName IS NOT NULL
                     AND b.NationalName IS NULL
                 )
              OR (
                     a.NationalName IS NULL
                     AND b.NationalName IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572940000000,
               a.FarmActualID,
               NULL,
               b.EIDSSFarmID,
               a.EIDSSFarmID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.EIDSSFarmID <> b.EIDSSFarmID)
              OR (
                     a.EIDSSFarmID IS NOT NULL
                     AND b.EIDSSFarmID IS NULL
                 )
              OR (
                     a.EIDSSFarmID IS NULL
                     AND b.EIDSSFarmID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572950000000,
               a.FarmActualID,
               NULL,
               b.Fax,
               a.Fax,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.Fax <> b.Fax)
              OR (
                     a.Fax IS NOT NULL
                     AND b.Fax IS NULL
                 )
              OR (
                     a.Fax IS NULL
                     AND b.Fax IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572960000000,
               a.FarmActualID,
               NULL,
               b.Email,
               a.Email,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.Email <> b.Email)
              OR (
                     a.Email IS NOT NULL
                     AND b.Email IS NULL
                 )
              OR (
                     a.Email IS NULL
                     AND b.Email IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4572970000000,
               a.FarmActualID,
               NULL,
               b.ContactPhone,
               a.ContactPhone,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.ContactPhone <> b.ContactPhone)
              OR (
                     a.ContactPhone IS NOT NULL
                     AND b.ContactPhone IS NULL
                 )
              OR (
                     a.ContactPhone IS NULL
                     AND b.ContactPhone IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4573010000000,
               a.FarmActualID,
               NULL,
               b.LivestockTotalAnimalQuantity,
               a.LivestockTotalAnimalQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.LivestockTotalAnimalQuantity <> b.LivestockTotalAnimalQuantity)
              OR (
                     a.LivestockTotalAnimalQuantity IS NOT NULL
                     AND b.LivestockTotalAnimalQuantity IS NULL
                 )
              OR (
                     a.LivestockTotalAnimalQuantity IS NULL
                     AND b.LivestockTotalAnimalQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4573020000000,
               a.FarmActualID,
               NULL,
               b.AvianTotalAnimalQuantity,
               a.AvianTotalAnimalQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.AvianTotalAnimalQuantity <> b.AvianTotalAnimalQuantity)
              OR (
                     a.AvianTotalAnimalQuantity IS NOT NULL
                     AND b.AvianTotalAnimalQuantity IS NULL
                 )
              OR (
                     a.AvianTotalAnimalQuantity IS NULL
                     AND b.AvianTotalAnimalQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4573030000000,
               a.FarmActualID,
               NULL,
               b.LivestockSickAnimalQuantity,
               a.LivestockSickAnimalQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.LivestockSickAnimalQuantity <> b.LivestockSickAnimalQuantity)
              OR (
                     a.LivestockSickAnimalQuantity IS NOT NULL
                     AND b.LivestockSickAnimalQuantity IS NULL
                 )
              OR (
                     a.LivestockSickAnimalQuantity IS NULL
                     AND b.LivestockSickAnimalQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4573040000000,
               a.FarmActualID,
               NULL,
               b.AvianSickAnimalQuantity,
               a.AvianSickAnimalQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.AvianSickAnimalQuantity <> b.AvianSickAnimalQuantity)
              OR (
                     a.AvianSickAnimalQuantity IS NOT NULL
                     AND b.AvianSickAnimalQuantity IS NULL
                 )
              OR (
                     a.AvianSickAnimalQuantity IS NULL
                     AND b.AvianSickAnimalQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4573050000000,
               a.FarmActualID,
               NULL,
               b.LivestockDeadAnimalQuantity,
               a.LivestockDeadAnimalQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.LivestockDeadAnimalQuantity <> b.LivestockDeadAnimalQuantity)
              OR (
                     a.LivestockDeadAnimalQuantity IS NOT NULL
                     AND b.LivestockDeadAnimalQuantity IS NULL
                 )
              OR (
                     a.LivestockDeadAnimalQuantity IS NULL
                     AND b.LivestockDeadAnimalQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4573060000000,
               a.FarmActualID,
               NULL,
               b.AvianDeadAnimalQuantity,
               a.AvianDeadAnimalQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.AvianDeadAnimalQuantity <> b.AvianDeadAnimalQuantity)
              OR (
                     a.AvianDeadAnimalQuantity IS NOT NULL
                     AND b.AvianDeadAnimalQuantity IS NULL
                 )
              OR (
                     a.AvianDeadAnimalQuantity IS NULL
                     AND b.AvianDeadAnimalQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4573070000000,
               a.FarmActualID,
               NULL,
               b.BuidingsQuantity,
               a.BuidingsQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.BuidingsQuantity <> b.BuidingsQuantity)
              OR (
                     a.BuidingsQuantity IS NOT NULL
                     AND b.BuidingsQuantity IS NULL
                 )
              OR (
                     a.BuidingsQuantity IS NULL
                     AND b.BuidingsQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4573080000000,
               a.FarmActualID,
               NULL,
               b.BirdsPerBuildingQuantity,
               a.BirdsPerBuildingQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.BirdsPerBuildingQuantity <> b.BirdsPerBuildingQuantity)
              OR (
                     a.BirdsPerBuildingQuantity IS NOT NULL
                     AND b.BirdsPerBuildingQuantity IS NULL
                 )
              OR (
                     a.BirdsPerBuildingQuantity IS NULL
                     AND b.BirdsPerBuildingQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               4573090000000,
               a.FarmActualID,
               NULL,
               b.Note,
               a.Note,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.Note <> b.Note)
              OR (
                     a.Note IS NOT NULL
                     AND b.Note IS NULL
                 )
              OR (
                     a.Note IS NULL
                     AND b.Note IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               51389490000000,
               a.FarmActualID,
               NULL,
               b.AccessoryCode,
               a.AccessoryCode,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.AccessoryCode <> b.AccessoryCode)
              OR (
                     a.AccessoryCode IS NOT NULL
                     AND b.AccessoryCode IS NULL
                 )
              OR (
                     a.AccessoryCode IS NULL
                     AND b.AccessoryCode IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmActualID,
               51389500000000,
               a.FarmActualID,
               NULL,
               b.ModificationDate,
               a.ModificationDate,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.ModificationDate <> b.ModificationDate)
              OR (
                     a.ModificationDate IS NOT NULL
                     AND b.ModificationDate IS NULL
                 )
              OR (
                     a.ModificationDate IS NULL
                     AND b.ModificationDate IS NOT NULL
                 );
        -- End data audit

        -- Disable superseded farm master record
        UPDATE dbo.tlbFarmActual
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE idfFarmActual = @SupersededFarmMasterID;

        -- Data audit
        INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableFarmActualID,
                       @SupersededFarmMasterID,
                       @AuditUser,
                       (SELECT strFarmCode FROM dbo.tlbFarmActual WHERE idfFarmActual = @SupersededFarmMasterID);
        -- End data audit

        --------------------------------------------------------------------------------------------------
        -- Update superseded farm address records
        --------------------------------------------------------------------------------------------------
        -- Data audit
        DELETE FROM @GeoLocationAfterEdit;
        DELETE FROM @GeoLocationBeforeEdit;

        INSERT INTO @GeoLocationBeforeEdit
        (
            GeoLocationID,
            ResidentTypeID,
            GroundTypeID,
            GeoLocationTypeID,
            LocationID,
            PostalCode,
            StreetName,
            House,
            Building,
            Apartment,
            AddressDescription,
            Distance,
            Latitude,
            Longitude,
            Accuracy,
            Alignment,
            ForeignAddressIndicator,
            ForeignAddressString,
            ShortAddressString
        )
        SELECT g.idfGeoLocation,
               g.idfsResidentType,
               g.idfsGroundType,
               g.idfsGeoLocationType,
               g.idfsLocation,
               g.strPostCode,
               g.strStreetName,
               g.strHouse,
               g.strBuilding,
               g.strApartment,
               g.strDescription,
               g.dblDistance,
               g.dblLatitude,
               g.dblLongitude,
               g.dblAccuracy,
               g.dblAlignment,
               g.blnForeignAddress,
               g.strForeignAddress,
               g.strShortAddressString
        FROM dbo.tlbGeoLocation g
        INNER JOIN dbo.tlbGeoLocationShared S
                ON S.idfGeoLocationShared = @idfGeoLocationShared
        WHERE g.idfGeoLocation IN (
                                      SELECT idfGeoLocation FROM @Location
                                  );
        -- End data audit

        UPDATE T
        SET T.idfsResidentType = S.idfsResidentType,
            T.idfsGroundType = S.idfsGroundType,
            T.idfsGeoLocationType = S.idfsGeoLocationType,
            T.idfsCountry = S.idfsCountry,
            T.idfsRegion = S.idfsRegion,
            T.idfsRayon = S.idfsRayon,
            T.idfsSettlement = S.idfsSettlement,
            T.idfsLocation = S.idfslocation,
            T.idfsSite = S.idfsSite,
            T.strPostCode = S.strPostCode,
            T.strStreetName = S.strStreetName,
            T.strHouse = S.strHouse,
            T.strBuilding = S.strBuilding,
            T.strApartment = S.strApartment,
            T.strDescription = S.strDescription,
            T.dblLongitude = S.dblLongitude,
            T.dblLatitude = S.dblLatitude,
            T.dblAccuracy = S.dblAccuracy,
            T.dblAlignment = S.dblAlignment,
            T.blnForeignAddress = S.blnForeignAddress,
            T.strAddressString = S.strAddressString,
            T.strShortAddressString = S.strShortAddressString,
            T.strMaintenanceFlag = S.strMaintenanceFlag,
            T.strReservedAttribute = S.strReservedAttribute,
            T.SourceSystemNameID = S.SourceSystemNameID,
            T.SourceSystemKeyValue = S.SourceSystemKeyValue,
            T.AuditCreateUser = S.AuditCreateUser,
            T.AuditCreateDTM = S.AuditCreateDTM,
            T.AuditUpdateUser = S.AuditUpdateUser,
            T.AuditUpdateDTM = S.AuditUpdateDTM,
            T.dblElevation = S.dblElevation
        FROM dbo.tlbGeoLocation T
            INNER JOIN dbo.tlbGeoLocationShared S
                ON S.idfGeoLocationShared = @idfGeoLocationShared
        WHERE T.idfGeoLocation IN (
                                      SELECT idfGeoLocation FROM @Location
                                  );

        -- Data audit
        INSERT INTO @GeoLocationAfterEdit
        (
            GeoLocationID,
            ResidentTypeID,
            GroundTypeID,
            GeoLocationTypeID,
            LocationID,
            PostalCode,
            StreetName,
            House,
            Building,
            Apartment,
            AddressDescription,
            Distance,
            Latitude,
            Longitude,
            Accuracy,
            Alignment,
            ForeignAddressIndicator,
            ForeignAddressString,
            ShortAddressString
        )
        SELECT g.idfGeoLocation,
               g.idfsResidentType,
               g.idfsGroundType,
               g.idfsGeoLocationType,
               g.idfsLocation,
               g.strPostCode,
               g.strStreetName,
               g.strHouse,
               g.strBuilding,
               g.strApartment,
               g.strDescription,
               g.dblDistance,
               g.dblLatitude,
               g.dblLongitude,
               g.dblAccuracy,
               g.dblAlignment,
               g.blnForeignAddress,
               g.strForeignAddress,
               g.strShortAddressString
        FROM dbo.tlbGeoLocation g
        INNER JOIN dbo.tlbGeoLocationShared S
                ON S.idfGeoLocationShared = @idfGeoLocationShared
        WHERE g.idfGeoLocation IN (
                                      SELECT idfGeoLocation FROM @Location
                                  );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79200000000,
               a.GeoLocationID,
               NULL,
               b.ResidentTypeID,
               a.ResidentTypeID,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.ResidentTypeID <> b.ResidentTypeID)
              OR (
                     a.ResidentTypeID IS NOT NULL
                     AND b.ResidentTypeID IS NULL
                 )
              OR (
                     a.ResidentTypeID IS NULL
                     AND b.ResidentTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79170000000,
               a.GeoLocationID,
               NULL,
               b.GroundTypeID,
               a.GroundTypeID,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.GroundTypeID <> b.GroundTypeID)
              OR (
                     a.GroundTypeID IS NOT NULL
                     AND b.GroundTypeID IS NULL
                 )
              OR (
                     a.GroundTypeID IS NULL
                     AND b.GroundTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79160000000,
               a.GeoLocationID,
               NULL,
               b.GeoLocationTypeID,
               a.GeoLocationTypeID,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
              OR (
                     a.GeoLocationTypeID IS NOT NULL
                     AND b.GeoLocationTypeID IS NULL
                 )
              OR (
                     a.GeoLocationTypeID IS NULL
                     AND b.GeoLocationTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               51523700000000,
               a.GeoLocationID,
               NULL,
               b.LocationID,
               a.LocationID,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.LocationID <> b.LocationID)
              OR (
                     a.LocationID IS NOT NULL
                     AND b.LocationID IS NULL
                 )
              OR (
                     a.LocationID IS NULL
                     AND b.LocationID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79260000000,
               a.GeoLocationID,
               NULL,
               b.PostalCode,
               a.PostalCode,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.PostalCode <> b.PostalCode)
              OR (
                     a.PostalCode IS NOT NULL
                     AND b.PostalCode IS NULL
                 )
              OR (
                     a.PostalCode IS NULL
                     AND b.PostalCode IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79270000000,
               a.GeoLocationID,
               NULL,
               b.StreetName,
               a.StreetName,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.StreetName <> b.StreetName)
              OR (
                     a.StreetName IS NOT NULL
                     AND b.StreetName IS NULL
                 )
              OR (
                     a.StreetName IS NULL
                     AND b.StreetName IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79250000000,
               a.GeoLocationID,
               NULL,
               b.House,
               a.House,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.House <> b.House)
              OR (
                     a.House IS NOT NULL
                     AND b.House IS NULL
                 )
              OR (
                     a.House IS NULL
                     AND b.House IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79230000000,
               a.GeoLocationID,
               NULL,
               b.Building,
               a.Building,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Building <> b.Building)
              OR (
                     a.Building IS NOT NULL
                     AND b.Building IS NULL
                 )
              OR (
                     a.Building IS NULL
                     AND b.Building IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               4577890000000,
               a.GeoLocationID,
               NULL,
               b.Apartment,
               a.Apartment,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Apartment <> b.Apartment)
              OR (
                     a.Apartment IS NOT NULL
                     AND b.Apartment IS NULL
                 )
              OR (
                     a.Apartment IS NULL
                     AND b.Apartment IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79240000000,
               a.GeoLocationID,
               NULL,
               b.AddressDescription,
               a.AddressDescription,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.AddressDescription <> b.AddressDescription)
              OR (
                     a.AddressDescription IS NOT NULL
                     AND b.AddressDescription IS NULL
                 )
              OR (
                     a.AddressDescription IS NULL
                     AND b.AddressDescription IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79110000000,
               a.GeoLocationID,
               NULL,
               b.Distance,
               a.Distance,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Distance <> b.Distance)
              OR (
                     a.Distance IS NOT NULL
                     AND b.Distance IS NULL
                 )
              OR (
                     a.Distance IS NULL
                     AND b.Distance IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79120000000,
               a.GeoLocationID,
               NULL,
               b.Latitude,
               a.Latitude,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Latitude <> b.Latitude)
              OR (
                     a.Latitude IS NOT NULL
                     AND b.Latitude IS NULL
                 )
              OR (
                     a.Latitude IS NULL
                     AND b.Latitude IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79130000000,
               a.GeoLocationID,
               NULL,
               b.Longitude,
               a.Longitude,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Longitude <> b.Longitude)
              OR (
                     a.Longitude IS NOT NULL
                     AND b.Longitude IS NULL
                 )
              OR (
                     a.Longitude IS NULL
                     AND b.Longitude IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79090000000,
               a.GeoLocationID,
               NULL,
               b.Accuracy,
               a.Accuracy,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Accuracy <> b.Accuracy)
              OR (
                     a.Accuracy IS NOT NULL
                     AND b.Accuracy IS NULL
                 )
              OR (
                     a.Accuracy IS NULL
                     AND b.Accuracy IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               79100000000,
               a.GeoLocationID,
               NULL,
               b.Alignment,
               a.Alignment,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.Alignment <> b.Alignment)
              OR (
                     a.Alignment IS NOT NULL
                     AND b.Alignment IS NULL
                 )
              OR (
                     a.Alignment IS NULL
                     AND b.Alignment IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               4578780000000,
               a.GeoLocationID,
               NULL,
               b.ForeignAddressIndicator,
               a.ForeignAddressIndicator,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
              OR (
                     a.ForeignAddressIndicator IS NOT NULL
                     AND b.ForeignAddressIndicator IS NULL
                 )
              OR (
                     a.ForeignAddressIndicator IS NULL
                     AND b.ForeignAddressIndicator IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               4578790000000,
               a.GeoLocationID,
               NULL,
               b.ForeignAddressString,
               a.ForeignAddressString,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.ForeignAddressString <> b.ForeignAddressString)
              OR (
                     a.ForeignAddressString IS NOT NULL
                     AND b.ForeignAddressString IS NULL
                 )
              OR (
                     a.ForeignAddressString IS NULL
                     AND b.ForeignAddressString IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableGeoLoationID,
               51523680000000,
               a.GeoLocationID,
               NULL,
               b.ShortAddressString,
               a.ShortAddressString,
               @AuditUser
        FROM @GeoLocationAfterEdit AS a
            FULL JOIN @GeoLocationBeforeEdit AS b
                ON a.GeoLocationID = b.GeoLocationID
        WHERE (a.ShortAddressString <> b.ShortAddressString)
              OR (
                     a.ShortAddressString IS NOT NULL
                     AND b.ShortAddressString IS NULL
                 )
              OR (
                     a.ShortAddressString IS NULL
                     AND b.ShortAddressString IS NOT NULL
                 );
        -- End data audit

        --------------------------------------------------------------------------------------------------
        -- Update superseded farm records
        --------------------------------------------------------------------------------------------------
        DELETE FROM @FarmAfterEdit;
        DELETE FROM @FarmBeforeEdit;

        INSERT INTO @FarmBeforeEdit
        (
            FarmActualID,
            AvianFarmTypeID,
            AvianProductionTypeID,
            FarmCategoryTypeID,
            OwnershipStructureTypeID,
            MovementPatternTypeID,
            IntendedUseTypeID,
            GrazingPatternTypeID,
            LivestockProductionTypeID,
            FarmAddressID,
            InternationalName,
            NationalName,
            EIDSSFarmID,
            Fax,
            Email,
            ContactPhone,
            LivestockTotalAnimalQuantity,
            AvianTotalAnimalQuantity,
            LivestockSickAnimalQuantity,
            AvianSickAnimalQuantity,
            LivestockDeadAnimalQuantity,
            AvianDeadAnimalQuantity,
            BuidingsQuantity,
            BirdsPerBuildingQuantity,
            Note,
            AccessoryCode,
            ModificationDate
        )
        SELECT f.idfFarmActual,
               f.idfsAvianFarmType,
               f.idfsAvianProductionType,
               f.idfsFarmCategory,
               f.idfsOwnershipStructure,
               f.idfsMovementPattern,
               f.idfsIntendedUse,
               f.idfsGrazingPattern,
               f.idfsLivestockProductionType,
               f.idfFarmAddress,
               f.strInternationalName,
               f.strNationalName,
               f.strFarmCode,
               f.strFax,
               f.strEmail,
               f.strContactPhone,
               f.intLivestockTotalAnimalQty,
               f.intAvianTotalAnimalQty,
               f.intLivestockSickAnimalQty,
               f.intAvianSickAnimalQty,
               f.intLivestockDeadAnimalQty,
               f.intAvianDeadAnimalQty,
               f.intBuidings,
               f.intBirdsPerBuilding,
               f.strNote,
               f.intHACode,
               f.datModificationDate
        FROM dbo.tlbFarm f
            INNER JOIN dbo.tlbFarmActual S
                ON S.idfFarmActual = @FarmMasterID
        WHERE f.idfFarmActual = @SupersededFarmMasterID;

        UPDATE T
        SET T.idfFarmActual = @FarmMasterID,
            T.idfsAvianFarmType = S.idfsAvianFarmType,
            T.idfsAvianProductionType = S.idfsAvianProductionType,
            T.idfsFarmCategory = S.idfsFarmCategory,
            T.idfsOwnershipStructure = S.idfsOwnershipStructure,
            T.idfsMovementPattern = S.idfsMovementPattern,
            T.idfsIntendedUse = S.idfsIntendedUse,
            T.idfsGrazingPattern = S.idfsGrazingPattern,
            T.idfsLivestockProductionType = S.idfsLivestockProductionType,
            T.strInternationalName = S.strInternationalName,
            T.strNationalName = S.strNationalName,
            T.strFarmCode = S.strFarmCode,
            T.strFax = S.strFax,
            T.strEmail = S.strEmail,
            T.strContactPhone = S.strContactPhone,
            T.intLivestockTotalAnimalQty = S.intLivestockTotalAnimalQty,
            T.intAvianTotalAnimalQty = S.intAvianTotalAnimalQty,
            T.intLivestockSickAnimalQty = S.intLivestockSickAnimalQty,
            T.intLivestockDeadAnimalQty = S.intLivestockDeadAnimalQty,
            T.intAvianDeadAnimalQty = S.intAvianDeadAnimalQty,
            T.intBuidings = S.intBuidings,
            T.intBirdsPerBuilding = S.intBirdsPerBuilding,
            T.strNote = S.strNote,
            T.intHACode = S.intHACode,
            T.datModificationDate = S.datModificationDate,
            T.datModificationForArchiveDate = GETDATE(),
            T.AuditUpdateUser = @AuditUser,
            T.AuditUpdateDTM = GETDATE()
        FROM dbo.tlbFarm T
            INNER JOIN dbo.tlbFarmActual S
                ON S.idfFarmActual = @FarmMasterID
        WHERE T.idfFarmActual = @SupersededFarmMasterID;

        INSERT INTO @FarmAfterEdit
        (
            FarmActualID,
            AvianFarmTypeID,
            AvianProductionTypeID,
            FarmCategoryTypeID,
            OwnershipStructureTypeID,
            MovementPatternTypeID,
            IntendedUseTypeID,
            GrazingPatternTypeID,
            LivestockProductionTypeID,
            FarmAddressID,
            InternationalName,
            NationalName,
            EIDSSFarmID,
            Fax,
            Email,
            ContactPhone,
            LivestockTotalAnimalQuantity,
            AvianTotalAnimalQuantity,
            LivestockSickAnimalQuantity,
            AvianSickAnimalQuantity,
            LivestockDeadAnimalQuantity,
            AvianDeadAnimalQuantity,
            BuidingsQuantity,
            BirdsPerBuildingQuantity,
            Note,
            AccessoryCode,
            ModificationDate
        )
        SELECT f.idfFarmActual,
               f.idfsAvianFarmType,
               f.idfsAvianProductionType,
               f.idfsFarmCategory,
               f.idfsOwnershipStructure,
               f.idfsMovementPattern,
               f.idfsIntendedUse,
               f.idfsGrazingPattern,
               f.idfsLivestockProductionType,
               f.idfFarmAddress,
               f.strInternationalName,
               f.strNationalName,
               f.strFarmCode,
               f.strFax,
               f.strEmail,
               f.strContactPhone,
               f.intLivestockTotalAnimalQty,
               f.intAvianTotalAnimalQty,
               f.intLivestockSickAnimalQty,
               f.intAvianSickAnimalQty,
               f.intLivestockDeadAnimalQty,
               f.intAvianDeadAnimalQty,
               f.intBuidings,
               f.intBirdsPerBuilding,
               f.strNote,
               f.intHACode,
               f.datModificationDate
        FROM dbo.tlbFarm f
            INNER JOIN dbo.tlbFarmActual S
                ON S.idfFarmActual = @FarmMasterID
        WHERE f.idfFarmActual = @SupersededFarmMasterID;

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572810000000,
               a.FarmActualID,
               NULL,
               b.AvianFarmTypeID,
               a.AvianFarmTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.AvianFarmTypeID <> b.AvianFarmTypeID)
              OR (
                     a.AvianFarmTypeID IS NOT NULL
                     AND b.AvianFarmTypeID IS NULL
                 )
              OR (
                     a.AvianFarmTypeID IS NULL
                     AND b.AvianFarmTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572820000000,
               a.FarmActualID,
               NULL,
               b.AvianProductionTypeID,
               a.AvianProductionTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.AvianProductionTypeID <> b.AvianProductionTypeID)
              OR (
                     a.AvianProductionTypeID IS NOT NULL
                     AND b.AvianProductionTypeID IS NULL
                 )
              OR (
                     a.AvianProductionTypeID IS NULL
                     AND b.AvianProductionTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572830000000,
               a.FarmActualID,
               NULL,
               b.FarmCategoryTypeID,
               a.FarmCategoryTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.FarmCategoryTypeID <> b.FarmCategoryTypeID)
              OR (
                     a.FarmCategoryTypeID IS NOT NULL
                     AND b.FarmCategoryTypeID IS NULL
                 )
              OR (
                     a.FarmCategoryTypeID IS NULL
                     AND b.FarmCategoryTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572840000000,
               a.FarmActualID,
               NULL,
               b.OwnershipStructureTypeID,
               a.OwnershipStructureTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.OwnershipStructureTypeID <> b.OwnershipStructureTypeID)
              OR (
                     a.OwnershipStructureTypeID IS NOT NULL
                     AND b.OwnershipStructureTypeID IS NULL
                 )
              OR (
                     a.OwnershipStructureTypeID IS NULL
                     AND b.OwnershipStructureTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572850000000,
               a.FarmActualID,
               NULL,
               b.MovementPatternTypeID,
               a.MovementPatternTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.MovementPatternTypeID <> b.MovementPatternTypeID)
              OR (
                     a.MovementPatternTypeID IS NOT NULL
                     AND b.MovementPatternTypeID IS NULL
                 )
              OR (
                     a.MovementPatternTypeID IS NULL
                     AND b.MovementPatternTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572860000000,
               a.FarmActualID,
               NULL,
               b.IntendedUseTypeID,
               a.IntendedUseTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.IntendedUseTypeID <> b.IntendedUseTypeID)
              OR (
                     a.IntendedUseTypeID IS NOT NULL
                     AND b.IntendedUseTypeID IS NULL
                 )
              OR (
                     a.IntendedUseTypeID IS NULL
                     AND b.IntendedUseTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572870000000,
               a.FarmActualID,
               NULL,
               b.GrazingPatternTypeID,
               a.GrazingPatternTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.GrazingPatternTypeID <> b.GrazingPatternTypeID)
              OR (
                     a.GrazingPatternTypeID IS NOT NULL
                     AND b.GrazingPatternTypeID IS NULL
                 )
              OR (
                     a.GrazingPatternTypeID IS NULL
                     AND b.GrazingPatternTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572880000000,
               a.FarmActualID,
               NULL,
               b.LivestockProductionTypeID,
               a.LivestockProductionTypeID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.LivestockProductionTypeID <> b.LivestockProductionTypeID)
              OR (
                     a.LivestockProductionTypeID IS NOT NULL
                     AND b.LivestockProductionTypeID IS NULL
                 )
              OR (
                     a.LivestockProductionTypeID IS NULL
                     AND b.LivestockProductionTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572890000000,
               a.FarmActualID,
               NULL,
               b.HumanActualID,
               a.HumanActualID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.HumanActualID <> b.HumanActualID)
              OR (
                     a.HumanActualID IS NOT NULL
                     AND b.HumanActualID IS NULL
                 )
              OR (
                     a.HumanActualID IS NULL
                     AND b.HumanActualID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572900000000,
               a.FarmActualID,
               NULL,
               b.FarmAddressID,
               a.FarmAddressID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.FarmAddressID <> b.FarmAddressID)
              OR (
                     a.FarmAddressID IS NOT NULL
                     AND b.FarmAddressID IS NULL
                 )
              OR (
                     a.FarmAddressID IS NULL
                     AND b.FarmAddressID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572920000000,
               a.FarmActualID,
               NULL,
               b.InternationalName,
               a.InternationalName,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.InternationalName <> b.InternationalName)
              OR (
                     a.InternationalName IS NOT NULL
                     AND b.InternationalName IS NULL
                 )
              OR (
                     a.InternationalName IS NULL
                     AND b.InternationalName IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572930000000,
               a.FarmActualID,
               NULL,
               b.NationalName,
               a.NationalName,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.NationalName <> b.NationalName)
              OR (
                     a.NationalName IS NOT NULL
                     AND b.NationalName IS NULL
                 )
              OR (
                     a.NationalName IS NULL
                     AND b.NationalName IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572940000000,
               a.FarmActualID,
               NULL,
               b.EIDSSFarmID,
               a.EIDSSFarmID,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.EIDSSFarmID <> b.EIDSSFarmID)
              OR (
                     a.EIDSSFarmID IS NOT NULL
                     AND b.EIDSSFarmID IS NULL
                 )
              OR (
                     a.EIDSSFarmID IS NULL
                     AND b.EIDSSFarmID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572950000000,
               a.FarmActualID,
               NULL,
               b.Fax,
               a.Fax,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.Fax <> b.Fax)
              OR (
                     a.Fax IS NOT NULL
                     AND b.Fax IS NULL
                 )
              OR (
                     a.Fax IS NULL
                     AND b.Fax IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572960000000,
               a.FarmActualID,
               NULL,
               b.Email,
               a.Email,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.Email <> b.Email)
              OR (
                     a.Email IS NOT NULL
                     AND b.Email IS NULL
                 )
              OR (
                     a.Email IS NULL
                     AND b.Email IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4572970000000,
               a.FarmActualID,
               NULL,
               b.ContactPhone,
               a.ContactPhone,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.ContactPhone <> b.ContactPhone)
              OR (
                     a.ContactPhone IS NOT NULL
                     AND b.ContactPhone IS NULL
                 )
              OR (
                     a.ContactPhone IS NULL
                     AND b.ContactPhone IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4573010000000,
               a.FarmActualID,
               NULL,
               b.LivestockTotalAnimalQuantity,
               a.LivestockTotalAnimalQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.LivestockTotalAnimalQuantity <> b.LivestockTotalAnimalQuantity)
              OR (
                     a.LivestockTotalAnimalQuantity IS NOT NULL
                     AND b.LivestockTotalAnimalQuantity IS NULL
                 )
              OR (
                     a.LivestockTotalAnimalQuantity IS NULL
                     AND b.LivestockTotalAnimalQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4573020000000,
               a.FarmActualID,
               NULL,
               b.AvianTotalAnimalQuantity,
               a.AvianTotalAnimalQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.AvianTotalAnimalQuantity <> b.AvianTotalAnimalQuantity)
              OR (
                     a.AvianTotalAnimalQuantity IS NOT NULL
                     AND b.AvianTotalAnimalQuantity IS NULL
                 )
              OR (
                     a.AvianTotalAnimalQuantity IS NULL
                     AND b.AvianTotalAnimalQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4573030000000,
               a.FarmActualID,
               NULL,
               b.LivestockSickAnimalQuantity,
               a.LivestockSickAnimalQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.LivestockSickAnimalQuantity <> b.LivestockSickAnimalQuantity)
              OR (
                     a.LivestockSickAnimalQuantity IS NOT NULL
                     AND b.LivestockSickAnimalQuantity IS NULL
                 )
              OR (
                     a.LivestockSickAnimalQuantity IS NULL
                     AND b.LivestockSickAnimalQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4573040000000,
               a.FarmActualID,
               NULL,
               b.AvianSickAnimalQuantity,
               a.AvianSickAnimalQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.AvianSickAnimalQuantity <> b.AvianSickAnimalQuantity)
              OR (
                     a.AvianSickAnimalQuantity IS NOT NULL
                     AND b.AvianSickAnimalQuantity IS NULL
                 )
              OR (
                     a.AvianSickAnimalQuantity IS NULL
                     AND b.AvianSickAnimalQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4573050000000,
               a.FarmActualID,
               NULL,
               b.LivestockDeadAnimalQuantity,
               a.LivestockDeadAnimalQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.LivestockDeadAnimalQuantity <> b.LivestockDeadAnimalQuantity)
              OR (
                     a.LivestockDeadAnimalQuantity IS NOT NULL
                     AND b.LivestockDeadAnimalQuantity IS NULL
                 )
              OR (
                     a.LivestockDeadAnimalQuantity IS NULL
                     AND b.LivestockDeadAnimalQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4573060000000,
               a.FarmActualID,
               NULL,
               b.AvianDeadAnimalQuantity,
               a.AvianDeadAnimalQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.AvianDeadAnimalQuantity <> b.AvianDeadAnimalQuantity)
              OR (
                     a.AvianDeadAnimalQuantity IS NOT NULL
                     AND b.AvianDeadAnimalQuantity IS NULL
                 )
              OR (
                     a.AvianDeadAnimalQuantity IS NULL
                     AND b.AvianDeadAnimalQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4573070000000,
               a.FarmActualID,
               NULL,
               b.BuidingsQuantity,
               a.BuidingsQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.BuidingsQuantity <> b.BuidingsQuantity)
              OR (
                     a.BuidingsQuantity IS NOT NULL
                     AND b.BuidingsQuantity IS NULL
                 )
              OR (
                     a.BuidingsQuantity IS NULL
                     AND b.BuidingsQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4573080000000,
               a.FarmActualID,
               NULL,
               b.BirdsPerBuildingQuantity,
               a.BirdsPerBuildingQuantity,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.BirdsPerBuildingQuantity <> b.BirdsPerBuildingQuantity)
              OR (
                     a.BirdsPerBuildingQuantity IS NOT NULL
                     AND b.BirdsPerBuildingQuantity IS NULL
                 )
              OR (
                     a.BirdsPerBuildingQuantity IS NULL
                     AND b.BirdsPerBuildingQuantity IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               4573090000000,
               a.FarmActualID,
               NULL,
               b.Note,
               a.Note,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.Note <> b.Note)
              OR (
                     a.Note IS NOT NULL
                     AND b.Note IS NULL
                 )
              OR (
                     a.Note IS NULL
                     AND b.Note IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               51389490000000,
               a.FarmActualID,
               NULL,
               b.AccessoryCode,
               a.AccessoryCode,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.AccessoryCode <> b.AccessoryCode)
              OR (
                     a.AccessoryCode IS NOT NULL
                     AND b.AccessoryCode IS NULL
                 )
              OR (
                     a.AccessoryCode IS NULL
                     AND b.AccessoryCode IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectTableFarmID,
               51389500000000,
               a.FarmActualID,
               NULL,
               b.ModificationDate,
               a.ModificationDate,
               @AuditUser,
               @EIDSSFarmID
        FROM @FarmAfterEdit AS a
            FULL JOIN @FarmBeforeEdit AS b
                ON a.FarmActualID = b.FarmActualID
        WHERE (a.ModificationDate <> b.ModificationDate)
              OR (
                     a.ModificationDate IS NOT NULL
                     AND b.ModificationDate IS NULL
                 )
              OR (
                     a.ModificationDate IS NULL
                     AND b.ModificationDate IS NOT NULL
                 );
        -- End data audit

        --------------------------------------------------------------------------------------------------
        -- Update superseded human records
        --------------------------------------------------------------------------------------------------
        DECLARE @idfHumanActualSuperseded BIGINT = (
                                                       SELECT idfHumanActual
                                                       FROM dbo.tlbFarmActual
                                                       WHERE idfFarmActual = @SupersededFarmMasterID
                                                   );

        INSERT INTO @HumanBeforeEdit
        (
            HumanID,
            HumanActualID,
            OccupationTypeID,
            NationalityTypeID,
            GenderTypeID,
            CurrentResidenceAddressID,
            EmployerAddressID,
            RegistrationAddressID,
            DateOfBirth,
            DateOfDeath,
            LastName,
            SecondName,
            FirstName,
            RegistrationPhone,
            EmployerName,
            HomePhone,
            WorkPhone,
            PersonIDType,
            PersonID,
            PermanentAddressAsCurrentIndicator,
            EnteredDate,
            ModificationDate
        )
        SELECT h.idfHuman,
               h.idfHumanActual,
               h.idfsOccupationType,
               h.idfsNationality,
               h.idfsHumanGender,
               h.idfCurrentResidenceAddress,
               h.idfEmployerAddress,
               h.idfRegistrationAddress,
               h.datDateofBirth,
               h.datDateOfDeath,
               h.strLastName,
               h.strSecondName,
               h.strFirstName,
               h.strRegistrationPhone,
               h.strEmployerName,
               h.strHomePhone,
               h.strWorkPhone,
               h.idfsPersonIDType,
               h.strPersonID,
               h.blnPermantentAddressAsCurrent,
               h.datEnteredDate,
               h.datModificationDate
        FROM dbo.tlbHuman h
            INNER JOIN dbo.tlbHumanActual ha
                ON ha.idfHumanActual = @FarmOwnerID
        WHERE h.idfHumanActual = @idfHumanActualSuperseded;

        UPDATE dbo.tlbHuman
        SET idfHumanActual = @FarmOwnerID,
            idfsOccupationType = ha.idfsOccupationType,
            idfsNationality = ha.idfsNationality,
            idfsHumanGender = ha.idfsHumanGender,
            datDateofBirth = ha.datDateofBirth,
            datDateOfDeath = ha.datDateOfDeath,
            strLastName = ha.strLastName,
            strSecondName = ha.strSecondName,
            strFirstName = ha.strFirstName,
            strRegistrationPhone = ha.strRegistrationPhone,
            strEmployerName = ha.strEmployerName,
            strHomePhone = ha.strHomePhone,
            strWorkPhone = ha.strWorkPhone,
            idfsPersonIDType = ha.idfsPersonIDType,
            strPersonID = ha.strPersonID,
            datModIFicationDate = ha.datModIFicationDate
        FROM dbo.tlbHuman h
            INNER JOIN dbo.tlbHumanActual ha
                ON ha.idfHumanActual = @FarmOwnerID
        WHERE h.idfHumanActual = @idfHumanActualSuperseded;

        INSERT INTO @HumanAfterEdit
        (
            HumanID,
            HumanActualID,
            OccupationTypeID,
            NationalityTypeID,
            GenderTypeID,
            CurrentResidenceAddressID,
            EmployerAddressID,
            RegistrationAddressID,
            DateOfBirth,
            DateOfDeath,
            LastName,
            SecondName,
            FirstName,
            RegistrationPhone,
            EmployerName,
            HomePhone,
            WorkPhone,
            PersonIDType,
            PersonID,
            PermanentAddressAsCurrentIndicator,
            EnteredDate,
            ModificationDate
        )
        SELECT h.idfHuman,
               h.idfHumanActual,
               h.idfsOccupationType,
               h.idfsNationality,
               h.idfsHumanGender,
               h.idfCurrentResidenceAddress,
               h.idfEmployerAddress,
               h.idfRegistrationAddress,
               h.datDateofBirth,
               h.datDateOfDeath,
               h.strLastName,
               h.strSecondName,
               h.strFirstName,
               h.strRegistrationPhone,
               h.strEmployerName,
               h.strHomePhone,
               h.strWorkPhone,
               h.idfsPersonIDType,
               h.strPersonID,
               h.blnPermantentAddressAsCurrent,
               h.datEnteredDate,
               h.datModificationDate
        FROM dbo.tlbHuman h
            INNER JOIN dbo.tlbHumanActual ha
                ON ha.idfHumanActual = @FarmOwnerID
        WHERE h.idfHumanActual = @idfHumanActualSuperseded;

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               4572310000000,
               a.HumanID,
               NULL,
               b.HumanActualID,
               a.HumanActualID,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.HumanActualID <> b.HumanActualID)
              OR (
                     a.HumanActualID IS NOT NULL
                     AND b.HumanActualID IS NULL
                 )
              OR (
                     a.HumanActualID IS NULL
                     AND b.HumanActualID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79410000000,
               a.HumanID,
               NULL,
               b.OccupationTypeID,
               a.OccupationTypeID,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.OccupationTypeID <> b.OccupationTypeID)
              OR (
                     a.OccupationTypeID IS NOT NULL
                     AND b.OccupationTypeID IS NULL
                 )
              OR (
                     a.OccupationTypeID IS NULL
                     AND b.OccupationTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79400000000,
               a.HumanID,
               NULL,
               b.NationalityTypeID,
               a.NationalityTypeID,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.NationalityTypeID <> b.NationalityTypeID)
              OR (
                     a.NationalityTypeID IS NOT NULL
                     AND b.NationalityTypeID IS NULL
                 )
              OR (
                     a.NationalityTypeID IS NULL
                     AND b.NationalityTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79390000000,
               a.HumanID,
               NULL,
               b.GenderTypeID,
               a.GenderTypeID,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.GenderTypeID <> b.GenderTypeID)
              OR (
                     a.GenderTypeID IS NOT NULL
                     AND b.GenderTypeID IS NULL
                 )
              OR (
                     a.GenderTypeID IS NULL
                     AND b.GenderTypeID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79350000000,
               a.HumanID,
               NULL,
               b.CurrentResidenceAddressID,
               a.CurrentResidenceAddressID,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.CurrentResidenceAddressID <> b.CurrentResidenceAddressID)
              OR (
                     a.CurrentResidenceAddressID IS NOT NULL
                     AND b.CurrentResidenceAddressID IS NULL
                 )
              OR (
                     a.CurrentResidenceAddressID IS NULL
                     AND b.CurrentResidenceAddressID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79360000000,
               a.HumanID,
               NULL,
               b.EmployerAddressID,
               a.EmployerAddressID,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.EmployerAddressID <> b.EmployerAddressID)
              OR (
                     a.EmployerAddressID IS NOT NULL
                     AND b.EmployerAddressID IS NULL
                 )
              OR (
                     a.EmployerAddressID IS NULL
                     AND b.EmployerAddressID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79380000000,
               a.HumanID,
               NULL,
               b.RegistrationAddressID,
               a.RegistrationAddressID,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.RegistrationAddressID <> b.RegistrationAddressID)
              OR (
                     a.RegistrationAddressID IS NOT NULL
                     AND b.RegistrationAddressID IS NULL
                 )
              OR (
                     a.RegistrationAddressID IS NULL
                     AND b.RegistrationAddressID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79330000000,
               a.HumanID,
               NULL,
               b.DateOfBirth,
               a.DateOfBirth,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.DateOfBirth <> b.DateOfBirth)
              OR (
                     a.DateOfBirth IS NOT NULL
                     AND b.DateOfBirth IS NULL
                 )
              OR (
                     a.DateOfBirth IS NULL
                     AND b.DateOfBirth IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79340000000,
               a.HumanID,
               NULL,
               b.DateOfDeath,
               a.DateOfDeath,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.DateOfDeath <> b.DateOfDeath)
              OR (
                     a.DateOfDeath IS NOT NULL
                     AND b.DateOfDeath IS NULL
                 )
              OR (
                     a.DateOfDeath IS NULL
                     AND b.DateOfDeath IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79450000000,
               a.HumanID,
               NULL,
               b.LastName,
               a.LastName,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.LastName <> b.LastName)
              OR (
                     a.LastName IS NOT NULL
                     AND b.LastName IS NULL
                 )
              OR (
                     a.LastName IS NULL
                     AND b.LastName IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79470000000,
               a.HumanID,
               NULL,
               b.SecondName,
               a.SecondName,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.SecondName <> b.SecondName)
              OR (
                     a.SecondName IS NOT NULL
                     AND b.SecondName IS NULL
                 )
              OR (
                     a.SecondName IS NULL
                     AND b.SecondName IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79430000000,
               a.HumanID,
               NULL,
               b.FirstName,
               a.FirstName,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.FirstName <> b.FirstName)
              OR (
                     a.FirstName IS NOT NULL
                     AND b.FirstName IS NULL
                 )
              OR (
                     a.FirstName IS NULL
                     AND b.FirstName IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79460000000,
               a.HumanID,
               NULL,
               b.RegistrationPhone,
               a.RegistrationPhone,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.RegistrationPhone <> b.RegistrationPhone)
              OR (
                     a.RegistrationPhone IS NOT NULL
                     AND b.RegistrationPhone IS NULL
                 )
              OR (
                     a.RegistrationPhone IS NULL
                     AND b.RegistrationPhone IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79420000000,
               a.HumanID,
               NULL,
               b.EmployerName,
               a.EmployerName,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.EmployerName <> b.EmployerName)
              OR (
                     a.EmployerName IS NOT NULL
                     AND b.EmployerName IS NULL
                 )
              OR (
                     a.EmployerName IS NULL
                     AND b.EmployerName IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79440000000,
               a.HumanID,
               NULL,
               b.HomePhone,
               a.HomePhone,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.HomePhone <> b.HomePhone)
              OR (
                     a.HomePhone IS NOT NULL
                     AND b.HomePhone IS NULL
                 )
              OR (
                     a.HomePhone IS NULL
                     AND b.HomePhone IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               79480000000,
               a.HumanID,
               NULL,
               b.WorkPhone,
               a.WorkPhone,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.WorkPhone <> b.WorkPhone)
              OR (
                     a.WorkPhone IS NOT NULL
                     AND b.WorkPhone IS NULL
                 )
              OR (
                     a.WorkPhone IS NULL
                     AND b.WorkPhone IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               12014460000000,
               a.HumanID,
               NULL,
               b.PersonIDType,
               a.PersonIDType,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.PersonIDType <> b.PersonIDType)
              OR (
                     a.PersonIDType IS NOT NULL
                     AND b.PersonIDType IS NULL
                 )
              OR (
                     a.PersonIDType IS NULL
                     AND b.PersonIDType IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               12014470000000,
               a.HumanID,
               NULL,
               b.PersonID,
               a.PersonID,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.PersonID <> b.PersonID)
              OR (
                     a.PersonID IS NOT NULL
                     AND b.PersonID IS NULL
                 )
              OR (
                     a.PersonID IS NULL
                     AND b.PersonID IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               12675400000000,
               a.HumanID,
               NULL,
               b.PermanentAddressAsCurrentIndicator,
               a.PermanentAddressAsCurrentIndicator,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.PermanentAddressAsCurrentIndicator <> b.PermanentAddressAsCurrentIndicator)
              OR (
                     a.PermanentAddressAsCurrentIndicator IS NOT NULL
                     AND b.PermanentAddressAsCurrentIndicator IS NULL
                 )
              OR (
                     a.PermanentAddressAsCurrentIndicator IS NULL
                     AND b.PermanentAddressAsCurrentIndicator IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               51389530000000,
               a.HumanID,
               NULL,
               b.EnteredDate,
               a.EnteredDate,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.EnteredDate <> b.EnteredDate)
              OR (
                     a.EnteredDate IS NOT NULL
                     AND b.EnteredDate IS NULL
                 )
              OR (
                     a.EnteredDate IS NULL
                     AND b.EnteredDate IS NOT NULL
                 );

        INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue,
            AuditCreateDTM,
            AuditCreateUser
        )
        SELECT @DataAuditEventID,
               @ObjectTableHumanID,
               51389540000000,
               a.HumanID,
               NULL,
               b.ModificationDate,
               a.ModificationDate,
               GETDATE(),
               @AuditUser
        FROM @HumanAfterEdit AS a
            FULL JOIN @HumanBeforeEdit AS b
                ON a.HumanID = b.HumanID
        WHERE (a.ModificationDate <> b.ModificationDate)
              OR (
                     a.ModificationDate IS NOT NULL
                     AND b.ModificationDate IS NULL
                 )
              OR (
                     a.ModificationDate IS NULL
                     AND b.ModificationDate IS NOT NULL
                 );
        -- End data audit

        ----------------------------------------------------------------------------------------------------
        ---- replace Superseded farm ID with surviving Farm ID
        ----------------------------------------------------------------------------------------------------
        --		DECLARE	@idfFarmAddressSurvivor	BIGINT
        --		Select top 1 @idfFarmAddressSurvivor = idfFarmAddress
        --		FROM	dbo.tlbFarm
        --		WHERE	idfFarmActual = @FarmMasterID and intRowStatus = 0

        --		IF @idfFarmAddressSurvivor IS NULL
        --		BEGIN
        --			UPDATE	dbo.tlbFarm
        --			SET		idfFarmActual = @FarmMasterID,
        --					strFarmCode = @EIDSSFarmID,
        --					strNationalName = @FarmNationalName
        --			WHERE	idfFarmActual = @SupersededFarmMasterID
        --		END
        --		ELSE
        --		BEGIN
        --			UPDATE	dbo.tlbFarm
        --			SET		idfFarmActual = @FarmMasterID,
        --					strFarmCode = @EIDSSFarmID,
        --					strNationalName = @FarmNationalName,
        --					idfFarmAddress = @idfFarmAddressSurvivor
        --			WHERE	idfFarmActual = @SupersededFarmMasterID
        --		END;

        ----------------------------------------------------------------------------------------------------
        ---- soft delete the old Farm Master relate records
        ----------------------------------------------------------------------------------------------------
        --		EXEC dbo.USP_VET_FARM_MASTER_DEL 
        --			@FarmMasterID = @SupersededFarmMasterID,
        --			@DeduplicationIndicator = NULL -- bit

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @FarmMasterID SessionKey,
               @EIDSSFarmID SessionID;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEPARTMENT_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_DEPARTMENT_SET
--
-- Description: Adds or updates a department in an organization.
-- Author: Ricky Moss
-- 
-- Change Log:
-- Name 				Date       Description
-- -------------------- ---------- ---------------------------------------------------------------
-- Ricky Moss			12/27/2019 Initial Release
-- Ricky Moss			01/03/2020 Refactored to check Department Name existence
-- Ann Xiong		    11/20/2020 Modified to insert NationalName in trtStringNameTranslation
-- Mark Wilson			08/10/2021 Updated to use E7 artifacts
-- Stephen Long         09/01/2021 Added order and row status parameters and added organization 
--                                 ID to the duplicate department check.  Duplicate check will 
--                                 be performed on both insert and update.
-- Ann Xiong			02/16/2023 Implemented Data Audit
-- Ann Xiong			03/28/2023 Called USSP_GBL_BASE_REFERENCE_SET instead of USP_GBL_BaseReference_SET to use its data auditing
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_ADMIN_Department_Set]
		@LanguageID = N'en-US',
		@DepartmentID = NULL,
		@OrganizationID = 48120000000,
		@DefaultName = N'DEP199',
		@NationalName = N'DEP1100',
		@CountryID = NULL,
		@UserName = N'rykermase',
		@RowAction = NULL - values are R for read, I for insert, U for update and D for delete.

SELECT	'Return Value' = @return_value

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEPARTMENT_SET] (
	@LanguageID NVARCHAR(50)
	,@DepartmentID BIGINT = NULL
	,@DefaultName NVARCHAR(200)
	,@NationalName NVARCHAR(200)
	,@OrganizationID BIGINT
	,@DepartmentNameTypeID BIGINT
	,@Order INT = 0
	,@UserName VARCHAR(100) = NULL
	,@RowStatus INT = 0
	)
AS
BEGIN
	DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS';
	DECLARE @ReturnCode BIGINT = 0;

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017016;                         -- Department
	declare @idfObject bigint = @DepartmentID;
	declare @idfObjectTable_tlbDepartment bigint = 50815890000000;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfObjectTable_trtBaseReference bigint = 75820000000;
	declare @idfObjectTable_trtStringNameTranslation bigint = 75990000000;

    DECLARE @tlbDepartment_BeforeEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );
    DECLARE @tlbDepartment_AfterEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@UserName) userInfo

	--Data Audit--

	BEGIN TRY
		IF @RowStatus = 1 -- Soft Delete
		BEGIN
			IF @DepartmentNameTypeID IS NULL
			BEGIN
				SELECT @DepartmentNameTypeID = idfsDepartmentName
				FROM dbo.tlbDepartment
				WHERE idfDepartment = @DepartmentID;
			END

			--Data Audit

			-- tauDataAuditEvent Event Type - Delete
			set @idfsDataAuditEventType =10016002;

			-- insert record into tauDataAuditEvent
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbDepartment, @idfDataAuditEvent OUTPUT

			--Data Audit--

			UPDATE dbo.tlbDepartment
			SET intRowStatus = @RowStatus
				,AuditUpdateDTM = GETDATE()
				,AuditUpdateUser = @UserName
			WHERE idfDepartment = @DepartmentID;

            -- Data audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_tlbDepartment, @idfObject
            -- End data audit

			UPDATE dbo.trtBaseReference
			SET intRowStatus = @RowStatus
			WHERE idfsBaseReference = @DepartmentNameTypeID
				AND intRowStatus = 0;

            -- Data audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_trtBaseReference, @DepartmentNameTypeID
            -- End data audit

			UPDATE dbo.trtStringNameTranslation
			SET intRowStatus = @RowStatus
			WHERE idfsBaseReference = @DepartmentNameTypeID;

            -- Data audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @DepartmentNameTypeID
            -- End data audit
		END
		ELSE
		BEGIN
			IF (
					SELECT COUNT(b.idfsReference)
					FROM dbo.FN_GBL_ReferenceRepair_GET(@LanguageID, 19000164) b
					INNER JOIN dbo.tlbDepartment d ON d.idfsDepartmentName = b.idfsReference
					WHERE b.strDefault = @DefaultName
						AND d.intRowStatus = 0
						AND d.idfOrganization = @OrganizationID
						AND ((d.idfDepartment <> @DepartmentID AND @DepartmentID IS NOT NULL AND @DepartmentID > 0) --Update
						OR (@DepartmentID IS NULL OR @DepartmentID < 0)) --Insert
					) > 0
			BEGIN
				SELECT @ReturnMessage = 'DOES EXIST';
			END

			IF @ReturnMessage <> 'DOES EXIST'
			BEGIN
				IF @DepartmentID IS NULL
					OR @DepartmentID < 0
				BEGIN
					IF (
							UPPER(@LanguageID) = 'EN-US'
							AND ISNULL(@DefaultName, N'') = N''
							)
					BEGIN
						SET @DefaultName = @NationalName;
					END

					--Data Audit--
					-- tauDataAuditEvent Event Type - Create 
					set @idfsDataAuditEventType =10016001;
					-- insert record into tauDataAuditEvent - 
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@DepartmentID, @idfObjectTable_tlbDepartment, @idfDataAuditEvent OUTPUT
					--Data Audit--

                    EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @DepartmentNameTypeID OUTPUT,
                                                            19000164,
                                                            @LanguageID,
                                                            @DefaultName,
                                                            @NationalName,
                                                            0,
                                                            @Order,
                                                            0,
                                                            @UserName,
                                                            @idfDataAuditEvent,
                                                            NULL;

					EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbDepartment'
						,@DepartmentID OUTPUT;

					INSERT INTO dbo.tlbDepartment (
						idfDepartment
						,idfsDepartmentName
						,idfOrganization
						,strReservedAttribute
						,intRowStatus
						,rowguid
						,SourceSystemNameID
						,SourceSystemKeyValue
						,AuditCreateUser
						,AuditCreateDTM
						,AuditUpdateUser
						,AuditUpdateDTM
						)
					VALUES (
						@DepartmentID
						,@DepartmentNameTypeID
						,@OrganizationID
						,dbo.FN_GBL_DATACHANGE_INFO(@UserName)
						,0
						,NEWID()
						,10519001
						,N'[{"idfDepartment":' + CAST(@DepartmentID AS NVARCHAR(300)) + '}]'
						,@UserName
						,GETDATE()
						,@UserName
						,GETDATE()
						);

					--Data Audit--
					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbDepartment, @DepartmentID)
					--Data Audit--

				END
				ELSE
				BEGIN
					SELECT @DepartmentNameTypeID = (
							SELECT idfsDepartmentName
							FROM dbo.tlbDepartment
							WHERE idfDepartment = @DepartmentID
							);

                    -- Data audit
			        --  tauDataAuditEvent  Event Type- Edit 
			        set @idfsDataAuditEventType =10016003;
			        -- insert record into tauDataAuditEvent - 
			        EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbDepartment, @idfDataAuditEvent OUTPUT
                    -- Data audit

                    EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @DepartmentNameTypeID OUTPUT,
                                                            19000164,
                                                            @LanguageID,
                                                            @DefaultName,
                                                            @NationalName,
                                                            0,
                                                            @Order,
                                                            0,
                                                            @UserName,
                                                            @idfDataAuditEvent,
                                                            NULL;

                    -- Data audit
                    INSERT INTO @tlbDepartment_BeforeEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;
                    -- End data audit

					UPDATE dbo.tlbDepartment
					SET idfsDepartmentName = @DepartmentNameTypeID
						,strReservedAttribute = dbo.FN_GBL_DATACHANGE_INFO(@UserName)
						,AuditUpdateUser = @UserName
						,AuditUpdateDTM = GETDATE()
					WHERE idfDepartment = @DepartmentID;

                    -- Data audit
                    INSERT INTO @tlbDepartment_AfterEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue
                    )
                    SELECT @idfDataAuditEvent,
                           @idfObjectTable_tlbDepartment,
                           50815910000000,
                           a.DepartmentID,
                           NULL,
                           b.DepartmentNameBaseReferenceID,
                           a.DepartmentNameBaseReferenceID
                    FROM @tlbDepartment_AfterEdit AS a
                        FULL JOIN @tlbDepartment_BeforeEdit AS b
                            ON a.DepartmentID = b.DepartmentID
                    WHERE (a.DepartmentNameBaseReferenceID <> b.DepartmentNameBaseReferenceID)
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NOT NULL
                                 AND b.DepartmentNameBaseReferenceID IS NULL
                             )
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NULL
                                 AND b.DepartmentNameBaseReferenceID IS NOT NULL
                             );
                    -- End data audit
				END
			END
		END;

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage
			,@DepartmentID KeyId
			,'DepartmentID' KeyName
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETList]...';


GO




-- ================================================================================================
-- Name: USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETList		
-- 
-- Description: Returns a list of Organizations, site IDs, User Groups for an Employee.
--
-- Revision History:
--		
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ann Xiong     	08/24/2020 Initial release.
-- Ann Xiong     	08/31/2020 Changed to consider default Organization
-- Ann Xiong     	09/08/2020 Rearranged scripts to return UserGroupID and UserGroup
-- Ann Xiong     	09/10/2020 Modified to return multiple Organizations
-- Ann Xiong     	09/14/2020 Added idfUserID to the select list.
-- Ann Xiong     	10/15/2020 Modified to return correct Organization from tlbPerson and return '' for SiteID and SiteName when s.idfsSite = 1.
-- Ann Xiong     	10/20/2020 Modified to return only active records (intRowStatus = 0) if there is any active records otherwise return Deactivated records (intRowStatus = 1).
-- Ann Xiong     	11/06/2020 Modified to only return record if intRowStatus = 0 for tlbEmployeeGroupMember
-- Stephen Long     12/11/2020 Added site group ID and site type ID to the query.
-- Stephen Long     01/08/2021 Add string aggregate function on site to site group to get a list 
--                             of site groups in a concatenated list.  Removed join on main query 
--                             to eliminate duplicates.
-- Mani				01/22/2021  Added OrganizationFullName
-- Minal			08/09/2021  Organization is picked from EmployeeToInstitution in place of Person
-- Ann Xiong     	03/23/2023 Modified to return translated User Group name
--
-- Testing Code:
-- EXEC USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETList -471, 'en'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETList] (
	@idfPerson BIGINT
	,@LangID NVARCHAR(50)
	)
AS
BEGIN
	DECLARE @returnMsg VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode BIGINT = 0;

	BEGIN TRY
		DECLARE @aspNetUserId NVARCHAR(128);

		SELECT @aspNetUserId = ei.aspNetUserId
		FROM dbo.tstUserTable ut
		LEFT JOIN dbo.EmployeeToInstitution ei ON ut.idfUserID = ei.idfUserID
		WHERE ut.idfPerson = @idfPerson

		SELECT ROW_NUMBER() OVER (
				ORDER BY ei.IsDefault DESC
					,ut.idfUserID
				) AS Row
			,s.idfsSite
			,CASE 
				WHEN s.idfsSite = 1
					THEN ''
				ELSE s.strSiteID
				END AS SiteID
			,CASE 
				WHEN s.idfsSite = 1
					THEN ''
				ELSE s.strSiteName
				END AS SiteName
			,ei.idfInstitution AS OrganizationID
			,o.name AS Organization
			,o.FullName AS OrganizationFullName
			,STRING_AGG(g.idfEmployeeGroup, ', ') WITHIN
		GROUP (
				ORDER BY g.idfEmployeeGroup DESC
				) AS UserGroupID
			,STRING_AGG(egbr.[name], ', ') AS UserGroup
			,e.idfEmployee
			,ISNULL(ei.intRowStatus, 1) AS STATUS
			,ei.Active 
			,ei.IsDefault
			,ut.idfUserID
			,s.idfsSiteType AS SiteTypeID
			,NULL AS SiteGroupID --TODO: temporary fix until site filtration logic is adjusted to use new site group list below.  Will remove this field once complete.  SHL
			,(
				SELECT STRING_AGG(ssg.idfSiteGroup, ',') WITHIN
				GROUP (
						ORDER BY ssg.idfSiteGroup ASC
						) AS SiteGroupID
				FROM dbo.tflSiteToSiteGroup AS ssg 
				WHERE ssg.idfsSite = s.idfsSite
				) AS SiteGroupList
		FROM dbo.tstUserTable ut
		LEFT JOIN dbo.tlbEmployee e ON e.idfEmployee = ut.idfPerson
		LEFT JOIN dbo.tstSite s ON s.idfsSite = e.idfsSite
			AND s.intRowStatus = 0
		LEFT JOIN tlbPerson p ON e.idfEmployee = p.idfPerson
		LEFT JOIN dbo.EmployeeToInstitution ei ON ut.idfUserID = ei.idfUserID
		LEFT JOIN dbo.FN_GBL_Institution(@LangID) o ON ei.idfInstitution = o.idfOffice
--		INNER JOIN dbo.FN_GBL_InstitutionRepair(@LangID) o ON p.idfInstitution = o.idfOffice
		LEFT JOIN dbo.tlbEmployeeGroupMember m ON m.idfEmployee = ut.idfPerson
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbEmployeeGroup g ON m.idfEmployeeGroup = g.idfEmployeeGroup
			AND g.idfEmployeeGroup <> - 1
			AND g.intRowStatus = 0
		LEFT JOIN FN_GBL_ReferenceRepair(@LangID, 19000022) egbr
					ON g.idfsEmployeeGroupName = egbr.idfsReference
		WHERE ei.aspNetUserId = @aspNetUserId
			AND ut.intRowStatus = 0
			AND e.intRowStatus = 0
		GROUP BY s.idfsSite
			,s.strSiteID
			,s.strSiteName
			,ei.idfInstitution
			,o.name
			,e.idfEmployee
			,ei.intRowStatus
			,ei.Active
			,ei.IsDefault
			,ut.idfUserID
			,s.idfsSiteType
			,o.FullName

		--SELECT @returnCode AS ReturnCode
		--	,@returnMsg AS ReturnMessage
	END TRY

	BEGIN CATCH
	--	BEGIN
	--		SET @returnCode = ERROR_NUMBER();
	--		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();

	--		SELECT @returnCode AS ReturnCode
	--			,@returnMsg AS ReturnMessage
	--	END
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EVENT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EVENT_GETList		
--
-- Description: Gets a list of event notifications for a user as defined in SAUC55 and SAUC56.
--
-- Author: Stephen Long
-- 
-- Revision History:
-- Name                        Date       Change Detail
-- --------------------------- ---------- --------------------------------------------------------
-- Stephen Long                07/06/2022 Initial release
-- Stephen Long                07/28/2022 Added sort fields.
-- Stephen Long                08/18/2022 Fixed reference type for the event type.
-- Stephen Long                08/29/2022 Added trtEventType join and correct reference type name.
-- Stephen Long                03/20/2023 Added parenthesis to group processed indicator.
-- Stephen Long                03/22/2023 Added nolock
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EVENT_GETList]
(
    @LanguageId NVARCHAR(50),
    @UserId BIGINT,
    @DaysFromReadDate INT,
    @PageNo INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(100) = 'EventDate',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    DECLARE @FirstRec INT = (@PageNo - 1) * @PageSize,
            @LastRec INT = (@PageNo * @PageSize + 1);

    BEGIN TRY
        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EventTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       eventType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EventTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       eventType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EventDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       e.datEventDatatime
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EventDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       e.datEventDatatime
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSSiteID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       s.strSiteID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSSiteID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       s.strSiteID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC
                                     ) AS ROWNUM,
                   e.idfEventID AS EventId,
                   e.idfsEventTypeID AS EventTypeId,
                   CASE
                       WHEN e.strInformationString IS NULL THEN
                           eventType.name
                       ELSE
                           e.strInformationString
                   END AS EventTypeName,
                   notificationType.name AS NotificationTypeName,
                   e.idfObjectID AS ObjectId,
                   disease.name AS DiseaseName,
                   e.idfsSite AS SiteId,
                   s.strSiteID AS EIDSSSiteID,
                   lh.AdminLevel2Name AS AdministrativeLevel2Name,
                   lh.AdminLevel3Name AS AdministrativeLevel3Name,
                   e.intProcessed AS ProcessedIndicator,
                   e.datEventDatatime AS EventDate,
                   COUNT(*) OVER () AS TotalRowCount
            FROM dbo.tstEvent e WITH (NOLOCK)
                INNER JOIN dbo.trtEventType et
                    ON et.idfsEventTypeID = e.idfsEventTypeID
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000155) notificationType
                    ON notificationType.idfsReference = et.idfsEventSubscription
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000025) eventType
                    ON eventType.idfsReference = e.idfsEventTypeID
                LEFT JOIN dbo.tstSite s
                    ON s.idfsSite = e.idfsSite
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = e.idfsLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageId) lh
                    ON lh.idfsLocation = g.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = e.idfsDiagnosis
            WHERE e.idfUserID = @UserId
                  AND (
                          (e.intProcessed = 0)
                          OR (
                                 e.intProcessed = 1
                                 AND GETDATE() <= DATEADD(DAY, @DaysFromReadDate, e.datEventDatatime)
                             )
                      )
           )
        SELECT EventId,
               EventTypeId,
               EventTypeName,
               ObjectId,
               DiseaseName,
               SiteId,
               EIDSSSiteID,
               AdministrativeLevel2Name,
               AdministrativeLevel3Name,
               ProcessedIndicator,
               EventDate,
               TotalRowCount,
               TotalPages = (TotalRowCount / @PageSize) + IIF(TotalRowCount % @PageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @FirstRec
              AND RowNum < @LastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EVENT_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EVENT_SET
--
-- Description:	Inserts or updates the event table for SAUC55 and SAUC56.
-- 
-- Field Notes:
--
-- Object - ID of record such as human disease report
-- LoginSite - ID of organization login site where initial event that raise notification was 
-- created.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/06/2022 Initial release.
-- Stephen Long     07/11/2022 Added third party site alert events.
-- Stephen Long     07/12/2022 Added vector surveillance session third party site alerts.
-- Stephen Long     09/15/2022 Added note parameter.  Temporarily removed!
-- Stephen Long     10/05/2022 Fix for event type ID when third party site event is already passed 
--                             in, and where from site ID to login site ID on event users.
-- Stephen Long     03/13/2023 Changed site ID where criteria from the user table to the employee 
--                             table as user table's site ID was no longer getting updated.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EVENT_SET]
(
    @EventId BIGINT,
    @EventTypeId BIGINT,
    @UserId BIGINT,
    @ObjectId BIGINT = NULL,
    @DiseaseId BIGINT = NULL,
    @SiteId BIGINT = NULL,
    @InformationString NVARCHAR(MAX) = NULL,
    --@Note NVARCHAR(MAX) = NULL, 
    @LoginSiteId BIGINT = NULL,
    @LocationId BIGINT = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @NeighboringSiteId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventSiteId BIGINT = NULL;
        DECLARE @EventUsers TABLE
        (
            UserId BIGINT NOT NULL,
            SiteId BIGINT NOT NULL
        );
        DECLARE @NeighboringSites TABLE
        (
            AccessRuleId BIGINT,
            SiteId BIGINT
        );
        DECLARE @SiteAccessRuleGrantee TABLE (AccessRuleId BIGINT);

        -- Get all users of the target site that have subscribed to the notification type.
        INSERT INTO @EventUsers
        SELECT u.idfUserID,
               e.idfsSite
        FROM dbo.tstUserTable u
            INNER JOIN dbo.EventSubscription es
                ON es.idfUserID = u.idfUserID
                   AND es.EventNameID = @EventTypeId
            INNER JOIN dbo.tlbEmployee e 
                   ON e.idfEmployee = u.idfPerson
        WHERE e.idfsSite = @LoginSiteId
              AND u.intRowStatus = 0
              AND es.ReceiveAlertFlag = 1;

        -- Get all users of the target site's neighboring sites based on filtration rules.
        -- Logged in user site ID is a grantor, then get list of grantee sites.
        INSERT INTO @NeighboringSites
        SELECT ar.AccessRuleID,
               ara.ActorSiteID
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = ar.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ar.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1
              AND ar.GrantingActorSiteID = @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
              AND ara.ActorSiteID <> @LoginSiteId
        GROUP BY ara.ActorSiteID,
                 ar.AccessRuleID;

        -- Logged in user site ID access rules as a grantee.
        INSERT INTO @SiteAccessRuleGrantee
        SELECT ara.AccessRuleID
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE ara.ActorSiteID = @LoginSiteId
              AND ara.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1;

        -- Select all grantee sites that the site is also a grantee of.
        INSERT INTO @NeighboringSites
        SELECT sg.AccessRuleID,
               ara.ActorSiteID
        FROM @SiteAccessRuleGrantee sg
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = sg.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ara.ActorSiteID <> @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
        GROUP BY ara.ActorSiteID,
                 sg.AccessRuleID;

        WHILE EXISTS (SELECT * FROM @NeighboringSites)
        BEGIN
            SELECT TOP 1
                @NeighboringSiteId = SiteId
            FROM @NeighboringSites;

            -- Get all users of the neighboring site.
            INSERT INTO @EventUsers
            SELECT u.idfUserID,
                   e.idfsSite
            FROM dbo.tstUserTable u
                INNER JOIN dbo.EventSubscription es
                    ON es.idfUserID = u.idfUserID
                       AND es.EventNameID = @EventTypeId
                INNER JOIN dbo.tlbEmployee e 
                   ON e.idfEmployee = u.idfPerson
            WHERE e.idfsSite = @NeighboringSiteId
                  AND u.intRowStatus = 0
                  AND es.ReceiveAlertFlag = 1;

            DELETE FROM @NeighboringSites
            WHERE SiteID = @NeighboringSiteId;
        END

        WHILE EXISTS (SELECT * FROM @EventUsers)
        BEGIN
            SELECT TOP 1
                @EventUserId = UserId,
                @EventSiteId = SiteId
            FROM @EventUsers;

            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstEvent', @EventId OUTPUT;

            -- Change to the third party site alert/event type id.
            IF @EventSiteId <> @SiteId
            BEGIN
                SET @EventTypeId = CASE WHEN @EventTypeId = 10025503 THEN
                    10025504
                WHEN @EventTypeId = 10025501 THEN
                    10025502
                WHEN @EventTypeId = 10025505 THEN
                    10025506
                WHEN @EventTypeId = 10025507 THEN
                    10025508
                WHEN @EventTypeId = 10025509 THEN
                    10025512
                WHEN @EventTypeId = 10025510 THEN
                    10025511
                WHEN @EventTypeId = 10025037 THEN
                    10025038
                WHEN @EventTypeId = 10025041 THEN
                    10025042
                WHEN @EventTypeId = 10025043 THEN
                    10025044
                WHEN @EventTypeId = 10025045 THEN
                    10025046
                WHEN @EventTypeId = 10025047 THEN
                    10025048
                WHEN @EventTypeId = 10025077 THEN
                    10025078
                WHEN @EventTypeId = 10025079 THEN
                    10025080
                WHEN @EventTypeId = 10025081 THEN
                    10025082
                WHEN @EventTypeId = 10025099 THEN
                    10025100
                WHEN @EventTypeId = 10025097 THEN
                    10025098
                WHEN @EventTypeId = 10025129 THEN
                    10025130
                WHEN @EventTypeId = 10025101 THEN
                    10025102
                WHEN @EventTypeId = 10025103 THEN
                    10025104
                WHEN @EventTypeId = 10025105 THEN
                    10025106
                WHEN @EventTypeId = 10025107 THEN
                    10025108
                WHEN @EventTypeId = 10025085 THEN
                    10025086
                WHEN @EventTypeId = 10025087 THEN
                    10025088
                WHEN @EventTypeId = 10025089 THEN
                    10025090
                WHEN @EventTypeId = 10025091 THEN
                    10025092
                WHEN @EventTypeId = 10025093 THEN
                    10025094
                WHEN @EventTypeId = 10025095 THEN
                    10025096
                WHEN @EventTypeId = 10025067 THEN
                    10025068
                WHEN @EventTypeId = 10025071 THEN
                    10025072
                WHEN @EventTypeId = 10025073 THEN
                    10025074
                WHEN @EventTypeId = 10025075 THEN
                    10025076
                WHEN @EventTypeId = 10025513 THEN
                    10025514
                WHEN @EventTypeId = 10025517 THEN
                    10025518
                WHEN @EventTypeId = 10025519 THEN
                    10025520
                WHEN @EventTypeId = 10025525 THEN
                    10025526
                WHEN @EventTypeId = 10025049 THEN
                    10025050
                WHEN @EventTypeId = 10025051 THEN
                    10025052
                WHEN @EventTypeId = 10025053 THEN
                    10025054
                WHEN @EventTypeId = 10025055 THEN
                    10025056
                WHEN @EventTypeId = 10025057 THEN
                    10025058
                WHEN @EventTypeId = 10025059 THEN
                    10025060
                WHEN @EventTypeId = 10025061 THEN
                    10025062
                WHEN @EventTypeId = 10025065 THEN
                    10025066
                WHEN @EventTypeId = 10025069 THEN
                    10025070
                WHEN @EventTypeId = 10025527 THEN
                    10025528
                WHEN @EventTypeId = 10025529 THEN
                    10025530
                WHEN @EventTypeId = 10025537 THEN
                    10025538
                WHEN @EventTypeId = 10025539 THEN
                    10025540
                WHEN @EventTypeId = 10025563 THEN
                    10025564
                ELSE
                    @EventTypeId
                END
            END

            INSERT INTO dbo.tstEvent
            (
                idfEventID,
                idfsEventTypeID,
                idfObjectID,
                strInformationString,
                --strNote, 
                datEventDatatime,
                idfUserID,
                intProcessed,
                idfsSite,
                idfsDiagnosis,
                idfsLoginSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser,
                idfsLocation
            )
            VALUES
            (@EventId,
             @EventTypeId,
             @ObjectId,
             @InformationString,
             --@Note, 
             GETDATE(),
             @EventUserId,
             0  ,
             @EventSiteId,
             @DiseaseId,
             @LoginSiteId,
             10519001,
             '[{"idfEventID":' + CAST(@EventId AS NVARCHAR(300)) + '}]',
             GETDATE(),
             @AuditUserName,
             @LocationId
            );

            DELETE FROM @EventUsers
            WHERE UserId = @EventUserId
                  AND SiteId = @EventSiteId;
        END;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH;

    SELECT @ReturnCode ReturnCode,
           @ReturnMessage ReturnMessage;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET
--
-- Description:	Creates/updates a sample type/derivative type matrix.
--
-- Author: Unknown
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/13/2022 Added site alert logic and documentation header.
-- Leo Tracchia		02/22/2023 Added new logic for data auditing
-- Stephen Long     03/13/2023 Fix for object type ID and other issues.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET]
(
    @idfDerivativeForSampleType BIGINT = NULL,
    @idfsSampleType BIGINT,
    @idfsDerivativeType BIGINT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @ReturnCode BIGINT = 0,
        @EventId BIGINT = -1,
        @EventSiteId BIGINT = @SiteId,
        @EventUserId BIGINT = @UserId,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = @LocationId,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = @SiteId,
        @idfUserId BIGINT = NULL,
        @idfSiteId BIGINT = NULL,
        @idfsDataAuditEventType BIGINT = NULL,
        @idfsObjectType BIGINT = 10017068,
        @idfObject BIGINT = @idfDerivativeForSampleType,
        @idfObjectTable_trtDerivativeForSampleType BIGINT = 740850000000,
        @idfDataAuditEvent BIGINT = NULL;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);

--Data audit 
DECLARE @trtDerivativeForSampleType_BeforeEdit TABLE
(
    idfDerivativeForSampleType BIGINT,
    idfsSampleType BIGINT,
    idfsDerivativeType BIGINT,
    intRowStatus INT
);
DECLARE @trtDerivativeForSampleType_AfterEdit TABLE
(
    idfDerivativeForSampleType BIGINT,
    idfsSampleType BIGINT,
    idfsDerivativeType BIGINT,
    intRowStatus INT
);

-- Get and Set user and site identifiers.
SELECT @idfUserId = userInfo.UserId,
       @idfSiteId = UserInfo.SiteId
FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
-- End data audit
BEGIN
    BEGIN TRY
        IF ( -- DUPLICATE CHECK
               EXISTS
        (
            SELECT idfDerivativeForSampleType
            FROM dbo.trtDerivativeForSampleType
            WHERE idfsDerivativeType = @idfsDerivativeType
                  AND idfsSampleType = @idfsSampleType
                  AND intRowStatus = 0
        )
               AND @idfDerivativeForSampleType IS NULL
           )
           OR (
                  EXISTS
        (
            SELECT idfDerivativeForSampleType
            FROM dbo.trtDerivativeForSampleType
            WHERE idfsDerivativeType = @idfsDerivativeType
                  AND idfsSampleType = @idfsSampleType
                  AND idfDerivativeForSampleType <> @idfDerivativeForSampleType
                  AND intRowStatus = 0
        )
                  AND @idfDerivativeForSampleType IS NOT NULL
              )
        BEGIN
            SELECT @ReturnCode = 1;
            SELECT @ReturnMessage = 'DOES EXIST';
            SELECT @idfDerivativeForSampleType =
            (
                SELECT idfDerivativeForSampleType
                FROM dbo.trtDerivativeForSampleType
                WHERE idfsDerivativeType = @idfsDerivativeType
                      AND idfsSampleType = @idfsSampleType
                      AND intRowStatus = 0
            );
        END
        ELSE IF ( -- Update an existing record.
                    EXISTS
             (
                 SELECT idfDerivativeForSampleType
                 FROM dbo.trtDerivativeForSampleType
                 WHERE idfsDerivativeType = @idfsDerivativeType
                       AND idfsSampleType = @idfsSampleType
                       AND intRowStatus = 1
             )
                    AND @idfDerivativeForSampleType IS NULL
                )
        BEGIN
            UPDATE dbo.trtDerivativeForSampleType
            SET intRowStatus = 0,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsDerivativeType = @idfsDerivativeType
                  AND idfsSampleType = @idfsSampleType
                  AND intRowStatus = 1;

            SELECT @idfDerivativeForSampleType =
            (
                SELECT idfDerivativeForSampleType
                FROM dbo.trtDerivativeForSampleType
                WHERE idfsDerivativeType = @idfsDerivativeType
                      AND idfsSampleType = @idfsSampleType
                      AND intRowStatus = 1
            );
        END
        ELSE IF ( -- UPDATE
                    EXISTS
             (
                 SELECT idfDerivativeForSampleType
                 FROM dbo.trtDerivativeForSampleType
                 WHERE idfsDerivativeType = @idfsDerivativeType
                       AND idfsSampleType = @idfsSampleType
                       AND idfDerivativeForSampleType = @idfDerivativeForSampleType
                       AND intRowStatus = 0
             )
                    AND @idfDerivativeForSampleType IS NOT NULL
                )
        BEGIN

            -- Data audit
            SET @idfsDataAuditEventType = 10016003; -- Edit event type

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @idfUserId,
                                                      @idfSiteId,
                                                      @idfsDataAuditEventType,
                                                      @idfsObjectType,
                                                      @idfDerivativeForSampleType,
                                                      @idfObjectTable_trtDerivativeForSampleType,
                                                      NULL,
                                                      @idfDataAuditEvent OUTPUT;

            INSERT INTO @trtDerivativeForSampleType_BeforeEdit
            (
                idfDerivativeForSampleType,
                idfsSampleType,
                idfsDerivativeType,
                intRowStatus
            )
            SELECT idfDerivativeForSampleType,
                   idfsSampleType,
                   idfsDerivativeType,
                   intRowStatus
            FROM dbo.trtDerivativeForSampleType
            WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType;
            -- End data audit

            UPDATE dbo.trtDerivativeForSampleType
            SET idfsDerivativeType = @idfsDerivativeType,
                idfsSampleType = @idfsSampleType,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType
                  AND intRowStatus = 0;

            -- Data audit
            INSERT INTO @trtDerivativeForSampleType_AfterEdit
            (
                idfDerivativeForSampleType,
                idfsSampleType,
                idfsDerivativeType,
                intRowStatus
            )
            SELECT idfDerivativeForSampleType,
                   idfsSampleType,
                   idfsDerivativeType,
                   intRowStatus
            FROM trtDerivativeForSampleType
            WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_trtDerivativeForSampleType,
                   740870000000,
                   a.idfDerivativeForSampleType,
                   NULL,
                   a.idfsSampleType,
                   b.idfsSampleType
            FROM @trtDerivativeForSampleType_BeforeEdit a
                INNER JOIN @trtDerivativeForSampleType_AfterEdit b
                    ON a.idfDerivativeForSampleType = b.idfDerivativeForSampleType
            WHERE (a.idfsSampleType <> b.idfsSampleType)
                  OR (
                         a.idfsSampleType IS NOT NULL
                         AND b.idfsSampleType IS NULL
                     )
                  OR (
                         a.idfsSampleType IS NULL
                         AND b.idfsSampleType IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_trtDerivativeForSampleType,
                   740880000000,
                   a.idfDerivativeForSampleType,
                   NULL,
                   a.idfsDerivativeType,
                   b.idfsDerivativeType
            FROM @trtDerivativeForSampleType_BeforeEdit a
                INNER JOIN @trtDerivativeForSampleType_AfterEdit b
                    ON a.idfDerivativeForSampleType = b.idfDerivativeForSampleType
            WHERE (a.idfsDerivativeType <> b.idfsDerivativeType)
                  OR (
                         a.idfsDerivativeType IS NOT NULL
                         AND b.idfsDerivativeType IS NULL
                     )
                  OR (
                         a.idfsDerivativeType IS NULL
                         AND b.idfsDerivativeType IS NOT NULL
                     );
        END
        ELSE
        BEGIN -- Add a new record.
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'trtDerivativeForSampleType',
                                              @idfDerivativeForSampleType OUTPUT;

            -- Data audit
            SET @idfsDataAuditEventType = 10016001; -- Create event type

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @idfUserId,
                                                      @idfSiteId,
                                                      @idfsDataAuditEventType,
                                                      @idfsObjectType,
                                                      @idfDerivativeForSampleType,
                                                      @idfObjectTable_trtDerivativeForSampleType,
                                                      NULL,
                                                      @idfDataAuditEvent OUTPUT;
            -- End data audit

            INSERT INTO dbo.trtDerivativeForSampleType
            (
                idfDerivativeForSampleType,
                idfsSampleType,
                idfsDerivativeType,
                intRowStatus,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@idfDerivativeForSampleType, @idfsSampleType, @idfsDerivativeType, 0, GETDATE(), @AuditUserName);

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject
            )
            VALUES
            (@idfDataAuditEvent, @idfObjectTable_trtDerivativeForSampleType, @idfDerivativeForSampleType);

            -- End data audit

            INSERT INTO dbo.trtDerivativeForSampleTypeToCP
            (
                idfDerivativeForSampleType,
                idfCustomizationPackage,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@idfDerivativeForSampleType, dbo.FN_GBL_CustomizationPackage_GET(), GETDATE(), @AuditUserName);
        END

        -- Site alert
        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfDerivativeForSampleType,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @idfDerivativeForSampleType 'idfDerivativeForSampleType';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_SET_MCW
--
-- Description:	Check to see if a diagnosis currently exists by name
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		10/28/2018 Initial release.
-- Ricky Moss		02/10/2019 Checks to see when updating a case classification that the name 
--							   does not exists in another reference and updates English value
-- Ricky Moss		03/13/2020 Refactor to check duplicates and resolution for Bug 6254
-- Ricky Moss		03/17/2020 Refactor to check duplicates and resolution for Bug 6254
-- Ricky Moss		03/19/2020 Resolved does and resolution for Bug 6254
-- Ricky Moss		03/20/2020 Refactored stored procedure to make no changes if disease currently 
--							   exists
-- Ricky Moss		06/05/2020 Reactivation of inactive record if a disease is being created with 
--							   an existing name
-- Ricky Moss		06/11/2020 Added Using Types to check for duplicates
-- Doug Albanese	04/12/2021 Refactored to use two branches and incorporate 
--							   USSP_GBL_Basereference_Set
-- Doug Albanese	04/14/2021 Corrected a Begin/Commit Transaction block problem.
-- Doug Albanese	04/14/2021 Added Penside Tests, Lab Tests, and Sample Type save routines
-- Stephen Long     05/30/2021 Added default permissions for new disease; business rule described 
--							   in use case SAUC62.
-- Doug Albanese	08/02/2021 Added duplication detection
-- Doug Albanese	08/03/2021 Modified duplication detection to handle the existence of 
--                             previously deleted items
-- Mark Wilson		08/03/2021 Modified to call USP_GBL_BaseReference_SET and to include Using 
--                             Type in duplicate checks
-- Doug Albanese	10/25/2021 Changes discussed with Mark Wilson to eliminate a duplication issue 
--                             found on a join
-- Stephen Long     07/18/2022 Added site alert logic.
-- Leo Tracchia		02/20/2023 Added data audit logic for inserts and updates	
-- Leo Tracchia		03/14/2023 Added additional logic for data audit on strDefault, strName, intHACode, and blnSyndrome
--
-- exec USP_REF_DIAGNOSISREFERENCE_SET null, 'Blackerleg', 'Darkbrownleg', null, null, 2, 10020002, null, null, null, 0, 0, 'en-US', 0
-- exec USP_REF_DIAGNOSISREFERENCE_SET 58218970000129, 'Canine Distemper 4', 'Canine Distemper 4', 'CD09.5', null, 32, 10020002, null, '58218970000050', '9844470000000,9844480000000,9844490000000,58218970000051', 0, 0, 'en-US', 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_DIAGNOSISREFERENCE_SET]
(
    @idfsDiagnosis BIGINT = NULL,
    @strDefault VARCHAR(200),
    @strName NVARCHAR(200),
    @strOIECode NVARCHAR(200),
    @strIDC10 NVARCHAR(200),
    @intHACode INT,
    @idfsUsingType BIGINT,
    @strPensideTest NVARCHAR(MAX),
    @strLabTest NVARCHAR(MAX),
    @strSampleType NVARCHAR(MAX),
    @blnZoonotic BIT = 0,
    @blnSyndrome BIT = 0,
    @LangId NVARCHAR(50),
    @intOrder INT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    DECLARE @ReturnCode INT
        = 0,
            @ReturnMessage NVARCHAR(max) = 'SUCCESS',
            @existingDefault BIGINT,
            @existingName BIGINT,
            @idfTestForDisease BIGINT,
            @idfsTestName BIGINT,
            @idfPensideTestForDisease BIGINT,
            @idfsPensideTestName BIGINT,
            @idfMaterialForDisease BIGINT,
            @idfsSampleType BIGINT,
            @DuplicateDefault INT = 0, -- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.
            @bNewRecord BIT = 0;
    DECLARE @tempPensideTestToDisease TABLE (idfsPensideTestName BIGINT);
    DECLARE @tempTestToDisease TABLE (idfsTestName BIGINT);
    DECLARE @tempSampleTypeToDisease TABLE (idfsSampleType BIGINT);

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

	--Data Audit--

		--DECLARE @idfUserId BIGINT = NULL;
		--DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017018; 
		DECLARE @idfObject bigint = @idfsDiagnosis;
		DECLARE @idfObjectTable_trtDiagnosis bigint = 75840000000;		
		DECLARE @idfDataAuditEvent bigint = NULL;		

		DECLARE @trtDiagnosis_BeforeEdit TABLE
		(
			strDefault nvarchar(2000),
			strName nvarchar(2000),
			intHACode int,
			idfsDiagnosis bigint,
			idfsUsingType bigint,
            strIDC10 nvarchar(200),
            strOIECode nvarchar(200),
            blnZoonotic bit,
            blnSyndrome bit,
            AuditUpdateDTM datetime,
            AuditUpdateUser nvarchar(200)            
		)

		DECLARE @trtDiagnosis_AfterEdit TABLE
		(
			strDefault nvarchar(2000),
			strName nvarchar(2000),
			intHACode int,
			idfsDiagnosis bigint,
			idfsUsingType bigint,
            strIDC10 nvarchar(200),
            strOIECode nvarchar(200),
            blnZoonotic bit,
            blnSyndrome bit,
            AuditUpdateDTM datetime,
            AuditUpdateUser nvarchar(200)            
		)

		-- Get and Set UserId and SiteId
		--SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo

	--Data Audit--

    BEGIN TRY
        BEGIN TRANSACTION;

        IF @idfsDiagnosis IS NULL
			BEGIN -- this is an insert.  check if the strDefault is a duplicate -- MCW added check for Using type
				IF EXISTS
				(
					SELECT R.*
					FROM dbo.trtBaseReference R
						INNER JOIN dbo.trtDiagnosis D
							ON D.idfsDiagnosis = R.idfsBaseReference
							   AND D.idfsUsingType = @idfsUsingType
					WHERE R.strDefault = @strDefault
						  AND R.idfsReferenceType = 19000019
						  AND R.intRowStatus = 0
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END
        ELSE
			BEGIN -- this is an update.  check if the strDefault is a duplicate
				IF EXISTS
				(
					SELECT R.idfsBaseReference,
						   D.idfsUsingType
					FROM dbo.trtBaseReference R
						INNER JOIN dbo.trtDiagnosis D
							ON D.idfsDiagnosis = R.idfsBaseReference
							   AND D.intRowStatus = 0
							   AND D.idfsUsingType = @idfsUsingType
					WHERE R.strDefault = @strDefault
						  AND R.idfsReferenceType = 19000019
						  AND R.intRowStatus = 0
						  AND R.idfsBaseReference <> @idfsDiagnosis
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END

        IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate
			BEGIN
				SET @ReturnMessage = 'DOES EXIST';
				SET @idfsDiagnosis = NULL;
			END
        ELSE -- there is no duplicate, so continue
        BEGIN            

            IF EXISTS
            (
                SELECT *
                FROM dbo.trtDiagnosis
                WHERE idfsDiagnosis = @idfsDiagnosis
            )
            BEGIN
				--DataAudit-- 
				
					--  tauDataAuditEvent  Event Type - Edit 
					set @idfsDataAuditEventType = 10016003;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtDiagnosis, @idfDataAuditEvent OUTPUT

				--DataAudit-- 

				INSERT INTO @trtDiagnosis_BeforeEdit (
					strDefault,
					strName,
					intHACode,
					idfsDiagnosis,
					idfsUsingType, 
					strIDC10, 
					strOIECode, 
					blnZoonotic, 
					blnSyndrome)
				SELECT 
					bf.strDefault,
					nt.strTextString,
					bf.intHACode,
					d.idfsDiagnosis,
					d.idfsUsingType, 
					d.strIDC10, 
					d.strOIECode, 
					d.blnZoonotic, 
					d.blnSyndrome									
					FROM trtDiagnosis d
					LEFT JOIN trtBaseReference bf on d.idfsDiagnosis = bf.idfsBaseReference
					LEFT JOIN trtStringNameTranslation nt on d.idfsDiagnosis = nt.idfsBaseReference
					WHERE idfsDiagnosis = @idfsDiagnosis;

				EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsDiagnosis OUTPUT,
					@ReferenceType = 19000019,
					@LangID = @LangID,
					@DefaultName = @strDefault,
					@NationalName = @strName,
					@HACode = @intHACode,
					@Order = @intOrder,
					@System = 0,
					@User = @AuditUserName;

                UPDATE dbo.trtDiagnosis
                SET idfsUsingType = @idfsUsingType,
                    strIDC10 = @strIDC10,
                    strOIECode = @strOIECode,
                    blnZoonotic = ISNULL(@blnZoonotic, 0),
                    blnSyndrome = ISNULL(@blnSyndrome, 0),
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis = @idfsDiagnosis;

				INSERT INTO @trtDiagnosis_AfterEdit (
					strDefault,
					strName,
					intHACode,
					idfsDiagnosis,
					idfsUsingType, 
					strIDC10, 
					strOIECode, 
					blnZoonotic, 
					blnSyndrome)
				SELECT 
					bf.strDefault,
					nt.strTextString,
					bf.intHACode,
					d.idfsDiagnosis,
					d.idfsUsingType, 
					d.strIDC10, 
					d.strOIECode, 
					d.blnZoonotic, 
					d.blnSyndrome									
					FROM trtDiagnosis d
					LEFT JOIN trtBaseReference bf on d.idfsDiagnosis = bf.idfsBaseReference
					LEFT JOIN trtStringNameTranslation nt on d.idfsDiagnosis = nt.idfsBaseReference
					WHERE idfsDiagnosis = @idfsDiagnosis;

				--strDefault
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81120000000,
					a.idfsDiagnosis,
					null,
					a.strDefault,
					b.strDefault 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.strDefault <> b.strDefault) 
					or(a.strDefault is not null and b.strDefault is null)
					or(a.strDefault is null and b.strDefault is not null)
				
				--strName (strTextString, aka "National Value" aka "Translated Value")
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81390000000,
					a.idfsDiagnosis,
					null,
					a.strName,
					b.strName 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.strName <> b.strName) 
					or(a.strName is not null and b.strName is null)
					or(a.strName is null and b.strName is not null)

				--intHACode "Accessory Code"
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81090000000,
					a.idfsDiagnosis,
					null,
					a.intHACode,
					b.intHACode 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.intHACode <> b.intHACode) 
					or(a.intHACode is not null and b.intHACode is null)
					or(a.intHACode is null and b.intHACode is not null)

				--idfsUsingType
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					4578050000000,
					a.idfsDiagnosis,
					null,
					a.idfsUsingType,
					b.idfsUsingType 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.idfsUsingType <> b.idfsUsingType) 
					or(a.idfsUsingType is not null and b.idfsUsingType is null)
					or(a.idfsUsingType is null and b.idfsUsingType is not null)

				--strIDC10
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81160000000,
					a.idfsDiagnosis,
					null,
					a.strIDC10,
					b.strIDC10 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.strIDC10 <> b.strIDC10) 
					or(a.strIDC10 is not null and b.strIDC10 is null)
					or(a.strIDC10 is null and b.strIDC10 is not null)

				--strOIECode
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81170000000,
					a.idfsDiagnosis,
					null,
					a.strOIECode,
					b.strOIECode 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.strOIECode <> b.strOIECode) 
					or(a.strOIECode is not null and b.strOIECode is null)
					or(a.strOIECode is null and b.strOIECode is not null)
					
				--blnZoonotic
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					51389460000000,					
					a.idfsDiagnosis,
					null,
					a.blnZoonotic,
					b.blnZoonotic 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.blnZoonotic <> b.blnZoonotic) 
					or(a.blnZoonotic is not null and b.blnZoonotic is null)
					or(a.blnZoonotic is null and b.blnZoonotic is not null)

				--blnSyndrome
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					51586990000118,
					a.idfsDiagnosis,
					null,
					a.blnSyndrome,
					b.blnSyndrome 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.blnSyndrome <> b.blnSyndrome) 
					or(a.blnSyndrome is not null and b.blnSyndrome is null)
					or(a.blnSyndrome is null and b.blnSyndrome is not null)

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @idfsDiagnosis,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END
            ELSE
            BEGIN

				EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsDiagnosis OUTPUT,
					@ReferenceType = 19000019,
					@LangID = @LangID,
					@DefaultName = @strDefault,
					@NationalName = @strName,
					@HACode = @intHACode,
					@Order = @intOrder,
					@System = 0,
					@User = @AuditUserName;

				--Data Audit--

					-- tauDataAuditEvent Event Type - Create 
					set @idfsDataAuditEventType = 10016001;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType, @idfsObjectType, @idfsDiagnosis, @idfObjectTable_trtDiagnosis, @idfDataAuditEvent OUTPUT

				--Data Audit--

                INSERT INTO dbo.trtDiagnosis
                (
                    idfsDiagnosis,
                    idfsUsingType,
                    strIDC10,
                    strOIECode,
                    intRowStatus,
                    rowguid,
                    blnZoonotic,
                    strMaintenanceFlag,
                    strReservedAttribute,
                    blnSyndrome,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES(
					@idfsDiagnosis,
					@idfsUsingType,
					@strIDC10,
					@strOIECode,
					0  ,
					NEWID(),
					ISNULL(@blnZoonotic, 0),
					'ADD',
					'EIDSS7 Disease',
					ISNULL(@blnSyndrome, 0),
					10519001,
					N'[{"idfsDiagnosis":' + CAST(@idfsDiagnosis AS NVARCHAR(300)) + '}]',
					@AuditUserName,
					GETDATE()
				);

				--Data Audit--							

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					VALUES (@idfDataAuditEvent, @idfObjectTable_trtDiagnosis, @idfsDiagnosis)
			
				--Data Audit--

                -- Add read permission allow to the default employee group.
                DECLARE @ObjectAccessID BIGINT;
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstObjectAccess',
                                                  @ObjectAccessID OUTPUT;

                INSERT INTO dbo.tstObjectAccess
                (
                    idfObjectAccess,
                    idfsObjectOperation,
                    idfsObjectType,
                    idfsObjectID,
                    idfActor,
                    idfsOnSite,
                    intPermission,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue
                )
                VALUES
                (   @ObjectAccessID,
                    10059003, -- Read permission
                    10060001, -- Disease record
                    @idfsDiagnosis,
                    -506,     -- Default employee group
                    1,        -- First level site
                    2,        -- Allow permission
                    0,
                    10519001,
                    N'[{"idfObjectAccess":' + CAST(@ObjectAccessID AS NVARCHAR(300)) + '}]'
                );

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @idfsDiagnosis,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END

            --Common actions
            EXEC dbo.USSP_DISEASETOLABTEST_SET @idfsDiagnosis, @strLabTest;

            EXEC dbo.USSP_DISEASETOPENSIDETEST_SET @idfsDiagnosis, @strPensideTest;

            EXEC dbo.USSP_DISEASETOSAMPLETYPE_SET @idfsDiagnosis, @strSampleType;
        END
        COMMIT TRANSACTION;

        SELECT @ReturnMessage AS 'ReturnMessage',
               @ReturnCode AS 'ReturnCode',
               @idfsDiagnosis AS 'idfsDiagnosis';
    END TRY
    BEGIN CATCH
        --Rollback the transaction
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK
        END;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_SPECIESTYPE_DEL]...';


GO
--=================================================================================================
-- Name: USP_REF_SPECIESTYPE_DEL
--
-- Description:	Removes species type from active list of species types.
--
-- Author:		Ricky Moss
--							
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		09/26/2018 Initial Release
-- Ricky Moss		01/03/2019 Added deleteAnyway parameter
-- Doug Albanese	08/03/2021 Added the deletion routine to deactivate the record tied to the 
--                             base reference
-- Stephen Long     11/01/2022 Added site alert logic.
-- Ann Xiong		02/24/2023 Implemented Data Audit
-- Ann Xiong		03/14/2023 Fixed a few issues
--
-- Test Code:
-- exec USP_REF_SPECIESTYPE_DEL 55615180000088, 0
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_SPECIESTYPE_DEL]
(
    @IdfsSpeciesType BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

	--Data Audit--
	declare @idfUserId BIGINT = @UserId;
	declare @idfSiteId BIGINT = @SiteId;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017009;                         -- Species
	declare @idfObject bigint = @IdfsSpeciesType;
	declare @idfObjectTable_trtSpeciesType bigint = 75960000000;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfObjectTable_trtBaseReference bigint = 75820000000;
	declare @idfObjectTable_trtStringNameTranslation bigint = 75990000000;

	--Data Audit--

        IF (
               NOT EXISTS
        (
            SELECT idfAggrDiagnosticActionMTX
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfAggrProphylacticActionMTX
            FROM dbo.tlbAggrProphylacticActionMTX
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfAggrVetCaseMTX
            FROM dbo.tlbAggrVetCaseMTX
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfCampaignToDiagnosis
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfMonitoringSessionToDiagnosis
            FROM dbo.tlbMonitoringSessionToDiagnosis
            WHERE @IdfsSpeciesType = @idfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfCampaignToDiagnosis
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSpecies
            FROM dbo.tlbSpecies
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT MonitoringSessionToSampleType
            FROM dbo.MonitoringSessionToSampleType
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSpeciesActual
            FROM dbo.tlbSpeciesActual
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSpeciesToGroupForCustomReport
            FROM dbo.trtSpeciesToGroupForCustomReport
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSpeciesTypeToAnimalAge
            FROM dbo.trtSpeciesTypeToAnimalAge
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
           )
           OR @DeleteAnyway = 1
        BEGIN
            UPDATE trtSpeciesType
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0;

			--Data Audit

			-- tauDataAuditEvent Event Type - Delete
			set @idfsDataAuditEventType =10016002;

			-- insert record into tauDataAuditEvent
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_trtSpeciesType, @idfDataAuditEvent OUTPUT

			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_trtSpeciesType, @idfObject
			-- End data audit

            UPDATE trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsSpeciesType
                  AND intRowStatus = 0;

			--Data Audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_trtBaseReference, @idfObject
			-- End data audit

            UPDATE trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsSpeciesType;

			--Data Audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @idfObject
			-- End data audit

            UPDATE trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsSpeciesType;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @IdfsSpeciesType,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE IF (
                    EXISTS
             (
                 SELECT idfAggrDiagnosticActionMTX
                 FROM dbo.tlbAggrDiagnosticActionMTX
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfAggrProphylacticActionMTX
                 FROM dbo.tlbAggrProphylacticActionMTX
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfAggrVetCaseMTX
                 FROM dbo.tlbAggrVetCaseMTX
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfCampaignToDiagnosis
                 FROM dbo.tlbCampaignToDiagnosis
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfMonitoringSessionToDiagnosis
                 FROM dbo.tlbMonitoringSessionToDiagnosis
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfCampaignToDiagnosis
                 FROM dbo.tlbCampaignToDiagnosis
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfSpecies
                 FROM dbo.tlbSpecies
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT MonitoringSessionToSampleType
                 FROM dbo.MonitoringSessionToSampleType
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfSpeciesActual
                 FROM dbo.tlbSpeciesActual
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfSpeciesToGroupForCustomReport
                 FROM dbo.trtSpeciesToGroupForCustomReport
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfSpeciesTypeToAnimalAge
                 FROM dbo.trtSpeciesTypeToAnimalAge
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                )
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_STATISTICDATATYPE_DEL]...';


GO
--=====================================================================================================
-- Name: USP_REF_STATISTICDATATYPE_DEL
-- Description:	Removes a statistic data type from the active list
--							
-- Author:		Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		2018/10/12 Initial Release
-- Ricky Moss		12/13/2018	Removed the return code
-- Doug Albanese	08/03/2021	Added the deletion routine to deactivate the record tied to the 
--                             base reference.
-- Stephen Long     11/01/2022 Added site alert logic.
-- Leo Tracchia     02/27/2023 Added data audit logic.
-- Leo Tracchia		03/10/2023 Corrected logic for data audit.
-- 
-- Test Code:
-- exec USP_REF_STATISTICDATATYPE_DEL 55615180000061
-- 
--=====================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_STATISTICDATATYPE_DEL]
(
    @idfsStatisticDataType BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY

        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF NOT EXISTS
        (
            SELECT idfsStatisticDataType
            FROM dbo.tlbStatistic
            WHERE idfsStatisticDataType = @idfsStatisticDataType
                  AND intRowStatus = 0
        ) OR @DeleteAnyway = 1

			BEGIN

				--Begin: Data Audit--	

				DECLARE @idfUserId BIGINT = @UserId;
				DECLARE @idfSiteId BIGINT = @SiteId;
				DECLARE @idfsDataAuditEventType bigint = NULL;
				DECLARE @idfsObjectType bigint = 10017050; --select * from trtBaseReference where idfsReferenceType = 19000017 and strdefault like '%stat%'
				DECLARE @idfObject bigint = @idfsStatisticDataType;
				DECLARE @idfObjectTable_trtStatisticDataType bigint = 75980000000;		
				DECLARE @idfObjectTable_trtBaseReference bigint = 75820000000;
				DECLARE @idfObjectTable_trtStringNameTranslation bigint = 75990000000;
				DECLARE @idfDataAuditEvent bigint = NULL;	

				-- tauDataAuditEvent Event Type - Delete 
				set @idfsDataAuditEventType = 10016002;
			
				--End: Data Audit--	

				UPDATE dbo.trtStatisticDataType
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsStatisticDataType = @idfsStatisticDataType
					  AND intRowStatus = 0;

				--Begin: Data Audit, trtStatisticDataType--				
				
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtStatisticDataType, @idfDataAuditEvent OUTPUT

				-- insert record into tauDataAuditEvent - 
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtStatisticDataType, @idfObject)

				--End: Data Audit, trtStatisticDataType--

				UPDATE dbo.trtBaseReference
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsStatisticDataType
					  AND intRowStatus = 0;

				--Begin: Data Audit, trtBaseReference--				
	
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtBaseReference, @idfObject)

				--End: Data Audit, trtBaseReference--

				UPDATE dbo.trtStringNameTranslation
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsStatisticDataType;

				--Begin: Data Audit, trtStringNameTranslation--				
	
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @idfObject)

				--End: Data Audit, trtStringNameTranslation--

				UPDATE dbo.trtBaseReference
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsStatisticDataType;

				INSERT INTO @SuppressSelect
				EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
											   @EventTypeId,
											   @UserId,
											   @idfsStatisticDataType,
											   NULL,
											   @SiteId,
											   NULL,
											   @SiteId,
											   @LocationId,
											   @AuditUserName;
			END

        ELSE IF EXISTS
        (
            SELECT idfsStatisticDataType
            FROM dbo.tlbStatistic
            WHERE idfsStatisticDataType = @idfsStatisticDataType
                  and intRowStatus = 0
        )
			BEGIN
				SELECT @ReturnCode = -1;
				SELECT @ReturnMessage = 'IN USE';
			END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_STATISTICDATATYPE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_STATISTICDATATYPE_SET
--
-- Description:	Creates or updates a statistical data type.
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss       09/28/2018 Initial release.
-- Ricky Moss		12/13/2018 Removed the return code and reference id variables
-- Ricky Moss		12/20/2018 Merged SET AND DOESEXIST stored procedures
-- Ricky Moss		02/11/2019 Checks to see when updating a statistical data type that the name 
--                             does not exists in another reference
-- Ricky Moss		09/20/2019 Refactored duplication check code
-- Ricky Moss		02/17/2020 Refactored to check for duplicates and translated values and update
-- Ricky Moss		03/18/2020 corrected update portion
-- Ricky Moss		03/20/2020 corrected table name
-- Ricky Moss		04/16/2020 reactivated inactive record if being readded
-- Doug Albanese	04/12/2020 Refactored to make use of USSP_GBL_BaseReference_SET, and to change 
--                             the branch decisions for insert/update.
-- Doug Albanese	07/31/2021 Added duplication fix
-- Doug Albanese	08/03/2021 Modified duplication detection to handle the existence of 
--                             previously deleted items
-- Doug Albanese	08/09/2021 Refactored against changes, provided by Mark Wilson, to complete 
--                             the work on this
-- Stephen Long     07/18/2022 Added site alert logic.
-- Leo Tracchia     02/27/2023 Added data auditing logic.
-- Leo Tracchia     03/10/2023 Added additional changes for data audit on strDefault and strName
/*

exec USP_REF_STATISTICDATATYPE_SET NULL, 'Mark Wilson Test Number 02468', 'Test Locally', 19000090, 10091005, 10089002, 1, 'en-US'

exec USP_REF_STATISTICDATATYPE_SET 39850000000, 'Population', 'Population', 19000090, 10091005, 10089001, 1, 'en'

exec USP_REF_STATISTICDATATYPE_SET 389445040003919, 'Change to something else new', 'Population', 19000090, 10091005, 10089001, 1, 'en-US'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_STATISTICDATATYPE_SET]
(
    @idfsStatisticDataType AS BIGINT = NULL,
    @strDefault AS NVARCHAR(200),
    @strName AS NVARCHAR(200),
    @idfsReferenceType AS BIGINT,
    @idfsStatisticPeriodType AS BIGINT,
    @idfsStatisticAreaType AS BIGINT = NULL,
    @blnRelatedWithAgeGroup AS BIT,
    @LangID AS NVARCHAR(50),
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN

    DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
            @ReturnCode INT = 0,
            @DuplicateDefault INT = 0 -- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    BEGIN TRY
        IF @idfsStatisticDataType IS NULL
			BEGIN -- this is an insert.  check if the strDefault is a duplicate
				IF EXISTS
				(
					SELECT *
					FROM dbo.trtBaseReference
					WHERE strDefault = @strDefault
						  AND idfsReferenceType = 19000090
						  AND trtBaseReference.intRowStatus = 0
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END
        ELSE
			BEGIN -- this is an update.  check if the strDefault is a duplicate
				IF EXISTS
				(
					SELECT *
					FROM dbo.trtBaseReference
					WHERE idfsBaseReference <> @idfsStatisticDataType
						  AND strDefault = @strDefault
						  AND idfsReferenceType = 19000090
						  AND trtBaseReference.intRowStatus = 0
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END

        IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate

			BEGIN
				SET @ReturnMessage = 'DOES EXIST';
			END

        ELSE -- there is no duplicate, so continue

			BEGIN

			--Begin: Data Audit Declarations--

			DECLARE @idfUserId BIGINT = @UserId;
			DECLARE @idfSiteId BIGINT = @SiteId;
			DECLARE @idfsDataAuditEventType bigint = NULL;
			DECLARE @idfsObjectType bigint = 10017050; --select * from trtBaseReference where idfsReferenceType = 19000017 and strdefault like '%stat%'
			DECLARE @idfObject bigint = @idfsStatisticDataType;
			DECLARE @idfObjectTable_trtBaseReference bigint = 75820000000;
			DECLARE @idfObjectTable_trtStringNameTranslation bigint = 75990000000;
			DECLARE @idfObjectTable_trtStatisticDataType bigint = 75980000000;		
			DECLARE @idfDataAuditEvent bigint = NULL;		

			DECLARE @trtStatisticDataType_BeforeEdit TABLE
			(
				strDefault nvarchar(2000),
				strName nvarchar(2000),
				idfsStatisticDataType bigint,
				idfsReferenceType bigint,
				idfsStatisticAreaType bigint,
				idfsStatisticPeriodType bigint,									
				blnRelatedWithAgeGroup bit					
			)

			DECLARE @trtStatisticDataType_AfterEdit TABLE
			(
				strDefault nvarchar(2000),
				strName nvarchar(2000),
				idfsStatisticDataType bigint,
				idfsReferenceType bigint,
				idfsStatisticAreaType bigint,
				idfsStatisticPeriodType bigint,									
				blnRelatedWithAgeGroup bit	
			)				

			--End: Data Audit--			


				IF NOT EXISTS
				(
					SELECT *
					FROM dbo.trtStatisticDataType
					WHERE idfsStatisticDataType = @idfsStatisticDataType
				)
				BEGIN

					INSERT INTO @SuppressSelect
					EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsStatisticDataType OUTPUT,
						@ReferenceType = 19000090,
						@LangID = @LangID,
						@DefaultName = @strDefault,
						@NationalName = @strName,
						@HACode = NULL,
						@Order = NULL,
						@System = 0,
						@User = @AuditUserName;

					--Begin: Data Audit for INSERT--

					-- tauDataAuditEvent Event Type - Create 
					SET @idfsDataAuditEventType = 10016001;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfsStatisticDataType, @idfObjectTable_trtStatisticDataType, @idfDataAuditEvent OUTPUT

					--End: Data Audit for INSERT--

					INSERT INTO dbo.trtStatisticDataType
					(
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,
						intRowStatus,
						rowguid,
						blnRelatedWithAgeGroup,
						strMaintenanceFlag,
						strReservedAttribute,
						SourceSystemNameID,
						SourceSystemKeyValue,
						AuditCreateDTM,
						AuditCreateUser
					)
					VALUES
					(@idfsStatisticDataType,
					 @idfsReferenceType,
					 @idfsStatisticAreaType,
					 @idfsStatisticPeriodType,
					 0  ,
					 NEWID(),
					 @blnRelatedWithAgeGroup,
					 NULL,
					 NULL,
					 10519001,
					 '[{"idfsBaseReference":' + CAST(@idfsStatisticDataType AS NVARCHAR(300)) + '}]',
					 GETDATE(),
					 @AuditUserName
					);

					--Begin: Data Audit for INSERT--					

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					VALUES (@idfDataAuditEvent, @idfObjectTable_trtStatisticDataType, @idfsStatisticDataType)
			
					--End: Data Audit for INSERT--

				END
            ELSE
				BEGIN

					--Begin: Data Audit for UPDATE--
				
					--  tauDataAuditEvent  Event Type - Edit 
					set @idfsDataAuditEventType = 10016003;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfsStatisticDataType, @idfObjectTable_trtStatisticDataType, @idfDataAuditEvent OUTPUT

					INSERT INTO @trtStatisticDataType_BeforeEdit (
						strDefault,
						strName,
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup)
					SELECT 
						bf.strDefault,
						nt.strTextString,
						sdt.idfsStatisticDataType,
						sdt.idfsReferenceType,
						sdt.idfsStatisticAreaType,
						sdt.idfsStatisticPeriodType,									
						sdt.blnRelatedWithAgeGroup
					FROM trtStatisticDataType sdt
					LEFT JOIN trtBaseReference bf on sdt.idfsStatisticDataType = bf.idfsBaseReference
					LEFT JOIN trtStringNameTranslation nt on sdt.idfsStatisticDataType = nt.idfsBaseReference
					WHERE idfsStatisticDataType = @idfsStatisticDataType;

					--End: Data Audit for UPDATE--
					
					INSERT INTO @SuppressSelect
					EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsStatisticDataType OUTPUT,
						@ReferenceType = 19000090,
						@LangID = @LangID,
						@DefaultName = @strDefault,
						@NationalName = @strName,
						@HACode = NULL,
						@Order = NULL,
						@System = 0,
						@User = @AuditUserName;

					UPDATE dbo.trtStatisticDataType
					SET idfsReferenceType = @idfsReferenceType,
						idfsStatisticAreaType = @idfsStatisticAreaType,
						idfsStatisticPeriodType = @idfsStatisticPeriodType,
						blnRelatedWithAgeGroup = @blnRelatedWithAgeGroup,
						intRowStatus = 0,
						rowguid = ISNULL(rowguid, NEWID()),
						AuditUpdateDTM = GETDATE(),
						AuditUpdateUser = @AuditUserName
					WHERE idfsStatisticDataType = @idfsStatisticDataType;

					--Begin: Data Audit for UPDATE--

					INSERT INTO @trtStatisticDataType_AfterEdit (
						strDefault,
						strName,
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup)
					SELECT 
						bf.strDefault,
						nt.strTextString,
						sdt.idfsStatisticDataType,
						sdt.idfsReferenceType,
						sdt.idfsStatisticAreaType,
						sdt.idfsStatisticPeriodType,									
						sdt.blnRelatedWithAgeGroup
					FROM trtStatisticDataType sdt
					LEFT JOIN trtBaseReference bf on sdt.idfsStatisticDataType = bf.idfsBaseReference
					LEFT JOIN trtStringNameTranslation nt on sdt.idfsStatisticDataType = nt.idfsBaseReference
					WHERE idfsStatisticDataType = @idfsStatisticDataType;

					--strDefault
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtBaseReference, 
						81120000000,
						a.idfsStatisticDataType,
						null,
						a.strDefault,
						b.strDefault 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.strDefault <> b.strDefault) 
						or(a.strDefault is not null and b.strDefault is null)
						or(a.strDefault is null and b.strDefault is not null)

					--strName (strTextString, aka "National Value" aka "Translated Value")
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStringNameTranslation, 
						81390000000,
						a.idfsStatisticDataType,
						null,
						a.strName,
						b.strName 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.strName <> b.strName) 
						or(a.strName is not null and b.strName is null)
						or(a.strName is null and b.strName is not null)

					--idfsReferenceType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						81350000000,
						a.idfsStatisticDataType,
						null,
						a.idfsReferenceType,
						b.idfsReferenceType 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.idfsReferenceType <> b.idfsReferenceType) 
						or(a.idfsReferenceType is not null and b.idfsReferenceType is null)
						or(a.idfsReferenceType is null and b.idfsReferenceType is not null)

					--idfsStatisticAreaType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						4578150000000,
						a.idfsStatisticDataType,
						null,
						a.idfsStatisticAreaType,
						b.idfsStatisticAreaType 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
						or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
						or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null)

					--idfsStatisticPeriodType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						4578160000000,
						a.idfsStatisticDataType,
						null,
						a.idfsStatisticPeriodType,
						b.idfsStatisticPeriodType 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
						or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
						or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null)

					--blnRelatedWithAgeGroup
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						12014490000000,
						a.idfsStatisticDataType,
						null,
						a.blnRelatedWithAgeGroup,
						b.blnRelatedWithAgeGroup 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.blnRelatedWithAgeGroup <> b.blnRelatedWithAgeGroup) 
						or(a.blnRelatedWithAgeGroup is not null and b.blnRelatedWithAgeGroup is null)
						or(a.blnRelatedWithAgeGroup is null and b.blnRelatedWithAgeGroup is not null)

					--End: Data Audit for UPDATE--
				END

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsStatisticDataType,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage,
               @idfsStatisticDataType AS idfsStatisticDataType;

    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_SecurityConfiguration_Set]...';


GO
--=================================================================================================
-- Name: USP_SecurityConfiguration_Set
-- 
-- Created by:				Manickandan Govindarajan
-- Last modified date:		07/05/2021
-- Last modified by:		Manickandan Govindarajan
-- Description:				Update security policy 
-- Testing code:
--
-- Revision History:
-- Name                        Date       Change Detail
-- --------------------------- ---------- --------------------------------------------------------
-- Manickandan Govindarajan    08/13/2021 Added [SesnInactivityTimeOutMins] field
-- Stephen Long                07/12/2022 Added site alert logic.
-- Mani Govindarajan           03/12/2023 Added Data Audit

--=================================================================================================
ALTER PROCEDURE [dbo].[USP_SecurityConfiguration_Set]
    @Id int,
    @MinPasswordLength int,
    @EnforcePasswordHistoryCount int,
    @MinPasswordAgeDays int,
    @ForceUppercaseFlag bit,
    @ForceLowercaseFlag bit,
    @ForceNumberUsageFlag bit,
    @ForceSpecialCharactersFlag bit,
    @AllowUseOfSpaceFlag bit,
    @PreventSequentialCharacterFlag bit,
    @PreventUsernameUsageFlag bit,
    @LockoutThld int,
    @MaxSessionLength int,
    @SesnIdleTimeoutWarnThldMins int,
    @SesnIdleCloseoutThldMins int,
    @SesnInactivityTimeOutMins int,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT, 
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventObjectId BIGINT = @Id,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;

		--Data Audit--
		declare @idfsDataAuditEventType bigint = 10016003; -- Edut
		declare @idfsObjectType bigint = 10017064;         -- Security Policy
		declare @idfObject bigint = @Id;
		declare @idfDataAuditEvent bigint= NULL;
		declare @idfObjectTable_SecurityPolicy bigint = 53577790000005;


		DECLARE @SecurityPolicyConfiguration_BeforeEdit TABLE
		(
        	[SecurityPolicyConfigurationUID] [int] NOT NULL,
			[MinPasswordLength] [int] NULL,
			[EnforcePasswordHistoryCount] [int] NULL,
			[MinPasswordAgeDays] [int] NULL,
			[ForceUppercaseFlag] [bit] NULL,
			[ForceLowercaseFlag] [bit] NULL,
			[ForceNumberUsageFlag] [bit] NULL,
			[ForceSpecialCharactersFlag] [bit] NULL,
			[AllowUseOfSpaceFlag] [bit] NULL,
			[PreventSequentialCharacterFlag] [bit] NULL,
			[PreventUsernameUsageFlag] [bit] NULL,
			[LockoutThld] [int] NULL,
			[LockoutDurationMinutes] [int] NULL,
			[MaxSessionLength] [int] NULL,
			[SesnIdleTimeoutWarnThldMins] [int] NULL,
			[SesnIdleCloseoutThldMins] [int] NULL,
			[SesnInactivityTimeOutMins] [int] NULL
		);

		DECLARE @SecurityPolicyConfiguration_AfterEdit TABLE
		(
        	[SecurityPolicyConfigurationUID] [int] NOT NULL,
			[MinPasswordLength] [int] NULL,
			[EnforcePasswordHistoryCount] [int] NULL,
			[MinPasswordAgeDays] [int] NULL,
			[ForceUppercaseFlag] [bit] NULL,
			[ForceLowercaseFlag] [bit] NULL,
			[ForceNumberUsageFlag] [bit] NULL,
			[ForceSpecialCharactersFlag] [bit] NULL,
			[AllowUseOfSpaceFlag] [bit] NULL,
			[PreventSequentialCharacterFlag] [bit] NULL,
			[PreventUsernameUsageFlag] [bit] NULL,
			[LockoutThld] [int] NULL,
			[LockoutDurationMinutes] [int] NULL,
			[MaxSessionLength] [int] NULL,
			[SesnIdleTimeoutWarnThldMins] [int] NULL,
			[SesnIdleCloseoutThldMins] [int] NULL,
			[SesnInactivityTimeOutMins] [int] NULL
		);

		--Data Audit--
		 EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType,@idfsObjectType,@id, @idfObjectTable_SecurityPolicy, @idfDataAuditEvent OUTPUT
        INSERT INTO @SecurityPolicyConfiguration_BeforeEdit
        (
            [SecurityPolicyConfigurationUID],
			[MinPasswordLength],
			[EnforcePasswordHistoryCount],
			[MinPasswordAgeDays],
			[ForceUppercaseFlag],
			[ForceLowercaseFlag],
			[ForceNumberUsageFlag],
			[ForceSpecialCharactersFlag],
			[AllowUseOfSpaceFlag],
			[PreventSequentialCharacterFlag],
			[PreventUsernameUsageFlag],
			[LockoutThld],
			[LockoutDurationMinutes],
			[MaxSessionLength],
			[SesnIdleTimeoutWarnThldMins],
			[SesnIdleCloseoutThldMins],
			[SesnInactivityTimeOutMins]
		)
         SELECT 
            [SecurityPolicyConfigurationUID],
			[MinPasswordLength],
			[EnforcePasswordHistoryCount],
			[MinPasswordAgeDays],
			[ForceUppercaseFlag],
			[ForceLowercaseFlag],
			[ForceNumberUsageFlag],
			[ForceSpecialCharactersFlag],
			[AllowUseOfSpaceFlag],
			[PreventSequentialCharacterFlag],
			[PreventUsernameUsageFlag],
			[LockoutThld],
			[LockoutDurationMinutes],
			[MaxSessionLength],
			[SesnIdleTimeoutWarnThldMins],
			[SesnIdleCloseoutThldMins],
			[SesnInactivityTimeOutMins]
		FROM SecurityPolicyConfiguration 
		where [SecurityPolicyConfigurationUID] = @id

        -- End data audit



    UPDATE dbo.SecurityPolicyConfiguration
    SET MinPasswordLength = @MinPasswordLength,
        EnforcePasswordHistoryCount = @EnforcePasswordHistoryCount,
        MinPasswordAgeDays = @MinPasswordAgeDays,
        ForceUppercaseFlag = @ForceUppercaseFlag,
        ForceLowercaseFlag = @ForceLowercaseFlag,
        ForceNumberUsageFlag = @ForceNumberUsageFlag,
        ForceSpecialCharactersFlag = @ForceSpecialCharactersFlag,
        AllowUseOfSpaceFlag = @AllowUseOfSpaceFlag,
        PreventSequentialCharacterFlag = @PreventSequentialCharacterFlag,
        PreventUsernameUsageFlag = @PreventUsernameUsageFlag,
        LockoutThld = @LockoutThld,
        MaxSessionLength = @MaxSessionLength,
        SesnIdleTimeoutWarnThldMins = @SesnIdleTimeoutWarnThldMins,
        SesnIdleCloseoutThldMins = @SesnIdleCloseoutThldMins,
        SesnInactivityTimeOutMins = @SesnInactivityTimeOutMins,
        AuditUpdateDTM = GETDATE(),
        AuditUpdateUser = @AuditUserName
    WHERE SecurityPolicyConfigurationUID = @Id;

	--Data Audit--

	 INSERT INTO @SecurityPolicyConfiguration_AfterEdit
        (
            [SecurityPolicyConfigurationUID],
			[MinPasswordLength],
			[EnforcePasswordHistoryCount],
			[MinPasswordAgeDays],
			[ForceUppercaseFlag],
			[ForceLowercaseFlag],
			[ForceNumberUsageFlag],
			[ForceSpecialCharactersFlag],
			[AllowUseOfSpaceFlag],
			[PreventSequentialCharacterFlag],
			[PreventUsernameUsageFlag],
			[LockoutThld],
			[LockoutDurationMinutes],
			[MaxSessionLength],
			[SesnIdleTimeoutWarnThldMins],
			[SesnIdleCloseoutThldMins],
			[SesnInactivityTimeOutMins]
		)
         SELECT 
            [SecurityPolicyConfigurationUID],
			[MinPasswordLength],
			[EnforcePasswordHistoryCount],
			[MinPasswordAgeDays],
			[ForceUppercaseFlag],
			[ForceLowercaseFlag],
			[ForceNumberUsageFlag],
			[ForceSpecialCharactersFlag],
			[AllowUseOfSpaceFlag],
			[PreventSequentialCharacterFlag],
			[PreventUsernameUsageFlag],
			[LockoutThld],
			[LockoutDurationMinutes],
			[MaxSessionLength],
			[SesnIdleTimeoutWarnThldMins],
			[SesnIdleCloseoutThldMins],
			[SesnInactivityTimeOutMins]
		FROM SecurityPolicyConfiguration 
		where [SecurityPolicyConfigurationUID] = @id

		--MinPasswordLength
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000050,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.MinPasswordLength,
                a.MinPasswordLength
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.MinPasswordLength <> b.MinPasswordLength)

		--EnforcePasswordHistoryCount
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000051,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.EnforcePasswordHistoryCount,
                a.EnforcePasswordHistoryCount
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.EnforcePasswordHistoryCount <> b.EnforcePasswordHistoryCount)

		--MinPasswordAgeDays
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000052,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.MinPasswordAgeDays,
                a.MinPasswordAgeDays
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.MinPasswordAgeDays <> b.MinPasswordAgeDays)

		--ForceUppercaseFlag
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000053,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.ForceUppercaseFlag,
                a.ForceUppercaseFlag
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.ForceUppercaseFlag <> b.ForceUppercaseFlag)                         
           -- End data audit

	--ForceLowercaseFlag
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000054,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.ForceLowercaseFlag,
                a.ForceLowercaseFlag
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.ForceLowercaseFlag <> b.ForceLowercaseFlag)      

		--ForceNumberUsageFlag
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000055,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.ForceNumberUsageFlag,
                a.ForceNumberUsageFlag
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.ForceNumberUsageFlag <> b.ForceNumberUsageFlag)      
		
		--ForceSpecialCharactersFlag
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000056,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.ForceSpecialCharactersFlag,
                a.ForceSpecialCharactersFlag
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.ForceSpecialCharactersFlag <> b.ForceSpecialCharactersFlag)  

		--AllowUseOfSpaceFlag
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000057,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.AllowUseOfSpaceFlag,
                a.AllowUseOfSpaceFlag
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.AllowUseOfSpaceFlag <> b.AllowUseOfSpaceFlag)  

		--PreventSequentialCharacterFlag
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000058,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.PreventSequentialCharacterFlag,
                a.PreventSequentialCharacterFlag
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.PreventSequentialCharacterFlag <> b.PreventSequentialCharacterFlag)  

		--PreventUsernameUsageFlag
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000059,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.PreventUsernameUsageFlag,
                a.PreventUsernameUsageFlag
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.PreventUsernameUsageFlag <> b.PreventUsernameUsageFlag)  

		--LockoutThld
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000060,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.LockoutThld,
                a.LockoutThld
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.LockoutThld <> b.LockoutThld)  

		--LockoutDurationMinutes
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000061,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.LockoutDurationMinutes,
                a.LockoutDurationMinutes
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.LockoutDurationMinutes <> b.LockoutDurationMinutes)  

		--MaxSessionLength
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000062,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.MaxSessionLength,
                a.MaxSessionLength
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.MaxSessionLength <> b.MaxSessionLength)  

		--SesnIdleTimeoutWarnThldMins
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000063,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.SesnIdleTimeoutWarnThldMins,
                a.SesnIdleTimeoutWarnThldMins
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.SesnIdleTimeoutWarnThldMins <> b.SesnIdleTimeoutWarnThldMins)  

			--SesnIdleCloseoutThldMins
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000064,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.SesnIdleCloseoutThldMins,
                a.SesnIdleCloseoutThldMins
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.SesnIdleCloseoutThldMins <> b.SesnIdleCloseoutThldMins)  

			--SesnIdleCloseoutThldMins
		INSERT INTO dbo.tauDataAuditDetailUpdate
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfColumn,
            idfObject,
            idfObjectDetail,
            strOldValue,
            strNewValue
        )
        SELECT @idfDataAuditEvent,
                @idfObjectTable_SecurityPolicy,
                51586990000065,
                a.SecurityPolicyConfigurationUID,
                NULL,
                b.SesnInactivityTimeOutMins,
                a.SesnInactivityTimeOutMins
        FROM @SecurityPolicyConfiguration_AfterEdit AS a
            FULL JOIN @SecurityPolicyConfiguration_BeforeEdit AS b
                ON a.SecurityPolicyConfigurationUID = b.SecurityPolicyConfigurationUID
        WHERE (a.SesnInactivityTimeOutMins <> b.SesnInactivityTimeOutMins)  

           -- End data audit
    EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                    @EventTypeId,
                                    @EventUserId,
                                    @EventObjectId,
                                    @EventDiseaseId,
                                    @EventSiteId,
                                    @EventInformationString,
                                    @EventLoginSiteId,
                                    @EventLocationId,
                                    @AuditUserName;

    SELECT @ReturnCode 'ReturnCode',
           @ReturnMessage 'ReturnMessage';
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_Copy_Template]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_Copy_Template
-- Description: Copies the base structure of a template and its components to prevent historical damage.
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese	01/12/2021	Initial release for use by other SPs.
-- Doug Albanese	01/19/2021	Fixed the return to provide the new Form Template id
-- Doug Albanese	01/21/2021	Change of business rule to allow older templates to still be modified.
-- Doug Albanese	01/21/2021	Disabled UNI for the old template being copied.
-- Doug Albanese	07/02/2021	Altered the procedure to ignore blank idfsSections
-- Doug Albanese	07/06/2021	Refactored for use with a user initiated copy.
-- Doug Albanese	07/09/2021	Added language parameter
-- Doug Albanese	07/09/2021	Removed supression
-- Doug Albanese	07/12/2021	Corrected return aliases
-- Doug Albanese	07/12/2021	Corrections to remove copying of Sections and Parameters, and replace with association to the new template
-- Doug Albanese	07/14/2021	Turning off content to make this process a successor procedure only
-- Doug Albanese	07/14/2021	Created translation for SP generated "Copy"
-- Doug Albanese	07/14/2021	Added ordering from original template
-- Doug Albanese	07/14/2021	Added Edit Mode for Mandatory/Ordinary settings
--	Doug Albanese	05/12/2022	Adjusting for copying to another formtype
--	Doug Albanese	06/02/2022	Changed the functioncall parameter for USP_ADMIN_FF_ParameterTemplate_SET, to work with USP_ADMIN_FF_ParameterDesignOptions_SET
--	Doug Albanese	06/07/2022	Changed USP_ADMIN_FF_ParameterTemplate_SET, to call as a function
--	Doug Albanese	06/08/2022	Corrected the Determinants value copy. Was in the wrong place
--	Doug Albanese	06/10/2022	Making use of USP_ADMIN_FF_ParameterTemplateForCopy_SET, instead of USP_ADMIN_FF_ParameterTemplate_SET for EF Generation purposes
--								Realigned call to USP_Admin_FF_Rule_GetDetails for new changes
--	Doug Albanese	06/30/2022	Correcting the process of copying Determinants
--	Doug Albanese	07/01/2022	Removed rollback
--	Doug Albanese	07/21/2022	Re-aligned to work with changes made on USP_ADMIN_FF_Template_SET
--	Doug Albanese	08/04/2022	Added a secondary "intRowStatus"
--	Doug Albanese	08/04/2022	Corrected a call to USP_ADMIN_FF_Determinant_SET, because it was remotely set for Event logging.
--	Doug Albanese	08/04/2022	Corrected "Template Details" to coalesce the blnUNI value, when it was null
--  Doug Albanese	01/26/2023	Correction to allow Copying of templates to create Outbreak assigned flex forms.
-- Doug Albanese	03/22/2023	Changed SP to make use of UserId, instead of User...so that event logging will not break.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_Copy_Template] (
	@LangId									NVARCHAR(50),
	@idfsFormTemplate						BIGINT,
	@User									NVARCHAR(50),
	@idfsSite								BIGINT = NULL,
	@idfsNewFormType						BIGINT = NULL
)
AS
BEGIN
	DECLARE @returnCode						INT = 0;
	DECLARE @returnMsg						NVARCHAR(MAX) = 'SUCCESS';
	
	Declare @SupressSelect TABLE
	(	
		retrunCode							INT,
		returnMessage						VARCHAR(200)
	) 

	DECLARE @Supress_USP_ADMIN_FF_Parameters_SET TABLE (
		ReturnCode							INT,
		ReturnMessage						VARCHAR(200),
		idfsParameter						BIGINT,
		idfsParameterCaption				BIGINT
	)
	
	DECLARE @Supress_USP_ADMIN_FF_ParameterTemplate_SET TABLE(
		ReturnData							VARCHAR(200)
	)

	DECLARE @iObservations					INT = 0


	BEGIN TRY
		
		--Changes that have the potential to trigger copying of a template
		--Template details
		--Parameter addition, moving, or deleting from a template
		--Section addition, moving, or deleting from a template
		--Parameter Editor changes
		--Section Editor Changes
		--Updating "Mandatory" status
		--Adding, Editing, or Removing a Rule

		DECLARE @FormTemplate				NVARCHAR(200)
		DECLARE @NationalName				NVARCHAR(200)
		DECLARE @NationalLongName			NVARCHAR(200)
		DECLARE @idfsFormType				BIGINT
		DECLARE @strNote					NVARCHAR(MAX)
		DECLARE @blnUNI						BIT

		DECLARE @idfsSection				BIGINT
		DECLARE @idfsParameter				BIGINT
		DECLARE @idfsParentSection			BIGINT 
		DECLARE @DefaultName				NVARCHAR(400)
		DECLARE @DefaultLongName			NVARCHAR(400)
		DECLARE @intOrder					INT
		DECLARE @blnGrid					BIT
		DECLARE @blnFixedRowset				BIT
		DECLARE @idfsMatrixType				BIGINT
		DECLARE @intRowStatus				INT
		DECLARE @idfsSectionNew				BIGINT
		DECLARE @idfsFormTemplateNew		BIGINT

		DECLARE @idfsParameterNew			BIGINT
		DECLARE	@idfsParameterCaption		BIGINT
		DECLARE @idfsParameterType			BIGINT
		DECLARE @idfsEditor					BIGINT
		DECLARE @intHACode					INT
		DECLARE @langid_int					BIGINT
		DECLARE @idfsRule					BIGINT
		DECLARE @idfsEditMode				BIGINT

		DECLARE @idfsRuleMessage			BIGINT
		DECLARE @idfsRuleFunction			BIGINT
		DECLARE @idfsRuleAction				BIGINT
		DECLARE	@idfsFunctionParameter		BIGINT
		DECLARE @idfsActionParameter		BIGINT
		DECLARE	@idfsFunctionParameterNew	BIGINT
		DECLARE @idfsActionParameterNew		BIGINT
		DECLARE @intNumberOfParameters		INT
		DECLARE @idfsCheckPoint				BIGINT
		DECLARE @MessageText				NVARCHAR(MAX)
		DECLARE @MessageNationalText		NVARCHAR(MAX)
		DECLARE @blnNot						BIT
		DECLARE	@idfsRuleNew				BIGINT
		DECLARE	@strFillValue				NVARCHAR(MAX)
		DECLARE	@strCompareValue			NVARCHAR(MAX)

		DECLARE @DefaultRuleName			NVARCHAR(MAX)
		DECLARE @NationalRuleName			NVARCHAR(MAX)
		DECLARE @DefaultRuleMessage			NVARCHAR(MAX)
		DECLARE @NationalRuleMessage		NVARCHAR(MAX)
		DECLARE @strActionParameters		NVARCHAR(MAX)

		DECLARE @idfRuleConstant			BIGINT
		DECLARE @idfRuleConstantNew			BIGINT
		DECLARE @varConstant				SQL_VARIANT

		DECLARE @idfDeterminantValue		BIGINT
		DECLARE @idfsBaseReference			BIGINT
		DECLARE @idfsGISBaseReference		BIGINT

		DECLARE @strResourceString			NVARCHAR(200) = 'Copy'
		DECLARE @UserId						 BIGINT

		SET NOCOUNT ON

		SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);

		SELECT @UserId = userInfo.UserId,
		  @idfsSite = userInfo.SiteId
		   FROM dbo.FN_UserSiteInformation(@User) userInfo;

		
		--Are any observations made for the given active (intRowStatus = 0) template?
		--SELECT
		--	@iObservations = COUNT(idfObservation)
		--FROM
		--	tlbObservation O
		--INNER JOIN ffFormTemplate FT
		--	ON FT.idfsFormTemplate = O.idfsFormTemplate
		--	AND FT.intRowStatus = 0
		--WHERE
		--	O.idfsFormTemplate = @idfsFormTemplate

		--IF @iObservations > 0
		--	BEGIN
				----------------------------------------------------------------------------------------
				--Create table structures for collecting up items to enumerate and tag,				  --
				--and capture EXEC results                                                            --
				----------------------------------------------------------------------------------------
				DECLARE @Sections TABLE (
					idfsSection			BIGINT NULL,
					idfsSectionNew		BIGINT NULL
				)

				DECLARE @Parameters TABLE (
					idfsParameter		BIGINT,
					idfsParameterNew	BIGINT,
					idfsSection			BIGINT,
					idfsSectionNew		BIGINT
				)

				DECLARE @ActionParameters TABLE (
					idfsParameter		BIGINT
				)

				DECLARE @FunctionParameters TABLE (
					idfsParameter		BIGINT
				)

				DECLARE @TemplateDetails TABLE (
					idfsFormTemplate	BIGINT,
					FormTemplate		NVARCHAR(200),
					DefaultName			NVARCHAR(200),
					NationalName		NVARCHAR(200),
					idfsFormType		BIGINT,
					strNote				NVARCHAR(MAX),
					blnUNI				BIT
				)

				DECLARE @SectionSetResults TABLE (
					returnCode			BIGINT,
					returnMsg			NVARCHAR(MAX),
					idfsSection			BIGINT
				)

				DECLARE @SectionDetailResults TABLE (
					idfsParentSection	BIGINT,
					idfsFormType		BIGINT,
					intOrder			INT,
					blnGrid				BIT,
					blnFixedRowset		BIT,
					idfsMatrixType		BIGINT,
					strDefault			NVARCHAR(MAX),
					NationalName		NVARCHAR(MAX)
				)

				DECLARE @TemplateDetailsResults TABLE (
					returnCode			BIGINT,
					returnMsg			NVARCHAR(MAX),
					idfsFormTemplate	BIGINT
				)

				DECLARE	@Rules	TABLE (
					idfsRule			BIGINT,
					idfsRuleNew			BIGINT
				)

				DECLARE @RuleDetailResults TABLE (
					idfsRule				BIGINT,
					defaultRuleName			NVARCHAR(MAX),
					RuleName				NVARCHAR(MAX),
					idfsRuleMessage			BIGINT,
					defaultRuleMessage		NVARCHAR(MAX),
					RuleMessage				NVARCHAR(MAX),
					idfsCheckPoint			BIGINT,
					idfsRuleFunction		BIGINT,
					blnNot					BIT,
					idfsRuleAction			BIGINT,
					strActionParameters		NVARCHAR(MAX),
					idfsFunctionParameter	BIGINT,
					FillValue				NVARCHAR(MAX)
				)

				DECLARE @RuleConstants TABLE (
					idfRuleConstant		BIGINT,
					idfsRule			BIGINT,
					varConstant			SQL_VARIANT
				)

				DECLARE @Functions TABLE (
					idfParameterForFunction	BIGINT,
					idfsParameter			BIGINT,
					idfsFormTemplate		BIGINT,
					idfsRule				BIGINT,
					intOrder				INT,
					strCompareValue			NVARCHAR(MAX)
				)

				DECLARE @Actions TABLE (
					idfParameterForAction	BIGINT,
					idfsParameter			BIGINT,
					idfsFormTemplate		BIGINT,
					idfsRuleAction			BIGINT,
					idfsRule				BIGINT,
					strFillValue			NVARCHAR(MAX)
				)

				DECLARE @GlobalReference TABLE (
					idfs					BIGINT,
					idfsNew					BIGINT
				)

				DECLARE @Determinants TABLE (
					idfDeterminantValue		BIGINT,
					idfsBaseReference		BIGINT
				)

				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of the base Template													  --
				----------------------------------------------------------------------------------------
				INSERT INTO @TemplateDetails
				EXEC USP_ADMIN_FF_Template_GetDetail @LangID = @LangId, @idfsFormTemplate = @idfsFormTemplate

				SELECT
					@idfsFormTemplate = idfsFormTemplate,
					@FormTemplate = FormTemplate,
					@DefaultName = DefaultName,
					@NationalName = NationalName,
					@idfsFormType = idfsFormType,
					@strNote = strNote,
					@blnUNI = COALESCE(blnUNI,0)
				FROM
					@TemplateDetails

				if @idfsNewFormType IS NOT NULL
					BEGIN
						--if NOT EXISTS(SELECT TOP 1 idfsFormTemplate FROM ffFormTemplate WHERE idfsFormType = @idfsNewFormType AND intRowStatus = 0)
						--	BEGIN
								SET @idfsFormType = @idfsNewFormType
								SET @blnUNI = 1
							--END
					END
				--Collect remaining details that are not supplied by the existing SP
				--SELECT
				--	@DefaultName = strDefault
				--FROM
				--	trtBaseReference 
				--WHERE
				--	idfsBaseReference = @idfsFormTemplate
				
				--Generate new idfsFormTemplate with existing names, having "Copy" appended to it
				SELECT
					@strResourceString = strResourceString
				FROM
					trtResourceTranslation
				WHERE 
					idfsResource = 744 and 
					idfsLanguage = @langid_int

				SET @DefaultName = CONCAT(@DefaultName,' (', @strResourceString , ')')
				SET @NationalName = CONCAT(@NationalName,' (', @strResourceString , ')')

				INSERT INTO @SupressSelect
				EXEC dbo.USSP_GBL_BaseReference_SET @idfsFormTemplateNew OUTPUT, 19000033/*'rftParameter'*/,@LangID, @DefaultName, @NationalName, 0

				--Create Global Reference for use by subsequential steps
				INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsFormTemplate, @idfsFormTemplateNew)

				--Create the new Template
				INSERT INTO @SupressSelect
				EXEC USP_ADMIN_FF_Template_SET 
					@idfsFormType = @idfsFormType, 
					@DefaultName = @DefaultName,
					@NationalName = @NationalName, 
					@strNote = @strNote, 
					@LangId = @LangID, 
					@blnUNI = @blnUNI,
					@idfsFormTemplate = @idfsFormTemplateNew,
					@User = @User,
					@FunctionCall = 1,
					@CopyOnly = 1,
					@EventTypeId =10025120,
					@SiteId = @idfsSite,
					@UserId = @UserId,
					@LocationId = -1
					

				--Turn off UNI on old Template, since the newer on is the primary one now
				UPDATE
					ffFormTemplate
				SET
					blnUNI = 0
				WHERE
					idfsFormTemplate = @idfsFormTemplate

				--Disable existing Template
				--UPDATE
				--	ffFormTemplate
				--SET
				--	intRowStatus = 1
				--WHERE
				--	idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Sections													  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Sections (idfsSection)
				SELECT
					SFT.idfsSection
				FROM
					ffSectionForTemplate SFT
				INNER JOIN ffSection S
					ON S.idfsSection = SFT.idfsSection AND
						SFT.intRowStatus = 0
				WHERE
					SFT.idfsFormTemplate = @idfsFormTemplate AND
					S.intRowStatus = 0

				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Parameters and their associated Sections					  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Parameters (idfsParameter, idfsSection)
				SELECT
					PFT.idfsParameter,
					P.idfsSection
				FROM
					ffParameterForTemplate PFT
				INNER JOIN ffParameter P
					ON P.idfsParameter = PFT.idfsParameter AND
						PFT.intRowStatus = 0
				WHERE
					PFT.idfsFormTemplate = @idfsFormTemplate AND
					P.intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rules														  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Rules (idfsRule)
				SELECT
					idfsRule
				FROM
					ffRule
				WHERE
					idfsFormTemplate = @idfsFormTemplate AND
					intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rules														  --
				----------------------------------------------------------------------------------------
				--INSERT INTO @Rules (idfsRule)
				--SELECT
				--	idfsRule
				--FROM
				--	ffRule
				--WHERE
				--	idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rule Constants												  --
				----------------------------------------------------------------------------------------
				INSERT INTO @RuleConstants (idfRuleConstant, idfsRule, varConstant)
				SELECT
					RC.idfRuleConstant,
					RC.idfsRule,
					RC.varConstant
				FROM
					ffRuleConstant RC
				INNER JOIN ffRule R
					ON R.idfsRule = RC.idfsRule
				WHERE
					R.idfsFormTemplate = @idfsFormTemplate AND
					R.intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Template Determinants										  --
				--------------------------------------------------------------------------------------
				INSERT INTO @Determinants (idfDeterminantValue, idfsBaseReference)
				SELECT
					idfDeterminantValue,
					idfsBaseReference
				FROM
					ffDeterminantValue
				WHERE
					idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of each Section and its Template association							  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsSection FROM @Sections WHERE idfsSectionNew IS NULL)
					BEGIN
						--Get another recored that hasn't been converted yet
						SELECT TOP 1 @idfsSection = idfsSection FROM @Sections WHERE idfsSectionNew IS NULL
						SELECT @intOrder = intOrder FROM ffSectionDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsSection = @idfsSection
						
						--SELECT
						--	@idfsParentSection	= idfsParentSection,
						--	@idfsFormType		= idfsFormType,
						--	@intOrder			= S.intOrder,
						--	@blnGrid			= blnGrid,
						--	@blnFixedRowset		= blnFixedRowset,
						--	@idfsMatrixType		= idfsMatrixType,
						--	@DefaultName		= B.strDefault,
						--	@NationalName		= ISNULL(SNT.[strTextString], B.[strDefault]) 
						--FROM
						--	ffSection S
						--INNER JOIN dbo.trtBaseReference B
						--ON B.[idfsBaseReference] = S.[idfsSection]
						--   AND B.[intRowStatus] = 0  
						--LEFT JOIN dbo.trtStringNameTranslation SNT
						--ON SNT.[idfsBaseReference] = S.[idfsSection]
						--   AND SNT.idfsLanguage = @langid_int
						--   AND SNT.[intRowStatus] = 0
						--WHERE
						--	idfsSection = @idfsSection
							
						--Reset to grab a new id each iteration
						--SET @idfsSectionNew = NULL

						--Create another Section, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsSectionNew OUTPUT,19000101,@LangID,@DefaultName,@NationalName,0

						--IF @idfsSectionNew IS NOT NULL 
						--	BEGIN
								--Create Global Reference for use by subsequential steps
								--INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsSection, @idfsSectionNew)
								----INSERT INTO @SectionSetResults
								--INSERT INTO @SupressSelect
								--EXEC USP_ADMIN_FF_Sections_SET 
								--	@idfsSection		= @idfsSectionNew, 
								--	@idfsParentSection	= @idfsParentSection, 
								--	@idfsFormType		= @idfsFormType,
								--	@intOrder			= @intOrder,
								--	@blnGrid			= @blnGrid,
								--	@blnFixedRowset		= @blnFixedRowset,
								--	@idfsMatrixType		= @idfsMatrixType,
								--	@intRowStatus		= @intRowStatus,
								--	@User				= @User,
								--	@CopyOnly			= 1

								--Create entry for the association of this new Section against the new Template
								INSERT INTO @SupressSelect
								EXEC USP_ADMIN_FF_SectionTemplate_SET 
									@LangId = @LangID, 
									@idfsSection = @idfsSection, 
									@idfsFormTemplate = @idfsFormTemplateNew,
									@User = @User

								UPDATE
									ffSectionDesignOption
								SET
									intOrder = @intOrder
								WHERE
									idfsFormTemplate = @idfsFormTemplate AND
									idfsSection = @idfsSection

								--Update the temporary table, to mark it as converted
								UPDATE
									@Sections
								SET
									idfsSectionNew = @idfsSection
								WHERE
									idfsSection = @idfsSection

								UPDATE
									@Parameters
								SET
									idfsSectionNew = @idfsSection
								WHERE
									idfsSection = @idfsSection
									
								--Soft delete the old section, from the ffSection table
								--UPDATE 
								--	ffSection
								--SET
								--	intRowStatus = 1
								--WHERE
								--	idfsSection = @idfsSection
							--END
					END
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of each Parameter and its Template association						  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsParameter FROM @Parameters WHERE idfsParameterNew IS NULL)
					BEGIN
						--Get another record that hasn't been converted yet
						SELECT TOP 1 @idfsParameter = idfsParameter FROM @Parameters WHERE idfsParameterNew IS NULL
						SELECT @intOrder = intOrder FROM ffParameterDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsParameter = @idfsParameter
						SELECT @idfsEditMode = idfsEditMode FROM ffParameterForTemplate WHERE idfsFormTemplate = @idfsFormTemplate AND idfsParameter = @idfsParameter

						--Grab the details for the current parameter
						--SELECT
						--	@idfsSection			= P.idfsSection,
						--	@idfsParameterCaption	= P.idfsParameterCaption,
						--	@idfsParameterType		= P.idfsParameterType,
						--	@idfsFormType			= P.idfsFormType,
						--	@idfsEditor				= P.idfsEditor,
						--	@strNote				= P.strNote,
						--	@intOrder				= P.intOrder,
						--	@intHACode				= P.intHACode,
						--	@DefaultName			= ISNULL(B2.[strDefault], ''),
						--	@DefaultLongName		= ISNULL(B1.[strDefault], ''),
						--	@NationalName			= ISNULL(SNT2.[strTextString], B2.[strDefault]),
						--	@NationalLongName		= ISNULL(SNT1.[strTextString], B1.[strDefault])
						--FROM
						--	ffParameter P
						--INNER JOIN dbo.trtBaseReference B1
						--ON B1.[idfsBaseReference] = P.[idfsParameter]
						--	AND B1.[intRowStatus] = 0
						--LEFT JOIN dbo.trtBaseReference B2
						--ON B2.[idfsBaseReference] = P.[idfsParameterCaption]
						--	AND B2.[intRowStatus] = 0
						--LEFT JOIN dbo.trtStringNameTranslation SNT1
						--ON (SNT1.[idfsBaseReference] = P.[idfsParameter]
						--	AND SNT1.[idfsLanguage] = @langid_int)
						--	AND SNT1.[intRowStatus] = 0
						--LEFT JOIN dbo.trtStringNameTranslation SNT2
						--ON (SNT2.[idfsBaseReference] = P.[idfsParameterCaption]
						--	AND SNT2.[idfsLanguage] = @langid_int)
						--	AND SNT2.[intRowStatus] = 0
						--WHERE
						--	P.idfsParameter = @idfsParameter
							
						--Reset to grab a new id each iteration
						--SET @idfsParameterNew = NULL

						----Create another parameter, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsParameterNew OUTPUT, 19000066/*'rftParameter'*/,@LangID, @DefaultLongName, @NationalLongName, 0

						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsParameterCaption OUTPUT, 19000070 /*'rftParameterToolTip'*/,@LangID, @DefaultName, @NationalName, 0

						----Create Global Reference for use by subsequential steps
						--INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsParameter, @idfsParameterNew)

						--Obtain the id for the newly copied section
						--SELECT
						--	@idfsSectionNew = idfsSectionNew
						--FROM
						--	@Parameters
						--WHERE
						--	idfsParameter = @idfsParameter

						--Create the copy of the existing Parameter
						--INSERT INTO @Supress_USP_ADMIN_FF_Parameters_SET
						--EXEC USP_ADMIN_FF_Parameters_SET 
						--	@LangID					= @LangID,
						--	@idfsSection			= @idfsSectionNew, 
						--	@idfsFormType			= @idfsFormType,
						--	@idfsParameterType		= @idfsParameterType,
						--	@idfsEditor				= @idfsEditor,
						--	@intHACode				= @intHACode,
						--	@intOrder				= @intOrder,
						--	@strNote				= @strNote,
						--	@DefaultName			= @DefaultName,
						--	@NationalName			= @NationalName,
						--	@DefaultLongName		= @DefaultLongName,
						--	@NationalLongName		= @NationalLongName,
						--	@idfsParameter			= @idfsParameterNew,
						--	@idfsParameterCaption	= @idfsParameterCaption,
						--	@User					= @User,
						--	@intRowStatus			= 0,
						--	@CopyOnly				= 1

						--Create entry for the association of this new Section against the new Template
						--INSERT INTO @Supress_USP_ADMIN_FF_ParameterTemplate_SET
						EXEC USP_ADMIN_FF_ParameterTemplateForCopy_SET
							@LangID= @LangID,
							@idfsParameter = @idfsParameter, 
							@idfsFormTemplate = @idfsFormTemplateNew,
							@User = @User,
							@CopyOnly = 1,
							@FunctionCall = 1

						--Apply ordering settings
						UPDATE
							ffParameterDesignOption
						SET
							intOrder = @intOrder
						WHERE
							idfsFormTemplate = @idfsFormTemplateNew AND
							idfsParameter = @idfsParameter

						--Apply Edit Mode (Mandatory or Ordinary)
						UPDATE
							ffParameterForTemplate
						SET
							idfsEditMode = @idfsEditMode
						WHERE
							idfsFormTemplate = @idfsFormTemplateNew AND
							idfsParameter = @idfsParameter

						--Update the temporary table, to mark it as converted
						UPDATE
							@Parameters
						SET
							idfsParameterNew = @idfsParameter
						WHERE
							idfsParameter = @idfsParameter


						--Soft delete the old section, from the ffSection table
						--UPDATE 
						--	ffParameter
						--SET
						--	intRowStatus = 1
						--WHERE
						--	idfsParameter = @idfsParameter

					END
				----------------------------------------------------------------------------------------

				--Enumerate through all determinants that are related to the Template
				WHILE EXISTS (SELECT idfDeterminantValue FROM @Determinants)
					BEGIN
						--Grab the first items in the list
						SELECT
							TOP 1
							@idfDeterminantValue = idfDeterminantValue,
							@idfsBaseReference = idfsBaseReference
						FROM
							@Determinants

						--Create the copy of the existing entry
						INSERT INTO @SupressSelect
						EXEC USP_ADMIN_FF_Determinant_SET @idfsDiagnosisGroup = @idfsBaseReference, 
														@idfsFormTemplate = @idfsFormTemplateNew, 
														@User = @User, 
														@intRowStatus = 0, 
														@FunctionCall = 1,
														@EventTypeId =10025120,
														@SiteId = @idfsSite,
														@UserId = @UserId,
														@LocationId = NULL

						--Disable
						UPDATE
							ffDeterminantValue
						SET
							intRowStatus = 1
						WHERE
							idfDeterminantValue = @idfDeterminantValue

						DELETE
						FROM
							@Determinants
						WHERE
							idfDeterminantValue = @idfDeterminantValue
					END

				----------------------------------------------------------------------------------------
				--Make a copy of each Rule															  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsRule FROM @Rules WHERE idfsRuleNew IS NULL)
					BEGIN
						--Get another record that hasn't been converted yet
						SELECT
							TOP 1 @idfsRule = idfsRule
						FROM
							@Rules
						WHERE
							idfsRuleNew IS NULL

						--Reset @RuleDetailResults, so that it will only have one row at a time in it
						DELETE FROM @RuleDetailResults

						--Grab the details for the current Rule
						INSERT INTO @RuleDetailResults
						EXEC USP_ADMIN_FF_Rule_GetDetails @langid=@LangId, @idfsRule = @idfsRule

						SELECT
							@idfsRule = idfsRule,
							@DefaultRuleName = defaultRuleName,
							@NationalRuleName = RuleName,
							@DefaultRuleMessage = defaultRuleMessage,
							@NationalRuleMessage = RuleMessage,
							@idfsRuleMessage = idfsRuleMessage,
							@idfsCheckPoint = idfsCheckPoint,
							@idfsRuleFunction = idfsRuleFunction,
							@blnNot = blnNot,
							@idfsRuleAction = idfsRuleAction,
							@strActionParameters = strActionParameters,
							@idfsFunctionParameter = idfsFunctionParameter,
							@strFillValue = FillValue
						FROM
							@RuleDetailResults
						
						--Reset to grab a new id each iteration
						--SET @idfsRuleNew = -1

						--Create another Rule, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						EXEC dbo.USSP_GBL_BaseReference_SET @ReferenceID = @idfsRuleNew OUTPUT, @ReferenceType = 19000029, @LangId = @LangID, @DefaultName = @DefaultName, @NationalName = @NationalName, @System = 0

						INSERT INTO @SupressSelect
						EXEC dbo.USSP_GBL_BaseReference_SET @idfsRuleMessage OUTPUT, 19000032, @LangID, @MessageText, @MessageNationalText, 0
						
						--Create Global Reference for use by subsequential steps
						INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsRule, @idfsRuleNew)

						--Reset the Action Parameters Table
						DELETE FROM @ActionParameters
						
						--Create table from string "Parameters" of the current rule details
						INSERT INTO @ActionParameters (idfsParameter)
						SELECT
							CAST(L.value AS BIGINT) AS idfsParameter
						FROM
							[dbo].[FN_GBL_SYS_SplitList](@strActionParameters, 0, ',') L

						--Get the conversion of the idfsParameter from its old value for the Function that the parameter is using.
						SELECT
							@idfsFunctionParameterNew = idfsNew
						FROM
							@GlobalReference
						WHERE
							idfs = @idfsFunctionParameter

						
						--Enumerate through all Action Parameters, that are associated with the rule
						WHILE EXISTS(SELECT idfsParameter FROM @ActionParameters)
							BEGIN
								SELECT 
									TOP 1 @idfsActionParameter = idfsParameter
								FROM
									@ActionParameters
									
								--Get the conversion of the idfsParameter from its old value for the Action that the parameter is using.
								SELECT
									@idfsActionParameterNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfsActionParameter

								--Create the copy of the existing Parameter
								--INSERT INTO @SupressSelect
								EXEC USP_ADMIN_FF_Rules_SET
									@idfsRule = @idfsRuleNew,
									@idfsFormTemplate = @idfsFormTemplateNew,
									@idfsCheckPoint = @idfsCheckPoint,
									@idfsRuleFunction = @idfsRuleFunction,
									@idfsRuleAction = @idfsRuleAction,
									@DefaultName = @DefaultName,
									@NationalName = @NationalName,
									@MessageText = @MessageText,
									@MessageNationalText = @MessageNationalText,
									@blnNot = @blnNot,
									@LangID = @LangID,
									@idfsRuleMessage = @idfsRuleMessage,
									@idfsFunctionParameter = @idfsFunctionParameterNew,
									@idfsActionParameter = @idfsActionParameterNew,
									@User = @User,
									@strFillValue = @strFillValue,
									@strCompareValue = @strCompareValue,
									@intRowStatus = 0,
									@FunctionCall = 1,
									@CopyOnly = 1

								DELETE FROM @ActionParameters WHERE idfsParameter = @idfsActionParameter
							END

						--Enumerate through all Constants, that are related to the Rule
						WHILE EXISTS(SELECT idfRuleConstant FROM @RuleConstants)
							BEGIN
								SELECT
									TOP 1
									@idfRuleConstant = idfRuleConstant,
									@idfsRule = idfsRule,
									@varConstant = varConstant
								FROM
									@RuleConstants

								--Get a new row id
								INSERT INTO @SupressSelect
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'ffRuleConstant', @idfRuleConstantNew OUTPUT;

								--Get the newly created id for the old entry.
								SELECT
									@idfRuleConstantNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfRuleConstant

								--Get the newly created id for the old entry.
								SELECT
									@idfsRuleNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfsRuleNew

								--Create the new Record
								INSERT INTO ffRuleConstant (
									idfRuleConstant, 
									idfsRule, 
									varConstant, 
									intRowStatus,
									AuditCreateDTM,
									AuditCreateUser
								)
								VALUES (
									@idfRuleConstantNew,
									@idfsRuleNew,
									@varConstant,
									0,
									GETDATE(),
									@User
								)
								
								--Delete the top record so that continous looping doesn't occur to produce records over and over
								DELETE 
								FROM 
									@RuleConstants
								WHERE
									idfRuleConstant = @idfRuleConstant
							END
						
						--Update the temporary table, to mark it as converted
						UPDATE
							@Rules
						SET
							idfsRuleNew = @idfsRuleNew
						WHERE
							idfsRule = @idfsRule
						
						--Soft delete the old section, from the ffSection table
						UPDATE 
							ffRule
						SET
							intRowStatus = 1
						WHERE
							idfsRule= @idfsRule

					END
				----------------------------------------------------------------------------------------

				--USP_ADMIN_FF_Parameter_Copy
				--USP_ADMIN_FF_Section_Copy
				--SELECT * FROM @SectionsParameters
				--USP_ADMIN_FF_TemplateSectionOrder_Set
				--USP_ADMIN_FF_RequiredParameter_SET
				--USP_ADMIN_FF_ParameterDesignOptions_SET
				--USP_ADMIN_FF_Parameters_SET
				--USP_ADMIN_FF_ParameterFixedPresetValue_SET
				--USP_ADMIN_FF_ParameterTypes_SET
				--USP_ADMIN_FF_ParameterTemplate_SET
				--USP_ADMIN_FF_RuleConstant_SET
				--USP_ADMIN_FF_RuleParameterForAction_SET
				--USP_ADMIN_FF_RuleParameterForFunction_SET
				--USP_ADMIN_FF_Rules_SET
				--USP_ADMIN_FF_SectionDesignOptions_SET
				--USP_ADMIN_FF_Sections_SET
				--USP_ADMIN_FF_SectionTemplate_SET
				--USP_ADMIN_FF_SectionTemplateRecursive_SET ????????????????
				--USP_ADMIN_FF_Template_SET
				--USP_ADMIN_FF_TemplateDeterminantValues_SET
				--USP_ADMIN_FF_TemplateParameterOrder_Set
				--USP_ADMIN_FF_Determinant_SET

			--END
		
		--If any observations are made, then the following must be copied
		--select * from ffDeterminantValue where idfsFormTemplate = 9871670000000 

		IF @idfsFormTemplateNew IS NULL
			BEGIN
				SET @idfsFormTemplateNew = @idfsFormTemplate
			END

		SELECT	@returnCode as ReturnCode, @returnMsg as ReturnMessage, @idfsFormTemplateNew As idfsFormTemplate
	END TRY

	BEGIN CATCH

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		throw;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_DIAGNOSISREFERENCE_GETList]...';


GO
--=================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_GETList
--
-- Description:	Returns list of diagnosis/disease references
--							
-- Author:  Philip Shaffer
--
-- Revision History:
-- Name				 Date		 Change Detail
-- ----------------	 ----------	 -------------------------------------------------------------------
-- Doug Albanese	 07/16/2021	 Initial Release
-- Doug Albanese	 07/07/2022	 Rewrote entire SP for better performance and filtering of correct diagnosises, used for the FFD Determinants
-- Doug Albanese	 09/22/2022	 Rewrite to include other determinant types that aren't disease releated
-- Doug Albanese	 02/08/2023	 Changed how exlucsions are determined for the Determinants list.
-- Doug Albanese	 02/16/2023	 Changing the method on pulling determinanta again. Found another problem that didn't work for all situations
-- Doug Albanese	 03/27/2023	 Added Fiter for "Using Type" (Standard)
--
-- Test Code:
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en', NULL, NULL
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en', 'Hu', NULL
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en', NULL, 32
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_DIAGNOSISREFERENCE_GETList] 
	@LangID				   NVARCHAR(50)
	,@idfsFormTemplate	   BIGINT
	,@idfsFormType		   BIGINT
AS
BEGIN
	DECLARE @AccessoryCode INT = 510
	DECLARE @NonDisease	   BIT = 0

	DECLARE @idfsDiagnosisExclusions TABLE (
		idfsDiagnosis		BIGINT
	)

   DECLARE @Determinants TABLE (
	  idfsDiagnosis BIGINT,
	  strName  NVARCHAR(200)
   )

   BEGIN TRY
	  IF (@idfsFormType = 10034018 or @idfsFormType = 10034019) --Test Details / Test Run
		 BEGIN
			SET @NonDisease = 1

			INSERT INTO @Determinants
			SELECT
			   BR.idfsBaseReference AS idfsDiagnosis,
			   BRT.name AS strName
			FROM 
			   trtBaseReference BR
			INNER JOIN FN_GBL_ReferenceRepair(@LangID, 19000097) BRT
			ON BRT.idfsReference = BR.idfsBaseReference
			WHERE
			   BR.intRowStatus = 0
		 END

	  IF @idfsFormType = 10034025 --Vector type specific data
		 BEGIN
			SET @NonDisease = 1

			INSERT INTO @Determinants
			SELECT
			   VT.idfsVectorType AS idfsDiagnosis,
			   VTT.name AS strName
			FROM 
			   trtVectorType VT
			INNER JOIN FN_GBL_ReferenceRepair(@LangID, 19000140) VTT
			ON VTT.idfsReference = VT.idfsVectorType
			WHERE
			   VT.intRowStatus = 0
		 END

	   DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS',
	   @returnCode BIGINT = 0;
	
	  IF @NonDisease = 0
		 BEGIN
			
			  SELECT
				  @AccessoryCode = intHACode 
			  FROM 
				  trtBaseReference 
			  WHERE 
				  idfsReferenceType = 19000034 AND
				  introwStatus = 0 AND
				  idfsBaseReference = @idfsFormType
		
			  IF (@AccessoryCode IS NULL) SET @AccessoryCode = 510

			  INSERT INTO @idfsDiagnosisExclusions
			  SELECT
				  dv.idfsBaseReference
			  FROM
				  ffDeterminantValue dv
			  WHERE
				  dv.idfsFormTemplate = @idfsFormTemplate AND
				  dv.intRowStatus = 0	
			
			INSERT INTO @Determinants
			  SELECT d.idfsDiagnosis,
				  dbr.[name] AS strName
			  FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
			  INNER JOIN dbo.trtDiagnosis d
				  ON d.idfsDiagnosis = dbr.idfsReference
			  LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
				  ON d.idfsUsingType = ut.idfsReference
			  WHERE (
					  dbr.intHACode IS NULL
					  OR dbr.intHACode > 0
					  )
				  AND d.intRowStatus = 0
				  AND dbr.intRowStatus = 0
				  AND (
				  (
					  @AccessoryCode IN (
						  SELECT *
						  FROM dbo.FN_GBL_SplitHACode(dbr.intHaCode, 510)
						  )
					  )
				  OR (@AccessoryCode IS NULL)
				  ) AND
				  idfsDiagnosis NOT IN (
					  SELECT idfsDiagnosis FROM @idfsDiagnosisExclusions
				  ) AND
				  d.idfsUsingType = 10020001
			  ORDER BY dbr.[name];
		 ENd


		 SELECT
			idfsDiagnosis,
			strName
		 FROM
			@Determinants
		 ORDER BY
			strName

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_Parameter_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_Parameter_GET
-- Description: Gets list of the Parameters.
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese	2/10/2020	Initial release for single parameter grab for Flex Form Editor.
-- Doug Albanese	07/14/2021	Added Parameter Type for return
-- Doug Albanese	03/21/2023	Swapped out the language id function with the new method
-- ================================================================================================
/*
exec dbo.spFFGetParameters 'en', null, 10034012
*/
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_Parameter_GET] (
	@LangID NVARCHAR(50) = NULL
	,@idfsParameter BIGINT = NULL
	)
AS
BEGIN
	SET NOCOUNT ON;

	IF (@LangID IS NULL)
		SET @LangID = 'en';

	DECLARE @langid_int BIGINT
		,@returnCode BIGINT
		,@returnMsg NVARCHAR(MAX)
	DECLARE @ParameterUsed AS BIT

	BEGIN TRY
		SET @langid_int =dbo.FN_GBL_LanguageCode_GET(@LangID)
		
		IF (EXISTS(SELECT TOP 1 1 
			FROM dbo.tlbActivityParameters
			WHERE [idfsParameter] = @idfsParameter))
		SET @ParameterUsed = 1;

		SELECT P.idfsEditor
			,ISNULL(E.strDefault, '') AS [Editor]
			,P.idfsParameterType
			,ISNULL(FR1.[name], FR1.[strDefault]) AS [ParameterTypeName]
			,ISNULL(B2.[strDefault], '') AS [DefaultName]
			,ISNULL(B1.[strDefault], '') AS [DefaultLongName]
			,ISNULL(SNT2.[strTextString], B2.[strDefault]) AS [NationalName]
			,ISNULL(SNT1.[strTextString], B1.[strDefault]) AS [NationalLongName],
			coalesce(@ParameterUsed,0) As ParameterUsed
		FROM [dbo].[ffParameter] P
		INNER JOIN dbo.trtBaseReference B1 ON B1.[idfsBaseReference] = P.[idfsParameter]
			AND B1.[intRowStatus] = 0
		LEFT JOIN dbo.trtBaseReference B2 ON B2.[idfsBaseReference] = P.[idfsParameterCaption]
			AND B2.[intRowStatus] = 0
		LEFT JOIN dbo.FN_GBL_Reference_List_GET(@LangID, 19000071) FR1 ON FR1.[idfsReference] = P.[idfsParameterType]
		LEFT JOIN dbo.trtStringNameTranslation SNT1 ON (
				SNT1.[idfsBaseReference] = P.[idfsParameter]
				AND SNT1.[idfsLanguage] = @langid_int
				)
			AND SNT1.[intRowStatus] = 0
		LEFT JOIN dbo.trtStringNameTranslation SNT2 ON (
				SNT2.[idfsBaseReference] = P.[idfsParameterCaption]
				AND SNT2.[idfsLanguage] = @langid_int
				)
			AND SNT2.[intRowStatus] = 0
		LEFT JOIN dbo.FN_GBL_Reference_List_GET(@LangID, 19000067) E ON E.idfsReference = P.idfsEditor
		WHERE P.idfsParameter = @idfsParameter
			AND P.intRowStatus = 0
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ParameterTypeEditorMapping_GetList]...';


GO
--*************************************************************
-- Name 				: USP_ADMIN_FF_ParameterTypeEditorMapping_GetList
-- Description			: For generating mapping information between Parameter Types and Editors for the Flex Form Designer
--          
-- Author               : Doug Albanese
-- Revision History:
-- Name			  Date			 Change Detail
-- Doug Albanese  11/02/2022	 Initial Release
-- Doug Albanese  12/15/2022	 New mapping for numeric type
-- Doug Albanese  01/27/2023	 Added a new mapping for Total/Summing fields to use "Numeric" types
-- Doug Albanese  03/14/2023	 Editor Type mapping correction
-- Testing code:
--
--EXEC	USP_ADMIN_FF_ParameterTypeEditorMapping_GetList @LanguageID = 'en-us', @idfsParameterType = 10067008
--
--*************************************************************
ALTER PROCEDURE[dbo].[USP_ADMIN_FF_ParameterTypeEditorMapping_GetList]
(		
	  @LanguageID		   NVARCHAR(50),
	  @idfsParameterType   BIGINT
)
AS
BEGIN
   BEGIN TRY


	  DECLARE @Mapping TABLE (
		 idfsBaseReference BIGINT,
		 idfsEditor NVARCHAR(200),
		 Editor NVARCHAR(MAX)
	  )

	  INSERT INTO @Mapping (idfsBaseReference, idfsEditor)
	  SELECT
		 BR.idfsBaseReference,
		 COALESCE(BR.strBaseReferenceCode, 'editCombo') AS idfsEditor
	  FROM
		 trtBaseReference BR
	  LEFT JOIN ffParameterType PT
	  ON PT.idfsParameterType = BR.idfsBaseReference
	  WHERE
		 BR.idfsReferenceType in (19000071,19000067) AND
		 (PT.idfsReferenceType IS NOT NULL OR BR.strBaseReferenceCode IS NOT NULL) AND
		 BR.idfsBaseReference = @idfsParameterType

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067001', 
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067001)
	  WHERE 
		 idfsEditor in ('parBoolean','editCheck')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067002',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067002)
	  WHERE 
		 idfsEditor in ('editCombo','parDiseaseList','parInvType','parProphAction','parSanAction','parSpecies')

	  UPDATE @Mapping
	  SET 
		 idfsEditor = '10067008,10067006',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067008) + ',' +
				  dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067006)
	  WHERE idfsEditor IN ('editText','parString')

	  UPDATE @Mapping
	  SET	  
		 idfsEditor = '10067003',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067003)
	  WHERE 
		 idfsEditor in ('editDate','parDate')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067004',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067004)
	  WHERE idfsEditor in ('editDateTime','parDatetime')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '217190000000',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,217190000000)
	  WHERE idfsEditor in ('editEmpty')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '217210000000',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,217210000000)
	  WHERE idfsEditor in ('editRadio','fpt')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067006',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067006)
	  WHERE idfsEditor in ('editMemo')

	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067009,10071061',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067009) + ',' +
				  dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10071061)
	  WHERE idfsEditor in ('editUpDown')

	  	  UPDATE @Mapping
	  SET
		 idfsEditor = '10067009,10067010,10067011',
		 Editor = dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067009) + ',' +
				  dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067010) + ',' +
				  dbo.FN_GBL_GetBaseReferenceTranslation(@LanguageID,10067011)
	  WHERE idfsEditor in ('parNumeric','parNumericPositive','parNumericInteger')

	  SELECT 
		 idfsBaseReference,
		 idfsEditor,
		 Editor
	  FROM 
		 @Mapping 

	END TRY  

	BEGIN CATCH 
		THROW;
	END CATCH; 
		
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_TemplateDeterminantValues_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_TemplateDeterminantValues_GET
-- Description: Return list of Template Determinant Values.
--          
-- Revision History:
-- Name            Date       Change
-- --------------- ---------- --------------------------------------------------------------------
-- Kishore Kodru    11/28/2018 Initial release for new API.
-- Doug Albanese	03/21/2023 Swapped out the language code function
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_TemplateDeterminantValues_GET]
(
	@LangID NVARCHAR(50) = NULL
	,@idfsFormTemplate BIGINT = NULL	
)
AS
BEGIN	
	SET NOCOUNT ON;

	IF (@LangID IS NULL)
		SET @LangID = 'en';
	DECLARE 
		@langid_int BIGINT,
		@returnCode BIGINT,
		@returnMsg  NVARCHAR(MAX) 

	BEGIN TRY
		BEGIN  TRANSACTION;
		SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);

		SELECT DV.idfDeterminantValue
			   ,FT.idfsFormTemplate
		       ,FT.idfsFormType
		       ,ISNULL(DV.idfsBaseReference, DV.idfsGISBaseReference) AS [DeterminantValue]
		       ,CASE WHEN (DV.idfsBaseReference IS NOT NULL)
					 THEN (SELECT [strDefault]
						   FROM dbo.trtBaseReference
						   WHERE [idfsBaseReference] = DV.idfsBaseReference
								 AND [intRowStatus] = 0)
		       		 ELSE
		       			  (SELECT [strDefault]
						   FROM dbo.gisBaseReference
						   WHERE [idfsGISBaseReference] = DV.idfsGISBaseReference
								 AND DV.intRowStatus = 0)
		       		END AS [DeterminantDefaultName]
		       ,CASE WHEN (DV.idfsBaseReference IS NOT NULL)
					 THEN (SELECT [strTextString]
						   FROM dbo.[trtStringNameTranslation]
						   WHERE [idfsBaseReference] = DV.idfsBaseReference
								 AND idfsLanguage = @langid_int 
								 AND [intRowStatus] = 0)
		       		 ELSE
		       			   (SELECT [strTextString]
						    FROM dbo.[gisStringNameTranslation]
						    WHERE [idfsGISBaseReference] = DV.idfsGISBaseReference
							      AND idfsLanguage = @langid_int
							      AND intRowStatus = 0)
		       		 END AS [DeterminantNationalName]			       		
		       ,[idfsBaseReference]
		       ,[idfsGISBaseReference]
		       ,CASE WHEN (DV.idfsBaseReference IS NOT NULL)
					 THEN (SELECT idfsReferenceType
						   FROM dbo.trtBaseReference
						   WHERE [idfsBaseReference] = DV.idfsBaseReference
						         AND [intRowStatus] = 0)
		       		 ELSE
		       			  (SELECT idfsGISReferenceType
						   FROM dbo.gisBaseReference
						   WHERE [idfsGISBaseReference] = DV.idfsGISBaseReference
								 AND DV.intRowStatus = 0)
		       		 END AS [DeterminantType]
		       ,CASE WHEN (DV.idfsBaseReference IS NOT NULL)
					 THEN (SELECT strReferenceTypeName
						   FROM dbo.trtReferenceType
						   WHERE [idfsReferenceType] IN (SELECT TOP 1 idfsReferenceType
														 FROM dbo.trtBaseReference
														 WHERE [idfsBaseReference] = DV.idfsBaseReference
														       AND [intRowStatus] = 0)
								 AND [intRowStatus] = 0)
		       		 ELSE 
						  (SELECT strGISReferenceTypeName
						   FROM dbo.gisReferenceType
						   WHERE [idfsGISReferenceType] IN (SELECT TOP 1 idfsGISReferenceType
															FROM dbo.gisBaseReference
															WHERE [idfsGISBaseReference] = DV.idfsGISBaseReference
																  AND DV.intRowStatus = 0)
								 AND intRowStatus = 0)
		       		 END AS [DeterminantTypeDefaultName]
		       ,ISNULL(CASE WHEN (DV.idfsBaseReference IS NOT NULL)
							THEN (SELECT [strTextString]
								  FROM dbo.[trtStringNameTranslation]
								  WHERE idfsLanguage = @langid_int
										AND [idfsBaseReference] IN (SELECT TOP 1 idfsReferenceType
																	FROM dbo.trtReferenceType
																	WHERE [idfsReferenceType] IN (SELECT TOP 1 idfsReferenceType
																								  FROM dbo.trtBaseReference
																								  WHERE [idfsBaseReference] = DV.idfsBaseReference
																										AND [intRowStatus] = 0)
																		  AND [intRowStatus] = 0)
										AND [intRowStatus] = 0)
		       				 ELSE 
								 (SELECT strTextString
								  FROM dbo.trtStringNameTranslation
								  WHERE idfsBaseReference = 10003001
										AND idfsLanguage = @langid_int
										AND [intRowStatus] = 0)
		       				 END 
		       	,CASE WHEN (DV.idfsBaseReference IS NOT NULL)
					  THEN (SELECT strReferenceTypeName
							FROM dbo.trtReferenceType
							WHERE [idfsReferenceType] IN (SELECT TOP 1 idfsReferenceType
														  FROM dbo.trtBaseReference
														  WHERE [idfsBaseReference] = DV.idfsBaseReference
																AND [intRowStatus] = 0) 
								  AND [intRowStatus] = 0)
		       		  ELSE
		       			   (SELECT strGISReferenceTypeName
						    FROM dbo.gisReferenceType
							WHERE idfsGISReferenceType = 19000001
								  AND intRowStatus = 0)
		       		  END) AS [DeterminantTypeNationalName]
		FROM dbo.[ffFormTemplate] FT
		INNER JOIN dbo.[ffDeterminantValue] DV
		ON FT.idfsFormTemplate = DV.idfsFormTemplate
		   AND DV.[intRowStatus]=0 
		WHERE ((FT.idfsFormTemplate = @idfsFormTemplate)
			   OR (@idfsFormTemplate IS NULL))				
			  AND FT.[intRowStatus] = 0
		ORDER BY [DeterminantNationalName]

		COMMIT TRANSACTION;
	END TRY 
	BEGIN CATCH   
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_TemplateSectionOrder_Set]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_TemplateSectionOrder_Set
-- Description: Changes the order of a Section
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese	04/07/2020	Initial release for new API.
-- Doug Albanese	10/20/2020	Added Auditing Information
-- Doug Albanese	10/28/2021	Refactoring to get EF to generate a proper return model
-- Doug Albanese	03/24/2023	Refactored the entire SP to swap the order of two sections.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_TemplateSectionOrder_Set] (
	@idfsFormTemplate			BIGINT,
	@idfsCurrentSection			BIGINT,
	@idfsDestinationSection		BIGINT,
	@User						NVARCHAR(50) = ''
)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		BEGIN TRANSACTION
		 DECLARE @returnCode INT = 0
         DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'

		 DECLARE @idfSectionDesignOptionCurrent		 BIGINT
		 DECLARE @idfsSectionCurrentOrder			 INT

		 DECLARE @idfSectionDesignOptionDestination	 BIGINT
		 DECLARE @idfsSectionDestinationOrder		 INT

		 --Collect Section details to be moved
		 SELECT
			@idfSectionDesignOptionCurrent = idfSectionDesignOption,
			@idfsSectionCurrentOrder = intOrder
		 FROM
			ffSectionDesignOption
		 WHERE
			idfsFormTemplate = @idfsFormTemplate AND
			idfsSection = @idfsCurrentSection AND
			intRowStatus = 0

		 --Collect Destination details for Section to be moved to
		 SELECT
			@idfSectionDesignOptionDestination = idfSectionDesignOption,
			@idfsSectionDestinationOrder = intOrder
		 FROM
			ffSectionDesignOption
		 WHERE
			idfsFormTemplate = @idfsFormTemplate AND
			idfsSection = @idfsDestinationSection AND
			intRowStatus = 0

		 --Swap order between Current and Destination sections
		 UPDATE
			ffSectionDesignOption
		 SET
			intOrder = @idfsSectionDestinationOrder,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @User
		 WHERE
			idfSectionDesignOption  = @idfSectionDesignOptionCurrent
	  
		 --Swap order between Current and Destination sections
		 UPDATE
			ffSectionDesignOption
		 SET
			intOrder = @idfsSectionCurrentOrder,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @User
		 WHERE
			idfSectionDesignOption  = @idfSectionDesignOptionDestination
   

		 SELECT @returnCode AS ReturnCode,
			   @returnMsg AS ReturnMessage

		COMMIT TRANSACTION;
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_OBJECT_ACCESS_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_OBJECT_ACCESS_SET
--
-- Description:	Inserts or updates object access records for use case SAUC62.
--                      
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- -------------------------------------------------------------------
-- Stephen Long    05/17/2020 Initial release.
-- Stephen Long    05/15/2021 Removed suppress select; EF does not need it.
-- Stephen Long    05/28/2021 Removed language ID as not needed for a set.
-- Stephen Long    03/14/2023 Added data audit for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_OBJECT_ACCESS_SET]
(
    @ObjectAccessRecords NVARCHAR(MAX) = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
                @RowAction CHAR = NULL,
                @RowID BIGINT = NULL,
                @ObjectAccessID BIGINT = NULL,
                @ObjectOperationTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = NULL,
                @ObjectID BIGINT = NULL,
                @ActorID BIGINT = NULL,
                @SiteID BIGINT = NULL,
                @PermissionTypeID INT = NULL,
                @RowStatus INT = NULL,
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventID BIGINT = NULL,
                @DataAuditObjectTypeID BIGINT = 10017015, -- Data access 
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTableID BIGINT = 76160000000;      -- tstObjectAccess
        DECLARE @ObjectAccessBeforeEdit TABLE
        (
            ObjectAccessID BIGINT,
            ObjectOperationTypeID BIGINT,
            ObjectTypeID BIGINT,
            ObjectID BIGINT,
            ActorID BIGINT,
            SiteID BIGINT,
            PermissionTypeID INT
        );
        DECLARE @ObjectAccessAfterEdit TABLE
        (
            ObjectAccessID BIGINT,
            ObjectOperationTypeID BIGINT,
            ObjectTypeID BIGINT,
            ObjectID BIGINT,
            ActorID BIGINT,
            SiteID BIGINT,
            PermissionTypeID INT
        );
        DECLARE @ObjectAccessRecordsTemp TABLE
        (
            ObjectAccessID BIGINT NOT NULL,
            ObjectOperationTypeID BIGINT NOT NULL,
            ObjectTypeID BIGINT NOT NULL,
            ObjectID BIGINT NOT NULL,
            ActorID BIGINT NOT NULL,
            SiteID BIGINT NOT NULL,
            PermissionTypeID INT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        BEGIN TRANSACTION;

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        INSERT INTO @ObjectAccessRecordsTemp
        SELECT *
        FROM
            OPENJSON(@ObjectAccessRecords)
            WITH
            (
                ObjectAccessID BIGINT,
                ObjectOperationTypeID BIGINT,
                ObjectTypeID BIGINT,
                ObjectID BIGINT,
                ActorID BIGINT,
                SiteID BIGINT,
                PermissionTypeID INT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        WHILE EXISTS (SELECT * FROM @ObjectAccessRecordsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = ObjectAccessID,
                @ObjectAccessID = ObjectAccessID,
                @ObjectOperationTypeID = ObjectOperationTypeID,
                @ObjectTypeID = ObjectTypeID,
                @ObjectID = ObjectID,
                @ActorID = ActorID,
                @SiteID = SiteID,
                @PermissionTypeID = PermissionTypeID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ObjectAccessRecordsTemp;

            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.tstObjectAccess
                WHERE idfObjectAccess = @ObjectAccessID
                      AND intRowStatus = 0
            )
            BEGIN
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstObjectAccess',
                                                  @ObjectAccessID OUTPUT;

                INSERT INTO dbo.tstObjectAccess
                (
                    idfObjectAccess,
                    idfsObjectOperation,
                    idfsObjectType,
                    idfsObjectID,
                    idfActor,
                    idfsOnSite,
                    intPermission,
                    intRowStatus, 
                    SourceSystemNameID,
                    SourceSystemKeyValue
                )
                VALUES
                (@ObjectAccessID,
                 @ObjectOperationTypeID,
                 @ObjectTypeID,
                 @ObjectID,
                 @ActorID,
                 @SiteID,
                 @PermissionTypeID,
                 @RowStatus, 
                 10519002,
                 '[{"idfObjectAccess":' + CAST(@ObjectAccessID AS NVARCHAR(24)) + '}]'
                );

                -- Data audit
                SET @DataAuditEventTypeID = 10016001; -- Create data audit event type
                EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                          @AuditSiteID,
                                                          @DataAuditEventTypeID,
                                                          @DataAuditObjectTypeID,
                                                          @ObjectAccessID,
                                                          @ObjectTableID,
                                                          NULL,
                                                          @DataAuditEventID OUTPUT;

                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableID,
                 @ObjectAccessID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 NULL
                );
            -- End data audit
            END
            ELSE IF @RowAction = 'D'
            BEGIN
                DELETE FROM dbo.tstObjectAccess
                WHERE idfObjectAccess = @ObjectAccessID;

                -- Data audit
                SET @DataAuditEventTypeID = 10016002; -- Delete data audit event type
                EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                          @AuditSiteID,
                                                          @DataAuditEventTypeID,
                                                          @DataAuditObjectTypeID,
                                                          @ObjectAccessID,
                                                          @ObjectTableID,
                                                          NULL,
                                                          @DataAuditEventID OUTPUT;

                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       @ObjectAccessID,
                       @AuditUserName,
                       NULL;
            -- End data audit
            END
            ELSE IF @RowAction = 'U'
            BEGIN
                -- Data audit
                SET @DataAuditEventTypeID = 10016003; -- Edit data audit event type
                EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                          @AuditSiteID,
                                                          @DataAuditEventTypeID,
                                                          @DataAuditObjectTypeID,
                                                          @ObjectAccessID,
                                                          @ObjectTableID,
                                                          NULL,
                                                          @DataAuditEventID OUTPUT;

                INSERT INTO @ObjectAccessBeforeEdit
                SELECT idfObjectAccess,
                       idfsObjectOperation,
                       idfsObjectType,
                       idfsObjectID,
                       idfActor,
                       idfsOnSite,
                       intPermission
                FROM dbo.tstObjectAccess
                WHERE idfObjectAccess = @ObjectAccessID;
                -- End data audit

                UPDATE dbo.tstObjectAccess
                SET idfsObjectOperation = @ObjectOperationTypeID,
                    idfsObjectType = @ObjectTypeID,
                    idfsObjectID = @ObjectID,
                    idfActor = @ActorID,
                    idfsOnSite = @SiteID,
                    intPermission = @PermissionTypeID,
                    intRowStatus = @RowStatus
                WHERE idfObjectAccess = @ObjectAccessID;

                -- Data audit
                INSERT INTO @ObjectAccessAfterEdit
                SELECT idfObjectAccess,
                       idfsObjectOperation,
                       idfsObjectType,
                       idfsObjectID,
                       idfActor,
                       idfsOnSite,
                       intPermission
                FROM dbo.tstObjectAccess
                WHERE idfObjectAccess = @ObjectAccessID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue
                )
                SELECT @DataAuditEventID,
                       76160000000,
                       82000000000,
                       a.ObjectAccessID,
                       NULL,
                       b.ObjectOperationTypeID,
                       a.ObjectOperationTypeID
                FROM @ObjectAccessAfterEdit AS a
                    FULL JOIN @ObjectAccessBeforeEdit AS b
                        ON a.ObjectAccessID = b.ObjectAccessID
                WHERE (a.ObjectOperationTypeID <> b.ObjectOperationTypeID)
                      OR (
                             a.ObjectOperationTypeID IS NOT NULL
                             AND b.ObjectOperationTypeID IS NULL
                         )
                      OR (
                             a.ObjectOperationTypeID IS NULL
                             AND b.ObjectOperationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue
                )
                SELECT @DataAuditEventID,
                       76160000000,
                       82010000000,
                       a.ObjectAccessID,
                       NULL,
                       b.ObjectTypeID,
                       a.ObjectTypeID
                FROM @ObjectAccessAfterEdit AS a
                    FULL JOIN @ObjectAccessBeforeEdit AS b
                        ON a.ObjectAccessID = b.ObjectAccessID
                WHERE (a.ObjectTypeID <> b.ObjectTypeID)
                      OR (
                             a.ObjectTypeID IS NOT NULL
                             AND b.ObjectTypeID IS NULL
                         )
                      OR (
                             a.ObjectTypeID IS NULL
                             AND b.ObjectTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue
                )
                SELECT @DataAuditEventID,
                       76160000000,
                       81990000000,
                       a.ObjectAccessID,
                       NULL,
                       b.ObjectID,
                       a.ObjectID
                FROM @ObjectAccessAfterEdit AS a
                    FULL JOIN @ObjectAccessBeforeEdit AS b
                        ON a.ObjectAccessID = b.ObjectAccessID
                WHERE (a.ObjectID <> b.ObjectID)
                      OR (
                             a.ObjectID IS NOT NULL
                             AND b.ObjectID IS NULL
                         )
                      OR (
                             a.ObjectID IS NULL
                             AND b.ObjectID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue
                )
                SELECT @DataAuditEventID,
                       76160000000,
                       81980000000,
                       a.ObjectAccessID,
                       NULL,
                       b.ActorID,
                       a.ActorID
                FROM @ObjectAccessAfterEdit AS a
                    FULL JOIN @ObjectAccessBeforeEdit AS b
                        ON a.ObjectAccessID = b.ObjectAccessID
                WHERE (a.ActorID <> b.ActorID)
                      OR (
                             a.ActorID IS NOT NULL
                             AND b.ActorID IS NULL
                         )
                      OR (
                             a.ActorID IS NULL
                             AND b.ActorID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue
                )
                SELECT @DataAuditEventID,
                       76160000000,
                       82020000000,
                       a.ObjectAccessID,
                       NULL,
                       b.SiteID,
                       a.SiteID
                FROM @ObjectAccessAfterEdit AS a
                    FULL JOIN @ObjectAccessBeforeEdit AS b
                        ON a.ObjectAccessID = b.ObjectAccessID
                WHERE (a.SiteID <> b.SiteID)
                      OR (
                             a.SiteID IS NOT NULL
                             AND b.SiteID IS NULL
                         )
                      OR (
                             a.SiteID IS NULL
                             AND b.SiteID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue
                )
                SELECT @DataAuditEventID,
                       76160000000,
                       82030000000,
                       a.ObjectAccessID,
                       NULL,
                       b.PermissionTypeID,
                       a.PermissionTypeID
                FROM @ObjectAccessAfterEdit AS a
                    FULL JOIN @ObjectAccessBeforeEdit AS b
                        ON a.ObjectAccessID = b.ObjectAccessID
                WHERE (a.PermissionTypeID <> b.PermissionTypeID)
                      OR (
                             a.PermissionTypeID IS NOT NULL
                             AND b.PermissionTypeID IS NULL
                         )
                      OR (
                             a.PermissionTypeID IS NULL
                             AND b.PermissionTypeID IS NOT NULL
                         );
            END

            DELETE FROM @ObjectAccessRecordsTemp
            WHERE ObjectAccessID = @RowID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL]...';


GO
--=================================================================================================
-- Name: USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL
--
-- Description: Removes sample type derivative matrix record
--							
-- Author:		unknown
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Leo Tracchia		02/22/2023 Added data audit logic for deletes
-- Stephen Long     03/13/2023 Fix for object type ID for data audit and added audit user name.
--
-- Test Code:
-- exec USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL 6618200000000, 0
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL]
(
    @idfDerivativeForSampleType BIGINT,
    @deleteAnyway BIT = 0,
    @SiteId BIGINT,
    @UserId BIGINT,
    @AuditUserName NVARCHAR(200) 
)
AS
DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS',
        @returnCode BIGINT = 0,
        @idfUserId BIGINT = @UserId,
        @idfSiteId BIGINT = @SiteId,
        @idfsDataAuditEventType BIGINT = 10016002, -- Delete event type
        @idfsObjectType BIGINT = 10017068,
        @idfObject BIGINT = @idfDerivativeForSampleType,
        @idfObjectTable_trtDerivativeForSampleType BIGINT = 740850000000,
        @idfDataAuditEvent BIGINT = NULL;

BEGIN
    BEGIN TRY
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        UPDATE dbo.trtDerivativeForSampleType
        SET intRowStatus = 1, 
            AuditUpdateDTM = GETDATE(), 
            AuditUpdateUser = @AuditUserName 
        WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType;

        -- Data audit
        INSERT INTO @SuppressSelect
        EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @idfUserId,
                                                  @idfSiteId,
                                                  @idfsDataAuditEventType,
                                                  @idfsObjectType,
                                                  @idfObject,
                                                  @idfObjectTable_trtDerivativeForSampleType,
                                                  NULL,
                                                  @idfDataAuditEvent OUTPUT;

        INSERT INTO dbo.tauDataAuditDetailDelete
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfObject
        )
        VALUES
        (@idfDataAuditEvent, @idfObjectTable_trtDerivativeForSampleType, @idfObject);
        -- End data audit

        SELECT @returnCode 'returnCode',
               @returnMsg 'returnMessage';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_SET]...';


GO
/*
--Lamont Mitchell	3/36/22		Added new column intPreviousNumberValue to store previous values in uniquenumberingschema
-- Ann Xiong		03/14/2023	Implemented Data Audit

*/
-- exec USP_CONF_UNIQUENUMBERINGSCHEMA_SET 10057013,'Animal Group','Animal Group','AGP',null,'-',343,'en'
ALTER PROCEDURE [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_SET]
(
	@idfsNumberName BIGINT,
	--@strDefault NVARCHAR(400),
	@strName NVARCHAR(400),
	--@strPrefix NVARCHAR(10),
	@strSuffix NVARCHAR(10),
	@strSpecialCharacter NVARCHAR(10),
	@intNumberValue INT,
	@langId NVARCHAR(50),
	@intNextNumberValue INT=NULL

)
AS
	DECLARE @returnCode INT = 0 
	DECLARE @returnMsg NVARCHAR(50) = 'SUCCESS' 

	--Data Audit--
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017019;                         -- Object Numbering Scheme
	declare @idfObject bigint = @idfsNumberName;
	declare @idfObjectTable_trtStringNameTranslation  bigint = 75990000000;
	declare @idfObjectTable_tstNextNumbers bigint = 76130000000;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfUserID bigint;
	declare @idfSiteId bigint;

	DECLARE @trtStringNameTranslation_BeforeEdit TABLE
	(
        		BaseReferenceID BIGINT,
        		LanguageID BIGINT,
        		strTextString varchar(2000)
	);
	DECLARE @trtStringNameTranslation_AfterEdit TABLE
	(
        		BaseReferenceID BIGINT,
        		LanguageID BIGINT,
        		strTextString varchar(2000)
	);

	DECLARE @tstNextNumbers_BeforeEdit TABLE
	(
        		NumberNameID BIGINT,
        		intNumberValue BIGINT,
        		strSpecialChar varchar(2),
        		strSuffix varchar(50),
        		intPreviousNumberValue BIGINT
	);
	DECLARE @tstNextNumbers_AfterEdit TABLE
	(
        		NumberNameID BIGINT,
        		intNumberValue BIGINT,
        		strSpecialChar varchar(2),
        		strSuffix varchar(50),
        		intPreviousNumberValue BIGINT
	);

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation('Administrator') userInfo

	--Data Audit--
BEGIN
	BEGIN TRY
		
		Declare @intPreviousNumberValue BIGINT;
		SELECT @intPreviousNumberValue = intNumberValue from tstNextNumbers where idfsNumberName = @idfsNumberName		

		if (@intNextNumberValue IS NULL)
				SELECT @intNextNumberValue = intNumberValue+1 from tstNextNumbers where idfsNumberName = @idfsNumberName		

		--DECLARE @count INT = 0;
		--SET @count = (SELECT count(*) FROM tstNextNumbers WHERE (strDocumentName = @strName OR intNumberValue = @intNumberValue) AND idfsNumberName <> @idfsNumberName)
		----print @count

		--IF @count > 0
		--	BEGIN
		--		SET @returnMsg = 'DOES EXIST'
		--	END
		--ELSE
			--BEGIN
			 
				--UPDATE trtBaseReference set strDefault = @strDefault where idfsBaseReference = @idfsNumberName

           -- Data audit
		   --  tauDataAuditEvent  Event Type- Edit 
		   set @idfsDataAuditEventType =10016003;
		   -- insert record into tauDataAuditEvent - 
		   EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfsNumberName, @idfObjectTable_tstNextNumbers, @idfDataAuditEvent OUTPUT

           INSERT INTO @trtStringNameTranslation_BeforeEdit
           (
                    BaseReferenceID,
        			LanguageID,
        			strTextString
            )
            SELECT 	idfsBaseReference,
                    idfsLanguage,
					strTextString
            FROM	dbo.trtStringNameTranslation
            WHERE 	idfsBaseReference = @idfsNumberName AND idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@langId);

            -- End data audit

			UPDATE trtStringNameTranslation set strTextString = @strName where idfsBaseReference = @idfsNumberName AND idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@langId)

            -- Data audit
            INSERT INTO @trtStringNameTranslation_AfterEdit
            (
                    BaseReferenceID,
        			LanguageID,
        			strTextString
             )
             SELECT 	idfsBaseReference,
                    	idfsLanguage,
						strTextString
             FROM		dbo.trtStringNameTranslation
             WHERE 		idfsBaseReference = @idfsNumberName AND idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@langId);

             INSERT INTO dbo.tauDataAuditDetailUpdate
             (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue
           )
           SELECT		@idfDataAuditEvent,
                           @idfObjectTable_trtStringNameTranslation,
                           4578140000000,
                           a.BaseReferenceID,
                           a.LanguageID,
                           b.strTextString,
                           a.strTextString
            FROM	@trtStringNameTranslation_AfterEdit AS a
                        FULL JOIN @trtStringNameTranslation_BeforeEdit AS b
                            ON a.BaseReferenceID = b.BaseReferenceID AND a.LanguageID = b.LanguageID
            WHERE (a.strTextString <> b.strTextString)
                          OR (
                                 a.strTextString IS NOT NULL
                                 AND b.strTextString IS NULL
                             )
                          OR (
                                 a.strTextString IS NULL
                                 AND b.strTextString IS NOT NULL
                             );

            INSERT INTO @tstNextNumbers_BeforeEdit
            (
                    NumberNameID,
        			intNumberValue,
        			strSpecialChar,
        			strSuffix,
        			intPreviousNumberValue
            )
            SELECT 	idfsNumberName,
                    intNumberValue,
					strSpecialChar,
					strSuffix,
					intPreviousNumberValue
            FROM	dbo.tstNextNumbers
            WHERE 	idfsNumberName = @idfsNumberName;

            -- End data audit
			
			UPDATE tstNextNumbers 
			SET 
				intNumberValue = @intNumberValue, 
				strSpecialChar = @strSpecialCharacter,
				strSuffix = @strSuffix, 
				intPreviousNumberValue = @intNextNumberValue
			WHERE idfsNumberName = @idfsNumberName

            -- Data audit
            INSERT INTO @tstNextNumbers_AfterEdit
            (
                    NumberNameID,
        			intNumberValue,
        			strSpecialChar,
        			strSuffix,
        			intPreviousNumberValue
             )
             SELECT 	idfsNumberName,
                    	intNumberValue,
						strSpecialChar,
						strSuffix,
						intPreviousNumberValue
             FROM		dbo.tstNextNumbers
             WHERE 		idfsNumberName = @idfsNumberName;

			insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
			select	@idfDataAuditEvent,@idfObjectTable_tstNextNumbers, 81810000000,
					a.NumberNameID,NULL,
					a.intNumberValue,b.intNumberValue
			from	@tstNextNumbers_BeforeEdit a  inner join @tstNextNumbers_AfterEdit b 
					on a.NumberNameID = b.NumberNameID
			where	(a.intNumberValue <> b.intNumberValue) 
					or(a.intNumberValue is not null and b.intNumberValue is null)
					or(a.intNumberValue is null and b.intNumberValue is not null)

			insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tstNextNumbers, 51586990000097,
					a.NumberNameID,NULL,
					a.strSpecialChar,b.strSpecialChar
			from @tstNextNumbers_BeforeEdit a  inner join @tstNextNumbers_AfterEdit b 
					on a.NumberNameID = b.NumberNameID
			where (a.strSpecialChar <> b.strSpecialChar) 
					or(a.strSpecialChar is not null and b.strSpecialChar is null)
					or(a.strSpecialChar is null and b.strSpecialChar is not null)

			insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tstNextNumbers, 81860000000,
					a.NumberNameID,NULL,
					a.strSuffix,b.strSuffix
			from @tstNextNumbers_BeforeEdit a  inner join @tstNextNumbers_AfterEdit b 
					on a.NumberNameID = b.NumberNameID
			where (a.strSuffix <> b.strSuffix) 
					or(a.strSuffix is not null and b.strSuffix is null)
					or(a.strSuffix is null and b.strSuffix is not null)

			insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tstNextNumbers, 51586990000098,
					a.NumberNameID,NULL,
					a.intPreviousNumberValue,b.intPreviousNumberValue
			from @tstNextNumbers_BeforeEdit a  inner join @tstNextNumbers_AfterEdit b 
					on a.NumberNameID = b.NumberNameID
			where (a.intPreviousNumberValue <> b.intPreviousNumberValue) 
					or(a.intPreviousNumberValue is not null and b.intPreviousNumberValue is null)
					or(a.intPreviousNumberValue is null and b.intPreviousNumberValue is not null)
            -- End data audit
			--END
		SELECT @returnCode 'returnCode', @returnMsg 'returnMessage'

	END TRY

	BEGIN CATCH
		
		THROW

	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_SITE_GROUP_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_GBL_SITE_GROUP_GETDetail		
-- 
-- Description: Returns information about a site group based on the site group ID.
-- 
-- Revision History:
-- Name                   Date       Change Detail
-- ---------------------- ---------- -------------------------------------------------------------
-- Stephen Long           11/29/2019 Initial release.
-- Stephen Long           12/29/2019 Added row status to the query.
-- Stephen Long           06/19/2021 Changed for location hierarchy; renamed term rayon to 
--                                   administrative level and updated join.
-- Stephen Long           06/27/2021 Changed rayon join alias.
-- Stephen Long           07/26/2021 Added administrative levels, settlement and active status 
--                                   indicator fields.
-- Stephen Long           03/15/2023 Changed over to location hierarchy flattened.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_GBL_SITE_GROUP_GETDetail]
    @LanguageID NVARCHAR(50),
    @SiteGroupID BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT sg.idfSiteGroup AS SiteGroupID,
               sg.idfsSiteGroupType AS SiteGroupTypeID,
               siteGroupType.name AS SiteGroupTypeName,
               sg.idfsCentralSite AS CentralSiteID,
               s.strSiteName AS CentralSiteName,
               s.strSiteID AS CentralEIDSSSiteID,
               sg.strSiteGroupName AS SiteGroupName,
               lh.AdminLevel1ID AS CountryID,
               lh.AdminLevel2ID AS AdministrativeLevel1ID,
               lh.AdminLevel2Name AS AdministrativeLevel1Name,
               lh.AdminLevel3ID AS AdministrativeLevel2ID,
               lh.AdminLevel3Name AS AdministrativeLevel2Name,
               NULL AS AdministrativeLevel3ID,
               NULL AS AdministrativeLevel3Name,
               settlement.idfsReference AS SettlementID,
               settlement.name AS SettlementName,
               sg.strSiteGroupDescription AS SiteGroupDescription,
               (CASE
                    WHEN sg.intRowStatus = 0 THEN
                        'true'
                    ELSE
                        'false'
                END
               ) AS ActiveStatusIndicator,
               sg.intRowStatus AS RowStatus
        FROM dbo.tflSiteGroup sg
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = sg.idfsLocation
            LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                ON lh.idfsLocation = g.idfsLocation
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) settlement
                ON g.node.IsDescendantOf(settlement.node) = 1
            LEFT JOIN dbo.tstSite AS s
                ON s.idfsSite = sg.idfsCentralSite
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000524) AS siteGroupType
                ON siteGroupType.idfsReference = sg.idfsSiteGroupType
        WHERE sg.idfSiteGroup = @SiteGroupID;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_SITE_GROUP_GETList]...';


GO
-- ================================================================================================
-- Name: USP_GBL_SITE_GROUP_GETList		
-- 
-- Description: Returns a list of site groups.
--
-- Revision History:
--		
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/29/2019 Initial release.
-- Stephen Long     12/12/2019 Added central site ID to query.
-- Stephen Long     12/29/2019 Added distinct to account for site to site group join.
-- Stephen Long     06/24/2021 Added new pagination method and leading wild card on EIDSS site ID.
-- Stephen Long     06/27/2021 Removed unneeded fields and the site to site group join and 
--                             distinct; added gisLocation join.
-- Stephen Long     07/28/2021 Corrected administrative level name field.
-- Stephen Long     07/28/2022 Added site group type id where criteria.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Stephen Long     03/15/2023 Added group by.
-- Stephen Long     03/16/2023 Fixed total row count.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_GBL_SITE_GROUP_GETList]
    @LanguageID NVARCHAR(50),
    @SiteGroupTypeID BIGINT NULL,
    @SiteGroupName NVARCHAR(40) NULL,
    @AdministrativeLevelID BIGINT NULL,
    @CentralSiteID BIGINT NULL,
    @SiteID BIGINT NULL,
    @EIDSSSiteID NVARCHAR(36) NULL,
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'SiteGroupName',
    @SortOrder NVARCHAR(4) = 'ASC'
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        DECLARE @AdministrativeLevelNode AS HIERARCHYID;

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        WITH paging
        AS (SELECT sg.idfSiteGroup,
                   c = COUNT(*) OVER ()
            FROM dbo.tflSiteGroup sg
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = sg.idfsLocation
                LEFT JOIN dbo.gisStringNameTranslation snt
                    ON snt.idfsGISBaseReference = g.idfsLocation
                       AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                LEFT JOIN dbo.tflSiteToSiteGroup ssg
                    ON ssg.idfSiteGroup = sg.idfSiteGroup
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000524) siteGroupType
                    ON siteGroupType.idfsReference = sg.idfsSiteGroupType
            WHERE sg.intRowStatus = 0
                  AND (
                          sg.idfsCentralSite = @CentralSiteID
                          OR @CentralSiteID IS NULL
                      )
                  AND (
                          sg.idfsLocation = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          ssg.idfsSite = @SiteID
                          OR @SiteID IS NULL
                      )
                  AND (
                          sg.idfsSiteGroupType = @SiteGroupTypeID
                          OR @SiteGroupTypeID IS NULL
                      )
                  AND (
                          ssg.strSiteID LIKE '%' + @EIDSSSiteID + '%'
                          OR @EIDSSSiteID IS NULL
                      )
                  AND (
                          sg.strSiteGroupName LIKE '%' + @SiteGroupName + '%'
                          OR @SiteGroupName IS NULL
                      )
        GROUP BY sg.idfSiteGroup,
                 sg.strSiteGroupName,
                 --s.strTextString,
                 --b.strDefault,
                 sg.strSiteGroupDescription,
                 siteGroupType.name
            ORDER BY CASE
                         WHEN @SortColumn = 'SiteGroupName'
                              AND @SortOrder = 'ASC' THEN
                             sg.strSiteGroupName
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SiteGroupName'
                              AND @SortOrder = 'DESC' THEN
                             sg.strSiteGroupName
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'SiteGroupTypeName'
                              AND @SortOrder = 'ASC' THEN
                             siteGroupType.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SiteGroupTypeName'
                              AND @SortOrder = 'DESC' THEN
                             siteGroupType.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'SiteGroupDescription'
                              AND @SortOrder = 'ASC' THEN
                             sg.strSiteGroupDescription
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SiteGroupDescription'
                              AND @SortOrder = 'DESC' THEN
                             sg.strSiteGroupDescription
                     END DESC OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
           )
        SELECT sg.idfSiteGroup AS SiteGroupID,
               siteGroupType.name AS SiteGroupTypeName,
               sg.strSiteGroupName AS SiteGroupName,
               ISNULL(s.strTextString, b.strDefault) AS AdministrativeLevelName,
               sg.strSiteGroupDescription AS SiteGroupDescription,
               c AS [RowCount],
               (
                   SELECT COUNT(*) FROM dbo.tflSiteGroup WHERE intRowStatus = 0
               ) AS TotalRowCount,
               CurrentPage = @PageNumber,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
        FROM dbo.tflSiteGroup sg
            INNER JOIN paging
                ON paging.idfSiteGroup = sg.idfSiteGroup
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = sg.idfsLocation
            LEFT OUTER JOIN dbo.gisBaseReference b
                ON b.idfsGISBaseReference = g.idfsLocation
            LEFT JOIN dbo.gisStringNameTranslation s
                ON s.idfsGISBaseReference = g.idfsLocation
                   AND s.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000524) siteGroupType
                ON siteGroupType.idfsReference = sg.idfsSiteGroupType
        GROUP BY sg.idfSiteGroup,
                 sg.strSiteGroupName,
                 s.strTextString,
                 b.strDefault,
                 sg.strSiteGroupDescription,
                 siteGroupType.name,
                 c;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_DEL]...';


GO


-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_DEL
--
-- Description: Delete a human master (actual) record.
--          
-- Revision History:
-- Name            Date       Change
-- --------------- ---------- --------------------------------------------------------------------
-- Ann Xiong    2/15/2019 Initial release for new API.
-- Ann Xiong    2/10/2022 Updated 'ReturnMsg' to 'ReturnMessage'
-- Ann Xiong    2/14/2022 Removed @LanguageID and updated 'ReturnMsg' to 'ReturnMessage'
-- Ann Xiong    4/19/2022 Updated SELECT @ReturnCode 'ReturnCode', @ReturnMsg 'ReturnMessage' to SELECT @ReturnCode ReturnCode, @ReturnMsg ReturnMessage
-- Ann Xiong	3/15/2023 Implemented Data Audit and added parameters @idfDataAuditEvent and @AuditUserName
--
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_DEL] 
(
	@HumanMasterID		BIGINT,
    @idfDataAuditEvent BIGINT = NULL,
    @AuditUserName NVARCHAR(100)
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ReturnCode INT = 0 
	DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS'

	--Data Audit--
	DECLARE @idfUserId BIGINT = NULL;
	DECLARE @idfSiteId BIGINT = NULL;
	DECLARE @idfsDataAuditEventType bigint = 10016002;               	-- Delete audit event type
	DECLARE @idfsObjectType bigint = 10017082; 							-- Person Deduplication --
	DECLARE @idfObject bigint = @HumanMasterID;
	DECLARE @idfObjectTable_tlbHumanActual bigint = 4573200000000;
	--DECLARE @idfDataAuditEvent bigint = NULL;	

	-- Get and Set UserId and SiteId
	SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo
	--Data Audit--

	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE 	dbo.tlbHumanActual
			SET 	intRowStatus = 1						
			WHERE	idfHumanActual = @HumanMasterID
					AND intRowStatus = 0

            -- Data audit
        	IF @idfDataAuditEvent IS NULL
        	BEGIN 
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @HumanMasterID, @idfObjectTable_tlbHumanActual, @idfDataAuditEvent OUTPUT
			END

			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbHumanActual, @idfObject
            -- End data audit
			
			IF @@TRANCOUNT > 0 
				COMMIT TRANSACTION;
			
			SELECT @ReturnCode ReturnCode, @ReturnMessage ReturnMessage
	END TRY
	BEGIN CATCH

		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER()
		SET @ReturnMessage = 'ErrorNumber: ' + convert(varchar, ERROR_NUMBER() ) 
							+ ' ErrorSeverity: ' + convert(varchar, ERROR_SEVERITY() )
			   				+ ' ErrorState: ' + convert(varchar,ERROR_STATE())
			   				+ ' ErrorProcedure: ' + isnull(ERROR_PROCEDURE() ,'')
			   				+ ' ErrorLine: ' +  convert(varchar,isnull(ERROR_LINE() ,''))
			   				+ ' ErrorMessage: '+ ERROR_MESSAGE()

		SELECT @ReturnCode ReturnCode, @ReturnMessage ReturnMessage

	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_GETDetail OLD
--
-- Description:	Get a human actual record
--          
-- Revision History:
-- Name				Date		Change Detail
-- ---------------	----------	--------------------------------------------------------------------
-- Mandar Kulkarni				Initial release.
-- Vilma Thomas		05/25/2018	Update the ReferenceType key from 19000167 to 19000500 for 'Contact 
--								Phone Type'
-- Stephen Long		11/26/2018	Update for the new API; remove returnCode and returnMsg.
-- Ann Xiong		08/30/2019	Added script to select PersonalIDTypeName, OccupationTypeName, 
--								SchoolCountry, 
--								SchoolRegion, SchoolRayon, SchoolSettlement for Person Deduplication.
-- Ann Xiong		09/09/2019	return haai.SchoolAddressID instead of haai.AltAddressID as 
--								SchoolGeoLocationID
-- Mark Wilson		10/29/2019	added Settlement Type to return
-- Ann Xiong		02/17/2020	Added IsAnotherPhone and Age to select
-- Ann Xiong		05/08/2020	Added YNAnotherAddress, YNHumanForeignAddress, 
--								YNEmployerForeignAddress, YNHumanAltForeignAddress, 
--								YNSchoolForeignAddress, YNWorkSameAddress to select
-- Stephen Long		07/07/2020	Changed v6.1 function call for create address string to v7 version.
-- Mark Wilson		09/20/2021	reworked the locations to use gisLocation and hierarchy
-- Mark Wilson		10/04/2021	Updated to pull location data from correct table
-- Mark Wilson		10/05/2021	Updated to use correct location references and udpate test code
-- Mark Wilson		10/06/2021	Added Alt Address fields
-- Mark Wilson		10/07/2021	Lat/Long only needed for Current Address and Foreign Address not needed for Permanent
-- Mark Wilson		10/12/2021  Added YNPermanentSameAddress, updated YNAnotherAddress
-- Leo Tracchia		05/13/2022	Added joins for Location hierachy
-- Ann Xiong		03/24/2020	Modified to return Age from DateofBirth for Person Deduplication when DateofBirth is not null but haai.ReportedAge and haai.ReportedAgeUOMID are null
--
/*Test Code

EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'en-US',
	@HumanMasterID = 422849750000916


EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'az-Latn-AZ',
	@HumanMasterID = 411420970000870


EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'en-US',
	@HumanMasterID = 413771740000870

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETDetail] (
	@LangID NVARCHAR(20),
	@HumanMasterID BIGINT
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		SELECT ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
			haai.EIDSSPersonId AS EIDSSPersonID,
			ha.idfsOccupationType AS OccupationTypeID,
			ha.idfsNationality AS CitizenshipTypeID,
			citizenshipType.name AS CitizenshipTypeName,
			ha.idfsHumanGender AS GenderTypeID,
			tb.name AS GenderTypeName,

			-- Current Address
			ha.idfCurrentResidenceAddress AS HumanGeoLocationID,
			lhHuman.AdminLevel1ID AS HumanidfsCountry,
			lhHuman.AdminLevel1Name AS HumanCountry,
			lhHuman.AdminLevel2ID AS HumanidfsRegion,
			lhHuman.AdminLevel2Name AS HumanRegion,
			lhHuman.AdminLevel3ID AS HumanidfsRayon,
			lhHuman.AdminLevel3Name AS HumanRayon,
			lhHuman.AdminLevel4ID AS HumanidfsSettlement,
			lhHuman.AdminLevel4Name AS HumanSettlement,			
			HL.idfsType AS HumanidfsSettlementType,
			humanSettlementType.[name] AS HumanSettlementType,
			tglHuman.strPostCode AS HumanstrPostalCode,
			tglHuman.strStreetName AS HumanstrStreetName,
			tglHuman.strHouse AS HumanstrHouse,
			tglHuman.strBuilding AS HumanstrBuilding,
			tglHuman.strApartment AS HumanstrApartment,
			tglHuman.strDescription AS HumanDescription,
			tglHuman.dblLatitude AS HumanstrLatitude,
			tglHuman.dblLongitude AS HumanstrLongitude,
			tglHuman.blnForeignAddress AS HumanForeignAddressIndicator,
			tglHuman.strForeignAddress AS HumanForeignAddressString,

			-- Employer Address
			ha.idfEmployerAddress AS EmployerGeoLocationID,
			lhEmployer.AdminLevel1ID AS EmployeridfsCountry,
			lhEmployer.AdminLevel1Name AS EmployerCountry,
			lhEmployer.AdminLevel2ID AS EmployeridfsRegion,
			lhEmployer.AdminLevel2Name AS EmployerRegion,
			lhEmployer.AdminLevel3ID AS EmployeridfsRayon,
			lhEmployer.AdminLevel3Name AS EmployerRayon,
			lhEmployer.AdminLevel4ID AS EmployeridfsSettlement,
			lhEmployer.AdminLevel4Name AS EmployerSettlement,
			EA.idfsType AS EmployeridfsSettlementType,
			EmpSettlementType.strDefault AS EmployerSettlementType,
			tglEmployer.strPostCode AS EmployerstrPostalCode,
			tglEmployer.strStreetName AS EmployerstrStreetName,
			tglEmployer.strHouse AS EmployerstrHouse,
			tglEmployer.strBuilding AS EmployerstrBuilding,
			tglEmployer.strApartment AS EmployerstrApartment,
			tglEmployer.strDescription AS EmployerDescription,
			tglEmployer.blnForeignAddress AS EmployerForeignAddressIndicator,
			tglEmployer.strForeignAddress AS EmployerForeignAddressString,

			-- Permanent Address
			ha.idfRegistrationAddress AS HumanPermGeoLocationID,
			lhPerm.AdminLevel1ID AS HumanPermidfsCountry,
			lhPerm.AdminLevel1Name AS HumanPermCountry,
			lhPerm.AdminLevel2ID AS HumanPermidfsRegion,
			lhPerm.AdminLevel2Name AS HumanPermRegion,
			lhPerm.AdminLevel3ID AS HumanPermidfsRayon,
			lhPerm.AdminLevel3Name AS HumanPermRayon,
			lhPerm.AdminLevel4ID HumanPermidfsSettlement,
			lhPerm.AdminLevel4Name AS HumanPermSettlement,
			registrationLocation.idfsType AS HumanPermidfsSettlementType,
			registrationSettlementType.[name] AS HumanPermSettlementType,
			tglRegistrationAddress.strPostCode AS HumanPermstrPostalCode,
			tglRegistrationAddress.strStreetName AS HumanPermstrStreetName,
			tglRegistrationAddress.strHouse AS HumanPermstrHouse,
			tglRegistrationAddress.strBuilding AS HumanPermstrBuilding,
			tglRegistrationAddress.strApartment AS HumanPermstrApartment,
			tglRegistrationAddress.strDescription AS HumanPermDescription,

			-- Alternate Address
			haai.AltAddressID AS HumanAltGeoLocationID,
			lhAlt.AdminLevel1ID AS HumanAltidfsCountry,
			lhAlt.AdminLevel1Name AS HumanAltCountry,
			lhAlt.AdminLevel2ID AS HumanAltidfsRegion,
			lhAlt.AdminLevel2Name AS HumanAltRegion,
			lhAlt.AdminLevel3ID AS HumanAltidfsRayon,
			lhAlt.AdminLevel3Name AS HumanAltRayon,
			lhAlt.AdminLevel4ID HumanAltidfsSettlement,
			lhAlt.AdminLevel4Name AS HumanAltSettlement,
			AltLocation.idfsType AS HumanAltidfsSettlementType,
			AltSettlementType.[name] AS HumanAltSettlementType,
			tglAlt.strPostCode AS HumanAltstrPostalCode,
			tglAlt.strStreetName AS HumanAltstrStreetName,
			tglAlt.strHouse AS HumanAltstrHouse,
			tglAlt.strBuilding AS HumanAltstrBuilding,
			tglAlt.strApartment AS HumanAltstrApartment,
			tglAlt.strDescription AS HumanAltDescription,
			tglAlt.blnForeignAddress AS HumanAltForeignAddressIndicator,
			tglAlt.strForeignAddress AS HumanAltForeignAddressString,

			-- School Address
			haai.SchoolAddressID AS SchoolGeoLocationID,
			lhSchool.AdminLevel1ID AS SchoolidfsCountry,
			lhSchool.AdminLevel1Name AS SchoolCountry,
			lhSchool.AdminLevel2ID AS SchoolidfsRegion,
			lhSchool.AdminLevel2Name AS SchoolRegion,
			lhSchool.AdminLevel3ID AS SchoolidfsRayon,
			lhSchool.AdminLevel3Name AS SchoolRayon,
			lhSchool.AdminLevel4ID AS SchoolidfsSettlement,
			lhSchool.AdminLevel4Name AS SchoolSettlement,
			SchoolLocation.idfsType AS SchoolAltidfsSettlementType,
			SchoolSettlementType.strDefault AS SchoolAltSettlementType,
			tglSchool.strPostCode AS SchoolstrPostalCode,
			tglSchool.strStreetName AS SchoolstrStreetName,
			tglSchool.strHouse AS SchoolstrHouse,
			tglSchool.strBuilding AS SchoolstrBuilding,
			tglSchool.strApartment AS SchoolstrApartment,
			tglSchool.blnForeignAddress AS SchoolForeignAddressIndicator,
			tglSchool.strForeignAddress AS SchoolForeignAddressString,

			dbo.FN_GBL_FormatDate(ha.datDateofBirth, 'mm/dd/yyyy') AS DateOfBirth,
			dbo.FN_GBL_FormatDate(ha.datDateOfDeath, 'mm/dd/yyyy') AS DateOfDeath,
			dbo.FN_GBL_FormatDate(ha.datEnteredDate, 'mm/dd/yyyy') AS EnteredDate,
			dbo.FN_GBL_FormatDate(ha.datModificationDate, 'mm/dd/yyyy') AS ModificationDate,
			ha.strFirstName AS FirstOrGivenName,
			ha.strSecondName AS SecondName,
			ha.strLastName AS LastOrSurname,
			ha.strEmployerName AS EmployerName,
			ha.strHomePhone AS HomePhone,
			ha.strWorkPhone AS WorkPhone,
			ha.idfsPersonIDType AS PersonalIDType,
			ha.strPersonID AS PersonalID,
			haai.ReportedAge,
			haai.ReportedAgeUOMID,
			haai.PassportNbr AS PassportNumber,
			haai.IsEmployedID AS IsEmployedTypeID,
			isEmployed.name AS IsEmployedTypeName,
			haai.EmployerPhoneNbr AS EmployerPhone,
			haai.EmployedDTM AS EmployedDateLastPresent,
			haai.IsStudentID AS IsStudentTypeID,
			isStudent.name AS IsStudentTypeName,
			haai.SchoolName AS SchoolName,
			haai.SchoolLastAttendDTM AS SchoolDateLastAttended,
			haai.SchoolPhoneNbr AS SchoolPhone,
			haai.ContactPhoneCountryCode,
			haai.ContactPhoneNbr AS ContactPhone,
			haai.ContactPhoneNbrTypeID AS ContactPhoneTypeID,
			ContactPhoneNbrTypeID.name AS ContactPhoneTypeName,
			haai.ContactPhone2CountryCode,
			haai.ContactPhone2Nbr AS ContactPhone2,
			haai.ContactPhone2NbrTypeID AS ContactPhone2TypeID,
			ContactPhone2NbrTypeID.name AS ContactPhone2TypeName,
			personalIDType.name AS PersonalIDTypeName,
			occupationType.name AS OccupationTypeName,
			CASE 
				WHEN haai.ContactPhone2Nbr IS NULL
					AND haai.ContactPhone2NbrTypeID IS NULL
					THEN 'No'
				ELSE 'Yes'
				END AS IsAnotherPhone,
			--CAST(ISNULL(haai.ReportedAge, '') AS VARCHAR(3)) + ' ' + ISNULL(HumanAgeType.name, '') AS Age,
			CASE 
				WHEN haai.ReportedAge IS NULL AND haai.ReportedAgeUOMID IS NULL
					THEN (CASE 
							WHEN ha.datDateofBirth IS NOT NULL					
								THEN CAST(FLOOR(DATEDIFF(DAY, ha.datDateofBirth, GETDATE ())/365.242199) AS VARCHAR(3)) + ' ' + HumanAgeType.name
							ELSE ''
							END)
				ELSE CAST(ISNULL(haai.ReportedAge, '') AS VARCHAR(3)) + ' ' + ISNULL(HumanAgeType.name, '')
				END AS Age,

			CASE 
				WHEN ((ha.idfRegistrationAddress IS NOT NULL AND ha.idfRegistrationAddress > 0) OR (haai.AltAddressID IS NOT NULL AND haai.AltAddressID > 0))
					THEN 'Yes'
				ELSE 'No'
				END AS YNAnotherAddress,
			CASE 
				WHEN tglHuman.blnForeignAddress IS NOT NULL
					AND tglHuman.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanForeignAddress,
			CASE 
				WHEN tglEmployer.blnForeignAddress IS NOT NULL
					AND tglEmployer.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNEmployerForeignAddress,
			CASE 
				WHEN tglRegistrationAddress.blnForeignAddress IS NOT NULL
					AND tglRegistrationAddress.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumPermForeignAddress,
			CASE 
				WHEN tglAlt.blnForeignAddress IS NOT NULL
					AND tglAlt.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanAltForeignAddress,
			CASE 
				WHEN tglSchool.blnForeignAddress IS NOT NULL
					AND tglSchool.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNSchoolForeignAddress,
			CASE 
				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
						dbo.FN_GBL_CreateAddressString(ISNULL(lhEmployer.AdminLevel1Name, N''), ISNULL(lhEmployer.AdminLevel2Name, N''), ISNULL(lhEmployer.AdminLevel3Name, N''), ISNULL(tglEmployer.strPostCode, N''), ISNULL(EmpSettlementType.strDefault, N''), ISNULL(lhEmployer.AdminLevel4Name, N''), ISNULL(tglEmployer.strStreetName, N''), ISNULL(tglEmployer.strHouse, N''), ISNULL(tglEmployer.strBuilding, N''), ISNULL(tglEmployer.strApartment, N''), ISNULL(tglEmployer.blnForeignAddress, N''), ISNULL(tglEmployer.strForeignAddress, N''))
					THEN 'Yes'
				ELSE 'No'
				END AS YNWorkSameAddress,
			CASE 
				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
						dbo.FN_GBL_CreateAddressString(ISNULL(lhPerm.AdminLevel1Name, N''), ISNULL(lhPerm.AdminLevel2Name, N''), ISNULL(lhPerm.AdminLevel3Name, N''), ISNULL(tglRegistrationAddress.strPostCode, N''), ISNULL(registrationSettlementType.strDefault, N''), ISNULL(lhPerm.AdminLevel4Name, N''), ISNULL(tglRegistrationAddress.strStreetName, N''), ISNULL(tglRegistrationAddress.strHouse, N''), ISNULL(tglRegistrationAddress.strBuilding, N''), ISNULL(tglRegistrationAddress.strApartment, N''), ISNULL(tglRegistrationAddress.blnForeignAddress, N''), ISNULL(tglRegistrationAddress.strForeignAddress, N''))
					THEN 'Yes'
				ELSE 'No'
				END AS YNPermanentSameAddress 

		FROM dbo.tlbHumanActual ha

		LEFT JOIN dbo.HumanActualAddlinfo haai ON ha.idfHumanActual = haai.HumanActualAddlinfoUID
		LEFT JOIN dbo.tlbGeoLocationShared AS tglHuman ON ha.idfCurrentResidenceAddress = tglHuman.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglEmployer ON ha.idfEmployerAddress = tglEmployer.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglRegistrationAddress ON ha.idfRegistrationAddress = tglRegistrationAddress.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglSchool ON haai.SchoolAddressID = tglSchool.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglAlt ON haai.AltAddressID = tglAlt.idfGeoLocationShared
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043) tb ON tb.idfsReference = ha.idfsHumanGender

		-- Current Address
		LEFT JOIN dbo.gisLocation HL ON HL.idfsLocation = tglHuman.idfsLocation	
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhHuman ON lhHuman.idfsLocation = tglHuman.idfsLocation			
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS humanCountry ON HL.node.IsDescendantOf(humanCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS humanRegion ON HL.node.IsDescendantOf(humanRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS humanRayon ON HL.node.IsDescendantOf(humanRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS humanSettlement ON HL.node.IsDescendantOf(humanSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS humanSettlementType ON humanSettlementType.idfsReference = HL.idfsType

		-- Employer address 
		LEFT JOIN dbo.gisLocation EA ON EA.idfsLocation = tglEmployer.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhEmployer ON lhEmployer.idfsLocation = tglEmployer.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS ECountry ON EA.node.IsDescendantOf(Ecountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS ERegion ON EA.node.IsDescendantOf(ERegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS ERayon ON EA.node.IsDescendantOf(ERayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS ESettlement ON EA.node.IsDescendantOf(ESettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS EmpSettlementType ON EmpSettlementType.idfsReference = EA.idfsType

		-- Permanent address 
		LEFT JOIN dbo.gisLocation registrationLocation ON registrationLocation.idfsLocation = tglRegistrationAddress.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhPerm ON lhPerm.idfsLocation = tglRegistrationAddress.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS registrationCountry ON registrationLocation.node.IsDescendantOf(registrationCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS registrationRegion ON registrationLocation.node.IsDescendantOf(registrationRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS registrationRayon ON registrationLocation.node.IsDescendantOf(registrationRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS registrationSettlement ON registrationLocation.node.IsDescendantOf(registrationSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS registrationSettlementType ON registrationSettlementType.idfsReference = registrationLocation.idfsType

		-- Alternate address - new for EIDSS7
		LEFT JOIN dbo.gisLocation AltLocation ON AltLocation.idfsLocation = tglAlt.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhAlt ON lhAlt.idfsLocation = tglAlt.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS AltCountry ON AltLocation.node.IsDescendantOf(AltCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS AltRegion ON AltLocation.node.IsDescendantOf(AltRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS AltRayon ON AltLocation.node.IsDescendantOf(AltRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS AltSettlement ON AltLocation.node.IsDescendantOf(AltSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS AltSettlementType ON AltSettlementType.idfsReference = AltLocation.idfsType

		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isEmployed ON IsEmployed.idfsReference = haai.IsEmployedID
		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isStudent ON isStudent.idfsReference = haai.IsStudentID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000054) AS citizenshipType ON ha.idfsNationality = citizenshipType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhoneNbrTypeID ON contactPhoneNbrTypeID.idfsReference = haai.ContactPhoneNbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhone2NbrTypeID ON contactPhone2NbrTypeID.idfsReference = haai.ContactPhone2NbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000148) AS personalIDType ON ha.idfsPersonIDType = personalIDType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000061) AS occupationType ON ha.idfsOccupationType = occupationType.idfsReference

		-- School address - E6 school address was originally stored in idfEmployerAddress with employment type = 'Student'
		LEFT JOIN dbo.gisLocation SchoolLocation ON SchoolLocation.idfsLocation = tglSchool.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhSchool ON lhSchool.idfsLocation = tglSchool.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS schoolCountry ON SchoolLocation.node.IsDescendantOf(schoolCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS schoolRegion ON SchoolLocation.node.IsDescendantOf(schoolRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS schoolRayon ON SchoolLocation.node.IsDescendantOf(schoolRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS schoolSettlement ON SchoolLocation.node.IsDescendantOf(schoolSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS schoolSettlementType ON schoolSettlementType.idfsReference = SchoolLocation.idfsType


		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042) AS HumanAgeType	ON (haai.ReportedAgeUOMID = HumanAgeType.idfsReference Or HumanAgeType.idfsReference = 10042003)



		WHERE ha.idfHumanActual = @HumanMasterID;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_TESTS_GetList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_TESTS_GetList
--
-- Description: List human disease report tests by human disease report identifier.
--          
-- Author: JWJ
--
-- Revision History:
-- Name	            Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- JWJ				20180603   created 
-- HAP				2018110    Added strTestResult field to result set 
-- HAP              20181109   Added TestValidation fields to result set 
-- LJM				20201230   Added strTestedByPerson and strTestedByOffice as output 
--                             parameters
-- LJM				20210105   Added strTestCategory and blnNonLaboratoryTest, 
--                             idfInterpretedByPerson,idfValidatedByPerson as output parameters.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                             defect 5006
-- Stephen Long     01/04/2023 Added check for deleted test status.  Fixed main table to be
--                             tlbTesting and not the material table.  Changed to join.
-- Doug Albanese    01/06/2023 Removed the coalescing of null values on Interpreted and Validated 
--                             dates. They have to be done on the application side.
-- Stephen Long     01/09/2023 Fix to show the validated by person from tlbTesting when the test 
--                             record was created and updated from the laboratory module.
-- Stephen Long     01/16/2023 Fix to look at test status types when a laboratory assigned test 
--                             to determine if validated or not (final and amended status types).
-- Stephen Long     02/06/2023 Fix for bug 5620; removed unneeded joins and fields.
-- Mike Kornegay	03/17/2023 Added left join on test result types 19000096 and 19000162 (basic syndromic surveillance)
--
-- Testing code:
-- EXEC USP_HUM_TESTS_GetList 'en', @idfHumanCase=19  --10
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_TESTS_GetList]
    @LangID NVARCHAR(50),
    @idfHumanCase BIGINT = NULL,
    @SearchDiagnosis BIGINT = NULL
AS
BEGIN
    BEGIN TRY
        SELECT Samples.idfHumanCase,
               Samples.idfMaterial,
               Samples.strBarcode,          -- Lab sample ID
               Samples.strFieldBarcode,     -- Local Sample ID
               Samples.idfsSampleType,
               SampleType.name AS strSampleTypeName,
               Samples.datFieldCollectionDate,
               Samples.idfSendToOffice,
               Samples.idfFieldCollectedByOffice,
               Samples.datFieldSentDate,
               Samples.idfsSampleStatus,
               sampleStatus.name AS SampleStatusTypeName,
               Samples.idfFieldCollectedByPerson,
               Samples.datSampleStatusDate,
               Samples.rowGuid AS sampleGuid,
               t.idfTesting,
               t.idfsTestName,
               t.idfsTestCategory,
               testCat.name AS strTestCategory,
               t.idfsTestResult,
               t.idfsTestStatus,
               t.idfsDiagnosis,
               disease.name AS strDiagnosis,
               tstatus.name AS strTestStatus,
               tresult.name AS strTestResult,
               TestName.name,
               t.datReceivedDate,
               t.datConcludedDate,
               t.idfTestedByPerson,
               t.idfTestedByOffice,
			   tv.datInterpretationDate AS datInterpretedDate,
               tv.idfsInterpretedStatus,
               testinterpretedstatus.name AS strInterpretedStatus,
               tv.strInterpretedComment,
               ISNULL(interpretedByPerson.strFamilyName, N'') + ISNULL(', ' + interpretedByPerson.strFirstName, N'')
                   + ISNULL(' ' + interpretedByPerson.strSecondName, N'') AS strInterpretedBy,
               tv.datValidationDate AS datValidationDate,
               ISNULL(tv.blnValidateStatus, 0) AS blnValidateStatus,
               tv.strValidateComment,
               ISNULL(validatedByPerson.strFamilyName, N'') + ISNULL(', ' + validatedByPerson.strFirstName, N'')
                   + ISNULL(' ' + validatedByPerson.strSecondName, N'') AS strValidatedBy,
               t.rowGuid AS testGuid,
               t.intRowStatus,
               testedbyPerson.strFirstName + ' ' + ISNULL(testedbyPerson.strSecondName, '') + '  '
               + testedbyPerson.strFamilyName AS strTestedByPerson,
               testedByOffice.FullName AS strTestedByOffice,
               ISNULL(t.blnNonLaboratoryTest, 0) AS blnNonLaboratoryTest,
               tv.idfInterpretedByPerson,
               tv.idfValidatedByPerson AS idfValidatedByPerson,
               tv.idfTestValidation
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial Samples
                ON Samples.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbHumanCase hc
                ON Samples.idfHumanCase = hc.idfHumanCase
            INNER JOIN dbo.FN_GBL_REFERENCEREPAIR(@LangID, 19000087) SampleType
                ON SampleType.idfsReference = Samples.idfsSampleType
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000015) sampleStatus
                ON sampleStatus.idfsReference = Samples.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_REFERENCEREPAIR(@LangID, 19000097) TestName
                ON TestName.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000001) tstatus
                ON tstatus.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepairSplit(@LangID, '19000162, 19000096') tresult
				ON tresult.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.tlbTestValidation tv
                ON tv.idfTesting = t.idfTesting
                   AND tv.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson interpretedByPerson
                ON interpretedByPerson.idfPerson = tv.idfInterpretedByPerson
            LEFT JOIN dbo.tlbPerson testedbyPerson
                ON (testedbyPerson.idfPerson = t.idfTestedByPerson)
            LEFT JOIN dbo.FN_GBL_INSTITUTION(@LangID) testedByOffice
                ON testedByOffice.idfOffice = t.idfTestedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000095) testCat
                ON testCat.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000106) testinterpretedstatus
                ON testinterpretedstatus.idfsReference = tv.idfsInterpretedStatus
            LEFT JOIN dbo.tlbPerson validatedByPerson
                ON (validatedByPerson.idfPerson = tv.idfValidatedByPerson)
        WHERE Samples.idfHumanCase = @idfHumanCase
              AND Samples.intRowStatus = 0
              and t.idfHumanCase is not null
              AND t.intRowStatus = 0
              AND t.idfsTestStatus <> 10001007; -- Deleted
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_GETList
--
-- Description:	Get laboratory approval list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/03/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added previous sample and test status types.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/19/2019 Split out selects between sample and test and added test deletion 
--                             as one of the options.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/30/2019 Added organization ID parameter and where clause changes for site.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     09/28/2019 Updated test deletion base reference value to newly added entry.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     09/04/2020 Updated reference value for marked for deletion test status.
-- Stephen Long     11/30/2020 Removed site ID parameter and updated where criteria to use 
--                             sent to organization ID.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/18/2021 Added sample ID and test ID parameters and action requested ID to 
--                             the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     01/10/2022 Corrected join on user table, removed identity column, and changed 
--                             default sort order.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to vector session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Added translated value for action requested name.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- Stephen Long     11/16/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- Stephen Long     03/02/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.
-- Stephen Long     03/23/2023 Correction on criteria for sent to organization and site ID.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @TestID BIGINT = NULL,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @TotalRowCount INT = 0,
            @LanguageCode BIGINT,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleStatus IN (   10015002, --Marked for Deletion 
                                            10015003
                                        ) --Marked for Destruction
              AND (
                      (
                          m.idfSendToOffice = @UserOrganizationID
                      )
                      OR (
                             m.idfsSite = @UserSiteID OR m.idfsCurrentSite = @UserSiteID
                         )
                  )
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  );

        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND (
                      (
                          m.idfSendToOffice = @UserOrganizationID
                      )
                      OR (
                             m.idfsSite = @UserSiteID OR m.idfsCurrentSite = @UserSiteID
                         )
                  )
              AND (
                      t.idfTesting = @TestID
                      OR @TestID IS NULL
                  );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite OR oa.idfsObjectID = m.idfsCurrentSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite OR ugsp.SiteID = m.idfsCurrentSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite OR usp.SiteID = m.idfsCurrentSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @Results
        );

        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       @SampleDestruction
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       @TestDeletion
               END AS ActionRequested,
               m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               u.idfUserID AS ResultEnteredByUserID,
               m.datAccession AS AccessionDate,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               t.datConcludedDate AS ResultDate,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               NULL AS PreviousTestStatusTypeID,
               m.intRowStatus AS RowStatus,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @TotalRowCount AS TotalRowCount
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
                   AND t.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tstUserTable u
                ON u.idfPerson = t.idfResultEnteredByPerson
                   AND u.intRowStatus = 0
            OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_SEARCH_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/05/2019 Removed transfer where clause and organization ID check.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Cleaned up stored procedure.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/20/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                  query.
-- Stephen Long     12/07/2021 Added group by on final results.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Bug fix on item 5111, 5112, 5113 and 5114.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/24/2022 Bug fix on GIT #464.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     01/23/2023 Updated default sort order.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Blood', 'XWEB00' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT, 
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT 
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @InitialResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        BatchStatusTypeID BIGINT NULL,
        TestNameTypeID BIGINT NULL,
        TestNameTypeName NVARCHAR(MAX) NULL,
        TestStatusTypeID BIGINT NULL,
        TestStatusTypeName NVARCHAR(MAX) NULL,
        StartedDate DATETIME NULL,
        TestResultTypeID BIGINT NULL,
        TestResultTypeName NVARCHAR(MAX) NULL,
        ResultDate DATETIME NULL,
        TestCategoryTypeID BIGINT NULL,
        TestCategoryTypeName NVARCHAR(MAX) NULL,
        PreviousTestStatusID BIGINT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        BatchStatusTypeID BIGINT NULL,
        TestNameTypeID BIGINT NULL,
        TestNameTypeName NVARCHAR(MAX) NULL,
        TestStatusTypeID BIGINT NULL,
        TestStatusTypeName NVARCHAR(MAX) NULL,
        StartedDate DATETIME NULL,
        TestResultTypeID BIGINT NULL,
        TestResultTypeName NVARCHAR(MAX) NULL,
        ResultDate DATETIME NULL,
        TestCategoryTypeID BIGINT NULL,
        TestCategoryTypeName NVARCHAR(MAX) NULL,
        PreviousTestStatusID BIGINT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;
    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Results
        SELECT SampleID,
               t.idfTesting,
               b.idfsBatchStatus,
               t.idfsTestName,
               testNameType.name,
               t.idfsTestStatus,
               testStatusType.name,
               t.datStartedDate,
               t.idfsTestResult,
               testResultType.name,
               t.datConcludedDate,
               t.idfsTestCategory,
               testCategoryType.name,
               t.PreviousTestStatusID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsSampleStatus IS NULL
                  AND m.datAccession IS NULL 
                  AND m.datDestructionDate IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                  + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @Results
        SELECT SampleID,
               t.idfTesting,
               b.idfsBatchStatus,
               t.idfsTestName,
               testNameType.name,
               t.idfsTestStatus,
               testStatusType.name,
               t.datStartedDate,
               t.idfsTestResult,
               testResultType.name,
               t.datConcludedDate,
               t.idfsTestCategory,
               testCategoryType.name,
               t.PreviousTestStatusID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @Results
        SELECT SampleID,
               TestID,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = SampleID
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ir.SampleID,
                   ir.TestID,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL
            FROM @InitialResults ir
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ir.SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @Results
            SELECT SampleID,
                   TestID,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END;

        INSERT INTO @FinalResults
        SELECT SampleID,
               TestID,
               BatchStatusTypeID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               PreviousTestStatusID
        FROM @Results
        GROUP BY SampleID,
                 TestID,
                 BatchStatusTypeID,
                 TestNameTypeID,
                 TestNameTypeName,
                 TestStatusTypeID,
                 TestStatusTypeName,
                 StartedDate,
                 TestResultTypeID,
                 TestResultTypeName,
                 ResultDate,
                 TestCategoryTypeID,
                 TestCategoryTypeName,
                 PreviousTestStatusID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults r
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON r.SampleID = f.SampleID
                                        );

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               res.TestID AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN TestStatusTypeID = 10001004 --Preliminary
               THEN
                       TestStatusTypeID
                   WHEN TestStatusTypeID = 10001008 --Marked for Deletion
               THEN
                       TestStatusTypeID
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN TestStatusTypeID = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN TestStatusTypeID = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.blnAccessioned,
                     m.idfsSampleStatus DESC,
                     m.idfsAccessionCondition,
                     COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate) DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_SEARCH_GETList
--
-- Description:	Get sample search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/14/2019 Initial release.
-- Stephen Long     01/30/2019 Removed joins to vector surveillance session, and added reference 
--                             to the disease reference table for the sample table.
-- Stephen Long     02/21/2019 Added organization ID parameter to narrow search.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added disease to the wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/18/2019 Removed herd left join and modified species left join to material 
--                             table.
-- Stephen Long     01/21/2020 Added site list for site filtration.
-- Stephen Long     03/09/2020 Added additional search filters to match the default get.
-- Stephen Long     03/10/2020 Removed filter on sample disease, and added disease report and 
--                             monitoring session ones.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     07/06/2020 Added lab module source indicator to the model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/30/2020 Added test unassigned and test completed indicators.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Changed over missed functions for reference data.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Stephen Long     09/20/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/06/2021 Correction to EIDSSReportOrSessionID alias name.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/08/2022 Removed unneeded joins.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Fix to show rejected samples on sample search.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/04/2022 Add where criteria from the default sample listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     08/16/2022 Added null DaysFromAccessionDate to the where criteria.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/17/2022 Bug fix on item 5111 and 5018.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/03/2023 Added check for user's site identifier when the sent to organization 
--                             is not present.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     03/02/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.
-- Stephen Long     03/14/2023 Fix on default sort order.
-- Stephen Long     03/28/2023 Bug fix for item 5818 and 5819.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Blood', 'XWEB00' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT,
    @DaysFromAccessionDate INT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InitialResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FilteredResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @InitialResults
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 -- Unknown
              AND (
                      (
                          m.blnAccessioned = 0
                          AND m.idfsSampleStatus IS NULL
                          AND m.datAccession IS NULL
                          AND m.datDestructionDate IS NULL
                          AND m.idfSendToOffice = @UserOrganizationID
                      )
                      OR (
                             m.idfSendToOffice = @UserOrganizationID
                             AND m.idfsSite = @UserSiteID
                         )
                  )
              AND (
                      (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              OR @DaysFromAccessionDate IS NULL
                          )
                          AND m.TestUnassignedIndicator = 1
                          AND @TestUnassignedIndicator IS NOT NULL
                          AND m.blnAccessioned = 1
                          AND m.datAccession IS NOT NULL
                          AND m.strBarcode IS NOT NULL 
                          AND m.idfsAccessionCondition IS NOT NULL
                          AND m.idfsSampleStatus = 10015007 -- In Repository
                      )
                      OR (
                             (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 OR @DaysFromAccessionDate IS NULL
                             )
                             AND m.TestCompletedIndicator = 1
                             AND @TestCompletedIndicator IS NOT NULL
                         )
                      OR (
                             m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL
                             AND m.idfsSampleStatus IS NULL
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         )
                      OR (
                             (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 OR @DaysFromAccessionDate IS NULL
                             )
                             AND
                             (
                                 SELECT COUNT(*)
                                 FROM dbo.tlbTesting t
                                 WHERE t.idfMaterial = m.idfMaterial
                                       AND t.intRowStatus = 0
                                       AND t.blnNonLaboratoryTest = 0
                                       AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                             ) = 0
                             AND m.idfsSampleStatus <> 10015010 -- Transferred Out
                             AND @TestUnassignedIndicator IS NULL
                             AND @TestCompletedIndicator IS NULL
                         )
                      OR (
                             (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 OR @DaysFromAccessionDate IS NULL
                             )
                             AND m.idfsSampleStatus = 10015010 -- Transferred Out
                             AND
                             (
                                 SELECT COUNT(tr.idfTransferOut)
                                 FROM dbo.tlbTransferOutMaterial tom
                                     INNER JOIN dbo.tlbTransferOUT tr
                                         ON tr.idfTransferOut = tom.idfTransferOut
                                 WHERE tom.idfMaterial = m.idfMaterial
                                       AND tr.intRowStatus = 0
                                       AND tr.idfsTransferStatus = 10001003 -- Final
                             ) = 0
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         ) -- Transferred Out and Final
                      OR (
                             GETDATE() <= DATEADD(
                                                     DAY,
                                                     @DaysFromAccessionDate,
                                                     COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                                                 )
                             AND m.idfsAccessionCondition = 10108003 -- Rejected Sample
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         )
                  )
        GROUP BY m.idfMaterial;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FilteredResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @FilteredResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FilteredResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FilteredResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FilteredResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FilteredResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FilteredResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FilteredResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FilteredResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FilteredResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @FilteredResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @FilteredResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID
        FROM @FilteredResults res
        GROUP BY res.ID;

        DECLARE @UnaccessionedSampleCount AS INT = (
                                                       SELECT COUNT(m.idfMaterial)
                                                       FROM @FinalResults res
                                                           INNER JOIN dbo.tlbMaterial m
                                                               ON m.idfMaterial = res.ID
                                                       WHERE (
                                                                 m.blnAccessioned = 0
                                                                 AND m.idfsAccessionCondition IS NULL
                                                             )
                                                   );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        -- Final
                                                               10001006 -- Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 -- In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(t4.idfTesting, 0))
                   FROM dbo.tlbTesting t4
                   WHERE t4.idfsTestStatus IN (   10001003,
                                                           -- In Progress
                                                  10001004 -- Preliminary
                                              )
                         AND t4.idfMaterial = m.idfMaterial
                         AND t4.intRowStatus = 0
                         AND t4.blnNonLaboratoryTest = 0
               ),
               0
                     ) AS TestAssignedCount,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @UnaccessionedSampleCount AS UnaccessionedSampleCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
        ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition,
                 COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate) DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[usp_SettlementType_GetLookup]...';


GO

--=====================================================================================================
-- Created by:				Joan Li
-- Last modified date:		06/07/2017
-- Last modified by:		Joan Li
-- Description:				06/07/2017:Created based on V6 spSettlementType_SelectLookup: rename for V7 USP49
--                          Select lookup data from tables: gisBaseReference;gisStringNameTranslation
--     
-- Testing code:
/*
----testing code:
exec usp_SettlementType_GetLookup 'en'
*/
-- Revision History:
-- Name					Date			Change Detail
-- ----------------		----------		-----------------------------------------------
-- Leo Tracchia			6/23/2022		added fields for translated string and order
-- Leo Tracchia			6/27/2022		added where for intRowStatus = 0
-- Mani Govindarajan    03/21/2023      Changed to FN_GBL_LanguageCode_GET

--=====================================================================================================

ALTER PROCEDURE [dbo].[usp_SettlementType_GetLookup]
	@LangID nvarchar(50) --##PARAM @LangID - language ID
AS
SELECT	
	gisBaseReference.idfsGISBaseReference AS idfsReference, 
	isnull(gisStringNameTranslation.strTextString, gisBaseReference.strDefault) AS [name],
	gisBaseReference.strDefault,
	gisBaseReference.intOrder,
	gisBaseReference.intRowStatus
FROM dbo.gisBaseReference 
LEFT JOIN gisStringNameTranslation  ON 
	gisBaseReference.idfsGISBaseReference = gisStringNameTranslation.idfsGISBaseReference
 	AND gisStringNameTranslation.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
	AND gisStringNameTranslation.intRowStatus = 0
WHERE	
	 gisBaseReference.idfsGISReferenceType = 19000005 --'SettlementType'
	 and gisBaseReference.intRowStatus = 0
ORDER BY intOrder, [name]
GO
PRINT N'Altering Procedure [dbo].[USP_VET_FARM_MASTER_DEL]...';


GO
-- ================================================================================================
-- Name: USP_VET_FARM_MASTER_DEL
--
-- Description:	Sets a farm master record to "inactive".
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/08/2019 Initial release.
-- Stephen Long     04/26/2019 Made fixes to the laboratory sample count, and set the return code 
--                             accordingly; 0 if farm was soft deleted and 1 or 2 if a dependent 
--                             child objects exist or dependent on another object.
-- Ann Xiong        04/30/2020 Modified to skip checking any dependent child objects for Deduplication
-- Mike Kornegay	02/23/2022 Removed @LanguageID as it is not needed.
-- Stephen Long     06/01/2022 Add row status of 0 check on disease report, case and monitoring 
--                             session.
-- Stephen Long     12/06/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long     03/09/2023 Changed data audit call to USSP_GBL_DATA_AUDIT_EVENT_SET.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_FARM_MASTER_DEL]
(
    @FarmMasterID BIGINT,
    @DeduplicationIndicator BIT = 0,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @MonitoringSessionCount INT = 0,
            @DiseaseReportCount INT = 0,
            @OutbreakSessionCount INT = 0,
            @LabSampleCount INT = 0,
            @DataAuditEventTypeid BIGINT = 10016002, -- Delete audit event type
            @ObjectTypeID BIGINT = 10017020,         -- Farm
            @ObjectID BIGINT = @FarmMasterID,
            @ObjectTableID BIGINT = 4572790000000,   -- tlbFarmActual
            @DataAuditEventID BIGINT,
            @AuditUserID BIGINT,
            @AuditSiteID BIGINT,
            @EIDSSObjectID NVARCHAR(200) = (
                                               SELECT strFarmCode
                                               FROM dbo.tlbFarmActual
                                               WHERE idfFarmActual = @FarmMasterID
                                           );

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        SELECT @MonitoringSessionCount = COUNT(*)
        FROM dbo.tlbMonitoringSessionSummary m
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = m.idfFarm
            INNER JOIN dbo.tlbFarmActual fa
                ON fa.idfFarmActual = f.idfFarmActual
        WHERE fa.idfFarmActual = @FarmMasterID
              AND m.intRowStatus = 0;

        SELECT @OutbreakSessionCount = COUNT(*)
        FROM dbo.OutbreakCaseReport ocr
            INNER JOIN dbo.tlbVetCase v
                ON v.idfOutbreak = ocr.idfVetCase
                   AND v.intRowStatus = 0
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = v.idfFarm
            INNER JOIN dbo.tlbFarmActual fa
                ON fa.idfFarmActual = f.idfFarmActual
        WHERE fa.idfFarmActual = @FarmMasterID
              AND ocr.intRowStatus = 0;

        SELECT @DiseaseReportCount = COUNT(*)
        FROM dbo.tlbVetCase v
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = v.idfFarm
            INNER JOIN dbo.tlbFarmActual fa
                ON fa.idfFarmActual = f.idfFarmActual
        WHERE fa.idfFarmActual = @FarmMasterID
              AND v.intRowStatus = 0;

        SELECT @LabSampleCount = COUNT(*)
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tlbVetCase v
                ON v.idfVetCase = m.idfVetCase
                   AND v.intRowStatus = 0
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = v.idfFarm
                   AND f.intRowStatus = 0
            INNER JOIN dbo.tlbFarmActual fa
                ON fa.idfFarmActual = f.idfFarmActual
        WHERE fa.idfFarmActual = @FarmMasterID
              AND m.intRowStatus = 0
              AND m.blnAccessioned = 1;

        IF @DeduplicationIndicator = 0
        BEGIN
            IF @MonitoringSessionCount = 0
               AND @OutbreakSessionCount = 0
               AND @DiseaseReportCount = 0
               AND @LabSampleCount = 0
            BEGIN
                UPDATE s
                SET s.intRowStatus = 1
                FROM dbo.tlbSpeciesActual s
                    INNER JOIN dbo.tlbHerdActual h
                        ON h.idfHerdActual = s.idfHerdActual
                WHERE h.idfFarmActual = @FarmMasterID;

                UPDATE dbo.tlbHerdActual
                SET intRowStatus = 1
                WHERE idfFarmActual = @FarmMasterID;

                UPDATE dbo.tlbFarmActual
                SET intRowStatus = 1,
                    datModificationDate = GETDATE()
                WHERE idfFarmActual = @FarmMasterID;

                SET @ReturnCode = 0;

                -- Data audit
                EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                          @AuditSiteID,
                                                          @DataAuditEventTypeID,
                                                          @ObjectTypeID,
                                                          @FarmMasterID,
                                                          @ObjectTableID,
                                                          @EIDSSObjectID, 
                                                          @DataAuditEventID OUTPUT;

                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       @FarmMasterID,
                       @AuditUserName,
                       @EIDSSObjectID;
            -- End data audit
            END
            ELSE
            BEGIN
                IF @MonitoringSessionCount > 0
                   OR @LabSampleCount > 0
                BEGIN
                    SET @ReturnCode = 2;
                    SET @ReturnMessage = 'Unable to delete this record as it is dependent on another object.';
                END;
                ELSE
                BEGIN
                    SET @ReturnCode = 1;
                    SET @ReturnMessage = 'Unable to delete this record as it contains dependent child objects.';
                END;
            END;
        END
        ELSE
        BEGIN
            UPDATE s
            SET s.intRowStatus = 1
            FROM dbo.tlbSpeciesActual AS s
                INNER JOIN dbo.tlbHerdActual AS h
                    ON h.idfHerdActual = s.idfHerdActual
            WHERE h.idfFarmActual = @FarmMasterID;

            UPDATE dbo.tlbHerdActual
            SET intRowStatus = 1
            WHERE idfFarmActual = @FarmMasterID;

            UPDATE dbo.tlbFarmActual
            SET intRowStatus = 1,
                datModificationDate = GETDATE()
            WHERE idfFarmActual = @FarmMasterID;

            SET @ReturnCode = 0;

            -- Data audit
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @ObjectID,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   @FarmMasterID,
                   @AuditUserName,
                   @EIDSSObjectID;
        -- End data audit
        END

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;

        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_TEST_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VET_TEST_GETList
--
-- Description:	Gets laboratory field test records for the disease report use cases.
--                      
-- Revision History:
-- Name                     Date       Change Detail
-- ------------------------ ---------- -----------------------------------------------------------
-- Stephen Long             11/30/2021 Initial release.
-- Stephen Long             01/12/2022 Added order by cases and updated pagination logic.
-- Stephen Long             01/24/2022 Added original test result type for SAUC55/56 to determine 
--                                     which notification to log when result is new verses amended.
-- Mike Kornegay			02/02/2022 Added sent date from material table
-- Stephen Long             02/02/2022 Added root sample ID to the query.
-- Stephen Long             01/04/2023 Added check for deleted test status.
-- Stephen Long             03/15/2023 Changed inner joins on material table to left as veterinary 
--                                     disease report does not require a sample selection.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_TEST_GETList]
(
    @LanguageID NVARCHAR(50),
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'TestNameTypeName',
    @SortOrder NVARCHAR(4) = 'ASC',
    @DiseaseReportID BIGINT
)
AS
BEGIN
    DECLARE @firstRec INT = (@PageNumber - 1) * @PageSize,
            @lastRec INT = (@PageNumber * @PageSize + 1);

    DECLARE @Results TABLE (ID BIGINT);

    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO @Results
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
        WHERE t.intRowStatus = 0
              AND t.idfVetCase = @DiseaseReportID
              AND t.idfMaterial IS NULL
              AND t.idfsTestStatus <> 10001007; -- Deleted

        INSERT INTO @Results
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND t.idfMaterial IS NOT NULL
                   AND m.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND m.idfVetCase = @DiseaseReportID
              AND t.idfsTestStatus <> 10001007 -- Deleted;

        SELECT TestID,
               TestNameTypeID,
               TestNameTypeName,
               TestCategoryTypeID,
               TestCategoryTypeName,
               TestResultTypeID,
               OriginalTestResultTypeID,
               TestResultTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               DiseaseID,
               DiseaseName,
               SampleID,
               RootSampleID,
               EIDSSLocalOrFieldSampleID,
               EIDSSLaboratorySampleID,
               SampleTypeName,
               SpeciesID,
               SpeciesTypeName,
               AnimalID,
               EIDSSAnimalID,
               BatchTestID,
               ObservationID,
               TestNumber,
               Comments,
               StartedDate,
               ResultDate,
               SentDate,
               TestedByOrganizationID,
               TestedByPersonID,
               TestedByPersonName,
               ResultEnteredByOrganizationID,
               ResultEnteredByPersonID,
               ResultEnteredByPersonName,
               ValidatedByOrganizationID,
               ValidatedByPersonID,
               ValidatedByPersonName,
               ReadOnlyIndicator,
               NonLaboratoryTestIndicator,
               ExternalTestIndicator,
               PerformedByOrganizationID,
               ReceivedDate,
               ContactPersonName,
               FarmID,
               EIDSSFarmID,
               RowStatus,
               Species,
               IsTestResultIndicative,
               MonitoringSessionID,
               HumanDiseaseReportID,
               VeterinaryDiseaseReportID,
               VectorID,
               RowAction,
               TotalRowCount,
               CurrentPage,
               TotalPages
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       a.strAnimalCode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       a.strAnimalCode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       diagnosis.Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       diagnosis.Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'Comments'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.strNote
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'Comments'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.strNote
                                               END DESC
                                     ) AS RowNum,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   testCategoryType.name AS TestCategoryTypeName,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestResult AS OriginalTestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.idfsDiagnosis AS DiseaseID,
                   diagnosis.Name AS DiseaseName,
                   t.idfMaterial AS SampleID,
                   m.idfRootMaterial AS RootSampleID,
                   m.strFieldBarCode AS EIDSSLocalOrFieldSampleID,
                   CASE
                       WHEN t.blnNonLaboratoryTest = 1 THEN
                           ''
                       ELSE
                           m.strBarCode
                   END AS EIDSSLaboratorySampleID,
                   sampleType.name AS SampleTypeName,
                   s.idfSpecies AS SpeciesID,
                   speciesType.name AS SpeciesTypeName,
                   a.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   t.idfBatchTest AS BatchTestID,
                   t.idfObservation AS ObservationID,
                   t.intTestNumber AS TestNumber,
                   t.strNote AS Comments,
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   m.datFieldSentDate AS SentDate,
                   t.idfTestedByOffice AS TestedByOrganizationID,
                   t.idfTestedByPerson AS TestedByPersonID,
                   ISNULL(testedByPerson.strFamilyName, N'') + ISNULL(' ' + testedByPerson.strFirstName, '')
                   + ISNULL(' ' + testedByPerson.strSecondName, '') AS TestedByPersonName,
                   t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
                   t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
                   ISNULL(resultEnteredByPerson.strFamilyName, N'')
                   + ISNULL(' ' + resultEnteredByPerson.strFirstName, '')
                   + ISNULL(' ' + resultEnteredByPerson.strSecondName, '') AS ResultEnteredByPersonName,
                   t.idfValidatedByOffice AS ValidatedByOrganizationID,
                   t.idfValidatedByPerson AS ValidatedByPersonID,
                   ISNULL(validatedByPerson.strFamilyName, N'') + ISNULL(' ' + validatedByPerson.strFirstName, '')
                   + ISNULL(' ' + validatedByPerson.strSecondName, '') AS ValidatedByPersonName,
                   t.blnReadOnly AS ReadOnlyIndicator,
                   t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
                   t.blnExternalTest AS ExternalTestIndicator,
                   t.idfPerformedByOffice AS PerformedByOrganizationID,
                   t.datReceivedDate AS ReceivedDate,
                   t.strContactPerson AS ContactPersonName,
                   f.idfFarm AS FarmID,
                   f.strFarmCode AS EIDSSFarmID,
                   t.intRowStatus AS RowStatus,
                   (CASE
                        WHEN vc.idfsCaseType = 10012003 THEN
                            'Herd ' + h.strHerdCode + ' - ' + speciesType.name
                        ELSE
                            'Flock ' + h.strHerdCode + ' - ' + speciesType.name
                    END
                   ) AS Species,
                   ttr.blnIndicative AS IsTestResultIndicative,
                   t.idfMonitoringSession AS MonitoringSessionID,
                   t.idfHumanCase AS HumanDiseaseReportID,
                   t.idfVetCase AS VeterinaryDiseaseReportID,
                   t.idfVector AS VectorID,
                   0 AS RowAction,
                   COUNT(*) OVER () AS TotalRowCount,
                   CurrentPage = @PageNumber,
                   TotalPages = (COUNT(*) OVER () / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
            FROM @Results res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.tlbVetCase vc
                    ON vc.idfVetCase = m.idfVetCase
                       AND vc.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) diagnosis
                    ON diagnosis.idfsReference = t.idfsDiagnosis
                LEFT JOIN dbo.tlbSpecies s
                    ON s.idfSpecies = m.idfSpecies
                       AND s.intRowStatus = 0
                LEFT JOIN dbo.tlbHerd h
                    ON h.idfHerd = s.idfHerd
                       AND h.intRowStatus = 0
                LEFT JOIN dbo.tlbFarm f
                    ON f.idfFarm = h.idfFarm
                       AND f.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType
                    ON speciesType.idfsReference = s.idfsSpeciesType
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbPerson testedByPerson
                    ON testedByPerson.idfPerson = t.idfTestedByPerson
                       AND testedByPerson.intRowStatus = 0
                LEFT JOIN dbo.tlbPerson resultEnteredByPerson
                    ON resultEnteredByPerson.idfPerson = t.idfResultEnteredByPerson
                       AND resultEnteredByPerson.intRowStatus = 0
                LEFT JOIN dbo.tlbPerson validatedByPerson
                    ON validatedByPerson.idfPerson = t.idfValidatedByPerson
                       AND validatedByPerson.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.trtTestTypeToTestResult ttr
                    ON ttr.idfsTestName = t.idfsTestName
                       AND ttr.idfsTestResult = t.idfsTestResult
                       AND ttr.intRowStatus = 0
            GROUP BY t.idfTesting,
                     t.idfsTestName,
                     testNameType.name,
                     t.idfsTestCategory,
                     testCategoryType.name,
                     t.idfsTestResult,
                     testResultType.name,
                     t.idfsTestStatus,
                     testStatusType.name,
                     t.idfsDiagnosis,
                     diagnosis.Name,
                     t.idfMaterial,
                     m.idfRootMaterial,
                     m.strFieldBarCode,
                     m.strBarCode,
                     sampleType.name,
                     s.idfSpecies,
                     speciesType.name,
                     a.idfAnimal,
                     a.strAnimalCode,
                     t.idfBatchTest,
                     t.idfObservation,
                     t.intTestNumber,
                     t.strNote,
                     t.datStartedDate,
                     t.datConcludedDate,
                     m.datFieldSentDate,
                     t.idfTestedByOffice,
                     t.idfTestedByPerson,
                     testedByPerson.strFamilyName,
                     testedByPerson.strFirstName,
                     testedByPerson.strSecondName,
                     t.idfResultEnteredByOffice,
                     t.idfResultEnteredByPerson,
                     resultEnteredByPerson.strFamilyName,
                     resultEnteredByPerson.strFirstName,
                     resultEnteredByPerson.strSecondName,
                     t.idfValidatedByOffice,
                     t.idfValidatedByPerson,
                     validatedByPerson.strFamilyName,
                     validatedByPerson.strFirstName,
                     validatedByPerson.strSecondName,
                     t.blnReadOnly,
                     t.blnNonLaboratoryTest,
                     t.blnExternalTest,
                     t.idfPerformedByOffice,
                     t.datReceivedDate,
                     t.strContactPerson,
                     f.idfFarm,
                     f.strFarmCode,
                     t.intRowStatus,
                     vc.idfsCaseType,
                     h.strHerdCode,
                     speciesType.name,
                     ttr.blnIndicative,
                     t.idfMonitoringSession,
                     t.idfHumanCase,
                     t.idfVetCase,
                     t.idfVector
        ) AS x
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_ADMIN_ACCESS_RULE_ACTOR_SET]...';


GO
-- ================================================================================================
-- Name: USSP_ADMIN_ACCESS_RULE_ACTOR_SET
--
-- Description:	Inserts or updates access rule actors for configurable site filtration of the 
-- administration module.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		11/11/2020 Initial release.
-- Stephen Long     12/27/2020 Added granting actor indicator.
-- Stephen Long     04/19/2021 Removed language ID and audit user name as not needed.
-- Stephen Long     03/14/2022 Changed row action to an int.
-- Stephen Long     03/16/2022 Corrected row action check from 0 to 1.
-- Mark Wilson		06/03/2022 Added Audit fields
-- Stephen Long     12/16/2022 Changed user name from 100 to 200.
-- Stephen Long     03/14/2023 Added reciprocal rule insert for granting actor, and data audit 
--                             logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_ADMIN_ACCESS_RULE_ACTOR_SET]
(
    @AccessRuleActorID BIGINT OUTPUT,
    @AccessRuleID BIGINT,
    @GrantingActorIndicator BIT = 0,
    @ActorSiteGroupID BIGINT = NULL,
    @ActorSiteID BIGINT = NULL,
    @ActorEmployeeGroupID BIGINT = NULL,
    @ActorUserID BIGINT = NULL,
    @RowStatus INT,
    @RowAction INT,
    @AuditUser NVARCHAR(200),
    @DataAuditEventID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Data audit
        DECLARE @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectID BIGINT = NULL,
                @ObjectTableAccessRuleActorID BIGINT = 53577790000011; -- AccessRuleActor
        DECLARE @AccessRuleActorBeforeEdit TABLE
        (
            AccessRuleActorID BIGINT,
            AccessRuleID BIGINT,
            ActorSiteGroupID BIGINT,
            ActorSiteID BIGINT,
            ActorEmployeeGroupID BIGINT,
            ActorUserID BIGINT,
            GrantingActorIndicator BIT,
            RowStatus INT
        );
        DECLARE @AccessRuleActorAfterEdit TABLE
        (
            AccessRuleActorID BIGINT,
            AccessRuleID BIGINT,
            ActorSiteGroupID BIGINT,
            ActorSiteID BIGINT,
            ActorEmployeeGroupID BIGINT,
            ActorUserID BIGINT,
            GrantingActorIndicator BIT,
            RowStatus INT
        );

        SET @AuditUser = ISNULL(@AuditUser, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo;
        -- End data audit

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'AccessRuleActor',
                                              @idfsKey = @AccessRuleActorID OUTPUT;

            INSERT INTO dbo.AccessRuleActor
            (
                AccessRuleActorID,
                AccessRuleID,
                GrantingActorIndicator,
                ActorSiteGroupID,
                ActorSiteID,
                ActorEmployeeGroupID,
                ActorUserID,
                intRowStatus,
                AuditCreateUser,
                AuditCreateDTM,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@AccessRuleActorID,
             @AccessRuleID,
             @GrantingActorIndicator,
             @ActorSiteGroupID,
             @ActorSiteID,
             @ActorEmployeeGroupID,
             @ActorUserID,
             @RowStatus,
             @AuditUser,
             GETDATE(),
             10519001,
             '[{"AccessRuleActorID":' + CAST(@AccessRuleActorID AS NVARCHAR(24)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableAccessRuleActorID,
             @AccessRuleActorID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableAccessRuleActorID AS NVARCHAR(300)) + '}]',
             @AuditUser,
             NULL
            );
        -- End data audit
        END
        ELSE
        BEGIN
            -- Data audit
            INSERT INTO @AccessRuleActorBeforeEdit
            SELECT AccessRuleActorID,
                   AccessRuleID,
                   ActorSiteGroupID,
                   ActorSiteID,
                   ActorEmployeeGroupID,
                   ActorUserID,
                   GrantingActorIndicator, 
                   intRowStatus
            FROM dbo.AccessRuleActor
            WHERE AccessRuleActorID = @AccessRuleActorID;
            -- End data audit

            UPDATE dbo.AccessRuleActor
            SET AccessRuleID = @AccessRuleID,
                GrantingActorIndicator = @GrantingActorIndicator,
                ActorSiteGroupID = @ActorSiteGroupID,
                ActorSiteID = @ActorSiteID,
                ActorEmployeeGroupID = @ActorEmployeeGroupID,
                ActorUserID = @ActorUserID,
                intRowStatus = @RowStatus,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUser
            WHERE AccessRuleActorID = @AccessRuleActorID;

            -- Data audit
            INSERT INTO @AccessRuleActorAfterEdit
            SELECT AccessRuleActorID,
                   AccessRuleID,
                   ActorSiteGroupID,
                   ActorSiteID,
                   ActorEmployeeGroupID,
                   ActorUserID,
                   GrantingActorIndicator, 
                   intRowStatus
            FROM dbo.AccessRuleActor
            WHERE AccessRuleActorID = @AccessRuleActorID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableAccessRuleActorID,
                       51586990000112,
                       a.AccessRuleActorID,
                       NULL,
                       b.ActorSiteGroupID,
                       a.ActorSiteGroupID,
                       @AuditUser,
                       NULL
                FROM @AccessRuleActorAfterEdit AS a
                    FULL JOIN @AccessRuleActorBeforeEdit AS b
                        ON a.AccessRuleActorID = b.AccessRuleActorID
                WHERE (a.ActorSiteGroupID <> b.ActorSiteGroupID)
                      OR (
                             a.ActorSiteGroupID IS NOT NULL
                             AND b.ActorSiteGroupID IS NULL
                         )
                      OR (
                             a.ActorSiteGroupID IS NULL
                             AND b.ActorSiteGroupID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableAccessRuleActorID,
                       51586990000113,
                       a.AccessRuleActorID,
                       NULL,
                       b.ActorSiteID,
                       a.ActorSiteID,
                       @AuditUser,
                       NULL
                FROM @AccessRuleActorAfterEdit AS a
                    FULL JOIN @AccessRuleActorBeforeEdit AS b
                        ON a.AccessRuleActorID = b.AccessRuleActorID
                WHERE (a.ActorSiteID <> b.ActorSiteID)
                      OR (
                             a.ActorSiteID IS NOT NULL
                             AND b.ActorSiteID IS NULL
                         )
                      OR (
                             a.ActorSiteID IS NULL
                             AND b.ActorSiteID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableAccessRuleActorID,
                       51586990000114,
                       a.AccessRuleActorID,
                       NULL,
                       b.ActorEmployeeGroupID,
                       a.ActorEmployeeGroupID,
                       @AuditUser,
                       NULL
                FROM @AccessRuleActorAfterEdit AS a
                    FULL JOIN @AccessRuleActorBeforeEdit AS b
                        ON a.AccessRuleActorID = b.AccessRuleActorID
                WHERE (a.ActorEmployeeGroupID <> b.ActorEmployeeGroupID)
                      OR (
                             a.ActorEmployeeGroupID IS NOT NULL
                             AND b.ActorEmployeeGroupID IS NULL
                         )
                      OR (
                             a.ActorEmployeeGroupID IS NULL
                             AND b.ActorEmployeeGroupID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableAccessRuleActorID,
                       51586990000115,
                       a.AccessRuleActorID,
                       NULL,
                       b.ActorUserID,
                       a.ActorUserID,
                       @AuditUser,
                       NULL
                FROM @AccessRuleActorAfterEdit AS a
                    FULL JOIN @AccessRuleActorBeforeEdit AS b
                        ON a.AccessRuleActorID = b.AccessRuleActorID
                WHERE (a.ActorUserID <> b.ActorUserID)
                      OR (
                             a.ActorUserID IS NOT NULL
                             AND b.ActorUserID IS NULL
                         )
                      OR (
                             a.ActorUserID IS NULL
                             AND b.ActorUserID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableAccessRuleActorID,
                       51586990000117,
                       a.AccessRuleActorID,
                       NULL,
                       b.GrantingActorIndicator,
                       a.GrantingActorIndicator,
                       @AuditUser,
                       NULL
                FROM @AccessRuleActorAfterEdit AS a
                    FULL JOIN @AccessRuleActorBeforeEdit AS b
                        ON a.AccessRuleActorID = b.AccessRuleActorID
                WHERE (a.GrantingActorIndicator <> b.GrantingActorIndicator)
                      OR (
                             a.GrantingActorIndicator IS NOT NULL
                             AND b.GrantingActorIndicator IS NULL
                         )
                      OR (
                             a.GrantingActorIndicator IS NULL
                             AND b.GrantingActorIndicator IS NOT NULL
                         );
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableAccessRuleActorID,
                       @AccessRuleID,
                       @AuditUser,
                       NULL;
            END
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_ADMIN_EVENT_SET]...';


GO
-- ================================================================================================
-- Name: USSP_ADMIN_EVENT_SET
--
-- Description:	Inserts or updates the event table for SAUC55 and SAUC56.
-- 
-- Field Notes:
--
-- Object - ID of record such as human disease report
-- LoginSite - ID of organization login site where initial event that raise notification was 
-- created.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/18/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long     12/01/2022 Added EIDSS object ID; smart key that represents the parent object.
-- Stephen Long     01/16/2023 Changed site ID where criteria from the user table to the employee 
--                             table as user table's site ID was no longer getting updated.
-- Stephen Long     03/13/2023 Comment out data auditing of site alerts; business determination as
--                             unnecessary.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_ADMIN_EVENT_SET]
(
    @EventId BIGINT,
    @EventTypeId BIGINT,
    @UserId BIGINT,
    @ObjectId BIGINT = NULL,
    @DiseaseId BIGINT = NULL,
    @SiteId BIGINT = NULL,
    @InformationString NVARCHAR(MAX) = NULL,
    @LoginSiteId BIGINT = NULL,
    @LocationId BIGINT = NULL,
    @AuditUserName NVARCHAR(200), 
    @DataAuditEventID BIGINT = NULL, 
    @EIDSSObjectID NVARCHAR(200) = NULL 
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @NeighboringSiteId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventSiteId BIGINT = NULL, 
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @ObjectTableID BIGINT = 76040000000; -- tstEvent
        DECLARE @EventUsers TABLE
        (
            UserId BIGINT NOT NULL,
            SiteId BIGINT NOT NULL
        );
        DECLARE @NeighboringSites TABLE
        (
            AccessRuleId BIGINT,
            SiteId BIGINT
        );
        DECLARE @SiteAccessRuleGrantee TABLE (AccessRuleId BIGINT);

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data Audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        -- Get all users of the target site that have subscribed to the notification type.
        INSERT INTO @EventUsers
        SELECT u.idfUserID,
               e.idfsSite
        FROM dbo.tstUserTable u
            INNER JOIN dbo.EventSubscription es
                ON es.idfUserID = u.idfUserID
                   AND es.EventNameID = @EventTypeId
            INNER JOIN dbo.tlbEmployee e 
                ON e.idfEmployee = u.idfPerson
        WHERE e.idfsSite = @LoginSiteId
              AND u.intRowStatus = 0
              AND es.ReceiveAlertFlag = 1;

        -- Get all users of the target site's neighboring sites based on filtration rules.
        -- Logged in user site ID is a grantor, then get list of grantee sites.
        INSERT INTO @NeighboringSites
        SELECT ar.AccessRuleID,
               ara.ActorSiteID
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = ar.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ar.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1
              AND ar.GrantingActorSiteID = @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
              AND ara.ActorSiteID <> @LoginSiteId
        GROUP BY ara.ActorSiteID,
                 ar.AccessRuleID;

        -- Logged in user site ID access rules as a grantee.
        INSERT INTO @SiteAccessRuleGrantee
        SELECT ara.AccessRuleID
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE ara.ActorSiteID = @LoginSiteId
              AND ara.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1;

        -- Select all grantee sites that the site is also a grantee of.
        INSERT INTO @NeighboringSites
        SELECT sg.AccessRuleID,
               ara.ActorSiteID
        FROM @SiteAccessRuleGrantee sg
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = sg.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ara.ActorSiteID <> @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
        GROUP BY ara.ActorSiteID,
                 sg.AccessRuleID;

        WHILE EXISTS (SELECT * FROM @NeighboringSites)
        BEGIN
            SELECT TOP 1
                @NeighboringSiteId = SiteId
            FROM @NeighboringSites;

            -- Get all users of the neighboring site.
            INSERT INTO @EventUsers
            SELECT u.idfUserID,
                   e.idfsSite
            FROM dbo.tstUserTable u
                INNER JOIN dbo.EventSubscription es
                   ON es.idfUserID = u.idfUserID
                      AND es.EventNameID = @EventTypeId
                INNER JOIN dbo.tlbEmployee e 
                   ON e.idfEmployee = u.idfPerson
            WHERE e.idfsSite = @NeighboringSiteId
                  AND u.intRowStatus = 0
                  AND es.ReceiveAlertFlag = 1;

            DELETE FROM @NeighboringSites
            WHERE SiteID = @NeighboringSiteId;
        END

        WHILE EXISTS (SELECT * FROM @EventUsers)
        BEGIN
            SELECT TOP 1
                @EventUserId = UserId,
                @EventSiteId = SiteId
            FROM @EventUsers;

            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstEvent', @EventId OUTPUT;

            -- Change to the third party site alert/event type id.
            IF @EventSiteId <> @SiteId
            BEGIN
                SET @EventTypeId = CASE WHEN @EventTypeId = 10025503 THEN
                    10025504
                WHEN @EventTypeId = 10025501 THEN
                    10025502
                WHEN @EventTypeId = 10025505 THEN
                    10025506
                WHEN @EventTypeId = 10025507 THEN
                    10025508
                WHEN @EventTypeId = 10025509 THEN
                    10025512
                WHEN @EventTypeId = 10025510 THEN
                    10025511
                WHEN @EventTypeId = 10025037 THEN
                    10025038
                WHEN @EventTypeId = 10025041 THEN
                    10025042
                WHEN @EventTypeId = 10025043 THEN
                    10025044
                WHEN @EventTypeId = 10025045 THEN
                    10025046
                WHEN @EventTypeId = 10025047 THEN
                    10025048
                WHEN @EventTypeId = 10025077 THEN
                    10025078
                WHEN @EventTypeId = 10025079 THEN
                    10025080
                WHEN @EventTypeId = 10025081 THEN
                    10025082
                WHEN @EventTypeId = 10025099 THEN
                    10025100
                WHEN @EventTypeId = 10025097 THEN
                    10025098
                WHEN @EventTypeId = 10025129 THEN
                    10025130
                WHEN @EventTypeId = 10025101 THEN
                    10025102
                WHEN @EventTypeId = 10025103 THEN
                    10025104
                WHEN @EventTypeId = 10025105 THEN
                    10025106
                WHEN @EventTypeId = 10025107 THEN
                    10025108
                WHEN @EventTypeId = 10025085 THEN
                    10025086
                WHEN @EventTypeId = 10025087 THEN
                    10025088
                WHEN @EventTypeId = 10025089 THEN
                    10025090
                WHEN @EventTypeId = 10025091 THEN
                    10025092
                WHEN @EventTypeId = 10025093 THEN
                    10025094
                WHEN @EventTypeId = 10025095 THEN
                    10025096
                WHEN @EventTypeId = 10025067 THEN
                    10025068
                WHEN @EventTypeId = 10025071 THEN
                    10025072
                WHEN @EventTypeId = 10025073 THEN
                    10025074
                WHEN @EventTypeId = 10025075 THEN
                    10025076
                WHEN @EventTypeId = 10025513 THEN
                    10025514
                WHEN @EventTypeId = 10025517 THEN
                    10025518
                WHEN @EventTypeId = 10025519 THEN
                    10025520
                WHEN @EventTypeId = 10025525 THEN
                    10025526
                WHEN @EventTypeId = 10025049 THEN
                    10025050
                WHEN @EventTypeId = 10025051 THEN
                    10025052
                WHEN @EventTypeId = 10025053 THEN
                    10025054
                WHEN @EventTypeId = 10025055 THEN
                    10025056
                WHEN @EventTypeId = 10025057 THEN
                    10025058
                WHEN @EventTypeId = 10025059 THEN
                    10025060
                WHEN @EventTypeId = 10025061 THEN
                    10025062
                WHEN @EventTypeId = 10025065 THEN
                    10025066
                WHEN @EventTypeId = 10025069 THEN
                    10025070
                WHEN @EventTypeId = 10025527 THEN
                    10025528
                WHEN @EventTypeId = 10025529 THEN
                    10025530
                WHEN @EventTypeId = 10025537 THEN
                    10025538
                WHEN @EventTypeId = 10025539 THEN
                    10025540
                WHEN @EventTypeId = 10025563 THEN
                    10025564
                ELSE
                    @EventTypeId
                END
            END

            INSERT INTO dbo.tstEvent
            (
                idfEventID,
                idfsEventTypeID,
                idfObjectID,
                strInformationString,
                --strNote, 
                datEventDatatime,
                idfUserID,
                intProcessed,
                idfsSite,
                idfsDiagnosis,
                idfsLoginSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser,
                idfsLocation
            )
            VALUES
            (@EventId,
             @EventTypeId,
             @ObjectId,
             @InformationString,
             --@Note, 
             GETDATE(),
             @EventUserId,
             0  ,
             @EventSiteId,
             @DiseaseId,
             @LoginSiteId,
             10519001,
             '[{"idfEventID":' + CAST(@EventId AS NVARCHAR(300)) + '}]',
             GETDATE(),
             @AuditUserName,
             @LocationId
            );

            -- Data audit
            --INSERT INTO dbo.tauDataAuditDetailCreate
            --(
            --    idfDataAuditEvent,
            --    idfObjectTable,
            --    idfObject,
            --    SourceSystemNameID,
            --    SourceSystemKeyValue,
            --    AuditCreateUser, 
            --    strObject
            --)
            --VALUES
            --(@DataAuditEventID,
            -- @ObjectTableID,
            -- @EventId,
            -- 10519001,
            -- '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
            -- + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
            -- @AuditUserName, 
            -- @EIDSSObjectID
            --);
            -- End data audit

            DELETE FROM @EventUsers
            WHERE UserId = @EventUserId
                  AND SiteId = @EventSiteId;
        END;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH;

    SELECT @ReturnCode ReturnCode,
           @ReturnMessage ReturnMessage;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_ADMIN_OBJECT_ACCESS_SET]...';


GO
-- ================================================================================================
-- Name: USSP_ADMIN_OBJECT_ACCESS_SET
--
-- Description:	Inserts or updates object access records for use case SAUC29.
--                      
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- -------------------------------------------------------------------
-- Stephen Long    12/21/2022 Initial release.
-- Stephen Long    12/27/2022 Added delete logic.
-- Stephen Long    03/14/2023 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_ADMIN_OBJECT_ACCESS_SET]
(
    @ObjectAccessID BIGINT = NULL,
    @ObjectOperationTypeID BIGINT = NULL,
    @ObjectTypeID BIGINT = NULL,
    @ObjectID BIGINT = NULL,
    @ActorID BIGINT = NULL,
    @SiteID BIGINT = NULL,
    @PermissionTypeID INT = NULL,
    @RowStatus INT = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventID BIGINT = NULL,
                @DataAuditObjectTypeID BIGINT = 10017015, -- Data access 
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTableID BIGINT = 76160000000;      -- tstObjectAccess
        DECLARE @ObjectAccessBeforeEdit TABLE
        (
            ObjectAccessID BIGINT,
            ObjectOperationTypeID BIGINT,
            ObjectTypeID BIGINT,
            ObjectID BIGINT,
            ActorID BIGINT,
            SiteID BIGINT,
            PermissionTypeID INT
        );
        DECLARE @ObjectAccessAfterEdit TABLE
        (
            ObjectAccessID BIGINT,
            ObjectOperationTypeID BIGINT,
            ObjectTypeID BIGINT,
            ObjectID BIGINT,
            ActorID BIGINT,
            SiteID BIGINT,
            PermissionTypeID INT
        );

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tstObjectAccess
            WHERE idfObjectAccess = @ObjectAccessID
                  AND intRowStatus = 0
        )
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstObjectAccess',
                                              @ObjectAccessID OUTPUT;

            INSERT INTO dbo.tstObjectAccess
            (
                idfObjectAccess,
                idfsObjectOperation,
                idfsObjectType,
                idfsObjectID,
                idfActor,
                idfsOnSite,
                intPermission,
                intRowStatus,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@ObjectAccessID,
             @ObjectOperationTypeID,
             @ObjectTypeID,
             @ObjectID,
             @ActorID,
             @SiteID,
             @PermissionTypeID,
             @RowStatus,
             10519002,
             '[{"idfObjectAccess":' + CAST(@ObjectAccessID AS NVARCHAR(24)) + '}]'
            );

            -- Data audit
            SET @DataAuditEventTypeID = 10016001; -- Create data audit event type
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @DataAuditObjectTypeID,
                                                      @ObjectAccessID,
                                                      @ObjectTableID,
                                                      NULL,
                                                      @DataAuditEventID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @ObjectAccessID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             NULL
            );
        -- End data audit
        END
        ELSE IF @RowStatus = 1
        BEGIN
            DELETE FROM dbo.tstObjectAccess
            WHERE idfObjectAccess = @ObjectAccessID;

            -- Data audit
            SET @DataAuditEventTypeID = 10016002; -- Delete data audit event type
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @DataAuditObjectTypeID,
                                                      @ObjectAccessID,
                                                      @ObjectTableID,
                                                      NULL,
                                                      @DataAuditEventID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   @ObjectAccessID,
                   @AuditUserName,
                   NULL;
        -- End data audit
        END
        ELSE
        BEGIN
            -- Data audit
            SET @DataAuditEventTypeID = 10016003; -- Edit data audit event type
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @DataAuditObjectTypeID,
                                                      @ObjectAccessID,
                                                      @ObjectTableID,
                                                      NULL,
                                                      @DataAuditEventID OUTPUT;

            INSERT INTO @ObjectAccessBeforeEdit
            SELECT idfObjectAccess,
                   idfsObjectOperation,
                   idfsObjectType,
                   idfsObjectID,
                   idfActor,
                   idfsOnSite,
                   intPermission
            FROM dbo.tstObjectAccess
            WHERE idfObjectAccess = @ObjectAccessID;
            -- End data audit

            UPDATE dbo.tstObjectAccess
            SET idfsObjectOperation = @ObjectOperationTypeID,
                idfsObjectType = @ObjectTypeID,
                idfsObjectID = @ObjectID,
                idfActor = @ActorID,
                idfsOnSite = @SiteID,
                intPermission = @PermissionTypeID,
                intRowStatus = @RowStatus
            WHERE idfObjectAccess = @ObjectAccessID;

            -- Data audit
            INSERT INTO @ObjectAccessAfterEdit
            SELECT idfObjectAccess,
                   idfsObjectOperation,
                   idfsObjectType,
                   idfsObjectID,
                   idfActor,
                   idfsOnSite,
                   intPermission
            FROM dbo.tstObjectAccess
            WHERE idfObjectAccess = @ObjectAccessID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @DataAuditEventID,
                   76160000000,
                   82000000000,
                   a.ObjectAccessID,
                   NULL,
                   b.ObjectOperationTypeID,
                   a.ObjectOperationTypeID
            FROM @ObjectAccessAfterEdit AS a
                FULL JOIN @ObjectAccessBeforeEdit AS b
                    ON a.ObjectAccessID = b.ObjectAccessID
            WHERE (a.ObjectOperationTypeID <> b.ObjectOperationTypeID)
                  OR (
                         a.ObjectOperationTypeID IS NOT NULL
                         AND b.ObjectOperationTypeID IS NULL
                     )
                  OR (
                         a.ObjectOperationTypeID IS NULL
                         AND b.ObjectOperationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @DataAuditEventID,
                   76160000000,
                   82010000000,
                   a.ObjectAccessID,
                   NULL,
                   b.ObjectTypeID,
                   a.ObjectTypeID
            FROM @ObjectAccessAfterEdit AS a
                FULL JOIN @ObjectAccessBeforeEdit AS b
                    ON a.ObjectAccessID = b.ObjectAccessID
            WHERE (a.ObjectTypeID <> b.ObjectTypeID)
                  OR (
                         a.ObjectTypeID IS NOT NULL
                         AND b.ObjectTypeID IS NULL
                     )
                  OR (
                         a.ObjectTypeID IS NULL
                         AND b.ObjectTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @DataAuditEventID,
                   76160000000,
                   81990000000,
                   a.ObjectAccessID,
                   NULL,
                   b.ObjectID,
                   a.ObjectID
            FROM @ObjectAccessAfterEdit AS a
                FULL JOIN @ObjectAccessBeforeEdit AS b
                    ON a.ObjectAccessID = b.ObjectAccessID
            WHERE (a.ObjectID <> b.ObjectID)
                  OR (
                         a.ObjectID IS NOT NULL
                         AND b.ObjectID IS NULL
                     )
                  OR (
                         a.ObjectID IS NULL
                         AND b.ObjectID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @DataAuditEventID,
                   76160000000,
                   81980000000,
                   a.ObjectAccessID,
                   NULL,
                   b.ActorID,
                   a.ActorID
            FROM @ObjectAccessAfterEdit AS a
                FULL JOIN @ObjectAccessBeforeEdit AS b
                    ON a.ObjectAccessID = b.ObjectAccessID
            WHERE (a.ActorID <> b.ActorID)
                  OR (
                         a.ActorID IS NOT NULL
                         AND b.ActorID IS NULL
                     )
                  OR (
                         a.ActorID IS NULL
                         AND b.ActorID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @DataAuditEventID,
                   76160000000,
                   82020000000,
                   a.ObjectAccessID,
                   NULL,
                   b.SiteID,
                   a.SiteID
            FROM @ObjectAccessAfterEdit AS a
                FULL JOIN @ObjectAccessBeforeEdit AS b
                    ON a.ObjectAccessID = b.ObjectAccessID
            WHERE (a.SiteID <> b.SiteID)
                  OR (
                         a.SiteID IS NOT NULL
                         AND b.SiteID IS NULL
                     )
                  OR (
                         a.SiteID IS NULL
                         AND b.SiteID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @DataAuditEventID,
                   76160000000,
                   82030000000,
                   a.ObjectAccessID,
                   NULL,
                   b.PermissionTypeID,
                   a.PermissionTypeID
            FROM @ObjectAccessAfterEdit AS a
                FULL JOIN @ObjectAccessBeforeEdit AS b
                    ON a.ObjectAccessID = b.ObjectAccessID
            WHERE (a.PermissionTypeID <> b.PermissionTypeID)
                  OR (
                         a.PermissionTypeID IS NOT NULL
                         AND b.PermissionTypeID IS NULL
                     )
                  OR (
                         a.PermissionTypeID IS NULL
                         AND b.PermissionTypeID IS NOT NULL
                     );
        END

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_ADDRESS_SET_WITH_AUDITING]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_ADDRESS_SET_WITH_AUDITING
--
-- Description: Inserts or updates an address record as described in use case SYSUC07.
--          
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name	           Date        Change Detail
-- --------------- ----------- -------------------------------------------------------------------
-- Stephen Long		04/21/2019 Fixed the check for location shared versus location on the 
--                             update portion.
-- Stephen Long		12/26/2019 Added dbo prefix to function calls and replaced with v7 calls.
-- Stephen Long		06/04/2020 Added postal code set call and transaction logic.
-- Stephen Long		06/16/2021 Replaced country, region, rayon and settlement ID's with location 
--                             ID to support location hierarchy.
-- Stephen Long		08/05/2021 Added audit user name.
-- Mark Wilson		09/13/2021 Added additional fields to tlbGeolocation and tlbGeoLocationShared
-- Mark Wilson		09/22/2021 Standardized and updated calls to USSPs
-- Mark Wilson		10/06/2021 Added Elevation.
-- Mark Wilson		10/18/2021 Added back write of Country, Region, Rayon, Settlement.
-- Mark Wilson		10/19/2021 Changed to USSP.
-- Steven Verner	07/06/2022 Updated location select statement to select from flattened location 
--                             hierarchy table.
-- Leo Tracchia		11/28/2022 Added statements for Audit logging - this is a copy of 
--                             USSP_GBL_ADDRESS_SET with auditing logic added .
-- Stephen Long     03/14/2023 Added geo-location data audit event.

-- Testing code:
/*

DECLARE	@return_value int,
		@ReturnCode int,
		@ReturnMessage nvarchar(max)

EXEC	@return_value = [dbo].[USSP_GBL_ADDRESS_SET_WITH_AUDITING]
		@LanguageID = 'en=US',
		@GeolocationID = NULL,
		@LocationID = 1347970000000,
		@Apartment = N'Bunny Apts',
		@Building = N'48',
		@StreetName = N'Broad Street',
		@PostalCodeString = N'30511',
		@Distance = 122.2,
		@Latitude = 125,
		@Longitude = 44,
		@Elevation = 1022,
		@ForeignAddressIndicator = 0,
		@GeolocationSharedIndicator = 0,
		@AuditUserName = N'Roscoe',
		@ReturnCode = @ReturnCode OUTPUT,
		@ReturnMessage = @ReturnMessage OUTPUT

SELECT	@GeolocationID as N'@GeolocationID',
		@ReturnCode as N'@ReturnCode',
		@ReturnMessage as N'@ReturnMessage'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_ADDRESS_SET_WITH_AUDITING]
(
    @GeolocationID BIGINT = NULL OUTPUT,
    @DataAuditEventID BIGINT = NULL,
    @ResidentTypeID BIGINT = NULL,
    @GroundTypeID BIGINT = NULL,
    @GeolocationTypeID BIGINT = 10036001,
    @LocationID BIGINT,
    @Apartment NVARCHAR(200) = NULL,
    @Building NVARCHAR(200) = NULL,
    @StreetName NVARCHAR(200) = NULL,
    @House NVARCHAR(200) = NULL,
    @PostalCodeString NVARCHAR(200) = NULL,
    @DescriptionString NVARCHAR(200) = NULL,
    @Distance FLOAT = NULL,
    @Latitude FLOAT = NULL,
    @Longitude FLOAT = NULL,
    @Elevation FLOAT = NULL,
    @Accuracy FLOAT = NULL,
    @Alignment FLOAT = NULL,
    @ForeignAddressIndicator BIT = 0,
    @ForeignAddressString NVARCHAR(200) = NULL,
    @GeolocationSharedIndicator BIT = 0,
    @AuditUserName NVARCHAR(200) = '',
    @ReturnCode INT = 0 OUTPUT,
    @ReturnMessage NVARCHAR(MAX) = 'SUCCESS' OUTPUT
)
AS
DECLARE @PostalCodeID BIGINT,
        @StreetID BIGINT,
        @AdminLevel INT = NULL,
        @LocationNode HIERARCHYID = NULL,
                                                                --Data Audit--
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @idfsDataAuditEventType BIGINT = NULL,
        @idfObject BIGINT = @GeolocationID,
        @ObjectGeoLocationSharedTableID BIGINT = 4572590000000, -- tlbGeoLocationShared
        @ObjectGeoLocationTableID BIGINT = 75580000000,         -- tlbGeoLocation
        @idfDataAuditEvent BIGINT = NULL,
        @DataAuditEventGeoLocationID BIGINT = NULL;
DECLARE @GeoLocationBeforeEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
DECLARE @GeoLocationAfterEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
-- End data audit

SELECT @LocationNode = node
FROM dbo.gisLocation
WHERE idfsLocation = @LocationID;

BEGIN
    BEGIN TRY
        IF @AuditUserName = ''
            SET @AuditUserName = SUSER_NAME();

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        SET @ReturnCode = 0;
        SET @ReturnMessage = 'SUCCESS';

        BEGIN TRANSACTION;

        IF @ForeignAddressIndicator = 0
        BEGIN
            -- Determine if the location ID passed in is at the settlement level.
            SELECT @AdminLevel = node.GetLevel()
            FROM dbo.gisLocation
            WHERE idfsLocation = @LocationID;

            DECLARE @idfsAdminLevel1 BIGINT, -- country
                    @idfsAdminLevel2 BIGINT, -- region
                    @idfsAdminLevel3 BIGINT, -- rayon
                    @idfsAdminLevel4 BIGINT  -- settlement

            SELECT @idfsAdminLevel1 = fglhf.AdminLevel1ID,
                   @idfsAdminLevel2 = fglhf.AdminLevel2ID,
                   @idfsAdminLevel3 = fglhf.AdminLevel3ID,
                   @idfsAdminLevel4 = adminlevel4ID
            FROM dbo.FN_GBL_LocationHierarchy_Flattened('en-US') fglhf
            WHERE fglhf.idfsLocation = @LocationID;

            -- If it is a settlement level, then determine if the street name and/or postal code 
            -- needs to be added to the appropriate tables for inclusion in the street or postal 
            -- code drop downs.
            IF @AdminLevel = 4
            BEGIN
                IF @StreetName IS NOT NULL
                BEGIN
                    EXECUTE dbo.USSP_GBL_STREET_SET @StreetName = @StreetName,
                                                    @idfsLocation = @LocationID,
                                                    @AuditUserName = @AuditUserName,
                                                    @idfStreet = @StreetID OUTPUT;
                END

                IF @PostalCodeString IS NOT NULL
                BEGIN
                    EXECUTE dbo.USSP_GBL_POSTAL_CODE_SET @strPostCode = @PostalCodeString,
                                                         @idfsLocation = @LocationID,
                                                         @AuditUserName = @AuditUserName,
                                                         @idfPostalCode = @PostalCodeID OUTPUT;
                END
            END
        END

        IF (
               EXISTS
        (
            SELECT *
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeolocationID
        )
               AND (ISNULL(@GeolocationSharedIndicator, 0) <> 1)
           )
        BEGIN
            -- Data audit
            INSERT INTO @GeoLocationBeforeEdit
            (
                GeoLocationID,
                ResidentTypeID,
                GroundTypeID,
                GeoLocationTypeID,
                LocationID,
                PostalCode,
                StreetName,
                House,
                Building,
                Apartment,
                AddressDescription,
                Distance,
                Latitude,
                Longitude,
                Accuracy,
                Alignment,
                ForeignAddressIndicator,
                ForeignAddressString,
                ShortAddressString
            )
            SELECT idfGeoLocation,
                   idfsResidentType,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsLocation,
                   strPostCode,
                   strStreetName,
                   strHouse,
                   strBuilding,
                   strApartment,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   blnForeignAddress,
                   strForeignAddress,
                   strShortAddressString
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID;
            -- End data audit

            UPDATE dbo.tlbGeoLocation
            SET idfsResidentType = @ResidentTypeID,
                idfsGroundType = @GroundTypeID,
                idfsGeoLocationType = @GeolocationTypeID,
                idfsCountry = @idfsAdminLevel1,
                idfsRegion = @idfsAdminLevel2,
                idfsRayon = @idfsAdminLevel3,
                idfsSettlement = @idfsAdminLevel4,
                idfsLocation = @LocationID,
                strApartment = @Apartment,
                strDescription = @DescriptionString,
                dblDistance = @Distance,
                dblAccuracy = @Accuracy,
                dblAlignment = @Alignment,
                strBuilding = @Building,
                strStreetName = @StreetName,
                strHouse = @House,
                strPostCode = @PostalCodeString,
                blnForeignAddress = ISNULL(@ForeignAddressIndicator, 0),
                strForeignAddress = @ForeignAddressString,
                dblLatitude = @Latitude,
                dblLongitude = @Longitude,
                dblElevation = @Elevation,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfGeoLocation = @GeoLocationID

            -- Data audit
            INSERT INTO @GeoLocationAfterEdit
            (
                GeoLocationID,
                ResidentTypeID,
                GroundTypeID,
                GeoLocationTypeID,
                LocationID,
                PostalCode,
                StreetName,
                House,
                Building,
                Apartment,
                AddressDescription,
                Distance,
                Latitude,
                Longitude,
                Accuracy,
                Alignment,
                ForeignAddressIndicator,
                ForeignAddressString,
                ShortAddressString
            )
            SELECT idfGeoLocation,
                   idfsResidentType,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsLocation,
                   strPostCode,
                   strStreetName,
                   strHouse,
                   strBuilding,
                   strApartment,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   blnForeignAddress,
                   strForeignAddress,
                   strShortAddressString
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79200000000,
                   a.GeoLocationID,
                   NULL,
                   b.ResidentTypeID,
                   a.ResidentTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                  OR (
                         a.ResidentTypeID IS NOT NULL
                         AND b.ResidentTypeID IS NULL
                     )
                  OR (
                         a.ResidentTypeID IS NULL
                         AND b.ResidentTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79170000000,
                   a.GeoLocationID,
                   NULL,
                   b.GroundTypeID,
                   a.GroundTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GroundTypeID <> b.GroundTypeID)
                  OR (
                         a.GroundTypeID IS NOT NULL
                         AND b.GroundTypeID IS NULL
                     )
                  OR (
                         a.GroundTypeID IS NULL
                         AND b.GroundTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79160000000,
                   a.GeoLocationID,
                   NULL,
                   b.GeoLocationTypeID,
                   a.GeoLocationTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                  OR (
                         a.GeoLocationTypeID IS NOT NULL
                         AND b.GeoLocationTypeID IS NULL
                     )
                  OR (
                         a.GeoLocationTypeID IS NULL
                         AND b.GeoLocationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   51523700000000,
                   a.GeoLocationID,
                   NULL,
                   b.LocationID,
                   a.LocationID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.LocationID <> b.LocationID)
                  OR (
                         a.LocationID IS NOT NULL
                         AND b.LocationID IS NULL
                     )
                  OR (
                         a.LocationID IS NULL
                         AND b.LocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79260000000,
                   a.GeoLocationID,
                   NULL,
                   b.PostalCode,
                   a.PostalCode,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.PostalCode <> b.PostalCode)
                  OR (
                         a.PostalCode IS NOT NULL
                         AND b.PostalCode IS NULL
                     )
                  OR (
                         a.PostalCode IS NULL
                         AND b.PostalCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79270000000,
                   a.GeoLocationID,
                   NULL,
                   b.StreetName,
                   a.StreetName,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.StreetName <> b.StreetName)
                  OR (
                         a.StreetName IS NOT NULL
                         AND b.StreetName IS NULL
                     )
                  OR (
                         a.StreetName IS NULL
                         AND b.StreetName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79250000000,
                   a.GeoLocationID,
                   NULL,
                   b.House,
                   a.House,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.House <> b.House)
                  OR (
                         a.House IS NOT NULL
                         AND b.House IS NULL
                     )
                  OR (
                         a.House IS NULL
                         AND b.House IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79230000000,
                   a.GeoLocationID,
                   NULL,
                   b.Building,
                   a.Building,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Building <> b.Building)
                  OR (
                         a.Building IS NOT NULL
                         AND b.Building IS NULL
                     )
                  OR (
                         a.Building IS NULL
                         AND b.Building IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   4577890000000,
                   a.GeoLocationID,
                   NULL,
                   b.Apartment,
                   a.Apartment,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Apartment <> b.Apartment)
                  OR (
                         a.Apartment IS NOT NULL
                         AND b.Apartment IS NULL
                     )
                  OR (
                         a.Apartment IS NULL
                         AND b.Apartment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79240000000,
                   a.GeoLocationID,
                   NULL,
                   b.AddressDescription,
                   a.AddressDescription,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.AddressDescription <> b.AddressDescription)
                  OR (
                         a.AddressDescription IS NOT NULL
                         AND b.AddressDescription IS NULL
                     )
                  OR (
                         a.AddressDescription IS NULL
                         AND b.AddressDescription IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79110000000,
                   a.GeoLocationID,
                   NULL,
                   b.Distance,
                   a.Distance,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Distance <> b.Distance)
                  OR (
                         a.Distance IS NOT NULL
                         AND b.Distance IS NULL
                     )
                  OR (
                         a.Distance IS NULL
                         AND b.Distance IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79120000000,
                   a.GeoLocationID,
                   NULL,
                   b.Latitude,
                   a.Latitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Latitude <> b.Latitude)
                  OR (
                         a.Latitude IS NOT NULL
                         AND b.Latitude IS NULL
                     )
                  OR (
                         a.Latitude IS NULL
                         AND b.Latitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79130000000,
                   a.GeoLocationID,
                   NULL,
                   b.Longitude,
                   a.Longitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Longitude <> b.Longitude)
                  OR (
                         a.Longitude IS NOT NULL
                         AND b.Longitude IS NULL
                     )
                  OR (
                         a.Longitude IS NULL
                         AND b.Longitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79090000000,
                   a.GeoLocationID,
                   NULL,
                   b.Accuracy,
                   a.Accuracy,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Accuracy <> b.Accuracy)
                  OR (
                         a.Accuracy IS NOT NULL
                         AND b.Accuracy IS NULL
                     )
                  OR (
                         a.Accuracy IS NULL
                         AND b.Accuracy IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79100000000,
                   a.GeoLocationID,
                   NULL,
                   b.Alignment,
                   a.Alignment,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Alignment <> b.Alignment)
                  OR (
                         a.Alignment IS NOT NULL
                         AND b.Alignment IS NULL
                     )
                  OR (
                         a.Alignment IS NULL
                         AND b.Alignment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   4578780000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressIndicator,
                   a.ForeignAddressIndicator,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                  OR (
                         a.ForeignAddressIndicator IS NOT NULL
                         AND b.ForeignAddressIndicator IS NULL
                     )
                  OR (
                         a.ForeignAddressIndicator IS NULL
                         AND b.ForeignAddressIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   4578790000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressString,
                   a.ForeignAddressString,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                  OR (
                         a.ForeignAddressString IS NOT NULL
                         AND b.ForeignAddressString IS NULL
                     )
                  OR (
                         a.ForeignAddressString IS NULL
                         AND b.ForeignAddressString IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   51523680000000,
                   a.GeoLocationID,
                   NULL,
                   b.ShortAddressString,
                   a.ShortAddressString,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ShortAddressString <> b.ShortAddressString)
                  OR (
                         a.ShortAddressString IS NOT NULL
                         AND b.ShortAddressString IS NULL
                     )
                  OR (
                         a.ShortAddressString IS NULL
                         AND b.ShortAddressString IS NOT NULL
                     );

            -- Add data audit event for the geo-location object type
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      10016003, -- Edit data audit event type
                                                      10017025, -- Geo-location data audit object type
                                                      @GeoLocationID,
                                                      @ObjectGeoLocationTableID,
                                                      NULL,
                                                      @DataAuditEventGeoLocationID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79200000000,
                   a.GeoLocationID,
                   NULL,
                   b.ResidentTypeID,
                   a.ResidentTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                  OR (
                         a.ResidentTypeID IS NOT NULL
                         AND b.ResidentTypeID IS NULL
                     )
                  OR (
                         a.ResidentTypeID IS NULL
                         AND b.ResidentTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79170000000,
                   a.GeoLocationID,
                   NULL,
                   b.GroundTypeID,
                   a.GroundTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GroundTypeID <> b.GroundTypeID)
                  OR (
                         a.GroundTypeID IS NOT NULL
                         AND b.GroundTypeID IS NULL
                     )
                  OR (
                         a.GroundTypeID IS NULL
                         AND b.GroundTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79160000000,
                   a.GeoLocationID,
                   NULL,
                   b.GeoLocationTypeID,
                   a.GeoLocationTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                  OR (
                         a.GeoLocationTypeID IS NOT NULL
                         AND b.GeoLocationTypeID IS NULL
                     )
                  OR (
                         a.GeoLocationTypeID IS NULL
                         AND b.GeoLocationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   51523700000000,
                   a.GeoLocationID,
                   NULL,
                   b.LocationID,
                   a.LocationID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.LocationID <> b.LocationID)
                  OR (
                         a.LocationID IS NOT NULL
                         AND b.LocationID IS NULL
                     )
                  OR (
                         a.LocationID IS NULL
                         AND b.LocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79260000000,
                   a.GeoLocationID,
                   NULL,
                   b.PostalCode,
                   a.PostalCode,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.PostalCode <> b.PostalCode)
                  OR (
                         a.PostalCode IS NOT NULL
                         AND b.PostalCode IS NULL
                     )
                  OR (
                         a.PostalCode IS NULL
                         AND b.PostalCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79270000000,
                   a.GeoLocationID,
                   NULL,
                   b.StreetName,
                   a.StreetName,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.StreetName <> b.StreetName)
                  OR (
                         a.StreetName IS NOT NULL
                         AND b.StreetName IS NULL
                     )
                  OR (
                         a.StreetName IS NULL
                         AND b.StreetName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79250000000,
                   a.GeoLocationID,
                   NULL,
                   b.House,
                   a.House,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.House <> b.House)
                  OR (
                         a.House IS NOT NULL
                         AND b.House IS NULL
                     )
                  OR (
                         a.House IS NULL
                         AND b.House IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79230000000,
                   a.GeoLocationID,
                   NULL,
                   b.Building,
                   a.Building,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Building <> b.Building)
                  OR (
                         a.Building IS NOT NULL
                         AND b.Building IS NULL
                     )
                  OR (
                         a.Building IS NULL
                         AND b.Building IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   4577890000000,
                   a.GeoLocationID,
                   NULL,
                   b.Apartment,
                   a.Apartment,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Apartment <> b.Apartment)
                  OR (
                         a.Apartment IS NOT NULL
                         AND b.Apartment IS NULL
                     )
                  OR (
                         a.Apartment IS NULL
                         AND b.Apartment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79240000000,
                   a.GeoLocationID,
                   NULL,
                   b.AddressDescription,
                   a.AddressDescription,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.AddressDescription <> b.AddressDescription)
                  OR (
                         a.AddressDescription IS NOT NULL
                         AND b.AddressDescription IS NULL
                     )
                  OR (
                         a.AddressDescription IS NULL
                         AND b.AddressDescription IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79110000000,
                   a.GeoLocationID,
                   NULL,
                   b.Distance,
                   a.Distance,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Distance <> b.Distance)
                  OR (
                         a.Distance IS NOT NULL
                         AND b.Distance IS NULL
                     )
                  OR (
                         a.Distance IS NULL
                         AND b.Distance IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79120000000,
                   a.GeoLocationID,
                   NULL,
                   b.Latitude,
                   a.Latitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Latitude <> b.Latitude)
                  OR (
                         a.Latitude IS NOT NULL
                         AND b.Latitude IS NULL
                     )
                  OR (
                         a.Latitude IS NULL
                         AND b.Latitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79130000000,
                   a.GeoLocationID,
                   NULL,
                   b.Longitude,
                   a.Longitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Longitude <> b.Longitude)
                  OR (
                         a.Longitude IS NOT NULL
                         AND b.Longitude IS NULL
                     )
                  OR (
                         a.Longitude IS NULL
                         AND b.Longitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79090000000,
                   a.GeoLocationID,
                   NULL,
                   b.Accuracy,
                   a.Accuracy,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Accuracy <> b.Accuracy)
                  OR (
                         a.Accuracy IS NOT NULL
                         AND b.Accuracy IS NULL
                     )
                  OR (
                         a.Accuracy IS NULL
                         AND b.Accuracy IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79100000000,
                   a.GeoLocationID,
                   NULL,
                   b.Alignment,
                   a.Alignment,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Alignment <> b.Alignment)
                  OR (
                         a.Alignment IS NOT NULL
                         AND b.Alignment IS NULL
                     )
                  OR (
                         a.Alignment IS NULL
                         AND b.Alignment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   4578780000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressIndicator,
                   a.ForeignAddressIndicator,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                  OR (
                         a.ForeignAddressIndicator IS NOT NULL
                         AND b.ForeignAddressIndicator IS NULL
                     )
                  OR (
                         a.ForeignAddressIndicator IS NULL
                         AND b.ForeignAddressIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   4578790000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressString,
                   a.ForeignAddressString,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                  OR (
                         a.ForeignAddressString IS NOT NULL
                         AND b.ForeignAddressString IS NULL
                     )
                  OR (
                         a.ForeignAddressString IS NULL
                         AND b.ForeignAddressString IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   51523680000000,
                   a.GeoLocationID,
                   NULL,
                   b.ShortAddressString,
                   a.ShortAddressString,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ShortAddressString <> b.ShortAddressString)
                  OR (
                         a.ShortAddressString IS NOT NULL
                         AND b.ShortAddressString IS NULL
                     )
                  OR (
                         a.ShortAddressString IS NULL
                         AND b.ShortAddressString IS NOT NULL
                     );
        -- End data audit
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbGeoLocationShared
            WHERE idfGeoLocationShared = @GeolocationID
        )
        BEGIN
            -- Data audit
            INSERT INTO @GeoLocationBeforeEdit
            (
                GeoLocationID,
                ResidentTypeID,
                GroundTypeID,
                GeoLocationTypeID,
                LocationID,
                PostalCode,
                StreetName,
                House,
                Building,
                Apartment,
                AddressDescription,
                Distance,
                Latitude,
                Longitude,
                Accuracy,
                Alignment,
                ForeignAddressIndicator,
                ForeignAddressString,
                ShortAddressString
            )
            SELECT idfGeoLocationShared,
                   idfsResidentType,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsLocation,
                   strPostCode,
                   strStreetName,
                   strHouse,
                   strBuilding,
                   strApartment,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   blnForeignAddress,
                   strForeignAddress,
                   strShortAddressString
            FROM dbo.tlbGeoLocationShared
            WHERE idfGeoLocationShared = @GeolocationID;
            -- End data audit

            UPDATE dbo.tlbGeoLocationShared
            SET idfsResidentType = @ResidentTypeID,
                idfsGroundType = @GroundTypeID,
                idfsGeoLocationType = 10036001,
                idfsCountry = @idfsAdminLevel1,
                idfsRegion = @idfsAdminLevel2,
                idfsRayon = @idfsAdminLevel3,
                idfsSettlement = @idfsAdminLevel4,
                idfsLocation = @LocationID,
                strApartment = @Apartment,
                strDescription = @DescriptionString,
                dblDistance = @Distance,
                dblAccuracy = @Accuracy,
                dblAlignment = @Alignment,
                strBuilding = @Building,
                strStreetName = @StreetName,
                strHouse = @House,
                strPostCode = @PostalCodeString,
                blnForeignAddress = ISNULL(@ForeignAddressIndicator, 0),
                strForeignAddress = @ForeignAddressString,
                dblLatitude = @Latitude,
                dblLongitude = @Longitude,
                dblElevation = @Elevation,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfGeoLocationShared = @GeolocationID

            -- Data audit
            INSERT INTO @GeoLocationAfterEdit
            (
                GeoLocationID,
                ResidentTypeID,
                GroundTypeID,
                GeoLocationTypeID,
                LocationID,
                PostalCode,
                StreetName,
                House,
                Building,
                Apartment,
                AddressDescription,
                Distance,
                Latitude,
                Longitude,
                Accuracy,
                Alignment,
                ForeignAddressIndicator,
                ForeignAddressString,
                ShortAddressString
            )
            SELECT idfGeoLocationShared,
                   idfsResidentType,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsLocation,
                   strPostCode,
                   strStreetName,
                   strHouse,
                   strBuilding,
                   strApartment,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   blnForeignAddress,
                   strForeignAddress,
                   strShortAddressString
            FROM dbo.tlbGeoLocationShared
            WHERE idfGeoLocationShared = @GeolocationID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79200000000,
                   a.GeoLocationID,
                   NULL,
                   b.ResidentTypeID,
                   a.ResidentTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                  OR (
                         a.ResidentTypeID IS NOT NULL
                         AND b.ResidentTypeID IS NULL
                     )
                  OR (
                         a.ResidentTypeID IS NULL
                         AND b.ResidentTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79170000000,
                   a.GeoLocationID,
                   NULL,
                   b.GroundTypeID,
                   a.GroundTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GroundTypeID <> b.GroundTypeID)
                  OR (
                         a.GroundTypeID IS NOT NULL
                         AND b.GroundTypeID IS NULL
                     )
                  OR (
                         a.GroundTypeID IS NULL
                         AND b.GroundTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79160000000,
                   a.GeoLocationID,
                   NULL,
                   b.GeoLocationTypeID,
                   a.GeoLocationTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                  OR (
                         a.GeoLocationTypeID IS NOT NULL
                         AND b.GeoLocationTypeID IS NULL
                     )
                  OR (
                         a.GeoLocationTypeID IS NULL
                         AND b.GeoLocationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   51523700000000,
                   a.GeoLocationID,
                   NULL,
                   b.LocationID,
                   a.LocationID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.LocationID <> b.LocationID)
                  OR (
                         a.LocationID IS NOT NULL
                         AND b.LocationID IS NULL
                     )
                  OR (
                         a.LocationID IS NULL
                         AND b.LocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79260000000,
                   a.GeoLocationID,
                   NULL,
                   b.PostalCode,
                   a.PostalCode,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.PostalCode <> b.PostalCode)
                  OR (
                         a.PostalCode IS NOT NULL
                         AND b.PostalCode IS NULL
                     )
                  OR (
                         a.PostalCode IS NULL
                         AND b.PostalCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79270000000,
                   a.GeoLocationID,
                   NULL,
                   b.StreetName,
                   a.StreetName,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.StreetName <> b.StreetName)
                  OR (
                         a.StreetName IS NOT NULL
                         AND b.StreetName IS NULL
                     )
                  OR (
                         a.StreetName IS NULL
                         AND b.StreetName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79250000000,
                   a.GeoLocationID,
                   NULL,
                   b.House,
                   a.House,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.House <> b.House)
                  OR (
                         a.House IS NOT NULL
                         AND b.House IS NULL
                     )
                  OR (
                         a.House IS NULL
                         AND b.House IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79230000000,
                   a.GeoLocationID,
                   NULL,
                   b.Building,
                   a.Building,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Building <> b.Building)
                  OR (
                         a.Building IS NOT NULL
                         AND b.Building IS NULL
                     )
                  OR (
                         a.Building IS NULL
                         AND b.Building IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   4577890000000,
                   a.GeoLocationID,
                   NULL,
                   b.Apartment,
                   a.Apartment,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Apartment <> b.Apartment)
                  OR (
                         a.Apartment IS NOT NULL
                         AND b.Apartment IS NULL
                     )
                  OR (
                         a.Apartment IS NULL
                         AND b.Apartment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79240000000,
                   a.GeoLocationID,
                   NULL,
                   b.AddressDescription,
                   a.AddressDescription,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.AddressDescription <> b.AddressDescription)
                  OR (
                         a.AddressDescription IS NOT NULL
                         AND b.AddressDescription IS NULL
                     )
                  OR (
                         a.AddressDescription IS NULL
                         AND b.AddressDescription IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79110000000,
                   a.GeoLocationID,
                   NULL,
                   b.Distance,
                   a.Distance,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Distance <> b.Distance)
                  OR (
                         a.Distance IS NOT NULL
                         AND b.Distance IS NULL
                     )
                  OR (
                         a.Distance IS NULL
                         AND b.Distance IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79120000000,
                   a.GeoLocationID,
                   NULL,
                   b.Latitude,
                   a.Latitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Latitude <> b.Latitude)
                  OR (
                         a.Latitude IS NOT NULL
                         AND b.Latitude IS NULL
                     )
                  OR (
                         a.Latitude IS NULL
                         AND b.Latitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79130000000,
                   a.GeoLocationID,
                   NULL,
                   b.Longitude,
                   a.Longitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Longitude <> b.Longitude)
                  OR (
                         a.Longitude IS NOT NULL
                         AND b.Longitude IS NULL
                     )
                  OR (
                         a.Longitude IS NULL
                         AND b.Longitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79090000000,
                   a.GeoLocationID,
                   NULL,
                   b.Accuracy,
                   a.Accuracy,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Accuracy <> b.Accuracy)
                  OR (
                         a.Accuracy IS NOT NULL
                         AND b.Accuracy IS NULL
                     )
                  OR (
                         a.Accuracy IS NULL
                         AND b.Accuracy IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   79100000000,
                   a.GeoLocationID,
                   NULL,
                   b.Alignment,
                   a.Alignment,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Alignment <> b.Alignment)
                  OR (
                         a.Alignment IS NOT NULL
                         AND b.Alignment IS NULL
                     )
                  OR (
                         a.Alignment IS NULL
                         AND b.Alignment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   4578780000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressIndicator,
                   a.ForeignAddressIndicator,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                  OR (
                         a.ForeignAddressIndicator IS NOT NULL
                         AND b.ForeignAddressIndicator IS NULL
                     )
                  OR (
                         a.ForeignAddressIndicator IS NULL
                         AND b.ForeignAddressIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   4578790000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressString,
                   a.ForeignAddressString,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                  OR (
                         a.ForeignAddressString IS NOT NULL
                         AND b.ForeignAddressString IS NULL
                     )
                  OR (
                         a.ForeignAddressString IS NULL
                         AND b.ForeignAddressString IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationSharedTableID,
                   51523680000000,
                   a.GeoLocationID,
                   NULL,
                   b.ShortAddressString,
                   a.ShortAddressString,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ShortAddressString <> b.ShortAddressString)
                  OR (
                         a.ShortAddressString IS NOT NULL
                         AND b.ShortAddressString IS NULL
                     )
                  OR (
                         a.ShortAddressString IS NULL
                         AND b.ShortAddressString IS NOT NULL
                     );

            -- Add data audit event for the geo-location object type
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      10016003, -- Edit data audit event type
                                                      10017025, -- Geo-location data audit object type
                                                      @GeolocationID,
                                                      @ObjectGeoLocationSharedTableID,
                                                      NULL,
                                                      @DataAuditEventGeoLocationID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79200000000,
                   a.GeoLocationID,
                   NULL,
                   b.ResidentTypeID,
                   a.ResidentTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                  OR (
                         a.ResidentTypeID IS NOT NULL
                         AND b.ResidentTypeID IS NULL
                     )
                  OR (
                         a.ResidentTypeID IS NULL
                         AND b.ResidentTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79170000000,
                   a.GeoLocationID,
                   NULL,
                   b.GroundTypeID,
                   a.GroundTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GroundTypeID <> b.GroundTypeID)
                  OR (
                         a.GroundTypeID IS NOT NULL
                         AND b.GroundTypeID IS NULL
                     )
                  OR (
                         a.GroundTypeID IS NULL
                         AND b.GroundTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79160000000,
                   a.GeoLocationID,
                   NULL,
                   b.GeoLocationTypeID,
                   a.GeoLocationTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                  OR (
                         a.GeoLocationTypeID IS NOT NULL
                         AND b.GeoLocationTypeID IS NULL
                     )
                  OR (
                         a.GeoLocationTypeID IS NULL
                         AND b.GeoLocationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   51523700000000,
                   a.GeoLocationID,
                   NULL,
                   b.LocationID,
                   a.LocationID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.LocationID <> b.LocationID)
                  OR (
                         a.LocationID IS NOT NULL
                         AND b.LocationID IS NULL
                     )
                  OR (
                         a.LocationID IS NULL
                         AND b.LocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79260000000,
                   a.GeoLocationID,
                   NULL,
                   b.PostalCode,
                   a.PostalCode,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.PostalCode <> b.PostalCode)
                  OR (
                         a.PostalCode IS NOT NULL
                         AND b.PostalCode IS NULL
                     )
                  OR (
                         a.PostalCode IS NULL
                         AND b.PostalCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79270000000,
                   a.GeoLocationID,
                   NULL,
                   b.StreetName,
                   a.StreetName,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.StreetName <> b.StreetName)
                  OR (
                         a.StreetName IS NOT NULL
                         AND b.StreetName IS NULL
                     )
                  OR (
                         a.StreetName IS NULL
                         AND b.StreetName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79250000000,
                   a.GeoLocationID,
                   NULL,
                   b.House,
                   a.House,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.House <> b.House)
                  OR (
                         a.House IS NOT NULL
                         AND b.House IS NULL
                     )
                  OR (
                         a.House IS NULL
                         AND b.House IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79230000000,
                   a.GeoLocationID,
                   NULL,
                   b.Building,
                   a.Building,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Building <> b.Building)
                  OR (
                         a.Building IS NOT NULL
                         AND b.Building IS NULL
                     )
                  OR (
                         a.Building IS NULL
                         AND b.Building IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   4577890000000,
                   a.GeoLocationID,
                   NULL,
                   b.Apartment,
                   a.Apartment,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Apartment <> b.Apartment)
                  OR (
                         a.Apartment IS NOT NULL
                         AND b.Apartment IS NULL
                     )
                  OR (
                         a.Apartment IS NULL
                         AND b.Apartment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79240000000,
                   a.GeoLocationID,
                   NULL,
                   b.AddressDescription,
                   a.AddressDescription,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.AddressDescription <> b.AddressDescription)
                  OR (
                         a.AddressDescription IS NOT NULL
                         AND b.AddressDescription IS NULL
                     )
                  OR (
                         a.AddressDescription IS NULL
                         AND b.AddressDescription IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79110000000,
                   a.GeoLocationID,
                   NULL,
                   b.Distance,
                   a.Distance,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Distance <> b.Distance)
                  OR (
                         a.Distance IS NOT NULL
                         AND b.Distance IS NULL
                     )
                  OR (
                         a.Distance IS NULL
                         AND b.Distance IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79120000000,
                   a.GeoLocationID,
                   NULL,
                   b.Latitude,
                   a.Latitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Latitude <> b.Latitude)
                  OR (
                         a.Latitude IS NOT NULL
                         AND b.Latitude IS NULL
                     )
                  OR (
                         a.Latitude IS NULL
                         AND b.Latitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79130000000,
                   a.GeoLocationID,
                   NULL,
                   b.Longitude,
                   a.Longitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Longitude <> b.Longitude)
                  OR (
                         a.Longitude IS NOT NULL
                         AND b.Longitude IS NULL
                     )
                  OR (
                         a.Longitude IS NULL
                         AND b.Longitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79090000000,
                   a.GeoLocationID,
                   NULL,
                   b.Accuracy,
                   a.Accuracy,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Accuracy <> b.Accuracy)
                  OR (
                         a.Accuracy IS NOT NULL
                         AND b.Accuracy IS NULL
                     )
                  OR (
                         a.Accuracy IS NULL
                         AND b.Accuracy IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   79100000000,
                   a.GeoLocationID,
                   NULL,
                   b.Alignment,
                   a.Alignment,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Alignment <> b.Alignment)
                  OR (
                         a.Alignment IS NOT NULL
                         AND b.Alignment IS NULL
                     )
                  OR (
                         a.Alignment IS NULL
                         AND b.Alignment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   4578780000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressIndicator,
                   a.ForeignAddressIndicator,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                  OR (
                         a.ForeignAddressIndicator IS NOT NULL
                         AND b.ForeignAddressIndicator IS NULL
                     )
                  OR (
                         a.ForeignAddressIndicator IS NULL
                         AND b.ForeignAddressIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   4578790000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressString,
                   a.ForeignAddressString,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                  OR (
                         a.ForeignAddressString IS NOT NULL
                         AND b.ForeignAddressString IS NULL
                     )
                  OR (
                         a.ForeignAddressString IS NULL
                         AND b.ForeignAddressString IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationSharedTableID,
                   51523680000000,
                   a.GeoLocationID,
                   NULL,
                   b.ShortAddressString,
                   a.ShortAddressString,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ShortAddressString <> b.ShortAddressString)
                  OR (
                         a.ShortAddressString IS NOT NULL
                         AND b.ShortAddressString IS NULL
                     )
                  OR (
                         a.ShortAddressString IS NULL
                         AND b.ShortAddressString IS NOT NULL
                     );
        -- End data audit
        END
        ELSE IF ISNULL(@GeolocationSharedIndicator, 0) <> 1
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbGeoLocation',
                                              @idfsKey = @GeolocationID OUTPUT;

            INSERT INTO dbo.tlbGeoLocation
            (
                idfGeoLocation,
                idfsResidentType,
                idfsGroundType,
                idfsGeoLocationType,
                idfsCountry,
                idfsRegion,
                idfsRayon,
                idfsSettlement,
                idfsLocation,
                strDescription,
                dblDistance,
                dblAccuracy,
                dblAlignment,
                strApartment,
                strBuilding,
                strStreetName,
                strHouse,
                strPostCode,
                blnForeignAddress,
                strForeignAddress,
                dblLatitude,
                dblLongitude,
                dblElevation,
                intRowStatus,
                rowguid,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@GeolocationID,
             @ResidentTypeID,
             @GroundTypeID,
             @GeolocationTypeID,
             @idfsAdminLevel1,
             @idfsAdminLevel2,
             @idfsAdminLevel3,
             @idfsAdminLevel4,
             @LocationID,
             @DescriptionString,
             @Distance,
             @Accuracy,
             @Alignment,
             @Apartment,
             @Building,
             @StreetName,
             @House,
             @PostalCodeString,
             ISNULL(@ForeignAddressIndicator, 0),
             @ForeignAddressString,
             @Latitude,
             @Longitude,
             @Elevation,
             0  ,
             NEWID(),
             10519001,
             '[{"idfGeoLocation":' + CAST(@GeolocationID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             GETDATE(),
             @AuditUserName,
             GETDATE()
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventID,
             @ObjectGeoLocationTableID,
             @GeolocationID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectGeoLocationTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );

            -- Add data audit event for the geo-location object type
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      10016001, -- Create data audit event type
                                                      10017025, -- Geo-location data audit object type
                                                      @GeoLocationID,
                                                      @ObjectGeoLocationTableID,
                                                      NULL,
                                                      @DataAuditEventGeoLocationID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventGeoLocationID,
             @ObjectGeoLocationTableID,
             @GeolocationID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectGeoLocationTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );
        -- End data audit
        END
        ELSE
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbGeoLocationShared',
                                              @idfsKey = @GeolocationID OUTPUT;

            INSERT INTO dbo.tlbGeoLocationShared
            (
                idfGeoLocationShared,
                idfsResidentType,
                idfsGroundType,
                idfsGeoLocationType,
                idfsCountry,
                idfsRegion,
                idfsRayon,
                idfsSettlement,
                idfsLocation,
                strDescription,
                dblDistance,
                dblAccuracy,
                dblAlignment,
                strApartment,
                strBuilding,
                strStreetName,
                strHouse,
                strPostCode,
                blnForeignAddress,
                strForeignAddress,
                dblLatitude,
                dblLongitude,
                dblElevation,
                intRowStatus,
                rowguid,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@GeolocationID,
             @ResidentTypeID,
             @GroundTypeID,
             @GeolocationTypeID,
             @idfsAdminLevel1,
             @idfsAdminLevel2,
             @idfsAdminLevel3,
             @idfsAdminLevel4,
             @LocationID,
             @DescriptionString,
             @Distance,
             @Accuracy,
             @Alignment,
             @Apartment,
             @Building,
             @StreetName,
             @House,
             @PostalCodeString,
             ISNULL(@ForeignAddressIndicator, 0),
             @ForeignAddressString,
             @Latitude,
             @Longitude,
             @Elevation,
             0  ,
             NEWID(),
             10519001,
             '[{"idfGeoLocationShared":' + CAST(@GeolocationID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             GETDATE(),
             @AuditUserName,
             GETDATE()
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventID,
             @ObjectGeoLocationSharedTableID,
             @GeolocationID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectGeoLocationSharedTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );

            -- Add data audit event for the geo-location object type
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      10016001, -- Create data audit event type
                                                      10017025, -- Geo-location data audit object type
                                                      @GeoLocationID,
                                                      @ObjectGeoLocationSharedTableID,
                                                      NULL,
                                                      @DataAuditEventGeoLocationID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventGeoLocationID,
             @ObjectGeoLocationSharedTableID,
             @GeolocationID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectGeoLocationSharedTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );
        -- End data audit
        END

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_COPY_GEOLOCATION_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_COPY_GEOLOCATION_SET
--
-- Description:	If record with @GeoLocationIDCopy doesn't exist, new record with this ID is 
-- created. If original location record doesn't exist the empty record with @GeoLocationIDCopy is 
-- created.
--          
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        11/18/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long        11/28/2022 Changed column identifier for idfsLocation.
-- Stephen Long        03/14/2023 Fix on geo-location copy ID; added default of null and added 
--                                source system values on insert statements for geo-location.
--                                Removed geo-location shared as this is never copied in EIDSS7.
--                                Added geo-location data audit event.
--
--Example of a call of procedure:
--DECLARE @RC int
--DECLARE @GeoLocationID bigint
--DECLARE @GeoLocationIDCopy bigint
--SET @GeoLocationID = 123890000000
--SET @GeoLocationIDCopy = 1

--EXECUTE @RC = USSP_GBL_COPY_GEOLOCATION_SET
--   @GeoLocationID
--  ,@GeoLocationIDCopy
--  ,1

-- delete dbo.tflGeoLocationFiltered WHERE idfGeoLocation = 1
-- delete dbo.tlbGeoLocation WHERE idfGeoLocation = 1
-- delete dbo.tlbGeoLocationShared WHERE idfGeoLocationShared = 1
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_COPY_GEOLOCATION_SET]
(
    @GeoLocationID BIGINT,
    @GeoLocationIDCopy BIGINT,
    @GlobalCopyAsDefaultIndicator BIT = 0,
    @DataAuditEventID BIGINT = NULL,
    @AuditUserName NVARCHAR(200) = NULL,
    @ReturnCode INT = 0 OUTPUT,
    @ReturnMsg NVARCHAR(MAX) = 'SUCCESS' OUTPUT
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventGeoLocationID BIGINT = NULL,
        @ObjectID BIGINT = @GeoLocationID,
        @ObjectGeoLocationTableID BIGINT = 75580000000; -- tlbGeoLocation
DECLARE @GeoLocationBeforeEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
DECLARE @GeoLocationAfterEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
BEGIN
    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationIDCopy
        )
        BEGIN
            INSERT INTO dbo.tlbGeoLocation
            (
                idfGeoLocation,
                idfsGroundType,
                idfsGeoLocationType,
                idfsCountry,
                idfsRegion,
                idfsRayon,
                idfsSettlement,
                strDescription,
                dblDistance,
                dblLatitude,
                dblLongitude,
                dblAccuracy,
                dblAlignment,
                strApartment,
                strBuilding,
                strStreetName,
                strHouse,
                strPostCode,
                idfsResidentType,
                idfsLocation,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            SELECT @GeoLocationIDCopy,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsCountry,
                   idfsRegion,
                   idfsRayon,
                   idfsSettlement,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   strApartment,
                   strBuilding,
                   strStreetName,
                   strHouse,
                   strPostCode,
                   idfsResidentType,
                   idfsLocation,
                   10519001,
                   '[{"idfGeoLocation":' + CAST(@GeoLocationIDCopy AS NVARCHAR(300)) + '}]',
                   @AuditUserName
            FROM dbo.tlbGeoLocationShared
            WHERE idfGeoLocationShared = @GeoLocationID;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventID,
             @ObjectGeoLocationTableID,
             @GeoLocationIDCopy,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectGeoLocationTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );

            -- Add data audit event for the geo-location object type
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      10016001, -- Create data audit event type
                                                      10017025, -- Geolocation data audit object type
                                                      @GeoLocationIDCopy,
                                                      @ObjectGeoLocationTableID,
                                                      NULL,
                                                      @DataAuditEventGeoLocationID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventGeoLocationID,
             @ObjectGeoLocationTableID,
             @GeoLocationIDCopy,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectGeoLocationTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );
        -- End data audit
        END
        ELSE
        BEGIN
            -- Data audit
            INSERT INTO @GeoLocationBeforeEdit
            (
                GeoLocationID,
                ResidentTypeID,
                GroundTypeID,
                GeoLocationTypeID,
                LocationID,
                PostalCode,
                StreetName,
                House,
                Building,
                Apartment,
                AddressDescription,
                Distance,
                Latitude,
                Longitude,
                Accuracy,
                Alignment,
                ForeignAddressIndicator,
                ForeignAddressString,
                ShortAddressString
            )
            SELECT idfGeoLocation,
                   idfsResidentType,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsLocation,
                   strPostCode,
                   strStreetName,
                   strHouse,
                   strBuilding,
                   strApartment,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   blnForeignAddress,
                   strForeignAddress,
                   strShortAddressString
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID;
            -- End data audit

            UPDATE new
            SET idfsGroundType = old.idfsGroundType,
                idfsGeoLocationType = old.idfsGeoLocationType,
                idfsCountry = old.idfsCountry,
                idfsRegion = old.idfsRegion,
                idfsRayon = old.idfsRayon,
                idfsSettlement = old.idfsSettlement,
                strDescription = old.strDescription,
                dblDistance = old.dblDistance,
                dblLatitude = old.dblLatitude,
                dblLongitude = old.dblLongitude,
                dblAccuracy = old.dblAccuracy,
                dblAlignment = old.dblAlignment,
                strApartment = old.strApartment,
                strBuilding = old.strBuilding,
                strStreetName = old.strStreetName,
                strHouse = old.strHouse,
                strPostCode = old.strPostCode,
                idfsResidentType = old.idfsResidentType,
                idfsLocation = old.idfsLocation
            FROM dbo.tlbGeoLocation old
                INNER JOIN dbo.tlbGeoLocation new
                    ON new.idfGeoLocation = @GeoLocationIDCopy
                       AND (
                               ISNULL(new.idfsGroundType, 0) != ISNULL(old.idfsGroundType, 0)
                               OR ISNULL(new.idfsGeoLocationType, 0) != ISNULL(old.idfsGeoLocationType, 0)
                               OR ISNULL(new.idfsCountry, 0) != ISNULL(old.idfsCountry, 0)
                               OR ISNULL(new.idfsRegion, 0) != ISNULL(old.idfsRegion, 0)
                               OR ISNULL(new.idfsRayon, 0) != ISNULL(old.idfsRayon, 0)
                               OR ISNULL(new.idfsSettlement, 0) != ISNULL(old.idfsSettlement, 0)
                               OR ISNULL(new.strDescription, '') != ISNULL(old.strDescription, '')
                               OR ISNULL(new.dblDistance, 0) != ISNULL(old.dblDistance, 0)
                               OR ISNULL(new.dblLatitude, 0) != ISNULL(old.dblLatitude, 0)
                               OR ISNULL(new.dblLongitude, 0) != ISNULL(old.dblLongitude, 0)
                               OR ISNULL(new.dblAccuracy, 0) != ISNULL(old.dblAccuracy, 0)
                               OR ISNULL(new.dblAlignment, 0) != ISNULL(old.dblAlignment, 0)
                               OR ISNULL(new.strApartment, '') != ISNULL(old.strApartment, '')
                               OR ISNULL(new.strBuilding, '') != ISNULL(old.strBuilding, '')
                               OR ISNULL(new.strStreetName, '') != ISNULL(old.strStreetName, '')
                               OR ISNULL(new.strHouse, '') != ISNULL(old.strHouse, '')
                               OR ISNULL(new.strPostCode, '') != ISNULL(old.strPostCode, '')
                               OR ISNULL(new.idfsResidentType, 0) != ISNULL(old.idfsResidentType, 0)
                               OR ISNULL(new.idfsLocation, 0) != ISNULL(old.idfsLocation, 0)
                           )
            WHERE old.idfGeoLocation = @GeoLocationID;

            -- Data audit
            INSERT INTO @GeoLocationAfterEdit
            (
                GeoLocationID,
                ResidentTypeID,
                GroundTypeID,
                GeoLocationTypeID,
                LocationID,
                PostalCode,
                StreetName,
                House,
                Building,
                Apartment,
                AddressDescription,
                Distance,
                Latitude,
                Longitude,
                Accuracy,
                Alignment,
                ForeignAddressIndicator,
                ForeignAddressString,
                ShortAddressString
            )
            SELECT idfGeoLocation,
                   idfsResidentType,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsLocation,
                   strPostCode,
                   strStreetName,
                   strHouse,
                   strBuilding,
                   strApartment,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   blnForeignAddress,
                   strForeignAddress,
                   strShortAddressString
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79200000000,
                   a.GeoLocationID,
                   NULL,
                   b.ResidentTypeID,
                   a.ResidentTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                  OR (
                         a.ResidentTypeID IS NOT NULL
                         AND b.ResidentTypeID IS NULL
                     )
                  OR (
                         a.ResidentTypeID IS NULL
                         AND b.ResidentTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79170000000,
                   a.GeoLocationID,
                   NULL,
                   b.GroundTypeID,
                   a.GroundTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GroundTypeID <> b.GroundTypeID)
                  OR (
                         a.GroundTypeID IS NOT NULL
                         AND b.GroundTypeID IS NULL
                     )
                  OR (
                         a.GroundTypeID IS NULL
                         AND b.GroundTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79160000000,
                   a.GeoLocationID,
                   NULL,
                   b.GeoLocationTypeID,
                   a.GeoLocationTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                  OR (
                         a.GeoLocationTypeID IS NOT NULL
                         AND b.GeoLocationTypeID IS NULL
                     )
                  OR (
                         a.GeoLocationTypeID IS NULL
                         AND b.GeoLocationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   51523700000000,
                   a.GeoLocationID,
                   NULL,
                   b.LocationID,
                   a.LocationID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.LocationID <> b.LocationID)
                  OR (
                         a.LocationID IS NOT NULL
                         AND b.LocationID IS NULL
                     )
                  OR (
                         a.LocationID IS NULL
                         AND b.LocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79260000000,
                   a.GeoLocationID,
                   NULL,
                   b.PostalCode,
                   a.PostalCode,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.PostalCode <> b.PostalCode)
                  OR (
                         a.PostalCode IS NOT NULL
                         AND b.PostalCode IS NULL
                     )
                  OR (
                         a.PostalCode IS NULL
                         AND b.PostalCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79270000000,
                   a.GeoLocationID,
                   NULL,
                   b.StreetName,
                   a.StreetName,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.StreetName <> b.StreetName)
                  OR (
                         a.StreetName IS NOT NULL
                         AND b.StreetName IS NULL
                     )
                  OR (
                         a.StreetName IS NULL
                         AND b.StreetName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79250000000,
                   a.GeoLocationID,
                   NULL,
                   b.House,
                   a.House,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.House <> b.House)
                  OR (
                         a.House IS NOT NULL
                         AND b.House IS NULL
                     )
                  OR (
                         a.House IS NULL
                         AND b.House IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79230000000,
                   a.GeoLocationID,
                   NULL,
                   b.Building,
                   a.Building,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Building <> b.Building)
                  OR (
                         a.Building IS NOT NULL
                         AND b.Building IS NULL
                     )
                  OR (
                         a.Building IS NULL
                         AND b.Building IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   4577890000000,
                   a.GeoLocationID,
                   NULL,
                   b.Apartment,
                   a.Apartment,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Apartment <> b.Apartment)
                  OR (
                         a.Apartment IS NOT NULL
                         AND b.Apartment IS NULL
                     )
                  OR (
                         a.Apartment IS NULL
                         AND b.Apartment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79240000000,
                   a.GeoLocationID,
                   NULL,
                   b.AddressDescription,
                   a.AddressDescription,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.AddressDescription <> b.AddressDescription)
                  OR (
                         a.AddressDescription IS NOT NULL
                         AND b.AddressDescription IS NULL
                     )
                  OR (
                         a.AddressDescription IS NULL
                         AND b.AddressDescription IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79110000000,
                   a.GeoLocationID,
                   NULL,
                   b.Distance,
                   a.Distance,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Distance <> b.Distance)
                  OR (
                         a.Distance IS NOT NULL
                         AND b.Distance IS NULL
                     )
                  OR (
                         a.Distance IS NULL
                         AND b.Distance IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79120000000,
                   a.GeoLocationID,
                   NULL,
                   b.Latitude,
                   a.Latitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Latitude <> b.Latitude)
                  OR (
                         a.Latitude IS NOT NULL
                         AND b.Latitude IS NULL
                     )
                  OR (
                         a.Latitude IS NULL
                         AND b.Latitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79130000000,
                   a.GeoLocationID,
                   NULL,
                   b.Longitude,
                   a.Longitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Longitude <> b.Longitude)
                  OR (
                         a.Longitude IS NOT NULL
                         AND b.Longitude IS NULL
                     )
                  OR (
                         a.Longitude IS NULL
                         AND b.Longitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79090000000,
                   a.GeoLocationID,
                   NULL,
                   b.Accuracy,
                   a.Accuracy,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Accuracy <> b.Accuracy)
                  OR (
                         a.Accuracy IS NOT NULL
                         AND b.Accuracy IS NULL
                     )
                  OR (
                         a.Accuracy IS NULL
                         AND b.Accuracy IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   79100000000,
                   a.GeoLocationID,
                   NULL,
                   b.Alignment,
                   a.Alignment,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Alignment <> b.Alignment)
                  OR (
                         a.Alignment IS NOT NULL
                         AND b.Alignment IS NULL
                     )
                  OR (
                         a.Alignment IS NULL
                         AND b.Alignment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   4578780000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressIndicator,
                   a.ForeignAddressIndicator,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                  OR (
                         a.ForeignAddressIndicator IS NOT NULL
                         AND b.ForeignAddressIndicator IS NULL
                     )
                  OR (
                         a.ForeignAddressIndicator IS NULL
                         AND b.ForeignAddressIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   4578790000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressString,
                   a.ForeignAddressString,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                  OR (
                         a.ForeignAddressString IS NOT NULL
                         AND b.ForeignAddressString IS NULL
                     )
                  OR (
                         a.ForeignAddressString IS NULL
                         AND b.ForeignAddressString IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectGeoLocationTableID,
                   51523680000000,
                   a.GeoLocationID,
                   NULL,
                   b.ShortAddressString,
                   a.ShortAddressString,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ShortAddressString <> b.ShortAddressString)
                  OR (
                         a.ShortAddressString IS NOT NULL
                         AND b.ShortAddressString IS NULL
                     )
                  OR (
                         a.ShortAddressString IS NULL
                         AND b.ShortAddressString IS NOT NULL
                     );

            -- Add data audit event for the geo-location object type
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      10016003, -- Create data audit event type
                                                      10017025, -- Geolocation data audit object type
                                                      @GeoLocationIDCopy,
                                                      @ObjectGeoLocationTableID,
                                                      NULL,
                                                      @DataAuditEventGeoLocationID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79200000000,
                   a.GeoLocationID,
                   NULL,
                   b.ResidentTypeID,
                   a.ResidentTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                  OR (
                         a.ResidentTypeID IS NOT NULL
                         AND b.ResidentTypeID IS NULL
                     )
                  OR (
                         a.ResidentTypeID IS NULL
                         AND b.ResidentTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79170000000,
                   a.GeoLocationID,
                   NULL,
                   b.GroundTypeID,
                   a.GroundTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GroundTypeID <> b.GroundTypeID)
                  OR (
                         a.GroundTypeID IS NOT NULL
                         AND b.GroundTypeID IS NULL
                     )
                  OR (
                         a.GroundTypeID IS NULL
                         AND b.GroundTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79160000000,
                   a.GeoLocationID,
                   NULL,
                   b.GeoLocationTypeID,
                   a.GeoLocationTypeID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                  OR (
                         a.GeoLocationTypeID IS NOT NULL
                         AND b.GeoLocationTypeID IS NULL
                     )
                  OR (
                         a.GeoLocationTypeID IS NULL
                         AND b.GeoLocationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   51523700000000,
                   a.GeoLocationID,
                   NULL,
                   b.LocationID,
                   a.LocationID,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.LocationID <> b.LocationID)
                  OR (
                         a.LocationID IS NOT NULL
                         AND b.LocationID IS NULL
                     )
                  OR (
                         a.LocationID IS NULL
                         AND b.LocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79260000000,
                   a.GeoLocationID,
                   NULL,
                   b.PostalCode,
                   a.PostalCode,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.PostalCode <> b.PostalCode)
                  OR (
                         a.PostalCode IS NOT NULL
                         AND b.PostalCode IS NULL
                     )
                  OR (
                         a.PostalCode IS NULL
                         AND b.PostalCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79270000000,
                   a.GeoLocationID,
                   NULL,
                   b.StreetName,
                   a.StreetName,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.StreetName <> b.StreetName)
                  OR (
                         a.StreetName IS NOT NULL
                         AND b.StreetName IS NULL
                     )
                  OR (
                         a.StreetName IS NULL
                         AND b.StreetName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79250000000,
                   a.GeoLocationID,
                   NULL,
                   b.House,
                   a.House,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.House <> b.House)
                  OR (
                         a.House IS NOT NULL
                         AND b.House IS NULL
                     )
                  OR (
                         a.House IS NULL
                         AND b.House IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79230000000,
                   a.GeoLocationID,
                   NULL,
                   b.Building,
                   a.Building,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Building <> b.Building)
                  OR (
                         a.Building IS NOT NULL
                         AND b.Building IS NULL
                     )
                  OR (
                         a.Building IS NULL
                         AND b.Building IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   4577890000000,
                   a.GeoLocationID,
                   NULL,
                   b.Apartment,
                   a.Apartment,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Apartment <> b.Apartment)
                  OR (
                         a.Apartment IS NOT NULL
                         AND b.Apartment IS NULL
                     )
                  OR (
                         a.Apartment IS NULL
                         AND b.Apartment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79240000000,
                   a.GeoLocationID,
                   NULL,
                   b.AddressDescription,
                   a.AddressDescription,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.AddressDescription <> b.AddressDescription)
                  OR (
                         a.AddressDescription IS NOT NULL
                         AND b.AddressDescription IS NULL
                     )
                  OR (
                         a.AddressDescription IS NULL
                         AND b.AddressDescription IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79110000000,
                   a.GeoLocationID,
                   NULL,
                   b.Distance,
                   a.Distance,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Distance <> b.Distance)
                  OR (
                         a.Distance IS NOT NULL
                         AND b.Distance IS NULL
                     )
                  OR (
                         a.Distance IS NULL
                         AND b.Distance IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79120000000,
                   a.GeoLocationID,
                   NULL,
                   b.Latitude,
                   a.Latitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Latitude <> b.Latitude)
                  OR (
                         a.Latitude IS NOT NULL
                         AND b.Latitude IS NULL
                     )
                  OR (
                         a.Latitude IS NULL
                         AND b.Latitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79130000000,
                   a.GeoLocationID,
                   NULL,
                   b.Longitude,
                   a.Longitude,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Longitude <> b.Longitude)
                  OR (
                         a.Longitude IS NOT NULL
                         AND b.Longitude IS NULL
                     )
                  OR (
                         a.Longitude IS NULL
                         AND b.Longitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79090000000,
                   a.GeoLocationID,
                   NULL,
                   b.Accuracy,
                   a.Accuracy,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Accuracy <> b.Accuracy)
                  OR (
                         a.Accuracy IS NOT NULL
                         AND b.Accuracy IS NULL
                     )
                  OR (
                         a.Accuracy IS NULL
                         AND b.Accuracy IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   79100000000,
                   a.GeoLocationID,
                   NULL,
                   b.Alignment,
                   a.Alignment,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Alignment <> b.Alignment)
                  OR (
                         a.Alignment IS NOT NULL
                         AND b.Alignment IS NULL
                     )
                  OR (
                         a.Alignment IS NULL
                         AND b.Alignment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   4578780000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressIndicator,
                   a.ForeignAddressIndicator,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                  OR (
                         a.ForeignAddressIndicator IS NOT NULL
                         AND b.ForeignAddressIndicator IS NULL
                     )
                  OR (
                         a.ForeignAddressIndicator IS NULL
                         AND b.ForeignAddressIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   4578790000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressString,
                   a.ForeignAddressString,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                  OR (
                         a.ForeignAddressString IS NOT NULL
                         AND b.ForeignAddressString IS NULL
                     )
                  OR (
                         a.ForeignAddressString IS NULL
                         AND b.ForeignAddressString IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventGeoLocationID,
                   @ObjectGeoLocationTableID,
                   51523680000000,
                   a.GeoLocationID,
                   NULL,
                   b.ShortAddressString,
                   a.ShortAddressString,
                   @AuditUserName
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ShortAddressString <> b.ShortAddressString)
                  OR (
                         a.ShortAddressString IS NOT NULL
                         AND b.ShortAddressString IS NULL
                     )
                  OR (
                         a.ShortAddressString IS NULL
                         AND b.ShortAddressString IS NOT NULL
                     );
        -- End data audit
        END

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMsg 'ReturnMessage';
    END TRY
    BEGIN CATCH
        THROW;

    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_TEST_AMENDMENT_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_TEST_AMENDMENT_SET
--
-- Description:	Inserts or updates test amendment records for various use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/01/2018 Initial release.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
-- Stephen Long     09/24/2021 Removed language parameter as it is not needed.
-- Stephen Long     02/21/2023 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_TEST_AMENDMENT_SET]
(
    @TestAmendmentID BIGINT OUTPUT,
    @TestID BIGINT,
    @AmendedByOrganizationID BIGINT = NULL,
    @AmendedByPersonID BIGINT = NULL,
    @AmendedDate DATETIME,
    @OldTestResultTypeID BIGINT = NULL,
    @NewTestResultTypeID BIGINT = NULL,
    @OldNote NVARCHAR(500) = NULL,
    @NewNote NVARCHAR(500) = NULL,
    @ReasonForAmendment NVARCHAR(500) = NULL,
    @RowStatus INT,
    @RecordAction NCHAR,
    @AuditUserName NVARCHAR(200),
    @EIDSSLaboratorySampleID NVARCHAR(200), 
    @DataAuditEventID BIGINT 
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Data audit
        DECLARE @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = 10017053,
                @ObjectTableTestAmendmentHistoryID BIGINT = 4578430000000, -- tlbTestAmendmentHistory
                @EIDSSObjectID NVARCHAR(200);
        DECLARE @TestAmendmentHistoryBeforeEdit TABLE
        (
            TestAmendmentID BIGINT,
            TestID BIGINT,
            AmendedByOrganizationID BIGINT,
            AmendedByPersonID BIGINT,
            AmendedDate DATETIME,
            OldTestResultTypeID BIGINT,
            NewTestResultTypeID BIGINT,
            OldNote NVARCHAR(500),
            NewNote NVARCHAR(500),
            ReasonForAmendment NVARCHAR(500),
            RowStatus INT
        );
        DECLARE @TestAmendmentHistoryAfterEdit TABLE
        (
            TestAmendmentID BIGINT,
            TestID BIGINT,
            AmendedByOrganizationID BIGINT,
            AmendedByPersonID BIGINT,
            AmendedDate DATETIME,
            OldTestResultTypeID BIGINT,
            NewTestResultTypeID BIGINT,
            OldNote NVARCHAR(500),
            NewNote NVARCHAR(500),
            ReasonForAmendment NVARCHAR(500),
            RowStatus INT
        );

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        SET @EIDSSObjectID = @EIDSSLaboratorySampleID;
        -- End data audit

        IF @RecordAction = 1
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbTestAmendmentHistory',
                                              @TestAmendmentID OUTPUT;

            INSERT INTO dbo.tlbTestAmendmentHistory
            (
                idfTestAmendmentHistory,
                idfTesting,
                idfAmendByOffice,
                idfAmendByPerson,
                datAmendmentDate,
                idfsOldTestResult,
                idfsNewTestResult,
                strOldNote,
                strNewNote,
                strReason,
                intRowStatus,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@TestAmendmentID,
             @TestID,
             @AmendedByOrganizationID,
             @AmendedByPersonID,
             @AmendedDate,
             @OldTestResultTypeID,
             @NewTestResultTypeID,
             @OldNote,
             @NewNote,
             @ReasonForAmendment,
             @RowStatus,
             GETDATE(),
             @AuditUserName
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableTestAmendmentHistoryID,
             @TestAmendmentID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableTestAmendmentHistoryID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO @TestAmendmentHistoryBeforeEdit
            SELECT idfTestAmendmentHistory,
                   idfTesting,
                   idfAmendByOffice,
                   idfAmendByPerson,
                   datAmendmentDate,
                   idfsOldTestResult,
                   idfsNewTestResult,
                   strOldNote,
                   strNewNote,
                   strReason,
                   intRowStatus
            FROM dbo.tlbTestAmendmentHistory
            WHERE idfTestAmendmentHistory = @TestAmendmentID;

            UPDATE dbo.tlbTestAmendmentHistory
            SET idfTesting = @TestID,
                idfAmendByOffice = @AmendedByOrganizationID,
                idfAmendByPerson = @AmendedByPersonID,
                datAmendmentDate = @AmendedDate,
                idfsOldTestResult = @OldTestResultTypeID,
                idfsNewTestResult = @NewTestResultTypeID,
                strOldNote = @OldNote,
                strNewNote = @NewNote,
                strReason = @ReasonForAmendment,
                intRowStatus = @RowStatus,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfTestAmendmentHistory = @TestAmendmentID;

            INSERT INTO @TestAmendmentHistoryAfterEdit
            SELECT idfTestAmendmentHistory,
                   idfTesting,
                   idfAmendByOffice,
                   idfAmendByPerson,
                   datAmendmentDate,
                   idfsOldTestResult,
                   idfsNewTestResult,
                   strOldNote,
                   strNewNote,
                   strReason,
                   intRowStatus
            FROM dbo.tlbTestAmendmentHistory
            WHERE idfTestAmendmentHistory = @TestAmendmentID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestAmendmentHistoryID,
                   4578450000000,
                   a.TestAmendmentID,
                   NULL,
                   b.TestID,
                   a.TestID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAmendmentHistoryAfterEdit a
                FULL JOIN @TestAmendmentHistoryBeforeEdit b
                    ON a.TestAmendmentID = b.TestAmendmentID
            WHERE (a.TestID <> b.TestID)
                  OR (
                         a.TestID IS NOT NULL
                         AND b.TestID IS NULL
                     )
                  OR (
                         a.TestID IS NULL
                         AND b.TestID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestAmendmentHistoryID,
                   4578460000000,
                   a.TestAmendmentID,
                   NULL,
                   b.AmendedByOrganizationID,
                   a.AmendedByOrganizationID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAmendmentHistoryAfterEdit a
                FULL JOIN @TestAmendmentHistoryBeforeEdit b
                    ON a.TestAmendmentID = b.TestAmendmentID
            WHERE (a.AmendedByOrganizationID <> b.AmendedByOrganizationID)
                  OR (
                         a.AmendedByOrganizationID IS NOT NULL
                         AND b.AmendedByOrganizationID IS NULL
                     )
                  OR (
                         a.AmendedByOrganizationID IS NULL
                         AND b.AmendedByOrganizationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestAmendmentHistoryID,
                   4578470000000,
                   a.TestAmendmentID,
                   NULL,
                   b.AmendedByPersonID,
                   a.AmendedByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAmendmentHistoryAfterEdit a
                FULL JOIN @TestAmendmentHistoryBeforeEdit b
                    ON a.TestAmendmentID = b.TestAmendmentID
            WHERE (a.AmendedByPersonID <> b.AmendedByPersonID)
                  OR (
                         a.AmendedByPersonID IS NOT NULL
                         AND b.AmendedByPersonID IS NULL
                     )
                  OR (
                         a.AmendedByPersonID IS NULL
                         AND b.AmendedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestAmendmentHistoryID,
                   4578480000000,
                   a.TestAmendmentID,
                   NULL,
                   b.AmendedDate,
                   a.AmendedDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAmendmentHistoryAfterEdit a
                FULL JOIN @TestAmendmentHistoryBeforeEdit b
                    ON a.TestAmendmentID = b.TestAmendmentID
            WHERE (a.AmendedDate <> b.AmendedDate)
                  OR (
                         a.AmendedDate IS NOT NULL
                         AND b.AmendedDate IS NULL
                     )
                  OR (
                         a.AmendedDate IS NULL
                         AND b.AmendedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestAmendmentHistoryID,
                   4578490000000,
                   a.TestAmendmentID,
                   NULL,
                   b.OldTestResultTypeID,
                   a.OldTestResultTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAmendmentHistoryAfterEdit a
                FULL JOIN @TestAmendmentHistoryBeforeEdit b
                    ON a.TestAmendmentID = b.TestAmendmentID
            WHERE (a.OldTestResultTypeID <> b.OldTestResultTypeID)
                  OR (
                         a.OldTestResultTypeID IS NOT NULL
                         AND b.OldTestResultTypeID IS NULL
                     )
                  OR (
                         a.OldTestResultTypeID IS NULL
                         AND b.OldTestResultTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestAmendmentHistoryID,
                   4578500000000,
                   a.TestAmendmentID,
                   NULL,
                   b.NewTestResultTypeID,
                   a.NewTestResultTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAmendmentHistoryAfterEdit a
                FULL JOIN @TestAmendmentHistoryBeforeEdit b
                    ON a.TestAmendmentID = b.TestAmendmentID
            WHERE (a.NewTestResultTypeID <> b.NewTestResultTypeID)
                  OR (
                         a.NewTestResultTypeID IS NOT NULL
                         AND b.NewTestResultTypeID IS NULL
                     )
                  OR (
                         a.NewTestResultTypeID IS NULL
                         AND b.NewTestResultTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestAmendmentHistoryID,
                   4578510000000,
                   a.TestAmendmentID,
                   NULL,
                   b.OldNote,
                   a.OldNote,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAmendmentHistoryAfterEdit a
                FULL JOIN @TestAmendmentHistoryBeforeEdit b
                    ON a.TestAmendmentID = b.TestAmendmentID
            WHERE (a.OldNote <> b.OldNote)
                  OR (
                         a.OldNote IS NOT NULL
                         AND b.OldNote IS NULL
                     )
                  OR (
                         a.OldNote IS NULL
                         AND b.OldNote IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestAmendmentHistoryID,
                   4578520000000,
                   a.TestAmendmentID,
                   NULL,
                   b.NewNote,
                   a.NewNote,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAmendmentHistoryAfterEdit a
                FULL JOIN @TestAmendmentHistoryBeforeEdit b
                    ON a.TestAmendmentID = b.TestAmendmentID
            WHERE (a.NewNote <> b.NewNote)
                  OR (
                         a.NewNote IS NOT NULL
                         AND b.NewNote IS NULL
                     )
                  OR (
                         a.NewNote IS NULL
                         AND b.NewNote IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestAmendmentHistoryID,
                   4578530000000,
                   a.TestAmendmentID,
                   NULL,
                   b.ReasonForAmendment,
                   a.ReasonForAmendment,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAmendmentHistoryAfterEdit a
                FULL JOIN @TestAmendmentHistoryBeforeEdit b
                    ON a.TestAmendmentID = b.TestAmendmentID
            WHERE (a.ReasonForAmendment <> b.ReasonForAmendment)
                  OR (
                         a.ReasonForAmendment IS NOT NULL
                         AND b.ReasonForAmendment IS NULL
                     )
                  OR (
                         a.ReasonForAmendment IS NULL
                         AND b.ReasonForAmendment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestAmendmentHistoryID,
                   a.TestAmendmentID,
                   NULL,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAmendmentHistoryAfterEdit AS a
                FULL JOIN @TestAmendmentHistoryBeforeEdit AS b
                    ON a.TestAmendmentID = b.TestAmendmentID
            WHERE a.RowStatus = 0
                  AND b.RowStatus = 1;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_LAB_TEST_SET]...';


GO
-- ================================================================================================
-- Name: USSP_LAB_TEST_SET
--
-- Description:	Inserts or updates test records for various laboratory module use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		01/24/2019 Initial release.
-- Stephen Long     02/01/2019 Added null to the observation ID parameter.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
-- Stephen Long     10/28/2020 Changed record action from nchar to char.
-- Stephen Long     02/11/2021 Add logic to set test unassigned and test completed indicators.
-- Stephen Long     09/24/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     01/31/2022 Added source system name and key value update on insert.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                  defect 5006.
-- Stephen Long     10/21/2022 Added veterinary disease report, monitoring session and vector 
--                             identifiers to the USSP_LAB_TEST_SET call.
-- Stephen Long     01/04/2023 Added update to tests conducted field on human and veterinary 
--                             disease report when a test is added or deleted.
-- Stephen Long     02/21/2023 Added data audit logic for SAUC30 and 31.
-- Stephen Long     03/28/2023 Fix to set sample test unassigned and test completed indicators 
--                             after the test record is saved.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_LAB_TEST_SET]
(
    @TestID BIGINT,
    @TestNameTypeID BIGINT = NULL,
    @TestCategoryTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestStatusTypeID BIGINT,
    @PreviousTestStatusTypeID BIGINT = NULL,
    @DiseaseID BIGINT,
    @SampleID BIGINT = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200),
    @BatchTestID BIGINT = NULL,
    @ObservationID BIGINT = NULL,
    @TestNumber INT = NULL,
    @Note NVARCHAR(500) = NULL,
    @RowStatus INT = NULL,
    @StartedDate DATETIME = NULL,
    @ConcludedDate DATETIME = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @NonLaboratoryTestIndicator BIT,
    @ExternalTestIndicator BIT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @ReceivedDate DATETIME = NULL,
    @ContactPerson NVARCHAR(200) = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorID BIGINT = NULL,
    @RowAction INT,
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @TestAssignedCount AS INT = 0,
                                                                            -- Data audit
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = 10017053,
                @ObjectID BIGINT = NULL,
                @ObjectTableSampleID BIGINT = 75620000000,                  -- tlbMaterial
                @ObjectTableTestID BIGINT = 75740000000,                    -- tlbTesting
                @ObjectTableHumanDiseaseReportID BIGINT = 75610000000,      -- tlbHumanCase,
                @ObjectTableVeterinaryDiseaseReportID BIGINT = 75800000000, -- tlbVetCase
                @EIDSSObjectID NVARCHAR(200);
        -- End data audit

        DECLARE @TestBeforeEdit TABLE
        (
            TestID BIGINT,
            TestNameTypeID BIGINT,
            TestCategoryTypeID BIGINT,
            TestResultTypeID BIGINT,
            TestStatusTypeID BIGINT,
            DiseaseID BIGINT,
            SampleID BIGINT,
            BatchTestID BIGINT,
            ObservationID BIGINT,
            TestNumber INT,
            Note NVARCHAR(500),
            StartedDate DATETIME,
            ConcludedDate DATETIME,
            TestedByOfficeID BIGINT,
            TestedByPersonID BIGINT,
            ResultEnteredByOfficeID BIGINT,
            ResultEnteredByPersonID BIGINT,
            ValidatedByOfficeID BIGINT,
            ValidatedByPersonID BIGINT,
            ReadOnlyIndicator BIT,
            NonLaboratoryTestIndicator BIT,
            ExternalTestIndicator BIT,
            PerformedByOfficeID BIGINT,
            ReceivedDate DATETIME,
            ContactPerson NVARCHAR(200),
            RowStatus INT,
            PreviousTestStatusTypeID BIGINT,
            MonitoringSessionID BIGINT,
            HumanDiseaseReportID BIGINT,
            VeterinaryDiseaseReportID BIGINT,
            VectorID BIGINT
        );
        DECLARE @TestAfterEdit TABLE
        (
            TestID BIGINT,
            TestNameTypeID BIGINT,
            TestCategoryTypeID BIGINT,
            TestResultTypeID BIGINT,
            TestStatusTypeID BIGINT,
            DiseaseID BIGINT,
            SampleID BIGINT,
            BatchTestID BIGINT,
            ObservationID BIGINT,
            TestNumber INT,
            Note NVARCHAR(500),
            StartedDate DATETIME,
            ConcludedDate DATETIME,
            TestedByOfficeID BIGINT,
            TestedByPersonID BIGINT,
            ResultEnteredByOfficeID BIGINT,
            ResultEnteredByPersonID BIGINT,
            ValidatedByOfficeID BIGINT,
            ValidatedByPersonID BIGINT,
            ReadOnlyIndicator BIT,
            NonLaboratoryTestIndicator BIT,
            ExternalTestIndicator BIT,
            PerformedByOfficeID BIGINT,
            ReceivedDate DATETIME,
            ContactPerson NVARCHAR(200),
            RowStatus INT,
            PreviousTestStatusTypeID BIGINT,
            MonitoringSessionID BIGINT,
            HumanDiseaseReportID BIGINT,
            VeterinaryDiseaseReportID BIGINT,
            VectorID BIGINT
        );
        DECLARE @SampleBeforeEdit TABLE
        (
            SampleID BIGINT,
            TestUnassignedIndicator BIT,
            TestCompletedIndicator BIT
        );
        DECLARE @SampleAfterEdit TABLE
        (
            SampleID BIGINT,
            TestUnassignedIndicator BIT,
            TestCompletedIndicator BIT
        );
        DECLARE @HumanDiseaseReportBeforeEdit TABLE
        (
            HumanDiseaseReportID BIGINT,
            TestsConductedTypeID BIGINT NULL
        );
        DECLARE @HumanDiseaseReportAfterEdit TABLE
        (
            HumanDiseaseReportID BIGINT,
            TestsConductedTypeID BIGINT NULL
        );
        DECLARE @VeterinaryDiseaseReportBeforeEdit TABLE
        (
            VeterinaryDiseaseReportID BIGINT,
            TestsConductedTypeID BIGINT NULL
        );
        DECLARE @VeterinaryDiseaseReportAfterEdit TABLE
        (
            VeterinaryDiseaseReportID BIGINT,
            TestsConductedTypeID BIGINT NULL
        );

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        SET @EIDSSObjectID = @EIDSSLaboratorySampleID;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbTesting',
                                              @idfsKey = @TestID OUTPUT;

            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @TestID,
                                                      @ObjectTableTestID,
                                                      @EIDSSObjectID,
                                                      @DataAuditEventID OUTPUT;
        END
        ELSE
        BEGIN
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @TestID,
                                                      @ObjectTableTestID,
                                                      @EIDSSObjectID,
                                                      @DataAuditEventID OUTPUT;
        END
        -- End data audit

        IF @RowAction = 1 -- Insert
        BEGIN
            INSERT INTO dbo.tlbTesting
            (
                idfTesting,
                idfsTestName,
                idfsTestCategory,
                idfsTestResult,
                idfsTestStatus,
                PreviousTestStatusID,
                idfsDiagnosis,
                idfMaterial,
                idfBatchTest,
                idfObservation,
                intTestNumber,
                strNote,
                intRowStatus,
                datStartedDate,
                datConcludedDate,
                idfTestedByOffice,
                idfTestedByPerson,
                idfResultEnteredByOffice,
                idfResultEnteredByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                blnReadOnly,
                blnNonLaboratoryTest,
                blnExternalTest,
                idfPerformedByOffice,
                datReceivedDate,
                strContactPerson,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                idfHumanCase,
                idfVetCase,
                idfMonitoringSession,
                idfVector
            )
            VALUES
            (@TestID,
             @TestNameTypeID,
             @TestCategoryTypeID,
             @TestResultTypeID,
             @TestStatusTypeID,
             @PreviousTestStatusTypeID,
             @DiseaseID,
             @SampleID,
             @BatchTestID,
             @ObservationID,
             @TestNumber,
             @Note,
             @RowStatus,
             @StartedDate,
             @ConcludedDate,
             @TestedByOrganizationID,
             @TestedByPersonID,
             @ResultEnteredByOrganizationID,
             @ResultEnteredByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ReadOnlyIndicator,
             @NonLaboratoryTestIndicator,
             @ExternalTestIndicator,
             @PerformedByOrganizationID,
             @ReceivedDate,
             @ContactPerson,
             10519001,
             '[{"idfTesting":' + CAST(@TestID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @MonitoringSessionID,
             @VectorID
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableTestID,
             @TestID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableTestID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
            -- End data audit

            IF @HumanDiseaseReportID IS NOT NULL
            BEGIN
                INSERT INTO @HumanDiseaseReportBeforeEdit
                SELECT idfHumanCase,
                       idfsYNTestsConducted
                FROM dbo.tlbHumanCase
                WHERE idfHumanCase = @HumanDiseaseReportID;

                UPDATE dbo.tlbHumanCase
                SET idfsYNTestsConducted = 10100001, -- Yes
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfHumanCase = @HumanDiseaseReportID;

                INSERT INTO @HumanDiseaseReportAfterEdit
                SELECT idfHumanCase,
                       idfsYNTestsConducted
                FROM dbo.tlbHumanCase
                WHERE idfHumanCase = @HumanDiseaseReportID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableHumanDiseaseReportID,
                       4578420000000,
                       a.HumanDiseaseReportID,
                       NULL,
                       b.TestsConductedTypeID,
                       a.TestsConductedTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanDiseaseReportAfterEdit a
                    FULL JOIN @HumanDiseaseReportBeforeEdit b
                        ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
                WHERE (a.TestsConductedTypeID <> b.TestsConductedTypeID)
                      OR (
                             a.TestsConductedTypeID IS NOT NULL
                             AND b.TestsConductedTypeID IS NULL
                         )
                      OR (
                             a.TestsConductedTypeID IS NULL
                             AND b.TestsConductedTypeID IS NOT NULL
                         );
            END
            ELSE IF @VeterinaryDiseaseReportID IS NOT NULL
            BEGIN
                INSERT INTO @VeterinaryDiseaseReportBeforeEdit
                SELECT idfVetCase,
                       idfsYNTestsConducted
                FROM dbo.tlbVetCase
                WHERE idfVetCase = @VeterinaryDiseaseReportID;

                UPDATE dbo.tlbVetCase
                SET idfsYNTestsConducted = 10100001, -- Yes
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfVetCase = @VeterinaryDiseaseReportID;

                INSERT INTO @VeterinaryDiseaseReportAfterEdit
                SELECT idfVetCase,
                       idfsYNTestsConducted
                FROM dbo.tlbVetCase
                WHERE idfVetCase = @VeterinaryDiseaseReportID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableVeterinaryDiseaseReportID,
                       4578870000000,
                       a.VeterinaryDiseaseReportID,
                       NULL,
                       b.TestsConductedTypeID,
                       a.TestsConductedTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @VeterinaryDiseaseReportAfterEdit a
                    FULL JOIN @VeterinaryDiseaseReportBeforeEdit b
                        ON a.VeterinaryDiseaseReportID = b.VeterinaryDiseaseReportID
                WHERE (a.TestsConductedTypeID <> b.TestsConductedTypeID)
                      OR (
                             a.TestsConductedTypeID IS NOT NULL
                             AND b.TestsConductedTypeID IS NULL
                         )
                      OR (
                             a.TestsConductedTypeID IS NULL
                             AND b.TestsConductedTypeID IS NOT NULL
                         );
            END
        END;
        ELSE
        BEGIN
            INSERT INTO @TestBeforeEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus,
                PreviousTestStatusTypeID,
                MonitoringSessionID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                VectorID
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus,
                   PreviousTestStatusID,
                   idfMonitoringSession,
                   idfHumanCase,
                   idfVetCase,
                   idfVector
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            UPDATE dbo.tlbTesting
            SET idfsTestName = @TestNameTypeID,
                idfsTestCategory = @TestCategoryTypeID,
                idfsTestResult = @TestResultTypeID,
                idfsTestStatus = @TestStatusTypeID,
                PreviousTestStatusID = @PreviousTestStatusTypeID,
                idfsDiagnosis = @DiseaseID,
                idfMaterial = @SampleID,
                idfBatchTest = @BatchTestID,
                idfObservation = @ObservationID,
                intTestNumber = @TestNumber,
                strNote = @Note,
                intRowStatus = @RowStatus,
                datStartedDate = @StartedDate,
                datConcludedDate = @ConcludedDate,
                idfTestedByOffice = @TestedByOrganizationID,
                idfTestedByPerson = @TestedByPersonID,
                idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                idfResultEnteredByPerson = @ResultEnteredByPersonID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                blnReadOnly = @ReadOnlyIndicator,
                blnNonLaboratoryTest = @NonLaboratoryTestIndicator,
                blnExternalTest = @ExternalTestIndicator,
                idfPerformedByOffice = @PerformedByOrganizationID,
                datReceivedDate = @ReceivedDate,
                strContactPerson = @ContactPerson,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE(),
                idfHumanCase = @HumanDiseaseReportID,
                idfVetCase = @VeterinaryDiseaseReportID,
                idfMonitoringSession = @MonitoringSessionID,
                idfVector = @VectorID
            WHERE idfTesting = @TestID;

            INSERT INTO @TestAfterEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus,
                PreviousTestStatusTypeID,
                MonitoringSessionID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                VectorID
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus,
                   PreviousTestStatusID,
                   idfMonitoringSession,
                   idfHumanCase,
                   idfVetCase,
                   idfVector
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            IF @HumanDiseaseReportID IS NOT NULL
               AND @TestStatusTypeID = 10001007 -- Deleted
            BEGIN
                IF
                (
                    SELECT COUNT(*)
                    FROM dbo.tlbTesting
                    WHERE idfHumanCase = @HumanDiseaseReportID
                          AND (
                                  intRowStatus = 0
                                  AND idfsTestStatus <> 10001007
                              )
                ) = 0
                BEGIN
                    INSERT INTO @HumanDiseaseReportBeforeEdit
                    SELECT idfHumanCase,
                           idfsYNTestsConducted
                    FROM dbo.tlbHumanCase
                    WHERE idfHumanCase = @HumanDiseaseReportID;

                    UPDATE dbo.tlbHumanCase
                    SET idfsYNTestsConducted = 10100002, -- No
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @AuditUserName
                    WHERE idfHumanCase = @HumanDiseaseReportID;

                    INSERT INTO @HumanDiseaseReportAfterEdit
                    SELECT idfHumanCase,
                           idfsYNTestsConducted
                    FROM dbo.tlbHumanCase
                    WHERE idfHumanCase = @HumanDiseaseReportID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableHumanDiseaseReportID,
                           4578420000000,
                           a.HumanDiseaseReportID,
                           NULL,
                           b.TestsConductedTypeID,
                           a.TestsConductedTypeID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @HumanDiseaseReportAfterEdit a
                        FULL JOIN @HumanDiseaseReportBeforeEdit b
                            ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
                    WHERE (a.TestsConductedTypeID <> b.TestsConductedTypeID)
                          OR (
                                 a.TestsConductedTypeID IS NOT NULL
                                 AND b.TestsConductedTypeID IS NULL
                             )
                          OR (
                                 a.TestsConductedTypeID IS NULL
                                 AND b.TestsConductedTypeID IS NOT NULL
                             );
                END
            END
            ELSE IF @VeterinaryDiseaseReportID IS NOT NULL
                    AND @TestStatusTypeID = 10001007 -- Deleted
            BEGIN
                IF
                (
                    SELECT COUNT(*)
                    FROM dbo.tlbTesting
                    WHERE idfVetCase = @VeterinaryDiseaseReportID
                          AND (
                                  intRowStatus = 0
                                  AND idfsTestStatus <> 10001007
                              )
                ) = 0
                BEGIN
                    INSERT INTO @VeterinaryDiseaseReportBeforeEdit
                    SELECT idfVetCase,
                           idfsYNTestsConducted
                    FROM dbo.tlbVetCase
                    WHERE idfVetCase = @VeterinaryDiseaseReportID;

                    UPDATE dbo.tlbVetCase
                    SET idfsYNTestsConducted = 10100002, -- No
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @AuditUserName
                    WHERE idfVetCase = @VeterinaryDiseaseReportID;

                    INSERT INTO @VeterinaryDiseaseReportAfterEdit
                    SELECT idfVetCase,
                           idfsYNTestsConducted
                    FROM dbo.tlbVetCase
                    WHERE idfVetCase = @VeterinaryDiseaseReportID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableVeterinaryDiseaseReportID,
                           4578870000000,
                           a.VeterinaryDiseaseReportID,
                           NULL,
                           b.TestsConductedTypeID,
                           a.TestsConductedTypeID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @VeterinaryDiseaseReportAfterEdit a
                        FULL JOIN @VeterinaryDiseaseReportBeforeEdit b
                            ON a.VeterinaryDiseaseReportID = b.VeterinaryDiseaseReportID
                    WHERE (a.TestsConductedTypeID <> b.TestsConductedTypeID)
                          OR (
                                 a.TestsConductedTypeID IS NOT NULL
                                 AND b.TestsConductedTypeID IS NULL
                             )
                          OR (
                                 a.TestsConductedTypeID IS NULL
                                 AND b.TestsConductedTypeID IS NOT NULL
                             );
                END
            END

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   49545430000000,
                   a.TestID,
                   NULL,
                   b.TestNameTypeID,
                   a.TestNameTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestNameTypeID <> b.TestNameTypeID)
                  OR (
                         a.TestNameTypeID IS NOT NULL
                         AND b.TestNameTypeID IS NULL
                     )
                  OR (
                         a.TestNameTypeID IS NULL
                         AND b.TestNameTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   49545440000000,
                   a.TestID,
                   NULL,
                   b.TestCategoryTypeID,
                   a.TestCategoryTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestCategoryTypeID <> b.TestCategoryTypeID)
                  OR (
                         a.TestCategoryTypeID IS NOT NULL
                         AND b.TestCategoryTypeID IS NULL
                     )
                  OR (
                         a.TestCategoryTypeID IS NULL
                         AND b.TestCategoryTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   80510000000,
                   a.TestID,
                   NULL,
                   b.TestResultTypeID,
                   a.TestResultTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestResultTypeID <> b.TestResultTypeID)
                  OR (
                         a.TestResultTypeID IS NOT NULL
                         AND b.TestResultTypeID IS NULL
                     )
                  OR (
                         a.TestResultTypeID IS NULL
                         AND b.TestResultTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4572510000000,
                   a.TestID,
                   NULL,
                   b.TestStatusTypeID,
                   a.TestStatusTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestStatusTypeID <> b.TestStatusTypeID)
                  OR (
                         a.TestStatusTypeID IS NOT NULL
                         AND b.TestStatusTypeID IS NULL
                     )
                  OR (
                         a.TestStatusTypeID IS NULL
                         AND b.TestStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4572520000000,
                   a.TestID,
                   NULL,
                   b.DiseaseID,
                   a.DiseaseID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.DiseaseID <> b.DiseaseID)
                  OR (
                         a.DiseaseID IS NOT NULL
                         AND b.DiseaseID IS NULL
                     )
                  OR (
                         a.DiseaseID IS NULL
                         AND b.DiseaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4576430000000,
                   a.TestID,
                   NULL,
                   b.SampleID,
                   a.SampleID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.SampleID <> b.SampleID)
                  OR (
                         a.SampleID IS NOT NULL
                         AND b.SampleID IS NULL
                     )
                  OR (
                         a.SampleID IS NULL
                         AND b.SampleID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   80470000000,
                   a.TestID,
                   NULL,
                   b.BatchTestID,
                   a.BatchTestID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.BatchTestID <> b.BatchTestID)
                  OR (
                         a.BatchTestID IS NOT NULL
                         AND b.BatchTestID IS NULL
                     )
                  OR (
                         a.BatchTestID IS NULL
                         AND b.BatchTestID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   80500000000,
                   a.TestID,
                   NULL,
                   b.ObservationID,
                   a.ObservationID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ObservationID <> b.ObservationID)
                  OR (
                         a.ObservationID IS NOT NULL
                         AND b.ObservationID IS NULL
                     )
                  OR (
                         a.ObservationID IS NULL
                         AND b.ObservationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   80540000000,
                   a.TestID,
                   NULL,
                   b.TestNumber,
                   a.TestNumber,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestNumber <> b.TestNumber)
                  OR (
                         a.TestNumber IS NOT NULL
                         AND b.TestNumber IS NULL
                     )
                  OR (
                         a.TestNumber IS NULL
                         AND b.TestNumber IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4572540000000,
                   a.TestID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578540000000,
                   a.TestID,
                   NULL,
                   b.StartedDate,
                   a.StartedDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.StartedDate <> b.StartedDate)
                  OR (
                         a.StartedDate IS NOT NULL
                         AND b.StartedDate IS NULL
                     )
                  OR (
                         a.StartedDate IS NULL
                         AND b.StartedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578550000000,
                   a.TestID,
                   NULL,
                   b.ConcludedDate,
                   a.ConcludedDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ConcludedDate <> b.ConcludedDate)
                  OR (
                         a.ConcludedDate IS NOT NULL
                         AND b.ConcludedDate IS NULL
                     )
                  OR (
                         a.ConcludedDate IS NULL
                         AND b.ConcludedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578560000000,
                   a.TestID,
                   NULL,
                   b.TestedByOfficeID,
                   a.TestedByOfficeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestedByOfficeID <> b.TestedByOfficeID)
                  OR (
                         a.TestedByOfficeID IS NOT NULL
                         AND b.TestedByOfficeID IS NULL
                     )
                  OR (
                         a.TestedByOfficeID IS NULL
                         AND b.TestedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578570000000,
                   a.TestID,
                   NULL,
                   b.TestedByPersonID,
                   a.TestedByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestedByPersonID <> b.TestedByPersonID)
                  OR (
                         a.TestedByPersonID IS NOT NULL
                         AND b.TestedByPersonID IS NULL
                     )
                  OR (
                         a.TestedByPersonID IS NULL
                         AND b.TestedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578580000000,
                   a.TestID,
                   NULL,
                   b.ResultEnteredByOfficeID,
                   a.ResultEnteredByOfficeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ResultEnteredByOfficeID <> b.ResultEnteredByOfficeID)
                  OR (
                         a.ResultEnteredByOfficeID IS NOT NULL
                         AND b.ResultEnteredByOfficeID IS NULL
                     )
                  OR (
                         a.ResultEnteredByOfficeID IS NULL
                         AND b.ResultEnteredByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578590000000,
                   a.TestID,
                   NULL,
                   b.ResultEnteredByPersonID,
                   a.ResultEnteredByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ResultEnteredByPersonID <> b.ResultEnteredByPersonID)
                  OR (
                         a.ResultEnteredByPersonID IS NOT NULL
                         AND b.ResultEnteredByPersonID IS NULL
                     )
                  OR (
                         a.ResultEnteredByPersonID IS NULL
                         AND b.ResultEnteredByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578600000000,
                   a.TestID,
                   NULL,
                   b.ValidatedByOfficeID,
                   a.ValidatedByOfficeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ValidatedByOfficeID <> b.ValidatedByOfficeID)
                  OR (
                         a.ValidatedByOfficeID IS NOT NULL
                         AND b.ValidatedByOfficeID IS NULL
                     )
                  OR (
                         a.ValidatedByOfficeID IS NULL
                         AND b.ValidatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578610000000,
                   a.TestID,
                   NULL,
                   b.ValidatedByPersonID,
                   a.ValidatedByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ValidatedByPersonID <> b.ValidatedByPersonID)
                  OR (
                         a.ValidatedByPersonID IS NOT NULL
                         AND b.ValidatedByPersonID IS NULL
                     )
                  OR (
                         a.ValidatedByPersonID IS NULL
                         AND b.ValidatedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578740000000,
                   a.TestID,
                   NULL,
                   b.ReadOnlyIndicator,
                   a.ReadOnlyIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                  OR (
                         a.ReadOnlyIndicator IS NOT NULL
                         AND b.ReadOnlyIndicator IS NULL
                     )
                  OR (
                         a.ReadOnlyIndicator IS NULL
                         AND b.ReadOnlyIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578760000000,
                   a.TestID,
                   NULL,
                   b.NonLaboratoryTestIndicator,
                   a.NonLaboratoryTestIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.NonLaboratoryTestIndicator <> b.NonLaboratoryTestIndicator)
                  OR (
                         a.NonLaboratoryTestIndicator IS NOT NULL
                         AND b.NonLaboratoryTestIndicator IS NULL
                     )
                  OR (
                         a.NonLaboratoryTestIndicator IS NULL
                         AND b.NonLaboratoryTestIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   50815850000000,
                   a.TestID,
                   NULL,
                   b.ExternalTestIndicator,
                   a.ExternalTestIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ExternalTestIndicator <> b.ExternalTestIndicator)
                  OR (
                         a.ExternalTestIndicator IS NOT NULL
                         AND b.ExternalTestIndicator IS NULL
                     )
                  OR (
                         a.ExternalTestIndicator IS NULL
                         AND b.ExternalTestIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   50815860000000,
                   a.TestID,
                   NULL,
                   b.PerformedByOfficeID,
                   a.PerformedByOfficeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.PerformedByOfficeID <> b.PerformedByOfficeID)
                  OR (
                         a.PerformedByOfficeID IS NOT NULL
                         AND b.PerformedByOfficeID IS NULL
                     )
                  OR (
                         a.PerformedByOfficeID IS NULL
                         AND b.PerformedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   50815870000000,
                   a.TestID,
                   NULL,
                   b.ReceivedDate,
                   a.ReceivedDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ReceivedDate <> b.ReceivedDate)
                  OR (
                         a.ReceivedDate IS NOT NULL
                         AND b.ReceivedDate IS NULL
                     )
                  OR (
                         a.ReceivedDate IS NULL
                         AND b.ReceivedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   50815880000000,
                   a.TestID,
                   NULL,
                   b.ContactPerson,
                   a.ContactPerson,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ContactPerson <> b.ContactPerson)
                  OR (
                         a.ContactPerson IS NOT NULL
                         AND b.ContactPerson IS NULL
                     )
                  OR (
                         a.ContactPerson IS NULL
                         AND b.ContactPerson IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   51586990000032,
                   a.TestID,
                   NULL,
                   b.PreviousTestStatusTypeID,
                   a.PreviousTestStatusTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.PreviousTestStatusTypeID <> b.PreviousTestStatusTypeID)
                  OR (
                         a.PreviousTestStatusTypeID IS NOT NULL
                         AND b.PreviousTestStatusTypeID IS NULL
                     )
                  OR (
                         a.PreviousTestStatusTypeID IS NULL
                         AND b.PreviousTestStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   51586990000028,
                   a.TestID,
                   NULL,
                   b.MonitoringSessionID,
                   a.MonitoringSessionID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.MonitoringSessionID <> b.MonitoringSessionID)
                  OR (
                         a.MonitoringSessionID IS NOT NULL
                         AND b.MonitoringSessionID IS NULL
                     )
                  OR (
                         a.MonitoringSessionID IS NULL
                         AND b.MonitoringSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   51586990000029,
                   a.TestID,
                   NULL,
                   b.HumanDiseaseReportID,
                   a.HumanDiseaseReportID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.HumanDiseaseReportID <> b.HumanDiseaseReportID)
                  OR (
                         a.HumanDiseaseReportID IS NOT NULL
                         AND b.HumanDiseaseReportID IS NULL
                     )
                  OR (
                         a.HumanDiseaseReportID IS NULL
                         AND b.HumanDiseaseReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   51586990000030,
                   a.TestID,
                   NULL,
                   b.VeterinaryDiseaseReportID,
                   a.VeterinaryDiseaseReportID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.VeterinaryDiseaseReportID <> b.VeterinaryDiseaseReportID)
                  OR (
                         a.VeterinaryDiseaseReportID IS NOT NULL
                         AND b.VeterinaryDiseaseReportID IS NULL
                     )
                  OR (
                         a.VeterinaryDiseaseReportID IS NULL
                         AND b.VeterinaryDiseaseReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   51586990000031,
                   a.TestID,
                   NULL,
                   b.VectorID,
                   a.VectorID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.VectorID <> b.VectorID)
                  OR (
                         a.VectorID IS NOT NULL
                         AND b.VectorID IS NULL
                     )
                  OR (
                         a.VectorID IS NULL
                         AND b.VectorID IS NOT NULL
                     );
        END;

        IF @TestStatusTypeID = 10001003 -- In Progress
           OR @TestStatusTypeID = 10001004 -- Preliminary
        BEGIN
            INSERT INTO @SampleBeforeEdit
            SELECT idfMaterial,
                   TestUnassignedIndicator,
                   TestCompletedIndicator
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            UPDATE dbo.tlbMaterial
            SET TestUnassignedIndicator = 0,
                TestCompletedIndicator = 0
            WHERE idfMaterial = @SampleID;

            INSERT INTO @SampleAfterEdit
            SELECT idfMaterial,
                   TestUnassignedIndicator,
                   TestCompletedIndicator
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000037,
                   a.SampleID,
                   NULL,
                   b.TestUnassignedIndicator,
                   a.TestUnassignedIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit a
                FULL JOIN @SampleBeforeEdit b
                    ON a.SampleID = b.SampleID
            WHERE (a.TestUnassignedIndicator <> b.TestUnassignedIndicator)
                  OR (
                         a.TestUnassignedIndicator IS NOT NULL
                         AND b.TestUnassignedIndicator IS NULL
                     )
                  OR (
                         a.TestUnassignedIndicator IS NULL
                         AND b.TestUnassignedIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000038,
                   a.SampleID,
                   NULL,
                   b.TestCompletedIndicator,
                   a.TestCompletedIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit a
                FULL JOIN @SampleBeforeEdit b
                    ON a.SampleID = b.SampleID
            WHERE (a.TestCompletedIndicator <> b.TestCompletedIndicator)
                  OR (
                         a.TestCompletedIndicator IS NOT NULL
                         AND b.TestCompletedIndicator IS NULL
                     )
                  OR (
                         a.TestCompletedIndicator IS NULL
                         AND b.TestCompletedIndicator IS NOT NULL
                     );
        END;
        ELSE IF @TestStatusTypeID = 10001001 -- Final
                OR @TestStatusTypeID = 10001006 -- Amended
        BEGIN
            SELECT @TestAssignedCount = COUNT(idfTesting)
            FROM dbo.tlbTesting
            WHERE idfMaterial = @SampleID
                  AND intRowStatus = 0
                  AND idfsTestStatus IN ( 10001003, 10001004 );

            IF @TestAssignedCount = 0
            BEGIN
                INSERT INTO @SampleBeforeEdit
                SELECT idfMaterial,
                       TestUnassignedIndicator,
                       TestCompletedIndicator
                FROM dbo.tlbMaterial
                WHERE idfMaterial = @SampleID;

                UPDATE dbo.tlbMaterial
                SET TestCompletedIndicator = 1,
                    TestUnassignedIndicator = 0
                WHERE idfMaterial = @SampleID;

                INSERT INTO @SampleAfterEdit
                SELECT idfMaterial,
                       TestUnassignedIndicator,
                       TestCompletedIndicator
                FROM dbo.tlbMaterial
                WHERE idfMaterial = @SampleID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableSampleID,
                       51586990000037,
                       a.SampleID,
                       NULL,
                       b.TestUnassignedIndicator,
                       a.TestUnassignedIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit a
                    FULL JOIN @SampleBeforeEdit b
                        ON a.SampleID = b.SampleID
                WHERE (a.TestUnassignedIndicator <> b.TestUnassignedIndicator)
                      OR (
                             a.TestUnassignedIndicator IS NOT NULL
                             AND b.TestUnassignedIndicator IS NULL
                         )
                      OR (
                             a.TestUnassignedIndicator IS NULL
                             AND b.TestUnassignedIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableSampleID,
                       51586990000038,
                       a.SampleID,
                       NULL,
                       b.TestCompletedIndicator,
                       a.TestCompletedIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit a
                    FULL JOIN @SampleBeforeEdit b
                        ON a.SampleID = b.SampleID
                WHERE (a.TestCompletedIndicator <> b.TestCompletedIndicator)
                      OR (
                             a.TestCompletedIndicator IS NOT NULL
                             AND b.TestCompletedIndicator IS NULL
                         )
                      OR (
                             a.TestCompletedIndicator IS NULL
                             AND b.TestCompletedIndicator IS NOT NULL
                         );
            END
            ELSE
            BEGIN
                INSERT INTO @SampleBeforeEdit
                SELECT idfMaterial,
                       TestUnassignedIndicator,
                       TestCompletedIndicator
                FROM dbo.tlbMaterial
                WHERE idfMaterial = @SampleID;

                UPDATE dbo.tlbMaterial
                SET TestCompletedIndicator = 0,
                    TestUnassignedIndicator = 1
                WHERE idfMaterial = @SampleID;

                INSERT INTO @SampleAfterEdit
                SELECT idfMaterial,
                       TestUnassignedIndicator,
                       TestCompletedIndicator
                FROM dbo.tlbMaterial
                WHERE idfMaterial = @SampleID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableSampleID,
                       51586990000037,
                       a.SampleID,
                       NULL,
                       b.TestUnassignedIndicator,
                       a.TestUnassignedIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit a
                    FULL JOIN @SampleBeforeEdit b
                        ON a.SampleID = b.SampleID
                WHERE (a.TestUnassignedIndicator <> b.TestUnassignedIndicator)
                      OR (
                             a.TestUnassignedIndicator IS NOT NULL
                             AND b.TestUnassignedIndicator IS NULL
                         )
                      OR (
                             a.TestUnassignedIndicator IS NULL
                             AND b.TestUnassignedIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableSampleID,
                       51586990000038,
                       a.SampleID,
                       NULL,
                       b.TestCompletedIndicator,
                       a.TestCompletedIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit a
                    FULL JOIN @SampleBeforeEdit b
                        ON a.SampleID = b.SampleID
                WHERE (a.TestCompletedIndicator <> b.TestCompletedIndicator)
                      OR (
                             a.TestCompletedIndicator IS NOT NULL
                             AND b.TestCompletedIndicator IS NULL
                         )
                      OR (
                             a.TestCompletedIndicator IS NULL
                             AND b.TestCompletedIndicator IS NOT NULL
                         );
            END;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail]...';


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools)
-- Mike Kornegay	03/27/2023	Change numeric values from int to float.
--
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = 155564770001982

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfDiagnosticObservation] BIGINT,
		[idfDiagnosticVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		--[intNumRow] INT,
		[Type] BIGINT,
		[fltValue] FLOAT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		--idfsReferenceType BIGINT
		)

	DECLARE @tmpDetails TABLE (
		idfDiagnosticObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfDiagnosticVersion BIGINT
	)

	DECLARE @FinalReportTable TABLE 
	(
		ParameterName NVARCHAR(300),
		strSpecies NVARCHAR(300),
		idfsParameter BIGINT,
		ParameterOrder INT,
		idfsDiagnosis BIGINT,
		strDefault NVARCHAR(300),
		strOIECode NVARCHAR(300),
		numRow INT,
		fltValue FLOAT,
		varValue SQL_VARIANT,
		strActionCode NVARCHAR(300),
		strAction NVARCHAR(300)
	)

	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails (
					idfDiagnosticObservation,
					idfsCaseFormTemplate,
					idfDiagnosticVersion
				)
				SELECT 
					a.idfDiagnosticObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfDiagnosticVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfDiagnosticObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfDiagnosticObservation],
					[idfDiagnosticVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfDiagnosticObservation],
					idfDiagnosticVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfDiagnosticObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfDiagnosticVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrDiagnosticActionMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode,
					DA.name AS strAction

				FROM dbo.tlbAggrDiagnosticActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000021) DA ON DA.idfsReference = mtx.idfsDiagnosticAction
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------
				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form for Diagnostic Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate


				--EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
				--		@LangID =@LangID, 
				--		@idfsDiagnosis= NULL, 
				--		@idfsFormType = 10034023, 
				--		@idfsFormTemplate=@idfsFormTemplate

--				SELECT * FROM @tempFlexForm

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID

				--Get numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[fltValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					SUM(CAST(AP.varValue AS FLOAT)),
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfDiagnosticObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 1
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				GROUP BY
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Get non-numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfDiagnosticObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 0
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    strActionCode,
					strAction,
					fltValue
				)

				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strAction
						,m.strAction
						,SUM(fltValue)
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				GROUP BY
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,m.strAction
					,m.strAction
					--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

				--non numeric items
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    strActionCode,
					strAction,
					varValue
				)

				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strAction
						,m.strAction
						,ap.varValue
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				WHERE ap.varValue IS NOT NULL
				
				ORDER BY intNumRow

				--final query
				SELECT 
					ParameterName,
					strSpecies,
					idfsParameter,
					ParameterOrder,
					idfsDiagnosis,
					strDefault,
					strOIECode,
					numRow AS intNumRow,
					strAction,
					strActionCode,
					CAST(fltValue AS NVARCHAR(300)) AS varValue
					
				FROM @FinalReportTable
				WHERE varValue IS NULL

				UNION ALL 

				SELECT
					DISTINCT t.ParameterName,
					t.strSpecies,
					t.idfsParameter,
					t.ParameterOrder,
					t.idfsDiagnosis,
					t.strDefault,
					t.strOIECode,
					t.numRow AS intNumRow,
					strAction,
					strActionCode,
					STUFF((SELECT distinct ', ' + CAST(t1.varValue AS NVARCHAR(300))
						 FROM @FinalReportTable t1
						 WHERE t.ParameterName = t1.ParameterName
						 AND t.strSpecies = t1.strSpecies
						 AND t.idfsParameter = t1.idfsParameter
						 AND t.ParameterOrder = t1.ParameterOrder
						 AND t.idfsDiagnosis = t1.idfsDiagnosis
						 AND t.strDefault = t1.strDefault
						 AND t.strOIECode = t1.strOIECode
						 FOR XML PATH(''), TYPE
							).value('.', 'NVARCHAR(MAX)') 
						,1,2,'') varValue
				from @FinalReportTable t
				WHERE t.varValue IS NOT NULL;				
			END

		--DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]...';


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		08/10/2022	Initial release for Veterinary Aggregate Report.
-- Srini Goli		10/07/2022  used Sql Veriant data type.
-- Srini Goli		10/12/2022  Without Templete also have to display Report.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools) and correct final query
-- Mark Wilson		10/18/2022	updated to concatenate string fields
-- Mike Kornegay	10/18/2022	Change numRow field in final query to intNumRow
-- Mike Kornegay	02/02/2023	Correct quoted identifiers and ansi_null settings
-- Mike Kornegay	03/13/2023	Correct @tempFlexForm table to match new flex form results
--
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfsAggrCaseType = 10102002,
        @idfAggrCaseList = N'155564770002071;155564770002070'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail] (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS  BIGINT= NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,ParentSectionName NVARCHAR(2000)
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		,DecorElementText NVARCHAR(2000)
		)

	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		intValue INT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		--idfsReferenceType BIGINT
		)
	
	DECLARE @tmpDetails TABLE (
		idfCaseObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfVersion BIGINT
	)

	DECLARE @FinalReportTable TABLE 
	(
		ParameterName NVARCHAR(300),
		strSpecies NVARCHAR(300),
		idfsParameter BIGINT,
		ParameterOrder INT,
		idfsDiagnosis BIGINT,
		strDefault NVARCHAR(300),
		strOIECode NVARCHAR(300),
		numRow INT,
		intValue INT,
		varValue SQL_VARIANT
	)

	BEGIN TRY
			BEGIN

			--Get Selected Agg Cases
			INSERT INTO @AggrCaseTable (
					[idfAggrCase],
					[intRowNumber]
					)
				SELECT CAST([Value] AS BIGINT),
					ROW_NUMBER() OVER (
						ORDER BY [Value]
						)
				FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfCaseObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
				
				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfCaseObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					ROW_NUMBER() OVER (
						ORDER BY [idfCaseObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrVetCaseMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode

				FROM dbo.tlbAggrVetCaseMTX mtx
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form header details
				IF @idfsFormTemplate IS NOT NULL 
				BEGIN
					INSERT INTO @tempFlexForm
					EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
							@LangID =@LangID, 
							@idfsDiagnosis= NULL, 
							@idfsFormType = 10034012, 
							@idfsFormTemplate=@idfsFormTemplate
				END 
				--Get numeric values Activity Parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[intValue],
						[Type],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					SUM(CAST(AP.varValue AS INT)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(ap.varValue AS NVARCHAR)) = 1
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				GROUP BY
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Get non-numeric values
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(ap.varValue AS NVARCHAR)) = 0
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
					
				INSERT INTO @FinalReportTable
				(
				    ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    intValue
				)

				SELECT	
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,SUM(intValue)
					--,ap.varValue AS varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				GROUP BY 
					ff.ParameterName,
					sl.strSpecies,
					ff.idfsParameter,
					ff.ParameterOrder,
					m.idfsDiagnosis,
					m.strDefault,
					m.strOIECode,
					m.intNumRow
				ORDER BY intNumRow


				INSERT INTO @FinalReportTable
				(
				    ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    varValue
				)

				SELECT	
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,ap.varValue
				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				WHERE ap.varValue IS NOT NULL

				ORDER BY intNumRow

				SELECT 
				
					ParameterName,
					strSpecies,
					idfsParameter,
					ParameterOrder,
					idfsDiagnosis,
					strDefault,
					strOIECode,
					numRow AS intNumRow,
					CAST(intValue AS NVARCHAR(300)) AS varValue
					
				FROM @FinalReportTable
				WHERE varValue IS NULL

				UNION ALL 

				SELECT
					DISTINCT t.ParameterName,
					t.strSpecies,
					t.idfsParameter,
					t.ParameterOrder,
					t.idfsDiagnosis,
					t.strDefault,
					t.strOIECode,
					t.numRow AS intNumRow,
					STUFF((SELECT distinct ', ' + CAST(t1.varValue AS NVARCHAR(300))
						 FROM @FinalReportTable t1
						 WHERE t.ParameterName = t1.ParameterName
						 AND t.strSpecies = t1.strSpecies
						 AND t.idfsParameter = t1.idfsParameter
						 AND t.ParameterOrder = t1.ParameterOrder
						 AND t.idfsDiagnosis = t1.idfsDiagnosis
						 AND t.strDefault = t1.strDefault
						 AND t.strOIECode = t1.strOIECode
						 FOR XML PATH(''), TYPE
							).value('.', 'NVARCHAR(MAX)') 
						,1,2,'') varValue
				from @FinalReportTable t
				WHERE t.varValue IS NOT NULL;				

			END

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail]...';


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools)
-- Mike Kornegay	10/25/2022  Separate numerical results from string results
-- Mike Kornegay	03/27/2023	Change numeric values from int to float.
--
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = '128822070001294;127398630001294;121195250001294'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		,strActionCode NVARCHAR(200)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfProphylacticObservation] BIGINT,
		[idfProphylacticVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		[fltValue] FLOAT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		)

	DECLARE @tmpDetails TABLE (
		idfProphylacticObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfProphylacticVersion BIGINT
	)

	DECLARE @FinalReportTable TABLE 
	(
		ParameterName NVARCHAR(300),
		strSpecies NVARCHAR(300),
		idfsParameter BIGINT,
		ParameterOrder INT,
		idfsDiagnosis BIGINT,
		strDefault NVARCHAR(300),
		strOIECode NVARCHAR(300),
		numRow INT,
		fltValue FLOAT,
		varValue SQL_VARIANT,
		strActionCode NVARCHAR(300),
		strAction NVARCHAR(300)
	)

	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfProphylacticObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfProphylacticVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfProphylacticObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfProphylacticObservation],
					[idfProphylacticVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfProphylacticObservation],
					idfProphylacticVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfProphylacticObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfProphylacticVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrProphylacticActionMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode,
					PAC.strActionCode,
					PA.name AS strAction

				FROM dbo.tlbAggrProphylacticActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000074) PA ON PA.idfsReference = mtx.idfsProphilacticAction
				INNER JOIN dbo.trtProphilacticAction PAC ON PAC.idfsProphilacticAction = PA.idfsReference
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------
				--SpeiciesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form for Prophylactic Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate


				--EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
				--		@LangID =@LangID, 
				--		@idfsDiagnosis= NULL, 
				--		@idfsFormType = 10034023, 
				--		@idfsFormTemplate=@idfsFormTemplate

--				SELECT * FROM @tempFlexForm

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID

				--Get numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[fltValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					SUM(CAST(AP.varValue AS FLOAT)),
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfProphylacticObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 1
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				GROUP BY
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Get non-numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfProphylacticObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 0
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    strActionCode,
					strAction,
					fltValue
				)

				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,SUM(fltValue)
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				GROUP BY
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,m.strActionCode
					,m.strAction
					--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

				--non numeric items
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    strActionCode,
					strAction,
					varValue
				)

				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,ap.varValue
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				WHERE ap.varValue IS NOT NULL
				
				ORDER BY intNumRow

				--final query
				SELECT 
					ParameterName,
					strSpecies,
					idfsParameter,
					ParameterOrder,
					idfsDiagnosis,
					strDefault,
					strOIECode,
					numRow AS intNumRow,
					strAction,
					strActionCode,
					CAST(fltValue AS NVARCHAR(300)) AS varValue
					
				FROM @FinalReportTable
				WHERE varValue IS NULL

				UNION ALL 

				SELECT
					DISTINCT t.ParameterName,
					t.strSpecies,
					t.idfsParameter,
					t.ParameterOrder,
					t.idfsDiagnosis,
					t.strDefault,
					t.strOIECode,
					t.numRow AS intNumRow,
					strAction,
					strActionCode,
					STUFF((SELECT distinct ', ' + CAST(t1.varValue AS NVARCHAR(300))
						 FROM @FinalReportTable t1
						 WHERE t.ParameterName = t1.ParameterName
						 AND t.strSpecies = t1.strSpecies
						 AND t.idfsParameter = t1.idfsParameter
						 AND t.ParameterOrder = t1.ParameterOrder
						 AND t.idfsDiagnosis = t1.idfsDiagnosis
						 AND t.strDefault = t1.strDefault
						 AND t.strOIECode = t1.strOIECode
						 FOR XML PATH(''), TYPE
							).value('.', 'NVARCHAR(MAX)') 
						,1,2,'') varValue
				from @FinalReportTable t
				WHERE t.varValue IS NOT NULL;				
			END

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail]...';


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools)
-- Mike Kornegay	03/27/2023	Change numeric values from int to float and separate numeric and string results.
--
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = '128822070001294;127398630001294;121195250001294'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,strActionCode NVARCHAR(200)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfSanitaryObservation] BIGINT,
		[idfSanitaryVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		[fltValue] FLOAT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpDetails TABLE (
		idfSanitaryObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfSanitaryVersion BIGINT
	)

	DECLARE @FinalReportTable TABLE 
	(
		ParameterName NVARCHAR(300),
		strSpecies NVARCHAR(300),
		idfsParameter BIGINT,
		ParameterOrder INT,
		idfsDiagnosis BIGINT,
		strDefault NVARCHAR(300),
		strOIECode NVARCHAR(300),
		numRow INT,
		fltValue FLOAT,
		varValue SQL_VARIANT,
		strActionCode NVARCHAR(300),
		strAction NVARCHAR(300)
	)

	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfSanitaryObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfSanitaryVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfSanitaryObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfSanitaryObservation],
					[idfSanitaryVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfSanitaryObservation],
					idfSanitaryVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfSanitaryObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfSanitaryVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrSanitaryActionMTX,
					SAC.strActionCode,
					SA.name AS strAction

				FROM dbo.tlbAggrSanitaryActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000079) SA ON SA.idfsReference = mtx.idfsSanitaryAction
				INNER JOIN dbo.trtSanitaryAction SAC ON SAC.idfsSanitaryAction = SA.idfsReference

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------		
				--Get Flex Form for Sanitary Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate

				--get numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[fltValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					SUM(CAST(AP.varValue AS FLOAT)),
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfSanitaryObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 1
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				GROUP BY
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--get non-numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfSanitaryObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 0
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow


				--Report
				--	numeric items
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    idfsParameter,
				    ParameterOrder,
				    numRow,
				    strActionCode,
					strAction,
					fltValue
				)
				SELECT	ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,SUM(fltValue)
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow

				GROUP BY
						ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

				--non-numeric items				
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    idfsParameter,
				    ParameterOrder,
				    numRow,
				    strActionCode,
					strAction,
					varValue
				)
				SELECT	ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,ap.varValue
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				WHERE ap.varValue IS NOT NULL

				ORDER BY intNumRow

				--final query
				SELECT 
					ParameterName,
					strSpecies,
					idfsParameter,
					ParameterOrder,
					idfsDiagnosis,
					strDefault,
					strOIECode,
					numRow AS intNumRow,
					strAction,
					strActionCode,
					CAST(fltValue AS NVARCHAR(300)) AS varValue
					
				FROM @FinalReportTable
				WHERE varValue IS NULL

				UNION ALL 

				SELECT
					DISTINCT t.ParameterName,
					t.strSpecies,
					t.idfsParameter,
					t.ParameterOrder,
					t.idfsDiagnosis,
					t.strDefault,
					t.strOIECode,
					t.numRow AS intNumRow,
					strAction,
					strActionCode,
					STUFF((SELECT distinct ', ' + CAST(t1.varValue AS NVARCHAR(300))
						 FROM @FinalReportTable t1
						 WHERE t.ParameterName = t1.ParameterName
						 AND t.strSpecies = t1.strSpecies
						 AND t.idfsParameter = t1.idfsParameter
						 AND t.ParameterOrder = t1.ParameterOrder
						 AND t.idfsDiagnosis = t1.idfsDiagnosis
						 AND t.strDefault = t1.strDefault
						 AND t.strOIECode = t1.strOIECode
						 FOR XML PATH(''), TYPE
							).value('.', 'NVARCHAR(MAX)') 
						,1,2,'') varValue
				from @FinalReportTable t
				WHERE t.varValue IS NOT NULL;		

			END

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[USP_ADMIN_EVENT_GETCount]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EVENT_GETCount		
--
-- Description: Gets a count of event notifications for a user as defined in SAUC55 and SAUC56.
--
-- Author: Stephen Long
-- 
-- Revision History:
-- Name                        Date       Change Detail
-- --------------------------- ---------- --------------------------------------------------------
-- Stephen Long                03/17/2023 Initial release
-- Stephen Long                03/22/2023 Added nolock
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_ADMIN_EVENT_GETCount]
(
    @LanguageId NVARCHAR(50),
    @UserId BIGINT,
    @DaysFromReadDate INT
)
AS
BEGIN
    BEGIN TRY
        SELECT COUNT(e.idfEventID) AS EventCount
        FROM dbo.tstEvent e WITH (NOLOCK)
            INNER JOIN dbo.trtEventType et
                ON et.idfsEventTypeID = e.idfsEventTypeID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000155) notificationType
                ON notificationType.idfsReference = et.idfsEventSubscription
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000025) eventType
                ON eventType.idfsReference = e.idfsEventTypeID
        WHERE e.idfUserID = @UserId
              AND e.intProcessed = 0;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Session_Set]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Session_Set
-- 
-- Description: Insert/Update for Campaign Monitoring Session
--          
-- Author: Doug Albanese
-- Revision History:
-- Name	                     Date       Change Detail
-- ------------------------- ---------- ----------------------------------------------------------
-- Doug Albanese             10/08/2020 Adding Auditing information
-- Doug Albanese             09/02/2021 Refactored for cleaner model to contain only relavent 
--                                      parameters
-- Doug Albanese             09/08/2021 Replaced USP_GBL_ADDRESS_SET with USSP_GBL_ADDRESS_SET
-- Doug Albanese             09/10/2021 Removed SQL statements left in for debugging, supressed 
--                                      the use of USSP_GBL_ADDRESS_SET...which was recently 
--                                      swapped out
-- Mark Wilson	             09/13/2021 updated to use USP_GBL_ADDRESS_SET, corrected addl fields
-- Doug Albanese             09/14/2021 Corrected the parameters passed to USP_GBL_ADDRESS_SET
-- Mark Wilson               10/06/2021 updated to add Elevation to USP_GBL_ADDRESS_SET
-- Doug Albanese             11/02/2021 Remove condition to allow NULL storage of species 
--                                      parameters
-- Stephen Long              07/12/2022 Added events parameter for site alerts and removed language 
--                                      ID.
-- Mike Kornegay			 09/14/2022 Added null to note field for input to USP_ADMIN_EVENT_SET.
-- Doug Albanese			 03/08/2023	Implemented Data Auditing
-- Doug Albanese			 03/15/2023 Change over from idfGeoLocation to idfsLocation
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Session_Set]
(
    @idfOutbreak BIGINT = NULL,
    @idfsDiagnosisOrDiagnosisGroup BIGINT = NULL,
    @idfsOutbreakStatus BIGINT = NULL,
    @OutbreakTypeId BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @datStartDate DATETIME = NULL,
    @datCloseDate DATETIME = NULL,
    @strOutbreakID NVARCHAR(200) = NULL,
    @strDescription NVARCHAR(2000) = NULL,
    @intRowStatus INT = 0,
    @datModificationForArchiveDate DATETIME = NULL,
    @idfPrimaryCaseOrSession BIGINT = NULL,
    @idfsSite BIGINT,
    @outbreakParameters NVARCHAR(MAX) = NULL,
    @User NVARCHAR(200) = '',
    @Events NVARCHAR(MAX) = NULL
)
AS
BEGIN
    DECLARE @returnCode INT = 0,
            @returnMsg NVARCHAR(MAX) = 'SUCCESS',
            @EventId BIGINT,
            @EventTypeId BIGINT = NULL,
            @EventSiteId BIGINT = NULL,
            @EventObjectId BIGINT = NULL,
            @EventUserId BIGINT = NULL,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = NULL,

			-- Data audit
		   @AuditUserID BIGINT = NULL,
		   @AuditSiteID BIGINT = NULL,
		   @DataAuditEventID BIGINT = NULL,
		   @DataAuditEventTypeID BIGINT = NULL,
		   @ObjectTypeID BIGINT = 10017081,   
		   @ObjectID BIGINT = @idfOutbreak,
		   @ObjectTableID BIGINT = 75660000000; 

    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );

	DECLARE @OutbreakSessionBeforeEdit TABLE (
	  idfGeoLocation				   BIGINT,
	  idfOutbreak					   BIGINT,
	  idfsOutbreakStatus			   BIGINT,
	  datStartDate					   DATETIME,
	  datFinishDate					   DATETIME,
	  strOutbreakID					   NVARCHAR(200),
	  strDescription				   NVARCHAR(2000),
	  idfsDiagnosisOrDiagnosisGroup	   BIGINT,
	  idfPrimaryCaseOrSession		   BIGINT
	)

   DECLARE @OutbreakSessionAfterEdit TABLE (
	  idfGeoLocation				   BIGINT,
	  idfOutbreak					   BIGINT,
	  idfsOutbreakStatus			   BIGINT,
	  datStartDate					   DATETIME,
	  datFinishDate					   DATETIME,
	  strOutbreakID					   NVARCHAR(200),
	  strDescription				   NVARCHAR(2000),
	  idfsDiagnosisOrDiagnosisGroup	   BIGINT,
	  idfPrimaryCaseOrSession		   BIGINT
	)

    IF @idfsSite IS NULL
    BEGIN
        SELECT @returnCode as ReturnCode,
               @returnMsg as ReturnMessage,
               @idfOutbreak as idfOutbreak,
               @strOutbreakID as strOutbreakID;
    END
    ELSE
    BEGIN
        --DECLARE @outbreakLocation BIGINT = NULL;
        DECLARE @OutbreakSpeciesParameterUID BIGINT;
        DECLARE @OutbreakSpeciesTypeID BIGINT;
        DECLARE @CaseMonitoringDuration INT;
        DECLARE @CaseMonitoringFrequency INT;
        DECLARE @ContactTracingDuration INT;
        DECLARE @ContactTracingFrequency INT;

        DECLARE @ParameterSpeciesTypes TABLE (OutbreakSpeciesTypeID BIGINT);

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

		 -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@User) userInfo;
        -- End data audit


		 IF @idfOutbreak IS NULL
            BEGIN
			   --IF ISNULL(@idfOutbreak, -1) < 0
                --BEGIN
                  INSERT INTO @SuppressSelect
                  EXEC dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbOutbreak',
                                                @idfsKey = @idfOutbreak OUTPUT;

                  INSERT INTO @SuppressSelect
                  EXEC dbo.USP_GBL_NextNumber_GET @ObjectName = 'Outbreak Session',
                                                   @NextNumberValue = @strOutbreakID OUTPUT,
                                                   @InstallationSite = NULL;
                --END

                -- Data audit (Create)
                SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

				 INSERT INTO @SuppressSelect            
				 EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,                                                      
					@AuditSiteID,                                                      
					@DataAuditEventTypeID,                                                      
					@ObjectTypeID,                                                      
					@idfOutbreak,                                                      
					@ObjectTableID,                                                      
					@strOutbreakID,                                                       
					@DataAuditEventID OUTPUT;
            END
         ELSE
            BEGIN
			   SELECT
				  @strOutbreakID = strOutbreakID
			   FROM
				  tlbOutbreak
			   WHERE
				  idfOutbreak = @idfOutbreak

			   IF @intRowStatus = 1
				  BEGIN
					 -- Data audit (Delete)
					  SET @DataAuditEventTypeID = 10016002; -- Data audit edit event type
					   INSERT INTO @SuppressSelect            
					   EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,                                                      
						  @AuditSiteID,                                                      
						  @DataAuditEventTypeID,                                                      
						  @ObjectTypeID,                                                      
						  @idfOutbreak,                                                      
						  @ObjectTableID,                                                      
						  @strOutbreakID,                                                       
						  @DataAuditEventID OUTPUT;
				  END
			   ELSE
				  BEGIN
					  -- Data audit (Edit)
					  SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

					   INSERT INTO @SuppressSelect            
					   EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,                                                      
						  @AuditSiteID,                                                      
						  @DataAuditEventTypeID,                                                      
						  @ObjectTypeID,                                                      
						  @idfOutbreak,                                                      
						  @ObjectTableID,                                                      
						  @strOutbreakID,                                                       
						  @DataAuditEventID OUTPUT;
				  END
            END
         -- End data audit

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        BEGIN TRY
            SET @returnCode = 0;
            SET @returnMsg = 'SUCCESS';

            DECLARE @convertedParameters TABLE
            (
                OutbreakSpeciesParameterUID BIGINT,
                OutbreakSpeciesTypeID BIGINT NULL,
                CaseMonitoringDuration INT NULL,
                CaseMonitoringFrequency INT NULL,
                ContactTracingDuration INT NULL,
                ContactTracingFrequency INT NULL,
                intRowStatus INT
            );

            INSERT INTO @convertedParameters
            SELECT *
            FROM
                OPENJSON(@outbreakParameters)
                WITH
                (
                    OutbreakSpeciesParameterUID BIGINT,
                    OutbreakSpeciesTypeID BIGINT,
                    CaseMonitoringDuration INT,
                    CaseMonitoringFrequency INT,
                    ContactTracingDuration INT,
                    ContactTracingFrequency INT,
                    intRowStatus INT
                );

            IF EXISTS (SELECT * FROM dbo.tlbOutbreak WHERE idfOutbreak = @idfOutbreak)
            BEGIN
			   --Data Audit (Gather previous record items before edit)
			   INSERT INTO @OutbreakSessionBeforeEdit (
			   	  idfGeoLocation,
				  idfOutbreak,
				  idfsOutbreakStatus,
				  datStartDate,
				  datFinishDate,
				  strOutbreakID,
				  strDescription,
				  idfsDiagnosisOrDiagnosisGroup,
				  idfPrimaryCaseOrSession   
			   )
			   SELECT
				  idfGeoLocation,
				  idfOutbreak,
				  idfsOutbreakStatus,
				  datStartDate,
				  datFinishDate,
				  strOutbreakID,
				  strDescription,
				  idfsDiagnosisOrDiagnosisGroup,
				  idfPrimaryCaseOrSession  
			   FROM
				  tlbOutbreak
			   WHERE
				  idfOutbreak = @idfOutbreak
			   --Data Autdit End

                UPDATE dbo.tlbOutbreak
                SET idfsDiagnosisOrDiagnosisGroup = @idfsDiagnosisOrDiagnosisGroup,
                    idfsOutbreakStatus = @idfsOutbreakStatus,
                    OutbreakTypeID = @OutbreakTypeID,
                    idfsLocation = @idfsLocation,
                    datStartDate = @datStartDate,
                    datFinishDate = @datCloseDate,
                    strDescription = @strDescription,
                    intRowStatus = COALESCE(@intRowStatus, 0),
                    datModificationForArchiveDate = @datModificationForArchiveDate,
                    idfPrimaryCaseOrSession = @idfPrimaryCaseOrSession,
                    idfsSite = @idfsSite,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = ISNULL(@User, SUSER_NAME())
                WHERE idfOutbreak = @idfOutbreak;

			   --Data Audit (Gather previous record items before edit)
			   INSERT INTO @OutbreakSessionAfterEdit (
			   	  idfGeoLocation,
				  idfOutbreak,
				  idfsOutbreakStatus,
				  datStartDate,
				  datFinishDate,
				  strOutbreakID,
				  strDescription,
				  idfsDiagnosisOrDiagnosisGroup,
				  idfPrimaryCaseOrSession   
			   )
			   SELECT
				  idfGeoLocation,
				  idfOutbreak,
				  idfsOutbreakStatus,
				  datStartDate,
				  datFinishDate,
				  strOutbreakID,
				  strDescription,
				  idfsDiagnosisOrDiagnosisGroup,
				  idfPrimaryCaseOrSession  
			   FROM
				  tlbOutbreak
			   WHERE
				  idfOutbreak = @idfOutbreak
			   
			   INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80160000000, --idfGeoLocation
                       a.idfOutbreak,
                       NULL,
                       b.idfGeoLocation,
                       a.idfGeoLocation,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.idfGeoLocation <> b.idfGeoLocation)
                      OR (
                             a.idfGeoLocation IS NOT NULL
                             AND b.idfGeoLocation IS NULL
                         )
                      OR (
                             a.idfGeoLocation IS NULL
                             AND b.idfGeoLocation IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80190000000, --idfsOutbreakStatus
                       a.idfOutbreak,
                       NULL,
                       b.idfsOutbreakStatus,
                       a.idfsOutbreakStatus,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.idfsOutbreakStatus <> b.idfsOutbreakStatus)
                      OR (
                             a.idfsOutbreakStatus IS NOT NULL
                             AND b.idfsOutbreakStatus IS NULL
                         )
                      OR (
                             a.idfsOutbreakStatus IS NULL
                             AND b.idfsOutbreakStatus IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       746510000000, --datStartDate
                       a.idfOutbreak,
                       NULL,
                       b.datStartDate,
                       a.datStartDate,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.datStartDate <> b.datStartDate)
                      OR (
                             a.datStartDate IS NOT NULL
                             AND b.datStartDate IS NULL
                         )
                      OR (
                             a.datStartDate IS NULL
                             AND b.datStartDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       746520000000, --datFinishDate
                       a.idfOutbreak,
                       NULL,
                       b.datFinishDate,
                       a.datFinishDate,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.datFinishDate <> b.datFinishDate)
                      OR (
                             a.datFinishDate IS NOT NULL
                             AND b.datFinishDate IS NULL
                         )
                      OR (
                             a.datFinishDate IS NULL
                             AND b.datFinishDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       746540000000, --strDescription
                       a.idfOutbreak,
                       NULL,
                       b.strDescription,
                       a.strDescription,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.strDescription <> b.strDescription)
                      OR (
                             a.strDescription IS NOT NULL
                             AND b.strDescription IS NULL
                         )
                      OR (
                             a.strDescription IS NULL
                             AND b.strDescription IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12675310000000, --idfsDiagnosisOrDiagnosisGroup
                       a.idfOutbreak,
                       NULL,
                       b.idfsDiagnosisOrDiagnosisGroup,
                       a.idfsDiagnosisOrDiagnosisGroup,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.idfsDiagnosisOrDiagnosisGroup <> b.idfsDiagnosisOrDiagnosisGroup)
                      OR (
                             a.idfsDiagnosisOrDiagnosisGroup IS NOT NULL
                             AND b.idfsDiagnosisOrDiagnosisGroup IS NULL
                         )
                      OR (
                             a.idfsDiagnosisOrDiagnosisGroup IS NULL
                             AND b.idfsDiagnosisOrDiagnosisGroup IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12675370000000, --idfPrimaryCaseOrSession
                       a.idfOutbreak,
                       NULL,
                       b.idfPrimaryCaseOrSession,
                       a.idfPrimaryCaseOrSession,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.idfPrimaryCaseOrSession <> b.idfPrimaryCaseOrSession)
                      OR (
                             a.idfPrimaryCaseOrSession IS NOT NULL
                             AND b.idfPrimaryCaseOrSession IS NULL
                         )
                      OR (
                             a.idfPrimaryCaseOrSession IS NULL
                             AND b.idfPrimaryCaseOrSession IS NOT NULL
                         );
            -- End data audit
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tlbOutbreak
                (
                    idfOutbreak,
                    idfsDiagnosisOrDiagnosisGroup,
                    idfsOutbreakStatus,
                    OutbreakTypeID,
                    idfsLocation,
                    datStartDate,
                    datFinishDate,
                    strOutbreakID,
                    strDescription,
                    intRowStatus,
                    rowguid,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    datModificationForArchiveDate,
                    idfPrimaryCaseOrSession,
                    idfsSite,
                    AuditCreateDTM,
                    AuditCreateUser,
                    AuditUpdateDTM,
                    AuditUpdateUser
                )
                VALUES
                (@idfOutbreak,
                 @idfsDiagnosisOrDiagnosisGroup,
                 @idfsOutbreakStatus,
                 @OutbreakTypeId,
                 @idfsLocation,
                 @datStartDate,
                 @datCloseDate,
                 @strOutbreakID,
                 @strDescription,
                 0  ,
                 NEWID(),
                 10519001,
                 '[{"idfOutbreak":' + CAST(@idfOutbreak AS NVARCHAR(300)) + '}]',
                 @datModificationForArchiveDate,
                 @idfPrimaryCaseOrSession,
                 @idfsSite,
                 GETDATE(),
                 ISNULL(@User, SUSER_NAME()),
                 GETDATE(),
                 ISNULL(@User, SUSER_NAME())
                );

                UPDATE @EventsTemp
                SET ObjectId = @idfOutbreak
                WHERE ObjectId = 0;

				-- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableID,
                 @idfOutbreak,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                 @User,
                 @idfOutbreak
                );
			   -- End data audit


            END

            --Modifications to a Table Variable prevents Adding a column. Code was modified to produce this feild
            --Now we need to get a FK for each row and insert it one at a time so that the "Next Key" generation will be proper.
            WHILE
            (SELECT COUNT(OutbreakSpeciesTypeID) FROM @convertedParameters) > 0
            BEGIN
                --Identify the first Outbreak Species Type so that we can modify one row at a time.
                --Using table variable with species types only
                SELECT TOP 1
                    @OutbreakSpeciesParameterUID = OutbreakSpeciesParameterUID,
                    @OutbreakSpeciesTypeID = OutbreakSpeciesTypeID,
                    @CaseMonitoringDuration = CaseMonitoringDuration,
                    @CaseMonitoringFrequency = CaseMonitoringFrequency,
                    @ContactTracingDuration = ContactTracingDuration,
                    @ContactTracingFrequency = ContactTracingFrequency,
                    @intRowStatus = intRowStatus
                FROM @convertedParameters;

                IF EXISTS
                (
                    SELECT OutbreakSpeciesParameterUID
                    FROM dbo.OutbreakSpeciesParameter
                    WHERE OutbreakSpeciesParameterUID = @OutbreakSpeciesParameterUID
                )
                BEGIN
                    UPDATE dbo.OutbreakSpeciesParameter
                    SET CaseMonitoringDuration = @CaseMonitoringDuration,
                        CaseMonitoringFrequency = @CaseMonitoringFrequency,
                        ContactTracingDuration = @ContactTracingDuration,
                        ContactTracingFrequency = @ContactTracingFrequency,
                        intRowStatus = @intRowStatus,
                        AuditUpdateUser = ISNULL(@User, SUSER_NAME()),
                        AuditUpdateDTM = GETDATE()
                    WHERE OutbreakSpeciesParameterUID = @OutbreakSpeciesParameterUID;
                END
                ELSE
                BEGIN
                    --IF @CaseMonitoringDuration > 0 AND @ContactTracingDuration > 0
                    --	BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET @tableName = 'OutbreakSpeciesParameter',
                                                   @idfsKey = @OutbreakSpeciesParameterUID OUTPUT;

                    --Update the JSON data that was converted over to a table variable
                    UPDATE @convertedParameters
                    SET OutbreakSpeciesParameterUID = @OutbreakSpeciesParameterUID
                    WHERE OutbreakSpeciesTypeID = @OutbreakSpeciesTypeID;

                    --Because USP_GBL_NEXTKEYID_GET will need to have the record in the destination table, we will have to insert it now,
                    --so that the next key will be generated.
                    INSERT INTO OutbreakSpeciesParameter
                    (
                        OutbreakSpeciesParameterUID,
                        idfOutbreak,
                        OutbreakSpeciesTypeID,
                        CaseMonitoringDuration,
                        CaseMonitoringFrequency,
                        ContactTracingDuration,
                        ContactTracingFrequency,
                        intRowStatus,
                        rowguid,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@OutbreakSpeciesParameterUID,
                     @idfOutbreak,
                     @OutbreakSpeciesTypeID,
                     @CaseMonitoringDuration,
                     @CaseMonitoringFrequency,
                     @ContactTracingDuration,
                     @ContactTracingFrequency,
                     0  ,
                     NEWID(),
                     10519001,
                     '[{"OutbreakSpeciesParameterUID":' + CAST(@OutbreakSpeciesParameterUID AS NVARCHAR(300)) + '}]',
                     ISNULL(@User, SUSER_NAME()),
                     GETDATE()
                    );
                --END
                END

                --Delete the Species type that we have been working with so that the loop will decrement and fall out when 0.
                SET ROWCOUNT 1;

                DELETE FROM @convertedParameters;

                SET ROWCOUNT 0;
            END

            WHILE EXISTS (SELECT * FROM @EventsTemp)
            BEGIN
                SELECT TOP 1
                    @EventId = EventId,
                    @EventTypeId = EventTypeId,
                    @EventUserId = UserId,
                    @EventObjectId = ObjectId,
                    @EventSiteId = SiteId,
                    @EventDiseaseId = DiseaseId,
                    @EventLocationId = LocationId,
                    @EventInformationString = InformationString,
                    @EventLoginSiteId = LoginSiteId
                FROM @EventsTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                                @EventTypeId,
                                                @EventUserId,
                                                @EventObjectId,
                                                @EventDiseaseId,
                                                @EventSiteId,
                                                @EventInformationString,
												--null,
                                                @EventLoginSiteId,
                                                @EventLocationId,
                                                @User;

                DELETE FROM @EventsTemp
                WHERE EventId = @EventId;
            END;
        END TRY
        BEGIN CATCH
            IF @@TRANCOUNT = 1
                ROLLBACK;

            SET @returnCode = ERROR_NUMBER();
            SET @returnMsg
                = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: '
                  + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
                  + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: '
                  + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();

            ; THROW;
        END CATCH

        SELECT @returnCode AS ReturnCode,
               @returnMsg AS ReturnMessage,
               @idfOutbreak AS idfOutbreak,
               @strOutbreakID AS strOutbreakID;
    END
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_SET]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_SET
--
-- Description: Insert or update a human master (actual) record.
--          
-- Revision History:
-- Name            Date       Change
-- --------------- ---------- --------------------------------------------------------------------
-- Stephen Long    11/28/2018 Initial release for new API.
-- Stephen Long    01/18/2019 Added entered date as a part of the insert human actual statement; 
--                            sets it to the system current date/time.  Syncs up with use case 
--                            HUC02.  Also added copy to human indicator for requirements in 
--                            laboratory module, use case 10.
-- Mark Wilson     09/23/2021 updated for consistency and for updates to locations.
-- Mark Wilson     10/04/2021 updated blnGeoLocationShared to correct addressing issues.
-- Mark Wilson     10/06/2021 minor cleanup.
-- Mark Wilson     10/07/2021 added Permanent location params and sets, added Elevation.
-- Mark Wilson     10/19/2021 Updated to call USSP_GBL_ADDRESS_SET.
-- Mark Wilson     10/25/2021 Updated  EXEC USSP_GBL_ADDRESS_SET to remove @LanguageID
-- Steven Verner   02/13/2022 Suppressed the return of sub calls to global address set SP to keep from interfering with POCO generation.
-- Leo Tracchia	   11/21/2022 Added statements for Audit logging 
-- Leo Tracchia	   11/21/2022 Added fix for auditing and changed to call USSP_GBL_ADDRESS_SET_WITH_AUDITING
-- Leo Tracchia	   11/29/2022 Added additional statement for Audit logging specifically for location data
-- Ann Xiong	   03/15/2023 Added @idfDataAuditEvent parameter
-- Testing Code
/*

EXEC	@return_value = [dbo].[USP_HUM_HUMAN_MASTER_SET]
		@HumanMasterID = NULL,
		@FirstName = N'Mark',
		@SecondName = N'C.',
		@LastName = N'Wilson',
		@DateOfBirth = N'04/18/1962',
		@DateOfDeath = N'04/18/2062',
		@ReportedAge = 59,
		@ReportAgeUOMID = 10042003,
		@HumanGenderTypeID = 10043002,
		@OccupationTypeID = 6920000004,
		@PassportNumber = N'2224446661212',
		@EmployerName = N'Georgia Tech',
		@EmployedDateLastPresent = N'2021-10-04 14:55:23.090',
		@EmployeridfsLocation = 1345350000000,
		@EmployerstrStreetName = N'Baker Street',
		@EmployerstrBuilding = N'221B',
		@EmployeridfsPostalCode = N'33300',
		@EmployerPhone = N'011222333444',
		@HumanidfsLocation = 1345350000000,
		@HumanstrStreetName = N'Elm Street',
		@HumanstrBuilding = N'1224',
		@HumanidfsPostalCode = N'33300',
		@HomePhone = N'011222333444'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_SET] (
	@HumanMasterID BIGINT = NULL,
	@CopyToHumanIndicator BIT = 0, 
	@PersonalIDType BIGINT = NULL,
	@EIDSSPersonID NVARCHAR(200) = NULL,
	@PersonalID NVARCHAR(100) = NULL,
	@FirstName NVARCHAR(200) = NULL,
	@SecondName NVARCHAR(200) = NULL,
	@LastName NVARCHAR(200),
	@DateOfBirth DATETIME = NULL,
	@DateOfDeath DATETIME = NULL,
	@ReportedAge INT = NULL,
	@ReportAgeUOMID BIGINT = NULL,
	@HumanGenderTypeID BIGINT = NULL,
	@OccupationTypeID BIGINT = NULL,
	@CitizenshipTypeID BIGINT = NULL,
	@PassportNumber NVARCHAR(20) = NULL,
	@IsEmployedTypeID BIGINT = NULL,
---------------------------------------------------------------
	@EmployerName NVARCHAR(200) = NULL,
	@EmployedDateLastPresent DATETIME = NULL,
	@EmployerForeignAddressIndicator BIT = 0,
	@EmployerForeignAddressString NVARCHAR(200) = NULL,
	@EmployerGeoLocationID BIGINT = NULL,
	@EmployeridfsLocation BIGINT = NULL,
	@EmployerstrStreetName NVARCHAR(200) = NULL,
	@EmployerstrApartment NVARCHAR(200) = NULL,
	@EmployerstrBuilding NVARCHAR(200) = NULL,
	@EmployerstrHouse NVARCHAR(200) = NULL,
	@EmployeridfsPostalCode NVARCHAR(200) = NULL,
	@EmployerPhone NVARCHAR(100) = NULL,
---------------------------------------------------------------
	@IsStudentTypeID BIGINT = NULL,
	@SchoolName NVARCHAR(200) = NULL,
	@SchoolDateLastAttended DATETIME = NULL,
	@SchoolForeignAddressIndicator BIT = 0,
	@SchoolForeignAddressString NVARCHAR(200) = NULL,
	@SchoolGeoLocationID BIGINT = NULL,
	@SchoolidfsLocation BIGINT = NULL,
	@SchoolstrStreetName NVARCHAR(200) = NULL,
	@SchoolstrApartment NVARCHAR(200) = NULL,
	@SchoolstrBuilding NVARCHAR(200) = NULL,
	@SchoolstrHouse NVARCHAR(200) = NULL,
	@SchoolidfsPostalCode NVARCHAR(200) = NULL,
	@SchoolPhone NVARCHAR(100) = NULL,
---------------------------------------------------------------
	@HumanGeoLocationID BIGINT = NULL,
	@HumanidfsLocation BIGINT = NULL,
	@HumanstrStreetName NVARCHAR(200) = NULL,
	@HumanstrApartment NVARCHAR(200) = NULL,
	@HumanstrBuilding NVARCHAR(200) = NULL,
	@HumanstrHouse NVARCHAR(200) = NULL,
	@HumanidfsPostalCode NVARCHAR(200) = NULL,
	@HumanstrLatitude FLOAT = NULL,
	@HumanstrLongitude FLOAT = NULL,
	@HumanstrElevation FLOAT = NULL,
---------------------------------------------------------------
	@HumanPermGeoLocationID BIGINT = NULL,
	@HumanPermidfsLocation BIGINT = NULL,
	@HumanPermstrStreetName NVARCHAR(200) = NULL,
	@HumanPermstrApartment NVARCHAR(200) = NULL,
	@HumanPermstrBuilding NVARCHAR(200) = NULL,
	@HumanPermstrHouse NVARCHAR(200) = NULL,
	@HumanPermidfsPostalCode NVARCHAR(200) = NULL,
---------------------------------------------------------------
	@HumanAltGeoLocationID BIGINT = NULL,
	@HumanAltForeignAddressIndicator BIT = 0,
	@HumanAltForeignAddressString NVARCHAR(200) = NULL,
	@HumanAltidfsLocation BIGINT = NULL,
	@HumanAltstrStreetName NVARCHAR(200) = NULL,
	@HumanAltstrApartment NVARCHAR(200) = NULL,
	@HumanAltstrBuilding NVARCHAR(200) = NULL,
	@HumanAltstrHouse NVARCHAR(200) = NULL,
	@HumanAltidfsPostalCode NVARCHAR(200) = NULL,
---------------------------------------------------------------
	@RegistrationPhone NVARCHAR(200) = NULL,
	@HomePhone NVARCHAR(200) = NULL,
	@WorkPhone NVARCHAR(200) = NULL,
	@ContactPhoneCountryCode INT = NULL,
	@ContactPhone NVARCHAR(200) = NULL,
	@ContactPhoneTypeID BIGINT = NULL,
	@ContactPhone2CountryCode INT = NULL,
	@ContactPhone2 NVARCHAR(200) = NULL,
	@ContactPhone2TypeID BIGINT = NULL,
    @idfDataAuditEvent BIGINT = NULL,
	@AuditUser NVARCHAR(100) = ''
	)
AS
BEGIN
	SET NOCOUNT ON;

	IF (@AuditUser = '' OR @AuditUser IS NULL)
		SET @AuditUser = SUSER_NAME()

	DECLARE @ReturnCode INT = 0,
		@ReturnMessage NVARCHAR(MAX) = 'SUCCESS', 
		@HumanID BIGINT = NULL;

	DECLARE @SupressSelect TABLE (
		ReturnCode INT,
		ReturnMessage NVARCHAR(MAX)
		);

	DECLARE @idfsLocation BIGINT
	DECLARE @AdminLevel INT

	--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
		DECLARE @idfObject bigint = @HumanMasterID;
		DECLARE @idfObjectTable_tlbHumanActual bigint = 4573200000000;
		DECLARE @idfObjectTable_HumanActualAddlInfo bigint = 52577590000000;
		--DECLARE @idfDataAuditEvent bigint = NULL;		

		DECLARE @tlbHumanActual_BeforeEdit TABLE
		(
			idfHumanActual bigint,
			idfsOccupationType bigint,
			idfsNationality bigint,
			idfsHumanGender bigint,
			idfCurrentResidenceAddress bigint,
			idfEmployerAddress bigint,
			idfRegistrationAddress bigint,
			datDateofBirth datetime,
			datDateOfDeath datetime,
			strLastName nvarchar(200),
			strSecondName nvarchar(200),
			strFirstName nvarchar(200),
			strRegistrationPhone nvarchar(200),
			strEmployerName nvarchar(200),
			strHomePhone nvarchar(200),
			strWorkPhone nvarchar(200),
			idfsPersonIDType bigint,
			strPersonID nvarchar(100),
			datEnteredDate datetime,
			datModificationDate datetime			
		)

		DECLARE @tlbHumanActual_AfterEdit TABLE
		(
			idfHumanActual bigint,
			idfsOccupationType bigint,
			idfsNationality bigint,
			idfsHumanGender bigint,
			idfCurrentResidenceAddress bigint,
			idfEmployerAddress bigint,
			idfRegistrationAddress bigint,
			datDateofBirth datetime,
			datDateOfDeath datetime,
			strLastName nvarchar(200),
			strSecondName nvarchar(200),
			strFirstName nvarchar(200),
			strRegistrationPhone nvarchar(200),
			strEmployerName nvarchar(200),
			strHomePhone nvarchar(200),
			strWorkPhone nvarchar(200),
			idfsPersonIDType bigint,
			strPersonID nvarchar(100),
			datEnteredDate datetime,
			datModificationDate datetime			
		)

		DECLARE @HumanActualAddlInfo_BeforeEdit TABLE
		(
			HumanActualAddlInfoUID bigint,
			ReportedAge int,
			ReportedAgeUOMID bigint,
			PassportNbr varchar(20),
			IsEmployedID bigint,
			EmployerPhoneNbr varchar(200),
			EmployedDTM datetime,
			IsStudentID bigint,
			SchoolName varchar(200),
			SchoolPhoneNbr varchar(200),
			SchoolAddressID bigint,
			SchoolLastAttendDTM datetime,
			ContactPhoneCountryCode int,
			ContactPhoneNbr varchar(200),
			ContactPhoneNbrTypeID bigint,
			ContactPhone2CountryCode int,
			ContactPhone2Nbr varchar(200),
			ContactPhone2NbrTypeID bigint,
			AltAddressID bigint			
		)

		DECLARE @HumanActualAddlInfo_AfterEdit TABLE
		(
			HumanActualAddlInfoUID bigint,
			ReportedAge int,
			ReportedAgeUOMID bigint,
			PassportNbr varchar(20),
			IsEmployedID bigint,
			EmployerPhoneNbr varchar(200),
			EmployedDTM datetime,
			IsStudentID bigint,
			SchoolName varchar(200),
			SchoolPhoneNbr varchar(200),
			SchoolAddressID bigint,
			SchoolLastAttendDTM datetime,
			ContactPhoneCountryCode int,
			ContactPhoneNbr varchar(200),
			ContactPhoneNbrTypeID bigint,
			ContactPhone2CountryCode int,
			ContactPhone2Nbr varchar(200),
			ContactPhone2NbrTypeID bigint,
			AltAddressID bigint			
		)

	--Data Audit--

	--Data Audit--
		-- Get and Set UserId and SiteId
		SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo
	--Data Audit--

	BEGIN TRY

		BEGIN TRANSACTION;		
	
		IF NOT EXISTS (
				SELECT *
				FROM dbo.tlbHumanActual
				WHERE idfHumanActual = @HumanMasterID
					AND intRowStatus = 0
				)
		BEGIN

			INSERT INTO @SupressSelect
			EXECUTE dbo.USP_GBL_NEXTKEYID_GET 
				@tableName = N'tlbHumanActual',
				@idfsKey = @HumanMasterID OUTPUT;

			--Data Audit--
        	IF  @idfDataAuditEvent IS NULL
        	BEGIN 
				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType = 10016001;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SupressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @HumanMasterID, @idfObjectTable_tlbHumanActual, @idfDataAuditEvent OUTPUT
            END
			--Data Audit--

			-- Set Employer Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @EmployeridfsLocation
			
			IF (@AdminLevel > 2)
				OR @EmployerForeignAddressIndicator = 1

				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @EmployerGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @EmployeridfsLocation,
					@Apartment = @EmployerstrApartment,
					@Building = @EmployerstrBuilding,
					@StreetName = @EmployerstrStreetName,
					@House = @EmployerstrHouse,
					@PostalCodeString = @EmployeridfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = @EmployerForeignAddressIndicator,
					@ForeignAddressString = @EmployerForeignAddressString,
					@GeolocationSharedIndicator = 1,
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set School Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @SchoolidfsLocation
		
			IF (@AdminLevel > 2)
				OR @SchoolForeignAddressIndicator = 1

				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @SchoolGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @SchoolidfsLocation,
					@Apartment = @SchoolstrApartment,
					@Building = @SchoolstrBuilding,
					@StreetName = @SchoolstrStreetName,
					@House = @SchoolstrHouse,
					@PostalCodeString = @SchoolidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = @SchoolForeignAddressIndicator,
					@ForeignAddressString = @SchoolForeignAddressString,
					@GeolocationSharedIndicator = 1,
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set Current Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanidfsLocation
		
			IF (@AdminLevel > 2)
				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @HumanGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @HumanidfsLocation,
					@Apartment = @HumanstrApartment,
					@Building = @HumanstrBuilding,
					@StreetName = @HumanstrStreetName,
					@House = @HumanstrHouse,
					@PostalCodeString = @HumanidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = @HumanstrLatitude,
					@Longitude = @HumanstrLongitude,
					@Elevation = @HumanstrElevation,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = 0,
					@ForeignAddressString = NULL,
					@GeolocationSharedIndicator = 1, 
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set Permanent Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanPermidfsLocation
		
			IF (@AdminLevel > 2)
				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @HumanPermGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @HumanPermidfsLocation,
					@Apartment =@HumanPermstrApartment,
					@Building =@HumanPermstrBuilding,
					@StreetName =@HumanPermstrStreetName,
					@House =@HumanPermstrHouse,
					@PostalCodeString =@HumanPermidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = 0,
					@ForeignAddressString = NULL,
					@GeolocationSharedIndicator = 1, 
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set Alternate Address
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanAltidfsLocation
		
			IF (@AdminLevel > 2) OR @HumanAltForeignAddressIndicator = 1
				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING
					@GeolocationID = @HumanAltGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @HumanAltidfsLocation,
					@Apartment = @HumanAltstrApartment,
					@Building = @HumanAltstrBuilding,
					@StreetName = @HumanAltstrStreetName,
					@House = @HumanAltstrHouse,
					@PostalCodeString = @HumanAltidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = @HumanAltForeignAddressIndicator,
					@ForeignAddressString = @HumanAltForeignAddressString,
					@GeolocationSharedIndicator = 1, 
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

				INSERT INTO dbo.tlbHumanActual (
					idfHumanActual,
					idfsNationality,
					idfsHumanGender,
					idfCurrentResidenceAddress,
					idfsOccupationType,
					idfEmployerAddress,
					idfRegistrationAddress,
					datDateofBirth,
					datDateOfDeath,
					strFirstName,
					strSecondName,
					strLastName,
					strRegistrationPhone,
					strEmployerName,
					strHomePhone,
					strWorkPhone,
					idfsPersonIDType,
					strPersonID,
					intRowStatus,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser,
					AuditCreateDTM,
					AuditUpdateUser,
					AuditUpdateDTM
					)
				VALUES (
					@HumanMasterID,
					@CitizenshipTypeID,
					@HumanGenderTypeID,
					@HumanGeoLocationID,
					@OccupationTypeID,
					@EmployerGeoLocationID,
					@HumanPermGeoLocationID,
					@DateOfBirth,
					@DateOfDeath,
					@FirstName,
					@SecondName,
					@LastName,
					@RegistrationPhone,
					@EmployerName,
					@HomePhone,
					@WorkPhone,
					@PersonalIDType,
					@PersonalID,
					0,
					10519001,
					'[{"idfHumanActual":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]',
					@AuditUser,
					GETDATE(),
					@AuditUser,
					GETDATE()
					);

			--Data Audit--							

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_tlbHumanActual, @HumanMasterID)
			
			--Data Audit--

			INSERT INTO @SupressSelect
			EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'EIDSS Person',
				@NextNumberValue = @EIDSSPersonID OUTPUT,
				@InstallationSite = NULL;

			INSERT INTO dbo.HumanActualAddlInfo (
				HumanActualAddlInfoUID,
				EIDSSPersonID,
				ReportedAge,
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID,
				intRowStatus,
				SourceSystemNameID,
				SourceSystemKeyValue,
				AuditCreateUser,
				AuditCreateDTM,
				AuditUpdateUser,
				AuditUpdateDTM
				)
			VALUES (
				@HumanMasterID,
				@EIDSSPersonID,
				@ReportedAge,
				@ReportAgeUOMID,
				@PassportNumber,
				@IsEmployedTypeID,
				@EmployerPhone,
				@EmployedDateLastPresent,
				@IsStudentTypeID,
				@SchoolName,
				@SchoolPhone,
				@SchoolGeoLocationID,
				@SchoolDateLastAttended,
				@ContactPhoneCountryCode,
				@ContactPhone,
				@ContactPhoneTypeID,
				@ContactPhone2CountryCode,
				@ContactPhone2,
				@ContactPhone2TypeID,
				@HumanAltGeoLocationID,
				0,
				10519001,
				'[{"HumanActualAddlInfoUID":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]',
				@AuditUser,
				GETDATE(),
				@AuditUser,
				GETDATE()
				);

			--Data Audit--			
				-- tauDataAuditEvent Event Type - Create 									
				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_HumanActualAddlInfo, @HumanMasterID)			
			--Data Audit--

			-- Create a human record from human actual for the laboratory module; register new sample.
			IF @CopyToHumanIndicator = 1
				BEGIN
					INSERT INTO @SupressSelect
					EXECUTE dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @HumanMasterID, @HumanID OUTPUT, @ReturnCode OUTPUT, @ReturnMessage OUTPUT;
					IF @ReturnCode <> 0 
						BEGIN
							RETURN;
						END;
				END;
		END;
		ELSE
		BEGIN

			--DataAudit-- 
        	IF  @idfDataAuditEvent IS NULL
        	BEGIN 				
				--  tauDataAuditEvent  Event Type - Edit 
				set @idfsDataAuditEventType = 10016003;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SupressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_tlbHumanActual, @idfDataAuditEvent OUTPUT
            END
			--DataAudit-- 

			-- Set Employer Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @EmployeridfsLocation
			
			IF (@AdminLevel > 2)
				OR @EmployerForeignAddressIndicator = 1

				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @EmployerGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @EmployeridfsLocation,
					@Apartment = @EmployerstrApartment,
					@Building = @EmployerstrBuilding,
					@StreetName = @EmployerstrStreetName,
					@House = @EmployerstrHouse,
					@PostalCodeString = @EmployeridfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = @EmployerForeignAddressIndicator,
					@ForeignAddressString = @EmployerForeignAddressString,
					@GeolocationSharedIndicator = 1,
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set School Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @SchoolidfsLocation
		
			IF (@AdminLevel > 2)
				OR @SchoolForeignAddressIndicator = 1

				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @SchoolGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @SchoolidfsLocation,
					@Apartment = @SchoolstrApartment,
					@Building = @SchoolstrBuilding,
					@StreetName = @SchoolstrStreetName,
					@House = @SchoolstrHouse,
					@PostalCodeString = @SchoolidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = @SchoolForeignAddressIndicator,
					@ForeignAddressString = @SchoolForeignAddressString,
					@GeolocationSharedIndicator = 1,
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set Current Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanidfsLocation
		
			IF (@AdminLevel > 2)
				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @HumanGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @HumanidfsLocation,
					@Apartment = @HumanstrApartment,
					@Building = @HumanstrBuilding,
					@StreetName = @HumanstrStreetName,
					@House = @HumanstrHouse,
					@PostalCodeString = @HumanidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = @HumanstrLatitude,
					@Longitude = @HumanstrLongitude,
					@Elevation = @HumanstrElevation,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = 0,
					@ForeignAddressString = NULL,
					@GeolocationSharedIndicator = 1, 
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set Permanent Address 
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanPermidfsLocation
		
			IF (@AdminLevel > 2)
				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
					@GeolocationID = @HumanPermGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @HumanPermidfsLocation,
					@Apartment =@HumanPermstrApartment,
					@Building =@HumanPermstrBuilding,
					@StreetName =@HumanPermstrStreetName,
					@House =@HumanPermstrHouse,
					@PostalCodeString =@HumanPermidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = 0,
					@ForeignAddressString = NULL,
					@GeolocationSharedIndicator = 1, 
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			-- Set Alternate Address
			SET @AdminLevel = 0
			SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanAltidfsLocation
		
			IF (@AdminLevel > 2) OR @HumanAltForeignAddressIndicator = 1
				INSERT INTO @SupressSelect
				EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING
					@GeolocationID = @HumanAltGeoLocationID OUTPUT,
					@DataAuditEventID = @idfDataAuditEvent,
					@ResidentTypeID = NULL,
					@GroundTypeID = NULL,
					@GeolocationTypeID = NULL,
					@LocationID = @HumanAltidfsLocation,
					@Apartment = @HumanAltstrApartment,
					@Building = @HumanAltstrBuilding,
					@StreetName = @HumanAltstrStreetName,
					@House = @HumanAltstrHouse,
					@PostalCodeString = @HumanAltidfsPostalCode,
					@DescriptionString = NULL,
					@Distance = NULL,
					@Latitude = NULL,
					@Longitude = NULL,
					@Elevation = NULL,
					@Accuracy = NULL,
					@Alignment = NULL,
					@ForeignAddressIndicator = @HumanAltForeignAddressIndicator,
					@ForeignAddressString = @HumanAltForeignAddressString,
					@GeolocationSharedIndicator = 1, 
					@AuditUserName = @AuditUser,
					@ReturnCode = @ReturnCode OUTPUT,
					@ReturnMessage = @ReturnMessage OUTPUT;

			INSERT INTO @tlbHumanActual_BeforeEdit (
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate)
			SELECT 
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate
				FROM tlbHumanActual WHERE idfHumanActual = @HumanMasterID;

			UPDATE dbo.tlbHumanActual
			SET idfsNationality = @CitizenshipTypeID,
				idfsHumanGender = @HumanGenderTypeID,
				idfCurrentResidenceAddress = @HumanGeoLocationID,
				idfsOccupationType = @OccupationTypeID,
				idfEmployerAddress = @EmployerGeoLocationID,
				idfRegistrationAddress = @HumanPermGeoLocationID,
				datDateofBirth = @DateOfBirth,
				datDateOfDeath = @DateOfDeath,
				strFirstName = @FirstName,
				strSecondName = @SecondName,
				strLastName = @LastName,
				strRegistrationPhone = @RegistrationPhone,
				strEmployerName = @EmployerName,
				strHomePhone = @HomePhone,
				strWorkPhone = @WorkPhone,
				idfsPersonIDType = @PersonalIDType,
				strPersonID = @PersonalID,
				SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
				SourceSystemKeyValue = ISNULL(SourceSystemKeyValue, '[{"idfHumanActual":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]'),
				AuditCreateUser = @AuditUser,
				AuditCreateDTM = GETDATE(),
				AuditUpdateUser = @AuditUser,
				AuditUpdateDTM = GETDATE()
			WHERE idfHumanActual = @HumanMasterID;

			INSERT INTO @tlbHumanActual_AfterEdit (
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate)
			SELECT 
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate
				FROM tlbHumanActual WHERE idfHumanActual = @HumanMasterID;
						
				--idfsOccupationType
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573220000000,
					a.idfHumanActual,
					null,
					a.idfsOccupationType,
					b.idfsOccupationType 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsOccupationType <> b.idfsOccupationType) 
					or(a.idfsOccupationType is not null and b.idfsOccupationType is null)
					or(a.idfsOccupationType is null and b.idfsOccupationType is not null)

				--idfsNationality
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573230000000,
					a.idfHumanActual,
					null,
					a.idfsNationality,
					b.idfsNationality 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsNationality <> b.idfsNationality) 
					or(a.idfsNationality is not null and b.idfsNationality is null)
					or(a.idfsNationality is null and b.idfsNationality is not null)

				--idfsHumanGender
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573240000000,
					a.idfHumanActual,
					null,
					a.idfsHumanGender,
					b.idfsHumanGender 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsHumanGender <> b.idfsHumanGender) 
					or(a.idfsHumanGender is not null and b.idfsHumanGender is null)
					or(a.idfsHumanGender is null and b.idfsHumanGender is not null)

				--idfCurrentResidenceAddress
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573250000000,
					a.idfHumanActual,
					null,
					a.idfCurrentResidenceAddress,
					b.idfCurrentResidenceAddress 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfCurrentResidenceAddress <> b.idfCurrentResidenceAddress) 
					or(a.idfCurrentResidenceAddress is not null and b.idfCurrentResidenceAddress is null)
					or(a.idfCurrentResidenceAddress is null and b.idfCurrentResidenceAddress is not null)

				--idfEmployerAddress
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573260000000,
					a.idfHumanActual,
					null,
					a.idfEmployerAddress,
					b.idfEmployerAddress 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfEmployerAddress <> b.idfEmployerAddress) 
					or(a.idfEmployerAddress is not null and b.idfEmployerAddress is null)
					or(a.idfEmployerAddress is null and b.idfEmployerAddress is not null)

				--idfRegistrationAddress
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573270000000,
					a.idfHumanActual,
					null,
					a.idfRegistrationAddress,
					b.idfRegistrationAddress 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfRegistrationAddress <> b.idfRegistrationAddress) 
					or(a.idfRegistrationAddress is not null and b.idfRegistrationAddress is null)
					or(a.idfRegistrationAddress is null and b.idfRegistrationAddress is not null)

				--datDateofBirth
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573280000000,
					a.idfHumanActual,
					null,
					a.datDateofBirth,
					b.datDateofBirth 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datDateofBirth <> b.datDateofBirth) 
					or(a.datDateofBirth is not null and b.datDateofBirth is null)
					or(a.datDateofBirth is null and b.datDateofBirth is not null)

				--datDateOfDeath
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573290000000,
					a.idfHumanActual,
					null,
					a.datDateOfDeath,
					b.datDateOfDeath 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datDateOfDeath <> b.datDateOfDeath) 
					or(a.datDateOfDeath is not null and b.datDateOfDeath is null)
					or(a.datDateOfDeath is null and b.datDateOfDeath is not null)

				--strLastName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573300000000,
					a.idfHumanActual,
					null,
					a.strLastName,
					b.strLastName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strLastName <> b.strLastName) 
					or(a.strLastName is not null and b.strLastName is null)
					or(a.strLastName is null and b.strLastName is not null)

				--strSecondName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573310000000,
					a.idfHumanActual,
					null,
					a.strSecondName,
					b.strSecondName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strSecondName <> b.strSecondName) 
					or(a.strSecondName is not null and b.strSecondName is null)
					or(a.strSecondName is null and b.strSecondName is not null)

				--strFirstName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573320000000,
					a.idfHumanActual,
					null,
					a.strFirstName,
					b.strFirstName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strFirstName <> b.strFirstName) 
					or(a.strFirstName is not null and b.strFirstName is null)
					or(a.strFirstName is null and b.strFirstName is not null)

				--strRegistrationPhone
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573330000000,
					a.idfHumanActual,
					null,
					a.strRegistrationPhone,
					b.strRegistrationPhone 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strRegistrationPhone <> b.strRegistrationPhone) 
					or(a.strRegistrationPhone is not null and b.strRegistrationPhone is null)
					or(a.strRegistrationPhone is null and b.strRegistrationPhone is not null)

				--strEmployerName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573340000000,
					a.idfHumanActual,
					null,
					a.strEmployerName,
					b.strEmployerName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strEmployerName <> b.strEmployerName) 
					or(a.strEmployerName is not null and b.strEmployerName is null)
					or(a.strEmployerName is null and b.strEmployerName is not null)

				--strHomePhone
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573350000000,
					a.idfHumanActual,
					null,
					a.strHomePhone,
					b.strHomePhone 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strHomePhone <> b.strHomePhone) 
					or(a.strHomePhone is not null and b.strHomePhone is null)
					or(a.strHomePhone is null and b.strHomePhone is not null)

				--strWorkPhone
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573360000000,
					a.idfHumanActual,
					null,
					a.strWorkPhone,
					b.strWorkPhone 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strWorkPhone <> b.strWorkPhone) 
					or(a.strWorkPhone is not null and b.strWorkPhone is null)
					or(a.strWorkPhone is null and b.strWorkPhone is not null)

				--idfsPersonIDType
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					12527780000000,
					a.idfHumanActual,
					null,
					a.idfsPersonIDType,
					b.idfsPersonIDType 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsPersonIDType <> b.idfsPersonIDType) 
					or(a.idfsPersonIDType is not null and b.idfsPersonIDType is null)
					or(a.idfsPersonIDType is null and b.idfsPersonIDType is not null)

				--strPersonID
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					12527790000000,
					a.idfHumanActual,
					null,
					a.strPersonID,
					b.strPersonID 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strPersonID <> b.strPersonID) 
					or(a.strPersonID is not null and b.strPersonID is null)
					or(a.strPersonID is null and b.strPersonID is not null)

				--datEnteredDate
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					51389550000000,
					a.idfHumanActual,
					null,
					a.datEnteredDate,
					b.datEnteredDate 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datEnteredDate <> b.datEnteredDate) 
					or(a.datEnteredDate is not null and b.datEnteredDate is null)
					or(a.datEnteredDate is null and b.datEnteredDate is not null)

				--datModificationDate
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					51389560000000,
					a.idfHumanActual,
					null,
					a.datModificationDate,
					b.datModificationDate 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datModificationDate <> b.datModificationDate) 
					or(a.datModificationDate is not null and b.datModificationDate is null)
					or(a.datModificationDate is null and b.datModificationDate is not null)

			--DataAudit-- 

			INSERT INTO @HumanActualAddlInfo_BeforeEdit (
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID)			
			SELECT 
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID
				FROM HumanActualAddlInfo WHERE HumanActualAddlInfoUID = @HumanMasterID;

			UPDATE dbo.HumanActualAddlInfo
			SET ReportedAge = @ReportedAge,
				ReportedAgeUOMID = @ReportAgeUOMID,
				PassportNbr = @PassportNumber,
				IsEmployedID = @IsEmployedTypeID,
				EmployerPhoneNbr = @EmployerPhone,
				EmployedDTM = @EmployedDateLastPresent,
				IsStudentID = @IsStudentTypeID,
				SchoolName = @SchoolName,
				SchoolPhoneNbr = @SchoolPhone,
				SchoolAddressID = @SchoolGeoLocationID,
				SchoolLastAttendDTM = @SchoolDateLastAttended,
				ContactPhoneCountryCode = @ContactPhoneCountryCode,
				ContactPhoneNbr = @ContactPhone,
				ContactPhoneNbrTypeID = @ContactPhoneTypeID,
				ContactPhone2CountryCode = @ContactPhone2CountryCode,
				ContactPhone2Nbr = @ContactPhone2,
				ContactPhone2NbrTypeID = @ContactPhone2TypeID,
				AltAddressID = @HumanAltGeoLocationID,
				SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
				SourceSystemKeyValue = ISNULL(SourceSystemKeyValue, '[{"HumanActualAddlInfoUID":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]'),
				AuditCreateUser = @AuditUser,
				AuditCreateDTM = GETDATE(),
				AuditUpdateUser = @AuditUser,
				AuditUpdateDTM = GETDATE()
			WHERE HumanActualAddlInfoUID = @HumanMasterID;

			INSERT INTO @HumanActualAddlInfo_AfterEdit (
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID)
			SELECT 
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID			
				FROM HumanActualAddlInfo WHERE HumanActualAddlInfoUID = @HumanMasterID;

			--DataAudit-- 
			--  tauDataAuditEvent  Event Type- Edit 
			--set @idfsDataAuditEventType = 10016003;
			
			-- insert record into tauDataAuditEvent - 
			--INSERT INTO @SupressSelect
			--EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_HumanActualAddlInfo, @idfDataAuditEvent OUTPUT

			--ReportedAge
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000001,
				a.HumanActualAddlInfoUID,
				null,
				a.ReportedAge,
				b.ReportedAge 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ReportedAge <> b.ReportedAge) 
				or(a.ReportedAge is not null and b.ReportedAge is null)
				or(a.ReportedAge is null and b.ReportedAge is not null)

			--ReportedAgeUOMID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000002,
				a.HumanActualAddlInfoUID,
				null,
				a.ReportedAgeUOMID,
				b.ReportedAgeUOMID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ReportedAgeUOMID <> b.ReportedAgeUOMID) 
				or(a.ReportedAgeUOMID is not null and b.ReportedAgeUOMID is null)
				or(a.ReportedAgeUOMID is null and b.ReportedAgeUOMID is not null)

			--PassportNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000003,
				a.HumanActualAddlInfoUID,
				null,
				a.PassportNbr,
				b.PassportNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.PassportNbr <> b.PassportNbr) 
				or(a.PassportNbr is not null and b.PassportNbr is null)
				or(a.PassportNbr is null and b.PassportNbr is not null)

			--IsEmployedID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000004,
				a.HumanActualAddlInfoUID,
				null,
				a.IsEmployedID,
				b.IsEmployedID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.IsEmployedID <> b.IsEmployedID) 
				or(a.IsEmployedID is not null and b.IsEmployedID is null)
				or(a.IsEmployedID is null and b.IsEmployedID is not null)

			--EmployerPhoneNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000005,
				a.HumanActualAddlInfoUID,
				null,
				a.EmployerPhoneNbr,
				b.EmployerPhoneNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.EmployerPhoneNbr <> b.EmployerPhoneNbr) 
				or(a.EmployerPhoneNbr is not null and b.EmployerPhoneNbr is null)
				or(a.EmployerPhoneNbr is null and b.EmployerPhoneNbr is not null)

			--EmployedDTM
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000006,
				a.HumanActualAddlInfoUID,
				null,
				a.EmployedDTM,
				b.EmployedDTM 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.EmployedDTM <> b.EmployedDTM) 
				or(a.EmployedDTM is not null and b.EmployedDTM is null)
				or(a.EmployedDTM is null and b.EmployedDTM is not null)

			--IsStudentID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000007,
				a.HumanActualAddlInfoUID,
				null,
				a.IsStudentID,
				b.IsStudentID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.IsStudentID <> b.IsStudentID) 
				or(a.IsStudentID is not null and b.IsStudentID is null)
				or(a.IsStudentID is null and b.IsStudentID is not null)

			--SchoolName
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000008,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolName,
				b.SchoolName 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolName <> b.SchoolName) 
				or(a.SchoolName is not null and b.SchoolName is null)
				or(a.SchoolName is null and b.SchoolName is not null)
				
			--SchoolPhoneNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000009,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolPhoneNbr,
				b.SchoolPhoneNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolPhoneNbr <> b.SchoolPhoneNbr) 
				or(a.SchoolPhoneNbr is not null and b.SchoolPhoneNbr is null)
				or(a.SchoolPhoneNbr is null and b.SchoolPhoneNbr is not null)
								
			--SchoolAddressID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000010,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolAddressID,
				b.SchoolAddressID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolAddressID <> b.SchoolAddressID) 
				or(a.SchoolAddressID is not null and b.SchoolAddressID is null)
				or(a.SchoolAddressID is null and b.SchoolAddressID is not null)
												
			--SchoolLastAttendDTM
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000011,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolLastAttendDTM,
				b.SchoolLastAttendDTM 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolLastAttendDTM <> b.SchoolLastAttendDTM) 
				or(a.SchoolLastAttendDTM is not null and b.SchoolLastAttendDTM is null)
				or(a.SchoolLastAttendDTM is null and b.SchoolLastAttendDTM is not null)
																
			--ContactPhoneCountryCode
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000012,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhoneCountryCode,
				b.ContactPhoneCountryCode 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhoneCountryCode <> b.ContactPhoneCountryCode) 
				or(a.ContactPhoneCountryCode is not null and b.ContactPhoneCountryCode is null)
				or(a.ContactPhoneCountryCode is null and b.ContactPhoneCountryCode is not null)

			--ContactPhoneNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000013,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhoneNbr,
				b.ContactPhoneNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhoneNbr <> b.ContactPhoneNbr) 
				or(a.ContactPhoneNbr is not null and b.ContactPhoneNbr is null)
				or(a.ContactPhoneNbr is null and b.ContactPhoneNbr is not null)

			--ContactPhoneNbrTypeID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000014,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhoneNbrTypeID,
				b.ContactPhoneNbrTypeID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhoneNbrTypeID <> b.ContactPhoneNbrTypeID) 
				or(a.ContactPhoneNbrTypeID is not null and b.ContactPhoneNbrTypeID is null)
				or(a.ContactPhoneNbrTypeID is null and b.ContactPhoneNbrTypeID is not null)

			--ContactPhone2CountryCode
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000015,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhone2CountryCode,
				b.ContactPhone2CountryCode 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhone2CountryCode <> b.ContactPhone2CountryCode) 
				or(a.ContactPhone2CountryCode is not null and b.ContactPhone2CountryCode is null)
				or(a.ContactPhone2CountryCode is null and b.ContactPhone2CountryCode is not null)
				
			--ContactPhone2Nbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000016,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhone2Nbr,
				b.ContactPhone2Nbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhone2Nbr <> b.ContactPhone2Nbr) 
				or(a.ContactPhone2Nbr is not null and b.ContactPhone2Nbr is null)
				or(a.ContactPhone2Nbr is null and b.ContactPhone2Nbr is not null)

			--ContactPhone2NbrTypeID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000017,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhone2NbrTypeID,
				b.ContactPhone2NbrTypeID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhone2NbrTypeID <> b.ContactPhone2NbrTypeID) 
				or(a.ContactPhone2NbrTypeID is not null and b.ContactPhone2NbrTypeID is null)
				or(a.ContactPhone2NbrTypeID is null and b.ContactPhone2NbrTypeID is not null)

			--AltAddressID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000018,
				a.HumanActualAddlInfoUID,
				null,
				a.AltAddressID,
				b.AltAddressID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.AltAddressID <> b.AltAddressID) 
				or(a.AltAddressID is not null and b.AltAddressID is null)
				or(a.AltAddressID is null and b.AltAddressID is not null)

		END;		

		IF @@TRANCOUNT > 0
			COMMIT TRANSACTION;

		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage,
			@HumanMasterID HumanMasterID,
			@EIDSSPersonID EIDSSPersonID, 
			@HumanID HumanID;
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();
		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage,
			@HumanMasterID HumanMasterID,
			@EIDSSPersonID EIDSSPersonID, 
			@HumanID HumanID;

		THROW;
	END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_HAS_MONITORING_SESSION_SET]...';


GO
-- ================================================================================================
-- Name: USP_HAS_MONITORING_SESSION_SET
--
-- Description: Insert/update for monitoring session records for the human module.
--          
-- Revision History:
-- Name				Date	   Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		07/06/2019 Initial release.
-- Ann Xiong		01/17/2020 Fixed an issue in Persons & Samples grid where saving a new row 
--                             will change the Person ID of several previous rows to be the same 
--                             as the newly added row.
-- Stephen Long		03/09/2020 Added current site ID to the update sample set call.
-- Ann Xiong		03/20/2020 Added the following information from the AS Session to the new 
--								Disease Report:
--								Disease Report field “Report Status” – “In progress”	
--								Disease Report field “Case classification” field - <blank>
--								Disease Report field “Report Type” – “Active”
--								Disease Report field “Entered by Name” with the user name who 
--                              created this Disease Report
--								Disease Report field “Date Entered” with the current date when 
--                              this Disease Report was created
-- Ann Xiong		03/30/2020 Update SET idfHumanCase in tlbMaterial and set 
--							   idfsYNSpecimenCollected and idfsYNTestsConducted.
-- Ann Xiong		04/14/2020 Changed to use "SSH" prefix instead of SSV for Human Active 
--							   Surveillance Session.
-- Stephen Long		12/20/2020 Updated USSP_GBL_TEST_SET call with four new parameters.
-- Doug Albanese	01/12/2022 Refactored, due to table change for storing multiple disease 
--                             against a session.  Added supress to an EXECUTE statement that was 
--                             preventing EF from generating a return model
-- Doug Albanese	01/13/2022 Refactored to use new location hierarchy
-- Doug Albanese	01/14/2022 Refactoring json conversion tables to not require PKs, until 
--                             automatically generated
-- Doug Albanese	01/18/2022 Clean up of "collections" to include required fields for foreign 
--                             records
-- Doug Albanese	01/24/2022 Final refactoring for successful save from the app.
-- Doug Albanese	02/02/2022 Minor refactoring to save SampleId to Tests collection
-- Doug Albanese	03/25/2022 Updated to make use of "RowAction" on the disease combination
-- Doug Albanese	05/23/2022 Removed idfsCurrentSite, to prevent clashing with lab.
-- Doug Albanese	06/16/2022 Changed out the value used for NonLaboratoryTestIndicator from 0 to 
--                             1
-- Doug Albanese	06/16/2022 Added "Notifications" for processing, and User ID for auditing 
--                             purposes
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
-- Doug Albanese	07/19/2022 Corrected the enumeration of multiple site alerts
-- Doug Albanese	08/01/2022 Added a replacement feature of the word "New", to have the EIDSS 
--                             Session ID, in place.
-- Doug Albanese	08/26/2022 Adjusted supression, because of changes made to USSP_GBL_SAMPLE_SET
-- Doug Albanese    10/17/2022 Added a condition to pick up any idfHumancase ids that belong to an 
--                             existing Test to maintain the "Connected" status.
-- Stephen Long     10/18/2022 Added samples to diseases parameter and logic.
-- Leo Tracchia		12/05/2022 Added statements for Audit logging 
-- Leo Tracchia		12/06/2022 Added fix for auditing logic
-- Stephen Long     12/09/2022 Added EIDSSObjectID parameter to to samples, tests and test 
--                             interpretations calls.
-- Doug Albanese    12/23/2022 Corrected the overwriting of @idfNewHuman with @HumanID for new 
--                             Sample Inserts
-- Stephen Long     03/20/2023 Changed to data audit call with strMainObject.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HAS_MONITORING_SESSION_SET]
(
    @LanguageID NVARCHAR(50),
    @MonitoringSessionID BIGINT = NULL,
    @MonitoringSessionStatusTypeID BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @EnteredByPersonID BIGINT = NULL,
    @CampaignID BIGINT = NULL,
    @SiteID BIGINT,
    @EIDSSSessionID NVARCHAR(50) = NULL,
    @StartDate DATETIME = NULL,
    @EndDate DATETIME = NULL,
    @SessionCategoryTypeID BIGINT = NULL,
    @RowStatus INT,
    @CreateDiseaseReportHumanID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @DiseaseCombinations NVARCHAR(MAX),
    @SampleTypeCombinations NVARCHAR(MAX),
    @Samples NVARCHAR(MAX),
    @SamplesToDiseases NVARCHAR(MAX) = NULL,
    @Tests NVARCHAR(MAX),
    @Actions NVARCHAR(MAX),
    @Events NVARCHAR(MAX) = NULL,
    @UserId BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @NewHumanID BIGINT = NULL,
                @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL;

        /* Get an 'On-The-Fly' translation for the word "New". To be used, to replace the "New" indicator on Samples / Tests.*/
        DECLARE @Translated_New NVARCHAR(50);

        DECLARE @ExecReturn TABLE
        (
            strDefault NVARCHAR(200),
            name NVARCHAR(200),
            LongName NVARCHAR(200)
        );

        INSERT INTO @ExecReturn
        EXEC dbo.USP_GBL_BaseReferenceTranslation_Get @LanguageId = 'en-us',
                                                      @idfsBaseReference = 10140000;

        SELECT @Translated_New = [name]
        FROM @ExecReturn;
        /*End 'On-The-Fly' translation.*/

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage VARCHAR(200)
        );

        DECLARE @CampaignName NVARCHAR(50);
        DECLARE @CampaignTypeID BIGINT = NULL;
        DECLARE @CampaignStartDate DATETIME = NULL;
        DECLARE @CampaignEndDate DATETIME = NULL;

        IF @CampaignID IS NOT NULL
        BEGIN
            SELECT @CampaignTypeID = idfsCampaignType,
                   @CampaignName = strCampaignname,
                   @CampaignStartDate = datCampaignDateStart,
                   @CampaignEndDate = datCampaignDateEnd
            FROM dbo.tlbCampaign
            WHERE idfCampaign = @CampaignID;
        END

        DECLARE @RowID BIGINT = NULL,
                @RowAction NCHAR = NULL,
                @MonitoringSessionToDiseaseID BIGINT,
                @MonitoringSessionToSampleTypeID BIGINT,
                @OrderNumber INT,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @HumanID BIGINT,
                @HumanMasterID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @AccessionDate DATETIME = NULL,
                @AccessionConditionTypeID BIGINT = NULL,
                @AccessionComment NVARCHAR(200) = NULL,
                @AccessionByPersonID BIGINT = NULL,
                --,@CurrentSiteID BIGINT = NULL
                @TestID BIGINT,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @TestNumber INT = NULL,
                @StartedDate DATETIME2 = NULL,
                @ResultDate DATETIME2 = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME2 = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestMonitoringSessionID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @MonitoringSessionActionID BIGINT,
                @ActionTypeID BIGINT,
                @ActionStatusTypeID BIGINT,
                @ActionDate DATETIME = NULL,
                @Comments NVARCHAR(500) = NULL,
                @DiseaseID BIGINT,
                @idfMonitoringSessionToDiagnosis BIGINT,
                @DateEntered DATETIME = GETDATE(),
                @idfHumanCase_Test BIGINT = NULL,
                @MonitoringSessionToMaterialID BIGINT = NULL;

        DECLARE @DiseaseCombinationsTemp TABLE
        (
            MonitoringSessionToDiseaseID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            OrderNumber INT NOT NULL,
            SampleTypeID BIGINT NULL,
            Comments NVARCHAR(MAX),
            RowStatus INT NOT NULL,
            RowAction CHAR(1)
        );

        DECLARE @SampleTypeCombinationsTemp TABLE
        (
            MonitoringSessionToSampleTypeID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            OrderNumber INT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1)
        );

        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME2 NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME2 NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            --,CurrentSiteID BIGINT NULL
            DiseaseID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            HumanID BIGINT NULL,
            HumanMasterID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @SamplesToDiseasesTemp TABLE
        (
            MonitoringSessionToMaterialID BIGINT NOT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );

        DECLARE @TestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME2 NULL,
            ResultDate DATETIME2 NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME2 NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @ActionsTemp TABLE
        (
            MonitoringSessionActionID BIGINT NOT NULL,
            EnteredByPersonID BIGINT NULL,
            ActionTypeID BIGINT NULL,
            ActionStatusTypeID BIGINT NULL,
            ActionDate DATETIME2 NULL,
            Comments NVARCHAR(500) NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL
        );

        --Data Audit--

        DECLARE @idfUserId BIGINT = NULL;
        DECLARE @idfSiteId BIGINT = NULL;
        DECLARE @idfsDataAuditEventType bigint = NULL;
        DECLARE @idfsObjectType bigint = 10017063; --select * from trtBaseReference where idfsBaseReference = 10017063
        DECLARE @idfObject bigint = @MonitoringSessionID;
        DECLARE @idfObjectTable_tlbMonitoringSession bigint = 707040000000;
        DECLARE @idfObjectTable_tlbCampaign bigint = 706900000000;
        DECLARE @idfDataAuditEvent bigint = NULL;

        DECLARE @tlbMonitoringSession_BeforeEdit TABLE
        (
            idfMonitoringSession bigint,
            idfsMonitoringSessionStatus bigint,
            idfsLocation bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            AuditUpdateUser nvarchar(200)
        );

        DECLARE @tlbMonitoringSession_AfterEdit TABLE
        (
            idfMonitoringSession bigint,
            idfsMonitoringSessionStatus bigint,
            idfsLocation bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            AuditUpdateUser nvarchar(200)
        );

        DECLARE @tlbCampaign_BeforeEdit TABLE
        (
            idfCampaign bigint,
            strCampaignName nvarchar(200),
            idfsCampaignType bigint,
            datCampaignDateStart datetime,
            datCampaignDateEnd datetime
        );

        DECLARE @tlbCampaign_AfterEdit TABLE
        (
            idfCampaign bigint,
            strCampaignName nvarchar(200),
            idfsCampaignType bigint,
            datCampaignDateStart datetime,
            datCampaignDateEnd datetime
        );

        --Data Audit--

        --BEGIN TRANSACTION;

        SET @DiseaseCombinations = REPLACE(@DiseaseCombinations, '"0001-01-01T00:00:00"', 'null');

        INSERT INTO @DiseaseCombinationsTemp
        SELECT *
        FROM
            OPENJSON(@DiseaseCombinations)
            WITH
            (
                MonitoringSessionToDiseaseID BIGINT,
                DiseaseID BIGINT,
                OrderNumber INT,
                SampleTypeID BIGINT,
                Comments NVARCHAR(MAX),
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @SampleTypeCombinations = REPLACE(@SampleTypeCombinations, '"0001-01-01T00:00:00"', 'null');

        INSERT INTO @SampleTypeCombinationsTemp
        SELECT *
        FROM
            OPENJSON(@SampleTypeCombinations)
            WITH
            (
                MonitoringSessionToSampleTypeID BIGINT,
                SampleTypeID BIGINT,
                OrderNumber INT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @Samples = REPLACE(@Samples, '"0001-01-01T00:00:00"', 'null');

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                --,CurrentSiteID BIGINT
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @SamplesToDiseasesTemp
        SELECT *
        FROM
            OPENJSON(@SamplesToDiseases)
            WITH
            (
                MonitoringSessionToMaterialID BIGINT,
                MonitoringSessionID BIGINT,
                SampleID BIGINT,
                SampleTypeID BIGINT,
                DiseaseID BIGINT,
                RowStatus INT,
                RowAction INT
            );

        SET @Tests = REPLACE(@Tests, '"0001-01-01T00:00:00"', 'null');

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@Tests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );


        SET @Actions = REPLACE(@Actions, '"0001-01-01T00:00:00"', 'null');

        INSERT INTO @ActionsTemp
        SELECT *
        FROM
            OPENJSON(@Actions)
            WITH
            (
                MonitoringSessionActionID BIGINT,
                EnteredByPersonID BIGINT,
                ActionTypeID BIGINT,
                ActionStatusTypeID BIGINT,
                ActionDate DATETIME2,
                Comments NVARCHAR(500),
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        --Data Audit--
        -- Get and Set UserId and SiteId
        --SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@UserId) userInfo

        SELECT @idfUserId = tu.idfUserID,
               @idfSiteId = tu.idfsSite
        FROM dbo.AspNetUsers u
            INNER JOIN dbo.tstUserTable tu
                on u.idfUserID = tu.idfUserID
        WHERE u.idfUserID = @UserId;

        --Data Audit--

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID
        )
        BEGIN

            --  tauDataAuditEvent  Event Type - Edit 
            SET @idfsDataAuditEventType = 10016003;

            -- insert record into tauDataAuditEvent - 
            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @idfUserId,
                                                   @idfSiteId,
                                                   @idfsDataAuditEventType,
                                                   @idfsObjectType,
                                                   @idfObject,
                                                   @idfObjectTable_tlbMonitoringSession,
                                                   @EIDSSSessionID,
                                                   @idfDataAuditEvent OUTPUT;

            INSERT INTO @tlbMonitoringSession_BeforeEdit
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                AuditUpdateUser
            )
            SELECT idfMonitoringSession,
                   idfsMonitoringSessionStatus,
                   idfsLocation,
                   idfPersonEnteredBy,
                   idfCampaign,
                   idfsSite,
                   datEnteredDate,
                   datStartDate,
                   datEndDate,
                   SessionCategoryID,
                   AuditUpdateUser
            FROM tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID;

            UPDATE dbo.tlbMonitoringSession
            SET idfsMonitoringSessionStatus = @MonitoringSessionStatusTypeID,
                idfsLocation = @idfsLocation,
                idfPersonEnteredBy = @EnteredByPersonID,
                idfCampaign = @CampaignID,
                idfsSite = @SiteID,
                datEnteredDate = GETDATE(),
                datStartDate = @StartDate,
                datEndDate = @EndDate,
                SessionCategoryID = @SessionCategoryTypeID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfMonitoringSession = @MonitoringSessionID;

            INSERT INTO @tlbMonitoringSession_AfterEdit
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                AuditUpdateUser
            )
            SELECT idfMonitoringSession,
                   idfsMonitoringSessionStatus,
                   idfsLocation,
                   idfPersonEnteredBy,
                   idfCampaign,
                   idfsSite,
                   datEnteredDate,
                   datStartDate,
                   datEndDate,
                   SessionCategoryID,
                   AuditUpdateUser
            FROM tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID;

            --idfsMonitoringSessionStatus
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707060000000,
                   a.idfMonitoringSession,
                   null,
                   a.idfsMonitoringSessionStatus,
                   b.idfsMonitoringSessionStatus
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.idfsMonitoringSessionStatus <> b.idfsMonitoringSessionStatus)
                  or (
                         a.idfsMonitoringSessionStatus is not null
                         and b.idfsMonitoringSessionStatus is null
                     )
                  or (
                         a.idfsMonitoringSessionStatus is null
                         and b.idfsMonitoringSessionStatus is not null
                     );

            --idfPersonEnteredBy
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707110000000,
                   a.idfMonitoringSession,
                   null,
                   a.idfPersonEnteredBy,
                   b.idfPersonEnteredBy
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.idfPersonEnteredBy <> b.idfPersonEnteredBy)
                  or (
                         a.idfPersonEnteredBy is not null
                         and b.idfPersonEnteredBy is null
                     )
                  or (
                         a.idfPersonEnteredBy is null
                         and b.idfPersonEnteredBy is not null
                     );

            --idfCampaign
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707120000000,
                   a.idfMonitoringSession,
                   null,
                   a.idfCampaign,
                   b.idfCampaign
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.idfCampaign <> b.idfCampaign)
                  or (
                         a.idfCampaign is not null
                         and b.idfCampaign is null
                     )
                  or (
                         a.idfCampaign is null
                         and b.idfCampaign is not null
                     );

            --datEnteredDate
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707130000000,
                   a.idfMonitoringSession,
                   null,
                   a.datEnteredDate,
                   b.datEnteredDate
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.datEnteredDate <> b.datEnteredDate)
                  or (
                         a.datEnteredDate is not null
                         and b.datEnteredDate is null
                     )
                  or (
                         a.datEnteredDate is null
                         and b.datEnteredDate is not null
                     );

            --datStartDate
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   4578670000000,
                   a.idfMonitoringSession,
                   null,
                   a.datStartDate,
                   b.datStartDate
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.datStartDate <> b.datStartDate)
                  or (
                         a.datStartDate is not null
                         and b.datStartDate is null
                     )
                  or (
                         a.datStartDate is null
                         and b.datStartDate is not null
                     );

            --datEndDate
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   4578680000000,
                   a.idfMonitoringSession,
                   null,
                   a.datEndDate,
                   b.datEndDate
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.datEndDate <> b.datEndDate)
                  or (
                         a.datEndDate is not null
                         and b.datEndDate is null
                     )
                  or (
                         a.datEndDate is null
                         and b.datEndDate is not null
                     );

            INSERT INTO @tlbCampaign_BeforeEdit
            (
                idfCampaign,
                strCampaignName,
                idfsCampaignType,
                datCampaignDateStart,
                datCampaignDateEnd
            )
            SELECT idfCampaign,
                   strCampaignName,
                   idfsCampaignType,
                   datCampaignDateStart,
                   datCampaignDateEnd
            FROM tlbCampaign
            WHERE idfCampaign = @CampaignID;

            UPDATE dbo.tlbCampaign
            SET strCampaignName = @CampaignName,
                idfsCampaignType = @CampaignTypeID,
                datCampaignDateStart = @CampaignStartDate,
                datCampaignDateEnd = @CampaignEndDate
            WHERE idfCampaign = @CampaignID;

            INSERT INTO @tlbCampaign_AfterEdit
            (
                idfCampaign,
                strCampaignName,
                idfsCampaignType,
                datCampaignDateStart,
                datCampaignDateEnd
            )
            SELECT idfCampaign,
                   strCampaignName,
                   idfsCampaignType,
                   datCampaignDateStart,
                   datCampaignDateEnd
            FROM tlbCampaign
            WHERE idfCampaign = @CampaignID;

            --strCampaignName
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706970000000,
                   a.idfCampaign,
                   null,
                   a.strCampaignName,
                   b.strCampaignName
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.strCampaignName <> b.strCampaignName)
                  or (
                         a.strCampaignName is not null
                         and b.strCampaignName is null
                     )
                  or (
                         a.strCampaignName is null
                         and b.strCampaignName is not null
                     );

            --idfsCampaignType
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706920000000,
                   a.idfCampaign,
                   null,
                   a.idfsCampaignType,
                   b.idfsCampaignType
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.idfsCampaignType <> b.idfsCampaignType)
                  or (
                         a.idfsCampaignType is not null
                         and b.idfsCampaignType is null
                     )
                  or (
                         a.idfsCampaignType is null
                         and b.idfsCampaignType is not null
                     );

            --datCampaignDateStart
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706940000000,
                   a.idfCampaign,
                   null,
                   a.datCampaignDateStart,
                   b.datCampaignDateStart
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.datCampaignDateStart <> b.datCampaignDateStart)
                  or (
                         a.datCampaignDateStart is not null
                         and b.datCampaignDateStart is null
                     )
                  or (
                         a.datCampaignDateStart is null
                         and b.datCampaignDateStart is not null
                     );

            --datCampaignDateEnd
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706950000000,
                   a.idfCampaign,
                   null,
                   a.datCampaignDateEnd,
                   b.datCampaignDateEnd
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.datCampaignDateEnd <> b.datCampaignDateEnd)
                  or (
                         a.datCampaignDateEnd is not null
                         and b.datCampaignDateEnd is null
                     )
                  or (
                         a.datCampaignDateEnd is null
                         and b.datCampaignDateEnd is not null
                     );

            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;
        END
        ELSE
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSession',
                                              @MonitoringSessionID OUTPUT;

            EXECUTE dbo.USP_GBL_NextNumber_GET 'Human Active Surveillance Session',
                                               @EIDSSSessionID OUTPUT,
                                               NULL;

            INSERT INTO dbo.tlbMonitoringSession
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                strMonitoringSessionID,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                intRowStatus,
                AuditCreateUser
            )
            VALUES
            (@MonitoringSessionID,
             @MonitoringSessionStatusTypeID,
             @idfsLocation,
             @EnteredByPersonID,
             @CampaignID,
             @SiteID,
             GETDATE(),
             @EIDSSSessionID,
             @StartDate,
             @EndDate,
             @SessionCategoryTypeID,
             0  ,
             @AuditUserName
            );

            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;

            --Data Audit--

            -- tauDataAuditEvent Event Type - Create 
            set @idfsDataAuditEventType = 10016001;

            -- insert record into tauDataAuditEvent - 
            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @idfUserId,
                                                   @idfSiteId,
                                                   @idfsDataAuditEventType,
                                                   @idfsObjectType,
                                                   @idfObject,
                                                   @idfObjectTable_tlbMonitoringSession,
                                                   @EIDSSSessionID,
                                                   @idfDataAuditEvent OUTPUT;

            INSERT INTO tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject
            )
            VALUES
            (@idfDataAuditEvent, @idfObjectTable_tlbMonitoringSession, @MonitoringSessionID);

        --Data Audit--
        END

        WHILE EXISTS (SELECT * FROM @DiseaseCombinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToDiseaseID,
                @DiseaseID = DiseaseID,
                @SampleTypeID = SampleTypeID,
                @OrderNumber = OrderNumber,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @DiseaseCombinationsTemp;

            SET @idfMonitoringSessionToDiagnosis = @RowID;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MonitoringSessionToDiagnosis_SET @LanguageID,
                                                                  @idfDataAuditEvent,
                                                                  @idfMonitoringSessionToDiagnosis OUTPUT,
                                                                  @MonitoringSessionID,
                                                                  @DiseaseID,
                                                                  @OrderNumber,
                                                                  NULL,
                                                                  @SampleTypeID,
                                                                  @Comments,
                                                                  @AuditUserName,
                                                                  @RowAction;

            DELETE FROM @DiseaseCombinationsTemp
            WHERE MonitoringSessionToDiseaseID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SampleTypeCombinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToSampleTypeID,
                @MonitoringSessionToSampleTypeID = MonitoringSessionToSampleTypeID,
                @OrderNumber = OrderNumber,
                @RowStatus = RowStatus,
                @SampleTypeID = SampleTypeID,
                @RowAction = RowAction
            FROM @SampleTypeCombinationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_SET @LanguageID,
                                                                       @idfDataAuditEvent,
                                                                       @MonitoringSessionToSampleTypeID,
                                                                       @MonitoringSessionID,
                                                                       @OrderNumber,
                                                                       @RowStatus,
                                                                       @SampleTypeID,
                                                                       @RowAction,
                                                                       @AuditUserName;

            DELETE FROM @SampleTypeCombinationsTemp
            WHERE MonitoringSessionToSampleTypeID = @RowID;
        END;


        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CAST(CollectionDate AS DATETIME),
                @SentDate = CAST(SentDate AS DATETIME),
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @Comments = Comments,
                @SiteID = SiteID,
                --,@CurrentSiteID = CurrentSiteID
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @DiseaseID = DiseaseID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @HumanID = HumanID,
                @HumanMasterID = HumanMasterID,
                @RowAction = RowAction
            FROM @SamplesTemp;

            SET @EIDSSLocalOrFieldSampleID
                = REPLACE(@EIDSSLocalOrFieldSampleID, @Translated_New + '-', @EIDSSSessionID + '-');

            IF @RowAction = 'I'
            BEGIN
                DECLARE @idfNewHuman BIGINT = NULL;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_HUM_COPY_HUMAN_SET @HumanMasterID,
                                                    @idfDataAuditEvent,
                                                    @AuditUserName,
                                                    @idfNewHuman OUTPUT,
                                                    @ReturnCode OUTPUT,
                                                    @ReturnMessage OUTPUT;

                SELECT @HumanID = @idfNewHuman;
            END;

            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName = @AuditUserName,
                                             @DataAuditEventID = @idfDataAuditEvent,
                                             @EIDSSObjectID = @EIDSSSessionID,
                                             @SampleID = @SampleID OUTPUT,
                                             @SampleTypeID = @SampleTypeID,
                                             @RootSampleID = NULL,
                                             @ParentSampleID = NULL,
                                             @HumanID = @HumanID,
                                             @SpeciesID = NULL,
                                             @AnimalID = NULL,
                                             @VectorID = NULL,
                                             @MonitoringSessionID = @MonitoringSessionID,
                                             @VectorSessionID = NULL,
                                             @HumanDiseaseReportID = NULL,
                                             @VeterinaryDiseaseReportID = NULL,
                                             @CollectionDate = @CollectionDate,
                                             @CollectedByPersonID = @CollectedByPersonID,
                                             @CollectedByOrganizationID = @CollectedByOrganizationID,
                                             @SentDate = @SentDate,
                                             @SentToOrganizationID = @SentToOrganizationID,
                                             @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                             @SiteID = @SiteID,
                                             @EnteredDate = @DateEntered,
                                             @ReadOnlyIndicator = @ReadOnlyIndicator,
                                             @SampleStatusTypeID = @SampleStatusTypeID,
                                             @Comments = @Comments,
                                             @CurrentSiteID = NULL,
                                             @DiseaseID = @DiseaseID,
                                             @BirdStatusTypeID = NULL,
                                             @RowStatus = @RowStatus,
                                             @RowAction = @RowAction;

            UPDATE @SamplesToDiseasesTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;

            DELETE FROM dbo.tlbMonitoringSessionToMaterial
            WHERE idfMaterial = @SampleID;
        END;

        WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToMaterialID,
                @MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @DiseaseID = DiseaseID,
                @RowAction = RowAction,
                @RowStatus = RowStatus
            FROM @SamplesToDiseasesTemp;

            --insert or update the diseases for this sample
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                      @idfDataAuditEvent,
                                                      @MonitoringSessionToMaterialID,
                                                      @MonitoringSessionID,
                                                      @SampleID,
                                                      @DiseaseID,
                                                      @SampleTypeID,
                                                      @RowStatus,
                                                      @RowAction;

            DELETE FROM @SamplesToDiseasesTemp
            WHERE MonitoringSessionToMaterialID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @TestsTemp;

            SELECT @idfHumanCase_Test = idfHumanCase
            FROM tlbTesting
            WHERE idfTesting = @TestID

            SET @EIDSSLocalOrFieldSampleID
                = REPLACE(@EIDSSLocalOrFieldSampleID, @Translated_New + '-', @EIDSSSessionID + '-');

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --human monitoring session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 1
            BEGIN
                SET @RowStatus = 0;
                SET @TestMonitoringSessionID = NULL;
            END
            ELSE
            BEGIN
                SET @TestMonitoringSessionID = @MonitoringSessionID;
            END;


            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET @TestID OUTPUT,
                                           @TestNameTypeID,
                                           @TestCategoryTypeID,
                                           @TestResultTypeID,
                                           @TestStatusTypeID,
                                           @DiseaseID,
                                           @SampleID,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @Comments,
                                           @RowStatus,
                                           @StartedDate,
                                           @ResultDate,
                                           @TestedByOrganizationID,
                                           @TestedByPersonID,
                                           @ResultEnteredByOrganizationID,
                                           @ResultEnteredByPersonID,
                                           @ValidatedByOrganizationID,
                                           @ValidatedByPersonID,
                                           @ReadOnlyIndicator,
                                           @NonLaboratoryTestIndicator,
                                           @ExternalTestIndicator,
                                           @PerformedByOrganizationID,
                                           @ReceivedDate,
                                           @ContactPersonName,
                                           @TestMonitoringSessionID,
                                           NULL,
                                           @idfHumanCase_Test,
                                           NULL,
                                           @AuditUserName,
                                           @idfDataAuditEvent,
                                           @EIDSSSessionID,
                                           @RowAction;

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @ActionsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionActionID,
                @MonitoringSessionActionID = MonitoringSessionActionID,
                @EnteredByPersonID = EnteredByPersonID,
                @ActionTypeID = ActionTypeID,
                @ActionStatusTypeID = ActionStatusTypeID,
                @ActionDate = ActionDate,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActionsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MONITORING_SESSION_ACTION_SET @LanguageID,
                                                               @idfDataAuditEvent,
                                                               @MonitoringSessionActionID OUTPUT,
                                                               @MonitoringSessionID,
                                                               @EnteredByPersonID,
                                                               @ActionTypeID,
                                                               @ActionStatusTypeID,
                                                               @ActionDate,
                                                               @Comments,
                                                               @RowStatus,
                                                               @RowAction,
                                                               @AuditUserName;

            DELETE FROM @ActionsTemp
            WHERE MonitoringSessionActionID = @RowID;
        END;


        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        DECLARE @HumanDiseaseReportID BIGINT = NULL;
        DECLARE @EIDSSReportID NVARCHAR(200) = NULL;

        IF (@CreateDiseaseReportHumanID IS NOT NULL)
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbHumanCase',
                                              @HumanDiseaseReportID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Human Disease Report',
                                               @EIDSSReportID OUTPUT,
                                               NULL;

            DECLARE @PersonID NVARCHAR(50) = NULL;
            DECLARE @Name NVARCHAR(200) = NULL;

            INSERT INTO dbo.tlbHumanCase
            (
                idfHumanCase,
                strCaseID,
                idfHuman,
                idfParentMonitoringSession,
                idfsFinalDiagnosis,
                idfsSite,
                idfsCaseProgressStatus,
                idfsInitialCaseStatus,
                idfsFinalCaseStatus,
                DiseaseReportTypeID,
                idfPersonEnteredBy,
                idfsYNSpecimenCollected,
                idfsYNTestsConducted,
                datEnteredDate
            )
            VALUES
            (   @HumanDiseaseReportID,
                @EIDSSReportID,
                @CreateDiseaseReportHumanID,
                @MonitoringSessionID,
                NULL, --@DiseaseID
                @SiteID,
                10109001,
                NULL,
                NULL,
                4578940000001,
                @EnteredByPersonID,
                10100001,
                10100001,
                GETDATE()
            );

            UPDATE dbo.tlbMaterial
            SET idfHumanCase = @HumanDiseaseReportID
            WHERE idfMonitoringSession = @MonitoringSessionID
                  AND idfHuman = @CreateDiseaseReportHumanID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH

    SELECT @ReturnCode AS ReturnCode,
           @ReturnMessage AS ReturnMessage,
           @MonitoringSessionID AS MonitoringSessionID,
           @EIDSSSessionID AS EIDSSSessionID,
           @HumanDiseaseReportID AS HumanDiseaseReportID;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ILI_Aggregate_Set]...';


GO
-- ================================================================================================
-- Name: USP_ILI_Aggregate_Set
--
-- Description: Insert and update for ILI aggregate forms.
--          
-- Author: Arnold Kennedy
--
-- Revision History:
-- Name                    Date       Change Detail
-- ----------------------- ---------- ------------------------------------------------------------
-- Lamont Mitchell         07/13/2019 Udated to include FormId
-- Ann Xiong               02/28/2020 Modified to save a list of rows instead of one single row to 
--                                    table tlbBasicSyndromicSurveillanceAggregateDetail 
-- Leo Tracchia            03/13/2022 Altered logic for better handling of updates
-- Stephen Long            07/12/2022 Added events parameter and site alert logic.
-- Stephen Long            12/01/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long            03/06/2023 Fix to use correct object type on data audit.
-- Stephen Long            03/09/2023 Moved data event audit call after EIDSS ID is obtained.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ILI_Aggregate_Set]
(
    @idfAggregateHeader BIGINT = -1,
    @idfEnteredBy BIGINT,
    @idfsSite BIGINT,
    @intYear INT,
    @intWeek INT,
    @datStartDate DATETIME,
    @datFinishDate DATETIME,
    @strFormId VARCHAR(MAX) = NULL,
    @RowStatus INT,
    @AuditUserName NVARCHAR(200),
    @ILITables NVARCHAR(MAX),
    @Events NVARCHAR(MAX) = NULL
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @EventID BIGINT,
            @EventTypeID BIGINT = NULL,
            @EventSiteID BIGINT = NULL,
            @EventObjectID BIGINT = NULL,
            @EventUserID BIGINT = NULL,
            @EventDiseaseID BIGINT = NULL,
            @EventLocationID BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteID BIGINT = NULL,
                                                    -- Data audit
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @DataAuditEventID BIGINT = NULL,
            @DataAuditEventTypeID BIGINT = NULL,
            @ObjectTypeID BIGINT = 10017075,        -- ILI aggregate
            @ObjectID BIGINT = @idfAggregateHeader,
            @ObjectTableID BIGINT = 50791690000000; -- tlbBasicSyndromicSurveillanceAggregateHeader
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @idfHospital BIGINT,
            @idfAggregateDetail BIGINT,
            @intAge0_4 INT = NULL,
            @intAge5_14 INT = NULL,
            @intAge15_29 INT = NULL,
            @intAge30_64 INT = NULL,
            @intAge65 INT = NULL,
            @inTotalILI INT = NULL,
            @intTotalAdmissions INT = NULL,
            @intILISamples INT = NULL,
            @RowID BIGINT = NULL,
            @RowAction CHAR(1) = NULL;
    DECLARE @ILITablesTemp TABLE
    (
        idfAggregateDetail BIGINT NOT NULL,
        idfHospital BIGINT NULL,
        intAge0_4 INT,
        intAge5_14 INT,
        intAge15_29 INT,
        intAge30_64 INT,
        intAge65 INT,
        inTotalILI INT,
        intTotalAdmissions INT,
        intILISamples INT,
        RowStatus INT NULL,
        RowAction CHAR(1) NULL,
        RowId BIGINT
    );
    DECLARE @ILIAggregateHeaderBeforeEdit TABLE
    (
        AggregateHeaderID BIGINT,
        FormID NVARCHAR(200),
        DateEntered DATETIME,
        DateLastSaved DATETIME,
        EnteredByID BIGINT,
        YearValue INT,
        WeekValue INT,
        StartDate DATETIME,
        FinishDate DATETIME
    );
    DECLARE @ILIAggregateHeaderAfterEdit TABLE
    (
        AggregateHeaderID BIGINT,
        FormID NVARCHAR(200),
        DateEntered DATETIME,
        DateLastSaved DATETIME,
        EnteredByID BIGINT,
        YearValue INT,
        WeekValue INT,
        StartDate DATETIME,
        FinishDate DATETIME
    );
    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );

    BEGIN TRY
        BEGIN TRANSACTION

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        INSERT INTO @ILITablesTemp
        SELECT *
        FROM
            OPENJSON(@ILITables)
            WITH
            (
                IdfAggregateDetail BIGINT,
                IdfHospital BIGINT,
                IntAge0_4 INT,
                IntAge5_14 INT,
                IntAge15_29 INT,
                IntAge30_64 INT,
                IntAge65 INT,
                InTotalILI INT,
                IntTotalAdmissions INT,
                IntILISamples INT,
                RowStatus INT,
                RowAction CHAR(1),
                RowId BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        -- Update the header if this is an edit
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            WHERE idfAggregateHeader = @idfAggregateHeader
        )
        BEGIN
            -- Data audit
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @idfAggregateHeader,
                                                      @ObjectTableID,
                                                      @strFormID, 
                                                      @DataAuditEventID OUTPUT;

            INSERT INTO @ILIAggregateHeaderBeforeEdit
            (
                AggregateHeaderID,
                FormID,
                DateEntered,
                DateLastSaved,
                EnteredByID,
                YearValue,
                WeekValue,
                StartDate,
                FinishDate
            )
            SELECT idfAggregateHeader,
                   strFormID,
                   datDateEntered,
                   datDateLastSaved,
                   idfEnteredBy,
                   intYear,
                   intWeek,
                   datStartDate,
                   datFinishDate
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            WHERE idfAggregateHeader = @idfAggregateHeader;
            -- End data audit

            UPDATE dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            SET intYear = @intYear,
                intWeek = @intWeek,
                datStartDate = @datStartDate,
                datFinishDate = @datFinishDate,
                datDateLastSaved = GETDATE(),
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfAggregateHeader = @idfAggregateHeader;

            -- Data audit
            INSERT INTO @ILIAggregateHeaderAfterEdit
            (
                AggregateHeaderID,
                FormID,
                DateEntered,
                DateLastSaved,
                EnteredByID,
                YearValue,
                WeekValue,
                StartDate,
                FinishDate
            )
            SELECT idfAggregateHeader,
                   strFormID,
                   datDateEntered,
                   datDateLastSaved,
                   idfEnteredBy,
                   intYear,
                   intWeek,
                   datStartDate,
                   datFinishDate
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            WHERE idfAggregateHeader = @idfAggregateHeader;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791710000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.FormID,
                   a.FormID,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.FormID <> b.FormID)
                  OR (
                         a.FormID IS NOT NULL
                         AND b.FormID IS NULL
                     )
                  OR (
                         a.FormID IS NULL
                         AND b.FormID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791720000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.DateEntered,
                   a.DateEntered, 
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.DateEntered <> b.DateEntered)
                  OR (
                         a.DateEntered IS NOT NULL
                         AND b.DateEntered IS NULL
                     )
                  OR (
                         a.DateEntered IS NULL
                         AND b.DateEntered IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791730000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.DateLastSaved,
                   a.DateLastSaved,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.DateLastSaved <> b.DateLastSaved)
                  OR (
                         a.DateLastSaved IS NOT NULL
                         AND b.DateLastSaved IS NULL
                     )
                  OR (
                         a.DateLastSaved IS NULL
                         AND b.DateLastSaved IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791740000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.EnteredByID,
                   a.EnteredByID,
                   a.FormID 
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.EnteredByID <> b.EnteredByID)
                  OR (
                         a.EnteredByID IS NOT NULL
                         AND b.EnteredByID IS NULL
                     )
                  OR (
                         a.EnteredByID IS NULL
                         AND b.EnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791750000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.YearValue,
                   a.YearValue,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.YearValue <> b.YearValue)
                  OR (
                         a.YearValue IS NOT NULL
                         AND b.YearValue IS NULL
                     )
                  OR (
                         a.YearValue IS NULL
                         AND b.YearValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791760000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.WeekValue,
                   a.WeekValue,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.WeekValue <> b.WeekValue)
                  OR (
                         a.WeekValue IS NOT NULL
                         AND b.WeekValue IS NULL
                     )
                  OR (
                         a.WeekValue IS NULL
                         AND b.WeekValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791770000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.StartDate,
                   a.StartDate,
                   a.FormID 
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.StartDate <> b.StartDate)
                  OR (
                         a.StartDate IS NOT NULL
                         AND b.StartDate IS NULL
                     )
                  OR (
                         a.StartDate IS NULL
                         AND b.StartDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791780000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.FinishDate,
                   a.FinishDate,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.FinishDate <> b.FinishDate)
                  OR (
                         a.FinishDate IS NOT NULL
                         AND b.FinishDate IS NULL
                     )
                  OR (
                         a.FinishDate IS NULL
                         AND b.FinishDate IS NOT NULL
                     );
        -- End data audit
        END
        ELSE
        BEGIN
            -- Get new PK for insert
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbBasicSyndromicSurveillanceAggregateHeader',
                                               @idfAggregateHeader OUTPUT;
            END

            -- Get New Smartkey
            IF ISNULL(@strFormID, N'') = N''
               OR LEFT(ISNULL(@strFormID, N''), 4) = '(new'
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Basic Syndromic Surveillance Aggregate Form',
                                                @strFormID OUTPUT,
                                                NULL;
            END

            -- Data audit
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @idfAggregateHeader,
                                                      @ObjectTableID,
                                                      @strFormID, 
                                                      @DataAuditEventID OUTPUT;
            -- End data audit
			Declare @getDate DateTime = GETDATE();
            INSERT INTO dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            (
                idfAggregateHeader,
                strFormID,
                datDateEntered,
                datDateLastSaved,
                idfEnteredBy,
                idfsSite,
                intYear,
                intWeek,
                datStartDate,
                datFinishDate,
                datModificationForArchiveDate,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (   @idfAggregateHeader,
                @strFormID,
                @getDate,
                @getDate,
                @idfEnteredBy,
                @idfsSite,
                @intYear,
                @intWeek,
                @datStartDate,
                @datFinishDate,
                @getDate,
                'system',
                'V7 ILI Syndromic Surveillance Aggregate Form',
                10519001, -- EIDSS7
                '[{"idfAggregateHeader":' + CAST(@idfAggregateHeader AS NVARCHAR(300)) + '}]',
                GETDATE(),
                @AuditUserName
            );

            UPDATE @EventsTemp
            SET ObjectId = @idfAggregateHeader
            WHERE ObjectId = 0;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @idfAggregateHeader,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             @strFormID
            );
        -- End data audit
        END

        WHILE EXISTS (SELECT * FROM @ILITablesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = RowId,
                @idfAggregateDetail = idfAggregateDetail,
                @RowStatus = RowStatus,
                @idfHospital = idfHospital,
                @intAge0_4 = intAge0_4,
                @intAge5_14 = intAge5_14,
                @intAge15_29 = intAge15_29,
                @intAge30_64 = intAge30_64,
                @intAge65 = intAge65,
                @inTotalILI = inTotalILI,
                @intTotalAdmissions = intTotalAdmissions,
                @intILISamples = intILISamples,
                @RowAction = RowAction
            FROM @ILITablesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ILI_Aggregate_Detail_SET @idfAggregateDetail,
                                                     @idfAggregateHeader,
                                                     @RowStatus,
                                                     @idfHospital,
                                                     @intAge0_4,
                                                     @intAge5_14,
                                                     @intAge15_29,
                                                     @intAge30_64,
                                                     @intAge65,
                                                     @inTotalILI,
                                                     @intTotalAdmissions,
                                                     @intILISamples,
                                                     @AuditUserName,
                                                     @DataAuditEventID, 
                                                     @strFormID, 
                                                     @RowAction;

            DELETE FROM @ILITablesTemp
            WHERE RowId = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventID = EventId,
                @EventTypeID = EventTypeId,
                @EventUserID = UserId,
                @EventObjectID = ObjectId,
                @EventSiteID = SiteId,
                @EventDiseaseID = DiseaseId,
                @EventLocationID = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteID = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventID,
                                             @EventTypeID,
                                             @EventUserID,
                                             @EventObjectID,
                                             @EventDiseaseID,
                                             @EventSiteID,
                                             @EventInformationString,
                                             @EventLoginSiteID,
                                             @EventLocationID,
                                             @AuditUserName, 
                                             @DataAuditEventID, 
                                             @strFormID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
    SELECT @ReturnCode 'ReturnCode',
           @ReturnMessage 'ReturnMessage',
           @strFormID 'strFormID',
           @idfAggregateHeader 'idfAggregateHeader',
           @idfAggregateDetail 'idfAggregateDetail';
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_SET
--
-- Description:	Inserts or updates veterinary "case" for the avian and livestock veterinary disease 
-- report use cases.
--                      
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- -------------------------------------------------------------------
-- Stephen Long    04/02/2018 Initial release.
-- Stephen Long    04/17/2019 Updated for API; use case updates.
-- Stephen Long    04/23/2019 Added updates for herd master and species master if new ones are 
--                            added to the farm during disease report creation.
-- Stephen Long    04/29/2019 Added related to veterinary disease report fields for use case VUC11 
--                            and VUC12.
-- Stephen Long    05/26/2019 Made corrections to farm copy observation ID and species table 
--                            observation ID for flexible form saving.
-- Stephen Long    06/01/2019 Made corrections to JSON for herds and species parameters.
-- Stephen Long    06/10/2019 Added farm owner ID output parameter to USSP_VET_FARM_COPY call.
-- Stephen Long    06/19/2019 Added diagnosis date and tests conducted indicator parameters.
-- Stephen Long    06/22/2019 Added read only indicator parameter for sample set - sample import.
-- Stephen Long    06/24/2019 Update to match new parameter for USSP_VET_FARM_COPY call.
-- Stephen Long    07/26/2019 Corrected farm counts (total, sick and dead).
-- Stephen Long    09/14/2019 Corrected root sample ID/parent sample ID on sample update call.
-- Stephen Long    10/01/2019 Added monitoring session ID parameter to farm copy for the sceanrio 
--                            where a disease report is tied to a monitoring session.
-- Stephen Long    12/23/2019 Added farm latitude and longitude parameters.
-- Stephen Long    02/05/2020 Updated sample set to account for the current site ID when samples 
--                            are imported from the laboratory module.
-- Stephen Long    02/16/2020 Add logic to copy activity parameters, and add observation record for 
--                            connected disease reports.
-- Stephen Long    04/21/2020 Added additional check on clinical signs when related disease report.
-- Stephen Long    04/24/2020 Added clinical signs indicator for the animal set call.
-- Stephen Long    08/12/2020 Corrected status on report log from status type to log status type.
-- Stephen Long    08/25/2020 Added observation ID set for the update of the vet case table.
-- Stephen Long    09/18/2020 Check for null related to observation ID
-- Stephen Long    12/20/2020 Updated USSP_GBL_TEST_SET call with four new parameters.
-- Stephen Long    11/29/2021 Removed language ID and added audit user name to USSP calls.
-- Stephen Long    01/19/2022 Added missing audit user name on ussp calls, and added events.
-- Stephen Long    01/22/2022 Made disease ID nullable on SamplesTemp table variable.
-- Stephen Long    01/24/2022 Added link local or field sample ID to report ID parameter.
-- Stephen Long    01/28/2022 Removed herd actual and species actual, no longer used.
-- Stephen Long    02/18/2022 Added lab module source indicator check on sample set.
-- Stephen Long    03/08/2022 Set notification object ID after saving disease report.
-- Stephen Long    04/12/2022 Added outbreak veterinary case parameters and logic.
-- Stephen Long    04/27/2022 Added additional outbreak case parameters: status type and case 
--                            questionnaire observation ID.
-- Stephen Long    05/09/2022 Bug fix on item 4199 - local/field sample ID iteration.
-- Stephen Long    06/16/2022 Added status type ID to species set.
-- Stephen Long    07/06/2022 Updates for site alerts to call new stored procedure.
-- Stephen Long    09/15/2022 Added note parameter to event set call.  Temporarily removed!
-- Stephen Long    12/07/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long    12/09/2022 Changed object type ID reference for veterinary disease report, 
--                            and added EIDSS object ID to samples, tests and test 
--                            interpretations calls.
-- Stephen Long    12/14/2022 Fix to observation ID when adding a connected disease report; site 
--                            identifier was not picked up from the original record.
-- Stephen Long    12/17/2022 Fix to importing sample when the disease report has not been saved.
-- Stephwn Long    12/19/2022 Added connected disease laboratory test ID to the list of output.
-- Stephen Long    02/03/2023 Changed to data audit call with strMainObject.
-- Stephen Long    03/08/2023 Fix to call data audit set and pass EIDSS report ID.
-- Ann Xiong	   03/09/2023 Added @DataAuditEventID parameter
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_SET]
(
    @DiseaseReportID BIGINT,
    @EIDSSReportID NVARCHAR(200) = NULL,
    @FarmID BIGINT,
    @FarmMasterID BIGINT,
    @FarmOwnerID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @OutbreakID BIGINT = NULL,
    @RelatedToDiseaseReportID BIGINT = NULL,
    @EIDSSFieldAccessionID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT,
    @EnteredByPersonID BIGINT = NULL,
    @ReportedByOrganizationID BIGINT = NULL,
    @ReportedByPersonID BIGINT = NULL,
    @InvestigatedByOrganizationID BIGINT = NULL,
    @InvestigatedByPersonID BIGINT = NULL,
    @ReceivedByOrganizationID BIGINT = NULL,
    @ReceivedByPersonID BIGINT = NULL,
    @SiteID BIGINT,
    @DiagnosisDate DATETIME = NULL,
    @EnteredDate DATETIME = NULL,
    @ReportDate DATETIME = NULL,
    @AssignedDate DATETIME = NULL,
    @InvestigationDate DATETIME = NULL,
    @RowStatus INT,
    @ReportTypeID BIGINT = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @StatusTypeID BIGINT = NULL,
    @ReportCategoryTypeID BIGINT,
    @FarmTotalAnimalQuantity INT = NULL,
    @FarmSickAnimalQuantity INT = NULL,
    @FarmDeadAnimalQuantity INT = NULL,
    @FarmLatitude FLOAT = NULL,
    @FarmLongitude FLOAT = NULL,
    @FarmEpidemiologicalObservationID BIGINT = NULL,
    @ControlMeasuresObservationID BIGINT = NULL,
    @TestsConductedIndicator BIGINT = NULL,
    @DataAuditEventID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @FlocksOrHerds NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @Animals NVARCHAR(MAX) = NULL,
    @Vaccinations NVARCHAR(MAX) = NULL,
    @Samples NVARCHAR(MAX) = NULL,
    @PensideTests NVARCHAR(MAX) = NULL,
    @LaboratoryTests NVARCHAR(MAX) = NULL,
    @LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
    @CaseLogs NVARCHAR(MAX) = NULL,
    @ClinicalInformation NVARCHAR(MAX) = NULL,
    @Contacts NVARCHAR(MAX) = NULL,
    @CaseMonitorings NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @LinkLocalOrFieldSampleIDToReportID BIT = 0,
    @OutbreakCaseIndicator BIT = 0,
    @OutbreakCaseReportUID BIGINT = NULL,
    @OutbreakCaseStatusTypeID BIGINT = NULL,
    @OutbreakCaseQuestionnaireObservationID BIGINT = NULL,
    @PrimaryCaseIndicator BIT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT
            = 0,
                @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
                @ConnectedDiseaseReportLaboratoryTestID BIGINT = NULL,
                @RowAction INT = NULL,
                @RowID BIGINT,
                @Iteration INT = 0,
                @NewFarmOwnerID BIGINT = NULL,
                @FlockOrHerdID BIGINT = NULL,
                @FlockOrHerdMasterID BIGINT = NULL,
                @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
                @SickAnimalQuantity INT = NULL,
                @TotalAnimalQuantity INT = NULL,
                @DeadAnimalQuantity INT = NULL,
                @Comments NVARCHAR(2000) = NULL,
                @SpeciesID BIGINT = NULL,
                @SpeciesMasterID BIGINT = NULL,
                @SpeciesTypeID BIGINT = NULL,
                @StartOfSignsDate DATETIME = NULL,
                @AverageAge NVARCHAR(200) = NULL,
                @ObservationID BIGINT = NULL,
                @OutbreakSpeciesCaseStatusTypeID BIGINT = NULL,
                @AnimalID BIGINT = NULL,
                @SexTypeID BIGINT = NULL,
                @ConditionTypeID BIGINT = NULL,
                @AgeTypeID BIGINT = NULL,
                @EIDSSAnimalID NVARCHAR(200) = NULL,
                @AnimalName NVARCHAR(200) = NULL,
                @Color NVARCHAR(200) = NULL,
                @AnimalDescription NVARCHAR(200) = NULL,
                @ClinicalSignsIndicator BIGINT = NULL,
                @VaccinationID BIGINT,
                @VaccinationTypeID BIGINT = NULL,
                @RouteTypeID BIGINT = NULL,
                @VaccinationDate DATETIME = NULL,
                @Manufacturer NVARCHAR(200) = NULL,
                @LotNumber NVARCHAR(200) = NULL,
                @NumberVaccinated INT = NULL,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @RootSampleID BIGINT = NULL,
                @ParentSampleID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @CurrentSiteID BIGINT = NULL,
                @BirdStatusTypeID BIGINT = NULL,
                @PensideTestID BIGINT = NULL,
                @PensideTestResultTypeID BIGINT = NULL,
                @PensideTestNameTypeID BIGINT = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @TestDate DATETIME = NULL,
                @PensideTestCategoryTypeID BIGINT = NULL,
                @TestID BIGINT = NULL,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @StartedDate DATETIME = NULL,
                @ResultDate DATETIME = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestDiseaseReportID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @CaseLogID BIGINT,
                @LogStatusTypeID BIGINT = NULL,
                @LoggedByPersonID BIGINT = NULL,
                @LogDate DATETIME = NULL,
                @ActionRequired NVARCHAR(200) = NULL,
                @VeterinaryDiseaseReportRelationshipID BIGINT = NULL,
                @RelatedToSpeciesID BIGINT = NULL,
                @RelatedToAnimalID BIGINT = NULL,
                @RelatedToObservationID BIGINT = NULL,
                @FormTemplateID BIGINT,
                @ObservationSiteID BIGINT,
                @ActivityID BIGINT = NULL,
                @ActivityIDNew BIGINT = NULL,
                @ParameterID BIGINT = NULL,
                @ParameterValue SQL_VARIANT = NULL,
                @ParameterRowID BIGINT = NULL,
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventNote NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL,
                                                                                           -- Data audit
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                --@DataAuditEventID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = 10017085,                                           -- Veterinary disease report
                @ObjectID BIGINT = @DiseaseReportID,
                @ObjectTableID BIGINT = 75800000000,                                       -- tlbVetCase
                @ObjectVeterinaryDiseaseReportRelationshipTableID BIGINT = 53577790000004, -- VetDiseaseReportRelationship
                @ObjectObservationTableID BIGINT = 75640000000,                            -- tlbObservation
                @ObjectActivityParametersTableID BIGINT = 75410000000,                     -- tlbActivityParameters
                                                                                           -- End data audit
                @LabModuleSourceIndicator INT = 0,
                @SampleDiseaseReportID BIGINT = NULL,
                @EIDSSCaseID NVARCHAR(200) = NULL;
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL,
            OutbreakCaseStatusTypeID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @VaccinationsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            SpeciesID BIGINT NULL,
            VaccinationTypeID BIGINT NULL,
            RouteTypeID BIGINT NULL,
            DiseaseID BIGINT NULL,
            VaccinationDate DATETIME NULL,
            Manufacturer NVARCHAR(200) NULL,
            LotNumber NVARCHAR(200) NULL,
            NumberVaccinated INT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            LabModuleSourceIndicator INT NOT NULL,
            FarmID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @PensideTestsTemp TABLE
        (
            PensideTestID BIGINT NOT NULL,
            SampleID BIGINT NOT NULL,
            PensideTestNameTypeID BIGINT NULL,
            PensideTestResultTypeID BIGINT NULL,
            PensideTestCategoryTypeID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            TestedByOrganizationID BIGINT NULL,
            DiseaseID BIGINT NULL,
            TestDate DATETIME NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @CaseLogsTemp TABLE
        (
            CaseLogID BIGINT NOT NULL,
            LogStatusTypeID BIGINT NULL,
            LoggedByPersonID BIGINT NULL,
            LogDate DATETIME NULL,
            ActionRequired NVARCHAR(200) NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ClinicalInformationTemp TABLE
        (
            langId NVARCHAR(200) NULL,
            HerdID BIGINT NOT NULL,
            Herd NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SpeciesTypeName NVARCHAR(200) NULL,
            StatusTypeID BIGINT NULL,
            InvestigationPerformedTypeID BIGINT NULL
        );
        DECLARE @ActivityParametersTemp TABLE
        (
            ActivityID BIGINT NOT NULL,
            ParameterID BIGINT NOT NULL,
            ParameterValue SQL_VARIANT NULL,
            ParameterRowID BIGINT NOT NULL
        );
        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL,
            Note NVARCHAR(MAX) NULL
        );
        DECLARE @VeterinaryDiseaseReportAfterEdit TABLE
        (
            DiseaseReportID BIGINT,
            FarmID BIGINT,
            DiseaseID BIGINT,
            PersonEnteredByID BIGINT,
            PersonReportedByID BIGINT,
            PersonInvestigatedByID BIGINT,
            ObservationID BIGINT,
            ReportDate DATETIME,
            AssignedDate DATETIME,
            InvestigationDate DATETIME,
            FinalDiagnosisDate DATETIME,
            FieldAccessionID NVARCHAR(200),
            YNTestsConductedTypeID BIGINT,
            ReportedByOfficeID BIGINT,
            InvestigatedByOfficeID BIGINT,
            CaseReportTypeID BIGINT,
            CaseClassificationTypeID BIGINT,
            OutbreakID BIGINT,
            EnteredDate DATETIME,
            EIDSSReportID NVARCHAR(200),
            CaseProgressStatusTypeID BIGINT,
            ParentMonitoringSessionID BIGINT,
            CaseTypeID BIGINT,
            ReceivedByOfficeID BIGINT,
            ReceivedByPersonID BIGINT
        );
        DECLARE @VeterinaryDiseaseReportBeforeEdit TABLE
        (
            DiseaseReportID BIGINT,
            FarmID BIGINT,
            DiseaseID BIGINT,
            PersonEnteredByID BIGINT,
            PersonReportedByID BIGINT,
            PersonInvestigatedByID BIGINT,
            ObservationID BIGINT,
            ReportDate DATETIME,
            AssignedDate DATETIME,
            InvestigationDate DATETIME,
            FinalDiagnosisDate DATETIME,
            FieldAccessionID NVARCHAR(200),
            YNTestsConductedTypeID BIGINT,
            ReportedByOfficeID BIGINT,
            InvestigatedByOfficeID BIGINT,
            CaseReportTypeID BIGINT,
            CaseClassificationTypeID BIGINT,
            OutbreakID BIGINT,
            EnteredDate DATETIME,
            EIDSSReportID NVARCHAR(200),
            CaseProgressStatusTypeID BIGINT,
            ParentMonitoringSessionID BIGINT,
            CaseTypeID BIGINT,
            ReceivedByOfficeID BIGINT,
            ReceivedByPersonID BIGINT
        );

        BEGIN TRANSACTION;

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        -- Predetermine the outbreak report ID for the upcoming section
        SELECT @OutbreakCaseReportUID = OutbreakCaseReportUID
        FROM dbo.OutbreakCaseReport
        WHERE idfVetCase = @DiseaseReportID;

        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT,
                OutbreakCaseStatusTypeID BIGINT
            );

        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@Vaccinations)
            WITH
            (
                VaccinationID BIGINT,
                SpeciesID BIGINT,
                VaccinationTypeID BIGINT,
                RouteTypeID BIGINT,
                DiseaseID BIGINT,
                VaccinationDate DATETIME2,
                Manufacturer NVARCHAR(200),
                LotNumber NVARCHAR(200),
                NumberVaccinated INT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                LabModuleSourceIndicator INT,
                FarmID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );

        SET @Iteration =
        (
            SELECT COUNT(*) FROM dbo.tlbMaterial WHERE idfVetCase = @DiseaseReportID
        );

        INSERT INTO @PensideTestsTemp
        SELECT *
        FROM
            OPENJSON(@PensideTests)
            WITH
            (
                PensideTestID BIGINT,
                SampleID BIGINT,
                PensideTestNameTypeID BIGINT,
                PensideTestResultTypeID BIGINT,
                PensideTestCategoryTypeID BIGINT,
                TestedByPersonID BIGINT,
                TestedByOrganizationID BIGINT,
                DiseaseID BIGINT,
                TestDate DATETIME2,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @CaseLogsTemp
        SELECT *
        FROM
            OPENJSON(@CaseLogs)
            WITH
            (
                CaseLogID BIGINT,
                LogStatusTypeID BIGINT,
                LoggedByPersonID BIGINT,
                LogDate DATETIME2,
                ActionRequired NVARCHAR(200),
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @ClinicalInformationTemp
        SELECT *
        FROM
            OPENJSON(@ClinicalInformation)
            WITH
            (
                langId NVARCHAR(200),
                HerdID BIGINT,
                Herd NVARCHAR(200),
                ClinicalSignsTypeID BIGINT,
                SpeciesTypeID BIGINT,
                SpeciesTypeName NVARCHAR(200),
                StatusTypeID BIGINT,
                InvestigationPerformedTypeID BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX),
                Note NVARCHAR(MAX)
            );

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID
                  AND intRowStatus = 0
        )
        BEGIN
            -- Get next key value
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVetCase', @DiseaseReportID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vet Disease Report',
                                               @EIDSSReportID OUTPUT,
                                               NULL;

            -- Data audit
        	IF @DataAuditEventID IS NULL
        	BEGIN 
				SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

				INSERT INTO @SuppressSelect
				EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @DiseaseReportID,
                                                      @ObjectTableID,
                                                      @EIDSSReportID, 
                                                      @DataAuditEventID OUTPUT;
            END
            -- End data audit

            IF @ReportCategoryTypeID = 10012004 --Avian
            BEGIN
                UPDATE dbo.tlbFarmActual
                SET intAvianTotalAnimalQty = @FarmTotalAnimalQuantity,
                    intAvianSickAnimalQty = @FarmSickAnimalQuantity,
                    intAvianDeadAnimalQty = @FarmDeadAnimalQuantity,
                    AuditUpdateUser = @AuditUserName
                WHERE idfFarmActual = @FarmMasterID;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   NULL,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            ELSE --Livestock
            BEGIN
                UPDATE dbo.tlbFarmActual
                SET intLivestockTotalAnimalQty = @FarmTotalAnimalQuantity,
                    intLivestockSickAnimalQty = @FarmSickAnimalQuantity,
                    intLivestockDeadAnimalQty = @FarmDeadAnimalQuantity,
                    AuditUpdateUser = @AuditUserName
                WHERE idfFarmActual = @FarmMasterID;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   NULL,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END

            INSERT INTO dbo.tlbVetCase
            (
                idfVetCase,
                idfFarm,
                idfsFinalDiagnosis,
                idfPersonEnteredBy,
                idfPersonReportedBy,
                idfPersonInvestigatedBy,
                idfObservation,
                idfsSite,
                datReportDate,
                datAssignedDate,
                datInvestigationDate,
                datFinalDiagnosisDate,
                strTestNotes,
                strSummaryNotes,
                strClinicalNotes,
                strFieldAccessionID,
                idfsYNTestsConducted,
                intRowStatus,
                idfReportedByOffice,
                idfInvestigatedByOffice,
                idfsCaseReportType,
                strDefaultDisplayDiagnosis,
                idfsCaseClassification,
                idfOutbreak,
                datEnteredDate,
                strCaseID,
                idfsCaseProgressStatus,
                strSampleNotes,
                datModificationForArchiveDate,
                idfParentMonitoringSession,
                idfsCaseType,
                idfReceivedByOffice,
                idfReceivedByPerson,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@DiseaseReportID,
             @FarmID,
             @DiseaseID,
             @EnteredByPersonID,
             @ReportedByPersonID,
             @InvestigatedByPersonID,
             @ControlMeasuresObservationID,
             @SiteID,
             @ReportDate,
             @AssignedDate,
             @InvestigationDate,
             @DiagnosisDate,
             NULL,
             NULL,
             NULL,
             @EIDSSFieldAccessionID,
             @TestsConductedIndicator,
             @RowStatus,
             @ReportedByOrganizationID,
             @InvestigatedByOrganizationID,
             @ReportTypeID,
             NULL,
             @ClassificationTypeID,
             @OutbreakID,
             @EnteredDate,
             @EIDSSReportID,
             @StatusTypeID,
             NULL,
             NULL,
             @MonitoringSessionID,
             @ReportCategoryTypeID,
             @ReceivedByOrganizationID,
             @ReceivedByPersonID,
             @AuditUserName,
             10519001,
             '[{"idfVetCase":' + CAST(@DiseaseReportID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @DiseaseReportID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSReportID
            );

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSReportID
            WHERE idfObject = @FarmEpidemiologicalObservationID
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSReportID
            WHERE idfObject = @ControlMeasuresObservationID
                  AND idfDataAuditEvent IS NULL;
            -- End data audit

            UPDATE @EventsTemp
            SET ObjectId = @DiseaseReportID,
                Note = REPLACE(Note, 'diseaseReportID=0', 'diseaseReportID=' + CAST(@DiseaseReportID AS NVARCHAR(300)))
            WHERE ObjectId = 0;

            -- Update imported samples from laboratory
            UPDATE @SamplesTemp 
            SET VeterinaryDiseaseReportID = @DiseaseReportID
            WHERE VeterinaryDiseaseReportID = 0
                  AND LabModuleSourceIndicator = 1;
        END
        ELSE
        BEGIN
            -- Data audit
        	IF @DataAuditEventID IS NULL
        	BEGIN 
				SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

				INSERT INTO @SuppressSelect
				EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @DiseaseReportID,
                                                      @ObjectTableID,
                                                      @EIDSSReportID, 
                                                      @DataAuditEventID OUTPUT;
            END
            -- End data audit

            IF @ReportCategoryTypeID = 10012004 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   @MonitoringSessionID,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   @MonitoringSessionID,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            -- Data audit
            INSERT INTO @VeterinaryDiseaseReportBeforeEdit
            (
                DiseaseReportID,
                FarmID,
                DiseaseID,
                PersonEnteredByID,
                PersonReportedByID,
                PersonInvestigatedByID,
                ObservationID,
                ReportDate,
                AssignedDate,
                InvestigationDate,
                FinalDiagnosisDate,
                FieldAccessionID,
                YNTestsConductedTypeID,
                ReportedByOfficeID,
                InvestigatedByOfficeID,
                CaseReportTypeID,
                CaseClassificationTypeID,
                OutbreakID,
                EnteredDate,
                EIDSSReportID,
                CaseProgressStatusTypeID,
                ParentMonitoringSessionID,
                CaseTypeID,
                ReceivedByOfficeID,
                ReceivedByPersonID
            )
            SELECT idfVetCase,
                   idfFarm,
                   idfsFinalDiagnosis,
                   idfPersonEnteredBy,
                   idfPersonReportedBy,
                   idfPersonInvestigatedBy,
                   idfObservation,
                   datReportDate,
                   datAssignedDate,
                   datInvestigationDate,
                   datFinalDiagnosisDate,
                   strFieldAccessionID,
                   idfsYNTestsConducted,
                   idfReportedByOffice,
                   idfInvestigatedByOffice,
                   idfsCaseReportType,
                   idfsCaseClassification,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   idfParentMonitoringSession,
                   idfsCaseType,
                   idfReceivedByOffice,
                   idfReceivedByPerson
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID;
            -- End data audit

            UPDATE dbo.tlbVetCase
            SET idfFarm = @FarmID,
                idfsFinalDiagnosis = @DiseaseID,
                idfPersonEnteredBy = @EnteredByPersonID,
                idfPersonReportedBy = @ReportedByPersonID,
                idfPersonInvestigatedBy = @InvestigatedByPersonID,
                idfReceivedByPerson = @ReceivedByPersonID,
                idfObservation = @ControlMeasuresObservationID,
                idfsSite = @SiteID,
                datReportDate = @ReportDate,
                datAssignedDate = @AssignedDate,
                datInvestigationDate = @InvestigationDate,
                datFinalDiagnosisDate = @DiagnosisDate,
                strTestNotes = NULL,
                strSummaryNotes = NULL,
                strClinicalNotes = NULL,
                strFieldAccessionID = @EIDSSFieldAccessionID,
                idfsYNTestsConducted = @TestsConductedIndicator,
                intRowStatus = @RowStatus,
                idfReportedByOffice = @ReportedByOrganizationID,
                idfInvestigatedByOffice = @InvestigatedByOrganizationID,
                idfReceivedByOffice = @ReceivedByOrganizationID,
                idfsCaseReportType = @ReportTypeID,
                idfsCaseClassification = @ClassificationTypeID,
                idfOutbreak = @OutbreakID,
                datEnteredDate = @EnteredDate,
                strCaseID = @EIDSSReportID,
                idfsCaseProgressStatus = @StatusTypeID,
                strSampleNotes = NULL,
                idfParentMonitoringSession = @MonitoringSessionID,
                idfsCaseType = @ReportCategoryTypeID,
                AuditUpdateUser = @AuditUserName
            WHERE idfVetCase = @DiseaseReportID;

            -- Data audit
            INSERT INTO @VeterinaryDiseaseReportAfterEdit
            (
                DiseaseReportID,
                FarmID,
                DiseaseID,
                PersonEnteredByID,
                PersonReportedByID,
                PersonInvestigatedByID,
                ObservationID,
                ReportDate,
                AssignedDate,
                InvestigationDate,
                FinalDiagnosisDate,
                FieldAccessionID,
                YNTestsConductedTypeID,
                ReportedByOfficeID,
                InvestigatedByOfficeID,
                CaseReportTypeID,
                CaseClassificationTypeID,
                OutbreakID,
                EnteredDate,
                EIDSSReportID,
                CaseProgressStatusTypeID,
                ParentMonitoringSessionID,
                CaseTypeID,
                ReceivedByOfficeID,
                ReceivedByPersonID
            )
            SELECT idfVetCase,
                   idfFarm,
                   idfsFinalDiagnosis,
                   idfPersonEnteredBy,
                   idfPersonReportedBy,
                   idfPersonInvestigatedBy,
                   idfObservation,
                   datReportDate,
                   datAssignedDate,
                   datInvestigationDate,
                   datFinalDiagnosisDate,
                   strFieldAccessionID,
                   idfsYNTestsConducted,
                   idfReportedByOffice,
                   idfInvestigatedByOffice,
                   idfsCaseReportType,
                   idfsCaseClassification,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   idfParentMonitoringSession,
                   idfsCaseType,
                   idfReceivedByOffice,
                   idfReceivedByPerson
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4575810000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FarmID,
                   a.FarmID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FarmID <> b.FarmID)
                  OR (
                         a.FarmID IS NOT NULL
                         AND b.FarmID IS NULL
                     )
                  OR (
                         a.FarmID IS NULL
                         AND b.FarmID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80940000000,
                   a.DiseaseReportID,
                   NULL,
                   b.DiseaseID,
                   a.DiseaseID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.DiseaseID <> b.DiseaseID)
                  OR (
                         a.DiseaseID IS NOT NULL
                         AND b.DiseaseID IS NULL
                     )
                  OR (
                         a.DiseaseID IS NULL
                         AND b.DiseaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80910000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonEnteredByID,
                   a.PersonEnteredByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonEnteredByID <> b.PersonEnteredByID)
                  OR (
                         a.PersonEnteredByID IS NOT NULL
                         AND b.PersonEnteredByID IS NULL
                     )
                  OR (
                         a.PersonEnteredByID IS NULL
                         AND b.PersonEnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80930000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonReportedByID,
                   a.PersonReportedByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonReportedByID <> b.PersonReportedByID)
                  OR (
                         a.PersonReportedByID IS NOT NULL
                         AND b.PersonReportedByID IS NULL
                     )
                  OR (
                         a.PersonReportedByID IS NULL
                         AND b.PersonReportedByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80920000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonInvestigatedByID,
                   a.PersonInvestigatedByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonInvestigatedByID <> b.PersonInvestigatedByID)
                  OR (
                         a.PersonInvestigatedByID IS NOT NULL
                         AND b.PersonInvestigatedByID IS NULL
                     )
                  OR (
                         a.PersonInvestigatedByID IS NULL
                         AND b.PersonInvestigatedByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566320000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ObservationID,
                   a.ObservationID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ObservationID <> b.ObservationID)
                  OR (
                         a.ObservationID IS NOT NULL
                         AND b.ObservationID IS NULL
                     )
                  OR (
                         a.ObservationID IS NULL
                         AND b.ObservationID IS NOT NULL
                     )

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80870000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ReportDate,
                   a.ReportDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ReportDate <> b.ReportDate)
                  OR (
                         a.ReportDate IS NOT NULL
                         AND b.ReportDate IS NULL
                     )
                  OR (
                         a.ReportDate IS NULL
                         AND b.ReportDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80850000000,
                   a.DiseaseReportID,
                   NULL,
                   b.AssignedDate,
                   a.AssignedDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.AssignedDate <> b.AssignedDate)
                  OR (
                         a.AssignedDate IS NOT NULL
                         AND b.AssignedDate IS NULL
                     )
                  OR (
                         a.AssignedDate IS NULL
                         AND b.AssignedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566330000000,
                   a.DiseaseReportID,
                   NULL,
                   b.InvestigationDate,
                   a.InvestigationDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.InvestigationDate <> b.InvestigationDate)
                  OR (
                         a.InvestigationDate IS NOT NULL
                         AND b.InvestigationDate IS NULL
                     )
                  OR (
                         a.InvestigationDate IS NULL
                         AND b.InvestigationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80860000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FinalDiagnosisDate,
                   a.FinalDiagnosisDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FinalDiagnosisDate <> b.FinalDiagnosisDate)
                  OR (
                         a.FinalDiagnosisDate IS NOT NULL
                         AND b.FinalDiagnosisDate IS NULL
                     )
                  OR (
                         a.FinalDiagnosisDate IS NULL
                         AND b.FinalDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566340000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FieldAccessionID,
                   a.FieldAccessionID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FieldAccessionID <> b.FieldAccessionID)
                  OR (
                         a.FieldAccessionID IS NOT NULL
                         AND b.FieldAccessionID IS NULL
                     )
                  OR (
                         a.FieldAccessionID IS NULL
                         AND b.FieldAccessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578870000000,
                   a.DiseaseReportID,
                   NULL,
                   b.YNTestsConductedTypeID,
                   a.YNTestsConductedTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.YNTestsConductedTypeID <> b.YNTestsConductedTypeID)
                  OR (
                         a.YNTestsConductedTypeID IS NOT NULL
                         AND b.YNTestsConductedTypeID IS NULL
                     )
                  OR (
                         a.YNTestsConductedTypeID IS NULL
                         AND b.YNTestsConductedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618090000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ReportedByOfficeID,
                   a.ReportedByOfficeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ReportedByOfficeID <> b.ReportedByOfficeID)
                  OR (
                         a.ReportedByOfficeID IS NOT NULL
                         AND b.ReportedByOfficeID IS NULL
                     )
                  OR (
                         a.ReportedByOfficeID IS NULL
                         AND b.ReportedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618100000000,
                   a.DiseaseReportID,
                   NULL,
                   b.InvestigatedByOfficeID,
                   a.InvestigatedByOfficeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.InvestigatedByOfficeID <> b.InvestigatedByOfficeID)
                  OR (
                         a.InvestigatedByOfficeID IS NOT NULL
                         AND b.InvestigatedByOfficeID IS NULL
                     )
                  OR (
                         a.InvestigatedByOfficeID IS NULL
                         AND b.InvestigatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618120000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseReportTypeID,
                   a.CaseReportTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseReportTypeID <> b.CaseReportTypeID)
                  OR (
                         a.CaseReportTypeID IS NOT NULL
                         AND b.CaseReportTypeID IS NULL
                     )
                  OR (
                         a.CaseReportTypeID IS NULL
                         AND b.CaseReportTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665470000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseClassificationTypeID,
                   a.CaseClassificationTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseClassificationTypeID <> b.CaseClassificationTypeID)
                  OR (
                         a.CaseClassificationTypeID IS NOT NULL
                         AND b.CaseClassificationTypeID IS NULL
                     )
                  OR (
                         a.CaseClassificationTypeID IS NULL
                         AND b.CaseClassificationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665490000000,
                   a.DiseaseReportID,
                   NULL,
                   b.OutbreakID,
                   a.OutbreakID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.OutbreakID <> b.OutbreakID)
                  OR (
                         a.OutbreakID IS NOT NULL
                         AND b.OutbreakID IS NULL
                     )
                  OR (
                         a.OutbreakID IS NULL
                         AND b.OutbreakID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665500000000,
                   a.DiseaseReportID,
                   NULL,
                   b.EnteredDate,
                   a.EnteredDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.EnteredDate <> b.EnteredDate)
                  OR (
                         a.EnteredDate IS NOT NULL
                         AND b.EnteredDate IS NULL
                     )
                  OR (
                         a.EnteredDate IS NULL
                         AND b.EnteredDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665510000000,
                   a.DiseaseReportID,
                   NULL,
                   b.EIDSSReportID,
                   a.EIDSSReportID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.EIDSSReportID <> b.EIDSSReportID)
                  OR (
                         a.EIDSSReportID IS NOT NULL
                         AND b.EIDSSReportID IS NULL
                     )
                  OR (
                         a.EIDSSReportID IS NULL
                         AND b.EIDSSReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665520000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseProgressStatusTypeID,
                   a.CaseProgressStatusTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseProgressStatusTypeID <> b.CaseProgressStatusTypeID)
                  OR (
                         a.CaseProgressStatusTypeID IS NOT NULL
                         AND b.CaseProgressStatusTypeID IS NULL
                     )
                  OR (
                         a.CaseProgressStatusTypeID IS NULL
                         AND b.CaseProgressStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665540000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ParentMonitoringSessionID,
                   a.ParentMonitoringSessionID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ParentMonitoringSessionID <> b.ParentMonitoringSessionID)
                  OR (
                         a.ParentMonitoringSessionID IS NOT NULL
                         AND b.ParentMonitoringSessionID IS NULL
                     )
                  OR (
                         a.ParentMonitoringSessionID IS NULL
                         AND b.ParentMonitoringSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665560000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseTypeID,
                   a.CaseTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseTypeID <> b.CaseTypeID)
                  OR (
                         a.CaseTypeID IS NOT NULL
                         AND b.CaseTypeID IS NULL
                     )
                  OR (
                         a.CaseTypeID IS NULL
                         AND b.CaseTypeID IS NOT NULL
                     );
        END;

        -- VUC11 and VUC12 - connected disease report logic.
        IF @RelatedToDiseaseReportID IS NOT NULL
        BEGIN
            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.VetDiseaseReportRelationship
                WHERE VetDiseaseReportID = @DiseaseReportID
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'VetDiseaseReportRelationship',
                                                  @VeterinaryDiseaseReportRelationshipID OUTPUT;

                INSERT INTO dbo.VetDiseaseReportRelationship
                (
                    VetDiseaseReportRelnUID,
                    VetDiseaseReportID,
                    RelatedToVetDiseaseReportID,
                    RelationshipTypeID,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@VeterinaryDiseaseReportRelationshipID,
                 @DiseaseReportID,
                 @RelatedToDiseaseReportID,
                 10503001,
                 0  ,
                 10519001,
                 '[{"VetDiseaseReportRelnUID":' + CAST(@VeterinaryDiseaseReportRelationshipID AS NVARCHAR(300))
                 + ',"VetDiseaseReportID":' + CAST(@DiseaseReportID AS NVARCHAR(300)) + '}]',
                 @AuditUserName
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectVeterinaryDiseaseReportRelationshipTableID,
                 @VeterinaryDiseaseReportRelationshipID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectVeterinaryDiseaseReportRelationshipTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @EIDSSReportID
                );
            -- End data audit
            END;
        END;

        -- An outbreak reference via a case must be created in order to tie the disease report to the outbreak session.
        IF @OutbreakCaseIndicator = 1
        BEGIN
            IF @OutbreakCaseReportUID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutbreakCaseReportUID OUTPUT;

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Vet Outbreak Case',
                                                @EIDSSCaseID OUTPUT,
                                                NULL;

                INSERT INTO dbo.OutbreakCaseReport
                (
                    OutbreakCaseReportUID,
                    idfOutbreak,
                    strOutbreakCaseID,
                    idfHumanCase,
                    idfVetCase,
                    OutbreakCaseObservationId,
                    OutbreakCaseStatusId,
                    OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM,
                    AuditUpdateUser,
                    AuditUpdateDTM
                )
                VALUES
                (@OutbreakCaseReportUID,
                 @OutbreakID,
                 @EIDSSCaseID,
                 NULL,
                 @DiseaseReportID,
                 @OutbreakCaseQuestionnaireObservationID,
                 @OutbreakCaseStatusTypeID,
                 @ClassificationTypeID,
                 @PrimaryCaseIndicator,
                 0  ,
                 10519001,
                 '[{"OutBreakCaseReportUID":' + CAST(@OutbreakCaseReportUID AS NVARCHAR(300)) + ',"idfOutbreak":'
                 + CAST(@OutbreakID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE(),
                 @AuditUserName,
                 GETDATE()
                );
            END
            ELSE
            BEGIN
                UPDATE dbo.OutbreakCaseReport
                SET OutbreakCaseStatusId = @OutbreakCaseStatusTypeID,
                    OutbreakCaseClassificationID = @ClassificationTypeID,
                    IsPrimaryCaseFlag = @PrimaryCaseIndicator,
                    intRowStatus = 0,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE(),
                    OutbreakCaseObservationID = @OutbreakCaseQuestionnaireObservationID
                WHERE OutbreakCaseReportUID = @OutbreakCaseReportUID;
            END
        END

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_FLOCK_HERD_SET @AuditUserName,
                                                @DataAuditEventID,
                                                @EIDSSReportID,
                                                @FlockOrHerdID OUTPUT,
                                                @FlockOrHerdMasterID,
                                                @FarmID,
                                                @EIDSSFlockOrHerdID,
                                                @SickAnimalQuantity,
                                                @TotalAnimalQuantity,
                                                @DeadAnimalQuantity,
                                                NULL,
                                                @RowStatus,
                                                @RowAction;

            UPDATE @SpeciesTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID,
                @OutbreakSpeciesCaseStatusTypeID = OutbreakCaseStatusTypeID
            FROM @SpeciesTemp;

            -- VUC11 and VUC12 - connected disease report logic for clinical species investigations.
            IF @RelatedToDiseaseReportID IS NOT NULL
               AND @RowAction = 1 -- Insert
            BEGIN
                IF @RelatedToObservationID IS NOT NULL
                BEGIN
                    SELECT @FormTemplateID = idfsFormTemplate,
                           @ObservationSiteID = idfsSite
                    FROM dbo.tlbObservation
                    WHERE idfObservation = @RelatedToObservationID;

                    SET @ObservationID = -1;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_GBL_OBSERVATION_SET @ObservationID OUTPUT,
                                                         @FormTemplateID,
                                                         @ObservationSiteID,
                                                         0,
                                                         1, 
                                                         @AuditUserName, 
                                                         @DataAuditEventID, 
                                                         @EIDSSReportID;

                    UPDATE @SpeciesTemp
                    SET ObservationID = @ObservationID
                    WHERE SpeciesMasterID = @SpeciesMasterID;

                    INSERT INTO @ActivityParametersTemp
                    SELECT idfActivityParameters,
                           idfsParameter,
                           varValue,
                           idfRow
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @RelatedToObservationID;

                    WHILE EXISTS (SELECT * FROM @ActivityParametersTemp)
                    BEGIN
                        SELECT TOP 1
                            @ActivityID = ActivityID,
                            @ParameterID = ParameterID,
                            @ParameterValue = ParameterValue,
                            @ParameterRowID = ParameterRowID
                        FROM @ActivityParametersTemp;

                        INSERT INTO @SuppressSelect
                        EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                          @ActivityIDNew OUTPUT;

                        INSERT INTO dbo.tlbActivityParameters
                        (
                            idfActivityParameters,
                            idfsParameter,
                            idfObservation,
                            varValue,
                            idfRow,
                            intRowStatus,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser,
                            AuditCreateDTM
                        )
                        VALUES
                        (@ActivityIDNew,
                         @ParameterID,
                         @ObservationID,
                         @ParameterValue,
                         @ParameterRowID,
                         0  ,
                         10519001,
                         '[{"idfActivityParameters":' + CAST(@ActivityIDNew AS NVARCHAR(300)) + '}]',
                         @AuditUserName,
                         GETDATE()
                        );

                        -- Data audit
                        INSERT INTO dbo.tauDataAuditDetailCreate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfObject,
                            idfObjectDetail,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser
                        )
                        VALUES
                        (@DataAuditEventID,
                         @ObjectActivityParametersTableID,
                         @ActivityIDNew,
                         @ObservationID,
                         10519001,
                         '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                         + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                         @AuditUserName
                        );
                        -- End data audit

                        DELETE FROM @ActivityParametersTemp
                        WHERE ActivityID = @ActivityID;
                    END;
                END;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_WITH_AUDITING_SET @AuditUserName,
                                                           @DataAuditEventID,
                                                           @EIDSSReportID,
                                                           @SpeciesID OUTPUT,
                                                           @SpeciesMasterID,
                                                           @SpeciesTypeID,
                                                           @FlockOrHerdID,
                                                           @ObservationID,
                                                           @StartOfSignsDate,
                                                           @AverageAge,
                                                           @SickAnimalQuantity,
                                                           @TotalAnimalQuantity,
                                                           @DeadAnimalQuantity,
                                                           @Comments,
                                                           @RowStatus,
                                                           @RowAction,
                                                           @OutbreakSpeciesCaseStatusTypeID;

            UPDATE @AnimalsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @VaccinationsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @SamplesTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AnimalsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AnimalID,
                @AnimalID = AnimalID,
                @SexTypeID = SexTypeID,
                @ConditionTypeID = ConditionTypeID,
                @AgeTypeID = AgeTypeID,
                @SpeciesID = SpeciesID,
                @ObservationID = ObservationID,
                @AnimalDescription = AnimalDescription,
                @EIDSSAnimalID = EIDSSAnimalID,
                @AnimalName = AnimalName,
                @Color = Color,
                @ClinicalSignsIndicator = ClinicalSignsIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AnimalsTemp;

            -- VUC11 and VUC12 - connected disease report logic for clinical signs.
            IF @RelatedToDiseaseReportID IS NOT NULL
               AND @RowAction = 1 -- Insert
               AND @ObservationID IS NOT NULL
            BEGIN
                SELECT @FormTemplateID = idfsFormTemplate,
                       @ObservationSiteID = idfsSite
                FROM dbo.tlbObservation
                WHERE idfObservation = @ObservationID;

                DELETE FROM @ActivityParametersTemp;

                INSERT INTO @ActivityParametersTemp
                SELECT idfActivityParameters,
                       idfsParameter,
                       varValue,
                       idfRow
                FROM dbo.tlbActivityParameters
                WHERE idfObservation = @ObservationID;

                SET @ObservationID = -1;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_OBSERVATION_SET @ObservationID OUTPUT,
                                                     @FormTemplateID,
                                                     @ObservationSiteID,
                                                     0,
                                                     1, 
                                                     @AuditUserName, 
                                                     @DataAuditEventID, 
                                                     @EIDSSReportID;

                UPDATE @AnimalsTemp
                SET ObservationID = @ObservationID
                WHERE AnimalID = @RowID;


                WHILE EXISTS (SELECT * FROM @ActivityParametersTemp)
                BEGIN
                    SELECT TOP 1
                        @ActivityID = ActivityID,
                        @ParameterID = ParameterID,
                        @ParameterValue = ParameterValue,
                        @ParameterRowID = ParameterRowID
                    FROM @ActivityParametersTemp;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                      @ActivityIDNew OUTPUT;

                    INSERT INTO dbo.tlbActivityParameters
                    (
                        idfActivityParameters,
                        idfsParameter,
                        idfObservation,
                        varValue,
                        idfRow,
                        intRowStatus,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@ActivityIDNew,
                     @ParameterID,
                     @ObservationID,
                     @ParameterValue,
                     @ParameterRowID,
                     0  ,
                     10519001,
                     '[{"idfActivityParameters":' + CAST(@ActivityIDNew AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     GETDATE()
                    );

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailCreate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        idfObjectDetail,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser
                    )
                    VALUES
                    (@DataAuditEventID,
                     @ObjectActivityParametersTableID,
                     @ActivityIDNew,
                     @ObservationID,
                     10519001,
                     '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                     + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                     @AuditUserName
                    );
                    -- End data audit

                    DELETE FROM @ActivityParametersTemp
                    WHERE ActivityID = @ActivityID;
                END;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_ANIMALS_SET @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID,
                                             @AnimalID OUTPUT,
                                             @SexTypeID,
                                             @ConditionTypeID,
                                             @AgeTypeID,
                                             @SpeciesID,
                                             @ObservationID,
                                             @AnimalDescription,
                                             @EIDSSAnimalID,
                                             @AnimalName,
                                             @Color,
                                             @ClinicalSignsIndicator,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @SamplesTemp
            SET AnimalID = @AnimalID
            WHERE AnimalID = @RowID;

            DELETE FROM @AnimalsTemp
            WHERE AnimalID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @VaccinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = VaccinationID,
                @VaccinationID = VaccinationID,
                @SpeciesID = SpeciesID,
                @VaccinationTypeID = VaccinationTypeID,
                @RouteTypeID = RouteTypeID,
                @DiseaseID = DiseaseID,
                @VaccinationDate = VaccinationDate,
                @Manufacturer = Manufacturer,
                @LotNumber = LotNumber,
                @NumberVaccinated = NumberVaccinated,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @VaccinationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_VACCINATIONS_SET @AuditUserName,
                                                  @DataAuditEventID,
                                                  @EIDSSReportID,
                                                  @VaccinationID OUTPUT,
                                                  @DiseaseReportID,
                                                  @SpeciesID,
                                                  @VaccinationTypeID,
                                                  @RouteTypeID,
                                                  @DiseaseID,
                                                  @VaccinationDate,
                                                  @Manufacturer,
                                                  @LotNumber,
                                                  @NumberVaccinated,
                                                  @Comments,
                                                  @RowStatus,
                                                  @RowAction;

            DELETE FROM @VaccinationsTemp
            WHERE VaccinationID = @RowID;
        END;

        IF @Contacts IS NOT NULL
            EXEC dbo.USSP_OMM_CONTACT_SET NULL,
                                          @Contacts,
                                          @User = @AuditUserName,
                                          @OutBreakCaseReportUID = @OutbreakCaseReportUID,
                                          @FunctionCall = 1;

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @SampleDiseaseReportID = VeterinaryDiseaseReportID,
                @MonitoringSessionID = MonitoringSessionID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CollectionDate,
                @SentDate = SentDate,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @EnteredDate = EnteredDate,
                @Comments = Comments,
                @SiteID = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @BirdStatusTypeID = BirdStatusTypeID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @LabModuleSourceIndicator = LabModuleSourceIndicator,
                @RowAction = RowAction
            FROM @SamplesTemp;

            IF (
                   @EIDSSLocalOrFieldSampleID IS NULL
                   OR @EIDSSLocalOrFieldSampleID = ''
               )
               AND @LinkLocalOrFieldSampleIDToReportID = 1
            BEGIN
                SET @Iteration = @Iteration + 1;
                IF @Iteration < 10
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @EIDSSReportID + '-0' + CONVERT(NVARCHAR(4), @Iteration);
                END
                ELSE
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @EIDSSReportID + '-' + CONVERT(NVARCHAR(4), @Iteration);
                END;
            END;

            -- Check if sample is being de-linked, so use sample disease report ID passed in from 
            -- sample record instead of parent disease report ID.
            IF @LabModuleSourceIndicator = 0
            BEGIN
                SET @SampleDiseaseReportID = @DiseaseReportID;
            END

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID,
                                             @SampleID OUTPUT,
                                             @SampleTypeID,
                                             @RootSampleID,
                                             @ParentSampleID,
                                             @FarmOwnerID,
                                             @SpeciesID,
                                             @AnimalID,
                                             NULL,
                                             @MonitoringSessionID,
                                             NULL,
                                             NULL,
                                             @SampleDiseaseReportID,
                                             @CollectionDate,
                                             @CollectedByPersonID,
                                             @CollectedByOrganizationID,
                                             @SentDate,
                                             @SentToOrganizationID,
                                             @EIDSSLocalOrFieldSampleID,
                                             @SiteID,
                                             @EnteredDate,
                                             @ReadOnlyIndicator,
                                             @SampleStatusTypeID,
                                             @Comments,
                                             @CurrentSiteID,
                                             @DiseaseID,
                                             @BirdStatusTypeID,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @PensideTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @LaboratoryTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @PensideTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = PensideTestID,
                @PensideTestID = PensideTestID,
                @SampleID = SampleID,
                @PensideTestResultTypeID = PensideTestResultTypeID,
                @PensideTestNameTypeID = PensideTestNameTypeID,
                @RowStatus = RowStatus,
                @TestedByPersonID = TestedByPersonID,
                @TestedByOrganizationID = TestedByOrganizationID,
                @DiseaseID = DiseaseID,
                @TestDate = TestDate,
                @PensideTestCategoryTypeID = PensideTestCategoryTypeID,
                @RowAction = RowAction
            FROM @PensideTestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_PENSIDE_TESTS_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @PensideTestID OUTPUT,
                                                   @SampleID,
                                                   @PensideTestResultTypeID,
                                                   @PensideTestNameTypeID,
                                                   @TestedByPersonID,
                                                   @TestedByOrganizationID,
                                                   @DiseaseID,
                                                   @TestDate,
                                                   @PensideTestCategoryTypeID,
                                                   @RowStatus,
                                                   @RowAction;

            DELETE FROM @PensideTestsTemp
            WHERE PensideTestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @LaboratoryTestsTemp;

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --veterinary disease report, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
                SET @TestDiseaseReportID = NULL;
            END
            ELSE
            BEGIN
                SET @TestDiseaseReportID = @DiseaseReportID;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET @TestID OUTPUT,
                                           @TestNameTypeID,
                                           @TestCategoryTypeID,
                                           @TestResultTypeID,
                                           @TestStatusTypeID,
                                           @DiseaseID,
                                           @SampleID,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @Comments,
                                           @RowStatus,
                                           @StartedDate,
                                           @ResultDate,
                                           @TestedByOrganizationID,
                                           @TestedByPersonID,
                                           @ResultEnteredByOrganizationID,
                                           @ResultEnteredByPersonID,
                                           @ValidatedByOrganizationID,
                                           @ValidatedByPersonID,
                                           @ReadOnlyIndicator,
                                           @NonLaboratoryTestIndicator,
                                           @ExternalTestIndicator,
                                           @PerformedByOrganizationID,
                                           @ReceivedDate,
                                           @ContactPersonName,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @TestDiseaseReportID,
                                           @AuditUserName,
                                           @DataAuditEventID,
                                           @EIDSSReportID,
                                           @RowAction;

            UPDATE @LaboratoryTestInterpretationsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @LaboratoryTestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestInterpretationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @LaboratoryTestInterpretationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUserName,
                                                          @DataAuditEventID,
                                                          @EIDSSReportID, 
                                                          @TestInterpretationID OUTPUT,
                                                          @DiseaseID,
                                                          @InterpretedStatusTypeID,
                                                          @ValidatedByOrganizationID,
                                                          @ValidatedByPersonID,
                                                          @InterpretedByOrganizationID,
                                                          @InterpretedByPersonID,
                                                          @TestID,
                                                          @ValidatedStatusIndicator,
                                                          @ReportSessionCreatedIndicator,
                                                          @ValidatedComment,
                                                          @InterpretedComment,
                                                          @ValidatedDate,
                                                          @InterpretedDate,
                                                          @RowStatus,
                                                          @ReadOnlyIndicator,
                                                          @RowAction;

            IF @ReportSessionCreatedIndicator = 1 AND @RowAction = 1
            BEGIN
                SET @ConnectedDiseaseReportLaboratoryTestID = @TestID;
            END

            DELETE FROM @LaboratoryTestInterpretationsTemp
            WHERE TestInterpretationID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @CaseLogsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = CaseLogID,
                @CaseLogID = CaseLogID,
                @LogStatusTypeID = LogStatusTypeID,
                @LoggedByPersonID = LoggedByPersonID,
                @LogDate = LogDate,
                @ActionRequired = ActionRequired,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @CaseLogsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_DISEASE_REPORT_LOG_SET @AuditUserName,
                                                        @DataAuditEventID,
                                                        @EIDSSReportID,
                                                        @CaseLogID,
                                                        @LogStatusTypeID,
                                                        @DiseaseReportID,
                                                        @LoggedByPersonID,
                                                        @LogDate,
                                                        @ActionRequired,
                                                        @Comments,
                                                        @RowStatus,
                                                        @RowAction;

            DELETE FROM @CaseLogsTemp
            WHERE CaseLogID = @RowID;
        END;

        IF @CaseMonitorings IS NOT NULL
        BEGIN
            EXEC dbo.USSP_OMM_CASE_MONITORING_SET @CaseMonitorings = @CaseMonitorings,
                                                  @VeterinaryDiseaseReportID = @DiseaseReportID,
                                                  @User = @AuditUserName;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventNote = Note,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventId,
                                             @EventTypeId,
                                             @EventUserId,
                                             @EventObjectId,
                                             @EventDiseaseId,
                                             @EventSiteId,
                                             @EventInformationString,
                                             @EventLoginSiteId,
                                             @EventLocationId,
                                             @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @DiseaseReportID DiseaseReportID,
               @EIDSSReportID EIDSSReportID,
               @OutbreakCaseReportUID CaseID,
               @EIDSSCaseID EIDSSCaseID, 
               @ConnectedDiseaseReportLaboratoryTestID ConnectedDiseaseReportLaboratoryTestID;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_FARM_MASTER_SET]...';


GO
-- ================================================================================================
-- Name: USP_VET_FARM_MASTER_SET
--
-- Description:	Inserts and updates farm records.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/05/2019 Initial release.
-- Stephen Long     04/23/2019 Added suppress select on herd and species stored procedure calls.
-- Stephen Long     05/24/2019 Correction on flock/herds and species parameters.
-- Mark Wilson		10/06/2021 Added Elevation (NULL) to USP_GBL_ADDRESS_SET
-- Mark Wilson		10/19/2021 USSP_GBL_ADDRESS_SET, updated all USSP calls to pass user, removed 
--                             unnecessary fields
-- Mani             02/09/2022 Added @SupressSelect to suppress the return for USSP_GBL_ADDRESS_SET
-- Stephen Long     12/06/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long     03/09/2023 Changed data audit call to USSP_GBL_DATA_AUDIT_EVENT_SET.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_FARM_MASTER_SET]
(
    @FarmMasterID BIGINT,
    @AvianFarmTypeID BIGINT = NULL,
    @AvianProductionTypeID BIGINT = NULL,
    @FarmCategory BIGINT = NULL,
    @FarmOwnerID BIGINT = NULL,
    @FarmNationalName NVARCHAR(200) = NULL,
    @FarmInterNationalName NVARCHAR(200) = NULL,
    @EIDSSFarmID NVARCHAR(200) = NULL,
    @OwnershipStructureTypeID BIGINT = NULL,
    @Fax NVARCHAR(200) = NULL,
    @Email NVARCHAR(200) = NULL,
    @Phone NVARCHAR(200) = NULL,
    @FarmAddressID BIGINT = NULL,
    @ForeignAddressIndicator BIT = 0,
    @FarmAddressIdfsLocation BIGINT = NULL,
    @FarmAddressStreet NVARCHAR(200) = NULL,
    @FarmAddressApartment NVARCHAR(200) = NULL,
    @FarmAddressBuilding NVARCHAR(200) = NULL,
    @FarmAddressHouse NVARCHAR(200) = NULL,
    @FarmAddressPostalCode NVARCHAR(200) = NULL,
    @FarmAddressLatitude FLOAT = NULL,
    @FarmAddressLongitude FLOAT = NULL,
    @NumberOfBuildings INT = NULL,
    @NumberOfBirdsPerBuilding INT = NULL,
    @HerdsOrFlocks NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @AuditUser NVARCHAR(100) = NULL
)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                                                   -- Data audit
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @DataAuditEventID BIGINT = NULL,
            @DataAuditEventTypeID BIGINT = NULL,
            @ObjectTypeID BIGINT = 10017020,       -- Farm
            @ObjectID BIGINT = @FarmMasterID,
            @ObjectTableID BIGINT = 4572790000000; -- tlbFarmActual

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @HerdMasterID BIGINT,
            @EIDSSHerdID NVARCHAR(200) = NULL,
            @SickAnimalQuantity INT = NULL,
            @TotalAnimalQuantity INT = NULL,
            @DeadAnimalQuantity INT = NULL,
            @Note NVARCHAR(2000) = NULL,
            @RowAction CHAR(1) = NULL,
            @RowID BIGINT = NULL,
            @RowStatus INT = NULL,
            ---------------
            @SpeciesMasterID BIGINT,
            @SpeciesTypeID BIGINT,
            @StartOfSignsDate DATETIME = NULL,
            @AverageAge NVARCHAR(200) = NULL,
            @ObservationID BIGINT = NULL;

    DECLARE @HerdOrFlockMasterTemp TABLE
    (
        HerdMasterID BIGINT NOT NULL,
        EIDSSHerdID NVARCHAR(200) NULL,
        FarmMasterID BIGINT NOT NULL,
        SickAnimalQuantity INT NULL,
        TotalAnimalQuantity INT NULL,
        DeadAnimalQuantity INT NULL,
        RowStatus INT NULL,
        RowAction CHAR(1) NULL
    );
    DECLARE @SpeciesMasterTemp TABLE
    (
        SpeciesMasterID BIGINT NOT NULL,
        HerdMasterID BIGINT NOT NULL,
        SpeciesTypeID BIGINT NOT NULL,
        SickAnimalQuantity INT NULL,
        TotalAnimalQuantity INT NULL,
        DeadAnimalQuantity INT NULL,
        StartOfSignsDate DATETIME NULL,
        AverageAge NVARCHAR(200) NULL,
        ObservationID BIGINT NULL,
        RowStatus INT NULL,
        RowAction CHAR(1) NULL
    );
    DECLARE @FarmAfterEdit TABLE
    (
        FarmActualID BIGINT,
        AvianFarmTypeID BIGINT,
        AvianProductionTypeID BIGINT,
        FarmCategoryTypeID BIGINT,
        OwnershipStructureTypeID BIGINT,
        MovementPatternTypeID BIGINT,
        IntendedUseTypeID BIGINT,
        GrazingPatternTypeID BIGINT,
        LivestockProductionTypeID BIGINT,
        HumanActualID BIGINT,
        FarmAddressID BIGINT,
        InternationalName NVARCHAR(200),
        NationalName NVARCHAR(200),
        EIDSSFarmID NVARCHAR(200),
        Fax NVARCHAR(200),
        Email NVARCHAR(200),
        ContactPhone NVARCHAR(200),
        LivestockTotalAnimalQuantity INT,
        AvianTotalAnimalQuantity INT,
        LivestockSickAnimalQuantity INT,
        AvianSickAnimalQuantity INT,
        LivestockDeadAnimalQuantity INT,
        AvianDeadAnimalQuantity INT,
        BuidingsQuantity INT,
        BirdsPerBuildingQuantity INT,
        Note NVARCHAR(2000),
        AccessoryCode INT,
        ModificationDate DATETIME
    );
    DECLARE @FarmBeforeEdit TABLE
    (
        FarmActualID BIGINT,
        AvianFarmTypeID BIGINT,
        AvianProductionTypeID BIGINT,
        FarmCategoryTypeID BIGINT,
        OwnershipStructureTypeID BIGINT,
        MovementPatternTypeID BIGINT,
        IntendedUseTypeID BIGINT,
        GrazingPatternTypeID BIGINT,
        LivestockProductionTypeID BIGINT,
        HumanActualID BIGINT,
        FarmAddressID BIGINT,
        InternationalName NVARCHAR(200),
        NationalName NVARCHAR(200),
        EIDSSFarmID NVARCHAR(200),
        Fax NVARCHAR(200),
        Email NVARCHAR(200),
        ContactPhone NVARCHAR(200),
        LivestockTotalAnimalQuantity INT,
        AvianTotalAnimalQuantity INT,
        LivestockSickAnimalQuantity INT,
        AvianSickAnimalQuantity INT,
        LivestockDeadAnimalQuantity INT,
        AvianDeadAnimalQuantity INT,
        BuidingsQuantity INT,
        BirdsPerBuildingQuantity INT,
        Note NVARCHAR(2000),
        AccessoryCode INT,
        ModificationDate DATETIME
    );
    BEGIN TRY
        BEGIN TRANSACTION;

        SET @AuditUser = ISNULL(@AuditUser, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo;
        -- End data audit

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbFarmActual
            WHERE idfFarmActual = @FarmMasterID
                  AND intRowStatus = 0
        )
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbFarmActual',
                                              @idfsKey = @FarmMasterID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Farm',
                                               @NextNumberValue = @EIDSSFarmID OUTPUT,
                                               @InstallationSite = NULL;

            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type
        END
        ELSE
        BEGIN
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                  @AuditSiteID,
                                                  @DataAuditEventTypeID,
                                                  @ObjectTypeID,
                                                  @FarmMasterID,
                                                  @ObjectTableID,
                                                  @EIDSSFarmID, 
                                                  @DataAuditEventID OUTPUT;
        -- End data audit

        -- Set farm address 
        IF @FarmAddressIdfsLocation IS NOT NULL
            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING @FarmAddressID OUTPUT,
                                                        @DataAuditEventID,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        @FarmAddressIdfsLocation,
                                                        @FarmAddressApartment,
                                                        @FarmAddressBuilding,
                                                        @FarmAddressStreet,
                                                        @FarmAddressHouse,
                                                        @FarmAddressPostalCode,
                                                        NULL,
                                                        NULL,
                                                        @FarmAddressLatitude,
                                                        @FarmAddressLongitude,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        @ForeignAddressIndicator,
                                                        NULL,
                                                        1,
                                                        @AuditUser;

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbFarmActual
            WHERE idfFarmActual = @FarmMasterID
                  AND intRowStatus = 0
        )
        BEGIN
            INSERT INTO dbo.tlbFarmActual
            (
                idfFarmActual,
                idfsAvianFarmType,
                idfsAvianProductionType,
                idfsFarmCategory,
                idfsOwnershipStructure,
                idfsMovementPattern,
                idfsIntendedUse,
                idfsGrazingPattern,
                idfsLivestockProductionType,
                idfHumanActual,
                idfFarmAddress,
                strInternationalName,
                strNationalName,
                strFarmCode,
                strFax,
                strEmail,
                strContactPhone,
                intLivestockTotalAnimalQty,
                intAvianTotalAnimalQty,
                intLivestockSickAnimalQty,
                intAvianSickAnimalQty,
                intLivestockDeadAnimalQty,
                intAvianDeadAnimalQty,
                intBuidings,
                intBirdsPerBuilding,
                strNote,
                rowguid,
                intRowStatus,
                intHACode,
                datModificationDate,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@FarmMasterID,
             @AvianFarmTypeID,
             @AvianProductionTypeID,
             @FarmCategory,
             @OwnershipStructureTypeID,
             NULL,
             NULL,
             NULL,
             NULL,
             @FarmOwnerID,
             @FarmAddressID,
             @FarmInterNationalName,
             @FarmNationalName,
             @EIDSSFarmID,
             @Fax,
             @Email,
             @Phone,
             0  ,
             0  ,
             0  ,
             0  ,
             0  ,
             0  ,
             @NumberOfBuildings,
             @NumberOfBirdsPerBuilding,
             NULL,
             NEWID(),
             0  ,
             NULL,
             GETDATE(),
             NULL,
             NULL,
             10519001,
             '[{"idfFarmActual":' + CAST(@FarmMasterID AS NVARCHAR(300)) + '}]',
             @AuditUser,
             GETDATE(),
             @AuditUser,
             GETDATE()
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @FarmMasterID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUser,
             @EIDSSFarmID
            );
        -- End data audit
        END
        ELSE
        BEGIN
            IF @EIDSSFarmID IS NULL
               OR @EIDSSFarmID = ''
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Farm',
                                                   @NextNumberValue = @EIDSSFarmID OUTPUT,
                                                   @InstallationSite = NULL;
            END;

            INSERT INTO @FarmBeforeEdit
            (
                FarmActualID,
                AvianFarmTypeID,
                AvianProductionTypeID,
                FarmCategoryTypeID,
                OwnershipStructureTypeID,
                MovementPatternTypeID,
                IntendedUseTypeID,
                GrazingPatternTypeID,
                LivestockProductionTypeID,
                HumanActualID,
                FarmAddressID,
                InternationalName,
                NationalName,
                EIDSSFarmID,
                Fax,
                Email,
                ContactPhone,
                LivestockTotalAnimalQuantity,
                AvianTotalAnimalQuantity,
                LivestockSickAnimalQuantity,
                AvianSickAnimalQuantity,
                LivestockDeadAnimalQuantity,
                AvianDeadAnimalQuantity,
                BuidingsQuantity,
                BirdsPerBuildingQuantity,
                Note,
                AccessoryCode,
                ModificationDate
            )
            SELECT idfFarmActual,
                   idfsAvianFarmType,
                   idfsAvianProductionType,
                   idfsFarmCategory,
                   idfsOwnershipStructure,
                   idfsMovementPattern,
                   idfsIntendedUse,
                   idfsGrazingPattern,
                   idfsLivestockProductionType,
                   idfHumanActual,
                   idfFarmAddress,
                   strInternationalName,
                   strNationalName,
                   strFarmCode,
                   strFax,
                   strEmail,
                   strContactPhone,
                   intLivestockTotalAnimalQty,
                   intAvianTotalAnimalQty,
                   intLivestockSickAnimalQty,
                   intAvianSickAnimalQty,
                   intLivestockDeadAnimalQty,
                   intAvianDeadAnimalQty,
                   intBuidings,
                   intBirdsPerBuilding,
                   strNote,
                   intHACode,
                   datModificationDate
            FROM dbo.tlbFarmActual
            WHERE idfFarmActual = @FarmMasterID;

            UPDATE dbo.tlbFarmActual
            SET idfsAvianFarmType = @AvianFarmTypeID,
                idfsAvianProductionType = @AvianProductionTypeID,
                idfsFarmCategory = @FarmCategory,
                idfHumanActual = @FarmOwnerID,
                idfFarmAddress = @FarmAddressID,
                strNationalName = @FarmNationalName,
                strInternationalName = @FarmInterNationalName,
                strFarmCode = @EIDSSFarmID,
                idfsOwnershipStructure = @OwnershipStructureTypeID,
                strFax = @Fax,
                strEmail = @Email,
                strContactPhone = @Phone,
                datModificationDate = GETDATE(),
                intBuidings = @NumberOfBuildings,
                intBirdsPerBuilding = @NumberOfBirdsPerBuilding,
                AuditUpdateUser = @AuditUser,
                AuditUpdateDTM = GETDATE()
            WHERE idfFarmActual = @FarmMasterID;

            INSERT INTO @FarmAfterEdit
            (
                FarmActualID,
                AvianFarmTypeID,
                AvianProductionTypeID,
                FarmCategoryTypeID,
                OwnershipStructureTypeID,
                MovementPatternTypeID,
                IntendedUseTypeID,
                GrazingPatternTypeID,
                LivestockProductionTypeID,
                HumanActualID,
                FarmAddressID,
                InternationalName,
                NationalName,
                EIDSSFarmID,
                Fax,
                Email,
                ContactPhone,
                LivestockTotalAnimalQuantity,
                AvianTotalAnimalQuantity,
                LivestockSickAnimalQuantity,
                AvianSickAnimalQuantity,
                LivestockDeadAnimalQuantity,
                AvianDeadAnimalQuantity,
                BuidingsQuantity,
                BirdsPerBuildingQuantity,
                Note,
                AccessoryCode,
                ModificationDate
            )
            SELECT idfFarmActual,
                   idfsAvianFarmType,
                   idfsAvianProductionType,
                   idfsFarmCategory,
                   idfsOwnershipStructure,
                   idfsMovementPattern,
                   idfsIntendedUse,
                   idfsGrazingPattern,
                   idfsLivestockProductionType,
                   idfHumanActual,
                   idfFarmAddress,
                   strInternationalName,
                   strNationalName,
                   strFarmCode,
                   strFax,
                   strEmail,
                   strContactPhone,
                   intLivestockTotalAnimalQty,
                   intAvianTotalAnimalQty,
                   intLivestockSickAnimalQty,
                   intAvianSickAnimalQty,
                   intLivestockDeadAnimalQty,
                   intAvianDeadAnimalQty,
                   intBuidings,
                   intBirdsPerBuilding,
                   strNote,
                   intHACode,
                   datModificationDate
            FROM dbo.tlbFarmActual
            WHERE idfFarmActual = @FarmMasterID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572810000000,
                   a.FarmActualID,
                   NULL,
                   b.AvianFarmTypeID,
                   a.AvianFarmTypeID, 
                   @AuditUser, 
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.AvianFarmTypeID <> b.AvianFarmTypeID)
                  OR (
                         a.AvianFarmTypeID IS NOT NULL
                         AND b.AvianFarmTypeID IS NULL
                     )
                  OR (
                         a.AvianFarmTypeID IS NULL
                         AND b.AvianFarmTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572820000000,
                   a.FarmActualID,
                   NULL,
                   b.AvianProductionTypeID,
                   a.AvianProductionTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.AvianProductionTypeID <> b.AvianProductionTypeID)
                  OR (
                         a.AvianProductionTypeID IS NOT NULL
                         AND b.AvianProductionTypeID IS NULL
                     )
                  OR (
                         a.AvianProductionTypeID IS NULL
                         AND b.AvianProductionTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572830000000,
                   a.FarmActualID,
                   NULL,
                   b.FarmCategoryTypeID,
                   a.FarmCategoryTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.FarmCategoryTypeID <> b.FarmCategoryTypeID)
                  OR (
                         a.FarmCategoryTypeID IS NOT NULL
                         AND b.FarmCategoryTypeID IS NULL
                     )
                  OR (
                         a.FarmCategoryTypeID IS NULL
                         AND b.FarmCategoryTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572840000000,
                   a.FarmActualID,
                   NULL,
                   b.OwnershipStructureTypeID,
                   a.OwnershipStructureTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.OwnershipStructureTypeID <> b.OwnershipStructureTypeID)
                  OR (
                         a.OwnershipStructureTypeID IS NOT NULL
                         AND b.OwnershipStructureTypeID IS NULL
                     )
                  OR (
                         a.OwnershipStructureTypeID IS NULL
                         AND b.OwnershipStructureTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572850000000,
                   a.FarmActualID,
                   NULL,
                   b.MovementPatternTypeID,
                   a.MovementPatternTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.MovementPatternTypeID <> b.MovementPatternTypeID)
                  OR (
                         a.MovementPatternTypeID IS NOT NULL
                         AND b.MovementPatternTypeID IS NULL
                     )
                  OR (
                         a.MovementPatternTypeID IS NULL
                         AND b.MovementPatternTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572860000000,
                   a.FarmActualID,
                   NULL,
                   b.IntendedUseTypeID,
                   a.IntendedUseTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.IntendedUseTypeID <> b.IntendedUseTypeID)
                  OR (
                         a.IntendedUseTypeID IS NOT NULL
                         AND b.IntendedUseTypeID IS NULL
                     )
                  OR (
                         a.IntendedUseTypeID IS NULL
                         AND b.IntendedUseTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572870000000,
                   a.FarmActualID,
                   NULL,
                   b.GrazingPatternTypeID,
                   a.GrazingPatternTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.GrazingPatternTypeID <> b.GrazingPatternTypeID)
                  OR (
                         a.GrazingPatternTypeID IS NOT NULL
                         AND b.GrazingPatternTypeID IS NULL
                     )
                  OR (
                         a.GrazingPatternTypeID IS NULL
                         AND b.GrazingPatternTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572880000000,
                   a.FarmActualID,
                   NULL,
                   b.LivestockProductionTypeID,
                   a.LivestockProductionTypeID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.LivestockProductionTypeID <> b.LivestockProductionTypeID)
                  OR (
                         a.LivestockProductionTypeID IS NOT NULL
                         AND b.LivestockProductionTypeID IS NULL
                     )
                  OR (
                         a.LivestockProductionTypeID IS NULL
                         AND b.LivestockProductionTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572890000000,
                   a.FarmActualID,
                   NULL,
                   b.HumanActualID,
                   a.HumanActualID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.HumanActualID <> b.HumanActualID)
                  OR (
                         a.HumanActualID IS NOT NULL
                         AND b.HumanActualID IS NULL
                     )
                  OR (
                         a.HumanActualID IS NULL
                         AND b.HumanActualID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572900000000,
                   a.FarmActualID,
                   NULL,
                   b.FarmAddressID,
                   a.FarmAddressID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.FarmAddressID <> b.FarmAddressID)
                  OR (
                         a.FarmAddressID IS NOT NULL
                         AND b.FarmAddressID IS NULL
                     )
                  OR (
                         a.FarmAddressID IS NULL
                         AND b.FarmAddressID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572920000000,
                   a.FarmActualID,
                   NULL,
                   b.InternationalName,
                   a.InternationalName,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.InternationalName <> b.InternationalName)
                  OR (
                         a.InternationalName IS NOT NULL
                         AND b.InternationalName IS NULL
                     )
                  OR (
                         a.InternationalName IS NULL
                         AND b.InternationalName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572930000000,
                   a.FarmActualID,
                   NULL,
                   b.NationalName,
                   a.NationalName,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.NationalName <> b.NationalName)
                  OR (
                         a.NationalName IS NOT NULL
                         AND b.NationalName IS NULL
                     )
                  OR (
                         a.NationalName IS NULL
                         AND b.NationalName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572940000000,
                   a.FarmActualID,
                   NULL,
                   b.EIDSSFarmID,
                   a.EIDSSFarmID,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.EIDSSFarmID <> b.EIDSSFarmID)
                  OR (
                         a.EIDSSFarmID IS NOT NULL
                         AND b.EIDSSFarmID IS NULL
                     )
                  OR (
                         a.EIDSSFarmID IS NULL
                         AND b.EIDSSFarmID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572950000000,
                   a.FarmActualID,
                   NULL,
                   b.Fax,
                   a.Fax,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.Fax <> b.Fax)
                  OR (
                         a.Fax IS NOT NULL
                         AND b.Fax IS NULL
                     )
                  OR (
                         a.Fax IS NULL
                         AND b.Fax IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572960000000,
                   a.FarmActualID,
                   NULL,
                   b.Email,
                   a.Email,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.Email <> b.Email)
                  OR (
                         a.Email IS NOT NULL
                         AND b.Email IS NULL
                     )
                  OR (
                         a.Email IS NULL
                         AND b.Email IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572970000000,
                   a.FarmActualID,
                   NULL,
                   b.ContactPhone,
                   a.ContactPhone,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.ContactPhone <> b.ContactPhone)
                  OR (
                         a.ContactPhone IS NOT NULL
                         AND b.ContactPhone IS NULL
                     )
                  OR (
                         a.ContactPhone IS NULL
                         AND b.ContactPhone IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573010000000,
                   a.FarmActualID,
                   NULL,
                   b.LivestockTotalAnimalQuantity,
                   a.LivestockTotalAnimalQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.LivestockTotalAnimalQuantity <> b.LivestockTotalAnimalQuantity)
                  OR (
                         a.LivestockTotalAnimalQuantity IS NOT NULL
                         AND b.LivestockTotalAnimalQuantity IS NULL
                     )
                  OR (
                         a.LivestockTotalAnimalQuantity IS NULL
                         AND b.LivestockTotalAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573020000000,
                   a.FarmActualID,
                   NULL,
                   b.AvianTotalAnimalQuantity,
                   a.AvianTotalAnimalQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.AvianTotalAnimalQuantity <> b.AvianTotalAnimalQuantity)
                  OR (
                         a.AvianTotalAnimalQuantity IS NOT NULL
                         AND b.AvianTotalAnimalQuantity IS NULL
                     )
                  OR (
                         a.AvianTotalAnimalQuantity IS NULL
                         AND b.AvianTotalAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573030000000,
                   a.FarmActualID,
                   NULL,
                   b.LivestockSickAnimalQuantity,
                   a.LivestockSickAnimalQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.LivestockSickAnimalQuantity <> b.LivestockSickAnimalQuantity)
                  OR (
                         a.LivestockSickAnimalQuantity IS NOT NULL
                         AND b.LivestockSickAnimalQuantity IS NULL
                     )
                  OR (
                         a.LivestockSickAnimalQuantity IS NULL
                         AND b.LivestockSickAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573040000000,
                   a.FarmActualID,
                   NULL,
                   b.AvianSickAnimalQuantity,
                   a.AvianSickAnimalQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.AvianSickAnimalQuantity <> b.AvianSickAnimalQuantity)
                  OR (
                         a.AvianSickAnimalQuantity IS NOT NULL
                         AND b.AvianSickAnimalQuantity IS NULL
                     )
                  OR (
                         a.AvianSickAnimalQuantity IS NULL
                         AND b.AvianSickAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573050000000,
                   a.FarmActualID,
                   NULL,
                   b.LivestockDeadAnimalQuantity,
                   a.LivestockDeadAnimalQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.LivestockDeadAnimalQuantity <> b.LivestockDeadAnimalQuantity)
                  OR (
                         a.LivestockDeadAnimalQuantity IS NOT NULL
                         AND b.LivestockDeadAnimalQuantity IS NULL
                     )
                  OR (
                         a.LivestockDeadAnimalQuantity IS NULL
                         AND b.LivestockDeadAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573060000000,
                   a.FarmActualID,
                   NULL,
                   b.AvianDeadAnimalQuantity,
                   a.AvianDeadAnimalQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.AvianDeadAnimalQuantity <> b.AvianDeadAnimalQuantity)
                  OR (
                         a.AvianDeadAnimalQuantity IS NOT NULL
                         AND b.AvianDeadAnimalQuantity IS NULL
                     )
                  OR (
                         a.AvianDeadAnimalQuantity IS NULL
                         AND b.AvianDeadAnimalQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573070000000,
                   a.FarmActualID,
                   NULL,
                   b.BuidingsQuantity,
                   a.BuidingsQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.BuidingsQuantity <> b.BuidingsQuantity)
                  OR (
                         a.BuidingsQuantity IS NOT NULL
                         AND b.BuidingsQuantity IS NULL
                     )
                  OR (
                         a.BuidingsQuantity IS NULL
                         AND b.BuidingsQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573080000000,
                   a.FarmActualID,
                   NULL,
                   b.BirdsPerBuildingQuantity,
                   a.BirdsPerBuildingQuantity,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.BirdsPerBuildingQuantity <> b.BirdsPerBuildingQuantity)
                  OR (
                         a.BirdsPerBuildingQuantity IS NOT NULL
                         AND b.BirdsPerBuildingQuantity IS NULL
                     )
                  OR (
                         a.BirdsPerBuildingQuantity IS NULL
                         AND b.BirdsPerBuildingQuantity IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4573090000000,
                   a.FarmActualID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51389490000000,
                   a.FarmActualID,
                   NULL,
                   b.AccessoryCode,
                   a.AccessoryCode,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.AccessoryCode <> b.AccessoryCode)
                  OR (
                         a.AccessoryCode IS NOT NULL
                         AND b.AccessoryCode IS NULL
                     )
                  OR (
                         a.AccessoryCode IS NULL
                         AND b.AccessoryCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51389500000000,
                   a.FarmActualID,
                   NULL,
                   b.ModificationDate,
                   a.ModificationDate,
                   @AuditUser,
                   @EIDSSFarmID
            FROM @FarmAfterEdit AS a
                FULL JOIN @FarmBeforeEdit AS b
                    ON a.FarmActualID = b.FarmActualID
            WHERE (a.ModificationDate <> b.ModificationDate)
                  OR (
                         a.ModificationDate IS NOT NULL
                         AND b.ModificationDate IS NULL
                     )
                  OR (
                         a.ModificationDate IS NULL
                         AND b.ModificationDate IS NOT NULL
                     );
        END;

        INSERT INTO @HerdOrFlockMasterTemp
        SELECT *
        FROM
            OPENJSON(@HerdsOrFlocks)
            WITH
            (
                HerdMasterID BIGINT,
                EIDSSHerdID NVARCHAR(200),
                FarmMasterID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction CHAR
            );

        INSERT INTO @SpeciesMasterTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesMasterID BIGINT,
                HerdMasterID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                RowStatus INT,
                RowAction CHAR
            );

        ----  Process the herd
        WHILE EXISTS (SELECT * FROM @HerdOrFlockMasterTemp)
        BEGIN
            SELECT TOP 1
                @RowID = HerdMasterID,
                @HerdMasterID = HerdMasterID,
                @EIDSSHerdID = EIDSSHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @HerdOrFlockMasterTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_MASTER_SET @AuditUser = @AuditUser,
                                                 @HerdMasterID = @HerdMasterID OUTPUT,
                                                 @FarmMasterID = @FarmMasterID,
                                                 @EIDSSHerdID = @EIDSSHerdID OUTPUT,
                                                 @SickAnimalQuantity = @SickAnimalQuantity,
                                                 @TotalAnimalQuantity = @TotalAnimalQuantity,
                                                 @DeadAnimalQuantity = @DeadAnimalQuantity,
                                                 @Note = NULL,
                                                 @Rowstatus = @RowStatus,
                                                 @RowAction = @RowAction;

            IF @RowAction = 'I'
            BEGIN
                UPDATE @SpeciesMasterTemp
                SET HerdMasterID = @HerdMasterID
                WHERE HerdMasterID = @RowID;
            END

            DELETE FROM @HerdOrFlockMasterTemp
            WHERE HerdMasterID = @RowID;
        END;

        ----  Process the Species
        WHILE EXISTS (SELECT * FROM @SpeciesMasterTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesMasterID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @SpeciesMasterTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_MASTER_SET @AuditUser = @AuditUser,
                                                    @SpeciesMasterID = @SpeciesMasterID OUTPUT,
                                                    @SpeciesTypeID = @SpeciesTypeID,
                                                    @HerdMasterID = @HerdMasterID,
                                                    @StartOfSignsDate = @StartOfSignsDate,
                                                    @AverageAge = @AverageAge,
                                                    @SickAnimalQuantity = @SickAnimalQuantity,
                                                    @TotalAnimalQuantity = @TotalAnimalQuantity,
                                                    @DeadAnimalQuantity = @DeadAnimalQuantity,
                                                    @Note = NULL,
                                                    @RowStatus = @RowStatus,
                                                    @RowAction = @RowAction;

            DELETE FROM @SpeciesMasterTemp
            WHERE SpeciesMasterID = @RowID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @FarmMasterID SessionKey,
               @EIDSSFarmID SessionID;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_LAB_SAMPLE_SET]...';


GO
-- ================================================================================================
-- Name: USSP_LAB_SAMPLE_SET
--
-- Description:	Inserts or updates sample records for various laboratory module use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/08/2018 Initial release.
-- Stephen Long		01/24/2019 Added storage box place to support the location in the freezer 
--                             subdivision.  Changed freezer ID to freezer subdivision ID.
-- Stephen Long     01/30/2019 Added disease ID parameter and to insert/update statements.
-- Stephen Long     02/21/2019 Added root sample ID and sample kind type ID.
-- Stephen Long     03/08/2019 Added row action 'D' for aliquot/derivative, so new lab sample ID 
--                             is not created, rather a number or country decides on a customized 
--                             method.
-- Stephen Long     03/28/2019 Added parameter @EIDSSLaboratorySampleID for aliquots/derivatives. 
--                             These are assigned in the EIDSS application from the derived off of
--                             the original (parent) sample ID.
-- Stephen Long     04/16/2019 Added copy of human master to human for new sample records.
-- Stephen Long     07/09/2019 Added human master ID parameter.  Updated human copy call.
-- Stephen Long     08/29/2019 Corrected root sample ID on insert portion.
-- Stephen Long     11/05/2019 Set root sample ID to sample ID when aliquot/derivative action.
-- Stephen Long     03/11/2020 Changed entered date to use GETDATE on insert.
-- Stephen Long     03/17/2020 Added logic to process transferred out sample's status.
-- Stephen Long     03/18/2020 Added logic to mark transfer final when sample accessioned in or 
--                             rejected at the receiving laboratory.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
--                             Removed setting of root sample ID to sample ID of parent when 
--                             aliquot/derivative row action.  Root sample ID set to parent sample 
--                             ID in the application.
-- Stephen Long     04/17/2020 Renamed original sample ID to parent sample ID to be inline with the
--                             business terminology. Root is more along the line of original.  Also
--                             changed not to set the parent sample ID unless it is an aliquot/
--                             derivative which is handled in the app.
-- Stephen Long     05/05/2020 Removed update of transfer sample out record.  Handled in the 
--                             application.
-- Stephen Long     07/06/2020 Add set of lab module source indicator.
-- Stephen Long     09/03/2020 Removal of laboratory sample ID next number get call for 
--                             samples being accessioned and saved.  The laboratory sample ID get
--                             call has been moved to occur prior to save.
-- Stephen Long     09/24/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     01/07/2022 Removed copy human actual to human; moved to parent stored 
--                             procedure.
-- Stephen Long     01/31/2022 Added source system name and key value update on insert.
-- Stephen Long     05/23/2022 Commented out update of disease ID; should never happen in the lab 
--                             module.
-- Stephen Long     10/01/2022 Changed to set EIDSS lab sample ID on a rejected sample.  Business 
--                             requirement retained from 6.1.
-- Stephen Long     01/03/2023 Added update to specimen collected field on human disease report 
--                             when a sample is added.
-- Stephen Long     02/07/2023 Fix to not populate strBarcode when sample is rejected.
-- Stephen Long     02/20/2023 Added data audit logic for SAUC30 and 31.
-- Stephen Long     03/28/2023 Fixed test completed and unassigned indicator.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_LAB_SAMPLE_SET]
(
    @SampleID BIGINT OUTPUT,
    @SampleTypeID BIGINT,
    @RootSampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @HumanMasterID BIGINT = NULL,
    @HumanID BIGINT = NULL,
    @FarmMasterID BIGINT = NULL,
    @FarmID BIGINT = NULL,
    @SpeciesID BIGINT = NULL,
    @AnimalID BIGINT = NULL,
    @VectorID BIGINT = NULL,
    @VectorTypeID BIGINT = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @EIDSSVectorID NVARCHAR(50) = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @CollectionDate DATETIME = NULL,
    @CollectedByPersonID BIGINT = NULL,
    @CollectedByOrganizationID BIGINT = NULL,
    @SentDate DATETIME = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SiteID BIGINT,
    @FunctionalAreaID BIGINT = NULL,
    @FreezerSubdivisionID BIGINT = NULL,
    @StorageBoxPlace NVARCHAR(200) = NULL,
    @EnteredDate DATETIME = NULL,
    @OutOfRepositoryDate DATETIME = NULL,
    @MarkedForDispositionByPersonID BIGINT = NULL,
    @DestructionDate DATETIME = NULL,
    @DestructionMethodTypeID BIGINT = NULL,
    @DestroyedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @AccessionDate DATETIME = NULL,
    @AccessionConditionTypeID BIGINT = NULL,
    @AccessionByPersonID BIGINT = NULL,
    @SampleStatusTypeID BIGINT = NULL,
    @PreviousSampleStatusTypeID BIGINT = NULL,
    @AccessionComment NVARCHAR(200) = NULL,
    @Note NVARCHAR(500) = NULL,
    @CurrentSiteID BIGINT = NULL,
    @SampleKindTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @RowStatus INT,
    @RowAction INT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @MonitoringSessionToMaterialID BIGINT = NULL,
                                                                       -- Data audit
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = NULL,
                @ObjectID BIGINT = NULL,
                @ObjectTableSampleID BIGINT = 75620000000,             -- tlbMaterial
                @ObjectTableVectorID BIGINT = 4575310000000,           -- tlbVector
                @ObjectTableTransferOutID BIGINT = 75770000000,        -- tlbTransferOUT, 
                @ObjectTableHumanDiseaseReportID BIGINT = 75610000000, -- tlbHumanCase,
                @ObjectTableHumanID BIGINT = 75600000000,              -- tlbHuman
                @ObjectTableFarmID BIGINT = 75550000000,               -- tlbFarm
                @EIDSSObjectID NVARCHAR(200);
        -- End data audit

        DECLARE @SampleBeforeEdit TABLE
        (
            SampleID BIGINT,
            SampleTypeID BIGINT,
            RootSampleID BIGINT,
            ParentSampleID BIGINT,
            HumanID BIGINT,
            SpeciesID BIGINT,
            AnimalID BIGINT,
            MonitoringSessionID BIGINT,
            FieldCollectedByPersonID BIGINT,
            FieldCollectedByOfficeID BIGINT,
            MainTestID BIGINT,
            FieldCollectionDate DATETIME,
            FieldSentDate DATETIME,
            FieldBarcodeID NVARCHAR(200),
            CalculatedCaseID NVARCHAR(200),
            CalculatedHumanName NVARCHAR(700),
            VectorSurveillanceSessionID BIGINT,
            VectorID BIGINT,
            SubdivisionID BIGINT,
            SampleStatusTypeID BIGINT,
            DepartmentID BIGINT,
            DestroyedByPersonID BIGINT,
            EnteringDate DATETIME,
            DestructionDate DATETIME,
            BarcodeID NVARCHAR(200),
            Note NVARCHAR(500),
            SendToOfficeID BIGINT,
            ReadOnlyIndicator BIT,
            BirdStatusTypeID BIGINT,
            HumanDiseaseReportID BIGINT,
            VeterinaryDiseaseReportID BIGINT,
            AccessionDate DATETIME,
            AccessionConditionTypeID BIGINT,
            Condition NVARCHAR(200),
            AccessionByPersonID BIGINT,
            DestructionMethodTypeID BIGINT,
            CurrentSiteID BIGINT,
            SampleKindTypeID BIGINT,
            AccessionIndicator INT,
            ShowInCaseOrSessionIndicator INT,
            ShowInLabListIndicator INT,
            ShowInDispositionListIndicator INT,
            ShowInAccessionInFormIndicator INT,
            MarkedForDispositionByPersonID BIGINT,
            OutOfRepositoryDate DATETIME,
            SampleStatusDate DATETIME,
            RowStatus INT,
            StorageBoxPlace NVARCHAR(200),
            PreviousSampleStatusTypeID BIGINT,
            DiseaseID BIGINT,
            LabModuleSourceIndicator BIT,
            TestUnassignedIndicator BIT,
            TestCompletedIndicator BIT,
            TransferIndicator BIT
        );
        DECLARE @SampleAfterEdit TABLE
        (
            SampleID BIGINT,
            SampleTypeID BIGINT,
            RootSampleID BIGINT,
            ParentSampleID BIGINT,
            HumanID BIGINT,
            SpeciesID BIGINT,
            AnimalID BIGINT,
            MonitoringSessionID BIGINT,
            FieldCollectedByPersonID BIGINT,
            FieldCollectedByOfficeID BIGINT,
            MainTestID BIGINT,
            FieldCollectionDate DATETIME,
            FieldSentDate DATETIME,
            FieldBarcodeID NVARCHAR(200),
            CalculatedCaseID NVARCHAR(200),
            CalculatedHumanName NVARCHAR(700),
            VectorSurveillanceSessionID BIGINT,
            VectorID BIGINT,
            SubdivisionID BIGINT,
            SampleStatusTypeID BIGINT,
            DepartmentID BIGINT,
            DestroyedByPersonID BIGINT,
            EnteringDate DATETIME,
            DestructionDate DATETIME,
            BarcodeID NVARCHAR(200),
            Note NVARCHAR(500),
            SendToOfficeID BIGINT,
            ReadOnlyIndicator BIT,
            BirdStatusTypeID BIGINT,
            HumanDiseaseReportID BIGINT,
            VeterinaryDiseaseReportID BIGINT,
            AccessionDate DATETIME,
            AccessionConditionTypeID BIGINT,
            Condition NVARCHAR(200),
            AccessionByPersonID BIGINT,
            DestructionMethodTypeID BIGINT,
            CurrentSiteID BIGINT,
            SampleKindTypeID BIGINT,
            AccessionIndicator INT,
            ShowInCaseOrSessionIndicator INT,
            ShowInLabListIndicator INT,
            ShowInDispositionListIndicator INT,
            ShowInAccessionInFormIndicator INT,
            MarkedForDispositionByPersonID BIGINT,
            OutOfRepositoryDate DATETIME,
            SampleStatusDate DATETIME,
            RowStatus INT,
            StorageBoxPlace NVARCHAR(200),
            PreviousSampleStatusTypeID BIGINT,
            DiseaseID BIGINT,
            LabModuleSourceIndicator BIT,
            TestUnassignedIndicator BIT,
            TestCompletedIndicator BIT,
            TransferIndicator BIT
        );
        DECLARE @TransferBeforeEdit TABLE
        (
            TransferID BIGINT,
            TransferStatusTypeID BIGINT
        );
        DECLARE @TransferAfterEdit TABLE
        (
            TransferID BIGINT,
            TransferStatusTypeID BIGINT
        );
        DECLARE @HumanDiseaseReportBeforeEdit TABLE
        (
            HumanDiseaseReportID BIGINT,
            SpecimenCollectedTypeID BIGINT NULL
        );
        DECLARE @HumanDiseaseReportAfterEdit TABLE
        (
            HumanDiseaseReportID BIGINT,
            SpecimenCollectedTypeID BIGINT NULL
        );
        DECLARE @FarmBeforeEdit TABLE
        (
            FarmID BIGINT,
            MonitoringSessionID BIGINT NULL
        );
        DECLARE @FarmAfterEdit TABLE
        (
            FarmID BIGINT,
            MonitoringSessionID BIGINT NULL
        );
        DECLARE @HumanBeforeEdit TABLE
        (
            HumanID BIGINT,
            MonitoringSessionID BIGINT NULL
        );
        DECLARE @HumanAfterEdit TABLE
        (
            HumanID BIGINT,
            MonitoringSessionID BIGINT NULL
        );

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        -- Data audit
        IF @RowAction = 1 -- Standard insert
           OR @RowAction = 5 -- Insert and accession (LUC01)
           OR @RowAction = 6 -- Create aliquot/derivative and accession (LUC02)
           OR @RowAction = 7 -- Create transfer in sample and do not accession (LUC03)
        BEGIN
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            --Local/field sample EIDSS ID. Only system assign when user leaves blank.
            IF @RowAction = 1
            BEGIN
                IF @EIDSSLocalOrFieldSampleID IS NULL
                   OR @EIDSSLocalOrFieldSampleID = ''
                BEGIN
                    EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Sample Field Barcode',
                                                       @NextNumberValue = @EIDSSLocalOrFieldSampleID OUTPUT,
                                                       @InstallationSite = NULL;
                END
            END

            IF @RowAction = 5
            BEGIN
                SET @ObjectTypeID = 10017001; -- Accession In
            END

            IF @RowAction = 6
            BEGIN
                IF @SampleKindTypeID = 12675410000000 -- Aliquot
                BEGIN
                    SET @ObjectTypeID = 10017008; -- Aliquot
                END
                ELSE
                BEGIN
                    SET @ObjectTypeID = 10017017; -- Derivative
                END
            END

            IF @RowAction = 7
            BEGIN
                SET @ObjectTypeID = 10017056; -- Sample Transfer
            END

            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbMaterial',
                                              @idfsKey = @SampleID OUTPUT;

            IF @EIDSSLaboratorySampleID IS NULL
            BEGIN
                SET @EIDSSObjectID = @EIDSSLocalOrFieldSampleID;
            END
            ELSE
            BEGIN
                SET @EIDSSObjectID = @EIDSSLaboratorySampleID;
            END

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @SampleID,
                                                      @ObjectTableSampleID,
                                                      @EIDSSObjectID,
                                                      @DataAuditEventID OUTPUT;
        END
        -- End data audit

        IF @RowAction = 1
           OR @RowAction = 5
        BEGIN
            IF @FarmMasterID IS NOT NULL -- Registering new veterinary sample with either no disease report or possibly no monitoring session.
            BEGIN
                IF @FarmID IS NULL
                BEGIN
                    DECLARE @NewFarmOwnerID BIGINT,
                            @FlockOrHerdID BIGINT;

                    EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                       @DataAuditEventID,
                                                       @EIDSSLaboratorySampleID,
                                                       @FarmMasterID,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       @HumanMasterID,
                                                       @FarmID OUTPUT,
                                                       @NewFarmOwnerID OUTPUT;

                    IF @MonitoringSessionID IS NOT NULL -- New farm added to the veterinary active surveillance session.
                    BEGIN
                        INSERT INTO @FarmBeforeEdit
                        SELECT idfFarm,
                               idfMonitoringSession
                        FROM dbo.tlbFarm
                        WHERE idfFarm = @FarmID;

                        UPDATE dbo.tlbFarm
                        SET idfMonitoringSession = @MonitoringSessionID
                        WHERE idfFarm = @FarmID;

                        INSERT INTO @FarmAfterEdit
                        SELECT idfFarm,
                               idfMonitoringSession
                        FROM dbo.tlbFarm
                        WHERE idfFarm = @FarmID;

                        INSERT INTO dbo.tauDataAuditDetailUpdate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfColumn,
                            idfObject,
                            idfObjectDetail,
                            strOldValue,
                            strNewValue,
                            AuditCreateUser,
                            strObject
                        )
                        SELECT @DataAuditEventID,
                               @ObjectTableFarmID,
                               4572180000000,
                               a.FarmID,
                               NULL,
                               b.MonitoringSessionID,
                               a.MonitoringSessionID,
                               @AuditUserName,
                               @EIDSSObjectID
                        FROM @FarmAfterEdit a
                            FULL JOIN @FarmBeforeEdit b
                                ON a.FarmID = b.FarmID
                        WHERE (a.MonitoringSessionID <> b.MonitoringSessionID)
                              OR (
                                     a.MonitoringSessionID IS NOT NULL
                                     AND b.MonitoringSessionID IS NULL
                                 )
                              OR (
                                     a.MonitoringSessionID IS NULL
                                     AND b.MonitoringSessionID IS NOT NULL
                                 );
                    END

                    SET @HumanID = @NewFarmOwnerID;
                    SET @HumanMasterID = NULL;
                END

                IF @SpeciesID IS NULL -- Adding new flock or herd and species to an existing farm.
                BEGIN
                    EXECUTE dbo.USSP_VET_FLOCK_HERD_SET @AuditUserName,
                                                        @DataAuditEventID,
                                                        @EIDSSLaboratorySampleID,
                                                        @FlockOrHerdID OUTPUT,
                                                        NULL,
                                                        @FarmID,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        0,
                                                        1;

                    EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
                                                     @DataAuditEventID,
                                                     @SpeciesID OUTPUT,
                                                     NULL,
                                                     @SpeciesTypeID,
                                                     @FlockOrHerdID,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     0,
                                                     1,
                                                     NULL;
                END
            END
            ELSE
            BEGIN
                IF @HumanMasterID IS NOT NULL -- Registering new human sample with either no disease report or possibly no active surveillance session.
                BEGIN
                    EXECUTE dbo.USSP_HUM_COPY_HUMAN_SET @HumanMasterID,
                                                        @DataAuditEventID,
                                                        @AuditUserName,
                                                        @HumanID OUTPUT,
                                                        @ReturnCode OUTPUT,
                                                        @ReturnMessage OUTPUT;

                    IF @MonitoringSessionID IS NOT NULL -- New person added to the human active surveillance session.
                    BEGIN
                        INSERT INTO @HumanBeforeEdit
                        SELECT idfHuman,
                               idfMonitoringSession
                        FROM dbo.tlbHuman
                        WHERE idfHuman = @HumanID;

                        UPDATE dbo.tlbHuman
                        SET idfMonitoringSession = @MonitoringSessionID
                        WHERE idfHuman = @HumanID;

                        INSERT INTO @HumanAfterEdit
                        SELECT idfHuman,
                               idfMonitoringSession
                        FROM dbo.tlbHuman
                        WHERE idfHuman = @HumanID;

                        INSERT INTO dbo.tauDataAuditDetailUpdate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfColumn,
                            idfObject,
                            idfObjectDetail,
                            strOldValue,
                            strNewValue,
                            AuditCreateUser,
                            strObject
                        )
                        SELECT @DataAuditEventID,
                               @ObjectTableHumanID,
                               51586990000027,
                               a.HumanID,
                               NULL,
                               b.MonitoringSessionID,
                               a.MonitoringSessionID,
                               @AuditUserName,
                               @EIDSSObjectID
                        FROM @HumanAfterEdit a
                            FULL JOIN @HumanBeforeEdit b
                                ON a.HumanID = b.HumanID
                        WHERE (a.MonitoringSessionID <> b.MonitoringSessionID)
                              OR (
                                     a.MonitoringSessionID IS NOT NULL
                                     AND b.MonitoringSessionID IS NULL
                                 )
                              OR (
                                     a.MonitoringSessionID IS NULL
                                     AND b.MonitoringSessionID IS NOT NULL
                                 );
                    END
                END
            END
        END;

        IF @VectorID < 0
           AND @SpeciesTypeID IS NOT NULL
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @VectorID OUTPUT;

            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector',
                                               @EIDSSVectorID OUTPUT,
                                               NULL;

            INSERT INTO dbo.tlbVector
            (
                idfVector,
                strVectorID,
                idfCollectedByOffice,
                idfCollectedByPerson,
                datCollectionDateTime,
                idfsVectorType,
                idfsVectorSubType,
                intQuantity,
                intRowStatus,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@VectorID,
             @EIDSSVectorID,
             @CollectedByOrganizationID,
             @CollectedByPersonID,
             @CollectionDate,
             @VectorTypeID,
             @SpeciesTypeID,
             1  ,
             0  ,
             GETDATE(),
             @AuditUserName
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableVectorID,
             @VectorID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableVectorID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSVectorID
            );
        -- End data audit
        END;

        IF @RowAction = 1 -- Standard insert
           OR @RowAction = 5 -- Insert and accession (LUC01)
           OR @RowAction = 6 -- Create aliquot/derivative and accession (LUC02)
           OR @RowAction = 7 -- Create transfer in sample and do not accession (LUC03)
        BEGIN
            IF @RowAction <> 6
               AND @RowAction <> 7
            BEGIN
                SET @RootSampleID = @SampleID;
            END

            INSERT INTO dbo.tlbMaterial
            (
                idfMaterial,
                idfsSampleType,
                idfRootMaterial,
                idfParentMaterial,
                idfHuman,
                idfSpecies,
                idfAnimal,
                idfVector,
                idfMonitoringSession,
                idfVectorSurveillanceSession,
                idfHumanCase,
                idfVetCase,
                datFieldCollectionDate,
                idfFieldCollectedByPerson,
                idfFieldCollectedByOffice,
                datFieldSentDate,
                idfSendToOffice,
                strFieldBarcode,
                strBarcode,
                idfsSite,
                idfInDepartment,
                idfSubdivision,
                StorageBoxPlace,
                datEnteringDate,
                datOutOfRepositoryDate,
                idfMarkedForDispositionByPerson,
                datDestructionDate,
                idfsDestructionMethod,
                idfDestroyedByPerson,
                blnReadOnly,
                datAccession,
                idfsAccessionCondition,
                idfAccesionByPerson,
                idfsSampleStatus,
                strCondition,
                strNote,
                idfsCurrentSite,
                idfsSampleKind,
                PreviousSampleStatusID,
                DiseaseID,
                LabModuleSourceIndicator,
                intRowStatus,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                TestCompletedIndicator, 
                TestUnassignedIndicator
            )
            VALUES
            (@SampleID,
             @SampleTypeID,
             @RootSampleID,
             @ParentSampleID,
             @HumanID,
             @SpeciesID,
             @AnimalID,
             @VectorID,
             @MonitoringSessionID,
             @VectorSessionID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @CollectionDate,
             @CollectedByPersonID,
             @CollectedByOrganizationID,
             @SentDate,
             @SentToOrganizationID,
             @EIDSSLocalOrFieldSampleID,
             @EIDSSLaboratorySampleID,
             @SiteID,
             @FunctionalAreaID,
             @FreezerSubdivisionID,
             @StorageBoxPlace,
             GETDATE(),
             @OutOfRepositoryDate,
             @MarkedForDispositionByPersonID,
             @DestructionDate,
             @DestructionMethodTypeID,
             @DestroyedByPersonID,
             @ReadOnlyIndicator,
             @AccessionDate,
             @AccessionConditionTypeID,
             @AccessionByPersonID,
             @SampleStatusTypeID,
             @AccessionComment,
             @Note,
             @CurrentSiteID,
             @SampleKindTypeID,
             @PreviousSampleStatusTypeID,
             @DiseaseID,
             1  ,
             0  ,
             10519001,
             '[{"idfMaterial":' + CAST(@SampleID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             0, 
             1
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableSampleID,
             @SampleID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableSampleID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSLaboratorySampleID
            );
            -- End data audit

            IF @HumanDiseaseReportID IS NOT NULL
            BEGIN
                INSERT INTO @HumanDiseaseReportBeforeEdit
                SELECT idfHumanCase,
                       idfsYNSpecimenCollected
                FROM dbo.tlbHumanCase
                WHERE idfHumanCase = @HumanDiseaseReportID;

                UPDATE dbo.tlbHumanCase
                SET idfsYNSpecimenCollected = 10100001,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfHumanCase = @HumanDiseaseReportID;

                INSERT INTO @HumanDiseaseReportAfterEdit
                SELECT idfHumanCase,
                       idfsYNSpecimenCollected
                FROM dbo.tlbHumanCase
                WHERE idfHumanCase = @HumanDiseaseReportID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableHumanDiseaseReportID,
                       79760000000,
                       a.HumanDiseaseReportID,
                       NULL,
                       b.SpecimenCollectedTypeID,
                       a.SpecimenCollectedTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanDiseaseReportAfterEdit a
                    FULL JOIN @HumanDiseaseReportBeforeEdit b
                        ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
                WHERE (a.SpecimenCollectedTypeID <> b.SpecimenCollectedTypeID)
                      OR (
                             a.SpecimenCollectedTypeID IS NOT NULL
                             AND b.SpecimenCollectedTypeID IS NULL
                         )
                      OR (
                             a.SpecimenCollectedTypeID IS NULL
                             AND b.SpecimenCollectedTypeID IS NOT NULL
                         );
            END

            IF (
                   @RowAction = 1 -- Register new sample
                   OR @RowAction = 5 -- Insert accession
               )
               AND @MonitoringSessionID IS NOT NULL
            BEGIN
                EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                          @DataAuditEventID,
                                                          0,
                                                          @MonitoringSessionID,
                                                          @SampleID,
                                                          @DiseaseID,
                                                          @SampleTypeID,
                                                          0,
                                                          1;
            END
            ELSE IF @RowAction = 7
                    AND @MonitoringSessionID IS NOT NULL -- Transfer a sample (creates a new sample record)
            BEGIN
                DECLARE @SamplesToDiseaseRowID BIGINT;
                DECLARE @SamplesToDiseasesTemp TABLE
                (
                    MonitoringSessionToMaterialID BIGINT NOT NULL,
                    MonitoringSessionID BIGINT NULL,
                    SampleID BIGINT NOT NULL,
                    SampleTypeID BIGINT NULL,
                    DiseaseID BIGINT NOT NULL
                );

                INSERT INTO @SamplesToDiseasesTemp
                SELECT idfMonitoringSessionToMaterial,
                       idfMonitoringSession,
                       idfMaterial,
                       idfsSampleType,
                       idfsDisease
                FROM dbo.tlbMonitoringSessionToMaterial
                WHERE idfMaterial = @RootSampleID
                      AND intRowStatus = 0;

                WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
                BEGIN
                    SELECT TOP 1
                        @SamplesToDiseaseRowID = MonitoringSessionToMaterialID,
                        @MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
                        @DiseaseID = DiseaseID
                    FROM @SamplesToDiseasesTemp;

                    EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                              @DataAuditEventID,
                                                              @MonitoringSessionToMaterialID,
                                                              @MonitoringSessionID,
                                                              @SampleID,
                                                              @DiseaseID,
                                                              @SampleTypeID,
                                                              0,
                                                              1;

                    DELETE FROM @SamplesToDiseasesTemp
                    WHERE MonitoringSessionToMaterialID = @SamplesToDiseaseRowID;
                END;
            END
        END;
        ELSE
        BEGIN
            INSERT INTO @SampleBeforeEdit
            (
                SampleID,
                SampleTypeID,
                RootSampleID,
                ParentSampleID,
                HumanID,
                SpeciesID,
                AnimalID,
                MonitoringSessionID,
                FieldCollectedByPersonID,
                FieldCollectedByOfficeID,
                MainTestID,
                FieldCollectionDate,
                FieldSentDate,
                FieldBarcodeID,
                CalculatedCaseID,
                CalculatedHumanName,
                VectorSurveillanceSessionID,
                VectorID,
                SubdivisionID,
                SampleStatusTypeID,
                DepartmentID,
                DestroyedByPersonID,
                EnteringDate,
                DestructionDate,
                BarcodeID,
                Note,
                SendToOfficeID,
                ReadOnlyIndicator,
                BirdStatusTypeID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                AccessionDate,
                AccessionConditionTypeID,
                Condition,
                AccessionByPersonID,
                DestructionMethodTypeID,
                CurrentSiteID,
                SampleKindTypeID,
                AccessionIndicator,
                ShowInCaseOrSessionIndicator,
                ShowInLabListIndicator,
                ShowInDispositionListIndicator,
                ShowInAccessionInFormIndicator,
                MarkedForDispositionByPersonID,
                OutOfRepositoryDate,
                SampleStatusDate,
                RowStatus,
                StorageBoxPlace,
                PreviousSampleStatusTypeID,
                DiseaseID,
                LabModuleSourceIndicator,
                TestUnassignedIndicator,
                TestCompletedIndicator,
                TransferIndicator
            )
            SELECT idfMaterial,
                   idfsSampleType,
                   idfRootMaterial,
                   idfParentMaterial,
                   idfHuman,
                   idfSpecies,
                   idfAnimal,
                   idfMonitoringSession,
                   idfFieldCollectedByPerson,
                   idfFieldCollectedByOffice,
                   idfMainTest,
                   datFieldCollectionDate,
                   datFieldSentDate,
                   strFieldBarcode,
                   strCalculatedCaseID,
                   strCalculatedHumanName,
                   idfVectorSurveillanceSession,
                   idfVector,
                   idfSubdivision,
                   idfsSampleStatus,
                   idfInDepartment,
                   idfDestroyedByPerson,
                   datEnteringDate,
                   datDestructionDate,
                   strBarcode,
                   strNote,
                   idfSendToOffice,
                   blnReadOnly,
                   idfsBirdStatus,
                   idfHumanCase,
                   idfVetCase,
                   datAccession,
                   idfsAccessionCondition,
                   strCondition,
                   idfAccesionByPerson,
                   idfsDestructionMethod,
                   idfsCurrentSite,
                   idfsSampleKind,
                   blnAccessioned,
                   blnShowInCaseOrSession,
                   blnShowInLabList,
                   blnShowInDispositionList,
                   blnShowInAccessionInForm,
                   idfMarkedForDispositionByPerson,
                   datOutOfRepositoryDate,
                   datSampleStatusDate,
                   intRowStatus,
                   StorageBoxPlace,
                   PreviousSampleStatusID,
                   DiseaseID,
                   LabModuleSourceIndicator,
                   TestUnassignedIndicator,
                   TestCompletedIndicator,
                   TransferIndicator
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            IF @RowAction = 4 -- Update and accession (LUC01)
            BEGIN
                SET @ObjectTypeID = 10017001; -- Accession In
            END
            ELSE IF @RowAction = 8 -- Sample Transfer
                    OR @RowAction = 9
            BEGIN
                SET @ObjectTypeID = 10017056; -- Sample Transfer
            END
            ELSE IF @RowAction = 10 -- Sample Destruction
            BEGIN
                SET @ObjectTypeID = 10017060; -- Sample Destruction
            END
            ELSE
            BEGIN
                SET @ObjectTypeID = 10017045; -- Sample
            END

            -- Data audit
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            IF @EIDSSLaboratorySampleID IS NULL
            BEGIN
                SET @EIDSSObjectID = @EIDSSLocalOrFieldSampleID;
            END
            ELSE
            BEGIN
                SET @EIDSSObjectID = @EIDSSLaboratorySampleID;
            END

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @SampleID,
                                                      @ObjectTableSampleID,
                                                      @EIDSSObjectID,
                                                      @DataAuditEventID OUTPUT;
            -- End data audit

            -- Sample is being accessioned, so get the next lab sample code allowing the user the option to print the barcode.
            IF @RowAction = 4
               OR @RowAction = 8 -- Update and accession (LUC01)
            BEGIN
                -- Transferred in sample accessioned in, so update the transfer record's transfer status type ID to final. 
                IF @RowAction = 8
                BEGIN
                    INSERT INTO @TransferBeforeEdit
                    SELECT t.idfTransferOut,
                           t.idfsTransferStatus
                    FROM dbo.tlbTransferOUT t
                        INNER JOIN dbo.tlbTransferOutMaterial tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;

                    UPDATE t
                    SET t.idfsTransferStatus = 10001001,
                        --Final
                        t.AuditUpdateUser = @AuditUserName,
                        t.AuditUpdateDTM = GETDATE()
                    FROM dbo.tlbTransferOUT t
                        INNER JOIN dbo.tlbTransferOutMaterial tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;

                    INSERT INTO @TransferAfterEdit
                    SELECT t.idfTransferOut,
                           t.idfsTransferStatus
                    FROM dbo.tlbTransferOUT t
                        INNER JOIN dbo.tlbTransferOutMaterial tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableTransferOutID,
                           4577940000000,
                           a.TransferID,
                           NULL,
                           b.TransferStatusTypeID,
                           a.TransferStatusTypeID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @TransferAfterEdit a
                        FULL JOIN @TransferBeforeEdit b
                            ON a.TransferID = b.TransferID
                    WHERE (a.TransferStatusTypeID <> b.TransferStatusTypeID)
                          OR (
                                 a.TransferStatusTypeID IS NOT NULL
                                 AND b.TransferStatusTypeID IS NULL
                             )
                          OR (
                                 a.TransferStatusTypeID IS NULL
                                 AND b.TransferStatusTypeID IS NOT NULL
                             );
                END;

                UPDATE dbo.tlbMaterial
                SET idfsSampleType = @SampleTypeID,
                    idfRootMaterial = @RootSampleID,
                    idfParentMaterial = @ParentSampleID,
                    idfHuman = @HumanID,
                    idfSpecies = @SpeciesID,
                    idfAnimal = @AnimalID,
                    idfMonitoringSession = @MonitoringSessionID,
                    idfFieldCollectedByPerson = @CollectedByPersonID,
                    idfFieldCollectedByOffice = @CollectedByOrganizationID,
                    datFieldCollectionDate = @CollectionDate,
                    datFieldSentDate = @SentDate,
                    strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                    idfVectorSurveillanceSession = @VectorSessionID,
                    idfVector = @VectorID,
                    idfSubdivision = @FreezerSubdivisionID,
                    StorageBoxPlace = @StorageBoxPlace,
                    idfsSampleStatus = @SampleStatusTypeID,
                    idfInDepartment = @FunctionalAreaID,
                    idfDestroyedByPerson = @DestroyedByPersonID,
                    datEnteringDate = @EnteredDate,
                    datDestructionDate = @DestructionDate,
                    strBarcode = @EIDSSLaboratorySampleID,
                    strNote = @Note,
                    idfsSite = @SiteID,
                    idfsCurrentSite = @CurrentSiteID,
                    idfsSampleKind = @SampleKindTypeID,
                    intRowStatus = @RowStatus,
                    idfSendToOffice = @SentToOrganizationID,
                    blnReadOnly = @ReadOnlyIndicator,
                    idfHumanCase = @HumanDiseaseReportID,
                    idfVetCase = @VeterinaryDiseaseReportID,
                    datAccession = @AccessionDate,
                    idfsAccessionCondition = @AccessionConditionTypeID,
                    strCondition = @AccessionComment,
                    idfAccesionByPerson = @AccessionByPersonID,
                    idfsDestructionMethod = @DestructionMethodTypeID,
                    idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                    datOutOfRepositoryDate = @OutOfRepositoryDate,
                    PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE(), 
                    TestCompletedIndicator = 0, 
                    TestUnassignedIndicator = 1
                WHERE idfMaterial = @SampleID;
            END
            ELSE
            BEGIN
                -- Transferred in sample rejected, so update the transferred out sample's status to transferred out. 
                IF @RowAction = 9
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleStatus = 10015010, -- Transferred Out
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @RootSampleID;

                    INSERT INTO @TransferBeforeEdit
                    SELECT t.idfTransferOut,
                           t.idfsTransferStatus
                    FROM dbo.tlbTransferOUT t
                        INNER JOIN dbo.tlbTransferOutMaterial tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;

                    UPDATE t
                    SET t.idfsTransferStatus = 10001001, -- Final
                        t.AuditUpdateUser = @AuditUserName,
                        t.AuditUpdateDTM = GETDATE()
                    FROM dbo.tlbTransferOUT t
                        INNER JOIN dbo.tlbTransferOutMaterial tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;

                    INSERT INTO @TransferAfterEdit
                    SELECT t.idfTransferOut,
                           t.idfsTransferStatus
                    FROM dbo.tlbTransferOUT t
                        INNER JOIN dbo.tlbTransferOutMaterial tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableTransferOutID,
                           4577940000000,
                           a.TransferID,
                           NULL,
                           b.TransferStatusTypeID,
                           a.TransferStatusTypeID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @TransferAfterEdit a
                        FULL JOIN @TransferBeforeEdit b
                            ON a.TransferID = b.TransferID
                    WHERE (a.TransferStatusTypeID <> b.TransferStatusTypeID)
                          OR (
                                 a.TransferStatusTypeID IS NOT NULL
                                 AND b.TransferStatusTypeID IS NULL
                             )
                          OR (
                                 a.TransferStatusTypeID IS NULL
                                 AND b.TransferStatusTypeID IS NOT NULL
                             );
                END;

                IF @RowAction = 2
                   AND @AccessionConditionTypeID = 10108003 -- Rejected
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleType = @SampleTypeID,
                        idfRootMaterial = @RootSampleID,
                        idfParentMaterial = @ParentSampleID,
                        idfHuman = @HumanID,
                        idfSpecies = @SpeciesID,
                        idfAnimal = @AnimalID,
                        idfMonitoringSession = @MonitoringSessionID,
                        idfFieldCollectedByPerson = @CollectedByPersonID,
                        idfFieldCollectedByOffice = @CollectedByOrganizationID,
                        datFieldCollectionDate = @CollectionDate,
                        datFieldSentDate = @SentDate,
                        strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                        idfVectorSurveillanceSession = @VectorSessionID,
                        idfVector = @VectorID,
                        idfSubdivision = @FreezerSubdivisionID,
                        StorageBoxPlace = @StorageBoxPlace,
                        idfsSampleStatus = @SampleStatusTypeID,
                        idfInDepartment = @FunctionalAreaID,
                        idfDestroyedByPerson = @DestroyedByPersonID,
                        datEnteringDate = @EnteredDate,
                        datDestructionDate = @DestructionDate,
                        strNote = @Note,
                        idfsSite = @SiteID,
                        idfsCurrentSite = @CurrentSiteID,
                        idfsSampleKind = @SampleKindTypeID,
                        intRowStatus = @RowStatus,
                        idfSendToOffice = @SentToOrganizationID,
                        blnReadOnly = @ReadOnlyIndicator,
                        idfHumanCase = @HumanDiseaseReportID,
                        idfVetCase = @VeterinaryDiseaseReportID,
                        datAccession = @AccessionDate,
                        idfsAccessionCondition = @AccessionConditionTypeID,
                        strCondition = @AccessionComment,
                        idfAccesionByPerson = @AccessionByPersonID,
                        idfsDestructionMethod = @DestructionMethodTypeID,
                        idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                        datOutOfRepositoryDate = @OutOfRepositoryDate,
                        PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE(), 
                        TestCompletedIndicator = 0,
                        TestUnassignedIndicator = 1
                    WHERE idfMaterial = @SampleID;
                END
                ELSE
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleType = @SampleTypeID,
                        idfRootMaterial = @RootSampleID,
                        idfParentMaterial = @ParentSampleID,
                        idfHuman = @HumanID,
                        idfSpecies = @SpeciesID,
                        idfAnimal = @AnimalID,
                        idfMonitoringSession = @MonitoringSessionID,
                        idfFieldCollectedByPerson = @CollectedByPersonID,
                        idfFieldCollectedByOffice = @CollectedByOrganizationID,
                        datFieldCollectionDate = @CollectionDate,
                        datFieldSentDate = @SentDate,
                        strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                        idfVectorSurveillanceSession = @VectorSessionID,
                        idfVector = @VectorID,
                        idfSubdivision = @FreezerSubdivisionID,
                        StorageBoxPlace = @StorageBoxPlace,
                        idfsSampleStatus = @SampleStatusTypeID,
                        idfInDepartment = @FunctionalAreaID,
                        idfDestroyedByPerson = @DestroyedByPersonID,
                        datEnteringDate = @EnteredDate,
                        datDestructionDate = @DestructionDate,
                        strNote = @Note,
                        idfsSite = @SiteID,
                        idfsCurrentSite = @CurrentSiteID,
                        idfsSampleKind = @SampleKindTypeID,
                        intRowStatus = @RowStatus,
                        idfSendToOffice = @SentToOrganizationID,
                        blnReadOnly = @ReadOnlyIndicator,
                        idfHumanCase = @HumanDiseaseReportID,
                        idfVetCase = @VeterinaryDiseaseReportID,
                        datAccession = @AccessionDate,
                        idfsAccessionCondition = @AccessionConditionTypeID,
                        strCondition = @AccessionComment,
                        idfAccesionByPerson = @AccessionByPersonID,
                        idfsDestructionMethod = @DestructionMethodTypeID,
                        idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                        datOutOfRepositoryDate = @OutOfRepositoryDate,
                        PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @SampleID;
                END
            END

            INSERT INTO @SampleAfterEdit
            (
                SampleID,
                SampleTypeID,
                RootSampleID,
                ParentSampleID,
                HumanID,
                SpeciesID,
                AnimalID,
                MonitoringSessionID,
                FieldCollectedByPersonID,
                FieldCollectedByOfficeID,
                MainTestID,
                FieldCollectionDate,
                FieldSentDate,
                FieldBarcodeID,
                CalculatedCaseID,
                CalculatedHumanName,
                VectorSurveillanceSessionID,
                VectorID,
                SubdivisionID,
                SampleStatusTypeID,
                DepartmentID,
                DestroyedByPersonID,
                EnteringDate,
                DestructionDate,
                BarcodeID,
                Note,
                SendToOfficeID,
                ReadOnlyIndicator,
                BirdStatusTypeID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                AccessionDate,
                AccessionConditionTypeID,
                Condition,
                AccessionByPersonID,
                DestructionMethodTypeID,
                CurrentSiteID,
                SampleKindTypeID,
                AccessionIndicator,
                ShowInCaseOrSessionIndicator,
                ShowInLabListIndicator,
                ShowInDispositionListIndicator,
                ShowInAccessionInFormIndicator,
                MarkedForDispositionByPersonID,
                OutOfRepositoryDate,
                SampleStatusDate,
                RowStatus,
                StorageBoxPlace,
                PreviousSampleStatusTypeID,
                DiseaseID,
                LabModuleSourceIndicator,
                TestUnassignedIndicator,
                TestCompletedIndicator,
                TransferIndicator
            )
            SELECT idfMaterial,
                   idfsSampleType,
                   idfRootMaterial,
                   idfParentMaterial,
                   idfHuman,
                   idfSpecies,
                   idfAnimal,
                   idfMonitoringSession,
                   idfFieldCollectedByPerson,
                   idfFieldCollectedByOffice,
                   idfMainTest,
                   datFieldCollectionDate,
                   datFieldSentDate,
                   strFieldBarcode,
                   strCalculatedCaseID,
                   strCalculatedHumanName,
                   idfVectorSurveillanceSession,
                   idfVector,
                   idfSubdivision,
                   idfsSampleStatus,
                   idfInDepartment,
                   idfDestroyedByPerson,
                   datEnteringDate,
                   datDestructionDate,
                   strBarcode,
                   strNote,
                   idfSendToOffice,
                   blnReadOnly,
                   idfsBirdStatus,
                   idfHumanCase,
                   idfVetCase,
                   datAccession,
                   idfsAccessionCondition,
                   strCondition,
                   idfAccesionByPerson,
                   idfsDestructionMethod,
                   idfsCurrentSite,
                   idfsSampleKind,
                   blnAccessioned,
                   blnShowInCaseOrSession,
                   blnShowInLabList,
                   blnShowInDispositionList,
                   blnShowInAccessionInForm,
                   idfMarkedForDispositionByPerson,
                   datOutOfRepositoryDate,
                   datSampleStatusDate,
                   intRowStatus,
                   StorageBoxPlace,
                   PreviousSampleStatusID,
                   DiseaseID,
                   LabModuleSourceIndicator,
                   TestUnassignedIndicator,
                   TestCompletedIndicator,
                   TransferIndicator
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545390000000,
                   a.SampleID,
                   NULL,
                   b.SampleTypeID,
                   a.SampleTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SampleTypeID <> b.SampleTypeID)
                  OR (
                         a.SampleTypeID IS NOT NULL
                         AND b.SampleTypeID IS NULL
                     )
                  OR (
                         a.SampleTypeID IS NULL
                         AND b.SampleTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545400000000,
                   a.SampleID,
                   NULL,
                   b.RootSampleID,
                   a.RootSampleID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.RootSampleID <> b.RootSampleID)
                  OR (
                         a.RootSampleID IS NOT NULL
                         AND b.RootSampleID IS NULL
                     )
                  OR (
                         a.RootSampleID IS NULL
                         AND b.RootSampleID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   79970000000,
                   a.SampleID,
                   NULL,
                   b.ParentSampleID,
                   a.ParentSampleID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ParentSampleID <> b.ParentSampleID)
                  OR (
                         a.ParentSampleID IS NOT NULL
                         AND b.ParentSampleID IS NULL
                     )
                  OR (
                         a.ParentSampleID IS NULL
                         AND b.ParentSampleID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4572430000000,
                   a.SampleID,
                   NULL,
                   b.HumanID,
                   a.HumanID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.HumanID <> b.HumanID)
                  OR (
                         a.HumanID IS NOT NULL
                         AND b.HumanID IS NULL
                     )
                  OR (
                         a.HumanID IS NULL
                         AND b.HumanID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4572440000000,
                   a.SampleID,
                   NULL,
                   b.SpeciesID,
                   a.SpeciesID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SpeciesID <> b.SpeciesID)
                  OR (
                         a.SpeciesID IS NOT NULL
                         AND b.SpeciesID IS NULL
                     )
                  OR (
                         a.SpeciesID IS NULL
                         AND b.SpeciesID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4572450000000,
                   a.SampleID,
                   NULL,
                   b.AnimalID,
                   a.AnimalID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AnimalID <> b.AnimalID)
                  OR (
                         a.AnimalID IS NOT NULL
                         AND b.AnimalID IS NULL
                     )
                  OR (
                         a.AnimalID IS NULL
                         AND b.AnimalID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4572470000000,
                   a.SampleID,
                   NULL,
                   b.MonitoringSessionID,
                   a.MonitoringSessionID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.MonitoringSessionID <> b.MonitoringSessionID)
                  OR (
                         a.MonitoringSessionID IS NOT NULL
                         AND b.MonitoringSessionID IS NULL
                     )
                  OR (
                         a.MonitoringSessionID IS NULL
                         AND b.MonitoringSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   79950000000,
                   a.SampleID,
                   NULL,
                   b.FieldCollectedByPersonID,
                   a.FieldCollectedByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldCollectedByPersonID <> b.FieldCollectedByPersonID)
                  OR (
                         a.FieldCollectedByPersonID IS NOT NULL
                         AND b.FieldCollectedByPersonID IS NULL
                     )
                  OR (
                         a.FieldCollectedByPersonID IS NULL
                         AND b.FieldCollectedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   79940000000,
                   a.SampleID,
                   NULL,
                   b.FieldCollectedByOfficeID,
                   a.FieldCollectedByOfficeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldCollectedByOfficeID <> b.FieldCollectedByOfficeID)
                  OR (
                         a.FieldCollectedByOfficeID IS NOT NULL
                         AND b.FieldCollectedByOfficeID IS NULL
                     )
                  OR (
                         a.FieldCollectedByOfficeID IS NULL
                         AND b.FieldCollectedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545410000000,
                   a.SampleID,
                   NULL,
                   b.MainTestID,
                   a.MainTestID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.MainTestID <> b.MainTestID)
                  OR (
                         a.MainTestID IS NOT NULL
                         AND b.MainTestID IS NULL
                     )
                  OR (
                         a.MainTestID IS NULL
                         AND b.MainTestID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   79920000000,
                   a.SampleID,
                   NULL,
                   b.FieldCollectionDate,
                   a.FieldCollectionDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldCollectionDate <> b.FieldCollectionDate)
                  OR (
                         a.FieldCollectionDate IS NOT NULL
                         AND b.FieldCollectionDate IS NULL
                     )
                  OR (
                         a.FieldCollectionDate IS NULL
                         AND b.FieldCollectionDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   79930000000,
                   a.SampleID,
                   NULL,
                   b.FieldSentDate,
                   a.FieldSentDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldSentDate <> b.FieldSentDate)
                  OR (
                         a.FieldSentDate IS NOT NULL
                         AND b.FieldSentDate IS NULL
                     )
                  OR (
                         a.FieldSentDate IS NULL
                         AND b.FieldSentDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   80030000000,
                   a.SampleID,
                   NULL,
                   b.FieldBarcodeID,
                   a.FieldBarcodeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldBarcodeID <> b.FieldBarcodeID)
                  OR (
                         a.FieldBarcodeID IS NOT NULL
                         AND b.FieldBarcodeID IS NULL
                     )
                  OR (
                         a.FieldBarcodeID IS NULL
                         AND b.FieldBarcodeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4572480000000,
                   a.SampleID,
                   NULL,
                   b.CalculatedCaseID,
                   a.CalculatedCaseID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.CalculatedCaseID <> b.CalculatedCaseID)
                  OR (
                         a.CalculatedCaseID IS NOT NULL
                         AND b.CalculatedCaseID IS NULL
                     )
                  OR (
                         a.CalculatedCaseID IS NULL
                         AND b.CalculatedCaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4572490000000,
                   a.SampleID,
                   NULL,
                   b.CalculatedHumanName,
                   a.CalculatedHumanName,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.CalculatedHumanName <> b.CalculatedHumanName)
                  OR (
                         a.CalculatedHumanName IS NOT NULL
                         AND b.CalculatedHumanName IS NULL
                     )
                  OR (
                         a.CalculatedHumanName IS NULL
                         AND b.CalculatedHumanName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4575190000000,
                   a.SampleID,
                   NULL,
                   b.VectorSurveillanceSessionID,
                   a.VectorSurveillanceSessionID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.VectorSurveillanceSessionID <> b.VectorSurveillanceSessionID)
                  OR (
                         a.VectorSurveillanceSessionID IS NOT NULL
                         AND b.VectorSurveillanceSessionID IS NULL
                     )
                  OR (
                         a.VectorSurveillanceSessionID IS NULL
                         AND b.VectorSurveillanceSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4575200000000,
                   a.SampleID,
                   NULL,
                   b.VectorID,
                   a.VectorID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.VectorID <> b.VectorID)
                  OR (
                         a.VectorID IS NOT NULL
                         AND b.VectorID IS NULL
                     )
                  OR (
                         a.VectorID IS NULL
                         AND b.VectorID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576340000000,
                   a.SampleID,
                   NULL,
                   b.SubdivisionID,
                   a.SubdivisionID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SubdivisionID <> b.SubdivisionID)
                  OR (
                         a.SubdivisionID IS NOT NULL
                         AND b.SubdivisionID IS NULL
                     )
                  OR (
                         a.SubdivisionID IS NULL
                         AND b.SubdivisionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545420000000,
                   a.SampleID,
                   NULL,
                   b.SampleStatusTypeID,
                   a.SampleStatusTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SampleStatusTypeID <> b.SampleStatusTypeID)
                  OR (
                         a.SampleStatusTypeID IS NOT NULL
                         AND b.SampleStatusTypeID IS NULL
                     )
                  OR (
                         a.SampleStatusTypeID IS NULL
                         AND b.SampleStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576360000000,
                   a.SampleID,
                   NULL,
                   b.DepartmentID,
                   a.DepartmentID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DepartmentID <> b.DepartmentID)
                  OR (
                         a.DepartmentID IS NOT NULL
                         AND b.DepartmentID IS NULL
                     )
                  OR (
                         a.DepartmentID IS NULL
                         AND b.DepartmentID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576370000000,
                   a.SampleID,
                   NULL,
                   b.DestroyedByPersonID,
                   a.DestroyedByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DestroyedByPersonID <> b.DestroyedByPersonID)
                  OR (
                         a.DestroyedByPersonID IS NOT NULL
                         AND b.DestroyedByPersonID IS NULL
                     )
                  OR (
                         a.DestroyedByPersonID IS NULL
                         AND b.DestroyedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576390000000,
                   a.SampleID,
                   NULL,
                   b.EnteringDate,
                   a.EnteringDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.EnteringDate <> b.EnteringDate)
                  OR (
                         a.EnteringDate IS NOT NULL
                         AND b.EnteringDate IS NULL
                     )
                  OR (
                         a.EnteringDate IS NULL
                         AND b.EnteringDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576400000000,
                   a.SampleID,
                   NULL,
                   b.DestructionDate,
                   a.DestructionDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DestructionDate <> b.DestructionDate)
                  OR (
                         a.DestructionDate IS NOT NULL
                         AND b.DestructionDate IS NULL
                     )
                  OR (
                         a.DestructionDate IS NULL
                         AND b.DestructionDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576410000000,
                   a.SampleID,
                   NULL,
                   b.BarcodeID,
                   a.BarcodeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.BarcodeID <> b.BarcodeID)
                  OR (
                         a.BarcodeID IS NOT NULL
                         AND b.BarcodeID IS NULL
                     )
                  OR (
                         a.BarcodeID IS NULL
                         AND b.BarcodeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576420000000,
                   a.SampleID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4578720000000,
                   a.SampleID,
                   NULL,
                   b.SendToOfficeID,
                   a.SendToOfficeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SendToOfficeID <> b.SendToOfficeID)
                  OR (
                         a.SendToOfficeID IS NOT NULL
                         AND b.SendToOfficeID IS NULL
                     )
                  OR (
                         a.SendToOfficeID IS NULL
                         AND b.SendToOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4578730000000,
                   a.SampleID,
                   NULL,
                   b.ReadOnlyIndicator,
                   a.ReadOnlyIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                  OR (
                         a.ReadOnlyIndicator IS NOT NULL
                         AND b.ReadOnlyIndicator IS NULL
                     )
                  OR (
                         a.ReadOnlyIndicator IS NULL
                         AND b.ReadOnlyIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12014480000000,
                   a.SampleID,
                   NULL,
                   b.BirdStatusTypeID,
                   a.BirdStatusTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.BirdStatusTypeID <> b.BirdStatusTypeID)
                  OR (
                         a.BirdStatusTypeID IS NOT NULL
                         AND b.BirdStatusTypeID IS NULL
                     )
                  OR (
                         a.BirdStatusTypeID IS NULL
                         AND b.BirdStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12665570000000,
                   a.SampleID,
                   NULL,
                   b.HumanDiseaseReportID,
                   a.HumanDiseaseReportID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.HumanDiseaseReportID <> b.HumanDiseaseReportID)
                  OR (
                         a.HumanDiseaseReportID IS NOT NULL
                         AND b.HumanDiseaseReportID IS NULL
                     )
                  OR (
                         a.HumanDiseaseReportID IS NULL
                         AND b.HumanDiseaseReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12665580000000,
                   a.SampleID,
                   NULL,
                   b.VeterinaryDiseaseReportID,
                   a.VeterinaryDiseaseReportID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.VeterinaryDiseaseReportID <> b.VeterinaryDiseaseReportID)
                  OR (
                         a.VeterinaryDiseaseReportID IS NOT NULL
                         AND b.VeterinaryDiseaseReportID IS NULL
                     )
                  OR (
                         a.VeterinaryDiseaseReportID IS NULL
                         AND b.VeterinaryDiseaseReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12666880000000,
                   a.SampleID,
                   NULL,
                   b.AccessionDate,
                   a.AccessionDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AccessionDate <> b.AccessionDate)
                  OR (
                         a.AccessionDate IS NOT NULL
                         AND b.AccessionDate IS NULL
                     )
                  OR (
                         a.AccessionDate IS NULL
                         AND b.AccessionDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12666890000000,
                   a.SampleID,
                   NULL,
                   b.AccessionConditionTypeID,
                   a.AccessionConditionTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AccessionConditionTypeID <> b.AccessionConditionTypeID)
                  OR (
                         a.AccessionConditionTypeID IS NOT NULL
                         AND b.AccessionConditionTypeID IS NULL
                     )
                  OR (
                         a.AccessionConditionTypeID IS NULL
                         AND b.AccessionConditionTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12666900000000,
                   a.SampleID,
                   NULL,
                   b.Condition,
                   a.Condition,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.Condition <> b.Condition)
                  OR (
                         a.Condition IS NOT NULL
                         AND b.Condition IS NULL
                     )
                  OR (
                         a.Condition IS NULL
                         AND b.Condition IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12666910000000,
                   a.SampleID,
                   NULL,
                   b.AccessionByPersonID,
                   a.AccessionByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AccessionByPersonID <> b.AccessionByPersonID)
                  OR (
                         a.AccessionByPersonID IS NOT NULL
                         AND b.AccessionByPersonID IS NULL
                     )
                  OR (
                         a.AccessionByPersonID IS NULL
                         AND b.AccessionByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12675260000000,
                   a.SampleID,
                   NULL,
                   b.DestructionMethodTypeID,
                   a.DestructionMethodTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DestructionMethodTypeID <> b.DestructionMethodTypeID)
                  OR (
                         a.DestructionMethodTypeID IS NOT NULL
                         AND b.DestructionMethodTypeID IS NULL
                     )
                  OR (
                         a.DestructionMethodTypeID IS NULL
                         AND b.DestructionMethodTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545560000000,
                   a.SampleID,
                   NULL,
                   b.CurrentSiteID,
                   a.CurrentSiteID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.CurrentSiteID <> b.CurrentSiteID)
                  OR (
                         a.CurrentSiteID IS NOT NULL
                         AND b.CurrentSiteID IS NULL
                     )
                  OR (
                         a.CurrentSiteID IS NULL
                         AND b.CurrentSiteID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545570000000,
                   a.SampleID,
                   NULL,
                   b.SampleKindTypeID,
                   a.SampleKindTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SampleKindTypeID <> b.SampleKindTypeID)
                  OR (
                         a.SampleKindTypeID IS NOT NULL
                         AND b.SampleKindTypeID IS NULL
                     )
                  OR (
                         a.SampleKindTypeID IS NULL
                         AND b.SampleKindTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545580000000,
                   a.SampleID,
                   NULL,
                   b.AccessionIndicator,
                   a.AccessionIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AccessionIndicator <> b.AccessionIndicator)
                  OR (
                         a.AccessionIndicator IS NOT NULL
                         AND b.AccessionIndicator IS NULL
                     )
                  OR (
                         a.AccessionIndicator IS NULL
                         AND b.AccessionIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545590000000,
                   a.SampleID,
                   NULL,
                   b.ShowInCaseOrSessionIndicator,
                   a.ShowInCaseOrSessionIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ShowInCaseOrSessionIndicator <> b.ShowInCaseOrSessionIndicator)
                  OR (
                         a.ShowInCaseOrSessionIndicator IS NOT NULL
                         AND b.ShowInCaseOrSessionIndicator IS NULL
                     )
                  OR (
                         a.ShowInCaseOrSessionIndicator IS NULL
                         AND b.ShowInCaseOrSessionIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545600000000,
                   a.SampleID,
                   NULL,
                   b.ShowInLabListIndicator,
                   a.ShowInLabListIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ShowInLabListIndicator <> b.ShowInLabListIndicator)
                  OR (
                         a.ShowInLabListIndicator IS NOT NULL
                         AND b.ShowInLabListIndicator IS NULL
                     )
                  OR (
                         a.ShowInLabListIndicator IS NULL
                         AND b.ShowInLabListIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545620000000,
                   a.SampleID,
                   NULL,
                   b.ShowInDispositionListIndicator,
                   a.ShowInDispositionListIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ShowInDispositionListIndicator <> b.ShowInDispositionListIndicator)
                  OR (
                         a.ShowInDispositionListIndicator IS NOT NULL
                         AND b.ShowInDispositionListIndicator IS NULL
                     )
                  OR (
                         a.ShowInDispositionListIndicator IS NULL
                         AND b.ShowInDispositionListIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545610000000,
                   a.SampleID,
                   NULL,
                   b.ShowInAccessionInFormIndicator,
                   a.ShowInAccessionInFormIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ShowInAccessionInFormIndicator <> b.ShowInAccessionInFormIndicator)
                  OR (
                         a.ShowInAccessionInFormIndicator IS NOT NULL
                         AND b.ShowInAccessionInFormIndicator IS NULL
                     )
                  OR (
                         a.ShowInAccessionInFormIndicator IS NULL
                         AND b.ShowInAccessionInFormIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51523600000000,
                   a.SampleID,
                   NULL,
                   b.MarkedForDispositionByPersonID,
                   a.MarkedForDispositionByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.MarkedForDispositionByPersonID <> b.MarkedForDispositionByPersonID)
                  OR (
                         a.MarkedForDispositionByPersonID IS NOT NULL
                         AND b.MarkedForDispositionByPersonID IS NULL
                     )
                  OR (
                         a.MarkedForDispositionByPersonID IS NULL
                         AND b.MarkedForDispositionByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51528570000000,
                   a.SampleID,
                   NULL,
                   b.OutOfRepositoryDate,
                   a.OutOfRepositoryDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.OutOfRepositoryDate <> b.OutOfRepositoryDate)
                  OR (
                         a.OutOfRepositoryDate IS NOT NULL
                         AND b.OutOfRepositoryDate IS NULL
                     )
                  OR (
                         a.OutOfRepositoryDate IS NULL
                         AND b.OutOfRepositoryDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51528580000000,
                   a.SampleID,
                   NULL,
                   b.SampleStatusDate,
                   a.SampleStatusDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SampleStatusDate <> b.SampleStatusDate)
                  OR (
                         a.SampleStatusDate IS NOT NULL
                         AND b.SampleStatusDate IS NULL
                     )
                  OR (
                         a.SampleStatusDate IS NULL
                         AND b.SampleStatusDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000034,
                   a.SampleID,
                   NULL,
                   b.StorageBoxPlace,
                   a.StorageBoxPlace,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.StorageBoxPlace <> b.StorageBoxPlace)
                  OR (
                         a.StorageBoxPlace IS NOT NULL
                         AND b.StorageBoxPlace IS NULL
                     )
                  OR (
                         a.StorageBoxPlace IS NULL
                         AND b.StorageBoxPlace IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000033,
                   a.SampleID,
                   NULL,
                   b.PreviousSampleStatusTypeID,
                   a.PreviousSampleStatusTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.PreviousSampleStatusTypeID <> b.PreviousSampleStatusTypeID)
                  OR (
                         a.PreviousSampleStatusTypeID IS NOT NULL
                         AND b.PreviousSampleStatusTypeID IS NULL
                     )
                  OR (
                         a.PreviousSampleStatusTypeID IS NULL
                         AND b.PreviousSampleStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000035,
                   a.SampleID,
                   NULL,
                   b.DiseaseID,
                   a.DiseaseID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DiseaseID <> b.DiseaseID)
                  OR (
                         a.DiseaseID IS NOT NULL
                         AND b.DiseaseID IS NULL
                     )
                  OR (
                         a.DiseaseID IS NULL
                         AND b.DiseaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000036,
                   a.SampleID,
                   NULL,
                   b.LabModuleSourceIndicator,
                   a.LabModuleSourceIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.LabModuleSourceIndicator <> b.LabModuleSourceIndicator)
                  OR (
                         a.LabModuleSourceIndicator IS NOT NULL
                         AND b.LabModuleSourceIndicator IS NULL
                     )
                  OR (
                         a.LabModuleSourceIndicator IS NULL
                         AND b.LabModuleSourceIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000037,
                   a.SampleID,
                   NULL,
                   b.TestUnassignedIndicator,
                   a.TestUnassignedIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.TestUnassignedIndicator <> b.TestUnassignedIndicator)
                  OR (
                         a.TestUnassignedIndicator IS NOT NULL
                         AND b.TestUnassignedIndicator IS NULL
                     )
                  OR (
                         a.TestUnassignedIndicator IS NULL
                         AND b.TestUnassignedIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000038,
                   a.SampleID,
                   NULL,
                   b.TestCompletedIndicator,
                   a.TestCompletedIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.TestCompletedIndicator <> b.TestCompletedIndicator)
                  OR (
                         a.TestCompletedIndicator IS NOT NULL
                         AND b.TestCompletedIndicator IS NULL
                     )
                  OR (
                         a.TestCompletedIndicator IS NULL
                         AND b.TestCompletedIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000039,
                   a.SampleID,
                   NULL,
                   b.TransferIndicator,
                   a.TransferIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.TransferIndicator <> b.TransferIndicator)
                  OR (
                         a.TransferIndicator IS NOT NULL
                         AND b.TransferIndicator IS NULL
                     )
                  OR (
                         a.TransferIndicator IS NULL
                         AND b.TransferIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   a.SampleID,
                   NULL,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE a.RowStatus = 0
                  AND b.RowStatus = 1;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO



-- ================================================================================================
-- Name: USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET
--
-- Description:	Deduplication for Livestock and Avian disease report record.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		17May2022	Initial release
-- Mark Wilson		19May2022	Added Testing, Penside Tests, Interpretations and CaseLogs
-- Ann Xiong		7/26/2022	Replaced "@Notifications = @Notifications" with "@Events = @Notifications" to fix the error "@Notifications is not a parameter for procedure USP_VET_DISEASE_REPORT_SET."
-- Ann Xiong		12/21/2022	Modified to pass parameter '@AuditUserName' when call USP_VET_DISEASE_REPORT_DEL
-- Ann Xiong		03/07/2023  Implemented Data Audit
-- Ann Xiong	    03/09/2023  Modified to pass parameter '@DataAuditEventID' when call USP_VET_DISEASE_REPORT_SET and USP_VET_DISEASE_REPORT_DEL
-- Ann Xiong		03/17/2023	Fixed a few issues when UPDATE dbo.tlbMaterial and UPDATE dbo.tlbVaccination
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]
(
	@SurvivorVeterinaryDiseaseReportID BIGINT,
	@SupersededVeterinaryDiseaseReportID BIGINT,
	@EIDSSReportID NVARCHAR(200) = NULL,
	@FarmID BIGINT,
	@FarmMasterID BIGINT,
	@FarmOwnerID BIGINT = NULL,
	@MonitoringSessionID BIGINT = NULL,
	@OutbreakID BIGINT = NULL,
	@RelatedToDiseaseReportID BIGINT = NULL,
	@EIDSSFieldAccessionID NVARCHAR(200) = NULL,
	@DiseaseID BIGINT,
	@EnteredByPersonID BIGINT = NULL,
	@ReportedByOrganizationID BIGINT = NULL,
	@ReportedByPersonID BIGINT = NULL,
	@InvestigatedByOrganizationID BIGINT = NULL,
	@InvestigatedByPersonID BIGINT = NULL,
	@ReceivedByOrganizationID BIGINT = NULL,
	@ReceivedByPersonID BIGINT = NULL,
	@SiteID BIGINT,
	@DiagnosisDate DATETIME = NULL,
	@EnteredDate DATETIME = NULL,
	@ReportDate DATETIME = NULL,
	@AssignedDate DATETIME = NULL,
	@InvestigationDate DATETIME = NULL,
	@RowStatus INT,
	@ReportTypeID BIGINT = NULL,
	@ClassificationTypeID BIGINT = NULL,
	@StatusTypeID BIGINT = NULL,
	@ReportCategoryTypeID BIGINT,
	@FarmTotalAnimalQuantity INT = NULL,
	@FarmSickAnimalQuantity INT = NULL,
	@FarmDeadAnimalQuantity INT = NULL,
	@FarmLatitude FLOAT = NULL,
	@FarmLongitude FLOAT = NULL,
	@FarmEpidemiologicalObservationID BIGINT = NULL,
	@ControlMeasuresObservationID BIGINT = NULL,
	@TestsConductedIndicator BIGINT = NULL,
	@AuditUserName NVARCHAR(200),
	@FlocksOrHerds NVARCHAR(MAX) = NULL,
	@Species NVARCHAR(MAX) = NULL,
	@Animals NVARCHAR(MAX) = NULL,
	@Vaccinations NVARCHAR(MAX) = NULL,
	@Samples NVARCHAR(MAX) = NULL,
	@PensideTests NVARCHAR(MAX) = NULL,
	@LaboratoryTests NVARCHAR(MAX) = NULL,
	@LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
	@CaseLogs NVARCHAR(MAX) = NULL,
	@ClinicalInformation NVARCHAR(MAX) = NULL,
	@Contacts NVARCHAR(MAX) = NULL,
	@CaseMonitorings NVARCHAR(MAX) = NULL,
	@Notifications NVARCHAR(MAX) = NULL,
	@UserID BIGINT,
	@LinkLocalOrFieldSampleIDToReportID BIT = 0,
	@OutbreakCaseIndicator BIT = 0,
	@OutbreakCaseReportUID BIGINT = NULL,
	@OutbreakCaseStatusTypeID BIGINT = NULL,
	@OutbreakCaseQuestionnaireObservationID BIGINT = NULL,
	@PrimaryCaseIndicator BIT = 0
)
AS
BEGIN

	BEGIN TRY
		BEGIN TRANSACTION;

		DECLARE @ReturnCode INT = 0;
		DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';

        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        
		DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        
		DECLARE @VaccinationsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            SpeciesID BIGINT NULL,
            VaccinationTypeID BIGINT NULL,
            RouteTypeID BIGINT NULL,
            DiseaseID BIGINT NULL,
            VaccinationDate DATETIME NULL,
            Manufacturer NVARCHAR(200) NULL,
            LotNumber NVARCHAR(200) NULL,
            NumberVaccinated INT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
		
		DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            LabModuleSourceIndicator INT NOT NULL,
            FarmID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );

        DECLARE @PensideTestsTemp TABLE
        (
            PensideTestID BIGINT NOT NULL,
            SampleID BIGINT NOT NULL,
            PensideTestNameTypeID BIGINT NULL,
            PensideTestResultTypeID BIGINT NULL,
            PensideTestCategoryTypeID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            TestedByOrganizationID BIGINT NULL,
            DiseaseID BIGINT NULL,
            TestDate DATETIME NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
       DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @CaseLogsTemp TABLE
        (
            CaseLogID BIGINT NOT NULL,
            LogStatusTypeID BIGINT NULL,
            LoggedByPersonID BIGINT NULL,
            LogDate DATETIME NULL,
            ActionRequired NVARCHAR(200) NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ClinicalInformationTemp TABLE
        (
            langId NVARCHAR(200) NULL,
            HerdID BIGINT NOT NULL,
            Herd NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SpeciesTypeName NVARCHAR(200) NULL,
            StatusTypeID BIGINT NULL,
            InvestigationPerformedTypeID BIGINT NULL
        );
        DECLARE @ActivityParametersTemp TABLE
        (
            ActivityID BIGINT NOT NULL,
            ParameterID BIGINT NOT NULL,
            ParameterValue SQL_VARIANT NULL,
            ParameterRowID BIGINT NOT NULL
        );
        DECLARE @NotificationsTemp TABLE
        (
            NotificationID BIGINT NOT NULL,
            NotificationTypeID BIGINT NULL,
            UserID BIGINT NULL,
            NotificationObjectID BIGINT NULL,
            NotificationObjectTypeID BIGINT NULL,
            TargetUserID BIGINT NULL,
            TargetSiteID BIGINT NULL,
            TargetSiteTypeID BIGINT NULL,
            SiteID BIGINT NULL,
            Payload NVARCHAR(MAX) NULL,
            LoginSite NVARCHAR(20) NULL
        );

		--Data Audit--
		declare @idfsDataAuditEventType bigint = NULL;
		declare @idfsObjectType bigint = 10017086;                         -- Veterinary Disease Report deduplication
		declare @idfObject bigint = @SurvivorVeterinaryDiseaseReportID;
		declare @idfDataAuditEvent bigint= NULL;
		declare @idfObjectTable_tlbVetCase bigint = 75800000000;
		declare @idfObjectTable_tlbMaterial bigint = 75620000000;
		declare @idfObjectTable_tlbTesting bigint = 75740000000;
		declare @idfObjectTable_tlbTestValidation bigint = 75750000000;
		declare @idfObjectTable_tlbVetCaseLog bigint = 75810000000;
		declare @idfObjectTable_tlbPensideTest bigint = 75680000000;
		declare @idfObjectTable_tlbVaccination bigint = 75790000000;

		--Data Audit--

        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@Vaccinations)
            WITH
            (
                VaccinationID BIGINT,
                SpeciesID BIGINT,
                VaccinationTypeID BIGINT,
                RouteTypeID BIGINT,
                DiseaseID BIGINT,
                VaccinationDate DATETIME2,
                Manufacturer NVARCHAR(200),
                LotNumber NVARCHAR(200),
                NumberVaccinated INT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                LabModuleSourceIndicator INT,
                FarmID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );


        INSERT INTO @PensideTestsTemp
        SELECT *
        FROM
            OPENJSON(@PensideTests)
            WITH
            (
                PensideTestID BIGINT,
                SampleID BIGINT,
                PensideTestNameTypeID BIGINT,
                PensideTestResultTypeID BIGINT,
                PensideTestCategoryTypeID BIGINT,
                TestedByPersonID BIGINT,
                TestedByOrganizationID BIGINT,
                DiseaseID BIGINT,
                TestDate DATETIME2,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @CaseLogsTemp
        SELECT *
        FROM
            OPENJSON(@CaseLogs)
            WITH
            (
                CaseLogID BIGINT,
                LogStatusTypeID BIGINT,
                LoggedByPersonID BIGINT,
                LogDate DATETIME2,
                ActionRequired NVARCHAR(200),
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @ClinicalInformationTemp
        SELECT *
        FROM
            OPENJSON(@ClinicalInformation)
            WITH
            (
                langId NVARCHAR(200),
                HerdID BIGINT,
                Herd NVARCHAR(200),
                ClinicalSignsTypeID BIGINT,
                SpeciesTypeID BIGINT,
                SpeciesTypeName NVARCHAR(200),
                StatusTypeID BIGINT,
                InvestigationPerformedTypeID BIGINT
            );

        INSERT INTO @NotificationsTemp
        SELECT *
        FROM
            OPENJSON(@Notifications)
            WITH
            (
                NotificationID BIGINT,
                NotificationTypeID BIGINT,
                UserID BIGINT,
                NotificationObjectID BIGINT,
                NotificationObjectTypeID BIGINT,
                TargetUserID BIGINT,
                TargetSiteID BIGINT,
                TargetSiteTypeID BIGINT,
                SiteID BIGINT,
                Payload NVARCHAR(MAX),
                LoginSite BIGINT
            );

        -- Data audit

		--  tauDataAuditEvent  Event Type- Edit 
		set @idfsDataAuditEventType =10016003;
		-- insert record into tauDataAuditEvent - 
		EXEC USSP_GBL_DataAuditEvent_GET @UserID, @SiteID, @idfsDataAuditEventType,@idfsObjectType,@SurvivorVeterinaryDiseaseReportID, @idfObjectTable_tlbVetCase, @idfDataAuditEvent OUTPUT

		DECLARE @SampleID BIGINT = NULL,
				@VeterinaryDiseaseReportID BIGINT = NULL,
				@TestID BIGINT = NULL,
				@TestValidationID BIGINT = NULL,
				@VetCaseLogID BIGINT = NULL,
				@PensideTestID BIGINT = NULL,
				@VaccinationID BIGINT = NULL
        -- End data audit

----------------------------------------------------------------------------------------------------------------
-- SET the Survivor Disease Report
		EXEC dbo.USP_VET_DISEASE_REPORT_SET 
			@DiseaseReportID = @SurvivorVeterinaryDiseaseReportID,
		    @EIDSSReportID = @EIDSSReportID,
		    @FarmID = @FarmID,
		    @FarmMasterID = @FarmMasterID,
		    @FarmOwnerID = @FarmOwnerID,
		    @MonitoringSessionID = @MonitoringSessionID,
		    @OutbreakID = @OutbreakID,
		    @RelatedToDiseaseReportID = @RelatedToDiseaseReportID,
		    @EIDSSFieldAccessionID = @EIDSSFieldAccessionID,
		    @DiseaseID = @DiseaseID,
		    @EnteredByPersonID = @EnteredByPersonID,
		    @ReportedByOrganizationID = @ReportedByOrganizationID,
		    @ReportedByPersonID = @ReportedByPersonID,
		    @InvestigatedByOrganizationID = @InvestigatedByOrganizationID,
		    @InvestigatedByPersonID = @InvestigatedByPersonID,
		    @ReceivedByOrganizationID = @ReceivedByOrganizationID,
		    @ReceivedByPersonID = @ReceivedByPersonID,
		    @SiteID = @SiteID,
		    @DiagnosisDate = @DiagnosisDate,
		    @EnteredDate = @EnteredDate,
		    @ReportDate = @ReportDate,
		    @AssignedDate = @AssignedDate,
		    @InvestigationDate = @InvestigationDate,
		    @RowStatus = @RowStatus,
		    @ReportTypeID = @ReportTypeID,
		    @ClassificationTypeID = @ClassificationTypeID,
		    @StatusTypeID = @StatusTypeID,
		    @ReportCategoryTypeID = @ReportCategoryTypeID,
		    @FarmTotalAnimalQuantity = @FarmTotalAnimalQuantity,
		    @FarmSickAnimalQuantity = @FarmSickAnimalQuantity,
		    @FarmDeadAnimalQuantity = @FarmDeadAnimalQuantity,
		    @FarmLatitude = @FarmLatitude,
		    @FarmLongitude = @FarmLongitude,
		    @FarmEpidemiologicalObservationID = @FarmEpidemiologicalObservationID,
		    @ControlMeasuresObservationID = @ControlMeasuresObservationID,
		    @TestsConductedIndicator = @TestsConductedIndicator,
			@DataAuditEventID = @idfDataAuditEvent,
		    @AuditUserName = @AuditUserName,
		    @FlocksOrHerds = @FlocksOrHerds,
		    @Species = @Species,
		    @Animals = @Animals,
		    @Vaccinations = @Vaccinations,
		    @Samples = @Samples,
		    @PensideTests = @PensideTests,
		    @LaboratoryTests = @LaboratoryTests,
		    @LaboratoryTestInterpretations = @LaboratoryTestInterpretations,
		    @CaseLogs = @CaseLogs,
		    @ClinicalInformation = @ClinicalInformation,
		    @Contacts = @Contacts,
		    @CaseMonitorings = @CaseMonitorings,
		    @Events = @Notifications,
		    @UserID = @UserID,
		    @LinkLocalOrFieldSampleIDToReportID = @LinkLocalOrFieldSampleIDToReportID,
		    @OutbreakCaseIndicator = @OutbreakCaseIndicator,
		    @OutbreakCaseReportUID = @OutbreakCaseReportUID,
		    @OutbreakCaseStatusTypeID = @OutbreakCaseStatusTypeID,
		    @OutbreakCaseQuestionnaireObservationID = @OutbreakCaseQuestionnaireObservationID,
		    @PrimaryCaseIndicator = @PrimaryCaseIndicator

----------------------------------------------------------------------------------------------------------------
-- delete the Superseded disease report
		EXEC dbo.USP_VET_DISEASE_REPORT_DEL
			@DiseaseReportID = @SupersededVeterinaryDiseaseReportID,
			@DeduplicationIndicator = 1, -- deduplication
			@DataAuditEventID = @idfDataAuditEvent,
			@AuditUserName = @AuditUserName

	
----------------------------------------------------------------------------------------------------------------
-- Superseded disease report samples that go with survivor disease report
        -- data audit
		DECLARE @SampleIDsTemp TABLE
        (
            SampleID BIGINT NOT NULL
        );
        INSERT INTO @SampleIDsTemp
        SELECT idfMaterial
        FROM dbo.tlbMaterial
		WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID
		AND idfMaterial IN (SELECT SampleID FROM @SamplesTemp)
        -- End data audit

		UPDATE dbo.tlbMaterial
		SET idfVetCase = @SurvivorVeterinaryDiseaseReportID
		WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID
		AND idfMaterial IN (SELECT SampleID FROM @SamplesTemp)

        -- data audit
        WHILE EXISTS (SELECT * FROM @SampleIDsTemp)
        BEGIN

            SELECT TOP 1
                @SampleID = SampleID
            FROM @SampleIDsTemp;
            BEGIN
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbMaterial, 12665580000000,
					@SampleID,null,
					@SupersededVeterinaryDiseaseReportID,@SurvivorVeterinaryDiseaseReportID

            END

            DELETE FROM @SampleIDsTemp
            WHERE SampleID = @SampleID;
        END

        -- End data audit

----------------------------------------------------------------------------------------------------------------
-- remove tests associated with samples that aren't associated with survivor disease report
		UPDATE dbo.tlbTesting
		SET intRowStatus = 1
		WHERE idfMaterial IN (SELECT 
								idfMaterial 
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp))

        -- End data audit
		DECLARE @TestToRemoveSampleIDsTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            TestID BIGINT NOT NULL
        );
        INSERT INTO @TestToRemoveSampleIDsTemp
        SELECT idfMaterial, idfTesting 
	    FROM dbo.tlbTesting
		WHERE idfMaterial IN (SELECT 
								idfMaterial 
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp))

        WHILE EXISTS (SELECT * FROM @TestToRemoveSampleIDsTemp)
        BEGIN
            SELECT TOP 1
                @SampleID = SampleID,
                @TestID = TestID
            FROM @TestToRemoveSampleIDsTemp;
            BEGIN
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbTesting, @TestID
            END

            DELETE FROM @TestToRemoveSampleIDsTemp
            WHERE TestID = @TestID;
        END
        -- End data audit

----------------------------------------------------------------------------------------------------------------
-- remove test interpretations associated with samples that aren't associated with survivor disease report
		UPDATE dbo.tlbTestValidation
		SET intRowStatus = 1
		WHERE idfTesting IN (SELECT 
								idfTesting 
							 FROM dbo.tlbTesting 
							 WHERE idfMaterial IN
							 (SELECT idfMaterial
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp)))

        -- End data audit

		DECLARE @TestValidationIDsTemp TABLE
        (
            TestValidationID BIGINT NOT NULL,
            TestID BIGINT NOT NULL
        );
        INSERT INTO @TestValidationIDsTemp
        SELECT idfTestValidation, idfTesting 
	    FROM dbo.tlbTestValidation
		WHERE idfTesting IN (SELECT 
									idfTesting 
							 FROM dbo.tlbTesting 
							 WHERE idfMaterial IN
							 (SELECT idfMaterial
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp)))

        WHILE EXISTS (SELECT * FROM @TestValidationIDsTemp)
        BEGIN
            SELECT TOP 1
                @TestValidationID = TestValidationID,
                @TestID = TestID
            FROM @TestValidationIDsTemp;
            BEGIN
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbTestValidation, @TestValidationID
            END

            DELETE FROM @TestValidationIDsTemp
            WHERE TestValidationID = @TestValidationID;
        END
        -- End data audit
----------------------------------------------------------------------------------------------------------------
-- remove case Logs not associated with survivor disease report
		UPDATE dbo.tlbVetCaseLog
		SET intRowStatus = 1
		WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID

        -- End data audit

		DECLARE @VetCaseLogIDsTemp TABLE
        (
            VetCaseLogID BIGINT NOT NULL,
            VeterinaryDiseaseReportID BIGINT NOT NULL
        );
        INSERT INTO @VetCaseLogIDsTemp
        SELECT idfVetCaseLog, idfVetCase
	    FROM dbo.tlbVetCaseLog
	    WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID

        WHILE EXISTS (SELECT * FROM @VetCaseLogIDsTemp)
        BEGIN
            SELECT TOP 1
                @VetCaseLogID = VetCaseLogID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID
            FROM @VetCaseLogIDsTemp;
            BEGIN
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbVetCaseLog, @VetCaseLogID

            END

            DELETE FROM @VetCaseLogIDsTemp
            WHERE VetCaseLogID = @VetCaseLogID;
        END
        -- End data audit

----------------------------------------------------------------------------------------------------------------
-- remove penside tests associated with samples that aren't associated with survivor disease report
		UPDATE dbo.tlbPensideTest
		SET intRowStatus = 1
		WHERE idfMaterial IN (SELECT 
								idfMaterial 
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp))

        -- End data audit

		DECLARE @PensideTestIDsTemp TABLE
        (
            PensideTestID BIGINT NOT NULL,
            SampleID BIGINT NOT NULL
        );
        INSERT INTO @PensideTestIDsTemp
        SELECT idfPensideTest, idfMaterial
	    FROM dbo.tlbPensideTest
		WHERE idfMaterial IN (SELECT 
								idfMaterial 
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp))

        WHILE EXISTS (SELECT * FROM @PensideTestIDsTemp)
        BEGIN
            SELECT TOP 1
                @PensideTestID = PensideTestID,
                @SampleID = SampleID
            FROM @PensideTestIDsTemp;
            BEGIN
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbPensideTest, @PensideTestID
			-- End data audit

            END

            DELETE FROM @PensideTestIDsTemp
            WHERE PensideTestID = @PensideTestID;
        END
        -- End data audit

-- disease report samples that are no longer needed
        -- data audit
		DECLARE @NotNeededSampleIDsTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            VeterinaryDiseaseReportID BIGINT NULL
        );
        INSERT INTO @NotNeededSampleIDsTemp
        SELECT idfMaterial, idfVetCase
        FROM dbo.tlbMaterial
		WHERE (idfVetCase = @SupersededVeterinaryDiseaseReportID OR idfVetCase = @SurvivorVeterinaryDiseaseReportID)
		AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp)	
        -- End data audit

		UPDATE dbo.tlbMaterial
		SET idfVetCase = NULL
		WHERE (idfVetCase = @SupersededVeterinaryDiseaseReportID OR idfVetCase = @SurvivorVeterinaryDiseaseReportID)
		AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp)		

        -- data audit
        WHILE EXISTS (SELECT * FROM @NotNeededSampleIDsTemp)
        BEGIN
            SELECT TOP 1
                @SampleID = SampleID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID
            FROM @NotNeededSampleIDsTemp;
            BEGIN
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbMaterial, 12665580000000,
					@SampleID,null,
					@VeterinaryDiseaseReportID,NULL
            END

            DELETE FROM @NotNeededSampleIDsTemp
            WHERE SampleID = @SampleID;
        END

        -- End data audit

----------------------------------------------------------------------------------------------------------------
-- Superseded disease report vaccinations that go with survivor disease report
        -- data audit
		DECLARE @VaccinationIDsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            VeterinaryDiseaseReportID BIGINT NULL
        );
        INSERT INTO @VaccinationIDsTemp
        SELECT idfVaccination, idfVetCase
        FROM dbo.tlbVaccination 
        WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID
			AND idfVaccination IN (SELECT VaccinationID FROM @VaccinationsTemp)
        -- End data audit

		UPDATE dbo.tlbVaccination
		SET idfVetCase = @SurvivorVeterinaryDiseaseReportID
		WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID
		AND idfVaccination IN (SELECT VaccinationID FROM @VaccinationsTemp)

        -- data audit
        WHILE EXISTS (SELECT * FROM @VaccinationIDsTemp)
        BEGIN
            SELECT TOP 1
                @VaccinationID = VaccinationID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID
            FROM @VaccinationIDsTemp ;
            BEGIN
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbVaccination, 4577960000000,
					@VaccinationID,null,
					@VeterinaryDiseaseReportID,@SurvivorVeterinaryDiseaseReportID
            END

            DELETE FROM @VaccinationIDsTemp
            WHERE VaccinationID = @VaccinationID;
        END

        -- End data audit

-- disease report vaccinations that are no longer needed
        -- data audit
		DECLARE @NotNeededVaccinationIDsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            VeterinaryDiseaseReportID BIGINT NULL
        );
        INSERT INTO @NotNeededVaccinationIDsTemp
        SELECT idfVaccination, idfVetCase
        FROM dbo.tlbVaccination 
        WHERE (idfVetCase = @SupersededVeterinaryDiseaseReportID OR idfVetCase = @SurvivorVeterinaryDiseaseReportID)
		AND idfVaccination NOT IN (SELECT VaccinationID FROM @VaccinationsTemp)		
        -- End data audit

		UPDATE dbo.tlbVaccination
		SET idfVetCase = NULL
		WHERE (idfVetCase = @SupersededVeterinaryDiseaseReportID OR idfVetCase = @SurvivorVeterinaryDiseaseReportID)
		AND idfVaccination NOT IN (SELECT VaccinationID FROM @VaccinationsTemp)		

        -- data audit
        WHILE EXISTS (SELECT * FROM @NotNeededVaccinationIDsTemp)
        BEGIN
            SELECT TOP 1
                @VaccinationID = VaccinationID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID
            FROM @NotNeededVaccinationIDsTemp;
            BEGIN
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbVaccination, 4577960000000,
					@VaccinationID,null,
					@VeterinaryDiseaseReportID,NULL

            END

            DELETE FROM @NotNeededVaccinationIDsTemp
            WHERE VaccinationID = @VaccinationID;
        END

        -- End data audit
		 			 		
		IF @@TRANCOUNT > 0
			COMMIT TRANSACTION;

		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEDUPLICATION_PERSON_SET]...';


GO


-- ================================================================================================
-- Name: USP_ADMIN_DEDUPLICATION_PERSON_SET
--
-- Description:	Deduplication for Person Master record.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		04/14/2022  initial version
-- Ann Xiong		03/15/2023	Implemented Data Audit and fixed a few issues
-- Ann Xiong		03/17/2023	Fixed an issue for Data Audit After UPDATE dbo.tlbHuman

-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEDUPLICATION_PERSON_SET]
(
	@HumanMasterID BIGINT = NULL,
	@SupersededHumanMasterID BIGINT,
	@CopyToHumanIndicator BIT = 0, 
	@PersonalIDType BIGINT = NULL,
	@EIDSSPersonID NVARCHAR(200) = NULL,
	@PersonalID NVARCHAR(100) = NULL,
	@FirstName NVARCHAR(200) = NULL,
	@SecondName NVARCHAR(200) = NULL,
	@LastName NVARCHAR(200),
	@DateOfBirth DATETIME = NULL,
	@DateOfDeath DATETIME = NULL,
	@ReportedAge INT = NULL,
	@ReportAgeUOMID BIGINT = NULL,
	@HumanGenderTypeID BIGINT = NULL,
	@OccupationTypeID BIGINT = NULL,
	@CitizenshipTypeID BIGINT = NULL,
	@PassportNumber NVARCHAR(20) = NULL,
	@IsEmployedTypeID BIGINT = NULL,
---------------------------------------------------------------
	@EmployerName NVARCHAR(200) = NULL,
	@EmployedDateLastPresent DATETIME = NULL,
	@EmployerForeignAddressIndicator BIT = 0,
	@EmployerForeignAddressString NVARCHAR(200) = NULL,
	@EmployerGeoLocationID BIGINT = NULL,
	@EmployeridfsLocation BIGINT = NULL,
	@EmployerstrStreetName NVARCHAR(200) = NULL,
	@EmployerstrApartment NVARCHAR(200) = NULL,
	@EmployerstrBuilding NVARCHAR(200) = NULL,
	@EmployerstrHouse NVARCHAR(200) = NULL,
	@EmployeridfsPostalCode NVARCHAR(200) = NULL,
	@EmployerPhone NVARCHAR(100) = NULL,
---------------------------------------------------------------
	@IsStudentTypeID BIGINT = NULL,
	@SchoolName NVARCHAR(200) = NULL,
	@SchoolDateLastAttended DATETIME = NULL,
	@SchoolForeignAddressIndicator BIT = 0,
	@SchoolForeignAddressString NVARCHAR(200) = NULL,
	@SchoolGeoLocationID BIGINT = NULL,
	@SchoolidfsLocation BIGINT = NULL,
	@SchoolstrStreetName NVARCHAR(200) = NULL,
	@SchoolstrApartment NVARCHAR(200) = NULL,
	@SchoolstrBuilding NVARCHAR(200) = NULL,
	@SchoolstrHouse NVARCHAR(200) = NULL,
	@SchoolidfsPostalCode NVARCHAR(200) = NULL,
	@SchoolPhone NVARCHAR(100) = NULL,
---------------------------------------------------------------
	@HumanGeoLocationID BIGINT = NULL,
	@HumanidfsLocation BIGINT = NULL,
	@HumanstrStreetName NVARCHAR(200) = NULL,
	@HumanstrApartment NVARCHAR(200) = NULL,
	@HumanstrBuilding NVARCHAR(200) = NULL,
	@HumanstrHouse NVARCHAR(200) = NULL,
	@HumanidfsPostalCode NVARCHAR(200) = NULL,
	@HumanstrLatitude FLOAT = NULL,
	@HumanstrLongitude FLOAT = NULL,
	@HumanstrElevation FLOAT = NULL,
---------------------------------------------------------------
	@HumanPermGeoLocationID BIGINT = NULL,
	@HumanPermidfsLocation BIGINT = NULL,
	@HumanPermstrStreetName NVARCHAR(200) = NULL,
	@HumanPermstrApartment NVARCHAR(200) = NULL,
	@HumanPermstrBuilding NVARCHAR(200) = NULL,
	@HumanPermstrHouse NVARCHAR(200) = NULL,
	@HumanPermidfsPostalCode NVARCHAR(200) = NULL,
---------------------------------------------------------------
	@HumanAltGeoLocationID BIGINT = NULL,
	@HumanAltForeignAddressIndicator BIT = 0,
	@HumanAltForeignAddressString NVARCHAR(200) = NULL,
	@HumanAltidfsLocation BIGINT = NULL,
	@HumanAltstrStreetName NVARCHAR(200) = NULL,
	@HumanAltstrApartment NVARCHAR(200) = NULL,
	@HumanAltstrBuilding NVARCHAR(200) = NULL,
	@HumanAltstrHouse NVARCHAR(200) = NULL,
	@HumanAltidfsPostalCode NVARCHAR(200) = NULL,
---------------------------------------------------------------
	@RegistrationPhone NVARCHAR(200) = NULL,
	@HomePhone NVARCHAR(200) = NULL,
	@WorkPhone NVARCHAR(200) = NULL,
	@ContactPhoneCountryCode INT = NULL,
	@ContactPhone NVARCHAR(200) = NULL,
	@ContactPhoneTypeID BIGINT = NULL,
	@ContactPhone2CountryCode INT = NULL,
	@ContactPhone2 NVARCHAR(200) = NULL,
	@ContactPhone2TypeID BIGINT = NULL,
	@AuditUser NVARCHAR(100) = ''
)
AS
BEGIN

	BEGIN TRY
		BEGIN TRANSACTION;

		DECLARE @ReturnCode INT = 0;
		DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
		DECLARE @HumanID BIGINT = NULL;

		--Data Audit--
		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017082; 					-- Person Deduplication --
		DECLARE @idfObject bigint = @HumanMasterID;
		DECLARE @idfObjectTable_tlbHumanActual bigint = 4573200000000;
		DECLARE @idfObjectTable_tlbHuman bigint = 75600000000;
		DECLARE @idfDataAuditEvent bigint = NULL;	

		-- Get and Set UserId and SiteId
		SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo

		--  tauDataAuditEvent  Event Type- Edit 
		set @idfsDataAuditEventType =10016003;
		-- insert record into tauDataAuditEvent - 
		EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@HumanMasterID, @idfObjectTable_tlbHumanActual, @idfDataAuditEvent OUTPUT
		--Data Audit--

		EXEC dbo.USP_HUM_HUMAN_MASTER_SET 
			@HumanMasterID = @HumanMasterID,
		    @CopyToHumanIndicator = @CopyToHumanIndicator,
		    @PersonalIDType = @PersonalIDType,
		    @EIDSSPersonID = @EIDSSPersonID,
		    @PersonalID = @PersonalID,
		    @FirstName = @FirstName,
		    @SecondName = @SecondName,
		    @LastName = @LastName,
		    @DateOfBirth = @DateOfBirth,
		    @DateOfDeath = @DateOfDeath,
		    @ReportedAge = @ReportedAge,
		    @ReportAgeUOMID = @ReportAgeUOMID,
		    @HumanGenderTypeID = @HumanGenderTypeID,
		    @OccupationTypeID = @OccupationTypeID,
		    @CitizenshipTypeID = @CitizenshipTypeID,
		    @PassportNumber = @PassportNumber,
		    @IsEmployedTypeID = @IsEmployedTypeID,
		    @EmployerName = @EmployerName,
		    @EmployedDateLastPresent = @EmployedDateLastPresent,
		    @EmployerForeignAddressIndicator = @EmployerForeignAddressIndicator,
		    @EmployerForeignAddressString = @EmployerForeignAddressString,
		    @EmployerGeoLocationID = @EmployerGeoLocationID,
		    @EmployeridfsLocation = @EmployeridfsLocation,
		    @EmployerstrStreetName = @EmployerstrStreetName,
		    @EmployerstrApartment = @EmployerstrApartment,
		    @EmployerstrBuilding = @EmployerstrBuilding,
		    @EmployerstrHouse = @EmployerstrHouse,
		    @EmployeridfsPostalCode = @EmployeridfsPostalCode,
		    @EmployerPhone = @EmployerPhone,
		    @IsStudentTypeID = @IsStudentTypeID,
		    @SchoolName = @SchoolName,
		    @SchoolDateLastAttended = @SchoolDateLastAttended,
		    @SchoolForeignAddressIndicator = @SchoolForeignAddressIndicator,
		    @SchoolForeignAddressString = @SchoolForeignAddressString,
		    @SchoolGeoLocationID = @SchoolGeoLocationID,
		    @SchoolidfsLocation = @SchoolidfsLocation,
		    @SchoolstrStreetName = @SchoolstrStreetName,
		    @SchoolstrApartment = @SchoolstrApartment,
		    @SchoolstrBuilding = @SchoolstrBuilding,
		    @SchoolstrHouse = @SchoolstrHouse,
		    @SchoolidfsPostalCode = @SchoolidfsPostalCode,
		    @SchoolPhone = @SchoolPhone,
		    @HumanGeoLocationID = @HumanGeoLocationID,
		    @HumanidfsLocation = @HumanidfsLocation,
		    @HumanstrStreetName = @HumanstrStreetName,
		    @HumanstrApartment = @HumanstrApartment,
		    @HumanstrBuilding = @HumanstrBuilding,
		    @HumanstrHouse = @HumanstrHouse,
		    @HumanidfsPostalCode = @HumanidfsPostalCode,
		    @HumanstrLatitude = @HumanstrLatitude,
		    @HumanstrLongitude = @HumanstrLongitude,
		    @HumanstrElevation = @HumanstrElevation,
		    @HumanPermGeoLocationID = @HumanPermGeoLocationID,
		    @HumanPermidfsLocation = @HumanPermidfsLocation,
		    @HumanPermstrStreetName = @HumanPermstrStreetName,
		    @HumanPermstrApartment = @HumanPermstrApartment,
		    @HumanPermstrBuilding = @HumanPermstrBuilding,
		    @HumanPermstrHouse = @HumanPermstrHouse,
		    @HumanPermidfsPostalCode = @HumanPermidfsPostalCode,
		    @HumanAltGeoLocationID = @HumanAltGeoLocationID,
		    @HumanAltForeignAddressIndicator = @HumanAltForeignAddressIndicator,
		    @HumanAltForeignAddressString = @HumanAltForeignAddressString,
		    @HumanAltidfsLocation = @HumanAltidfsLocation,
		    @HumanAltstrStreetName = @HumanAltstrStreetName,
		    @HumanAltstrApartment = @HumanAltstrApartment,
		    @HumanAltstrBuilding = @HumanAltstrBuilding,
		    @HumanAltstrHouse = @HumanAltstrHouse,
		    @HumanAltidfsPostalCode = @HumanAltidfsPostalCode,
		    @RegistrationPhone = @RegistrationPhone,
		    @HomePhone = @HomePhone,
		    @WorkPhone =@WorkPhone,
		    @ContactPhoneCountryCode = @ContactPhoneCountryCode,
		    @ContactPhone = @ContactPhone,
		    @ContactPhoneTypeID = @ContactPhoneTypeID,
		    @ContactPhone2CountryCode = @ContactPhone2CountryCode,
		    @ContactPhone2 = @ContactPhone2,
		    @ContactPhone2TypeID = @ContactPhone2TypeID,
			@idfDataAuditEvent = @idfDataAuditEvent,
		    @AuditUser = @AuditUser
		
--------------------------------------------------------------------------------------------------
-- replace Superseded Human ID with surviving Human ID
--------------------------------------------------------------------------------------------------
		--Data Audit--
		DECLARE @HumanIDsTemp TABLE
        (
            HumanID BIGINT NOT NULL
        );
        INSERT INTO @HumanIDsTemp
        SELECT idfHuman
        FROM dbo.tlbHuman
		WHERE idfHumanActual = @SupersededHumanMasterID
		--Data Audit--

		UPDATE dbo.tlbHuman
		SET idfHumanActual = @HumanMasterID
		WHERE idfHumanActual = @SupersededHumanMasterID


		--Data Audit--
        WHILE EXISTS (SELECT * FROM @HumanIDsTemp)
        BEGIN

            SELECT TOP 1
                @HumanID = HumanID
            FROM @HumanIDsTemp;
            BEGIN
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbHuman, 4572310000000,
					@HumanID,null,
					@SupersededHumanMasterID,@HumanMasterID

            END

            DELETE FROM @HumanIDsTemp
            WHERE HumanID = @HumanID;
        END
		--Data Audit--
		
--------------------------------------------------------------------------------------------------
-- soft delete the old Farm Master relate records
--------------------------------------------------------------------------------------------------
		EXEC dbo.USP_HUM_HUMAN_MASTER_DEL
			@HumanMasterID = @SupersededHumanMasterID,
			@idfDataAuditEvent = @idfDataAuditEvent,
		    @AuditUserName = @AuditUser
		 		
		IF @@TRANCOUNT > 0
			COMMIT TRANSACTION;

		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage,
			@HumanMasterID HumanMasterID,
			@EIDSSPersonID EIDSSPersonID, 
			@HumanID HumanID;
		--SELECT @ReturnCode ReturnCode,
		--	@ReturnMessage ReturnMessage,
		--	@HumanMasterID SessionKey

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_AccessRule_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_AccessRule_SET
--
-- Description:	Inserts or updates an access rule for configurable filtration.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		06/03/2022 Initial release.
-- Stephen Long     06/04/2022 Correction on reference type ID, and changed to use API save 
--                             response model with key ID and key name.
-- Stephen Long     12/28/2022 Fix to source system key value ID.
-- Stephen Long     03/14/2023 Added reciprocal rule insert for granting actor, and data audit 
--                             logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_AccessRule_SET]
(
    @AccessRuleID BIGINT = NULL,
    @AccessRuleName VARCHAR(200),
    @strNationalName NVARCHAR(200),
    @LangId NVARCHAR(50),
    @intOrder INT = NULL,
    @BorderingAreaRuleIndicator BIT = 0,
    @DefaultRuleIndicator BIT = 0,
    @ReciprocalRuleIndicator BIT = 0,
    @GrantingActorSiteGroupID BIGINT = NULL,
    @GrantingActorSiteID BIGINT = NULL,
    @AccessToPersonalDataPermissionIndicator BIT = 0,
    @AccessToGenderAndAgeDataPermissionIndicator BIT = 0,
    @CreatePermissionIndicator BIT = 0,
    @DeletePermissionIndicator BIT = 0,
    @ReadPermissionIndicator BIT = 0,
    @WritePermissionIndicator BIT = 0,
    @AdministrativeLevelTypeID BIGINT = NULL,
    @RowStatus INT = 0,
    @ReceivingActors NVARCHAR(MAX) = NULL,
    @AuditUser NVARCHAR(200)
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @RowAction CHAR = NULL,
            @RowID BIGINT = NULL,
            @AccessRuleActorID BIGINT = NULL,
            @GrantingActorIndicator BIT = NULL,
            @ActorSiteGroupID BIGINT = NULL,
            @ActorSiteID BIGINT = NULL,
            @ActorEmployeeGroupID BIGINT = NULL,
            @ActorUserID BIGINT = NULL,
                                                                  -- Data audit
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @DataAuditEventID BIGINT = NULL,
            @DataAuditEventTypeID BIGINT = NULL,
            @ObjectTypeID BIGINT = 10017015,                      -- Data access data audit object type
            @ObjectID BIGINT = NULL,
            @ObjectTableAccessRuleID BIGINT = 53577790000010;     -- AccessRule
    DECLARE @AccessRuleBeforeEdit TABLE
    (
        AccessRuleID BIGINT,
        DefaultRuleIndicator BIT,
        BorderingAreaRuleIndicator BIT,
        ReciprocalRuleIndicator BIT,
        GrantingActorSiteGroupID BIGINT,
        GrantingActorSiteID BIGINT,
        ReadPermissionIndicator BIT,
        AccessToPersonalDataPermissionIndicator BIT,
        AccessToGenderAndAgeDataPermissionIndicator BIT,
        CreatePermissionIndicator BIT,
        WritePermissionIndicator BIT,
        DeletePermissionIndicator BIT,
        AdministrativeLevelTypeID BIGINT,
        RowStatus INT
    );
    DECLARE @AccessRuleAfterEdit TABLE
    (
        AccessRuleID BIGINT,
        DefaultRuleIndicator BIT,
        BorderingAreaRuleIndicator BIT,
        ReciprocalRuleIndicator BIT,
        GrantingActorSiteGroupID BIGINT,
        GrantingActorSiteID BIGINT,
        ReadPermissionIndicator BIT,
        AccessToPersonalDataPermissionIndicator BIT,
        AccessToGenderAndAgeDataPermissionIndicator BIT,
        CreatePermissionIndicator BIT,
        WritePermissionIndicator BIT,
        DeletePermissionIndicator BIT,
        AdministrativeLevelTypeID BIGINT,
        RowStatus INT
    );
    -- End data audit
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage VARCHAR(200)
    );

    DECLARE @ActorsTemp TABLE
    (
        AccessRuleActorID BIGINT NOT NULL,
        GrantingActorIndicator BIT NOT NULL,
        ActorSiteGroupID BIGINT NULL,
        ActorSiteID BIGINT NULL,
        ActorEmployeeGroupID BIGINT NULL,
        ActorUserID BIGINT NULL,
        RowStatus INT NOT NULL,
        RowAction INT NULL
    );

    INSERT INTO @ActorsTemp
    SELECT *
    FROM
        OPENJSON(@ReceivingActors)
        WITH
        (
            AccessRuleActorID BIGINT,
            GrantingActorIndicator BIT,
            ActorSiteGroupID BIGINT,
            ActorSiteID BIGINT,
            ActorEmployeeGroupID BIGINT,
            ActorUserID BIGINT,
            RowStatus INT,
            RowAction INT
        );

    DECLARE @DuplicateDefault INT
        = 0, -- Updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.
            @intOrderNew INT = (
                                   SELECT MAX(intOrder) + 10
                                   FROM dbo.trtBaseReference
                                   WHERE idfsReferenceType = 19000537
                               );

    SET @AuditUser = ISNULL(@AuditUser, '');

    -- Data audit
    -- Get and set user and site identifiers
    SELECT @AuditUserID = userInfo.UserId,
           @AuditSiteID = userInfo.SiteId
    FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo;

    -- Set intOrder if it was passed as null
    IF @intOrder IS NULL
    BEGIN
        SET @intOrder = @intOrderNew;
    END

    BEGIN TRY
        IF @AccessRuleID IS NULL
        BEGIN -- This is an insert.  Check if the strDefault is a duplicate
            IF EXISTS
            (
                SELECT *
                FROM dbo.trtBaseReference
                WHERE strDefault = @AccessRuleName
                      AND idfsReferenceType = 19000537
                      AND intRowStatus = 0
            )
            BEGIN
                SET @DuplicateDefault = 1;
            END
        END
        ELSE
        BEGIN -- This is an update.  Check if the strDefault is a duplicate
            IF EXISTS
            (
                SELECT *
                FROM dbo.trtBaseReference
                WHERE idfsBaseReference <> @AccessRuleID
                      AND strDefault = @AccessRuleName
                      AND idfsReferenceType = 19000537
                      AND intRowStatus = 0
            )
            BEGIN
                SET @DuplicateDefault = 1;
            END
        END

        IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate.
        BEGIN
            SELECT @ReturnMessage = 'DOES EXIST';
        END
        ELSE -- There is no duplicate, so continue.
        BEGIN
            -- Data audit
            IF EXISTS (SELECT * FROM dbo.AccessRule WHERE AccessRuleID = @AccessRuleID)
            BEGIN
                SET @DataAuditEventTypeID = 10016003; -- Edit data audit event type
            END
            ELSE
            BEGIN
                SET @DataAuditEventTypeID = 10016001; -- Create data audit event type
            END
            -- End data audit

            EXECUTE dbo.USP_GBL_BaseReference_SET @ReferenceID = @AccessRuleID OUTPUT,
                                                  @ReferenceType = 19000537,
                                                  @LangID = @LangID,
                                                  @DefaultName = @AccessRuleName,
                                                  @NationalName = @strNationalName,
                                                  @HACode = NULL,
                                                  @Order = @intOrder,
                                                  @System = 0,
                                                  @User = @AuditUser

            -- Data audit
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @AccessRuleID,
                                                      @ObjectTableAccessRuleID,
                                                      NULL,
                                                      @DataAuditEventID OUTPUT;
            -- End data audit

            IF EXISTS (SELECT * FROM dbo.AccessRule WHERE AccessRuleID = @AccessRuleID) -- there is a record, so update it
            BEGIN
                -- Data audit
                INSERT INTO @AccessRuleBeforeEdit
                SELECT AccessRuleID,
                       DefaultRuleIndicator,
                       BorderingAreaRuleIndicator,
                       ReciprocalRuleIndicator,
                       GrantingActorSiteGroupID,
                       GrantingActorSiteID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       CreatePermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator,
                       AdministrativeLevelTypeID,
                       intRowStatus
                FROM dbo.AccessRule
                WHERE AccessRuleID = @AccessRuleID;
                -- End data audit

                UPDATE dbo.AccessRule
                SET DefaultRuleIndicator = @DefaultRuleIndicator,
                    BorderingAreaRuleIndicator = @BorderingAreaRuleIndicator,
                    ReciprocalRuleIndicator = @ReciprocalRuleIndicator,
                    GrantingActorSiteGroupID = @GrantingActorSiteGroupID,
                    GrantingActorSiteID = @GrantingActorSiteID,
                    ReadPermissionIndicator = @ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator = @AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator = @AccessToGenderAndAgeDataPermissionIndicator,
                    CreatePermissionIndicator = @CreatePermissionIndicator,
                    WritePermissionIndicator = @WritePermissionIndicator,
                    DeletePermissionIndicator = @DeletePermissionIndicator,
                    AdministrativeLevelTypeID = @AdministrativeLevelTypeID,
                    intRowStatus = @RowStatus,
                    AuditUpdateUser = @AuditUser,
                    AuditUpdateDTM = GETDATE()
                WHERE AccessRuleID = @AccessRuleID;

                -- Data audit
                INSERT INTO @AccessRuleAfterEdit
                SELECT AccessRuleID,
                       DefaultRuleIndicator,
                       BorderingAreaRuleIndicator,
                       ReciprocalRuleIndicator,
                       GrantingActorSiteGroupID,
                       GrantingActorSiteID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       CreatePermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator,
                       AdministrativeLevelTypeID,
                       intRowStatus
                FROM dbo.AccessRule
                WHERE AccessRuleID = @AccessRuleID;

                IF @RowStatus = 0
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           51586990000099,
                           a.AccessRuleID,
                           NULL,
                           b.GrantingActorSiteGroupID,
                           a.GrantingActorSiteGroupID,
                           @AuditUser,
                           NULL
                    FROM @AccessRuleAfterEdit AS a
                        FULL JOIN @AccessRuleBeforeEdit AS b
                            ON a.AccessRuleID = b.AccessRuleID
                    WHERE (a.GrantingActorSiteGroupID <> b.GrantingActorSiteGroupID)
                          OR (
                                 a.GrantingActorSiteGroupID IS NOT NULL
                                 AND b.GrantingActorSiteGroupID IS NULL
                             )
                          OR (
                                 a.GrantingActorSiteGroupID IS NULL
                                 AND b.GrantingActorSiteGroupID IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           51586990000100,
                           a.AccessRuleID,
                           NULL,
                           b.GrantingActorSiteID,
                           a.GrantingActorSiteID,
                           @AuditUser,
                           NULL
                    FROM @AccessRuleAfterEdit AS a
                        FULL JOIN @AccessRuleBeforeEdit AS b
                            ON a.AccessRuleID = b.AccessRuleID
                    WHERE (a.GrantingActorSiteID <> b.GrantingActorSiteID)
                          OR (
                                 a.GrantingActorSiteID IS NOT NULL
                                 AND b.GrantingActorSiteID IS NULL
                             )
                          OR (
                                 a.GrantingActorSiteID IS NULL
                                 AND b.GrantingActorSiteID IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           51586990000102,
                           a.AccessRuleID,
                           NULL,
                           b.ReadPermissionIndicator,
                           a.ReadPermissionIndicator,
                           @AuditUser,
                           NULL
                    FROM @AccessRuleAfterEdit AS a
                        FULL JOIN @AccessRuleBeforeEdit AS b
                            ON a.AccessRuleID = b.AccessRuleID
                    WHERE (a.ReadPermissionIndicator <> b.ReadPermissionIndicator)
                          OR (
                                 a.ReadPermissionIndicator IS NOT NULL
                                 AND b.ReadPermissionIndicator IS NULL
                             )
                          OR (
                                 a.ReadPermissionIndicator IS NULL
                                 AND b.ReadPermissionIndicator IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           51586990000103,
                           a.AccessRuleID,
                           NULL,
                           b.AccessToPersonalDataPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           @AuditUser,
                           NULL
                    FROM @AccessRuleAfterEdit AS a
                        FULL JOIN @AccessRuleBeforeEdit AS b
                            ON a.AccessRuleID = b.AccessRuleID
                    WHERE (a.AccessToPersonalDataPermissionIndicator <> b.AccessToPersonalDataPermissionIndicator)
                          OR (
                                 a.AccessToPersonalDataPermissionIndicator IS NOT NULL
                                 AND b.AccessToPersonalDataPermissionIndicator IS NULL
                             )
                          OR (
                                 a.AccessToPersonalDataPermissionIndicator IS NULL
                                 AND b.AccessToPersonalDataPermissionIndicator IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           51586990000104,
                           a.AccessRuleID,
                           NULL,
                           b.AccessToGenderAndAgeDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           @AuditUser,
                           NULL
                    FROM @AccessRuleAfterEdit AS a
                        FULL JOIN @AccessRuleBeforeEdit AS b
                            ON a.AccessRuleID = b.AccessRuleID
                    WHERE (a.AccessToGenderAndAgeDataPermissionIndicator <> b.AccessToGenderAndAgeDataPermissionIndicator)
                          OR (
                                 a.AccessToGenderAndAgeDataPermissionIndicator IS NOT NULL
                                 AND b.AccessToGenderAndAgeDataPermissionIndicator IS NULL
                             )
                          OR (
                                 a.AccessToGenderAndAgeDataPermissionIndicator IS NULL
                                 AND b.AccessToGenderAndAgeDataPermissionIndicator IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           51586990000105,
                           a.AccessRuleID,
                           NULL,
                           b.WritePermissionIndicator,
                           a.WritePermissionIndicator,
                           @AuditUser,
                           NULL
                    FROM @AccessRuleAfterEdit AS a
                        FULL JOIN @AccessRuleBeforeEdit AS b
                            ON a.AccessRuleID = b.AccessRuleID
                    WHERE (a.WritePermissionIndicator <> b.WritePermissionIndicator)
                          OR (
                                 a.WritePermissionIndicator IS NOT NULL
                                 AND b.WritePermissionIndicator IS NULL
                             )
                          OR (
                                 a.WritePermissionIndicator IS NULL
                                 AND b.WritePermissionIndicator IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           51586990000106,
                           a.AccessRuleID,
                           NULL,
                           b.DeletePermissionIndicator,
                           a.DeletePermissionIndicator,
                           @AuditUser,
                           NULL
                    FROM @AccessRuleAfterEdit AS a
                        FULL JOIN @AccessRuleBeforeEdit AS b
                            ON a.AccessRuleID = b.AccessRuleID
                    WHERE (a.DeletePermissionIndicator <> b.DeletePermissionIndicator)
                          OR (
                                 a.DeletePermissionIndicator IS NOT NULL
                                 AND b.DeletePermissionIndicator IS NULL
                             )
                          OR (
                                 a.DeletePermissionIndicator IS NULL
                                 AND b.DeletePermissionIndicator IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           51586990000107,
                           a.AccessRuleID,
                           NULL,
                           b.BorderingAreaRuleIndicator,
                           a.BorderingAreaRuleIndicator,
                           @AuditUser,
                           NULL
                    FROM @AccessRuleAfterEdit AS a
                        FULL JOIN @AccessRuleBeforeEdit AS b
                            ON a.AccessRuleID = b.AccessRuleID
                    WHERE (a.BorderingAreaRuleIndicator <> b.BorderingAreaRuleIndicator)
                          OR (
                                 a.BorderingAreaRuleIndicator IS NOT NULL
                                 AND b.BorderingAreaRuleIndicator IS NULL
                             )
                          OR (
                                 a.BorderingAreaRuleIndicator IS NULL
                                 AND b.BorderingAreaRuleIndicator IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           51586990000108,
                           a.AccessRuleID,
                           NULL,
                           b.ReciprocalRuleIndicator,
                           a.ReciprocalRuleIndicator,
                           @AuditUser,
                           NULL
                    FROM @AccessRuleAfterEdit AS a
                        FULL JOIN @AccessRuleBeforeEdit AS b
                            ON a.AccessRuleID = b.AccessRuleID
                    WHERE (a.ReciprocalRuleIndicator <> b.ReciprocalRuleIndicator)
                          OR (
                                 a.ReciprocalRuleIndicator IS NOT NULL
                                 AND b.ReciprocalRuleIndicator IS NULL
                             )
                          OR (
                                 a.ReciprocalRuleIndicator IS NULL
                                 AND b.ReciprocalRuleIndicator IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           51586990000109,
                           a.AccessRuleID,
                           NULL,
                           b.DefaultRuleIndicator,
                           a.DefaultRuleIndicator,
                           @AuditUser,
                           NULL
                    FROM @AccessRuleAfterEdit AS a
                        FULL JOIN @AccessRuleBeforeEdit AS b
                            ON a.AccessRuleID = b.AccessRuleID
                    WHERE (a.DefaultRuleIndicator <> b.DefaultRuleIndicator)
                          OR (
                                 a.DefaultRuleIndicator IS NOT NULL
                                 AND b.DefaultRuleIndicator IS NULL
                             )
                          OR (
                                 a.DefaultRuleIndicator IS NULL
                                 AND b.DefaultRuleIndicator IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           51586990000110,
                           a.AccessRuleID,
                           NULL,
                           b.AdministrativeLevelTypeID,
                           a.AdministrativeLevelTypeID,
                           @AuditUser,
                           NULL
                    FROM @AccessRuleAfterEdit AS a
                        FULL JOIN @AccessRuleBeforeEdit AS b
                            ON a.AccessRuleID = b.AccessRuleID
                    WHERE (a.AdministrativeLevelTypeID <> b.AdministrativeLevelTypeID)
                          OR (
                                 a.AdministrativeLevelTypeID IS NOT NULL
                                 AND b.AdministrativeLevelTypeID IS NULL
                             )
                          OR (
                                 a.AdministrativeLevelTypeID IS NULL
                                 AND b.AdministrativeLevelTypeID IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           51586990000111,
                           a.AccessRuleID,
                           NULL,
                           b.CreatePermissionIndicator,
                           a.CreatePermissionIndicator,
                           @AuditUser,
                           NULL
                    FROM @AccessRuleAfterEdit AS a
                        FULL JOIN @AccessRuleBeforeEdit AS b
                            ON a.AccessRuleID = b.AccessRuleID
                    WHERE (a.CreatePermissionIndicator <> b.CreatePermissionIndicator)
                          OR (
                                 a.CreatePermissionIndicator IS NOT NULL
                                 AND b.CreatePermissionIndicator IS NULL
                             )
                          OR (
                                 a.CreatePermissionIndicator IS NULL
                                 AND b.CreatePermissionIndicator IS NOT NULL
                             );
                END
                ELSE
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableAccessRuleID,
                           @AccessRuleID,
                           @AuditUser,
                           NULL;
                END
            END
            ELSE -- There is no record, so insert it.
            BEGIN
                INSERT INTO dbo.AccessRule
                (
                    AccessRuleID,
                    DefaultRuleIndicator,
                    BorderingAreaRuleIndicator,
                    ReciprocalRuleIndicator,
                    GrantingActorSiteGroupID,
                    GrantingActorSiteID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    CreatePermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator,
                    AdministrativeLevelTypeID,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser,
                    SourceSystemNameID,
                    SourceSystemKeyValue
                )
                VALUES
                (@AccessRuleID,
                 @DefaultRuleIndicator,
                 @BorderingAreaRuleIndicator,
                 @ReciprocalRuleIndicator,
                 @GrantingActorSiteGroupID,
                 @GrantingActorSiteID,
                 @ReadPermissionIndicator,
                 @AccessToPersonalDataPermissionIndicator,
                 @AccessToGenderAndAgeDataPermissionIndicator,
                 @CreatePermissionIndicator,
                 @WritePermissionIndicator,
                 @DeletePermissionIndicator,
                 @AdministrativeLevelTypeID,
                 @RowStatus,
                 GETDATE(),
                 @AuditUser,
                 10519001,
                 '[{"AccessRuleID":' + CAST(@AccessRuleID AS NVARCHAR(24)) + '}]'
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableAccessRuleID,
                 @AccessRuleID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableAccessRuleID AS NVARCHAR(300)) + '}]',
                 @AuditUser,
                 NULL
                );
                -- End data audit

                IF @ReciprocalRuleIndicator = 1
                BEGIN
                    DECLARE @TempID BIGINT = 0;
                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_ADMIN_ACCESS_RULE_ACTOR_SET @TempID OUTPUT,
                                                                 @AccessRuleID,
                                                                 1,
                                                                 @GrantingActorSiteGroupID,
                                                                 @GrantingActorSiteID,
                                                                 NULL,
                                                                 NULL,
                                                                 0,
                                                                 1,
                                                                 @AuditUser, 
                                                                 @DataAuditEventID;
                END
            END

            WHILE EXISTS (SELECT * FROM @ActorsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = AccessRuleActorID,
                    @AccessRuleActorID = AccessRuleActorID,
                    @GrantingActorIndicator = GrantingActorIndicator,
                    @ActorSiteGroupID = ActorSiteGroupID,
                    @ActorSiteID = ActorSiteID,
                    @ActorEmployeeGroupID = ActorEmployeeGroupID,
                    @ActorUserID = ActorUserID,
                    @RowStatus = RowStatus,
                    @RowAction = RowAction
                FROM @ActorsTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_ADMIN_ACCESS_RULE_ACTOR_SET @AccessRuleActorID = @AccessRuleActorID OUTPUT,
                                                             @AccessRuleID = @AccessRuleID,
                                                             @GrantingActorIndicator = @GrantingActorIndicator,
                                                             @ActorSiteGroupID = @ActorSiteGroupID,
                                                             @ActorSiteID = @ActorSiteID,
                                                             @ActorEmployeeGroupID = @ActorEmployeeGroupID,
                                                             @ActorUserID = @ActorUserID,
                                                             @RowStatus = @RowStatus,
                                                             @RowAction = @RowAction,
                                                             @AuditUser = @AuditUser, 
                                                             @DataAuditEventID = @DataAuditEventID;

                DELETE FROM @ActorsTemp
                WHERE AccessRuleActorID = @RowID;
            END;
        END

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @AccessRuleID KeyId,
               'AccessRuleID' KeyIdName;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
-- ================================================================================================
-- Name: USSP_OMM_CONVERT_CONTACT_Set
-- Description: Inserts a new case for a contact being converted to a case.
--          
-- Revision History:
-- Name                    Date       Change Detail
-- ----------------------- ---------- ------------------------------------------------------------
-- Stephen Long            06/05/2022 Initial release
-- Stephen Long            10/25/2022 Added logic to convert veterinary contact to a veterinary 
--                                    case.
-- Ann Xiong			   03/09/2023  Modified to pass parameter '@DataAuditEventTypeID' when call USP_VET_DISEASE_REPORT_SET
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_OMM_CONVERT_CONTACT_Set]
(
    @OutbreakID BIGINT = NULL,
    @CaseContactID BIGINT, 
    @HumanMasterID BIGINT,
    @HumanID BIGINT, 
    @FarmMasterID BIGINT = NULL, 
    @GeolocationID BIGINT = NULL,
    @LocationID BIGINT = NULL,
    @Street NVARCHAR(200) = NULL,
    @Apartment NVARCHAR(200) = NULL,
    @Building NVARCHAR(200) = NULL,
    @House NVARCHAR(200) = NULL,
    @PostalCode NVARCHAR(200) = NULL,
    @Latitude FLOAT = NULL,
    @Longitude FLOAT = NULL,
    @Elevation FLOAT = NULL,
    @CaseStatusTypeID BIGINT = NULL,
    @CaseClassificationTypeID BIGINT = NULL,
    @AuditUserName NVARCHAR(100) = NULL
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @CaseID BIGINT = NULL,
            @EIDSSCaseID NVARCHAR(50) = NULL,
            @DiseaseReportID BIGINT = NULL;

    BEGIN TRY
        IF @FarmMasterID IS NULL
        BEGIN
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport', @CaseID OUTPUT;

            EXEC dbo.USP_GBL_NextNumber_GET 'Human Outbreak Case',
                                            @EIDSSCaseID OUTPUT,
                                            NULL;

            EXEC dbo.USP_OMM_HUMAN_DISEASE_SET @DiseaseReportID OUTPUT,
                                               @idfHuman = @HumanID, 
                                               @strHumanCaseId = @EIDSSCaseID,
                                               @OutbreakCaseReportUID = @CaseID,
                                               @idfHumanActual = @HumanMasterID,
                                               @idfsFinalDiagnosis = NULL,
                                               @datDateOfDiagnosis = NULL,
                                               @datNotificationDate = NULL,
                                               @idfsFinalState = NULL,
                                               @idfSentByOffice = NULL,
                                               @idfSentByPerson = NULL,
                                               @idfReceivedByOffice = NULL,
                                               @idfReceivedByPerson = NULL,
                                               @idfHospital = NULL,
                                               @datOnSetDate = NULL,
                                               @idfsYNHospitalization = NULL,
                                               @datHospitalizationDate = NULL,
                                               @datDischargeDate = NULL,
                                               @strHospitalName = NULL,
                                               @idfsYNAntimicrobialTherapy = NULL,
                                               @strClinicalNotes = NULL,
                                               @strNote = NULL,
                                               @idfsYNSpecIFicVaccinationAdministered = NULL,
                                               @idfInvestigatedByOffice = NULL,
                                               @idfInvestigatedByPerson = NULL,
                                               @StartDateofInvestigation = NULL,
                                               @idfOutbreak = @OutbreakID,
                                               @CaseGeoLocationID = @GeolocationID,
                                               @CaseidfsLocation = @LocationID,
                                               @CasestrStreetName = @Street,
                                               @CasestrApartment = @Apartment,
                                               @CasestrBuilding = @Building,
                                               @CasestrHouse = @House,
                                               @CaseidfsPostalCode = @PostalCode,
                                               @CasestrLatitude = @Latitude,
                                               @CasestrLongitude = @Longitude,
                                               @CasestrElevation = @Elevation,
                                               @SamplesParameters = NULL,
                                               @idfsYNSpecimenCollected = NULL,
                                               @idfsYNTestsConducted = NULL,
                                               @TestsParameters = NULL,
                                               @AntiviralTherapiesParameters = NULL,
                                               @VaccinationsParameters = NULL,
                                               @CaseMonitoringsParameters = NULL,
                                               @User = @AuditUserName,
                                               @idfEpiObservation = NULL,
                                               @idfCSObservation = NULL;

            INSERT INTO dbo.OutbreakCaseReport
            (
                OutBreakCaseReportUID,
                idfOutbreak,
                strOutbreakCaseID,
                idfHumanCase,
                idfVetCase,
                OutbreakCaseStatusID,
                OutbreakCaseClassificationID,
                IsPrimaryCaseFlag,
                intRowStatus,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@CaseID,
             @OutbreakID,
             @EIDSSCaseID,
             @DiseaseReportID,
             NULL,
             @CaseStatusTypeID,
             @CaseClassificationTypeID,
             0  ,
             0  ,
             @AuditUserName,
             GETDATE(),
             NULL,
             NULL
            );
        END
        ELSE
        BEGIN
            DECLARE @SiteID BIGINT = (SELECT idfsSite FROM dbo.tlbOutbreak WHERE idfOutbreak = @OutbreakID);
            DECLARE @DiseaseID BIGINT = (SELECT idfsDiagnosisOrDiagnosisGroup FROM dbo.tlbOutbreak WHERE idfOutbreak = @OutbreakID);
            DECLARE @ReportTypeID BIGINT = (SELECT vc.idfsCaseType FROM dbo.OutbreakCaseContact occ
                INNER JOIN dbo.OutbreakCaseReport ocr 
                    ON ocr.OutBreakCaseReportUID = occ.OutBreakCaseReportUID 
                INNER JOIN dbo.tlbVetCase vc 
                    ON vc.idfVetCase = ocr.idfVetCase 
                WHERE occ.OutbreakCaseContactUID = @CaseContactID);
            DECLARE @EnteredDate DATETIME = GETDATE();

            EXEC dbo.USP_VET_DISEASE_REPORT_SET @DiseaseReportID = -1,
                                                @EIDSSReportID = NULL,
                                                @FarmID = NULL,
                                                @FarmMasterID = @FarmMasterID,
                                                @FarmOwnerID = NULL,
                                                @MonitoringSessionID = NULL,
                                                @OutbreakID = @OutbreakID,
                                                @RelatedToDiseaseReportID = NULL,
                                                @EIDSSFieldAccessionID = NULL,
                                                @DiseaseID = @DiseaseID,
                                                @EnteredByPersonID = NULL,
                                                @ReportedByOrganizationID = NULL,
                                                @ReportedByPersonID = NULL,
                                                @InvestigatedByOrganizationID = NULL,
                                                @InvestigatedByPersonID = NULL,
                                                @ReceivedByOrganizationID = NULL,
                                                @ReceivedByPersonID = NULL,
                                                @SiteID = @SiteID,
                                                @DiagnosisDate = NULL,
                                                @EnteredDate = @EnteredDate, 
                                                @ReportDate = NULL,
                                                @AssignedDate = NULL,
                                                @InvestigationDate = NULL,
                                                @RowStatus = 0,
                                                @ReportTypeID = NULL,
                                                @ClassificationTypeID = NULL,
                                                @StatusTypeID = 10109001, -- In Progress
                                                @ReportCategoryTypeID = @ReportTypeID, -- Avian or Livestock
                                                @FarmTotalAnimalQuantity = NULL,
                                                @FarmSickAnimalQuantity = NULL,
                                                @FarmDeadAnimalQuantity = NULL,
                                                @FarmLatitude = NULL,
                                                @FarmLongitude = NULL,
                                                @FarmEpidemiologicalObservationID = NULL,
                                                @ControlMeasuresObservationID = NULL,
                                                @TestsConductedIndicator = NULL,
												@DataAuditEventTypeID =  NULL,
                                                @AuditUserName = @AuditUserName,
                                                @FlocksOrHerds = NULL,
                                                @Species = NULL,
                                                @Animals = NULL,
                                                @Vaccinations = NULL,
                                                @Samples = NULL,
                                                @PensideTests = NULL,
                                                @LaboratoryTests = NULL,
                                                @LaboratoryTestInterpretations = NULL,
                                                @CaseLogs = NULL,
                                                @ClinicalInformation = NULL,
                                                @Contacts = NULL,
                                                @CaseMonitorings = NULL,
                                                @Events = NULL,
                                                @UserID = 0,
                                                @LinkLocalOrFieldSampleIDToReportID = 0,
                                                @OutbreakCaseIndicator = 1,
                                                @OutbreakCaseReportUID = NULL,
                                                @OutbreakCaseStatusTypeID = NULL,
                                                @OutbreakCaseQuestionnaireObservationID = NULL,
                                                @PrimaryCaseIndicator = 0;
        END;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SET]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SET
--
-- Description:	Inserts or updates samples, tests, test amendments, test interpretations, 
-- transfers, batches and approvals for the laboratory module use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/19/2018 Initial release.
-- Stephen Long		10/31/2018 Added the test amendments and transfers - LUC03 and LUC07.
-- Stephen Long		01/24/2019 Added box place availabilities parameter and updates.
-- Stephen Long     02/06/2019 Removed UserPreferenceID parameter; retrieved in the stored 
--                             procedure.  Replace temporary sample ID with the database ID 
--                             on new sample record that was also marked as a favorite. 
-- Stephen Long     02/09/2019 Corrected the JSON table name for EIDSSFieldSampleID to EIDSSLocal 
--                             FieldSampleID.
-- Stephen Long     02/19/2019 Modified for removed parameters from USSP_GBL_BATCH_TEST_SET and 
--                             added parameter to USSP_LAB_TRANSFER_SET.  Removed test 
--                             interpretation parameter.
-- Stephen Long     03/10/2019 Changed temp table field names for test amendement to sync up with 
--                             the API parameter names (LUC07).
-- Stephen Long     03/20/2019 Added row action on the batch test select from JSON variable. 
--                             Added check on Favorites parameter to only process if not null.
-- Stephen Long     04/17/2019 Update to use human master ID when registering new samples, and 
--                             copy over to human (similiar to how human disease report works).
-- Stephen Long     07/09/2019 Added human master ID parameter for call to sample set.
-- Stephen Long     08/29/2019 Corrected root sample ID on call to USSP_LAB_SAMPLE_SET.
-- Stephen Long     03/30/2020 Added audit user name parameter.
-- Stephen Long     04/20/2020 Changes for LUC10 vector type and species type ID's additions.
-- Stephen Long     10/28/2020 Changed row action from nchar to char.
-- Stephen Long     09/24/2021 Removed language parameter as it is not needed.
-- Stephen Long     01/03/2022 Changed login site to NVARCHAR(20).
-- Stephen Long     01/07/2022 Added copy of human actual to human stored procedure call.
-- Stephen Long     01/25/2022 Added logic to add farm, herd and species for samples having no
--                             disease report or monitoring session association.
-- Stephen Long     03/10/2022 Changed note to comment on samples table variable.
-- Stephen Long     03/25/2022 Updated suppress select table variables for adding of vet samples.
-- Stephen Long     03/29/2022 Fix on suppress select of species.
-- Stephen Long     03/30/2022 Fix on suppress select of human copy.
-- Stephen Long     04/20/2022 Changed observation ID on batch test table variable to nullable.
-- Stephen Long     05/18/2022 Added notification processing on new transfer records.
-- Stephen Long     05/24/2022 Fix to check vector ID less than zero and not -1.
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
-- Stephen Long     10/10/2022 Added monitoring session ID check when farm or human master ID is 
--                             not null for registering new samples.
-- Stephen Long     10/11/2022 Added insert to tlbMonitoringSessionToMaterial to pick up the 
--                             correct disease on an active surveillance session.
-- Stephen Long     10/18/2022 Fix to account for human active surveillance session diseases and 
--                             transferred samples for an active surveillance session.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                             defect 5006.
-- Stephen Long     10/21/2022 Added veterinary disease report, monitoring session and vector 
--                             identifiers to the USSP_LAB_TEST_SET call.
-- Stephen Long     12/14/2022 Added null data audit event to call of herd and species set.
-- Stephen Long     12/17/2022 Fix to call of USSP_VET_SPECIES_SET for outbreak status type; 
--                             passing null.
-- Stephen Long     01/03/2023 Fix to call of USSP_AS_SAMPLE_TO_DISEASE_SET for data audit logic; 
--                             passing null.
-- Stephen Long     02/20/2023 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SET]
(
    @Samples NVARCHAR(MAX) = NULL,
    @BatchTests NVARCHAR(MAX) = NULL,
    @Tests NVARCHAR(MAX) = NULL,
    @TestAmendments NVARCHAR(MAX) = NULL,
    @Transfers NVARCHAR(MAX) = NULL,
    @FreezerBoxLocationAvailabilities NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @Favorites XML = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @KeyId BIGINT = 0,
                                                               -- Data audit
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectTypeRepositorySchemeID BIGINT = 10017044,       -- Repository Scheme
        @ObjectTableFreezerSubdivisionID BIGINT = 75570000000; -- tlbFreezerSubdivision
-- End data audit
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX),
    ID BIGINT NULL
);
DECLARE @SuppressSelect2 TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
DECLARE @RowID BIGINT,
        @RowStatus INT,
        @RowAction INT,
        @SampleID BIGINT,
        @SampleTypeID BIGINT,
        @RootSampleID BIGINT = NULL,
        @ParentSampleID BIGINT = NULL,
        @HumanMasterID BIGINT = NULL,
        @HumanID BIGINT = NULL,
        @FarmMasterID BIGINT = NULL,
        @FarmID BIGINT = NULL,
        @SpeciesID BIGINT = NULL,
        @AnimalID BIGINT = NULL,
        @VectorID BIGINT = NULL,
        @MonitoringSessionID BIGINT = NULL,
        @VectorSessionID BIGINT = NULL,
        @HumanDiseaseReportID BIGINT = NULL,
        @VeterinaryDiseaseReportID BIGINT = NULL,
        @FunctionalAreaID BIGINT = NULL,
        @FreezerSubdivisionID BIGINT = NULL,
        @StorageBoxPlace NVARCHAR(200) = NULL,
        @CollectionDate DATETIME2 = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @SentDate DATETIME2 = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @EnteredDate DATETIME2 = NULL,
        @OutOfRepositoryDate DATETIME2 = NULL,
        @MarkedForDispositionByPersonID BIGINT = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @SiteID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @SampleKindTypeID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME2 = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @PreviousSampleStatusTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @DestructionMethodTypeID BIGINT = NULL,
        @DestructionDate DATETIME2 = NULL,
        @DestroyedByPersonID BIGINT = NULL,
        @Note NVARCHAR(500) = NULL,
        @Comment NVARCHAR(500) = NULL,
        @BatchTestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @BatchStatusTypeID BIGINT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @PerformedByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @ObservationID BIGINT = NULL,
        @PerformedDate DATETIME2 = NULL,
        @ValidationDate DATETIME2 = NULL,
        @EIDSSBatchTestID NVARCHAR(200) = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @TestRequested NVARCHAR(200) = NULL,
        @TestID BIGINT,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @PreviousTestStatusTypeID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ConcludedDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @DiseaseID BIGINT = NULL,
        @FavoriteIndicator INT = NULL,
        @TestAmendmentID BIGINT,
        @AmendedByOrganizationID BIGINT = NULL,
        @AmendedByPersonID BIGINT = NULL,
        @AmendmentDate DATETIME2 = NULL,
        @OldTestResultTypeID BIGINT = NULL,
        @ChangedTestResultTypeID BIGINT = NULL,
        @OldNote NVARCHAR(500) = NULL,
        @ChangedNote NVARCHAR(500) = NULL,
        @ReasonForAmendment NVARCHAR(500),
        @TransferID BIGINT,
        @EIDSSTransferID NVARCHAR(200) = NULL,
        @TransferStatusTypeID BIGINT = NULL,
        @TransferredFromOrganizationID BIGINT = NULL,
        @TransferredToOrganizationID BIGINT = NULL,
        @SentByPersonID BIGINT = NULL,
        @TransferDate DATETIME2 = NULL,
        @BoxPlaceAvailability NVARCHAR(MAX),
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
        @NewHumanID BIGINT = NULL,
        @VectorTypeID BIGINT = NULL,
        @SpeciesTypeID BIGINT = NULL,
        @EIDSSVectorID NVARCHAR(50) = NULL,
        @EIDSSFreezerSubdivisionID NVARCHAR(200) = NULL,
        @FavoritesString VARCHAR(MAX);
DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NOT NULL,
    RootSampleID BIGINT NULL,
    ParentSampleID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    HumanID BIGINT NULL,
    FarmMasterID BIGINT NULL,
    FarmID BIGINT NULL,
    SpeciesID BIGINT NULL,
    AnimalID BIGINT NULL,
    MonitoringSessionID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    CollectedByOrganizationID BIGINT NULL,
    MainTestID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    SentDate DATETIME2 NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    VectorSessionID BIGINT NULL,
    VectorID BIGINT NULL,
    FreezerSubdivisionID BIGINT NULL,
    StorageBoxPlace NVARCHAR(200) NULL,
    SampleStatusTypeID BIGINT NULL,
    PreviousSampleStatusTypeID BIGINT NULL,
    FunctionalAreaID BIGINT NULL,
    DestroyedByPersonID BIGINT NULL,
    EnteredDate DATETIME2 NULL,
    DestructionDate DATETIME2 NULL,
    EIDSSLaboratorySampleID NVARCHAR(200) NULL,
    Comment NVARCHAR(500) NULL,
    SiteID BIGINT NULL,
    RowStatus INT NOT NULL,
    SentToOrganizationID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    BirdStatusTypeID BIGINT NULL,
    HumanDiseaseReportID BIGINT NULL,
    VeterinaryDiseaseReportID BIGINT NULL,
    AccessionDate DATETIME2 NULL,
    AccessionConditionTypeID BIGINT NULL,
    AccessionComment NVARCHAR(200) NULL,
    AccessionByPersonID BIGINT NULL,
    DestructionMethodTypeID BIGINT NULL,
    CurrentSiteID BIGINT NULL,
    SampleKindTypeID BIGINT NULL,
    MarkedForDispositionByPersonID BIGINT NULL,
    OutOfRepositoryDate DATETIME2 NULL,
    DiseaseID BIGINT NULL,
    VectorTypeID BIGINT NULL,
    SpeciesTypeID BIGINT NULL,
    FavoriteIndicator BIT NOT NULL,
    RowAction INT NULL
);
DECLARE @BatchTestsTemp TABLE
(
    BatchTestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    BatchStatusTypeID BIGINT NULL,
    PerformedByOrganizationID BIGINT NULL,
    PerformedByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ObservationID BIGINT NULL,
    SiteID BIGINT NOT NULL,
    PerformedDate DATETIME2 NULL,
    ValidationDate DATETIME2 NULL,
    EIDSSBatchTestID NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    RowAction INT NULL
);
DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    PreviousTestStatusTypeID BIGINT NULL,
    DiseaseID BIGINT NOT NULL,
    SampleID BIGINT NULL,
    EIDSSLaboratorySampleID NVARCHAR(200) NOT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Note NVARCHAR(500) NULL,
    RowStatus INT NOT NULL,
    StartedDate DATETIME2 NULL,
    ConcludedDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
    HumanDiseaseReportID BIGINT NULL,
    VeterinaryDiseaseReportID BIGINT NULL,
    MonitoringSessionID BIGINT NULL,
    VectorID BIGINT NULL,
    RowAction INT NULL
);
DECLARE @TestAmendmentsTemp TABLE
(
    TestAmendmentID BIGINT NOT NULL,
    TestID BIGINT NOT NULL,
    AmendedByOrganizationID BIGINT NULL,
    AmendedByPersonID BIGINT NULL,
    AmendmentDate DATETIME2 NULL,
    OldTestResultTypeID BIGINT NULL,
    ChangedTestResultTypeID BIGINT NULL,
    OldNote NVARCHAR(500) NULL,
    ChangedNote NVARCHAR(500) NULL,
    ReasonForAmendment NVARCHAR(500) NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL,
    EIDSSLaboratorySampleID NVARCHAR(200) NOT NULL,
    DataAuditEventID BIGINT NULL
);
DECLARE @TransfersTemp TABLE
(
    TransferID BIGINT NOT NULL,
    SampleID BIGINT NOT NULL,
    EIDSSTransferID NVARCHAR(200) NULL,
    TransferStatusTypeID BIGINT NULL,
    TransferredFromOrganizationID BIGINT NULL,
    TransferredToOrganizationID BIGINT NULL,
    SentByPersonID BIGINT NULL,
    TransferDate DATETIME2 NULL,
    PurposeOfTransfer NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    TestRequested NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @FreezerBoxLocationAvailabilitiesTemp TABLE
(
    FreezerSubdivisionID BIGINT NOT NULL,
    BoxPlaceAvailability NVARCHAR(MAX) NOT NULL,
    EIDSSFreezerSubdivisionID NVARCHAR(200) NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @FreezerSubdivisionBeforeEdit TABLE
(
    FreezerSubdivisionID BIGINT,
    BoxPlaceAvailability NVARCHAR(4000)
);
DECLARE @FreezerSubdivisionAfterEdit TABLE
(
    FreezerSubdivisionID BIGINT,
    BoxPlaceAvailability NVARCHAR(4000)
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                HumanMasterID BIGINT,
                HumanID BIGINT,
                FarmMasterID BIGINT,
                FarmID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                MonitoringSessionID BIGINT,
                CollectedByPersonID BIGINT,
                CollectedByOrganizationID BIGINT,
                MainTestID BIGINT,
                CollectionDate DATETIME2,
                SentDate DATETIME2,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                VectorSessionID BIGINT,
                VectorID BIGINT,
                FreezerSubdivisionID BIGINT,
                StorageBoxPlace NVARCHAR(200),
                SampleStatusTypeID BIGINT,
                PreviousSampleStatusTypeID BIGINT,
                FunctionalAreaID BIGINT,
                DestroyedByPersonID BIGINT,
                EnteredDate DATETIME2,
                DestructionDate DATETIME2,
                EIDSSLaboratorySampleID NVARCHAR(200),
                Comment NVARCHAR(500),
                SiteID BIGINT,
                RowStatus INT,
                SentToOrganizationID BIGINT,
                ReadOnlyIndicator BIT,
                BirdStatusTypeID BIGINT,
                HumanDiseaseReportID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                AccessionDate DATETIME2,
                AccessionConditionTypeID BIGINT,
                AccessionComment NVARCHAR(200),
                AccessionByPersonID BIGINT,
                DestructionMethodTypeID BIGINT,
                CurrentSiteID BIGINT,
                SampleKindTypeID BIGINT,
                MarkedForDispositionByPersonID BIGINT,
                OutOfRepositoryDate DATETIME2,
                DiseaseID BIGINT,
                VectorTypeID BIGINT,
                SpeciesTypeID BIGINT,
                FavoriteIndicator BIT,
                RowAction INT
            );

        INSERT INTO @BatchTestsTemp
        SELECT *
        FROM
            OPENJSON(@BatchTests)
            WITH
            (
                BatchTestID BIGINT,
                TestNameTypeID BIGINT,
                BatchStatusTypeID BIGINT,
                PerformedByOrganizationID BIGINT,
                PerformedByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ObservationID BIGINT,
                SiteID BIGINT,
                PerformedDate DATETIME2,
                ValidationDate DATETIME2,
                EIDSSBatchTestID NVARCHAR(200),
                RowStatus INT,
                ResultEnteredByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                RowAction INT
            );

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@Tests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                PreviousTestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                EIDSSLaboratorySampleID NVARCHAR(200),
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Note NVARCHAR(500),
                RowStatus INT,
                StartedDate DATETIME2,
                ConcludedDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                HumanDiseaseReportID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                MonitoringSessionID BIGINT,
                VectorID BIGINT,
                RowAction INT
            );

        INSERT INTO @TestAmendmentsTemp
        SELECT *
        FROM
            OPENJSON(@TestAmendments)
            WITH
            (
                TestAmendmentID BIGINT,
                TestID BIGINT,
                AmendedByOrganizationID BIGINT,
                AmendedByPersonID BIGINT,
                AmendmentDate DATETIME2,
                OldTestResultTypeID BIGINT,
                ChangedTestResultTypeID BIGINT,
                OldNote NVARCHAR(500),
                ChangedNote NVARCHAR(500),
                ReasonForAmendment NVARCHAR(500),
                RowStatus INT,
                RowAction INT,
                EIDSSLaboratorySampleID NVARCHAR(200), 
                DataAuditEventID BIGINT
            );

        INSERT INTO @TransfersTemp
        SELECT *
        FROM
            OPENJSON(@Transfers)
            WITH
            (
                TransferID BIGINT,
                SampleID BIGINT,
                EIDSSTransferID NVARCHAR(200),
                TransferStatusTypeID BIGINT,
                TransferredFromOrganizationID BIGINT,
                TransferredToOrganizationID BIGINT,
                SentByPersonID BIGINT,
                TransferDate DATETIME2,
                PurposeOfTransfer NVARCHAR(200),
                SiteID BIGINT,
                TestRequested NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @FreezerBoxLocationAvailabilitiesTemp
        SELECT *
        FROM
            OPENJSON(@FreezerBoxLocationAvailabilities)
            WITH
            (
                FreezerSubdivisionID BIGINT,
                BoxPlaceAvailability NVARCHAR(MAX), 
                EIDSSFreezerSubdivisionID NVARCHAR(200) 
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        SET @FavoritesString = CONVERT(NVARCHAR(MAX), @Favorites, 1);

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @HumanMasterID = HumanMasterID,
                @HumanID = HumanID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @VectorID = VectorID,
                @MonitoringSessionID = MonitoringSessionID,
                @VectorSessionID = VectorSessionID,
                @HumanDiseaseReportID = HumanDiseaseReportID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID,
                @CollectionDate = CollectionDate,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @SentDate = SentDate,
                @SentToOrganizationID = SentToOrganizationID,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @EIDSSLaboratorySampleID = EIDSSLaboratorySampleID,
                @SiteID = SiteID,
                @FunctionalAreaID = FunctionalAreaID,
                @FreezerSubdivisionID = FreezerSubdivisionID,
                @StorageBoxPlace = StorageBoxPlace,
                @EnteredDate = EnteredDate,
                @OutOfRepositoryDate = OutOfRepositoryDate,
                @DestructionDate = DestructionDate,
                @DestructionMethodTypeID = DestructionMethodTypeID,
                @DestroyedByPersonID = DestroyedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @AccessionDate = AccessionDate,
                @AccessionConditionTypeID = AccessionConditionTypeID,
                @AccessionByPersonID = AccessionByPersonID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @PreviousSampleStatusTypeID = PreviousSampleStatusTypeID,
                @AccessionComment = AccessionComment,
                @Comment = Comment,
                @CurrentSiteID = CurrentSiteID,
                @SampleKindTypeID = SampleKindTypeID,
                @MarkedForDispositionByPersonID = MarkedForDispositionByPersonID,
                @DiseaseID = DiseaseID,
                @VectorTypeID = VectorTypeID,
                @SpeciesTypeID = SpeciesTypeID,
                @FavoriteIndicator = FavoriteIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @SamplesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_SAMPLE_SET @SampleID OUTPUT,
                                            @SampleTypeID,
                                            @RootSampleID,
                                            @ParentSampleID,
                                            @HumanMasterID,
                                            @HumanID,
                                            @FarmMasterID,
                                            @FarmID,
                                            @SpeciesID,
                                            @AnimalID,
                                            @VectorID,
                                            @VectorTypeID,
                                            @SpeciesTypeID,
                                            @EIDSSVectorID,
                                            @MonitoringSessionID,
                                            @VectorSessionID,
                                            @HumanDiseaseReportID,
                                            @VeterinaryDiseaseReportID,
                                            @CollectionDate,
                                            @CollectedByPersonID,
                                            @CollectedByOrganizationID,
                                            @SentDate,
                                            @SentToOrganizationID,
                                            @EIDSSLocalOrFieldSampleID,
                                            @EIDSSLaboratorySampleID,
                                            @SiteID,
                                            @FunctionalAreaID,
                                            @FreezerSubdivisionID,
                                            @StorageBoxPlace,
                                            @EnteredDate,
                                            @OutOfRepositoryDate,
                                            @MarkedForDispositionByPersonID,
                                            @DestructionDate,
                                            @DestructionMethodTypeID,
                                            @DestroyedByPersonID,
                                            @ReadOnlyIndicator,
                                            @AccessionDate,
                                            @AccessionConditionTypeID,
                                            @AccessionByPersonID,
                                            @SampleStatusTypeID,
                                            @PreviousSampleStatusTypeID,
                                            @AccessionComment,
                                            @Comment,
                                            @CurrentSiteID,
                                            @SampleKindTypeID,
                                            @DiseaseID,
                                            @RowStatus,
                                            @RowAction,
                                            @AuditUserName;

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @TransfersTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            IF @FavoriteIndicator = 1
                SELECT @FavoritesString = REPLACE(@FavoritesString, @RowID, @SampleID);

            --POCO does not like the XML modify command; used string and replace for now.
            --SELECT @Favorites = @Favorites.modify('replace value of (/Favorites/Favorite/@SampleID[.=sql:variable("@RowID")])[1] with sql:variable("@SampleID")');
            IF @SampleID <> @RootSampleID
               AND (
                       @RowAction = 4
                       OR @RowAction = 5
                   )
            BEGIN
                DECLARE @TransferIDTemp AS BIGINT;

                SELECT @TransferIDTemp = tro.idfTransferOut
                FROM dbo.tlbTransferOutMaterial tom
                    INNER JOIN dbo.tlbTransferOUT tro
                        ON tro.idfTransferOut = tom.idfTransferOut
                WHERE tom.idfMaterial = @RootSampleID;

                UPDATE dbo.tlbTransferOUT
                SET idfsTransferStatus = 10001001,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfTransferOut = @TransferIDTemp;
            END;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @BatchTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = BatchTestID,
                @BatchTestID = BatchTestID,
                @TestNameTypeID = TestNameTypeID,
                @BatchStatusTypeID = BatchStatusTypeID,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @PerformedByPersonID = PerformedByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ObservationID = ObservationID,
                @SiteID = SiteID,
                @PerformedDate = PerformedDate,
                @ValidationDate = ValidationDate,
                @EIDSSBatchTestID = EIDSSBatchTestID,
                @RowStatus = RowStatus,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @RowAction = RowAction
            FROM @BatchTestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_BATCH_TEST_SET @BatchTestID OUTPUT,
                                                @TestNameTypeID,
                                                @BatchStatusTypeID,
                                                @PerformedByOrganizationID,
                                                @PerformedByPersonID,
                                                @ValidatedByOrganizationID,
                                                @ValidatedByPersonID,
                                                @ObservationID,
                                                @SiteID,
                                                @PerformedDate,
                                                @ValidationDate,
                                                @EIDSSBatchTestID,
                                                @RowStatus,
                                                @ResultEnteredByPersonID,
                                                @ResultEnteredByOrganizationID,
                                                @RowAction,
                                                @AuditUserName;

            UPDATE @TestsTemp
            SET BatchTestID = @BatchTestID
            WHERE BatchTestID = @RowID;

            DELETE FROM @BatchTestsTemp
            WHERE BatchTestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @PreviousTestStatusTypeID = PreviousTestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @EIDSSLaboratorySampleID = EIDSSLaboratorySampleID,
                @BatchTestID = BatchTestID,
                @ObservationID = ObservationID,
                @TestNumber = TestNumber,
                @Note = Note,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ConcludedDate = ConcludedDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @HumanDiseaseReportID = HumanDiseaseReportID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID,
                @MonitoringSessionID = MonitoringSessionID,
                @VectorID = VectorID,
                @RowAction = RowAction
            FROM @TestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_TEST_SET @TestID,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @PreviousTestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          @EIDSSLaboratorySampleID,
                                          @BatchTestID,
                                          @ObservationID,
                                          @TestNumber,
                                          @Note,
                                          @RowStatus,
                                          @StartedDate,
                                          @ConcludedDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @HumanDiseaseReportID,
                                          @VeterinaryDiseaseReportID,
                                          @MonitoringSessionID,
                                          @VectorID,
                                          @RowAction,
                                          @AuditUserName, 
                                          @DataAuditEventID OUTPUT;

            UPDATE @TestAmendmentsTemp
            SET TestID = @TestID, 
                DataAuditEventID = @DataAuditEventID
            WHERE TestID = @RowID;

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestAmendmentsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestAmendmentID,
                @TestAmendmentID = TestAmendmentID,
                @TestID = TestID,
                @AmendedByOrganizationID = AmendedByOrganizationID,
                @AmendedByPersonID = AmendedByPersonID,
                @AmendmentDate = AmendmentDate,
                @OldTestResultTypeID = OldTestResultTypeID,
                @ChangedTestResultTypeID = ChangedTestResultTypeID,
                @OldNote = OldNote,
                @ChangedNote = ChangedNote,
                @ReasonForAmendment = ReasonForAmendment,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @EIDSSLaboratorySampleID = EIDSSLaboratorySampleID
            FROM @TestAmendmentsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_AMENDMENT_SET @TestAmendmentID,
                                                    @TestID,
                                                    @AmendedByOrganizationID,
                                                    @AmendedByPersonID,
                                                    @AmendmentDate,
                                                    @OldTestResultTypeID,
                                                    @ChangedTestResultTypeID,
                                                    @OldNote,
                                                    @ChangedNote,
                                                    @ReasonForAmendment,
                                                    @RowStatus,
                                                    @RowAction,
                                                    @AuditUserName,
                                                    @EIDSSLaboratorySampleID, 
                                                    @DataAuditEventID;

            DELETE FROM @TestAmendmentsTemp
            WHERE TestAmendmentID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TransfersTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TransferID,
                @TransferID = TransferID,
                @SampleID = SampleID,
                @EIDSSTransferID = EIDSSTransferID,
                @TransferStatusTypeID = TransferStatusTypeID,
                @TransferredFromOrganizationID = TransferredFromOrganizationID,
                @TransferredToOrganizationID = TransferredToOrganizationID,
                @SentByPersonID = SentByPersonID,
                @TransferDate = TransferDate,
                @Note = PurposeOfTransfer,
                @SiteID = SiteID,
                @TestRequested = TestRequested,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @TransfersTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_TRANSFER_SET @TransferID,
                                              @SampleID,
                                              @EIDSSTransferID,
                                              @TransferStatusTypeID,
                                              @TransferredFromOrganizationID,
                                              @TransferredToOrganizationID,
                                              @SentByPersonID,
                                              @TransferDate,
                                              @Note,
                                              @SiteID,
                                              @TestRequested,
                                              @RowStatus,
                                              @RowAction,
                                              @AuditUserName;

            IF @RowAction = 1
            BEGIN
                UPDATE @EventsTemp
                SET ObjectId = @TransferID
                WHERE ObjectId = @RowID;
            END;

            DELETE FROM @TransfersTemp
            WHERE TransferID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FreezerBoxLocationAvailabilitiesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FreezerSubdivisionID,
                @FreezerSubdivisionID = FreezerSubdivisionID,
                @BoxPlaceAvailability = BoxPlaceAvailability,
                @EIDSSFreezerSubdivisionID = EIDSSFreezerSubdivisionID
            FROM @FreezerBoxLocationAvailabilitiesTemp;

            -- Data audit
            INSERT INTO @FreezerSubdivisionBeforeEdit
            SELECT idfSubdivision,
                   BoxPlaceAvailability
            FROM dbo.tlbFreezerSubdivision
            WHERE idfSubdivision = @FreezerSubdivisionID;
            -- End data audit

            UPDATE dbo.tlbFreezerSubdivision
            SET BoxPlaceAvailability = @BoxPlaceAvailability,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfSubdivision = @FreezerSubdivisionID;

            -- Data audit
            INSERT INTO @FreezerSubdivisionAfterEdit
            SELECT idfSubdivision,
                   BoxPlaceAvailability
            FROM dbo.tlbFreezerSubdivision
            WHERE idfSubdivision = @FreezerSubdivisionID;

            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeRepositorySchemeID,
                                                      @FreezerSubdivisionID,
                                                      @ObjectTableFreezerSubdivisionID,
                                                      @EIDSSFreezerSubdivisionID,
                                                      @DataAuditEventID OUTPUT;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableFreezerSubdivisionID,
                   51586990000041,
                   a.FreezerSubdivisionID,
                   NULL,
                   b.BoxPlaceAvailability,
                   a.BoxPlaceAvailability,
                   @AuditUserName,
                   @EIDSSFreezerSubdivisionID
            FROM @FreezerSubdivisionAfterEdit a
                FULL JOIN @FreezerSubdivisionBeforeEdit b
                    ON a.FreezerSubdivisionID = b.FreezerSubdivisionID
            WHERE (a.BoxPlaceAvailability <> b.BoxPlaceAvailability)
                  OR (
                         a.BoxPlaceAvailability IS NOT NULL
                         AND b.BoxPlaceAvailability IS NULL
                     )
                  OR (
                         a.BoxPlaceAvailability IS NULL
                         AND b.BoxPlaceAvailability IS NOT NULL
                     );
            -- End data audit

            DELETE FROM @FreezerBoxLocationAvailabilitiesTemp
            WHERE FreezerSubdivisionID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect2
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @Favorites IS NOT NULL
        BEGIN
            DECLARE @UserPreferenceID AS BIGINT;

            SELECT @UserPreferenceID =
            (
                SELECT UserPreferenceUID
                FROM dbo.UserPreference
                WHERE idfUserID = @UserID
                      AND ModuleConstantID = 10508006
                      AND intRowStatus = 0
            );

            IF @UserPreferenceID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET N'UserPreference',
                                                  @UserPreferenceID OUTPUT;

                INSERT INTO dbo.UserPreference
                (
                    UserPreferenceUID,
                    idfUserID,
                    ModuleConstantID,
                    PreferenceDetail,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@UserPreferenceID, @UserID, 10508006, @FavoritesString, 0, @AuditUserName, GETDATE());
            END
            ELSE
            BEGIN
                UPDATE dbo.UserPreference
                SET idfUserID = @UserID,
                    PreferenceDetail = @FavoritesString,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE UserPreferenceUID = @UserPreferenceID;
            END
        END;

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage,
               @KeyId AS KeyId,
               'Labratory' AS KeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH;
END;
GO
PRINT N'Refreshing Function [dbo].[fnAsGetUniquePathOfViewContent]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnAsGetUniquePathOfViewContent]';


GO
PRINT N'Refreshing Function [dbo].[FN_Rpt_List]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FN_Rpt_List]';


GO
PRINT N'Refreshing Function [dbo].[fn_Settlement_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_Settlement_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fnFFGetFullPathBySections]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnFFGetFullPathBySections]';


GO
PRINT N'Refreshing Function [dbo].[FN_ADMIN_FF_FullPathBySections_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FN_ADMIN_FF_FullPathBySections_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_REP_WHOEXPORT_AJ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_REP_WHOEXPORT_AJ]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_REP_WHOEXPORT_GG]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_REP_WHOEXPORT_GG]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_HumanCase_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_HumanCase_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_VSSESSION_New_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_VSSESSION_New_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VET_CASE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VET_CASE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VET_DISEASE_REPORT_GETDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VET_DISEASE_REPORT_GETDetail]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_Livestock_Case_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_Livestock_Case_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VET_DISEASE_REPORT_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VET_DISEASE_REPORT_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_NOTIFICATIONS_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_NOTIFICATIONS_GET]';


GO
PRINT N'Refreshing Procedure [Report].[USP_Vet_Avian_Case_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_Vet_Avian_Case_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HAS_DISEASE_REPORT_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HAS_DISEASE_REPORT_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Vector_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Vector_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_VET_CASE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_VET_CASE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_HUM_REP_WHOEXPORT_AJ]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_HUM_REP_WHOEXPORT_AJ]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_HUM_REP_WHOEXPORT_GG]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_HUM_REP_WHOEXPORT_GG]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_DISEASE_REPORT_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_DISEASE_REPORT_GETList]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_WhoReport]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_WhoReport]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_BarcodeNextNumber_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_BarcodeNextNumber_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DATAAUDITLOG_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DATAAUDITLOG_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_NextNumber_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_NextNumber_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_DISEASE_AdvanceSearch_REPORT_GETCount]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_DISEASE_AdvanceSearch_REPORT_GETCount]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_DISEASE_AdvanceSearch_REPORT_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_DISEASE_AdvanceSearch_REPORT_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_HUMAN_DISEASE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_HUMAN_DISEASE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Case_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Case_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Contact_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Contact_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_FF_Template_Create]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_FF_Template_Create]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_HUMAN_Case_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_HUMAN_Case_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Session_Del]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Session_Del]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Outbreak_Diagnosis_Update]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Outbreak_Diagnosis_Update]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HumCaseForm_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HumCaseForm_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_OutBreak_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_OutBreak_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_VSSESSION_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_VSSESSION_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DAS_MYCOLLECTIONS_GETCOUNT]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DAS_MYCOLLECTIONS_GETCOUNT]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DAS_MYCOLLECTIONS_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DAS_MYCOLLECTIONS_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_VSSESSION_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_VSSESSION_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_HeatMap]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_HeatMap]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_REP_WHOEXPORT]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_REP_WHOEXPORT]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_Barcode_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_Barcode_GetList]';


GO
PRINT N'Refreshing Procedure [Report].[USP_ADMIN_Barcode_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_ADMIN_Barcode_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_AGG_CASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_AGG_CASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_ReportForm_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_ReportForm_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HAS_CAMPAIGN_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HAS_CAMPAIGN_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_HUMAN_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_HUMAN_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_LAB_SAMPLE_ID_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_LAB_SAMPLE_ID_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_HerdSpecies_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_HerdSpecies_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_HUMAN_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_HUMAN_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_DetailedCollections_Copy]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_DetailedCollections_Copy]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_SESSIONSUMMARY_DIAGNOSIS_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_SESSIONSUMMARY_DIAGNOSIS_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_SESSIONSUMMARY_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_SESSIONSUMMARY_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_VECT_RW_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_VECT_RW_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_VECT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_VECT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_VECT_STRUCTURED_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_VECT_STRUCTURED_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_GBL_SAMPLE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_GBL_SAMPLE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_GBL_SAMPLES_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_GBL_SAMPLES_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_HUMAN_DISEASE_SAMPLES_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_HUMAN_DISEASE_SAMPLES_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_HUMAN_DISEASE_SAMPLES_TEST_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_HUMAN_DISEASE_SAMPLES_TEST_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_LAB_FREEZER_SUBDIVISION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_LAB_FREEZER_SUBDIVISION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_VCTS_DETAILEDCOLLECTIONS_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_VCTS_DETAILEDCOLLECTIONS_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_VCTS_SESSIONSUMMARY_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_VCTS_SESSIONSUMMARY_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_VET_ANIMAL_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_VET_ANIMAL_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_VET_ANIMALS_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_VET_ANIMALS_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_VET_FLOCK_HERD_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_VET_FLOCK_HERD_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_VET_HERD_MASTER_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_VET_HERD_MASTER_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_VET_HERD_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_VET_HERD_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_VECT_SAMPLES_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_VECT_SAMPLES_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_VCT_SAMPLE_DETAILEDCOLLECTIONS_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_VCT_SAMPLE_DETAILEDCOLLECTIONS_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Determinant_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Determinant_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Template_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Template_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AggregateSetting_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AggregateSetting_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_CUSTOMREPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_CUSTOMREPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_PERSONALIDTYPEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_PERSONALIDTYPEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VeterinaryAggregateCaseMatrixReport_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VeterinaryAggregateCaseMatrixReport_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VeterinaryProphylacticMatrixReport_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VeterinaryProphylacticMatrixReport_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VeterinarySanitaryActionMatrixReport_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VeterinarySanitaryActionMatrixReport_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Case_QuickSet]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Case_QuickSet]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_AGEGROUP_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_AGEGROUP_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_AGEGROUP_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_AGEGROUP_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_BASEREFERENCE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_BASEREFERENCE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_BASEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_BASEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_CASECLASSIFICATION_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_CASECLASSIFICATION_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_CASECLASSIFICATION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_CASECLASSIFICATION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_MEASUREREFEFENCE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_MEASUREREFEFENCE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_MEASUREREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_MEASUREREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_REPORTDIAGNOSISGROUP_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_REPORTDIAGNOSISGROUP_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_REPORTDIAGNOSISGROUP_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_REPORTDIAGNOSISGROUP_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SAMPLETYPEREFERENCE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SAMPLETYPEREFERENCE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SAMPLETYPEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SAMPLETYPEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SPECIESTYPE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SPECIESTYPE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VectorSubType_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VectorSubType_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VectorSubType_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VectorSubType_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VECTORTYPEREFERENCE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VECTORTYPEREFERENCE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VECTORTYPEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VECTORTYPEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_FF_Copy_Template]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_FF_Copy_Template]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_ACCESS_RULE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_ACCESS_RULE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_SITE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_SITE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_GBL_CONTACTS_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_GBL_CONTACTS_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_ORG_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_ORG_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_HUM_COPY_HUMAN_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_HUM_COPY_HUMAN_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_VET_COPY_FARM_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_VET_COPY_FARM_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_GETDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_GETDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_LKUP_BASE_REFERENCE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_LKUP_BASE_REFERENCE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_LKUP_CASECLASSIFICATION]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_LKUP_CASECLASSIFICATION]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SampleType_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SampleType_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SampleTypeReference_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SampleTypeReference_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SPECIESTYPE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SPECIESTYPE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_ORG_GETDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_ORG_GETDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_BASEREFERENCE_Filtered_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_BASEREFERENCE_Filtered_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_BASEREFERENCE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_BASEREFERENCE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_CASECLASSIFICATION_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_CASECLASSIFICATION_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_VtrSubTyp_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_VtrSubTyp_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_STAT_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_STAT_GetDetail]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_DataQualityIndicators_Graph2]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_DataQualityIndicators_Graph2]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_SettlementAggr_GetLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_SettlementAggr_GetLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_AGG_REPORT_GETCount]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_AGG_REPORT_GETCount]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParameterTemplate_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParameterTemplate_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_TemplateParameterOrder_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_TemplateParameterOrder_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_StatisticType_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_StatisticType_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VectorTypeReference_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VectorTypeReference_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_StringTranslation_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_StringTranslation_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_ADMIN_FF_DesignOptionsRefresh_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_ADMIN_FF_DesignOptionsRefresh_SET]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_BorderRayonsComparativeReport]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_BorderRayonsComparativeReport]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MainAFPIndicators]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MainAFPIndicators]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_ZoonoticComparativeReportByMonth]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_ZoonoticComparativeReportByMonth]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HMISSettlementGetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HMISSettlementGetList]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Country_GetLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Country_GetLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HMISRayonGetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HMISRayonGetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HMISRegionGetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HMISRegionGetList]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Region_GetLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Region_GetLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_DISEASE_CONTACTS_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_DISEASE_CONTACTS_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_HumanCaseDeduplication_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_HumanCaseDeduplication_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Statistic_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Statistic_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_STAT_GETCOUNT]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_STAT_GETCOUNT]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_Avian_SamplesCollection_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_Avian_SamplesCollection_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GLB_PERSON_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GLB_PERSON_GETList]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HumCaseFormSpecimens_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HumCaseFormSpecimens_GET]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_IndicatorsDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_IndicatorsDetail]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_IndicatorsSummary]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_IndicatorsSummary]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_Organization_SelectLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_Organization_SelectLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_STLE_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_STLE_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_ObjectAccess_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_ObjectAccess_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DATAAUDITLOG_GETDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DATAAUDITLOG_GETDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParentSections_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParentSections_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_TemplatesByParameter_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_TemplatesByParameter_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Diagnosis_GetLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Diagnosis_GetLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_EMPLOYEESITE_GETDETAIL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_EMPLOYEESITE_GETDETAIL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_FFPARAMETERFIXEDPRESETVALUE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_FFPARAMETERFIXEDPRESETVALUE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_LoginUserInternal]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_LoginUserInternal]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_SecurityGetConfig]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_SecurityGetConfig]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_SexGetLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_SexGetLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Statistic_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Statistic_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Statistic_Import]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Statistic_Import]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_User_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_User_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_SecurityEventLog_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_SecurityEventLog_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_SYSTEMEVENT_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_SYSTEMEVENT_GETList]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseFatal]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDiseaseFatal]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FinalCaseClassification_GetLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FinalCaseClassification_GetLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HMISDiagnosisListGet]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HMISDiagnosisListGet]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_ReportDiagnosisGroup_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_ReportDiagnosisGroup_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_StatisticType_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_StatisticType_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GLB_LOC_Address_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GLB_LOC_Address_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Settlement_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Settlement_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Department_GetLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Department_GetLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_Rpt_Hum_Form1]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_Rpt_Hum_Form1]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_Rpt_Hum_Form2_Table1]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_Rpt_Hum_Form2_Table1]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_Rpt_Hum_Form2_Table2]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_Rpt_Hum_Form2_Table2]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Settlement_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Settlement_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_TemplateDesign_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_TemplateDesign_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_HumanCase_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_HumanCase_GetList]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HumNotificationForm_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HumNotificationForm_GET]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_BorderRayonsComparativeReport_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_BorderRayonsComparativeReport_Calculations]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParametersSearch_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParametersSearch_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_ChangePassword]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_ChangePassword]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_LoginUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_LoginUser]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_UserGroup_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_UserGroup_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Case_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Case_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_AGG_REPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_AGG_REPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_AS_CAMPAIGN_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_AS_CAMPAIGN_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_HUMAN_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET_DEDUP]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_HUMAN_DISEASE_SET_DEDUP]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_VETERINARY_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_VETERINARY_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VAS_MONITORING_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VAS_MONITORING_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_SURVEILLANCE_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_SURVEILLANCE_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_BaseReference_SysSet]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_BaseReference_SysSet]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_Department_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_Department_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_StatisticType_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_StatisticType_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Contact_Set]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID];

ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_trtBaseReference];

ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_tstSite_GrantingActorSiteID];

ALTER TABLE [dbo].[AccessRuleActor] WITH CHECK CHECK CONSTRAINT [FK_AccessRuleActor_AccessRule_AccessRuleID];

ALTER TABLE [dbo].[AccessRuleActor] WITH CHECK CHECK CONSTRAINT [FK_AccessRuleActor_tflSiteGroup_ActorSiteGroupID];

ALTER TABLE [dbo].[AccessRuleActor] WITH CHECK CHECK CONSTRAINT [FK_AccessRuleActor_tlbEmployeGroup_ActorEmployeeGroupID];

ALTER TABLE [dbo].[AccessRuleActor] WITH CHECK CHECK CONSTRAINT [FK_AccessRuleActor_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AccessRuleActor] WITH CHECK CHECK CONSTRAINT [FK_AccessRuleActor_tstSite_ActorSiteID];

ALTER TABLE [dbo].[AccessRuleActor] WITH CHECK CHECK CONSTRAINT [FK_AccessRuleActor_tstUserTable_ActorUserID];

ALTER TABLE [dbo].[AccessRulePermission] WITH CHECK CHECK CONSTRAINT [FK_AccessRulePermission_AccessRule_AccessRuleID];

ALTER TABLE [dbo].[AccessRulePermission] WITH CHECK CHECK CONSTRAINT [FK_AccessRulePermission_trtBaseReference_AccessPermissionID];

ALTER TABLE [dbo].[AccessRulePermission] WITH CHECK CHECK CONSTRAINT [FK_AccessRulePermission_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AppObjectSysFunction] WITH CHECK CHECK CONSTRAINT [FK_AppObjectSysFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AppObjectSysFunction] WITH CHECK CHECK CONSTRAINT [FK_AppObjSysFunction_AppObj_AppObjectNameID];

ALTER TABLE [dbo].[AppObjectSysFunction] WITH CHECK CHECK CONSTRAINT [FK_AppObjSysFunction_BaseReference_SysFunctionID];

ALTER TABLE [dbo].[AppSessionLog] WITH CHECK CHECK CONSTRAINT [FK_AppSessionLog_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AppSessionLog] WITH CHECK CHECK CONSTRAINT [FK_SesionLog_BaseRef_AppModuleGroupID];

ALTER TABLE [dbo].[AppSessionLog] WITH CHECK CHECK CONSTRAINT [FK_SessionLog_BaseRef_ModuleConstantID];

ALTER TABLE [dbo].[ArchiveSetting] WITH CHECK CHECK CONSTRAINT [FK_ArchiveSetting_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AspNetRoles] WITH CHECK CHECK CONSTRAINT [FK_ASPNetRole_tlbEmployeeGRoup_idfemployeeGroup];

ALTER TABLE [dbo].[AspNetUserClaims] WITH CHECK CHECK CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId];

ALTER TABLE [dbo].[AspNetUserLogins] WITH CHECK CHECK CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId];

ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] WITH CHECK CHECK CONSTRAINT [FK_ASPNetUserPreviousPasswords_AspNetUsers_Id];

ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] WITH CHECK CHECK CONSTRAINT [FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AspNetUserRoles] WITH CHECK CHECK CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId];

ALTER TABLE [dbo].[AspNetUserRoles] WITH CHECK CHECK CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId];

ALTER TABLE [dbo].[AspNetUsers] WITH CHECK CHECK CONSTRAINT [FK_AspNetUsers_tstUserTable_UserID];

ALTER TABLE [dbo].[AspNetUserTokens] WITH CHECK CHECK CONSTRAINT [FK_AspNetUserTokens_AspNetUsers_UserId];

ALTER TABLE [dbo].[AuditEventSystemLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventSystemLog_AppSessionLog];

ALTER TABLE [dbo].[AuditEventSystemLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventSystemLog_BaseRef_AuditObjectID];

ALTER TABLE [dbo].[AuditEventSystemLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventSystemLog_idfsModule];

ALTER TABLE [dbo].[AuditEventSystemLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventSystemLog_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AuditEventSystemLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventSystemLog_tstSite_idfSiteID];

ALTER TABLE [dbo].[AuditEventSystemLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventSystemLog_UserTable_idfAppUserID];

ALTER TABLE [dbo].[AuditEventUserLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventUserLog_AuditEventSystemLog_LogUID];

ALTER TABLE [dbo].[AuditEventUserLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventUserLog_BaseRef_AuditEventTypeID];

ALTER TABLE [dbo].[AuditEventUserLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventUserLog_BaseRef_AuditObjectTypeID];

ALTER TABLE [dbo].[AuditEventUserLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventUserLog_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AuditEventUserLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventUserLog_tstSite_idfSiteID];

ALTER TABLE [dbo].[AuditEventUserLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventUserLog_UserTable_idfAppUserID];

ALTER TABLE [dbo].[DiagnosisGroupToGender] WITH CHECK CHECK CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_DiagnosisGroupID];

ALTER TABLE [dbo].[DiagnosisGroupToGender] WITH CHECK CHECK CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_GenderID];

ALTER TABLE [dbo].[DiagnosisGroupToGender] WITH CHECK CHECK CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[dotNetAppenderLog] WITH CHECK CHECK CONSTRAINT [FK_dotNetAppenderLog_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[EmployeeToInstitution] WITH CHECK CHECK CONSTRAINT [FK_EmployeeToInstitution_AspNetUserId];

ALTER TABLE [dbo].[EmployeeToInstitution] WITH CHECK CHECK CONSTRAINT [FK_EmployeeToInstitution_Office];

ALTER TABLE [dbo].[EmployeeToInstitution] WITH CHECK CHECK CONSTRAINT [FK_EmployeeToInstitution_UserId];

ALTER TABLE [dbo].[EventSubscription] WITH CHECK CHECK CONSTRAINT [FK_EventSubscription_tstUserTable];

ALTER TABLE [dbo].[ffDecorElement] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElement_ffFormTemplate__idfsFormTemplate_R_1373];

ALTER TABLE [dbo].[ffDecorElement] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElement_ffSection__idfsSection_R_1379];

ALTER TABLE [dbo].[ffDecorElement] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElement_trtBaseReference__idfsDecorElementType_R_1376];

ALTER TABLE [dbo].[ffDecorElement] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElement_trtBaseReference__idfsLanguage_R_1375];

ALTER TABLE [dbo].[ffDecorElement] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElement_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffDecorElementLine] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElementLine_ffDecorElement__idfDecorElement_R_1401];

ALTER TABLE [dbo].[ffDecorElementLine] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElementLine_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffDecorElementText] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElementText_ffDecorElement__idfDecorElement_R_1374];

ALTER TABLE [dbo].[ffDecorElementText] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElementText_trtBaseReference__idfsBaseReference_R_1389];

ALTER TABLE [dbo].[ffDecorElementText] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElementText_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffDeterminantType] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantType_gisReferenceType__idfsGISReferenceType_R_1669];

ALTER TABLE [dbo].[ffDeterminantType] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantType_trtBaseReference__idfsFormType_R_1660];

ALTER TABLE [dbo].[ffDeterminantType] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffDeterminantType] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantType_trtReferenceType__idfsReferenceType_R_950];

ALTER TABLE [dbo].[ffDeterminantValue] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantValue_gisBaseReference__idfsGISBaseReference_R_1670];

ALTER TABLE [dbo].[ffDeterminantValue] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantValue_trtBaseReference__idfsBaseReference_R_949];

ALTER TABLE [dbo].[ffDeterminantValue] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantValue_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffDeterminantValue] WITH CHECK CHECK CONSTRAINT [FK_FFormControlValue_FFormTemplate];

ALTER TABLE [dbo].[ffFormTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffFormTemplate_trtBaseReference__idfsFormTemplate_R_1385];

ALTER TABLE [dbo].[ffFormTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffFormTemplate_trtBaseReference__idfsFormType_R_1656];

ALTER TABLE [dbo].[ffFormTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffFormTemplate_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_ffParameterType__idfsParameterType_R_21];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_ffSection__idfsSection_R_1380];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_trtBaseReference__idfsEditor_R_1387];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_trtBaseReference__idfsFormType_R_1658];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_trtBaseReference__idfsParameter_R_1382];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_trtBaseReference__idfsParameterCaption_R_1383];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffParameterDesignOption_ffFormTemplate__idfsFormTemplate_R_1361];

ALTER TABLE [dbo].[ffParameterDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffParameterDesignOption_ffParameter__idfsParameter_R_1360];

ALTER TABLE [dbo].[ffParameterDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffParameterDesignOption_trtBaseReference__idfsLanguage_R_1381];

ALTER TABLE [dbo].[ffParameterDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffParameterDesignOption_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterFixedPresetValue] WITH CHECK CHECK CONSTRAINT [FK_ffParameterFixedPresetValue_ffParameterType__idfsParameterType_R_925];

ALTER TABLE [dbo].[ffParameterFixedPresetValue] WITH CHECK CHECK CONSTRAINT [FK_ffParameterFixedPresetValue_trtBaseReference__idfsParameterFixedPresetValue_R_1398];

ALTER TABLE [dbo].[ffParameterFixedPresetValue] WITH CHECK CHECK CONSTRAINT [FK_ffParameterFixedPresetValue_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterForAction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForAction_ffParameterForTemplate__idfsParameter_idfsFormTemplate_R];

ALTER TABLE [dbo].[ffParameterForAction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForAction_ffRule__idfsRule_R_820];

ALTER TABLE [dbo].[ffParameterForAction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForAction_trtBaseReference__idfsRuleAction_R_1392];

ALTER TABLE [dbo].[ffParameterForAction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForAction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterForFunction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForFunction_ffParameterForTemplate__idfsParameter___________________________________________________idfsFormTempla];

ALTER TABLE [dbo].[ffParameterForFunction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForFunction_ffRule__idfsRule_R_1647];

ALTER TABLE [dbo].[ffParameterForFunction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForTemplate_ffFormTemplate__idfsFormTemplate_R_91];

ALTER TABLE [dbo].[ffParameterForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForTemplate_ffParameter__idfsParameter_R_2];

ALTER TABLE [dbo].[ffParameterForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForTemplate_trtBaseReference__idfsEditMode_R_1388];

ALTER TABLE [dbo].[ffParameterForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForTemplate_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterType] WITH CHECK CHECK CONSTRAINT [FK_ffParameterType_trtBaseReference__idfsParameterType_R_1395];

ALTER TABLE [dbo].[ffParameterType] WITH CHECK CHECK CONSTRAINT [FK_ffParameterType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterType] WITH CHECK CHECK CONSTRAINT [FK_ffParameterType_trtReferenceType__idfsReferenceType_R_927];

ALTER TABLE [dbo].[ffRule] WITH CHECK CHECK CONSTRAINT [FK_FFRule_FFormTemplate];

ALTER TABLE [dbo].[ffRule] WITH CHECK CHECK CONSTRAINT [FK_ffRule_ffRuleFunction__idfsRuleFunction_R_1646];

ALTER TABLE [dbo].[ffRule] WITH CHECK CHECK CONSTRAINT [FK_ffRule_trtBaseReference__idfsCheckPoint_R_1390];

ALTER TABLE [dbo].[ffRule] WITH CHECK CHECK CONSTRAINT [FK_ffRule_trtBaseReference__idfsRule_R_1394];

ALTER TABLE [dbo].[ffRule] WITH CHECK CHECK CONSTRAINT [FK_ffRule_trtBaseReference__idfsRuleMessage_R_1391];

ALTER TABLE [dbo].[ffRule] WITH CHECK CHECK CONSTRAINT [FK_ffRule_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffRuleConstant] WITH CHECK CHECK CONSTRAINT [FK_ffRuleConstant_ffRule__idfsRule_R_1648];

ALTER TABLE [dbo].[ffRuleConstant] WITH CHECK CHECK CONSTRAINT [FK_ffRuleConstant_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffRuleFunction] WITH CHECK CHECK CONSTRAINT [FK_ffRuleFunction_trtBaseReference__idfsRuleFunction_R_1393];

ALTER TABLE [dbo].[ffRuleFunction] WITH CHECK CHECK CONSTRAINT [FK_ffRuleFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffSection] WITH CHECK CHECK CONSTRAINT [FK_ffSection_ffSection__idfsParentSection_R_1362];

ALTER TABLE [dbo].[ffSection] WITH CHECK CHECK CONSTRAINT [FK_ffSection_trtBaseReference__idfsFormType_R_1659];

ALTER TABLE [dbo].[ffSection] WITH CHECK CHECK CONSTRAINT [FK_ffSection_trtBaseReference__idfsSection_R_1378];

ALTER TABLE [dbo].[ffSection] WITH CHECK CHECK CONSTRAINT [FK_ffSection_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffSection] WITH CHECK CHECK CONSTRAINT [FK_ffSection_trtMatrixType__idfsMatrixType];

ALTER TABLE [dbo].[ffSectionDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffSectionDesignOption_ffSectionForTemplate__idfsFormTemplate________________________________________________idfsSection_R_163];

ALTER TABLE [dbo].[ffSectionDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffSectionDesignOption_trtBaseReference__idfsLanguage_R_1377];

ALTER TABLE [dbo].[ffSectionDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffSectionDesignOption_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffSectionForAction] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForAction_ffRule__idfsRule_R_1403];

ALTER TABLE [dbo].[ffSectionForAction] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForAction_ffSectionForTemplate__idfsFormTemplate_____________________________________________idfsSection_R_1402];

ALTER TABLE [dbo].[ffSectionForAction] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForAction_trtBaseReference__idfsRuleAction_R_1404];

ALTER TABLE [dbo].[ffSectionForAction] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForAction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffSectionForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForTemplate_ffFormTemplate__idfsFormTemplate_R_1400];

ALTER TABLE [dbo].[ffSectionForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForTemplate_ffSection__idfsSection_R_1399];

ALTER TABLE [dbo].[ffSectionForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForTemplate_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisBaseReference] WITH CHECK CHECK CONSTRAINT [FK_gisBaseReference_gisReferenceType__idfsGISReferenceType_R_1632];

ALTER TABLE [dbo].[gisBaseReference] WITH CHECK CHECK CONSTRAINT [FK_gisBaseReference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisCountry] WITH CHECK CHECK CONSTRAINT [FK_gisCountry_gisBaseReference__idfsCountry_R_1634];

ALTER TABLE [dbo].[gisCountry] WITH CHECK CHECK CONSTRAINT [FK_gisCountry_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisDistrictSubdistrict] WITH CHECK CHECK CONSTRAINT [FK_gisDistrictSubdistrict_gisRayon__idfsGeoObject];

ALTER TABLE [dbo].[gisDistrictSubdistrict] WITH CHECK CHECK CONSTRAINT [FK_gisDistrictSubdistrict_gisRayon__idfsParent];

ALTER TABLE [dbo].[gisDistrictSubdistrict] WITH CHECK CHECK CONSTRAINT [FK_gisDistrictSubdistrict_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisLegendSymbol] WITH CHECK CHECK CONSTRAINT [FK_gisLegendSymbol_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisMainCityForRayon] WITH CHECK CHECK CONSTRAINT [FK_gisMainCityForRayon_gisRayon__idfsRayon];

ALTER TABLE [dbo].[gisMainCityForRayon] WITH CHECK CHECK CONSTRAINT [FK_gisMainCityForRayon_gisSettlement__idfsMainSettlement];

ALTER TABLE [dbo].[gisMetadata] WITH CHECK CHECK CONSTRAINT [FK_gisMetadata_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisNewID] WITH CHECK CHECK CONSTRAINT [FK_gisNewID_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisOtherBaseReference] WITH CHECK CHECK CONSTRAINT [FK_gisOtherBaseReference_gisReferenceType__idfsGISReferenceType_R_1678];

ALTER TABLE [dbo].[gisOtherBaseReference] WITH CHECK CHECK CONSTRAINT [FK_gisOtherBaseReference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisOtherStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_gisOtherStringNameTranslation_gisBaseReference__idfsLanguage_R_1680];

ALTER TABLE [dbo].[gisOtherStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_gisOtherStringNameTranslation_gisOtherBaseReference__idfsGISOtherBaseReference_R_1679];

ALTER TABLE [dbo].[gisOtherStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_gisOtherStringNameTranslation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisRayon] WITH CHECK CHECK CONSTRAINT [FK_gisRayon_gisBaseReference__idfsRayon_R_1636];

ALTER TABLE [dbo].[gisRayon] WITH CHECK CHECK CONSTRAINT [FK_gisRayon_gisCountry__idfsCountry_R_233];

ALTER TABLE [dbo].[gisRayon] WITH CHECK CHECK CONSTRAINT [FK_gisRayon_gisRegion__idfsRegion_R_121];

ALTER TABLE [dbo].[gisRayon] WITH CHECK CHECK CONSTRAINT [FK_gisRayon_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisReferenceType] WITH CHECK CHECK CONSTRAINT [FK_gisReferenceType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisRegion] WITH CHECK CHECK CONSTRAINT [FK_gisRegion_gisBaseReference__idfsRegion_R_1635];

ALTER TABLE [dbo].[gisRegion] WITH CHECK CHECK CONSTRAINT [FK_gisRegion_gisCountry__idfsCountry_R_232];

ALTER TABLE [dbo].[gisRegion] WITH CHECK CHECK CONSTRAINT [FK_gisRegion_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisSettlement_gisBaseReference__idfsSettlement_R_1637];

ALTER TABLE [dbo].[gisSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisSettlement_gisBaseReference__idfsSettlementType_R_1638];

ALTER TABLE [dbo].[gisSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisSettlement_gisCountry__idfsCountry_R_7];

ALTER TABLE [dbo].[gisSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisSettlement_gisRayon__idfsRayon_R_9];

ALTER TABLE [dbo].[gisSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisSettlement_gisRegion__idfsRegion_R_8];

ALTER TABLE [dbo].[gisSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisSettlement_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_gisStringNameTranslation_gisBaseReference__idfsGISBaseReference_R_1639];

ALTER TABLE [dbo].[gisStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_gisStringNameTranslation_gisBaseReference__idfsLanguage_R_1640];

ALTER TABLE [dbo].[gisStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_gisStringNameTranslation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisUserLayer] WITH CHECK CHECK CONSTRAINT [FK_gisUserLayer_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisUserLayer] WITH CHECK CHECK CONSTRAINT [FK_gisUserLayer_tstUserTable];

ALTER TABLE [dbo].[gisWHOMap] WITH CHECK CHECK CONSTRAINT [FK_gisWHOMap_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWHOMap] WITH CHECK CHECK CONSTRAINT [FK_idfsLocation_gisLocation];

ALTER TABLE [dbo].[gisWKBCountry] WITH CHECK CHECK CONSTRAINT [FK__gisWKBCou__idfsG__37E6D44C];

ALTER TABLE [dbo].[gisWKBCountry] WITH CHECK CHECK CONSTRAINT [FK_gisWKBCountry_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBDistrict] WITH CHECK CHECK CONSTRAINT [FK_gisWKBDistrict_gisBaseReference];

ALTER TABLE [dbo].[gisWKBDistrict] WITH CHECK CHECK CONSTRAINT [FK_gisWKBDistrict_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBDistrictReady] WITH CHECK CHECK CONSTRAINT [FK_gisWKBDistrictReady_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBEarthRoad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBEarthRoad_gisCountry];

ALTER TABLE [dbo].[gisWKBEarthRoad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBEarthRoad_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBEarthRoad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBEarthRoad_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBForest] WITH CHECK CHECK CONSTRAINT [FK_gisWKBForest_gisCountry];

ALTER TABLE [dbo].[gisWKBForest] WITH CHECK CHECK CONSTRAINT [FK_gisWKBForest_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBForest] WITH CHECK CHECK CONSTRAINT [FK_gisWKBForest_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBHighway] WITH CHECK CHECK CONSTRAINT [FK_gisWKBHighway_gisCountry];

ALTER TABLE [dbo].[gisWKBHighway] WITH CHECK CHECK CONSTRAINT [FK_gisWKBHighway_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBHighway] WITH CHECK CHECK CONSTRAINT [FK_gisWKBHighway_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBInlandWater] WITH CHECK CHECK CONSTRAINT [FK_gisWKBInlandWater_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBLake] WITH CHECK CHECK CONSTRAINT [FK_gisWKBLake_gisCountry];

ALTER TABLE [dbo].[gisWKBLake] WITH CHECK CHECK CONSTRAINT [FK_gisWKBLake_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBLake] WITH CHECK CHECK CONSTRAINT [FK_gisWKBLake_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBLanduse] WITH CHECK CHECK CONSTRAINT [FK_gisWKBLanduse_gisCountry];

ALTER TABLE [dbo].[gisWKBLanduse] WITH CHECK CHECK CONSTRAINT [FK_gisWKBLanduse_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBLanduse] WITH CHECK CHECK CONSTRAINT [FK_gisWKBLanduse_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBMainRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBMainRiver_gisCountry];

ALTER TABLE [dbo].[gisWKBMainRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBMainRiver_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBMainRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBMainRiver_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBMajorRoad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBMajorRoad_gisCountry];

ALTER TABLE [dbo].[gisWKBMajorRoad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBMajorRoad_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBMajorRoad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBMajorRoad_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBPath] WITH CHECK CHECK CONSTRAINT [FK_gisWKBPath_gisCountry];

ALTER TABLE [dbo].[gisWKBPath] WITH CHECK CHECK CONSTRAINT [FK_gisWKBPath_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBPath] WITH CHECK CHECK CONSTRAINT [FK_gisWKBPath_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRailroad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRailroad_gisCountry];

ALTER TABLE [dbo].[gisWKBRailroad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRailroad_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBRailroad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRailroad_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRayon] WITH CHECK CHECK CONSTRAINT [FK__gisWKBRay__idfsG__35FE8BDA];

ALTER TABLE [dbo].[gisWKBRayon] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRayon_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRayonReady] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRayonReady_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRegion] WITH CHECK CHECK CONSTRAINT [FK__gisWKBReg__idfsG__34164368];

ALTER TABLE [dbo].[gisWKBRegion] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRegion_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRegionReady] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRegionReady_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRiver_gisCountry];

ALTER TABLE [dbo].[gisWKBRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRiver_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRiver_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRiverPolygon] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRiverPolygon_gisCountry];

ALTER TABLE [dbo].[gisWKBRiverPolygon] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRiverPolygon_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBRiverPolygon] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRiverPolygon_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRuralDistrict] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRuralDistrict_gisCountry];

ALTER TABLE [dbo].[gisWKBRuralDistrict] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRuralDistrict_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBRuralDistrict] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRuralDistrict_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBSea] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSea_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBSea] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSea_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBSettlement] WITH CHECK CHECK CONSTRAINT [FK__gisWKBSet__idfsG__322DFAF6];

ALTER TABLE [dbo].[gisWKBSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSettlement_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBSettlementReady] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSettlementReady_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBSmallRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSmallRiver_gisCountry];

ALTER TABLE [dbo].[gisWKBSmallRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSmallRiver_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBSmallRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSmallRiver_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [[FK_HumanActualAddlInfo_Human_UID];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_AgeUOM];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_ContactPhone2NbrType];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_ContactPhoneNbrType];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_IsEmployed];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActualAddlInfo_tlbHUmanActual_idfHumanActual];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActualAddlInfo_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActulaAddlIfo_BaseRef_IsSchool];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActulaAddlIfo_GeoLocationShared_AtlAddressID];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActulaAddlIfo_GeosharedaddressID];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlIfo_BaseRef_IsSchool];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlIfo_Geo_addressID];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_BaseRef_ContactPhoneNbr2Type];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_BaseRef_ContactPhoneNbrType];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_BaseRef_IsEmployed];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_BaseRef_IsInSchool];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_BaseRef_ReportedAgeUOM];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_GeoLocation_AltAddress];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_Human_idfhuman];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_HumanDiseaseReportRelationship_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_HumanDiseaseReportReln_BaseRef_RelTypeID];

ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_HumanDiseaseReportID];

ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_RelatedToHumanDiseaseReportIdRoot];

ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_RelateToHumanDiseaseReportID];

ALTER TABLE [dbo].[HumanDiseaseReportVaccination] WITH CHECK CHECK CONSTRAINT [FK_HumanDiseaseReportVaccination_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[HumanDiseaseReportVaccination] WITH CHECK CHECK CONSTRAINT [R_1417];

ALTER TABLE [dbo].[LkupConfigParm] WITH CHECK CHECK CONSTRAINT [FK_LkupConfigParm_trtBaseReference_idfsBaseReference];

ALTER TABLE [dbo].[LkupConfigParm] WITH CHECK CHECK CONSTRAINT [FK_LkupConfigParm_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] WITH CHECK CHECK CONSTRAINT [FK_CountryRoleToStandardRoleMap_gidCountry_CountryID];

ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] WITH CHECK CHECK CONSTRAINT [FK_CountryRoleToStandardRoleMap_trtBaseReference_StadardRoleID];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_EIDSSMenu_MenuID];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_ObjName];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_ObjType];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_PageToolTip];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupEIDSSMenu] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_MenuID];

ALTER TABLE [dbo].[LkupEIDSSMenu] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_ParentMenuID];

ALTER TABLE [dbo].[LkupEIDSSMenu] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenu_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToEventType_BaseRef_MenuID];

ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId];

ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_BaseRef_MenuID];

ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_BaseRef_SystemFunctionID];

ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LKUPNextKey] WITH CHECK CHECK CONSTRAINT [FK_LKUPNextKey_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupRoleDashboardObject] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleDashboardObject_AppObject_SashboardObjectID];

ALTER TABLE [dbo].[LkupRoleDashboardObject] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleDashboardObject_idfEmployee];

ALTER TABLE [dbo].[LkupRoleDashboardObject] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleDashboardObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupRoleMenuAccess] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleMenuAccess_idfEmployee];

ALTER TABLE [dbo].[LkupRoleMenuAccess] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleMenuAccess_LkupEIDSSMenu_MenuID];

ALTER TABLE [dbo].[LkupRoleMenuAccess] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleMenuAccess_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH CHECK CHECK CONSTRAINT [FK_lkupRoleSysFunctionAccess_BaseReference_SysFunctionOperationID];

ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH CHECK CHECK CONSTRAINT [FK_lkupRoleSysFunctionAccess_BaseReference_SystemFunction];

ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH CHECK CHECK CONSTRAINT [FK_lkupRoleSysFunctionAccess_trtBaseRef_AccessPermissionID];

ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleSystemFunctionAccess_idfEmployee];

ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleSystemFunctionAccess_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH CHECK CHECK CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_idfsModule];

ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH CHECK CHECK CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_SysFunctionOperationID];

ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH CHECK CHECK CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_SystemFunction];

ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH CHECK CHECK CONSTRAINT [FK_LkupSystemFunctionToOperation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[locBaseReference] WITH CHECK CHECK CONSTRAINT [FK_locBaseReference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[locStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_locStringNameTranslation_locBaseReference__idflBaseReference_R_1702];

ALTER TABLE [dbo].[locStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_locStringNameTranslation_trtBaseReference__idfsLanguage_R_1692];

ALTER TABLE [dbo].[locStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_locStringNameTranslation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LOINCEidssMapping] WITH CHECK CHECK CONSTRAINT [FK_LOINCEidssMapping_trtBaseReference__idfsBaseReference];

ALTER TABLE [dbo].[LOINCEidssMapping] WITH CHECK CHECK CONSTRAINT [FK_LOINCEidssMapping_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LOINCEidssMapping] WITH CHECK CHECK CONSTRAINT [FK_LOINCEidssMapping_trtReferenecType__idfsReferenceType];

ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH CHECK CHECK CONSTRAINT [FK_MonitoringSessionToSampleType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToSampleType_tlbMonitoringSession_MonitoringSessionID];

ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToSampleType_trtSampleType_SampleType];

ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToSampleType_trtSpeciesType_SpeciesType];

ALTER TABLE [dbo].[OutbreakCaseContact] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseContact_OutbreakCase_OutbreakCaseReportUID];

ALTER TABLE [dbo].[OutbreakCaseContact] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseContact_tlbContactedCasePerson_idfContactedCasePersonID];

ALTER TABLE [dbo].[OutbreakCaseContact] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseContact_tlbHuman_idfHuman];

ALTER TABLE [dbo].[OutbreakCaseContact] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseContact_tlbObservation_ContactTracingObservationID];

ALTER TABLE [dbo].[OutbreakCaseContact] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseContact_trtBaseReference_ContactRelationshipTypeID];

ALTER TABLE [dbo].[OutbreakCaseContact] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseContact_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[OutbreakCaseReport] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCase_tlbHUmanCase_idfHumanCaseID];

ALTER TABLE [dbo].[OutbreakCaseReport] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCase_tlbObservation_CaseEPIObservationID];

ALTER TABLE [dbo].[OutbreakCaseReport] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCase_tlbOutbreak_idfOutbreakID];

ALTER TABLE [dbo].[OutbreakCaseReport] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCase_tlbVetCase_idfVetCaseID];

ALTER TABLE [dbo].[OutbreakCaseReport] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[OutbreakCaseReport] WITH CHECK CHECK CONSTRAINT [FK_OutbreatkCase_Observation_OutbreakCaseObservationID];

ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH CHECK CHECK CONSTRAINT [FK_outbreakSpeciesParameter_tlbOutbreak_OutbreakID];

ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH CHECK CHECK CONSTRAINT [FK_OutbreakSpeciesParameter_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH CHECK CHECK CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_CaseMonitoringTemplateID];

ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH CHECK CHECK CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_CaseQuestionaireTemplateID];

ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH CHECK CHECK CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_ContactTracingTemplateID];

ALTER TABLE [dbo].[SecurityPolicyConfiguration] WITH CHECK CHECK CONSTRAINT [FK_SecurityPolicyConfig_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[SiteToSiteAccess] WITH CHECK CHECK CONSTRAINT [FK_SiteToSiteAccess_BaseReference_AaccessPermissionID];

ALTER TABLE [dbo].[SiteToSiteAccess] WITH CHECK CHECK CONSTRAINT [FK_SiteToSiteAccess_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[SiteToSiteAccess] WITH CHECK CHECK CONSTRAINT [FK_SiteToSiteAccess_tstSite_GranteeSite];

ALTER TABLE [dbo].[SiteToSiteAccess] WITH CHECK CHECK CONSTRAINT [FK_SiteToSiteAccess_tstSite_GrantToSite];

ALTER TABLE [dbo].[SystemPreference] WITH CHECK CHECK CONSTRAINT [FK_SystemPreference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasAggregateFunction] WITH CHECK CHECK CONSTRAINT [FK_tasAggregateFunction_trtBaseReference__idfsAggregateFunction];

ALTER TABLE [dbo].[tasAggregateFunction] WITH CHECK CHECK CONSTRAINT [FK_tasAggregateFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasFieldSourceForTable] WITH CHECK CHECK CONSTRAINT [FK_tasFieldSourceForTable_tasSearchField__idfsSearchField];

ALTER TABLE [dbo].[tasFieldSourceForTable] WITH CHECK CHECK CONSTRAINT [FK_tasFieldSourceForTable_tasSearchTable__idfSearchTable];

ALTER TABLE [dbo].[tasFieldSourceForTable] WITH CHECK CHECK CONSTRAINT [FK_tasFieldSourceForTable_tasSearchTable__idfUnionSearchTable];

ALTER TABLE [dbo].[tasFieldSourceForTable] WITH CHECK CHECK CONSTRAINT [FK_tasFieldSourceForTable_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_tasglLayoutFolder__idfsLayoutFolder_R_1698_1];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_tasglQuery__idfsQuery_R_1326_1];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_tlbPerson__idfPerson];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsDefaultGroupDate];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsDescription_R_1717_1];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsLayout_R_1708_1];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutFolder_tasglLayoutFolder__idfsParentLayoutFolder_R_1715_1];

ALTER TABLE [dbo].[tasglLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutFolder_tasglQuery__idfsQuery_R_1697_1];

ALTER TABLE [dbo].[tasglLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutFolder_trtBaseReference__idfsLayoutFolder_R_1703_1];

ALTER TABLE [dbo].[tasglLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutFolder_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_tasAggregateFunction__idfsAggregateFunction];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_tasglLayoutSearchField__idfDateLayoutSearchField];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_tasglLayoutSearchField__idfUnitLayoutSearchField];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_tasglQuerySearchField__idfQuerySearchField];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_tasLayout_idflLayout];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference__idfsGroupDate];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference_idfsLayoutSearchFieldName];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglLayoutToMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutToMapImage_tasglLayout__idfsLayout];

ALTER TABLE [dbo].[tasglLayoutToMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutToMapImage_tasglMapImage__idfMapImage];

ALTER TABLE [dbo].[tasglLayoutToMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutToMapImage_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasglMapImage_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglQuery] WITH CHECK CHECK CONSTRAINT [FK_tasglQuery_trtBaseReference__idfsDescription_R_1718_1];

ALTER TABLE [dbo].[tasglQuery] WITH CHECK CHECK CONSTRAINT [FK_tasglQuery_trtBaseReference__idfsQueryName_R_1709_1];

ALTER TABLE [dbo].[tasglQuery] WITH CHECK CHECK CONSTRAINT [FK_tasglQuery_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasglQueryConditionGroup_tasglQueryConditionGroup__idfParentQueryConditionGroup_R_1345_1];

ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfQuerySearchObject_R_1344_1];

ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfSubQuerySearchObject];

ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasglQueryConditionGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchField_ffParameter__idfsParameter_R_1353_1];

ALTER TABLE [dbo].[tasglQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchField_tasglQuerySearchObject__idfQuerySearchObject_R_1351_1];

ALTER TABLE [dbo].[tasglQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchField_tasglSearchFieldList__idfsSearchField_R_1352_1];

ALTER TABLE [dbo].[tasglQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchField_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchFieldCondition_tasglQueryConditionGroup__idfQueryConditionGroup_R_1342_1];

ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchFieldCondition_tasglQuerySearchField__idfQuerySearchField_R_1343_1];

ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchObject_tasglQuery__idfsQueryName_R_1327_1];

ALTER TABLE [dbo].[tasglQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchObject_tasglQuerySearchObject__idfParentQuerySearchObject_R_1329_1];

ALTER TABLE [dbo].[tasglQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328_1];

ALTER TABLE [dbo].[tasglQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchObject_trtBaseReference__idfsReportType];

ALTER TABLE [dbo].[tasglQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglView] WITH CHECK CHECK CONSTRAINT [FK_tasglView_tasglLayout__idfsLayout];

ALTER TABLE [dbo].[tasglView] WITH CHECK CHECK CONSTRAINT [FK_tasglView_tasglViewColumn__idfChartXAxisViewColumn];

ALTER TABLE [dbo].[tasglView] WITH CHECK CHECK CONSTRAINT [FK_tasglView_tasglViewColumn__idfMapAdminUnitViewColumn];

ALTER TABLE [dbo].[tasglView] WITH CHECK CHECK CONSTRAINT [FK_tasglView_trtBaseReference__idfsLanguage];

ALTER TABLE [dbo].[tasglView] WITH CHECK CHECK CONSTRAINT [FK_tasglView_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasglViewBand_tasglLayoutSearchField__idfLayoutSearchField];

ALTER TABLE [dbo].[tasglViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasglViewBand_tasglView__idfView_idfsLanguage];

ALTER TABLE [dbo].[tasglViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasglViewBand_tasglViewBand__idfParentViewBand];

ALTER TABLE [dbo].[tasglViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasglViewBand_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_tasAggregateFunction__idfsAggregateFunction];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_tasglLayoutSearchField__idfLayoutSearchField];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_tasglView__idfView_idfsLanguage];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_tasglViewBand__idfViewBand];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_tasglViewColumn__idfDenominatorViewColumn];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_tasglViewColumn__idfSourceViewColumn];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_locBaseReference__idflDescription_R_1717];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_locBaseReference__idflLayout_R_1708];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_tasglLayout__idfsGlobalLayout_R_1794];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_tasLayoutFolder__idflLayoutFolder_R_1698];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_tasQuery__idflQuery_R_1326];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_tlbPerson__idfPerson];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_trtBaseReference__idfsDefaultGroupDate];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutFolder_locBaseReference__idflLayoutFolder_R_1703];

ALTER TABLE [dbo].[tasLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutFolder_tasglLayoutFolder__idfsGlobalLayoutFolder_R_1796];

ALTER TABLE [dbo].[tasLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutFolder_tasLayoutFolder__idflParentLayoutFolder_R_1715];

ALTER TABLE [dbo].[tasLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutFolder_tasQuery__idflQuery_R_1697];

ALTER TABLE [dbo].[tasLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutFolder_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_locBaseReference_idflLayoutSearchFieldName];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_tasAggregateFunction__idfsAggregateFunction];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_tasLayout_idflLayout];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_tasLayoutSearchField__idfDateLayoutSearchField];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_tasLayoutSearchField__idfUnitLayoutSearchField];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_tasQuerySearchField__idfQuerySearchField];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_trtBaseReference__idfsGroupDate];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasLayoutToMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutToMapImage_tasLayout__idflLayout];

ALTER TABLE [dbo].[tasLayoutToMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutToMapImage_tasMapImage__idfMapImage];

ALTER TABLE [dbo].[tasLayoutToMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutToMapImage_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasMainTableForObject] WITH CHECK CHECK CONSTRAINT [FK_tasMainTableForObject_tasSearchObject__idfsSearchObject];

ALTER TABLE [dbo].[tasMainTableForObject] WITH CHECK CHECK CONSTRAINT [FK_tasMainTableForObject_tasSearchTable__idfMainSearchTable];

ALTER TABLE [dbo].[tasMainTableForObject] WITH CHECK CHECK CONSTRAINT [FK_tasMainTableForObject_tasSearchTable__idfMandatorySearchTable];

ALTER TABLE [dbo].[tasMainTableForObject] WITH CHECK CHECK CONSTRAINT [FK_tasMainTableForObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasMapImage_tasglMapImage__idfGlobalMapImage];

ALTER TABLE [dbo].[tasMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasMapImage_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasQuery] WITH CHECK CHECK CONSTRAINT [FK_tasQuery_locBaseReference__idflDescription_R_1718];

ALTER TABLE [dbo].[tasQuery] WITH CHECK CHECK CONSTRAINT [FK_tasQuery_locBaseReference__idflQueryName_R_1709];

ALTER TABLE [dbo].[tasQuery] WITH CHECK CHECK CONSTRAINT [FK_tasQuery_tasglQuery__idfsGlobalQuery_R_1795];

ALTER TABLE [dbo].[tasQuery] WITH CHECK CHECK CONSTRAINT [FK_tasQuery_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasQueryConditionGroup_tasQueryConditionGroup__idfParentQueryConditionGroup_R_1345];

ALTER TABLE [dbo].[tasQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasQueryConditionGroup_tasQuerySearchObject__idfQuerySearchObject_R_1344];

ALTER TABLE [dbo].[tasQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasQueryConditionGroup_tasQuerySearchObject__idfSubQuerySearchObject];

ALTER TABLE [dbo].[tasQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasQueryConditionGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchField_ffParameter__idfsParameter_R_1353];

ALTER TABLE [dbo].[tasQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchField_tasQuerySearchObject__idfQuerySearchObject_R_1351];

ALTER TABLE [dbo].[tasQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchField_tasSearchFieldList__idfsSearchField_R_1352];

ALTER TABLE [dbo].[tasQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchField_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasQuerySearchFieldCondition] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchFieldCondition_tasQueryConditionGroup__idfQueryConditionGroup_R_1342];

ALTER TABLE [dbo].[tasQuerySearchFieldCondition] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchFieldCondition_tasQuerySearchField__idfQuerySearchField_R_1343];

ALTER TABLE [dbo].[tasQuerySearchFieldCondition] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchObject_tasQuery__idflQueryName_R_1327];

ALTER TABLE [dbo].[tasQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchObject_tasQuerySearchObject__idfParentQuerySearchObject_R_1329];

ALTER TABLE [dbo].[tasQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328];

ALTER TABLE [dbo].[tasQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchObject_trtBaseReference__idfsReportType];

ALTER TABLE [dbo].[tasQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchField_gisReferenceType__idfsGISReferenceType_R_1720];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchField_tasAggregateFunction__idfsDefaultAggregateFunction];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchField_tasSearchObject__idfsSearchObject_R_1346];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchField_trtBaseReference__idfsSearchField_R_1355];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchField_trtBaseReference__idfsSearchFieldType_R_1587];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchField_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldList_trtReferenceType__idfsReferenceType_R_1349];

ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsRelatedSearchField];

ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsSearchField];

ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchFieldToFFParameter] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldToFFParameter_ffParameter_idfsParameter];

ALTER TABLE [dbo].[tasSearchFieldToFFParameter] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldToFFParameter_tasSearchField_idfsSearchField];

ALTER TABLE [dbo].[tasSearchFieldToFFParameter] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldToFFParameter_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_tasSearchField_idfsSearchField];

ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_tstPersonalDataGroup_idfPersonalDataGroup];

ALTER TABLE [dbo].[tasSearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObject_trtBaseReference__idfsFormType_R_1657];

ALTER TABLE [dbo].[tasSearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObject_trtBaseReference__idfsSearchObject_R_1357];

ALTER TABLE [dbo].[tasSearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchObjectToSearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObjectToSearchObject_tasSearchObject__idfsParentSearchObject_R_1714];

ALTER TABLE [dbo].[tasSearchObjectToSearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObjectToSearchObject_tasSearchObject__idfsRelatedSearchObject_R_1713];

ALTER TABLE [dbo].[tasSearchObjectToSearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObjectToSearchObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObjectToSystemFunction_tasSearchObject_idfsSearchObject];

ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObjectToSystemFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObjectToSystemFunction_trtSystemFunction_idfsSystemFunction];

ALTER TABLE [dbo].[tasSearchTable] WITH CHECK CHECK CONSTRAINT [FK_tasSearchTable_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH CHECK CHECK CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfMainSearchTable_R_1723];

ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH CHECK CHECK CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfParentSearchTable_R_1700];

ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH CHECK CHECK CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfSearchTable_R_1701];

ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH CHECK CHECK CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfUnionSearchTable];

ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH CHECK CHECK CONSTRAINT [FK_tasSearchTableJoinRule_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasView] WITH CHECK CHECK CONSTRAINT [FK_tasView_tasglView__idfGlobalView_idfsLanguage];

ALTER TABLE [dbo].[tasView] WITH CHECK CHECK CONSTRAINT [FK_tasView_tasLayout__idflLayout];

ALTER TABLE [dbo].[tasView] WITH CHECK CHECK CONSTRAINT [FK_tasView_tasViewColumn__idfChartXAxisViewColumn];

ALTER TABLE [dbo].[tasView] WITH CHECK CHECK CONSTRAINT [FK_tasView_tasViewColumn__idfMapAdminUnitViewColumn];

ALTER TABLE [dbo].[tasView] WITH CHECK CHECK CONSTRAINT [FK_tasView_trtBaseReference__idfsLanguage];

ALTER TABLE [dbo].[tasView] WITH CHECK CHECK CONSTRAINT [FK_tasView_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasViewBand_tasLayoutSearchField__idfLayoutSearchField];

ALTER TABLE [dbo].[tasViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasViewBand_tasView__idfView_idfsLanguage];

ALTER TABLE [dbo].[tasViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasViewBand_tasViewBand__idfParentViewBand];

ALTER TABLE [dbo].[tasViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasViewBand_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_tasAggregateFunction__idfsAggregateFunction];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_tasLayoutSearchField__idfLayoutSearchField];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_tasView__idfView_idfsLanguage];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_tasViewBand__idfViewBand];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_tasViewColumn__idfDenominatorViewColumn];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_tasViewColumn__idfSourceViewColumn];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauColumn] WITH CHECK CHECK CONSTRAINT [FK_tauColumn_tauTable__idfTable_R_1559];

ALTER TABLE [dbo].[tauColumn] WITH CHECK CHECK CONSTRAINT [FK_tauColumn_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauDataAuditDetailCreate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailCreate_tauDataAuditEvent__idfDataAuditEvent_R_1024];

ALTER TABLE [dbo].[tauDataAuditDetailCreate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailCreate_tauTable__idfObjectTable_R_1561];

ALTER TABLE [dbo].[tauDataAuditDetailCreate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailCreate_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauDataAuditDetailDelete] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailDelete_tauDataAuditEvent__idfDataAuditEvent_R_1558];

ALTER TABLE [dbo].[tauDataAuditDetailDelete] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailDelete_tauTable__idfObjectTable_R_1563];

ALTER TABLE [dbo].[tauDataAuditDetailDelete] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailDelete_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauDataAuditDetailRestore] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailRestore_tauDataAuditEvent__idfDataAuditEvent_R_1558];

ALTER TABLE [dbo].[tauDataAuditDetailRestore] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailRestore_tauTable__idfObjectTable_R_1563];

ALTER TABLE [dbo].[tauDataAuditDetailRestore] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailRestore_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailUpdate_tauColumn__idfColumn_R_1564];

ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailUpdate_tauDataAuditEvent__idfDataAuditEvent_R_1557];

ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailUpdate_tauTable__idfObjectTable_R_1562];

ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailUpdate_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauDataAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditEvent_tauTable__idfMainObjectTable_R_1560];

ALTER TABLE [dbo].[tauDataAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditEventType_R_1556];

ALTER TABLE [dbo].[tauDataAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditObjectType_R_1555];

ALTER TABLE [dbo].[tauDataAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauDataAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditEvent_tstSite__idfsSite_R_1021];

ALTER TABLE [dbo].[tauDataAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditEvent_tstUserTable__idfUserID_R_1022];

ALTER TABLE [dbo].[tauPINAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauPINAuditEvent_tstUserTable];

ALTER TABLE [dbo].[tauTable] WITH CHECK CHECK CONSTRAINT [FK_tauTable_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tdeDataExport] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tdeDataExport] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExport_tstUserTable__idfUserID_R_1004];

ALTER TABLE [dbo].[tdeDataExportDetail] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDetail_tdeDataExport__idfDataExport_R_1001];

ALTER TABLE [dbo].[tdeDataExportDetail] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDetail_trtBaseReference__idfsDataExportDetailStatus_R_1582];

ALTER TABLE [dbo].[tdeDataExportDetail] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDetail_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tdeDataExportDetail] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDetail_trtDiagnosis__idfsDiagnosis_R_1003];

ALTER TABLE [dbo].[tdeDataExportDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDiagnosis_tdeDataExport__idfDataExport_R_1000];

ALTER TABLE [dbo].[tdeDataExportDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tdeDataExportDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDiagnosis_trtDiagnosis__idfsDiagnosis_R_999];

ALTER TABLE [dbo].[tdeDataExportFFReference] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportFFReference_ffParameter__idfsParameter];

ALTER TABLE [dbo].[tdeDataExportFFReference] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportFFReference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tdeDataExportFFReference] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportFFReference_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tdeDataExportProblem] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportProblem_tdeDataExport__idfDataExport_R_1008];

ALTER TABLE [dbo].[tdeDataExportProblem] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportProblem_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflAggrCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflAggrCaseFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflAggrCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflAggrCaseFiltered_tlbAggrCase__idfAggrCase];

ALTER TABLE [dbo].[tflAggrCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflAggrCaseFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader];

ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_tlbBasicSyndromicSurveillance__idfBasicSyndromicSurveillance_R_1831];

ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflBatchTestFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBatchTestFiltered_tflSiteGroup];

ALTER TABLE [dbo].[tflBatchTestFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBatchTestFiltered_tlbBatchTest];

ALTER TABLE [dbo].[tflBatchTestFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBatchTestFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflDataAuditEventFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflDataAuditEventFiltered_tauDataAuditEvent__idfDataAuditEvent_R_1830];

ALTER TABLE [dbo].[tflDataAuditEventFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflDataAuditEventFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflDataAuditEventFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflDataAuditEventFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflFarmFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflFarmFiltered_tlbFarm];

ALTER TABLE [dbo].[tflFarmFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflFarmFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflFarmFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflFarmFilteredGroup_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflGeoLocationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflGeoLocationFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflGeoLocationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflGeoLocationFiltered_tlbGeoLocation__idfGeoLocation_R_1805];

ALTER TABLE [dbo].[tflGeoLocationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflGeoLocationFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflHumanCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflHumanCaseFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflHumanCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflHumanCaseFiltered_tlbHumanCase__idfHumanCase];

ALTER TABLE [dbo].[tflHumanCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflHumanCaseFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflHumanFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflHumanFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflHumanFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflHumanFiltered_tlbHuman];

ALTER TABLE [dbo].[tflHumanFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflHumanFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflMonitoringSessionFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflMonitoringSessionFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflMonitoringSessionFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflMonitoringSessionFiltered_tlbMonitoringSession__idfMonitoringSession_R_1819];

ALTER TABLE [dbo].[tflMonitoringSessionFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflMonitoringSessionFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflNewID] WITH CHECK CHECK CONSTRAINT [FK_tflNewID_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflNotificationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflNotificationFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflNotificationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflNotificationFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflNotificationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflNotificationFiltered_tstNotification__idfNotification_R_1825];

ALTER TABLE [dbo].[tflObservationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflObservationFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflObservationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflObservationFiltered_tlbObservation__idfObservation_R_1809];

ALTER TABLE [dbo].[tflObservationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflObservationFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflOutbreakFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflOutbreakFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflOutbreakFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflOutbreakFiltered_tlbOutbreak__idfOutbreak_R_1811];

ALTER TABLE [dbo].[tflOutbreakFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflOutbreakFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflSite] WITH CHECK CHECK CONSTRAINT [FK_tflSite_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflSite] WITH CHECK CHECK CONSTRAINT [FK_tflSite_tstSite__idfsSite];

ALTER TABLE [dbo].[tflSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroup_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tflSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroup_gisRayon_idfsRayon];

ALTER TABLE [dbo].[tflSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroup_trtBaseReference_idfsSiteGroupType];

ALTER TABLE [dbo].[tflSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroup_tstSite_idfsSite];

ALTER TABLE [dbo].[tflSiteGroupRelation] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroupRelation_tflSiteGroup_idfReceiverSite];

ALTER TABLE [dbo].[tflSiteGroupRelation] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroupRelation_tflSiteGroup_idfsSenderSiteGroup];

ALTER TABLE [dbo].[tflSiteGroupRelation] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroupRelation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflSiteToSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteToSiteGroup_tflSiteGroup_idfSiteGroup];

ALTER TABLE [dbo].[tflSiteToSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteToSiteGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflSiteToSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteToSiteGroup_tstSite_idfsSite];

ALTER TABLE [dbo].[tflTransferOutFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflTransferOutFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflTransferOutFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflTransferOutFiltered_tlbTransferOUT__idfTransferOut_R_1817];

ALTER TABLE [dbo].[tflTransferOutFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflTransferOutFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_tlbVectorSurveillanceSession__idfVectorSurveillanceSession];

ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflVetCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflVetCaseFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflVetCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflVetCaseFiltered_tlbVetCase__idfVetCase];

ALTER TABLE [dbo].[tflVetCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflVetCaseFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbActivityParameters] WITH CHECK CHECK CONSTRAINT [FK_tlbActivityParameters_ffParameter__idfsParameter_R_222];

ALTER TABLE [dbo].[tlbActivityParameters] WITH CHECK CHECK CONSTRAINT [FK_tlbActivityParameters_tlbObservation__idfObservation_R_1423];

ALTER TABLE [dbo].[tlbActivityParameters] WITH CHECK CHECK CONSTRAINT [FK_tlbActivityParameters_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAdministrativeReportAudit] WITH CHECK CHECK CONSTRAINT [FK_tlbAdministrativeReportAudit_idfsReport];

ALTER TABLE [dbo].[tlbAdministrativeReportAudit] WITH CHECK CHECK CONSTRAINT [FK_tlbAdministrativeReportAudit_RoleID];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_gisBaseReference__idfsAdministrativeUnit_R_1666];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfDiagnosticVersion_R_1686];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfProphylacticVersion_R_1687];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfSanitaryVersion_R_1688];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfVersion_R_1684];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfCaseObservation_R_1608];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfDiagnosticObservation_R_1609];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfProphylacticObservation_R_1610];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfSanitaryObservation_R_1611];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfEnteredByOffice_R_1606];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfOffice];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfReceivedByOffice_R_1602];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfSentByOffice_R_1604];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfEnteredByPerson_R_1607];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfReceivedByPerson_R_1603];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfSentByPerson_R_1605];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_trtBaseReference__idfsAggrCaseType_R_1601];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_tlbAggrMatrixVersionHeader__idfVersion];

ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtBaseReference__idfsDiagnosticAction_R_1117];

ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtDiagnosis__idfsDiagnosis_R_1616];

ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtSpeciesType__idfsSpeciesType_R_1116];

ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrHumanCaseMTX_tlbAggrMatrixVersionHeader__idfVersion];

ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrHumanCaseMTX_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrHumanCaseMTX_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[tlbAggrMatrixVersionHeader] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrMatrixVersionHeader_trtBaseReference__idfsAggrMatrixType_R_1685];

ALTER TABLE [dbo].[tlbAggrMatrixVersionHeader] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrMatrixVersionHeader_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrProphylacticActionMTX_tlbAggrMatrixVersionHeader__idfVersion];

ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtDiagnosis__idfsDiagnosis_R_1615];

ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtProphilacticAction__idfsProphilacticAction_R_1614];

ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtSpeciesType__idfsSpeciesType_R_1119];

ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrSanitaryActionMTX_tlbAggrMatrixVersionHeader__idfVersion];

ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrSanitaryActionMTX_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrSanitaryActionMTX_trtSanitaryAction__idfsSanitaryAction];

ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrVetCaseMTX_tlbAggrMatrixVersionHeader__idfVersion];

ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrVetCaseMTX_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrVetCaseMTX_trtDiagnosis__idfsDiagnosis_R_1617];

ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrVetCaseMTX_trtSpeciesType__idfsSpeciesType_R_1122];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_tlbObservation__idfObservation_R_1481];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_tlbSpecies__idfSpecies_R_1478];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalAge_R_1236];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalCondition_R_1280];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalGender_R_1237];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsYNClinicalSigns_R_1409];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAntimicrobialTherapy] WITH CHECK CHECK CONSTRAINT [FK_tlbAntimicrobialTherapy_tlbHumanCase__idfHumanCase_R_1422];

ALTER TABLE [dbo].[tlbAntimicrobialTherapy] WITH CHECK CHECK CONSTRAINT [FK_tlbAntimicrobialTherapy_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbHuman__idfHuman];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbOffice__idfHospital];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbPerson__idfEnteredBy];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsBasicSyndromicSurveillanceType];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsMethodOfMeasurement];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsOutcome];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsTestResult];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNAdministratedAntiviralMedication];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNCough];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNFever];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasHospitalized];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasInER];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPostpartumPeriod];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPregnant];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNSeasonalFluVaccine];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNShortnessOfBreath];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNTreatment];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbOffice__idfHospital];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_tlbPerson__idfEnteredBy];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbObservation__idfObservation_R_1541];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfPerformedByOffice_R_1539];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfResultEnteredByOffice];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfValidatedByOffice_R_1542];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfPerformedByPerson_R_1540];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfResultEnteredByPerson];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfValidatedByPerson_R_1543];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_trtBaseReference__idfsBatchStatus_R_1544];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_trtBaseReference__idfsTestName];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tstSite__idfsSite_R_1653];

ALTER TABLE [dbo].[tlbCampaign] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaign_trtBaseRef_CampaignCategory];

ALTER TABLE [dbo].[tlbCampaign] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaign_trtBaseReference__idfsCampaignType_R_1736];

ALTER TABLE [dbo].[tlbCampaign] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaign_trtBaseReference_idfsCampaignStatus];

ALTER TABLE [dbo].[tlbCampaign] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaign_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbCampaign] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaign_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaignToDiagnosis_tlbCampaign__idfCampaign_R_1738];

ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaignToDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaignToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1739];

ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaignToDiagnosis_trtSampleType__idfsSampleType];

ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaignToDiagnosis_trtSpeciesType__idfsSpeciesType];

ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbChangeDiagnosisHistory_tlbHumanCase__idfHumanCase_R_1797];

ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbChangeDiagnosisHistory_tlbPerson__idfPerson];

ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtBaseReference_idfsChangeDiagnosisReason];

ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsCurrentDiagnosis_R_1799];

ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsPreviousDiagnosis_R_1798];

ALTER TABLE [dbo].[tlbContactedCasePerson] WITH CHECK CHECK CONSTRAINT [FK_tlbContactedCasePerson_tlbHuman__idfHuman_R_1460];

ALTER TABLE [dbo].[tlbContactedCasePerson] WITH CHECK CHECK CONSTRAINT [FK_tlbContactedCasePerson_tlbHumanCase__idfHumanCase_R_1461];

ALTER TABLE [dbo].[tlbContactedCasePerson] WITH CHECK CHECK CONSTRAINT [FK_tlbContactedCasePerson_trtBaseReference__idfsPersonContactType_R_1462];

ALTER TABLE [dbo].[tlbContactedCasePerson] WITH CHECK CHECK CONSTRAINT [FK_tlbContactedCasePerson_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbDepartment] WITH CHECK CHECK CONSTRAINT [FK_tlbDepartment_tlbOffice__idfOrganization];

ALTER TABLE [dbo].[tlbDepartment] WITH CHECK CHECK CONSTRAINT [FK_tlbDepartment_trtBaseReference__idfsDepartmentName];

ALTER TABLE [dbo].[tlbDepartment] WITH CHECK CHECK CONSTRAINT [FK_tlbDepartment_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbEmployee] WITH CHECK CHECK CONSTRAINT [FK_Employee_Site];

ALTER TABLE [dbo].[tlbEmployee] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployee_trtBaseReference__idfsEmployeeType_R_1250];

ALTER TABLE [dbo].[tlbEmployee] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployee_trtBaseReference_idfsEmployeeCategory];

ALTER TABLE [dbo].[tlbEmployee] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployee_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbEmployeeGroup] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroup_tlbEmployee__idfEmployeeGroup_R_832];

ALTER TABLE [dbo].[tlbEmployeeGroup] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroup_trtBaseReference__idfsEmployeeGroupName_R_1014];

ALTER TABLE [dbo].[tlbEmployeeGroup] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbEmployeeGroup] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroup_tstSite__idfsSite_R_1018];

ALTER TABLE [dbo].[tlbEmployeeGroupMember] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroupMember_tlbEmployee__idfEmployee_R_1668];

ALTER TABLE [dbo].[tlbEmployeeGroupMember] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroupMember_tlbEmployeeGroup__idfEmployeeGroup_R_1465];

ALTER TABLE [dbo].[tlbEmployeeGroupMember] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroupMember_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_tlbFarmActual];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_tlbGeoLocation__idfFarmAddress_R_1473];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_tlbHuman__idfHuman_R_1470];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_tlbMonitoringSession];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_tlbObservation__idfObservation_R_1471];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsAvianFarmType_R_1295];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsAvianProductionType_R_1294];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsFarmCategory_R_1288];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsGrazingPattern_R_1298];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsIntendedUse_R_1299];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsLivestockProductionType_R_1296];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsMovementPattern_R_1300];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsOwnershipStructure_R_1287];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_tlbGeoLocationShared__idfFarmAddress_R_1473];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_tlbHumanActual__idfHumanActual_R_1470];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsAvianFarmType_R_1295];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsAvianProductionType_R_1294];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsFarmCategory_R_1288];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsGrazingPattern_R_1298];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsIntendedUse_R_1299];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsLivestockProductionType_R_1296];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsMovementPattern_R_1300];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsOwnershipStructure_R_1287];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbFreezer] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezer_trtBaseReference__idfsStorageType_R_1256];

ALTER TABLE [dbo].[tlbFreezer] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezer_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbFreezer] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezer_tstSite__idfsSite_R_236];

ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH CHECK CHECK CONSTRAINT [FK_FreezerSubdivision_BaseRef_BoxSizeID];

ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezerSubdivision_tlbFreezer__idfFreezer_R_902];

ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezerSubdivision_tlbFreezerSubdivision__idfParentSubdivision_R_904];

ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezerSubdivision_trtBaseReference__idfsSubdivisionType_R_1257];

ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezerSubdivision_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezerSubdivision_tstSite__idfsSite_R_908];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_gisCountry__idfsCountry_R_972];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_gisRayon__idfsRayon_R_974];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_gisRegion__idfsRegion_R_973];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_gisSettlement__idfsSettlement_R_1218];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsGeoLocationType_R_1238];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsGroundType_R_1239];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsResidentType_R_1277];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_tstSite__idfsSite_R_1028];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_gisCountry__idfsCountry_R_972];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_gisRayon__idfsRayon_R_974];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_gisRegion__idfsRegion_R_973];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_gisSettlement__idfsSettlement_R_1218];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsGeoLocationType_R_1238];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsGroundType_R_1239];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsResidentType_R_1277];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_tstSite__idfsSite_R_1028];

ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationSharedTranslation_tlbGeoLocationShared__idfGeoLocationShared];

ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationSharedTranslation_trtBaseReference__idfsLanguage];

ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationSharedTranslation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbGeoLocationTranslation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationTranslation_tlbGeoLocation__idfGeoLocation];

ALTER TABLE [dbo].[tlbGeoLocationTranslation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationTranslation_trtBaseReference__idfsLanguage];

ALTER TABLE [dbo].[tlbGeoLocationTranslation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationTranslation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbGridDefinition] WITH CHECK CHECK CONSTRAINT [FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbGridDefinition] WITH CHECK CHECK CONSTRAINT [FK_tlbGridDefinition_tstSite_idfsSite];

ALTER TABLE [dbo].[tlbGridDefinition] WITH CHECK CHECK CONSTRAINT [FK_tlbGridDefinition_tstUserTable_idfUserID];

ALTER TABLE [dbo].[tlbHerd] WITH CHECK CHECK CONSTRAINT [FK_tlbHerd_tlbFarm__idfFarm_R_1480];

ALTER TABLE [dbo].[tlbHerd] WITH CHECK CHECK CONSTRAINT [FK_tlbHerd_tlbHerdActual];

ALTER TABLE [dbo].[tlbHerd] WITH CHECK CHECK CONSTRAINT [FK_tlbHerd_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbHerdActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHerdActual_tlbFarmActual__idfFarmActual_R_1480];

ALTER TABLE [dbo].[tlbHerdActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHerdActual_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfCurrentResidenceAddress_R_1424];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfEmployerAddress_R_1425];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfRegistrationAddress_R_1426];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_tlbHumanActual];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_tlbMonitoringSession_MontoringSessionID];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsHumanGender_R_1232];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsNationality_R_1278];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsOccupationType_R_1233];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_trtBaseReference_idfsPersonIDType];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfCurrentResidenceAddress_R_1424];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfEmployerAddress_R_1425];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfRegistrationAddress_R_1426];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsHumanGender_R_1232];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsNationality_R_1278];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsOccupationType_R_1233];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_trtBaseReference_idfsPersonIDType];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_HumanCase_BaseRef_ExposureLocationKnown];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_HumanCase_BaseRef_PreviouslySoughtCare];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_HumanCase_BaseRef_SpecificVaccinationAdministered];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumaCase_BaseRef_DiseaseReportTypeID];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbGeoLocation__idfPointGeoLocation_R_1421];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbHuman];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbHumanCase__idfDeduplicationResultCase_R_1444];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbMonitoringSession_ParentMonitoringSession];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbObservation__idfCSObservation_R_1416];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbObservation__idfEpiObservation_R_1415];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfHospital];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfInvestigatedByOffice_R_1420];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfReceivedByOffice_R_1419];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfSentByOffice_R_1418];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbOffice_idfSoughtCareFacility];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbOutbreak__idfOutbreak];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfInvestigatedByPerson];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfReceivedByPerson];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfSentByPerson];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbPerson_idfPersonEnteredBy];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsCaseProgressStatus];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsFinalCaseStatus_R_1676];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsFinalState_R_1292];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsHospitalizationStatus_R_1269];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsHumanAgeType_R_1247];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsInitialCaseStatus_R_1439];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsOutcome_R_1414];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNAntimicrobialTherapy_R_1409];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNHospitalization_R_1410];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNRelatedToOutbreak_R_1413];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNSpecimenCollected_R_1411];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNTestsConducted];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference_idfsNonNotifiableDiagnosis];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference_idfsNotCollectedReason];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtDiagnosis__idfsFinalDiagnosis_R_1427];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtDiagnosis__idfsTentativeDiagnosis_R_1428];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbAnimal];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbDepartment_idfInDepartment];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbFreezerSubdivision];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbHuman];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbHumanCase];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbMaterial__idfParentMaterial_R_1222];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbMaterial__idfRootMaterial];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbMonitoringSession];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbOffice__idfFieldCollectedByOffice_R_1530];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbOffice__idfSendToOffice];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbPerson];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbPerson__idfAccesionByPerson];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbPerson__idfFieldCollectedByPerson_R_1529];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbPerson__idfMarkedForDispositionByPerson];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbSpecies];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbTesting__idfMainTest];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbVector_idfVector];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbVectorSurveillanceSession_idfVectorSurveillanceSession];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbVetCase];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference__idfsAccessionCondition];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_DiseaseID];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsBirdStatus];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsDestructionMethod];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsSampleKind];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsSampleStatus];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_PreviousSampleStatusID];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtSampleType__idfsSampleType];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tstSite__idfsCurrentSite];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tstSite__idfsSite_R_1066];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_gisCountry__idfsCountry_R_1741];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_gisRayon__idfsRayon_R_1743];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_gisRegion__idfsRegion_R_1742];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_gisSettlement__idfsSettlement_R_1744];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_tlbCampaign__idfCampaign_R_1748];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_tlbPerson__idfPersonEnteredBy_R_1745];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_trtBaseRef_SessionCategoryID];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_trtBaseReference__idfsMonitoringSessionStatus_R_1740];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_tstSite__idfsSite_R_1746];

ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionAction_tlbMonitoringSession__idfMonitoringSession_R_1833];

ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionAction_tlbPerson__idfPersonEnteredBy_R_1836];

ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionStatus_R_1835];

ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionType_R_1834];

ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbFarm__idfFarm];

ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbMonitoringSession__idfMonitoringSession];

ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbSpecies__idfSpecies];

ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummary_trtBaseReference__idfsAnimalSex];

ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummary_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_tlbMonitoringSessionSummary__idfMonitoringSessionSummary];

ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummarySample_tlbMonitoringSessionSummary__idfMonitoringSessionSummary];

ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummarySample_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummarySample_trtSampleType__idfsSampleType];

ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_tlbMonitoringSession__idfMonitoringSession_R_1750];

ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1757];

ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtSampleType__idfsSampleType];

ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtSpeciesType__idfsSpeciesType];

ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToMaterial_tlbMaterial];

ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseRef_idfsSampleType];

ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference];

ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbObservation] WITH CHECK CHECK CONSTRAINT [FK_tlbObservation_ffFormTemplate__idfsFormTemplate_R_1405];

ALTER TABLE [dbo].[tlbObservation] WITH CHECK CHECK CONSTRAINT [FK_tlbObservation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbObservation] WITH CHECK CHECK CONSTRAINT [FK_tlbObservation_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_BaseRef_];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_tlbGeoLocationShared];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_trtBaseReference__idfsOfficeAbbreviation_R_704];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_trtBaseReference__idfsOfficeName_R_703];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_trtBaseReference_LegalFormID];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_trtBaseReference_MainFormOfActivityID];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_trtBaseReference_OwnershipFormID];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_tstSite__idfsSite_R_1030];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreak_BaseRef_OutbreakTypeID];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreak_tlbGeoLocation__idfGeoLocation_R_1469];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreak_trtBaseReference__idfsDiagnosisOrDiagnosisGroup];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreak_trtBaseReference__idfsOutbreakStatus_R_1262];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreak_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreak_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbHumanCase__idfHumanCase];

ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByOffice];

ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByPerson];

ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfObservation];

ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbVetCase__idfVetCase];

ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakCaseMonitoring_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbOutbreakNote] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakNote_BaseRef_UpdatePriorityID];

ALTER TABLE [dbo].[tlbOutbreakNote] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakNote_tlbOutbreak__idfOutbreak];

ALTER TABLE [dbo].[tlbOutbreakNote] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakNote_tlbPerson__idfPerson];

ALTER TABLE [dbo].[tlbOutbreakNote] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakNote_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_tlbMaterial__idfMaterial_R_1664];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_tlbOffice_idfTestedByOffice];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_tlbPerson_idfTestedByPerson];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestCategory];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestName];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestResult_R_1573];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_trtDiagnosis_idfsDiagnosis];

ALTER TABLE [dbo].[tlbPerson] WITH CHECK CHECK CONSTRAINT [FK_tlbPerson_tlbDepartment__idfDepartment];

ALTER TABLE [dbo].[tlbPerson] WITH CHECK CHECK CONSTRAINT [FK_tlbPerson_tlbEmployee__idfPerson_R_1498];

ALTER TABLE [dbo].[tlbPerson] WITH CHECK CHECK CONSTRAINT [FK_tlbPerson_tlbOffice__idfInstitution_R_1509];

ALTER TABLE [dbo].[tlbPerson] WITH CHECK CHECK CONSTRAINT [FK_tlbPerson_trtBaseReference__idfsStaffPosition_R_1511];

ALTER TABLE [dbo].[tlbPerson] WITH CHECK CHECK CONSTRAINT [FK_tlbPerson_trtBaseReference_PersonalIDTypeID];

ALTER TABLE [dbo].[tlbPerson] WITH CHECK CHECK CONSTRAINT [FK_tlbPerson_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbPostalCode] WITH CHECK CHECK CONSTRAINT [FK_tlbPostalCode_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tlbPostalCode] WITH CHECK CHECK CONSTRAINT [FK_tlbPostalCode_gisSettlement__idfsSettlement_R_17];

ALTER TABLE [dbo].[tlbPostalCode] WITH CHECK CHECK CONSTRAINT [FK_tlbPostalCode_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbReportForm] WITH CHECK CHECK CONSTRAINT [FK_tlbReportForm_idfsReportFormType];

ALTER TABLE [dbo].[tlbReportForm] WITH CHECK CHECK CONSTRAINT [FK_tlbReportForm_tlbOffice__idfEnteredByOffice];

ALTER TABLE [dbo].[tlbReportForm] WITH CHECK CHECK CONSTRAINT [FK_tlbReportForm_tlbOffice__idfSentByOffice];

ALTER TABLE [dbo].[tlbReportForm] WITH CHECK CHECK CONSTRAINT [FK_tlbReportForm_tlbPerson__idfEnteredByPerson];

ALTER TABLE [dbo].[tlbReportForm] WITH CHECK CHECK CONSTRAINT [FK_tlbReportForm_tlbPerson__idfSentByPerson];

ALTER TABLE [dbo].[tlbReportForm] WITH CHECK CHECK CONSTRAINT [FK_tlbReportForm_tstSite_idfsSite];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_OutbreakCaseStatus];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_tlbHerd__idfHerd_R_1479];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_tlbObservation__idfObservation_R_1474];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_tlbSpeciesActual];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_trtSpeciesType__idfsSpeciesType_R_1651];

ALTER TABLE [dbo].[tlbSpeciesActual] WITH CHECK CHECK CONSTRAINT [FK_tlbSpeciesActual_tlbHerdActual__idfHerdActual_R_1479];

ALTER TABLE [dbo].[tlbSpeciesActual] WITH CHECK CHECK CONSTRAINT [FK_tlbSpeciesActual_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbSpeciesActual] WITH CHECK CHECK CONSTRAINT [FK_tlbSpeciesActual_trtSpeciesType__idfsSpeciesType_R_1651];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_gisBaseReference__idfsArea_R_1641];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsMainBaseReference_R_923];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsStatisticAreaType_R_1273];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsStatisticPeriodType_R_1272];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_trtBaseReference_idfsStatisticalAgeGroup];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_trtStatisticDataType__idfsStatisticDataType_R_921];

ALTER TABLE [dbo].[tlbStreet] WITH CHECK CHECK CONSTRAINT [FK_tlbStreet_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tlbStreet] WITH CHECK CHECK CONSTRAINT [FK_tlbStreet_gisSettlement__idfsSettlement_R_16];

ALTER TABLE [dbo].[tlbStreet] WITH CHECK CHECK CONSTRAINT [FK_tlbStreet_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbTestAmendmentHistory_tlbOffice__idfAmendByOffice];

ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbTestAmendmentHistory_tlbPerson__idfAmendByPerson];

ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbTestAmendmentHistory_tlbTesting__idfTesting];

ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference__idfsNewTestResult];

ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference__idfsOldTestResult];

ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbBatchTest__idfBatchTest_R_1534];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbHumanCase];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbMaterial];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbMonitoringSession];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbOffice__idfPerformedByOffice];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbOffice__idfResultEnteredByOffice];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbOffice__idfTestedByOffice];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbOffice__idfValidatedByOffice];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbPerson__idfResultEnteredByPerson];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbPerson__idfTestedByPerson];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbPerson__idfValidatedByPerson];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbVector];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbVetCase];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestCategory];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestName];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestResult_R_1243];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestStatus_R_1754];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtBaseReference_PreviousTestStatusID];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtDiagnosis];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_tlbOffice__idfInterpretedByOffice_R_1550];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_tlbOffice__idfValidatedByOffice_R_1548];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_tlbPerson__idfInterpretedByPerson_R_1551];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_tlbPerson__idfValidatedByPerson_R_1549];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_tlbTesting__idfTesting_R_1546];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_trtBaseReference__idfsInterpretedStatus_R_1552];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_trtDiagnosis__idfsDiagnosis_R_1547];

ALTER TABLE [dbo].[tlbTransferOUT] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOUT_tlbOffice__idfSendFromOffice_R_1516];

ALTER TABLE [dbo].[tlbTransferOUT] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOUT_tlbOffice__idfSendToOffice_R_1517];

ALTER TABLE [dbo].[tlbTransferOUT] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOUT_tlbPerson__idfSendByPerson_R_1518];

ALTER TABLE [dbo].[tlbTransferOUT] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOUT_trtBaseReference__idfsTransferStatus_R_1671];

ALTER TABLE [dbo].[tlbTransferOUT] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOUT_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbTransferOUT] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOUT_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbTransferOutMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOutMaterial_tlbMaterial];

ALTER TABLE [dbo].[tlbTransferOutMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOutMaterial_tlbTransferOUT];

ALTER TABLE [dbo].[tlbTransferOutMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOutMaterial_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVaccination] WITH CHECK CHECK CONSTRAINT [FK_tlbVaccination_tlbSpecies__idfSpecies_R_1654];

ALTER TABLE [dbo].[tlbVaccination] WITH CHECK CHECK CONSTRAINT [FK_tlbVaccination_tlbVetCase__idfVetCase_R_1482];

ALTER TABLE [dbo].[tlbVaccination] WITH CHECK CHECK CONSTRAINT [FK_tlbVaccination_trtBaseReference__idfsVaccinationRoute_R_1302];

ALTER TABLE [dbo].[tlbVaccination] WITH CHECK CHECK CONSTRAINT [FK_tlbVaccination_trtBaseReference__idfsVaccinationType_R_1301];

ALTER TABLE [dbo].[tlbVaccination] WITH CHECK CHECK CONSTRAINT [FK_tlbVaccination_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVaccination] WITH CHECK CHECK CONSTRAINT [FK_tlbVaccination_trtDiagnosis__idfsDiagnosis_R_983];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbGeoLocation_idfLocation];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbObservation_idfObservation];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbOffice_idfCollectedByOffice];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbOffice_idfIdentifiedByOffice];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbPerson_idfCollectedByPerson];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbPerson_idfIdentifiedByPerson];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbVector_idfHostVector];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbVectorSurveillanceSession_idfVectorSurveillanceSession];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference__idfsEctoparasitesCollected];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_idfsBasisOfREcord];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_idfsCollectionMethod];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_idfsDayPeriod];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_idfsIdentificationMethod];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_idfsSex];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_idfsSurrounding];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtVectorSubType_idfsVectorSubType];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtVectorType_idfsVectorType];

ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSession_tlbGeoLocation_idfLocation];

ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSession_tlbOutbreak_idfOutbreak];

ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSession_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSession_trtBaseReference_VectorSurveillanceStatus];

ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSession_tstSite_idfsSite];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_tlbGeoLocation__idfGeoLocation];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_tlbVectorSurveillanceSession__idfVectorSurveillanceSession];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_trtVectorSubType__idfsVectorSubType];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_tlbVectorSurveillanceSessionSummary__idfsVSSessionSummary];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbFarm];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbMonitoringSession__idfParentMonitoringSession];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbObservation__idfObservation_R_1447];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbOffice__idfInvestigatedByOffice];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbOffice__idfReportedByOffice];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbOffice_idfReceivedByOffice];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbOutbreak__idfOutbreak];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonEnteredBy_R_1507];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonInvestigatedBy_R_1506];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonReportedBy_R_1508];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbPerson_idfReceivedByPerson];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseClassification];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseProgressStatus];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseReportType];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseType];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsYNTestsConducted];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsFinalDiagnosis_R_1438];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsShowDiagnosis];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis_R_1435];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis1_R_1436];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis2_R_1437];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tstSite__idfsSite_R_1588];

ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_tlbVetCase_idfVetCase];

ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_idfsLanguage];

ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVetCaseLog] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseLog_tlbPerson__idfPerson_R_1501];

ALTER TABLE [dbo].[tlbVetCaseLog] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseLog_tlbVetCase__idfVetCase_R_1489];

ALTER TABLE [dbo].[tlbVetCaseLog] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseLog_trtBaseReference__idfsCaseLogStatus_R_1490];

ALTER TABLE [dbo].[tlbVetCaseLog] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseLog_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbxSiteDocumentMap] WITH CHECK CHECK CONSTRAINT [FK_tlbxSiteDocumentMap_LkupEIDSSMenu];

ALTER TABLE [dbo].[trtAttributeType] WITH CHECK CHECK CONSTRAINT [FK_trtAttributeType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtBaseReference] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtBaseReference] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReference_trtReferenceType__idfsReferenceType_R_381];

ALTER TABLE [dbo].[trtBaseReferenceAttribute] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceAttribute_trtAttributeType__idfAttributeType];

ALTER TABLE [dbo].[trtBaseReferenceAttribute] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceAttribute_trtBaseReference__idfsBaseReference];

ALTER TABLE [dbo].[trtBaseReferenceAttribute] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceAttribute_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceAttributeToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceAttributeToCP_trtBaseReferenceAttribute__idfsBaseReference];

ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceAttributeToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtBaseReferenceToCP] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceToCP_trtBaseReference__idfsBaseReference];

ALTER TABLE [dbo].[trtBaseReferenceToCP] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtBaseReferenceToCP] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtBssAggregateColumns] WITH CHECK CHECK CONSTRAINT [FK_trtBssAggregateColumns_tauColumn__idfColumn];

ALTER TABLE [dbo].[trtBssAggregateColumns] WITH CHECK CHECK CONSTRAINT [FK_trtBssAggregateColumns_trtBaseReference__idfsBssAggregateColumn];

ALTER TABLE [dbo].[trtBssAggregateColumns] WITH CHECK CHECK CONSTRAINT [FK_trtBssAggregateColumns_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtCaseClassification] WITH CHECK CHECK CONSTRAINT [FK_trtCaseClassification_trtBaseReference__idfsCaseClassification];

ALTER TABLE [dbo].[trtCaseClassification] WITH CHECK CHECK CONSTRAINT [FK_trtCaseClassification_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtCollectionMethodForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtCollectionMethodForVectorType_trtBaseReference_idfsCollectionMethod];

ALTER TABLE [dbo].[trtCollectionMethodForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtCollectionMethodForVectorType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtCollectionMethodForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtCollectionMethodForVectorType_trtVectorType_idfsVectorType];

ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_trtCollectionMethodForVectorType_idfCollectionMethodForVectorType];

ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtDerivativeForSampleType] WITH CHECK CHECK CONSTRAINT [FK_trtDerivativeForSampleType_trtBaseReference__idfsDerivativeType_R_1863];

ALTER TABLE [dbo].[trtDerivativeForSampleType] WITH CHECK CHECK CONSTRAINT [FK_trtDerivativeForSampleType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDerivativeForSampleType] WITH CHECK CHECK CONSTRAINT [FK_trtDerivativeForSampleType_trtSampleType__idfsSampleType_R_1862];

ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_trtDerivativeForSampleType__idfDerivativeForSampleType];

ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosis_trtBaseReference__idfsDiagnosis_R_624];

ALTER TABLE [dbo].[trtDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosis_trtBaseReference__idfsUsingType_R_1600];

ALTER TABLE [dbo].[trtDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisAgeGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_idfsAgeType];

ALTER TABLE [dbo].[trtDiagnosisAgeGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_idfsDiagnosisAgeGroup];

ALTER TABLE [dbo].[trtDiagnosisAgeGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosis_idfsDiagnosis];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstPersonalDataGroup_idfDiagnosisAgeGroupToDiagnosis];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_idfsStatisticalAgeGroup];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtDiagnosisAgeGroupToStatisticalAgeGroup];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtBaseReference__idfsDiagnosisGroup];

ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_trtDiagnosisToDiagnosisGroup_idfDiagnosisToDiagnosisGroup];

ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtBaseReference__idfsCustomReportType_R_1871];

ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtDiagnosis__idfsDiagnosis_R_1873];

ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtReportDiagnosisGroup__idfsReportDiagnosisGroup];

ALTER TABLE [dbo].[trtEventType] WITH CHECK CHECK CONSTRAINT [FK_trtEventType_trtBaseReference__idfsEventSubscription];

ALTER TABLE [dbo].[trtEventType] WITH CHECK CHECK CONSTRAINT [FK_trtEventType_trtBaseReference__idfsEventTypeID_R_663];

ALTER TABLE [dbo].[trtEventType] WITH CHECK CHECK CONSTRAINT [FK_trtEventType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtFFObjectForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtFFObjectForCustomReport_trtBaseReference];

ALTER TABLE [dbo].[trtFFObjectForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtFFObjectForCustomReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtFFObjectToDiagnosisForCustomReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtFFObjectToDiagnosisForCustomReport_trtDiagnosis];

ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtFFParameterToDiagnosisForCustomReport_trtFFParameterForCustomReport];

ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] WITH CHECK CHECK CONSTRAINT [FK_trtGISBaseReferenceAttribute_gisBaseReference__idfsGISBaseReference];

ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] WITH CHECK CHECK CONSTRAINT [FK_trtGISBaseReferenceAttribute_trtAttributeType__idfAttributeType];

ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] WITH CHECK CHECK CONSTRAINT [FK_trtGISBaseReferenceAttribute_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtGISObjectForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtGISObjectForCustomReport_gisBaseReference__idfsGISBaseReference];

ALTER TABLE [dbo].[trtGISObjectForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtGISObjectForCustomReport_trtBaseReference__idfsCustomReportType];

ALTER TABLE [dbo].[trtGISObjectForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtGISObjectForCustomReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtHACodeList] WITH CHECK CHECK CONSTRAINT [FK_trtHACodeList_trtBaseReference__idfsCodeName_R_674];

ALTER TABLE [dbo].[trtHACodeList] WITH CHECK CHECK CONSTRAINT [FK_trtHACodeList_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtLanguageToCP] WITH CHECK CHECK CONSTRAINT [FK_trtLanguageToCP_trtBaseReference__idfsLanguage_idfsBaseReference];

ALTER TABLE [dbo].[trtLanguageToCP] WITH CHECK CHECK CONSTRAINT [FK_trtLanguageToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtLanguageToCP] WITH CHECK CHECK CONSTRAINT [FK_trtLanguageToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtMaterialForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtMaterialForDisease_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtMaterialForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtMaterialForDisease_trtDiagnosis__idfsDiagnosis_R_891];

ALTER TABLE [dbo].[trtMaterialForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtMaterialForDisease_trtSampleType__idfsSampleType];

ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtMaterialForDiseaseToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtMaterialForDiseaseToCP_trtMaterialForDisease__idfMaterialForDisease_R_1876];

ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtMaterialForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtMatrixColumn] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsEditor];

ALTER TABLE [dbo].[trtMatrixColumn] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsMatrixColumn];

ALTER TABLE [dbo].[trtMatrixColumn] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsParameterType];

ALTER TABLE [dbo].[trtMatrixColumn] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixColumn_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtMatrixColumn] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixColumn_trtMatrixType__idfsMatrixType];

ALTER TABLE [dbo].[trtMatrixType] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixType_trtBaseReference__idfsFormType];

ALTER TABLE [dbo].[trtMatrixType] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixType_trtBaseReference__idfsMatrixType];

ALTER TABLE [dbo].[trtMatrixType] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectOperation_R_1620];

ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectType_R_1619];

ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsParentObjectType_R_1621];

ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsRelatedObjectType_R_1622];

ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsStatus_R_1623];

ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestForDisease_trtBaseReference__idfsPensideTestName];

ALTER TABLE [dbo].[trtPensideTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestForDisease_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestForDisease_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestForDiseaseToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestForDiseaseToCP_trtPensideTestForDisease__idfPensideTestForDisease];

ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtBaseReference_idfsPensideTestName];

ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtVectorType_idfsVectorType];

ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_trtPensideTestTypeForVectorType_idfPensideTestTypeForVectorType];

ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestName];

ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestResult_R_1663];

ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_trtPensideTestTypeToTestResult__idfsPensideTestName_idfsPensideTestResult];

ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtProphilacticAction] WITH CHECK CHECK CONSTRAINT [FK_trtProphilacticAction_trtBaseReference__idfsProphilacticAction_R_1109];

ALTER TABLE [dbo].[trtProphilacticAction] WITH CHECK CHECK CONSTRAINT [FK_trtProphilacticAction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtReferenceType] WITH CHECK CHECK CONSTRAINT [FK_trtReferenceType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtReportDiagnosisGroup] WITH CHECK CHECK CONSTRAINT [FK_trtReportDiagnosisGroup_trtBaseReference__idfsReportDiagnosisGroup];

ALTER TABLE [dbo].[trtReportDiagnosisGroup] WITH CHECK CHECK CONSTRAINT [FK_trtReportDiagnosisGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtReportRows] WITH CHECK CHECK CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsCustomReportType_R_1867];

ALTER TABLE [dbo].[trtReportRows] WITH CHECK CHECK CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsDiagnosisOrReportDiagnosisGroup];

ALTER TABLE [dbo].[trtReportRows] WITH CHECK CHECK CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsICDReportAdditionalText];

ALTER TABLE [dbo].[trtReportRows] WITH CHECK CHECK CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsReportAdditionalText_R_1895];

ALTER TABLE [dbo].[trtReportRows] WITH CHECK CHECK CONSTRAINT [FK_trtReportRows_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtResource] WITH CHECK CHECK CONSTRAINT [FK_trtResource_idfsResourceType];

ALTER TABLE [dbo].[trtResource] WITH CHECK CHECK CONSTRAINT [FK_trtResource_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSet] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSet_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetHierarchy] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetHierarchy_idfsResourceSet];

ALTER TABLE [dbo].[trtResourceSetHierarchy] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetHierarchy_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetToResource] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetToResource_idfsResourceSet];

ALTER TABLE [dbo].[trtResourceSetToResource] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetToResource_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetToResource] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetToResource_trtResource];

ALTER TABLE [dbo].[trtResourceSetTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetTranslation__idfsLanguage];

ALTER TABLE [dbo].[trtResourceSetTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetTranslation_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetTranslation_trtResourceSet];

ALTER TABLE [dbo].[trtResourceTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceTranslation_idfsLanguage];

ALTER TABLE [dbo].[trtResourceTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceTranslation_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceTranslation_trtResource];

ALTER TABLE [dbo].[trtSampleType] WITH CHECK CHECK CONSTRAINT [FK_trtSampleType_trtBaseReference__idfsSampleType_R_1866];

ALTER TABLE [dbo].[trtSampleType] WITH CHECK CHECK CONSTRAINT [FK_trtSampleType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSampleTypeForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtSampleTypeForVectorType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSampleTypeForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtSampleTypeForVectorType_trtSampleType_idfsSampleType];

ALTER TABLE [dbo].[trtSampleTypeForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtSampleTypeForVectorType_trtVectorType_idfsVectorType];

ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_trtSampleTypeForVectorType_idfSampleTypeForVectorType];

ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtSanitaryAction] WITH CHECK CHECK CONSTRAINT [FK_trtSanitaryAction_trtBaseReference__idfsSanitaryAction_R_1110];

ALTER TABLE [dbo].[trtSanitaryAction] WITH CHECK CHECK CONSTRAINT [FK_trtSanitaryAction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsCustomReportType];

ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsReportAdditionalText];

ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsSpeciesOrSpeciesGroup];

ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesGroup] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesGroup_trtBaseReference_idfsSpeciesGroup];

ALTER TABLE [dbo].[trtSpeciesGroup] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtBaseReference_idfsCustomReportType];

ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtSpeciesGroup_idfsSpeciesGroup];

ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtSpeciesType_idfsSpeciesType];

ALTER TABLE [dbo].[trtSpeciesType] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesType_trtBaseReference__idfsSpeciesType_R_1650];

ALTER TABLE [dbo].[trtSpeciesType] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtBaseReference__idfsAnimalAge_R_1599];

ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtSpeciesType__idfsSpeciesType_R_1598];

ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_trtSpeciesTypeToAnimalAge__idfSpeciesTypeToAnimalAge_R_1882];

ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtStatisticDataType] WITH CHECK CHECK CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticAreaType_R_1591];

ALTER TABLE [dbo].[trtStatisticDataType] WITH CHECK CHECK CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticDataType_R_496];

ALTER TABLE [dbo].[trtStatisticDataType] WITH CHECK CHECK CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticPeriodType_R_1592];

ALTER TABLE [dbo].[trtStatisticDataType] WITH CHECK CHECK CONSTRAINT [FK_trtStatisticDataType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtStatisticDataType] WITH CHECK CHECK CONSTRAINT [FK_trtStatisticDataType_trtReferenceType__idfsReferenceType_R_933];

ALTER TABLE [dbo].[trtStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtStringNameTranslation_trtBaseReference__idfsBaseReference_R_385];

ALTER TABLE [dbo].[trtStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtStringNameTranslation_trtBaseReference__idfsLanguage_R_1584];

ALTER TABLE [dbo].[trtStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtStringNameTranslation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtStringNameTranslationToCP] WITH CHECK CHECK CONSTRAINT [FK_trtStringNameTranslationToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtStringNameTranslationToCP] WITH CHECK CHECK CONSTRAINT [FK_trtStringNameTranslationToCP_trtStringNameTranslation__idfsBaseReference_idfsLanguage];

ALTER TABLE [dbo].[trtStringNameTranslationToCP] WITH CHECK CHECK CONSTRAINT [FK_trtStringNameTranslationToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_trtSystemFunction_trtBaseReference__idfsObjectType_R_1581];

ALTER TABLE [dbo].[trtSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_trtSystemFunction_trtBaseReference__idfsSystemFunction_R_1038];

ALTER TABLE [dbo].[trtSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_trtSystemFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSystemFunctionOperation] WITH CHECK CHECK CONSTRAINT [FK_trtSystemFunctionOperation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDisease_trtBaseReference__idfsTestCategory];

ALTER TABLE [dbo].[trtTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDisease_trtBaseReference__idfsTestName];

ALTER TABLE [dbo].[trtTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDisease_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDisease_trtDiagnosis__idfsDiagnosis_R_892];

ALTER TABLE [dbo].[trtTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDisease_trtSampleType__idfsSampleType];

ALTER TABLE [dbo].[trtTestForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDiseaseToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtTestForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDiseaseToCP_trtTestForDisease__idfTestForDisease_R_1884];

ALTER TABLE [dbo].[trtTestForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtTestTypeForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference__idfsCustomReportType];

ALTER TABLE [dbo].[trtTestTypeForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference__idfsTestName];

ALTER TABLE [dbo].[trtTestTypeForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtTestTypeToTestResult] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference__idfsTestName];

ALTER TABLE [dbo].[trtTestTypeToTestResult] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference__idfsTestResult_R_1596];

ALTER TABLE [dbo].[trtTestTypeToTestResult] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeToTestResultToCountry_trtTestTypeToTestResult__idfsTestName_idfsTestResult];

ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtVectorSubType] WITH CHECK CHECK CONSTRAINT [FK_trtVectorSubType_trtBaseReference_idfsVectorSubType];

ALTER TABLE [dbo].[trtVectorSubType] WITH CHECK CHECK CONSTRAINT [FK_trtVectorSubType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtVectorSubType] WITH CHECK CHECK CONSTRAINT [FK_trtVectorSubType_trtVectorType_idfsVectorType];

ALTER TABLE [dbo].[trtVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtVectorType_trtBaseReference__idfsVectorType];

ALTER TABLE [dbo].[trtVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtVectorType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_tstSite_idfsSite];

ALTER TABLE [dbo].[tstBarcodeLayout] WITH CHECK CHECK CONSTRAINT [FK_tstBarcodeLayout_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstBarcodeLayout] WITH CHECK CHECK CONSTRAINT [FK_tstBarcodeLayout_tstNextNumbers__idfsNumberName_R_1677];

ALTER TABLE [dbo].[tstCheckConstraints] WITH CHECK CHECK CONSTRAINT [FK_tstCheckConstraints_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstCheckConstraints] WITH CHECK CHECK CONSTRAINT [FK_tstCheckConstraints_tstCheckTables__idfCheckTable];

ALTER TABLE [dbo].[tstCheckTables] WITH CHECK CHECK CONSTRAINT [FK_tstCheckTables_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstCustomizationPackage] WITH CHECK CHECK CONSTRAINT [FK_tstCustomizationPackage_gisLocation_idfsCountry];

ALTER TABLE [dbo].[tstCustomizationPackage] WITH CHECK CHECK CONSTRAINT [FK_tstCustomizationPackage_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstCustomizationPackageSettings] WITH CHECK CHECK CONSTRAINT [FK_tstCustomizationPackageSettings_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_gisRayon__idfsRayon];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_gisRegion__idfsRegion];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_trtEventType__idfsEventTypeID_R_664];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_tstSite__idfsLoginSite];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_tstSite__idfsSite];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_gisRayon__idfsRayon];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_gisRegion__idfsRegion];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_trtEventType__idfsEventTypeID];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_tstSite__idfsLoginSite];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_tstSite__idfsSite];

ALTER TABLE [dbo].[tstEventClient] WITH CHECK CHECK CONSTRAINT [FK_tstEventClient_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstEventSubscription] WITH CHECK CHECK CONSTRAINT [FK_tstEventSubscription_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstEventSubscription] WITH CHECK CHECK CONSTRAINT [FK_tstEventSubscription_trtEventType__idfsEventTypeID_R_676];

ALTER TABLE [dbo].[tstGeoLocationFormat] WITH CHECK CHECK CONSTRAINT [FK_tstGeoLocationFormat_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tstGeoLocationFormat] WITH CHECK CHECK CONSTRAINT [FK_tstGeoLocationFormat_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstGlobalSiteOptions] WITH CHECK CHECK CONSTRAINT [FK_tstGlobalSiteOptions_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstGlobalSiteOptions] WITH CHECK CHECK CONSTRAINT [FK_tstGlobalSiteOptions_tstSite__idfsSite_R_1753];

ALTER TABLE [dbo].[tstInvalidObjects] WITH CHECK CHECK CONSTRAINT [FK_tstInvalidObjects_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstInvisibleFields] WITH CHECK CHECK CONSTRAINT [FK_tstInvisibleFields_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstInvisibleFieldsToCP] WITH CHECK CHECK CONSTRAINT [FK_tstInvisibleFieldsToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstInvisibleFieldsToCP] WITH CHECK CHECK CONSTRAINT [FK_tstInvisibleFieldsToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tstInvisibleFieldsToCP] WITH CHECK CHECK CONSTRAINT [FK_tstInvisibleFieldsToCP_tstInvisibleFields_idfInvisibleField];

ALTER TABLE [dbo].[tstLocalClient] WITH CHECK CHECK CONSTRAINT [FK_tstLocalClient_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstLocalConnectionContext] WITH CHECK CHECK CONSTRAINT [FK_tstLocalConnectionContext_tauDataAuditEvent__idfDataAuditEvent_R_1043];

ALTER TABLE [dbo].[tstLocalConnectionContext] WITH CHECK CHECK CONSTRAINT [FK_tstLocalConnectionContext_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstLocalConnectionContext] WITH CHECK CHECK CONSTRAINT [FK_tstLocalConnectionContext_tstEvent__idfEventID_R_1044];

ALTER TABLE [dbo].[tstLocalConnectionContext] WITH CHECK CHECK CONSTRAINT [FK_tstLocalConnectionContext_tstSite__idfsSite_R_1858];

ALTER TABLE [dbo].[tstLocalConnectionContext] WITH CHECK CHECK CONSTRAINT [FK_tstLocalConnectionContext_tstUserTable__idfUserID_R_1042];

ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH CHECK CHECK CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tlbMaterial__idfMaterial];

ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH CHECK CHECK CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tlbTesting__idfTesting];

ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH CHECK CHECK CONSTRAINT [FK_tstLocalSamplesTestsPreferences_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH CHECK CHECK CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tstUserTable__idfUserID];

ALTER TABLE [dbo].[tstLocalSiteOptions] WITH CHECK CHECK CONSTRAINT [FK_tstLocalSiteOptions_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstMandatoryFields] WITH CHECK CHECK CONSTRAINT [FK_tstMandatoryFields_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstMandatoryFieldsToCP] WITH CHECK CHECK CONSTRAINT [FK_tstMandatoryFieldsToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstMandatoryFieldsToCP] WITH CHECK CHECK CONSTRAINT [FK_tstMandatoryFieldsToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tstMandatoryFieldsToCP] WITH CHECK CHECK CONSTRAINT [FK_tstMandatoryFieldsToCP_tstMandatoryFields_idfMandatoryField];

ALTER TABLE [dbo].[tstNewID] WITH CHECK CHECK CONSTRAINT [FK_tstNewID_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstNextNumbers] WITH CHECK CHECK CONSTRAINT [FK_tstNextNumbers_trtBaseReference__idfsNumberName_R_930];

ALTER TABLE [dbo].[tstNextNumbers] WITH CHECK CHECK CONSTRAINT [FK_tstNextNumbers_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_trtBaseReference__idfsNotificationObjectType_R_1307];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_trtBaseReference__idfsNotificationType_R_1306];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_trtBaseReference__idfsTargetSiteType_R_1304];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_tstSite__idfsSite_R_1035];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_tstSite__idfsTargetSite_R_688];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_tstUserTable__idfTargetUserID_R_720];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_tstUserTable__idfUserID_R_793];

ALTER TABLE [dbo].[tstNotificationActivity] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationActivity_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsNotificationObjectType];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsNotificationType];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsTargetSiteType];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_tstSite__idfsSite];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_tstSite__idfsTargetSite];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_tstUserTable__idfTargetUserID];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_tstUserTable__idfUserID];

ALTER TABLE [dbo].[tstNotificationStatus] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationStatus_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstObjectAccess] WITH CHECK CHECK CONSTRAINT [FK_tstObjectAccess_tlbEmployee__idfActor_R_1618];

ALTER TABLE [dbo].[tstObjectAccess] WITH CHECK CHECK CONSTRAINT [FK_tstObjectAccess_trtBaseReference__idfsObjectOperation_R_1586];

ALTER TABLE [dbo].[tstObjectAccess] WITH CHECK CHECK CONSTRAINT [FK_tstObjectAccess_trtBaseReference__idfsObjectType_R_1580];

ALTER TABLE [dbo].[tstObjectAccess] WITH CHECK CHECK CONSTRAINT [FK_tstObjectAccess_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstObjectAccess] WITH CHECK CHECK CONSTRAINT [FK_tstObjectAccess_tstSite__idfsOnSite_R_951];

ALTER TABLE [dbo].[tstPersonalDataGroup] WITH CHECK CHECK CONSTRAINT [FK_tstPersonalDataGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstPersonalDataGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_tstPersonalDataGroupToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstPersonalDataGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_tstPersonalDataGroupToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tstPersonalDataGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_tstPersonalDataGroupToCP_tstPersonalDataGroup_idfPersonalDataGroup];

ALTER TABLE [dbo].[tstRayonToReportSite] WITH CHECK CHECK CONSTRAINT [FK_tstRayonToReportSite_gisRayon__idfsRayon];

ALTER TABLE [dbo].[tstRayonToReportSite] WITH CHECK CHECK CONSTRAINT [FK_tstRayonToReportSite_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstRayonToReportSite] WITH CHECK CHECK CONSTRAINT [FK_tstRayonToReportSite_tstSite__idfsSite];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_tauDataAuditEvent__idfDataAuditEvent_R_1731];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsAction_R_1727];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsProcessType_R_1729];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsResult_R_1728];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_tstSite];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_tstUserTable__idfUserID_R_1726];

ALTER TABLE [dbo].[tstSecurityConfiguration] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfiguration_trtBaseReference__idfsSecurityLevel_R_1759];

ALTER TABLE [dbo].[tstSecurityConfiguration] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfiguration_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstSecurityConfiguration] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfiguration_tstSecurityConfiguration__idfParentSecurityConfiguration_R_1761];

ALTER TABLE [dbo].[tstSecurityConfigurationAlphabet] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfigurationAlphabet_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfiguration__idfSecurityConfiguration_R_1763];

ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfigurationAlphabet__idfsSecurityConfigurationAlphabet_R_1762];

ALTER TABLE [dbo].[tstSite] WITH CHECK CHECK CONSTRAINT [FK_tstSite_tlbOffice__idfOffice_R_386];

ALTER TABLE [dbo].[tstSite] WITH CHECK CHECK CONSTRAINT [FK_tstSite_trtBaseReference__idfsSiteType_R_1305];

ALTER TABLE [dbo].[tstSite] WITH CHECK CHECK CONSTRAINT [FK_tstSite_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstSite] WITH CHECK CHECK CONSTRAINT [FK_tstSite_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tstSite] WITH CHECK CHECK CONSTRAINT [FK_tstSite_tstSite__idfsParentSite];

ALTER TABLE [dbo].[tstUserTable] WITH CHECK CHECK CONSTRAINT [FK_tstUserTable_tlbPerson_idfPerson];

ALTER TABLE [dbo].[tstUserTable] WITH CHECK CHECK CONSTRAINT [FK_tstUserTable_trtBaseReference_idfsBaseReference];

ALTER TABLE [dbo].[tstUserTable] WITH CHECK CHECK CONSTRAINT [FK_tstUserTable_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstUserTable] WITH CHECK CHECK CONSTRAINT [FK_tstUserTable_tstSite_idfsSite];

ALTER TABLE [dbo].[tstUserTableLocal] WITH CHECK CHECK CONSTRAINT [FK_tstUserTableLocal_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstUserTableLocal] WITH CHECK CHECK CONSTRAINT [FK_tstUserTableLocal_tstUserTable_idfUserID];

ALTER TABLE [dbo].[tstUserTableOldPassword] WITH CHECK CHECK CONSTRAINT [FK_tstUserTableOldPassword_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstUserTableOldPassword] WITH CHECK CHECK CONSTRAINT [FK_tstUserTableOldPassword_tstUserTable__idfUserID_R_1730];

ALTER TABLE [dbo].[tstUserTicket] WITH CHECK CHECK CONSTRAINT [FK_tstUserTicket_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstUserTicket] WITH CHECK CHECK CONSTRAINT [FK_tstUserTicket_tstUserTable__idfUserID];

ALTER TABLE [dbo].[tstVersionCompare] WITH CHECK CHECK CONSTRAINT [FK_tstVersionCompare_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[updRunningApps] WITH CHECK CHECK CONSTRAINT [FK_updRunningApps_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[updUpdateBlock] WITH CHECK CHECK CONSTRAINT [FK_updUpdateBlock_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[UserAccess] WITH CHECK CHECK CONSTRAINT [FK_UserAccess_BaseRef_AccessPermission];

ALTER TABLE [dbo].[UserAccess] WITH CHECK CHECK CONSTRAINT [FK_UserAccess_BaseRef_SysFunctionID];

ALTER TABLE [dbo].[UserAccess] WITH CHECK CHECK CONSTRAINT [FK_UserAccess_BaseReference_OperaionID];

ALTER TABLE [dbo].[UserAccess] WITH CHECK CHECK CONSTRAINT [FK_UserAccess_tlbEmployee_EmpID];

ALTER TABLE [dbo].[UserAccess] WITH CHECK CHECK CONSTRAINT [FK_UserAccess_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[UserAccess] WITH CHECK CHECK CONSTRAINT [FK_UserAccess_tstSite_OnSite];

ALTER TABLE [dbo].[UserPreference] WITH CHECK CHECK CONSTRAINT [FK_UserPreference_BAseRef_ModuleConstantID];

ALTER TABLE [dbo].[UserPreference] WITH CHECK CHECK CONSTRAINT [FK_UserPreference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[UserPreference] WITH CHECK CHECK CONSTRAINT [FK_UserPreference_tstUserTable_UserID];

ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_VetDiseaseReportRelationship_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_VetDiseaseReportReln_BaseRef_RelTypeID];

ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_VetDiseaseReportReln_tlbVetCase_RelateToVetDiseaseReportID];

ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_VetDiseaseReportReln_tlbVetCase_VetDiseaseReportID];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutBreak_idfsLocation_gisLocation];


GO
PRINT N'Update complete.';


GO
