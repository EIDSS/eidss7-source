/*
Deployment script for EIDSS7_GG_MIGRTN_TEST_ARCHIVE

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
PRINT N'Altering Table [dbo].[tasQuery]...';


GO
ALTER TABLE [dbo].[tasQuery]
    ADD [idfOffice]   BIGINT NULL,
        [idfEmployee] BIGINT NULL;


GO
PRINT N'Creating Default Constraint [Migr70].[DF__DisabledF__FK_DI__50293D88]...';


GO
ALTER TABLE [Migr70].[DisabledForeignKeys]
    ADD CONSTRAINT [DF__DisabledF__FK_DI__50293D88] DEFAULT ('N') FOR [FK_DISABLED];


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuery_tlbEmployee]...';


GO
ALTER TABLE [dbo].[tasQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuery_tlbEmployee] FOREIGN KEY ([idfEmployee]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuery_tlbOffice]...';


GO
ALTER TABLE [dbo].[tasQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuery_tlbOffice] FOREIGN KEY ([idfOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]);


GO
PRINT N'Creating Function [dbo].[FN_REF_LABTESTNAMETODISEASE_GET_nodeploy]...';


GO

-- ====================================================================================================
-- Name: FN_REF_LABTESTNAMETODISEASE_GET_nodeploy
-- Description:	Returns a comma separated string of lab test name associated with a disease
--							
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		01/30/2019  Initial Release
-- Ricky Moss		02/08/2019	Included active clause
-- Ann Xiong		11/07/2022	Replaced comma in lab test name with semicolon to properly disply Lab Tests in the Disease Editor when in Edit mode
--
-- Test Code:
-- SELECT dbo.FN_REF_LABTESTNAMETODISEASE_GET_nodeploy('en',55540680000288) 
-- ===================================================================================================

CREATE FUNCTION [dbo].[FN_REF_LABTESTNAMETODISEASE_GET_nodeploy]
(
	@LangID NVARCHAR(50),
	@idfsDiagnosis BIGINT
)
RETURNS NVARCHAR(4000)
AS
BEGIN
DECLARE @CSV NVARCHAR(4000) = '';

	IF @idfsDiagnosis IS NULL RETURN NULL;
	
	IF @idfsDiagnosis <> 0
	BEGIN

		WITH Results AS
        (
			SELECT 
				DISTINCT REPLACE(tbr.name, ',', ';') AS strTestName
			FROM trtTestForDisease td
			JOIN dbo.FN_GBL_Reference_List_GET(@LangID, 19000097) tbr ON td.idfsTestName = tbr.idfsReference 
			WHERE td.idfsDiagnosis = @idfsDiagnosis AND td.intRowStatus = 0

		)

		SELECT 
		@CSV = STRING_AGG(strTestName, ', ')
		FROM results;
	END

	-- Return the result of the function
	RETURN @CSV;

END
GO
PRINT N'Creating Function [dbo].[fnGetLanguageID_E7]...';


GO

-- =============================================
-- Author:		Edgard Torres
-- Create date: 11/10/2022
-- Description:	Returns LanguageID for EIDSS 7
-- =============================================
CREATE   FUNCTION [dbo].[fnGetLanguageID_E7] 
(
	-- Add the parameters for the function here
	@LanguageID varchar(36)
)
RETURNS varchar(36)
AS
BEGIN
	-- Return variables
	DECLARE @E7LanguageID varchar(36)

	-- Select equivalent LanguageID from trtBaseReference 
	SELECT @E7LanguageID =  strBaseReferenceCode
	FROM dbo.trtBaseReference WHERE idfsReferenceType = 19000049 AND intRowStatus = 0 AND strBaseReferenceCode like @LanguageID + '%'

	IF (@E7LanguageID = '' OR @E7LanguageID IS NULL) SELECT @E7LanguageID = 'en-US'

	-- Return new value
	RETURN @E7LanguageID

END
GO
PRINT N'Creating Function [dbo].[fnGetLastCharIndexOfSubstringInNonTrimString]...';


GO

--##SUMMARY Gets the last index of presence of the specified substring in the specified original string
--##SUMMARY with optional right-to-left direction of the text.
--##SUMMARY If an original string doesn't contain specifed substring, the returns -1.

--##REMARKS Author: 
--##REMARKS Create date: 24.02.2014

--##RETURNS int


/*
declare	@s nvarchar(2000) = N'  ascvn .lklokj lk   '

select dbo.fnGetLastCharIndexOfSubstringInNonTrimString(@s, N'lk', 0)
*/	

CREATE   function [dbo].[fnGetLastCharIndexOfSubstringInNonTrimString]
(
	@SourceStr nvarchar(4000),	--##PARAM @SourceStr - string value to find the last presence of substring
	@SubStr nvarchar(4000),		--##PARAM @SubStr - string value to find as substring in source string
	@IsRTL bit = 0				--##PARAM @IsRTL - indicator whether the string is right to left or regular
)
returns int
as 
begin

declare @str nvarchar(4000) = ltrim(rtrim(@SourceStr))
declare	@CurPos int = -1
declare	@LastPos int = -1

if	@IsRTL = 1
begin
	set	@LastPos = CHARINDEX(@SubStr, @str, 0)
end
else begin
	declare	@len int = len(@str)


	while @CurPos < @len
	begin
		set @CurPos = CHARINDEX(@SubStr, @str, @CurPos + 1)
		if @CurPos <= 0
			set @CurPos = @len + 1
		else
			set	@LastPos = @CurPos
	end
end

return @LastPos

end
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52191040000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52191040000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHASC_SampleType_ID], 
			[ref_sflHASC_SampleType].[name] as [sflHASC_SampleType], 
			v.[sflHASC_CampaignType_ID], 
			[ref_sflHASC_CampaignType].[name] as [sflHASC_CampaignType], 
			v.[sflHASC_CampaignStatus_ID], 
			[ref_sflHASC_CampaignStatus].[name] as [sflHASC_CampaignStatus], 
			v.[sflHASC_CampaignStartDate], 
			v.[sflHASC_CampaignName], 
			v.[sflHASC_CampaignID], 
			v.[sflHASC_CampaignEndDate], 
			v.[sflHASC_CampaignAdministrator], 
			v.[sflHASS_Settlement_ID], 
			[ref_GIS_sflHASS_Settlement].[ExtendedName] as [sflHASS_Settlement], 
			[ref_GIS_sflHASS_Settlement].[name] as [sflHASS_Settlement_ShortGISName], 
			v.[sflHASS_SessionStatus_ID], 
			[ref_sflHASS_SessionStatus].[name] as [sflHASS_SessionStatus], 
			v.[sflHASS_SessionStartDate], 
			v.[sflHASS_SessionID], 
			v.[sflHASSession_EndDate], 
			v.[sflHASS_Region_ID], 
			[ref_GIS_sflHASS_Region].[ExtendedName] as [sflHASS_Region], 
			[ref_GIS_sflHASS_Region].[name] as [sflHASS_Region_ShortGISName], 
			v.[sflHASS_Rayon_ID], 
			[ref_GIS_sflHASS_Rayon].[ExtendedName] as [sflHASS_Rayon], 
			[ref_GIS_sflHASS_Rayon].[name] as [sflHASS_Rayon_ShortGISName], 
			cast((
	select		distinct ASSessionDiagnosis.[name] + '; ' 
	from		tlbMonitoringSessionToDiagnosis SessionToDiagnosesString
	inner join	fnReferenceRepair(@LangID, 19000019)	ASSessionDiagnosis	-- rftDiagnosis
	on			ASSessionDiagnosis.idfsReference = SessionToDiagnosesString.idfsDiagnosis
	where		SessionToDiagnosesString.idfMonitoringSession = v.[sflASSession_DiagnosesString]
				and SessionToDiagnosesString.intRowStatus = 0
	order by	ASSessionDiagnosis.[name] + '; ' 
	for xml path('')		
	) as nvarchar(max)) as [sflASSession_DiagnosesString] , 
			v.[sflHASS_EnteredDate], 
			v.[sflHASS_LocationCountry_ID], 
			[ref_GIS_sflHASS_LocationCountry].[ExtendedName] as [sflHASS_LocationCountry], 
			[ref_GIS_sflHASS_LocationCountry].[name] as [sflHASS_LocationCountry_ShortGISName], 
			v.[sflHASS_CampaignType_ID], 
			[ref_sflHASS_CampaignType].[name] as [sflHASS_CampaignType], 
			v.[sflHASS_CampaignName], 
			v.[sflHASS_CampaignID] 
from		vw1100SearchQuery__52191040000000 v

left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHASC_SampleType] 
on			[ref_sflHASC_SampleType].idfsReference = v.[sflHASC_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASC_CampaignType] 
on			[ref_sflHASC_CampaignType].idfsReference = v.[sflHASC_CampaignType_ID] 
left join	fnReferenceRepair(@LangID, 19000115) [ref_sflHASC_CampaignStatus] 
on			[ref_sflHASC_CampaignStatus].idfsReference = v.[sflHASC_CampaignStatus_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHASS_Settlement]  
on			[ref_GIS_sflHASS_Settlement].idfsReference = v.[sflHASS_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000117) [ref_sflHASS_SessionStatus] 
on			[ref_sflHASS_SessionStatus].idfsReference = v.[sflHASS_SessionStatus_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHASS_Region]  
on			[ref_GIS_sflHASS_Region].idfsReference = v.[sflHASS_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHASS_Rayon]  
on			[ref_GIS_sflHASS_Rayon].idfsReference = v.[sflHASS_Rayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflHASS_LocationCountry]  
on			[ref_GIS_sflHASS_LocationCountry].idfsReference = v.[sflHASS_LocationCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASS_CampaignType] 
on			[ref_sflHASS_CampaignType].idfsReference = v.[sflHASS_CampaignType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52195730000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52195730000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVCVaccination_Comments], 
			v.[sflBss_SeasonalFluVaccine_ID], 
			[ref_sflBss_SeasonalFluVaccine].[name] as [sflBss_SeasonalFluVaccine], 
			v.[sflOHC_Symptoms], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflOS_Settlement_ID], 
			[ref_GIS_sflOS_Settlement].[ExtendedName] as [sflOS_Settlement], 
			[ref_GIS_sflOS_Settlement].[name] as [sflOS_Settlement_ShortGISName], 
			v.[sflHC_SamplesCollected_ID], 
			[ref_sflHC_SamplesCollected].[name] as [sflHC_SamplesCollected], 
			v.[sflOutbreak_LocationRegion_ID], 
			[ref_GIS_sflOutbreak_LocationRegion].[ExtendedName] as [sflOutbreak_LocationRegion], 
			[ref_GIS_sflOutbreak_LocationRegion].[name] as [sflOutbreak_LocationRegion_ShortGISName], 
			v.[sflHC_ReasonForNotCollectingSample_ID], 
			[ref_sflHC_ReasonForNotCollectingSample].[name] as [sflHC_ReasonForNotCollectingSample], 
			v.[sflOutbreak_LocationRayon_ID], 
			[ref_GIS_sflOutbreak_LocationRayon].[ExtendedName] as [sflOutbreak_LocationRayon], 
			[ref_GIS_sflOutbreak_LocationRayon].[name] as [sflOutbreak_LocationRayon_ShortGISName], 
			v.[sflOHC_PrimaryCase], 
			v.[sflHASST_PersonID], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflHC_OutbreakID], 
			v.[sflOutbreak_ID], 
			v.[sflOHC_NumberOfContacts], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflHC_LocationLongitude], 
			v.[sflHC_LocationLatitude], 
			v.[sflHCSample_SentToOrganization_ID], 
			[ref_sflHCSample_SentToOrganization].[name] as [sflHCSample_SentToOrganization], 
			v.[sflVC_InvestigatedByPerson], 
			v.[sflHC_Hospitalization_ID], 
			[ref_sflHC_Hospitalization].[name] as [sflHC_Hospitalization], 
			v.[sflBss_NameOfHospital_ID], 
			[ref_sflBss_NameOfHospital].[name] as [sflBss_NameOfHospital], 
			v.[sflHC_PatientSex_ID], 
			[ref_sflHC_PatientSex].[name] as [sflHC_PatientSex], 
			cast((   select  distinct ASSessionDiagnosis.[name] + '; '    from  tlbMonitoringSessionToDiagnosis SessionToDiagnosesString   inner join fnReferenceRepair(@LangID, 19000019) ASSessionDiagnosis on   ASSessionDiagnosis.idfsReference = SessionToDiagnosesString.idfsDiagnosis   where  SessionToDiagnosesString.idfMonitoringSession = v.[sflHASS_Diseases]      and SessionToDiagnosesString.intRowStatus = 0   order by ASSessionDiagnosis.[name] + '; '    for xml path('')     ) as nvarchar(max)) as [sflHASS_Diseases] , 
			v.[sflVCVaccination_Date], 
			v.[sflBss_DateOfSymptomsOnset], 
			v.[sflHC_EnteredDate], 
			v.[sflZD_PatientHospitalizationDate], 
			v.[sflHC_DiagnosisDate], 
			v.[sflHC_PatientDischargeDate], 
			v.[sflHC_PatientDOB], 
			v.[sflHASS_EnteredDate], 
			v.[sflHCAntibiotic_AdministratedDate], 
			v.[sflOutbreak_Status_ID], 
			[ref_sflOutbreak_Status].[name] as [sflOutbreak_Status], 
			v.[sflOHC_CaseQuestionnaire], 
			v.[sflOHC_CaseMonitoring], 
			v.[sflZD_CaseClassification_ID], 
			[ref_sflZD_CaseClassification].[name] as [sflZD_CaseClassification], 
			v.[sflBss_AdminAntiviralMedication_ID], 
			[ref_sflBss_AdminAntiviralMedication].[name] as [sflBss_AdminAntiviralMedication], 
			v.[sflBss_NameOfMedication], 
			v.[sflHCAntibiotic_Dose], 
			v.[sflZD_PatientAge], 
			v.[sflZD_Settlement_ID], 
			[ref_GIS_sflZD_Settlement].[ExtendedName] as [sflZD_Settlement], 
			[ref_GIS_sflZD_Settlement].[name] as [sflZD_Settlement_ShortGISName], 
			v.[sflHCContact_RelationType_ID], 
			[ref_sflHCContact_RelationType].[name] as [sflHCContact_RelationType], 
			v.[sflHC_LocationRegion_ID], 
			[ref_GIS_sflHC_LocationRegion].[ExtendedName] as [sflHC_LocationRegion], 
			[ref_GIS_sflHC_LocationRegion].[name] as [sflHC_LocationRegion_ShortGISName], 
			v.[sflHC_LocationRayon_ID], 
			[ref_GIS_sflHC_LocationRayon].[ExtendedName] as [sflHC_LocationRayon], 
			[ref_GIS_sflHC_LocationRayon].[name] as [sflHC_LocationRayon_ShortGISName], 
			v.[sflHCContact_LastContactPlace], 
			v.[ch_contactPersonId], 
			v.[ch_contactGender_ID], 
			[ref_ch_contactGender].[name] as [ch_contactGender], 
			v.[sflVC_FarmID], 
			v.[sflHCContact_LastContactDate], 
			v.[ch_contactDateOfBirth], 
			v.[sflHCContact_Relation_ID], 
			[ref_sflHCContact_Relation].[name] as [sflHCContact_Relation], 
			v.[sflOutbreakContactStatus], 
			v.[sflHC_PatientAge], 
			v.[sflHCSample_ICS_SentToOrganization_ID], 
			[ref_sflHCSample_ICS_SentToOrganization].[name] as [sflHCSample_ICS_SentToOrganization], 
			v.[sflHCSample_SentDate], 
			v.[sflHCSample_SampleType_ID], 
			[ref_sflHCSample_SampleType].[name] as [sflHCSample_SampleType], 
			v.[sflVPSample_ConditionReceived], 
			v.[sflHCSample_FieldSampleID], 
			v.[sflHCSample_CollectionDate], 
			v.[sflHCSample_ICS_CollectedByInst_ID], 
			[ref_sflHCSample_ICS_CollectedByInst].[name] as [sflHCSample_ICS_CollectedByInst], 
			v.[sflHCSample_ICS_AccessionDate], 
			v.[sflZD_IsZoonotic_ID], 
			[ref_sflZD_IsZoonotic].[name] as [sflZD_IsZoonotic], 
			v.[sflHACD_StartDate], 
			v.[sflHCTest_TestResult_ID], 
			[ref_sflHCTest_TestResult].[name] as [sflHCTest_TestResult], 
			v.[sflHCTest_TestType_ID], 
			[ref_sflHCTest_TestType].[name] as [sflHCTest_TestType], 
			v.[sflHCTest_TestCategory_ID], 
			[ref_sflHCTest_TestCategory].[name] as [sflHCTest_TestCategory], 
			v.[sflHCSample_SampleType_SampleType_ID], 
			[ref_sflHCSample_SampleType_SampleType].[name] as [sflHCSample_SampleType_SampleType], 
			v.[sflOHCT_RuleInOut], 
			v.[sflHCTest_ValidatedDate], 
			v.[outbHCTest_FieldSampleID], 
			v.[outbHCTest_LabSampleID], 
			v.[sflOHCT_InterpretedBy], 
			v.[outbHCTest_DateValidated], 
			v.[sflHASS_EnteredDateT] 
from		vw1100SearchQuery__52195730000000 v

left join	fnReferenceRepair(@LangID, 19000100) [ref_sflBss_SeasonalFluVaccine] 
on			[ref_sflBss_SeasonalFluVaccine].idfsReference = v.[sflBss_SeasonalFluVaccine_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOS_Settlement]  
on			[ref_GIS_sflOS_Settlement].idfsReference = v.[sflOS_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_SamplesCollected] 
on			[ref_sflHC_SamplesCollected].idfsReference = v.[sflHC_SamplesCollected_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOutbreak_LocationRegion]  
on			[ref_GIS_sflOutbreak_LocationRegion].idfsReference = v.[sflOutbreak_LocationRegion_ID] 
left join	fnReferenceRepair(@LangID, 19000150) [ref_sflHC_ReasonForNotCollectingSample] 
on			[ref_sflHC_ReasonForNotCollectingSample].idfsReference = v.[sflHC_ReasonForNotCollectingSample_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOutbreak_LocationRayon]  
on			[ref_GIS_sflOutbreak_LocationRayon].idfsReference = v.[sflOutbreak_LocationRayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_SentToOrganization] 
on			[ref_sflHCSample_SentToOrganization].idfsReference = v.[sflHCSample_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_Hospitalization] 
on			[ref_sflHC_Hospitalization].idfsReference = v.[sflHC_Hospitalization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflBss_NameOfHospital] 
on			[ref_sflBss_NameOfHospital].idfsReference = v.[sflBss_NameOfHospital_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflHC_PatientSex] 
on			[ref_sflHC_PatientSex].idfsReference = v.[sflHC_PatientSex_ID] 
left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOutbreak_Status] 
on			[ref_sflOutbreak_Status].idfsReference = v.[sflOutbreak_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflZD_CaseClassification] 
on			[ref_sflZD_CaseClassification].idfsReference = v.[sflZD_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflBss_AdminAntiviralMedication] 
on			[ref_sflBss_AdminAntiviralMedication].idfsReference = v.[sflBss_AdminAntiviralMedication_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflZD_Settlement]  
on			[ref_GIS_sflZD_Settlement].idfsReference = v.[sflZD_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000014) [ref_sflHCContact_RelationType] 
on			[ref_sflHCContact_RelationType].idfsReference = v.[sflHCContact_RelationType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_LocationRegion]  
on			[ref_GIS_sflHC_LocationRegion].idfsReference = v.[sflHC_LocationRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHC_LocationRayon]  
on			[ref_GIS_sflHC_LocationRayon].idfsReference = v.[sflHC_LocationRayon_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_ch_contactGender] 
on			[ref_ch_contactGender].idfsReference = v.[ch_contactGender_ID] 
left join	fnReferenceRepair(@LangID, 19000014) [ref_sflHCContact_Relation] 
on			[ref_sflHCContact_Relation].idfsReference = v.[sflHCContact_Relation_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_ICS_SentToOrganization] 
on			[ref_sflHCSample_ICS_SentToOrganization].idfsReference = v.[sflHCSample_ICS_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHCSample_SampleType] 
on			[ref_sflHCSample_SampleType].idfsReference = v.[sflHCSample_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_ICS_CollectedByInst] 
on			[ref_sflHCSample_ICS_CollectedByInst].idfsReference = v.[sflHCSample_ICS_CollectedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflZD_IsZoonotic] 
on			[ref_sflZD_IsZoonotic].idfsReference = v.[sflZD_IsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000096) [ref_sflHCTest_TestResult] 
on			[ref_sflHCTest_TestResult].idfsReference = v.[sflHCTest_TestResult_ID] 
left join	fnReferenceRepair(@LangID, 19000097) [ref_sflHCTest_TestType] 
on			[ref_sflHCTest_TestType].idfsReference = v.[sflHCTest_TestType_ID] 
left join	fnReferenceRepair(@LangID, 19000095) [ref_sflHCTest_TestCategory] 
on			[ref_sflHCTest_TestCategory].idfsReference = v.[sflHCTest_TestCategory_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHCSample_SampleType_SampleType] 
on			[ref_sflHCSample_SampleType_SampleType].idfsReference = v.[sflHCSample_SampleType_SampleType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHASS_EnteredDate] >  N'20221031'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52207550000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52207550000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVC_CaseType_ID], 
			[ref_sflVC_CaseType].[name] as [sflVC_CaseType], 
			v.[sflZD_IsZoonotic_ID], 
			[ref_sflZD_IsZoonotic].[name] as [sflZD_IsZoonotic], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflVC_FarmAddressSettlement_ID], 
			[ref_GIS_sflVC_FarmAddressSettlement].[ExtendedName] as [sflVC_FarmAddressSettlement], 
			[ref_GIS_sflVC_FarmAddressSettlement].[name] as [sflVC_FarmAddressSettlement_ShortGISName], 
			v.[sflVC_FarmAddressRegion_ID], 
			[ref_GIS_sflVC_FarmAddressRegion].[ExtendedName] as [sflVC_FarmAddressRegion], 
			[ref_GIS_sflVC_FarmAddressRegion].[name] as [sflVC_FarmAddressRegion_ShortGISName], 
			v.[sflVC_FarmAddressRayon_ID], 
			[ref_GIS_sflVC_FarmAddressRayon].[ExtendedName] as [sflVC_FarmAddressRayon], 
			[ref_GIS_sflVC_FarmAddressRayon].[name] as [sflVC_FarmAddressRayon_ShortGISName], 
			v.[sflOVC_PrimaryCase], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflVC_OutbreakID], 
			v.[sflOutbreak_ID], 
			v.[sflOVC_NumberOfContacts], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflVC_FarmLocationLongitude], 
			v.[sflVC_FarmLocationLatitude], 
			v.[sflHCSample_SentToOrganization_ID], 
			[ref_sflHCSample_SentToOrganization].[name] as [sflHCSample_SentToOrganization], 
			v.[sflVC_InvestigatedByPerson], 
			v.[sflVC_FarmID], 
			v.[sflVC_FinalDiagnosis_ID], 
			[ref_sflVC_FinalDiagnosis].[name] as [sflVC_FinalDiagnosis], 
			v.[sflBss_DateOfSymptomsOnset], 
			v.[sflHC_EnteredDate], 
			v.[sflVC_FinalDiagnosisDate], 
			v.[sflOSC_EnteredDate], 
			v.[sflVC_CaseClassification_ID], 
			[ref_sflVC_CaseClassification].[name] as [sflVC_CaseClassification], 
			v.[sflOVC_CaseMonitoringQuestions], 
			v.[sflOVC_CaseMonitoring], 
			v.[sflZD_CaseClassification_ID], 
			[ref_sflZD_CaseClassification].[name] as [sflZD_CaseClassification], 
			v.[sflZD_TotalNumberOfAnimalsForSpecies], 
			v.[sflZD_NumberOfSickAnimalsForSpecies], 
			v.[sflZD_NumberOfDeadAnimalsForSpecies], 
			v.[outb_sflVC_AnimalSpecies_ID], 
			[ref_outb_sflVC_AnimalSpecies].[name] as [outb_sflVC_AnimalSpecies], 
			v.[sflHACD_Total], 
			v.[sflVC_HerdSickAnimalQty], 
			v.[sflAS_Animal_HerdID], 
			v.[sflVC_HerdDeadAnimalQty], 
			v.[sflOVC_TotalNumberOfFarms], 
			v.[sflZD_NumberOfSickAnimalsForFarm], 
			v.[sflZD_NumberOfDeadAnimalsForFarm], 
			v.[sflVCVaccination_Type_ID], 
			[ref_sflVCVaccination_Type].[name] as [sflVCVaccination_Type], 
			v.[sflVCVaccination_Route_ID], 
			[ref_sflVCVaccination_Route].[name] as [sflVCVaccination_Route], 
			v.[sflVCVaccination_Manufacturer], 
			v.[sflVCVaccination_LotNumber], 
			v.[sflVCVaccinationName], 
			v.[sflVCVaccination_Date], 
			v.[outb_vc_AnimalStatus_ID], 
			[ref_outb_vc_AnimalStatus].[name] as [outb_vc_AnimalStatus], 
			v.[sflVC_AnimalSpecies_ID], 
			[ref_sflVC_AnimalSpecies].[name] as [sflVC_AnimalSpecies], 
			v.[sflVC_AnimalSex_ID], 
			[ref_sflVC_AnimalSex].[name] as [sflVC_AnimalSex], 
			v.[sflVCVaccination_VaccinatedNumber], 
			v.[sflVC_Animal_HerdID], 
			v.[sflHC_CS], 
			v.[sflVC_ClinicalInvestigationFields], 
			v.[sflVC_ClinicalInvestigation_ID], 
			[ref_sflVC_ClinicalInvestigation].[name] as [sflVC_ClinicalInvestigation], 
			v.[sflVC_AnimalStatus_ID], 
			[ref_sflVC_AnimalStatus].[name] as [sflVC_AnimalStatus], 
			v.[sflVC_AnimalID], 
			v.[sflOVCC_AnimalClinicalSigns], 
			v.[sflVC_AnimalAge_ID], 
			[ref_sflVC_AnimalAge].[name] as [sflVC_AnimalAge], 
			v.[sflZD_Settlement_ID], 
			[ref_GIS_sflZD_Settlement].[ExtendedName] as [sflZD_Settlement], 
			[ref_GIS_sflZD_Settlement].[name] as [sflZD_Settlement_ShortGISName], 
			v.[sflHCContact_RelationType_ID], 
			[ref_sflHCContact_RelationType].[name] as [sflHCContact_RelationType], 
			v.[sflHC_LocationRegion_ID], 
			[ref_GIS_sflHC_LocationRegion].[ExtendedName] as [sflHC_LocationRegion], 
			[ref_GIS_sflHC_LocationRegion].[name] as [sflHC_LocationRegion_ShortGISName], 
			v.[sflHC_LocationRayon_ID], 
			[ref_GIS_sflHC_LocationRayon].[ExtendedName] as [sflHC_LocationRayon], 
			[ref_GIS_sflHC_LocationRayon].[name] as [sflHC_LocationRayon_ShortGISName], 
			v.[sflHCContact_LastContactPlace], 
			v.[sflHASST_PersonID], 
			v.[sflHC_PatientSex_ID], 
			[ref_sflHC_PatientSex].[name] as [sflHC_PatientSex], 
			v.[sflVC_CFarmID], 
			v.[sflHCContact_LastContactDate], 
			v.[sflHC_PatientDOB], 
			v.[sflHCContact_Relation_ID], 
			[ref_sflHCContact_Relation].[name] as [sflHCContact_Relation], 
			v.[sflOutbreakContactStatus_ID], 
			[ref_sflOutbreakContactStatus].[name] as [sflOutbreakContactStatus], 
			v.[sflHC_PatientAge], 
			v.[sflVCTest_TestType_ID], 
			[ref_sflVCTest_TestType].[name] as [sflVCTest_TestType], 
			v.[sflVC_AnimalSpeciesPST_ID], 
			[ref_sflVC_AnimalSpeciesPST].[name] as [sflVC_AnimalSpeciesPST], 
			v.[sflVCSample_SampleType_ID], 
			[ref_sflVCSample_SampleType].[name] as [sflVCSample_SampleType], 
			v.[sflVCTest_ValidatedDate], 
			v.[sflVCTest_TestResult_ID], 
			[ref_sflVCTest_TestResult].[name] as [sflVCTest_TestResult], 
			v.[sflVCSample_FieldSampleID], 
			v.[sflVC_AnimalIDPST], 
			v.[sflVCSample_Species_ID], 
			[ref_sflVCSample_Species].[name] as [sflVCSample_Species], 
			v.[sflVCSample_SentToOrganization_ID], 
			[ref_sflVCSample_SentToOrganization].[name] as [sflVCSample_SentToOrganization], 
			v.[outbVet_sflVCSample_SampleType_ID], 
			[ref_outbVet_sflVCSample_SampleType].[name] as [outbVet_sflVCSample_SampleType], 
			v.[outbVet_sflVCSample_FieldSampleID], 
			v.[sflVCSample_CollectionDate], 
			v.[sflVCSample_CollectedByOffice_ID], 
			[ref_sflVCSample_CollectedByOffice].[name] as [sflVCSample_CollectedByOffice], 
			v.[sflOutbreak_Status_ID], 
			[ref_sflOutbreak_Status].[name] as [sflOutbreak_Status], 
			v.[sflVCSample_AnimalID] 
from		vw1100SearchQuery__52207550000000 v

left join	fnReferenceRepair(@LangID, 19000012) [ref_sflVC_CaseType] 
on			[ref_sflVC_CaseType].idfsReference = v.[sflVC_CaseType_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflZD_IsZoonotic] 
on			[ref_sflZD_IsZoonotic].idfsReference = v.[sflZD_IsZoonotic_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVC_FarmAddressSettlement]  
on			[ref_GIS_sflVC_FarmAddressSettlement].idfsReference = v.[sflVC_FarmAddressSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVC_FarmAddressRegion]  
on			[ref_GIS_sflVC_FarmAddressRegion].idfsReference = v.[sflVC_FarmAddressRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVC_FarmAddressRayon]  
on			[ref_GIS_sflVC_FarmAddressRayon].idfsReference = v.[sflVC_FarmAddressRayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_SentToOrganization] 
on			[ref_sflHCSample_SentToOrganization].idfsReference = v.[sflHCSample_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVC_FinalDiagnosis] 
on			[ref_sflVC_FinalDiagnosis].idfsReference = v.[sflVC_FinalDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflVC_CaseClassification] 
on			[ref_sflVC_CaseClassification].idfsReference = v.[sflVC_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflZD_CaseClassification] 
on			[ref_sflZD_CaseClassification].idfsReference = v.[sflZD_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_outb_sflVC_AnimalSpecies] 
on			[ref_outb_sflVC_AnimalSpecies].idfsReference = v.[outb_sflVC_AnimalSpecies_ID] 
left join	fnReferenceRepair(@LangID, 19000099) [ref_sflVCVaccination_Type] 
on			[ref_sflVCVaccination_Type].idfsReference = v.[sflVCVaccination_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000098) [ref_sflVCVaccination_Route] 
on			[ref_sflVCVaccination_Route].idfsReference = v.[sflVCVaccination_Route_ID] 
left join	fnReferenceRepair(@LangID, 19000006) [ref_outb_vc_AnimalStatus] 
on			[ref_outb_vc_AnimalStatus].idfsReference = v.[outb_vc_AnimalStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVC_AnimalSpecies] 
on			[ref_sflVC_AnimalSpecies].idfsReference = v.[sflVC_AnimalSpecies_ID] 
left join	fnReferenceRepair(@LangID, 19000007) [ref_sflVC_AnimalSex] 
on			[ref_sflVC_AnimalSex].idfsReference = v.[sflVC_AnimalSex_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVC_ClinicalInvestigation] 
on			[ref_sflVC_ClinicalInvestigation].idfsReference = v.[sflVC_ClinicalInvestigation_ID] 
left join	fnReferenceRepair(@LangID, 19000006) [ref_sflVC_AnimalStatus] 
on			[ref_sflVC_AnimalStatus].idfsReference = v.[sflVC_AnimalStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000005) [ref_sflVC_AnimalAge] 
on			[ref_sflVC_AnimalAge].idfsReference = v.[sflVC_AnimalAge_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflZD_Settlement]  
on			[ref_GIS_sflZD_Settlement].idfsReference = v.[sflZD_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000014) [ref_sflHCContact_RelationType] 
on			[ref_sflHCContact_RelationType].idfsReference = v.[sflHCContact_RelationType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_LocationRegion]  
on			[ref_GIS_sflHC_LocationRegion].idfsReference = v.[sflHC_LocationRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHC_LocationRayon]  
on			[ref_GIS_sflHC_LocationRayon].idfsReference = v.[sflHC_LocationRayon_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflHC_PatientSex] 
on			[ref_sflHC_PatientSex].idfsReference = v.[sflHC_PatientSex_ID] 
left join	fnReferenceRepair(@LangID, 19000014) [ref_sflHCContact_Relation] 
on			[ref_sflHCContact_Relation].idfsReference = v.[sflHCContact_Relation_ID] 
left join	fnReferenceRepair(@LangID, 19000014) [ref_sflOutbreakContactStatus] 
on			[ref_sflOutbreakContactStatus].idfsReference = v.[sflOutbreakContactStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000097) [ref_sflVCTest_TestType] 
on			[ref_sflVCTest_TestType].idfsReference = v.[sflVCTest_TestType_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVC_AnimalSpeciesPST] 
on			[ref_sflVC_AnimalSpeciesPST].idfsReference = v.[sflVC_AnimalSpeciesPST_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflVCSample_SampleType] 
on			[ref_sflVCSample_SampleType].idfsReference = v.[sflVCSample_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000096) [ref_sflVCTest_TestResult] 
on			[ref_sflVCTest_TestResult].idfsReference = v.[sflVCTest_TestResult_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVCSample_Species] 
on			[ref_sflVCSample_Species].idfsReference = v.[sflVCSample_Species_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_SentToOrganization] 
on			[ref_sflVCSample_SentToOrganization].idfsReference = v.[sflVCSample_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_outbVet_sflVCSample_SampleType] 
on			[ref_outbVet_sflVCSample_SampleType].idfsReference = v.[outbVet_sflVCSample_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_CollectedByOffice] 
on			[ref_sflVCSample_CollectedByOffice].idfsReference = v.[sflVCSample_CollectedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOutbreak_Status] 
on			[ref_sflOutbreak_Status].idfsReference = v.[sflOutbreak_Status_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflOSC_EnteredDate] >  N'20221130'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52218120000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52218120000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflOS_SpeciesAffected_ID], 
			[ref_sflOS_SpeciesAffected].[name] as [sflOS_SpeciesAffected], 
			v.[sflOS_Settlement_ID], 
			[ref_GIS_sflOS_Settlement].[ExtendedName] as [sflOS_Settlement], 
			[ref_GIS_sflOS_Settlement].[name] as [sflOS_Settlement_ShortGISName], 
			v.[sflOS_Region_ID], 
			[ref_GIS_sflOS_Region].[ExtendedName] as [sflOS_Region], 
			[ref_GIS_sflOS_Region].[name] as [sflOS_Region_ShortGISName], 
			v.[sflOS_Rayon_ID], 
			[ref_GIS_sflOS_Rayon].[ExtendedName] as [sflOS_Rayon], 
			[ref_GIS_sflOS_Rayon].[name] as [sflOS_Rayon_ShortGISName], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflOS_Status_ID], 
			[ref_sflOS_Status].[name] as [sflOS_Status], 
			v.[sflOS_StartDate], 
			v.[sflOutbreak_ID], 
			v.[sflOS_EndDate], 
			v.[sflOS_Diagnosis_ID], 
			[ref_sflOS_Diagnosis].[name] as [sflOS_Diagnosis], 
			v.[sflOSV_Settlement_ID], 
			[ref_GIS_sflOSV_Settlement].[ExtendedName] as [sflOSV_Settlement], 
			[ref_GIS_sflOSV_Settlement].[name] as [sflOSV_Settlement_ShortGISName], 
			v.[sflHASS_SessionStatus_ID], 
			[ref_sflHASS_SessionStatus].[name] as [sflHASS_SessionStatus], 
			v.[sflHASS_SessionStartDate], 
			v.[sflPV_SessionID], 
			v.[sflVss_CloseDate], 
			v.[sflOutbreak_LocationRegionV_ID], 
			[ref_GIS_sflOutbreak_LocationRegionV].[ExtendedName] as [sflOutbreak_LocationRegionV], 
			[ref_GIS_sflOutbreak_LocationRegionV].[name] as [sflOutbreak_LocationRegionV_ShortGISName], 
			v.[sflOutbreak_LocationRayonV_ID], 
			[ref_GIS_sflOutbreak_LocationRayonV].[ExtendedName] as [sflOutbreak_LocationRayonV], 
			[ref_GIS_sflOutbreak_LocationRayonV].[name] as [sflOutbreak_LocationRayonV_ShortGISName], 
			v.[sflPV_Country_ID], 
			[ref_GIS_sflPV_Country].[ExtendedName] as [sflPV_Country], 
			[ref_GIS_sflPV_Country].[name] as [sflPV_Country_ShortGISName] 
from		vw1100SearchQuery__52218120000000 v

left join	fnReferenceRepair(@LangID, 19000086) [ref_sflOS_SpeciesAffected] 
on			[ref_sflOS_SpeciesAffected].idfsReference = v.[sflOS_SpeciesAffected_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOS_Settlement]  
on			[ref_GIS_sflOS_Settlement].idfsReference = v.[sflOS_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOS_Region]  
on			[ref_GIS_sflOS_Region].idfsReference = v.[sflOS_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOS_Rayon]  
on			[ref_GIS_sflOS_Rayon].idfsReference = v.[sflOS_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOS_Status] 
on			[ref_sflOS_Status].idfsReference = v.[sflOS_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflOS_Diagnosis] 
on			[ref_sflOS_Diagnosis].idfsReference = v.[sflOS_Diagnosis_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOSV_Settlement]  
on			[ref_GIS_sflOSV_Settlement].idfsReference = v.[sflOSV_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000117) [ref_sflHASS_SessionStatus] 
on			[ref_sflHASS_SessionStatus].idfsReference = v.[sflHASS_SessionStatus_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOutbreak_LocationRegionV]  
on			[ref_GIS_sflOutbreak_LocationRegionV].idfsReference = v.[sflOutbreak_LocationRegionV_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOutbreak_LocationRayonV]  
on			[ref_GIS_sflOutbreak_LocationRayonV].idfsReference = v.[sflOutbreak_LocationRayonV_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflPV_Country]  
on			[ref_GIS_sflPV_Country].idfsReference = v.[sflPV_Country_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52223210000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52223210000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAD_Total], 
			v.[sflVAD_TimeIntervalUnit_ID], 
			[ref_sflVAD_TimeIntervalUnit].[name] as [sflVAD_TimeIntervalUnit], 
			v.[sflVAD_StartDate], 
			v.[sflVAD_GroupingDate], 
			v.[sflVAD_EndDate], 
			v.[sflVAD_Settlement_ID], 
			[ref_GIS_sflVAD_Settlement].[ExtendedName] as [sflVAD_Settlement], 
			[ref_GIS_sflVAD_Settlement].[name] as [sflVAD_Settlement_ShortGISName], 
			v.[sflVAD_Region_ID], 
			[ref_GIS_sflVAD_Region].[ExtendedName] as [sflVAD_Region], 
			[ref_GIS_sflVAD_Region].[name] as [sflVAD_Region_ShortGISName], 
			v.[sflVAD_Rayon_ID], 
			[ref_GIS_sflVAD_Rayon].[ExtendedName] as [sflVAD_Rayon], 
			[ref_GIS_sflVAD_Rayon].[name] as [sflVAD_Rayon_ShortGISName], 
			v.[sflVAD_OIEcode], 
			v.[sflVAD_NotificationSentDate], 
			v.[sflVAD_SentByOfficer], 
			v.[sflVAD_SentByInstitution_ID], 
			[ref_sflVAD_SentByInstitution].[name] as [sflVAD_SentByInstitution], 
			v.[sflVAD_SentByInstitutionID], 
			v.[sflVAD_NotificationReceivDate], 
			v.[sflVAD_ReceivedByOfficer], 
			v.[sflVAD_ReceivedByInst_ID], 
			[ref_sflVAD_ReceivedByInst].[name] as [sflVAD_ReceivedByInst], 
			v.[sflVAD_ReceiveByInstitutionID], 
			v.[sflVAD_EnteredByOrganizationID], 
			v.[sflVAD_SiteID_ID], 
			[ref_sflVAD_SiteID].[name] as [sflVAD_SiteID], 
			v.[sflVAD_EnteredByPerson], 
			v.[sflVAD_IsZoonotic_ID], 
			[ref_sflVAD_IsZoonotic].[name] as [sflVAD_IsZoonotic], 
			v.[sflVAD_Diagnosis_ID], 
			[ref_sflVAD_Diagnosis].[name] as [sflVAD_Diagnosis], 
			v.[sflVAD_DateOfEntry], 
			v.[sflVAD_CaseID], 
			v.[sflVAD_AdministrativeLevel_ID], 
			[ref_sflVAD_AdministrativeLevel].[name] as [sflVAD_AdministrativeLevel], 
			v.[sflVADC_TextValue], 
			v.[sflVADC_NumericValue], 
			v.[sflVADC_Name_ID], 
			[ref_sflVADC_Name].[name] as [sflVADC_Name] 
from		vw1100SearchQuery__52223210000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAD_TimeIntervalUnit] 
on			[ref_sflVAD_TimeIntervalUnit].idfsReference = v.[sflVAD_TimeIntervalUnit_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAD_Settlement]  
on			[ref_GIS_sflVAD_Settlement].idfsReference = v.[sflVAD_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAD_Region]  
on			[ref_GIS_sflVAD_Region].idfsReference = v.[sflVAD_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAD_Rayon]  
on			[ref_GIS_sflVAD_Rayon].idfsReference = v.[sflVAD_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAD_SentByInstitution] 
on			[ref_sflVAD_SentByInstitution].idfsReference = v.[sflVAD_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAD_ReceivedByInst] 
on			[ref_sflVAD_ReceivedByInst].idfsReference = v.[sflVAD_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAD_SiteID] 
on			[ref_sflVAD_SiteID].idfsReference = v.[sflVAD_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVAD_IsZoonotic] 
on			[ref_sflVAD_IsZoonotic].idfsReference = v.[sflVAD_IsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVAD_Diagnosis] 
on			[ref_sflVAD_Diagnosis].idfsReference = v.[sflVAD_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAD_AdministrativeLevel] 
on			[ref_sflVAD_AdministrativeLevel].idfsReference = v.[sflVAD_AdministrativeLevel_ID] 
left join	fnReferenceRepair(@LangID, 19000066) [ref_sflVADC_Name] 
on			[ref_sflVADC_Name].idfsReference = v.[sflVADC_Name_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflVAD_DateOfEntry] >  N'20230131'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52225090000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52225090000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAIA_Total], 
			v.[sflVAIA_TimeIntervalUnit_ID], 
			[ref_sflVAIA_TimeIntervalUnit].[name] as [sflVAIA_TimeIntervalUnit], 
			v.[sflVAIA_StartDate], 
			v.[sflVAIA_GroupingDate], 
			v.[sflVAIA_EndDate], 
			v.[sflVAIA_AnimalSpecies_ID], 
			[ref_sflVAIA_AnimalSpecies].[name] as [sflVAIA_AnimalSpecies], 
			v.[sflVAIA_Settlement_ID], 
			[ref_GIS_sflVAIA_Settlement].[ExtendedName] as [sflVAIA_Settlement], 
			[ref_GIS_sflVAIA_Settlement].[name] as [sflVAIA_Settlement_ShortGISName], 
			v.[sflVAIA_Region_ID], 
			[ref_GIS_sflVAIA_Region].[ExtendedName] as [sflVAIA_Region], 
			[ref_GIS_sflVAIA_Region].[name] as [sflVAIA_Region_ShortGISName], 
			v.[sflVAIA_Rayon_ID], 
			[ref_GIS_sflVAIA_Rayon].[ExtendedName] as [sflVAIA_Rayon], 
			[ref_GIS_sflVAIA_Rayon].[name] as [sflVAIA_Rayon_ShortGISName], 
			v.[sflVAIA_OIAcode], 
			v.[sflVAIA_NotificationSentDate], 
			v.[sflVAIA_SentByOfficer], 
			v.[sflVAIA_SentByInstitution_ID], 
			[ref_sflVAIA_SentByInstitution].[name] as [sflVAIA_SentByInstitution], 
			v.[sflVAIA_SentByInstitutionID], 
			v.[sflVAIA_NotificationReceivDate], 
			v.[sflVAIA_ReceivedByOfficer], 
			v.[sflVAIA_ReceivedByInst_ID], 
			[ref_sflVAIA_ReceivedByInst].[name] as [sflVAIA_ReceivedByInst], 
			v.[sflVAIA_ReceiveByInstitutionID], 
			v.[sflVAIA_InvestigationType_ID], 
			[ref_sflVAIA_InvestigationType].[name] as [sflVAIA_InvestigationType], 
			v.[sflVAIA_EnteredByOrganizationID], 
			v.[sflVAIA_SiteID_ID], 
			[ref_sflVAIA_SiteID].[name] as [sflVAIA_SiteID], 
			v.[sflVAIA_EnteredByPerson], 
			v.[sflVAIA_FinalDiagnosis_ID], 
			[ref_sflVAIA_FinalDiagnosis].[name] as [sflVAIA_FinalDiagnosis], 
			v.[sflVAIA_DateOfEntry], 
			v.[sflVAIA_CaseID], 
			v.[sflVAIA_AdministrativeLevel_ID], 
			[ref_sflVAIA_AdministrativeLevel].[name] as [sflVAIA_AdministrativeLevel] 
from		vw1100SearchQuery__52225090000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAIA_TimeIntervalUnit] 
on			[ref_sflVAIA_TimeIntervalUnit].idfsReference = v.[sflVAIA_TimeIntervalUnit_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVAIA_AnimalSpecies] 
on			[ref_sflVAIA_AnimalSpecies].idfsReference = v.[sflVAIA_AnimalSpecies_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAIA_Settlement]  
on			[ref_GIS_sflVAIA_Settlement].idfsReference = v.[sflVAIA_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAIA_Region]  
on			[ref_GIS_sflVAIA_Region].idfsReference = v.[sflVAIA_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAIA_Rayon]  
on			[ref_GIS_sflVAIA_Rayon].idfsReference = v.[sflVAIA_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIA_SentByInstitution] 
on			[ref_sflVAIA_SentByInstitution].idfsReference = v.[sflVAIA_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIA_ReceivedByInst] 
on			[ref_sflVAIA_ReceivedByInst].idfsReference = v.[sflVAIA_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000144) [ref_sflVAIA_InvestigationType] 
on			[ref_sflVAIA_InvestigationType].idfsReference = v.[sflVAIA_InvestigationType_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAIA_SiteID] 
on			[ref_sflVAIA_SiteID].idfsReference = v.[sflVAIA_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVAIA_FinalDiagnosis] 
on			[ref_sflVAIA_FinalDiagnosis].idfsReference = v.[sflVAIA_FinalDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAIA_AdministrativeLevel] 
on			[ref_sflVAIA_AdministrativeLevel].idfsReference = v.[sflVAIA_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52226200000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52226200000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAIAC_Total], 
			v.[sflVAIAC_TimeIntervalUnit_ID], 
			[ref_sflVAIAC_TimeIntervalUnit].[name] as [sflVAIAC_TimeIntervalUnit], 
			v.[sflVAIAC_StartDate], 
			v.[sflVAIAC_GroupingDate], 
			v.[sflVAIAC_EndDate], 
			v.[sflVAIAC_AnimalSpecies_ID], 
			[ref_sflVAIAC_AnimalSpecies].[name] as [sflVAIAC_AnimalSpecies], 
			v.[sflVAIAC_Settlement_ID], 
			[ref_GIS_sflVAIAC_Settlement].[ExtendedName] as [sflVAIAC_Settlement], 
			[ref_GIS_sflVAIAC_Settlement].[name] as [sflVAIAC_Settlement_ShortGISName], 
			v.[sflVAIAC_Region_ID], 
			[ref_GIS_sflVAIAC_Region].[ExtendedName] as [sflVAIAC_Region], 
			[ref_GIS_sflVAIAC_Region].[name] as [sflVAIAC_Region_ShortGISName], 
			v.[sflVAIAC_Rayon_ID], 
			[ref_GIS_sflVAIAC_Rayon].[ExtendedName] as [sflVAIAC_Rayon], 
			[ref_GIS_sflVAIAC_Rayon].[name] as [sflVAIAC_Rayon_ShortGISName], 
			v.[sflVAIAC_OIEcode], 
			v.[sflVAIAC_NotificationSentDate], 
			v.[sflVAIAC_SentByOfficer], 
			v.[sflVAIAC_SentByInstitution_ID], 
			[ref_sflVAIAC_SentByInstitution].[name] as [sflVAIAC_SentByInstitution], 
			v.[sflVAIAC_NotificationReceivDate], 
			v.[sflVAIAC_ReceivedByOfficer], 
			v.[sflVAIAC_ReceivedByInst_ID], 
			[ref_sflVAIAC_ReceivedByInst].[name] as [sflVAIAC_ReceivedByInst], 
			v.[sflVAIAC_ReceiveByInstitutionID], 
			v.[sflVAIAC_MethodOfMeasurement_ID], 
			[ref_sflVAIAC_MethodOfMeasurement].[name] as [sflVAIAC_MethodOfMeasurement], 
			v.[sflVAIAC_EnteredByOrganizationID], 
			v.[sflVAIAC_SiteID_ID], 
			[ref_sflVAIAC_SiteID].[name] as [sflVAIAC_SiteID], 
			v.[sflVAIAC_EnteredByPerson], 
			v.[sflVAIAC_DiagnosesString], 
			v.[sflVAIAC_DateOfEntry], 
			v.[sflVAIAC_CaseID], 
			v.[sflVAIAC_AdministrativeLevel_ID], 
			[ref_sflVAIAC_AdministrativeLevel].[name] as [sflVAIAC_AdministrativeLevel] 
from		vw1100SearchQuery__52226200000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAIAC_TimeIntervalUnit] 
on			[ref_sflVAIAC_TimeIntervalUnit].idfsReference = v.[sflVAIAC_TimeIntervalUnit_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVAIAC_AnimalSpecies] 
on			[ref_sflVAIAC_AnimalSpecies].idfsReference = v.[sflVAIAC_AnimalSpecies_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAIAC_Settlement]  
on			[ref_GIS_sflVAIAC_Settlement].idfsReference = v.[sflVAIAC_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAIAC_Region]  
on			[ref_GIS_sflVAIAC_Region].idfsReference = v.[sflVAIAC_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAIAC_Rayon]  
on			[ref_GIS_sflVAIAC_Rayon].idfsReference = v.[sflVAIAC_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIAC_SentByInstitution] 
on			[ref_sflVAIAC_SentByInstitution].idfsReference = v.[sflVAIAC_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIAC_ReceivedByInst] 
on			[ref_sflVAIAC_ReceivedByInst].idfsReference = v.[sflVAIAC_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000160) [ref_sflVAIAC_MethodOfMeasurement] 
on			[ref_sflVAIAC_MethodOfMeasurement].idfsReference = v.[sflVAIAC_MethodOfMeasurement_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAIAC_SiteID] 
on			[ref_sflVAIAC_SiteID].idfsReference = v.[sflVAIAC_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAIAC_AdministrativeLevel] 
on			[ref_sflVAIAC_AdministrativeLevel].idfsReference = v.[sflVAIAC_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52274020000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52274020000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAIA_AdministrativeLevel_ID], 
			[ref_sflVAIA_AdministrativeLevel].[name] as [sflVAIA_AdministrativeLevel], 
			v.[sflVAIA_CaseID], 
			v.[sflVAIA_DateOfEntry], 
			v.[sflVAIA_InvestigationType_ID], 
			[ref_sflVAIA_InvestigationType].[name] as [sflVAIA_InvestigationType], 
			v.[sflVAIA_AnimalSpecies_ID], 
			[ref_sflVAIA_AnimalSpecies].[name] as [sflVAIA_AnimalSpecies], 
			v.[sflVAIA_FinalDiagnosis_ID], 
			[ref_sflVAIA_FinalDiagnosis].[name] as [sflVAIA_FinalDiagnosis], 
			v.[sflVAIA_OIAcode], 
			v.[sflVAIA_EnteredByPerson], 
			v.[sflVAIA_SiteID_ID], 
			[ref_sflVAIA_SiteID].[name] as [sflVAIA_SiteID], 
			v.[sflVAIA_EnteredByOrganizationID], 
			v.[sflVAIA_ReceiveByInstitutionID], 
			v.[sflVAIA_ReceivedByInst_ID], 
			[ref_sflVAIA_ReceivedByInst].[name] as [sflVAIA_ReceivedByInst], 
			v.[sflVAIA_ReceivedByOfficer], 
			v.[sflVAIA_NotificationReceivDate], 
			v.[sflVAIA_SentByInstitutionID], 
			v.[sflVAIA_SentByInstitution_ID], 
			[ref_sflVAIA_SentByInstitution].[name] as [sflVAIA_SentByInstitution], 
			v.[sflVAIA_SentByOfficer], 
			v.[sflVAIA_NotificationSentDate], 
			v.[sflVAIA_Rayon_ID], 
			[ref_GIS_sflVAIA_Rayon].[ExtendedName] as [sflVAIA_Rayon], 
			[ref_GIS_sflVAIA_Rayon].[name] as [sflVAIA_Rayon_ShortGISName], 
			v.[sflVAIA_Region_ID], 
			[ref_GIS_sflVAIA_Region].[ExtendedName] as [sflVAIA_Region], 
			[ref_GIS_sflVAIA_Region].[name] as [sflVAIA_Region_ShortGISName], 
			v.[sflVAIA_GroupingDate], 
			v.[sflVAIA_EndDate], 
			v.[sflVAIA_StartDate], 
			v.[sflVAIA_TimeIntervalUnit_ID], 
			[ref_sflVAIA_TimeIntervalUnit].[name] as [sflVAIA_TimeIntervalUnit], 
			v.[sflVAIA_Total], 
			v.[sflVAIA_Settlement_ID], 
			[ref_GIS_sflVAIA_Settlement].[ExtendedName] as [sflVAIA_Settlement], 
			[ref_GIS_sflVAIA_Settlement].[name] as [sflVAIA_Settlement_ShortGISName] 
from		vw1100SearchQuery__52274020000000 v

left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAIA_AdministrativeLevel] 
on			[ref_sflVAIA_AdministrativeLevel].idfsReference = v.[sflVAIA_AdministrativeLevel_ID] 
left join	fnReferenceRepair(@LangID, 19000144) [ref_sflVAIA_InvestigationType] 
on			[ref_sflVAIA_InvestigationType].idfsReference = v.[sflVAIA_InvestigationType_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVAIA_AnimalSpecies] 
on			[ref_sflVAIA_AnimalSpecies].idfsReference = v.[sflVAIA_AnimalSpecies_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVAIA_FinalDiagnosis] 
on			[ref_sflVAIA_FinalDiagnosis].idfsReference = v.[sflVAIA_FinalDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAIA_SiteID] 
on			[ref_sflVAIA_SiteID].idfsReference = v.[sflVAIA_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIA_ReceivedByInst] 
on			[ref_sflVAIA_ReceivedByInst].idfsReference = v.[sflVAIA_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIA_SentByInstitution] 
on			[ref_sflVAIA_SentByInstitution].idfsReference = v.[sflVAIA_SentByInstitution_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAIA_Rayon]  
on			[ref_GIS_sflVAIA_Rayon].idfsReference = v.[sflVAIA_Rayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAIA_Region]  
on			[ref_GIS_sflVAIA_Region].idfsReference = v.[sflVAIA_Region_ID] 
left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAIA_TimeIntervalUnit] 
on			[ref_sflVAIA_TimeIntervalUnit].idfsReference = v.[sflVAIA_TimeIntervalUnit_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAIA_Settlement]  
on			[ref_GIS_sflVAIA_Settlement].idfsReference = v.[sflVAIA_Settlement_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52276500000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52276500000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAIAC_AdministrativeLevel_ID], 
			[ref_sflVAIAC_AdministrativeLevel].[name] as [sflVAIAC_AdministrativeLevel], 
			v.[sflVAIAC_CaseID], 
			v.[sflVAIAC_DateOfEntry], 
			v.[sflVAIAC_MethodOfMeasurement_ID], 
			[ref_sflVAIAC_MethodOfMeasurement].[name] as [sflVAIAC_MethodOfMeasurement], 
			v.[sflVAIAC_AnimalSpecies_ID], 
			[ref_sflVAIAC_AnimalSpecies].[name] as [sflVAIAC_AnimalSpecies], 
			v.[sflVAIAC_DiagnosesString], 
			v.[sflVAIAC_OIEcode], 
			v.[sflVAIAC_EnteredByPerson], 
			v.[sflVAIAC_SiteID_ID], 
			[ref_sflVAIAC_SiteID].[name] as [sflVAIAC_SiteID], 
			v.[sflVAIAC_EnteredByOrganizationID], 
			v.[sflVAIAC_ReceiveByInstitutionID], 
			v.[sflVAIAC_ReceivedByInst_ID], 
			[ref_sflVAIAC_ReceivedByInst].[name] as [sflVAIAC_ReceivedByInst], 
			v.[sflVAIAC_ReceivedByOfficer], 
			v.[sflVAIAC_NotificationReceivDate], 
			v.[sflVAIAC_SentByInstitution_ID], 
			[ref_sflVAIAC_SentByInstitution].[name] as [sflVAIAC_SentByInstitution], 
			v.[sflVAIAC_SentByOfficer], 
			v.[sflVAIAC_NotificationSentDate], 
			v.[sflVAIAC_Rayon_ID], 
			[ref_GIS_sflVAIAC_Rayon].[ExtendedName] as [sflVAIAC_Rayon], 
			[ref_GIS_sflVAIAC_Rayon].[name] as [sflVAIAC_Rayon_ShortGISName], 
			v.[sflVAIAC_Region_ID], 
			[ref_GIS_sflVAIAC_Region].[ExtendedName] as [sflVAIAC_Region], 
			[ref_GIS_sflVAIAC_Region].[name] as [sflVAIAC_Region_ShortGISName], 
			v.[sflVAIAC_GroupingDate], 
			v.[sflVAIAC_EndDate], 
			v.[sflVAIAC_StartDate], 
			v.[sflVAIAC_TimeIntervalUnit_ID], 
			[ref_sflVAIAC_TimeIntervalUnit].[name] as [sflVAIAC_TimeIntervalUnit], 
			v.[sflVAIAC_Total], 
			v.[sflVAIAC_Settlement_ID], 
			[ref_GIS_sflVAIAC_Settlement].[ExtendedName] as [sflVAIAC_Settlement], 
			[ref_GIS_sflVAIAC_Settlement].[name] as [sflVAIAC_Settlement_ShortGISName] 
from		vw1100SearchQuery__52276500000000 v

left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAIAC_AdministrativeLevel] 
on			[ref_sflVAIAC_AdministrativeLevel].idfsReference = v.[sflVAIAC_AdministrativeLevel_ID] 
left join	fnReferenceRepair(@LangID, 19000160) [ref_sflVAIAC_MethodOfMeasurement] 
on			[ref_sflVAIAC_MethodOfMeasurement].idfsReference = v.[sflVAIAC_MethodOfMeasurement_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVAIAC_AnimalSpecies] 
on			[ref_sflVAIAC_AnimalSpecies].idfsReference = v.[sflVAIAC_AnimalSpecies_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAIAC_SiteID] 
on			[ref_sflVAIAC_SiteID].idfsReference = v.[sflVAIAC_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIAC_ReceivedByInst] 
on			[ref_sflVAIAC_ReceivedByInst].idfsReference = v.[sflVAIAC_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIAC_SentByInstitution] 
on			[ref_sflVAIAC_SentByInstitution].idfsReference = v.[sflVAIAC_SentByInstitution_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAIAC_Rayon]  
on			[ref_GIS_sflVAIAC_Rayon].idfsReference = v.[sflVAIAC_Rayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAIAC_Region]  
on			[ref_GIS_sflVAIAC_Region].idfsReference = v.[sflVAIAC_Region_ID] 
left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAIAC_TimeIntervalUnit] 
on			[ref_sflVAIAC_TimeIntervalUnit].idfsReference = v.[sflVAIAC_TimeIntervalUnit_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAIAC_Settlement]  
on			[ref_GIS_sflVAIAC_Settlement].idfsReference = v.[sflVAIAC_Settlement_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52278360000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52278360000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAD_AdministrativeLevel_ID], 
			[ref_sflVAD_AdministrativeLevel].[name] as [sflVAD_AdministrativeLevel], 
			v.[sflVAD_CaseID], 
			v.[sflVAD_DateOfEntry], 
			v.[sflVAD_Diagnosis_ID], 
			[ref_sflVAD_Diagnosis].[name] as [sflVAD_Diagnosis], 
			v.[sflVAD_IsZoonotic_ID], 
			[ref_sflVAD_IsZoonotic].[name] as [sflVAD_IsZoonotic], 
			v.[sflVAD_OIEcode], 
			v.[sflVAD_EnteredByPerson], 
			v.[sflVAD_SiteID_ID], 
			[ref_sflVAD_SiteID].[name] as [sflVAD_SiteID], 
			v.[sflVAD_EnteredByOrganizationID], 
			v.[sflVAD_ReceiveByInstitutionID], 
			v.[sflVAD_ReceivedByInst_ID], 
			[ref_sflVAD_ReceivedByInst].[name] as [sflVAD_ReceivedByInst], 
			v.[sflVAD_ReceivedByOfficer], 
			v.[sflVAD_NotificationReceivDate], 
			v.[sflVAD_SentByInstitutionID], 
			v.[sflVAD_SentByInstitution_ID], 
			[ref_sflVAD_SentByInstitution].[name] as [sflVAD_SentByInstitution], 
			v.[sflVAD_SentByOfficer], 
			v.[sflVAD_NotificationSentDate], 
			v.[sflVAD_Rayon_ID], 
			[ref_GIS_sflVAD_Rayon].[ExtendedName] as [sflVAD_Rayon], 
			[ref_GIS_sflVAD_Rayon].[name] as [sflVAD_Rayon_ShortGISName], 
			v.[sflVAD_Region_ID], 
			[ref_GIS_sflVAD_Region].[ExtendedName] as [sflVAD_Region], 
			[ref_GIS_sflVAD_Region].[name] as [sflVAD_Region_ShortGISName], 
			v.[sflVAD_GroupingDate], 
			v.[sflVAD_EndDate], 
			v.[sflVAD_StartDate], 
			v.[sflVAD_TimeIntervalUnit_ID], 
			[ref_sflVAD_TimeIntervalUnit].[name] as [sflVAD_TimeIntervalUnit], 
			v.[sflVAD_Total], 
			v.[sflVAD_Settlement_ID], 
			[ref_GIS_sflVAD_Settlement].[ExtendedName] as [sflVAD_Settlement], 
			[ref_GIS_sflVAD_Settlement].[name] as [sflVAD_Settlement_ShortGISName] 
from		vw1100SearchQuery__52278360000000 v

left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAD_AdministrativeLevel] 
on			[ref_sflVAD_AdministrativeLevel].idfsReference = v.[sflVAD_AdministrativeLevel_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVAD_Diagnosis] 
on			[ref_sflVAD_Diagnosis].idfsReference = v.[sflVAD_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVAD_IsZoonotic] 
on			[ref_sflVAD_IsZoonotic].idfsReference = v.[sflVAD_IsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAD_SiteID] 
on			[ref_sflVAD_SiteID].idfsReference = v.[sflVAD_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAD_ReceivedByInst] 
on			[ref_sflVAD_ReceivedByInst].idfsReference = v.[sflVAD_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAD_SentByInstitution] 
on			[ref_sflVAD_SentByInstitution].idfsReference = v.[sflVAD_SentByInstitution_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAD_Rayon]  
on			[ref_GIS_sflVAD_Rayon].idfsReference = v.[sflVAD_Rayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAD_Region]  
on			[ref_GIS_sflVAD_Region].idfsReference = v.[sflVAD_Region_ID] 
left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAD_TimeIntervalUnit] 
on			[ref_sflVAD_TimeIntervalUnit].idfsReference = v.[sflVAD_TimeIntervalUnit_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAD_Settlement]  
on			[ref_GIS_sflVAD_Settlement].idfsReference = v.[sflVAD_Settlement_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52281540000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52281540000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflOutbreak_ID], 
			v.[sflOS_Status_ID], 
			[ref_sflOS_Status].[name] as [sflOS_Status], 
			v.[sflOS_StartDate], 
			v.[sflOS_EndDate], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflOS_Diagnosis_ID], 
			[ref_sflOS_Diagnosis].[name] as [sflOS_Diagnosis], 
			v.[sflOS_SpeciesAffected_ID], 
			[ref_sflOS_SpeciesAffected].[name] as [sflOS_SpeciesAffected], 
			v.[sflOS_Region_ID], 
			[ref_GIS_sflOS_Region].[ExtendedName] as [sflOS_Region], 
			[ref_GIS_sflOS_Region].[name] as [sflOS_Region_ShortGISName], 
			v.[sflOS_Rayon_ID], 
			[ref_GIS_sflOS_Rayon].[ExtendedName] as [sflOS_Rayon], 
			[ref_GIS_sflOS_Rayon].[name] as [sflOS_Rayon_ShortGISName], 
			v.[sflOS_Settlement_ID], 
			[ref_GIS_sflOS_Settlement].[ExtendedName] as [sflOS_Settlement], 
			[ref_GIS_sflOS_Settlement].[name] as [sflOS_Settlement_ShortGISName], 
			v.[sflPV_SessionID], 
			v.[sflHASS_SessionStatus_ID], 
			[ref_sflHASS_SessionStatus].[name] as [sflHASS_SessionStatus], 
			v.[sflHASS_SessionStartDate], 
			v.[sflVss_CloseDate], 
			v.[sflPV_Country_ID], 
			[ref_GIS_sflPV_Country].[ExtendedName] as [sflPV_Country], 
			[ref_GIS_sflPV_Country].[name] as [sflPV_Country_ShortGISName], 
			v.[sflOutbreak_LocationRegionV_ID], 
			[ref_GIS_sflOutbreak_LocationRegionV].[ExtendedName] as [sflOutbreak_LocationRegionV], 
			[ref_GIS_sflOutbreak_LocationRegionV].[name] as [sflOutbreak_LocationRegionV_ShortGISName], 
			v.[sflOutbreak_LocationRayonV_ID], 
			[ref_GIS_sflOutbreak_LocationRayonV].[ExtendedName] as [sflOutbreak_LocationRayonV], 
			[ref_GIS_sflOutbreak_LocationRayonV].[name] as [sflOutbreak_LocationRayonV_ShortGISName], 
			v.[sflOSV_Settlement_ID], 
			[ref_GIS_sflOSV_Settlement].[ExtendedName] as [sflOSV_Settlement], 
			[ref_GIS_sflOSV_Settlement].[name] as [sflOSV_Settlement_ShortGISName] 
from		vw1100SearchQuery__52281540000000 v

left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOS_Status] 
on			[ref_sflOS_Status].idfsReference = v.[sflOS_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflOS_Diagnosis] 
on			[ref_sflOS_Diagnosis].idfsReference = v.[sflOS_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflOS_SpeciesAffected] 
on			[ref_sflOS_SpeciesAffected].idfsReference = v.[sflOS_SpeciesAffected_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOS_Region]  
on			[ref_GIS_sflOS_Region].idfsReference = v.[sflOS_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOS_Rayon]  
on			[ref_GIS_sflOS_Rayon].idfsReference = v.[sflOS_Rayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOS_Settlement]  
on			[ref_GIS_sflOS_Settlement].idfsReference = v.[sflOS_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000117) [ref_sflHASS_SessionStatus] 
on			[ref_sflHASS_SessionStatus].idfsReference = v.[sflHASS_SessionStatus_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflPV_Country]  
on			[ref_GIS_sflPV_Country].idfsReference = v.[sflPV_Country_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOutbreak_LocationRegionV]  
on			[ref_GIS_sflOutbreak_LocationRegionV].idfsReference = v.[sflOutbreak_LocationRegionV_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOutbreak_LocationRayonV]  
on			[ref_GIS_sflOutbreak_LocationRayonV].idfsReference = v.[sflOutbreak_LocationRayonV_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOSV_Settlement]  
on			[ref_GIS_sflOSV_Settlement].idfsReference = v.[sflOSV_Settlement_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52283480000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52283480000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVC_OutbreakID], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflOutbreak_ID], 
			v.[sflVC_FarmID], 
			v.[sflVC_CaseType_ID], 
			[ref_sflVC_CaseType].[name] as [sflVC_CaseType], 
			v.[sflOSC_EnteredDate], 
			v.[sflVC_CaseClassification_ID], 
			[ref_sflVC_CaseClassification].[name] as [sflVC_CaseClassification], 
			v.[sflVC_FarmAddressRegion_ID], 
			[ref_GIS_sflVC_FarmAddressRegion].[ExtendedName] as [sflVC_FarmAddressRegion], 
			[ref_GIS_sflVC_FarmAddressRegion].[name] as [sflVC_FarmAddressRegion_ShortGISName], 
			v.[sflVC_FarmAddressRayon_ID], 
			[ref_GIS_sflVC_FarmAddressRayon].[ExtendedName] as [sflVC_FarmAddressRayon], 
			[ref_GIS_sflVC_FarmAddressRayon].[name] as [sflVC_FarmAddressRayon_ShortGISName], 
			v.[sflVC_FarmAddressSettlement_ID], 
			[ref_GIS_sflVC_FarmAddressSettlement].[ExtendedName] as [sflVC_FarmAddressSettlement], 
			[ref_GIS_sflVC_FarmAddressSettlement].[name] as [sflVC_FarmAddressSettlement_ShortGISName], 
			v.[sflVC_FarmLocationLatitude], 
			v.[sflVC_FarmLocationLongitude], 
			v.[sflVC_FinalDiagnosis_ID], 
			[ref_sflVC_FinalDiagnosis].[name] as [sflVC_FinalDiagnosis], 
			v.[sflVC_FinalDiagnosisDate], 
			v.[sflBss_DateOfSymptomsOnset], 
			v.[sflZD_CaseClassification_ID], 
			[ref_sflZD_CaseClassification].[name] as [sflZD_CaseClassification], 
			v.[sflHC_EnteredDate], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflHCSample_SentToOrganization_ID], 
			[ref_sflHCSample_SentToOrganization].[name] as [sflHCSample_SentToOrganization], 
			v.[sflVC_InvestigatedByPerson], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflOVC_PrimaryCase], 
			v.[sflOVC_CaseMonitoringQuestions], 
			v.[sflOVC_CaseMonitoring], 
			v.[sflOVC_NumberOfContacts], 
			v.[sflZD_IsZoonotic_ID], 
			[ref_sflZD_IsZoonotic].[name] as [sflZD_IsZoonotic] 
from		vw1100SearchQuery__52283480000000 v

left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000012) [ref_sflVC_CaseType] 
on			[ref_sflVC_CaseType].idfsReference = v.[sflVC_CaseType_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflVC_CaseClassification] 
on			[ref_sflVC_CaseClassification].idfsReference = v.[sflVC_CaseClassification_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVC_FarmAddressRegion]  
on			[ref_GIS_sflVC_FarmAddressRegion].idfsReference = v.[sflVC_FarmAddressRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVC_FarmAddressRayon]  
on			[ref_GIS_sflVC_FarmAddressRayon].idfsReference = v.[sflVC_FarmAddressRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVC_FarmAddressSettlement]  
on			[ref_GIS_sflVC_FarmAddressSettlement].idfsReference = v.[sflVC_FarmAddressSettlement_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVC_FinalDiagnosis] 
on			[ref_sflVC_FinalDiagnosis].idfsReference = v.[sflVC_FinalDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflZD_CaseClassification] 
on			[ref_sflZD_CaseClassification].idfsReference = v.[sflZD_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_SentToOrganization] 
on			[ref_sflHCSample_SentToOrganization].idfsReference = v.[sflHCSample_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflZD_IsZoonotic] 
on			[ref_sflZD_IsZoonotic].idfsReference = v.[sflZD_IsZoonotic_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52284930000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52284930000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_OutbreakID], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflOutbreak_ID], 
			v.[sflHASST_PersonID], 
			v.[sflHC_PatientSex_ID], 
			[ref_sflHC_PatientSex].[name] as [sflHC_PatientSex], 
			v.[sflHC_PatientDOB], 
			v.[sflZD_PatientAge], 
			v.[sflHASS_EnteredDate], 
			v.[sflOutbreak_Status_ID], 
			[ref_sflOutbreak_Status].[name] as [sflOutbreak_Status], 
			v.[sflOutbreak_LocationRegion_ID], 
			[ref_GIS_sflOutbreak_LocationRegion].[ExtendedName] as [sflOutbreak_LocationRegion], 
			[ref_GIS_sflOutbreak_LocationRegion].[name] as [sflOutbreak_LocationRegion_ShortGISName], 
			v.[sflOutbreak_LocationRayon_ID], 
			[ref_GIS_sflOutbreak_LocationRayon].[ExtendedName] as [sflOutbreak_LocationRayon], 
			[ref_GIS_sflOutbreak_LocationRayon].[name] as [sflOutbreak_LocationRayon_ShortGISName], 
			v.[sflOS_Settlement_ID], 
			[ref_GIS_sflOS_Settlement].[ExtendedName] as [sflOS_Settlement], 
			[ref_GIS_sflOS_Settlement].[name] as [sflOS_Settlement_ShortGISName], 
			v.[sflHC_LocationLatitude], 
			v.[sflHC_LocationLongitude], 
			cast((   select  distinct ASSessionDiagnosis.[name] + '; '    from  tlbMonitoringSessionToDiagnosis SessionToDiagnosesString   inner join fnReferenceRepair(@LangID, 19000019) ASSessionDiagnosis on   ASSessionDiagnosis.idfsReference = SessionToDiagnosesString.idfsDiagnosis   where  SessionToDiagnosesString.idfMonitoringSession = v.[sflHASS_Diseases]      and SessionToDiagnosesString.intRowStatus = 0   order by ASSessionDiagnosis.[name] + '; '    for xml path('')     ) as nvarchar(max)) as [sflHASS_Diseases] , 
			v.[sflHC_DiagnosisDate], 
			v.[sflBss_DateOfSymptomsOnset], 
			v.[sflZD_CaseClassification_ID], 
			[ref_sflZD_CaseClassification].[name] as [sflZD_CaseClassification], 
			v.[sflHC_EnteredDate], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflHC_Hospitalization_ID], 
			[ref_sflHC_Hospitalization].[name] as [sflHC_Hospitalization], 
			v.[sflBss_NameOfHospital_ID], 
			[ref_sflBss_NameOfHospital].[name] as [sflBss_NameOfHospital], 
			v.[sflZD_PatientHospitalizationDate], 
			v.[sflHC_PatientDischargeDate], 
			v.[sflBss_AdminAntiviralMedication_ID], 
			[ref_sflBss_AdminAntiviralMedication].[name] as [sflBss_AdminAntiviralMedication], 
			v.[sflBss_NameOfMedication], 
			v.[sflHCAntibiotic_Dose], 
			v.[sflHCAntibiotic_AdministratedDate], 
			v.[sflBss_SeasonalFluVaccine_ID], 
			[ref_sflBss_SeasonalFluVaccine].[name] as [sflBss_SeasonalFluVaccine], 
			v.[sflVCVaccination_Comments], 
			v.[sflVCVaccination_Date], 
			v.[sflOHC_Symptoms], 
			v.[sflHCSample_SentToOrganization_ID], 
			[ref_sflHCSample_SentToOrganization].[name] as [sflHCSample_SentToOrganization], 
			v.[sflVC_InvestigatedByPerson], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflOHC_PrimaryCase], 
			v.[sflOHC_CaseQuestionnaire], 
			v.[sflOHC_CaseMonitoring], 
			v.[sflOHC_NumberOfContacts], 
			v.[sflHC_SamplesCollected_ID], 
			[ref_sflHC_SamplesCollected].[name] as [sflHC_SamplesCollected], 
			v.[sflHC_ReasonForNotCollectingSample_ID], 
			[ref_sflHC_ReasonForNotCollectingSample].[name] as [sflHC_ReasonForNotCollectingSample] 
from		vw1100SearchQuery__52284930000000 v

left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflHC_PatientSex] 
on			[ref_sflHC_PatientSex].idfsReference = v.[sflHC_PatientSex_ID] 
left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOutbreak_Status] 
on			[ref_sflOutbreak_Status].idfsReference = v.[sflOutbreak_Status_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOutbreak_LocationRegion]  
on			[ref_GIS_sflOutbreak_LocationRegion].idfsReference = v.[sflOutbreak_LocationRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOutbreak_LocationRayon]  
on			[ref_GIS_sflOutbreak_LocationRayon].idfsReference = v.[sflOutbreak_LocationRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOS_Settlement]  
on			[ref_GIS_sflOS_Settlement].idfsReference = v.[sflOS_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflZD_CaseClassification] 
on			[ref_sflZD_CaseClassification].idfsReference = v.[sflZD_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_Hospitalization] 
on			[ref_sflHC_Hospitalization].idfsReference = v.[sflHC_Hospitalization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflBss_NameOfHospital] 
on			[ref_sflBss_NameOfHospital].idfsReference = v.[sflBss_NameOfHospital_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflBss_AdminAntiviralMedication] 
on			[ref_sflBss_AdminAntiviralMedication].idfsReference = v.[sflBss_AdminAntiviralMedication_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflBss_SeasonalFluVaccine] 
on			[ref_sflBss_SeasonalFluVaccine].idfsReference = v.[sflBss_SeasonalFluVaccine_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_SentToOrganization] 
on			[ref_sflHCSample_SentToOrganization].idfsReference = v.[sflHCSample_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_SamplesCollected] 
on			[ref_sflHC_SamplesCollected].idfsReference = v.[sflHC_SamplesCollected_ID] 
left join	fnReferenceRepair(@LangID, 19000150) [ref_sflHC_ReasonForNotCollectingSample] 
on			[ref_sflHC_ReasonForNotCollectingSample].idfsReference = v.[sflHC_ReasonForNotCollectingSample_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52286640000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52286640000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHASC_CampaignID], 
			v.[sflHASC_CampaignName], 
			v.[sflHASC_CampaignType_ID], 
			[ref_sflHASC_CampaignType].[name] as [sflHASC_CampaignType], 
			v.[sflHASC_CampaignStatus_ID], 
			[ref_sflHASC_CampaignStatus].[name] as [sflHASC_CampaignStatus], 
			v.[sflHASC_CampaignStartDate], 
			v.[sflHASC_CampaignEndDate], 
			v.[sflHASC_CampaignAdministrator], 
			v.[sflHASC_SampleType_ID], 
			[ref_sflHASC_SampleType].[name] as [sflHASC_SampleType] 
from		vw1100SearchQuery__52286640000000 v

left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASC_CampaignType] 
on			[ref_sflHASC_CampaignType].idfsReference = v.[sflHASC_CampaignType_ID] 
left join	fnReferenceRepair(@LangID, 19000115) [ref_sflHASC_CampaignStatus] 
on			[ref_sflHASC_CampaignStatus].idfsReference = v.[sflHASC_CampaignStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHASC_SampleType] 
on			[ref_sflHASC_SampleType].idfsReference = v.[sflHASC_SampleType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52440120000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52440120000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHASC_CampaignID], 
			v.[sflHASC_CampaignName], 
			v.[sflHASC_CampaignType_ID], 
			[ref_sflHASC_CampaignType].[name] as [sflHASC_CampaignType], 
			v.[sflHASC_CampaignStatus_ID], 
			[ref_sflHASC_CampaignStatus].[name] as [sflHASC_CampaignStatus], 
			v.[sflHASC_CampaignStartDate], 
			v.[sflHASC_CampaignEndDate], 
			v.[sflHASC_CampaignAdministrator], 
			v.[sflHASC_SampleType_ID], 
			[ref_sflHASC_SampleType].[name] as [sflHASC_SampleType] 
from		vw1100SearchQuery__52440120000000 v

left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASC_CampaignType] 
on			[ref_sflHASC_CampaignType].idfsReference = v.[sflHASC_CampaignType_ID] 
left join	fnReferenceRepair(@LangID, 19000115) [ref_sflHASC_CampaignStatus] 
on			[ref_sflHASC_CampaignStatus].idfsReference = v.[sflHASC_CampaignStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHASC_SampleType] 
on			[ref_sflHASC_SampleType].idfsReference = v.[sflHASC_SampleType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52507810000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52507810000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHASC_CampaignID], 
			v.[sflHASC_CampaignName], 
			v.[sflHASC_CampaignType_ID], 
			[ref_sflHASC_CampaignType].[name] as [sflHASC_CampaignType], 
			v.[sflHASC_CampaignStatus_ID], 
			[ref_sflHASC_CampaignStatus].[name] as [sflHASC_CampaignStatus], 
			v.[sflHASC_CampaignStartDate], 
			v.[sflHASC_CampaignEndDate], 
			v.[sflHASC_CampaignAdministrator], 
			v.[sflHASC_SampleType_ID], 
			[ref_sflHASC_SampleType].[name] as [sflHASC_SampleType] 
from		vw1100SearchQuery__52507810000000 v

left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASC_CampaignType] 
on			[ref_sflHASC_CampaignType].idfsReference = v.[sflHASC_CampaignType_ID] 
left join	fnReferenceRepair(@LangID, 19000115) [ref_sflHASC_CampaignStatus] 
on			[ref_sflHASC_CampaignStatus].idfsReference = v.[sflHASC_CampaignStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHASC_SampleType] 
on			[ref_sflHASC_SampleType].idfsReference = v.[sflHASC_SampleType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52517500000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52517500000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHASS_SessionStatus_ID], 
			[ref_sflHASS_SessionStatus].[name] as [sflHASS_SessionStatus], 
			v.[sflHASS_CampaignID], 
			v.[sflHASS_CampaignName], 
			v.[sflHASS_CampaignType_ID], 
			[ref_sflHASS_CampaignType].[name] as [sflHASS_CampaignType], 
			v.[sflHASS_SessionStartDate], 
			v.[sflHASSession_EndDate], 
			cast((
	select		distinct ASSessionDiagnosis.[name] + '; ' 
	from		tlbMonitoringSessionToDiagnosis SessionToDiagnosesString
	inner join	fnReferenceRepair(@LangID, 19000019)	ASSessionDiagnosis	-- rftDiagnosis
	on			ASSessionDiagnosis.idfsReference = SessionToDiagnosesString.idfsDiagnosis
	where		SessionToDiagnosesString.idfMonitoringSession = v.[sflASSession_DiagnosesString]
				and SessionToDiagnosesString.intRowStatus = 0
	order by	ASSessionDiagnosis.[name] + '; ' 
	for xml path('')		
	) as nvarchar(max)) as [sflASSession_DiagnosesString] , 
			v.[sflHASS_EnteredDate], 
			v.[sflHASS_LocationCountry_ID], 
			[ref_GIS_sflHASS_LocationCountry].[ExtendedName] as [sflHASS_LocationCountry], 
			[ref_GIS_sflHASS_LocationCountry].[name] as [sflHASS_LocationCountry_ShortGISName], 
			v.[sflHASS_Region_ID], 
			[ref_GIS_sflHASS_Region].[ExtendedName] as [sflHASS_Region], 
			[ref_GIS_sflHASS_Region].[name] as [sflHASS_Region_ShortGISName], 
			v.[sflHASS_Rayon_ID], 
			[ref_GIS_sflHASS_Rayon].[ExtendedName] as [sflHASS_Rayon], 
			[ref_GIS_sflHASS_Rayon].[name] as [sflHASS_Rayon_ShortGISName], 
			v.[sflHASS_Settlement_ID], 
			[ref_GIS_sflHASS_Settlement].[ExtendedName] as [sflHASS_Settlement], 
			[ref_GIS_sflHASS_Settlement].[name] as [sflHASS_Settlement_ShortGISName], 
			v.[sflHASS_SessionID] 
from		vw1100SearchQuery__52517500000000 v

left join	fnReferenceRepair(@LangID, 19000117) [ref_sflHASS_SessionStatus] 
on			[ref_sflHASS_SessionStatus].idfsReference = v.[sflHASS_SessionStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASS_CampaignType] 
on			[ref_sflHASS_CampaignType].idfsReference = v.[sflHASS_CampaignType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflHASS_LocationCountry]  
on			[ref_GIS_sflHASS_LocationCountry].idfsReference = v.[sflHASS_LocationCountry_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHASS_Region]  
on			[ref_GIS_sflHASS_Region].idfsReference = v.[sflHASS_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHASS_Rayon]  
on			[ref_GIS_sflHASS_Rayon].idfsReference = v.[sflHASS_Rayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHASS_Settlement]  
on			[ref_GIS_sflHASS_Settlement].idfsReference = v.[sflHASS_Settlement_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52569990000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52569990000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHASS_SessionStatus_ID], 
			[ref_sflHASS_SessionStatus].[name] as [sflHASS_SessionStatus], 
			v.[sflHASS_CampaignID], 
			v.[sflHASS_CampaignName], 
			v.[sflHASS_CampaignType_ID], 
			[ref_sflHASS_CampaignType].[name] as [sflHASS_CampaignType], 
			v.[sflHASS_SessionStartDate], 
			v.[sflHASSession_EndDate], 
			cast((
	select		distinct ASSessionDiagnosis.[name] + '; ' 
	from		tlbMonitoringSessionToDiagnosis SessionToDiagnosesString
	inner join	fnReferenceRepair(@LangID, 19000019)	ASSessionDiagnosis	-- rftDiagnosis
	on			ASSessionDiagnosis.idfsReference = SessionToDiagnosesString.idfsDiagnosis
	where		SessionToDiagnosesString.idfMonitoringSession = v.[sflASSession_DiagnosesString]
				and SessionToDiagnosesString.intRowStatus = 0
	order by	ASSessionDiagnosis.[name] + '; ' 
	for xml path('')		
	) as nvarchar(max)) as [sflASSession_DiagnosesString] , 
			v.[sflHASS_EnteredDate], 
			v.[sflHASS_LocationCountry_ID], 
			[ref_GIS_sflHASS_LocationCountry].[ExtendedName] as [sflHASS_LocationCountry], 
			[ref_GIS_sflHASS_LocationCountry].[name] as [sflHASS_LocationCountry_ShortGISName], 
			v.[sflHASS_Region_ID], 
			[ref_GIS_sflHASS_Region].[ExtendedName] as [sflHASS_Region], 
			[ref_GIS_sflHASS_Region].[name] as [sflHASS_Region_ShortGISName], 
			v.[sflHASS_Rayon_ID], 
			[ref_GIS_sflHASS_Rayon].[ExtendedName] as [sflHASS_Rayon], 
			[ref_GIS_sflHASS_Rayon].[name] as [sflHASS_Rayon_ShortGISName], 
			v.[sflHASS_Settlement_ID], 
			[ref_GIS_sflHASS_Settlement].[ExtendedName] as [sflHASS_Settlement], 
			[ref_GIS_sflHASS_Settlement].[name] as [sflHASS_Settlement_ShortGISName], 
			v.[sflHASS_SessionID] 
from		vw1100SearchQuery__52569990000000 v

left join	fnReferenceRepair(@LangID, 19000117) [ref_sflHASS_SessionStatus] 
on			[ref_sflHASS_SessionStatus].idfsReference = v.[sflHASS_SessionStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASS_CampaignType] 
on			[ref_sflHASS_CampaignType].idfsReference = v.[sflHASS_CampaignType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflHASS_LocationCountry]  
on			[ref_GIS_sflHASS_LocationCountry].idfsReference = v.[sflHASS_LocationCountry_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHASS_Region]  
on			[ref_GIS_sflHASS_Region].idfsReference = v.[sflHASS_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHASS_Rayon]  
on			[ref_GIS_sflHASS_Rayon].idfsReference = v.[sflHASS_Rayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHASS_Settlement]  
on			[ref_GIS_sflHASS_Settlement].idfsReference = v.[sflHASS_Settlement_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52579640000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52579640000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHACD_Diagnosis_ID], 
			[ref_sflHACD_Diagnosis].[name] as [sflHACD_Diagnosis], 
			v.[sflHACD_DiagnosisCode], 
			v.[sflHACD_DiseaseIsZoonotic_ID], 
			[ref_sflHACD_DiseaseIsZoonotic].[name] as [sflHACD_DiseaseIsZoonotic], 
			v.[sflHACD_NotificationSentDate], 
			v.[sflHACD_NotificationReceivDate], 
			v.[sflHACD_DateOfEntry], 
			v.[sflHACD_StartDate], 
			v.[sflHACD_EndDate], 
			v.[sflHACD_GroupingDate], 
			v.[sflHACD_Country_ID], 
			[ref_GIS_sflHACD_Country].[ExtendedName] as [sflHACD_Country], 
			[ref_GIS_sflHACD_Country].[name] as [sflHACD_Country_ShortGISName], 
			v.[sflHACD_Region_ID], 
			[ref_GIS_sflHACD_Region].[ExtendedName] as [sflHACD_Region], 
			[ref_GIS_sflHACD_Region].[name] as [sflHACD_Region_ShortGISName], 
			v.[sflHACD_Rayon_ID], 
			[ref_GIS_sflHACD_Rayon].[ExtendedName] as [sflHACD_Rayon], 
			[ref_GIS_sflHACD_Rayon].[name] as [sflHACD_Rayon_ShortGISName], 
			v.[sflHACD_Settlement_ID], 
			[ref_GIS_sflHACD_Settlement].[ExtendedName] as [sflHACD_Settlement], 
			[ref_GIS_sflHACD_Settlement].[name] as [sflHACD_Settlement_ShortGISName], 
			v.[sflHACD_Elevationm], 
			v.[sflHACD_SentByInstitution_ID], 
			[ref_sflHACD_SentByInstitution].[name] as [sflHACD_SentByInstitution], 
			v.[sflHACD_ReceivedByInst_ID], 
			[ref_sflHACD_ReceivedByInst].[name] as [sflHACD_ReceivedByInst], 
			v.[sflHACD_EnteredByOrganization_ID], 
			[ref_sflHACD_EnteredByOrganization].[name] as [sflHACD_EnteredByOrganization], 
			v.[sflHACD_SentByInstitutionID], 
			v.[sflHACD_ReceiveByInstitutionID], 
			v.[sflHACD_EnterByOrganizationID], 
			v.[sflHACD_SentByOfficer], 
			v.[sflHACD_ReceivedByOfficer], 
			v.[sflHACD_EnteredByOfficer], 
			v.[sflHACD_CaseID], 
			v.[sflHACD_TimeIntervalUnit_ID], 
			[ref_sflHACD_TimeIntervalUnit].[name] as [sflHACD_TimeIntervalUnit], 
			v.[sflHACD_AdministrativeLevel_ID], 
			[ref_sflHACD_AdministrativeLevel].[name] as [sflHACD_AdministrativeLevel], 
			v.[sflHACD_Total] 
from		vw1100SearchQuery__52579640000000 v

left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHACD_Diagnosis] 
on			[ref_sflHACD_Diagnosis].idfsReference = v.[sflHACD_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHACD_DiseaseIsZoonotic] 
on			[ref_sflHACD_DiseaseIsZoonotic].idfsReference = v.[sflHACD_DiseaseIsZoonotic_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflHACD_Country]  
on			[ref_GIS_sflHACD_Country].idfsReference = v.[sflHACD_Country_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHACD_Region]  
on			[ref_GIS_sflHACD_Region].idfsReference = v.[sflHACD_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHACD_Rayon]  
on			[ref_GIS_sflHACD_Rayon].idfsReference = v.[sflHACD_Rayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHACD_Settlement]  
on			[ref_GIS_sflHACD_Settlement].idfsReference = v.[sflHACD_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHACD_SentByInstitution] 
on			[ref_sflHACD_SentByInstitution].idfsReference = v.[sflHACD_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHACD_ReceivedByInst] 
on			[ref_sflHACD_ReceivedByInst].idfsReference = v.[sflHACD_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflHACD_EnteredByOrganization] 
on			[ref_sflHACD_EnteredByOrganization].idfsReference = v.[sflHACD_EnteredByOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000091) [ref_sflHACD_TimeIntervalUnit] 
on			[ref_sflHACD_TimeIntervalUnit].idfsReference = v.[sflHACD_TimeIntervalUnit_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflHACD_AdministrativeLevel] 
on			[ref_sflHACD_AdministrativeLevel].idfsReference = v.[sflHACD_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52593860000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52593860000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_PatientCRAddress_ID], 
			[ref_GL_sflHC_PatientCRAddress].[strDefaultShortAddressString] as [sflHC_PatientCRAddress], 
			v.[sflHC_PatientAge], 
			v.[sflHC_PatientAgeGroup], 
			v.[sflHC_AntimicrobialTherapy_ID], 
			[ref_sflHC_AntimicrobialTherapy].[name] as [sflHC_AntimicrobialTherapy], 
			v.[sflHC_CaseClassification_ID], 
			[ref_sflHC_CaseClassification].[name] as [sflHC_CaseClassification], 
			v.[sflHC_CaseID], 
			v.[sflHC_HospitalizationStatus_ID], 
			[ref_sflHC_HospitalizationStatus].[name] as [sflHC_HospitalizationStatus], 
			v.[sflHC_EnteredDate], 
			v.[sflHC_ModificationDate], 
			v.[sflHC_PatientDOB], 
			v.[sflHC_CompletionPaperFormDate], 
			v.[sflHC_PatientDeathDate], 
			v.[sflHC_PatientDischargeDate], 
			v.[sflHC_ExposureDate], 
			v.[sflHC_FacilityLastVisitDate], 
			v.[sflHC_SymptomOnsetDate], 
			v.[sflHC_DaysAfterNotification], 
			v.[sflHC_Diagnosis_ID], 
			[ref_sflHC_Diagnosis].[name] as [sflHC_Diagnosis], 
			v.[sflHC_DiagnosisDate], 
			v.[sflHC_DiagnosisCode], 
			v.[sflHC_PatientEmployerPhone], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_Hospitalization_ID], 
			[ref_sflHC_Hospitalization].[name] as [sflHC_Hospitalization], 
			v.[sflHC_CurrentLocation_ID], 
			[ref_sflHC_CurrentLocation].[name] as [sflHC_CurrentLocation], 
			v.[sflHC_LocalID], 
			v.[sflHC_LocationRayon_ID], 
			[ref_GIS_sflHC_LocationRayon].[ExtendedName] as [sflHC_LocationRayon], 
			[ref_GIS_sflHC_LocationRayon].[name] as [sflHC_LocationRayon_ShortGISName], 
			v.[sflHC_LocationRegion_ID], 
			[ref_GIS_sflHC_LocationRegion].[ExtendedName] as [sflHC_LocationRegion], 
			[ref_GIS_sflHC_LocationRegion].[name] as [sflHC_LocationRegion_ShortGISName], 
			v.[sflHC_PatientName], 
			v.[sflHC_PatientEmployer], 
			v.[sflHC_PatientNationality_ID], 
			[ref_sflHC_PatientNationality].[name] as [sflHC_PatientNationality], 
			v.[sflHC_NotificationDate], 
			v.[sflHC_ReceivedByPerson], 
			v.[sflHC_SentByPerson], 
			v.[sflHC_InvestigatedByOffice_ID], 
			[ref_sflHC_InvestigatedByOffice].[name] as [sflHC_InvestigatedByOffice], 
			v.[sflHC_Outcome_ID], 
			[ref_sflHC_Outcome].[name] as [sflHC_Outcome], 
			v.[sflHC_PatientPhone], 
			v.[sflHC_PatientCRRayon_ID], 
			[ref_GIS_sflHC_PatientCRRayon].[ExtendedName] as [sflHC_PatientCRRayon], 
			[ref_GIS_sflHC_PatientCRRayon].[name] as [sflHC_PatientCRRayon_ShortGISName], 
			v.[sflHC_PatientCRRegion_ID], 
			[ref_GIS_sflHC_PatientCRRegion].[ExtendedName] as [sflHC_PatientCRRegion], 
			[ref_GIS_sflHC_PatientCRRegion].[name] as [sflHC_PatientCRRegion_ShortGISName], 
			v.[sflHC_PatientCRSettlement_ID], 
			[ref_GIS_sflHC_PatientCRSettlement].[ExtendedName] as [sflHC_PatientCRSettlement], 
			[ref_GIS_sflHC_PatientCRSettlement].[name] as [sflHC_PatientCRSettlement_ShortGISName], 
			v.[sflHC_PatientSex_ID], 
			[ref_sflHC_PatientSex].[name] as [sflHC_PatientSex], 
			v.[sflHC_SamplesCollected_ID], 
			[ref_sflHC_SamplesCollected].[name] as [sflHC_SamplesCollected], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflHC_PatientNotificationStatus_ID], 
			[ref_sflHC_PatientNotificationStatus].[name] as [sflHC_PatientNotificationStatus], 
			v.[sflHC_CaseProgressStatus_ID], 
			[ref_sflHC_CaseProgressStatus].[name] as [sflHC_CaseProgressStatus], 
			v.[sflHC_InitialCaseClassification_ID], 
			[ref_sflHC_InitialCaseClassification].[name] as [sflHC_InitialCaseClassification], 
			v.[sflHC_FinalCaseClassification_ID], 
			[ref_sflHC_FinalCaseClassification].[name] as [sflHC_FinalCaseClassification], 
			v.[sflHC_FinalDiagnosisDate], 
			v.[sflHC_PatientAgeType_ID], 
			[ref_sflHC_PatientAgeType].[name] as [sflHC_PatientAgeType], 
			v.[sflHC_PatientOccupation_ID], 
			[ref_sflHC_PatientOccupation].[name] as [sflHC_PatientOccupation], 
			v.[sflHC_PatientHospitalizationDate], 
			v.[sflHC_PatientFirstSoughtCareDate], 
			v.[sflHC_LocationSettlement_ID], 
			[ref_GIS_sflHC_LocationSettlement].[ExtendedName] as [sflHC_LocationSettlement], 
			[ref_GIS_sflHC_LocationSettlement].[name] as [sflHC_LocationSettlement_ShortGISName], 
			v.[sflHC_LocationCoordinates], 
			v.[sflHC_HospitalizationPlace], 
			v.[sflHC_ClinicalDiagBasis_ID], 
			[ref_sflHC_ClinicalDiagBasis].[name] as [sflHC_ClinicalDiagBasis], 
			v.[sflHC_EpiDiagBasis_ID], 
			[ref_sflHC_EpiDiagBasis].[name] as [sflHC_EpiDiagBasis], 
			v.[sflHC_LabDiagBasis_ID], 
			[ref_sflHC_LabDiagBasis].[name] as [sflHC_LabDiagBasis], 
			v.[sflHC_ReasonForNotCollectingSample_ID], 
			[ref_sflHC_ReasonForNotCollectingSample].[name] as [sflHC_ReasonForNotCollectingSample], 
			v.[sflHC_FacilityWherePatientFSC_ID], 
			[ref_sflHC_FacilityWherePatientFSC].[name] as [sflHC_FacilityWherePatientFSC], 
			v.[sflHC_NonNotifiableDiagnosis_ID], 
			[ref_sflHC_NonNotifiableDiagnosis].[name] as [sflHC_NonNotifiableDiagnosis], 
			v.[sflHC_OtherLocation], 
			v.[sflHC_DaysAfterInitDiagUntilNotif], 
			v.[sflHC_DaysAfterOnsetSymptUntilNotif], 
			v.[sflHC_DaysAfterSymptOnsetUntilFSC], 
			v.[sflHC_DaysAfterFSCUntilNotif], 
			v.[sflHC_DaysAfterFSCUntilEntered], 
			v.[sflHC_DaysAfterNotifUntilCaseInvest], 
			v.[sflHC_DaysAfterFSCUntilFinalDiag], 
			v.[sflHC_PatientCRCoordinates], 
			v.[sflHC_TestConducted_ID], 
			[ref_sflHC_TestConducted].[name] as [sflHC_TestConducted], 
			v.[sflHC_EpidemiologistName], 
			v.[sflHC_EnteredBySite_ID], 
			[ref_sflHC_EnteredBySite].[name] as [sflHC_EnteredBySite], 
			v.[sflHC_PatientCRLongitude], 
			v.[sflHC_PatientCRLatitudee], 
			v.[sflHC_LocationLongitude], 
			v.[sflHC_LocationLatitude], 
			v.[sflHC_DateFinalCaseClassification], 
			v.[sflHC_EnteredByEmployer], 
			v.[sflHC_HospitalNameID], 
			v.[sflHC_DiagnosisIsZoonotic_ID], 
			[ref_sflHC_DiagnosisIsZoonotic].[name] as [sflHC_DiagnosisIsZoonotic], 
			v.[sflHC_DiagnosesAndGroups_ID], 
			[ref_sflHC_DiagnosesAndGroups].[name] as [sflHC_DiagnosesAndGroups], 
			v.[sflHC_PatientPersonalIDType_ID], 
			[ref_sflHC_PatientPersonalIDType].[name] as [sflHC_PatientPersonalIDType], 
			v.[sflHC_PatientPersonalID], 
			v.[sflHC_EnteredByOrganizationID], 
			v.[sflHC_FacilityWherePatientFSCCode], 
			v.[sflHC_ReceivedByOfficeID], 
			v.[sflHC_SentByOfficeID], 
			v.[sflHC_InvestigatedByOfficeID], 
			v.[sflHC_PCRElevationm], 
			v.[sflHC_LocationCountry_ID], 
			[ref_GIS_sflHC_LocationCountry].[ExtendedName] as [sflHC_LocationCountry], 
			[ref_GIS_sflHC_LocationCountry].[name] as [sflHC_LocationCountry_ShortGISName], 
			v.[sflHC_LocationIsForeignAddress_ID], 
			[ref_sflHC_LocationIsForeignAddress].[name] as [sflHC_LocationIsForeignAddress], 
			v.[sflHC_LocationForeignAddress], 
			v.[sflHC_EpiPersonalID], 
			v.[sflHC_EpiPersonalIDType_ID], 
			[ref_sflHC_EpiPersonalIDType].[name] as [sflHC_EpiPersonalIDType], 
			v.[sflHC_ReceivedByOfficerID], 
			v.[sflHC_ReceivedByOfficerIDType_ID], 
			[ref_sflHC_ReceivedByOfficerIDType].[name] as [sflHC_ReceivedByOfficerIDType], 
			v.[sflHC_SentByOfficerID], 
			v.[sflHC_SentByOfficerIDType_ID], 
			[ref_sflHC_SentByOfficerIDType].[name] as [sflHC_SentByOfficerIDType] 
from		vw1100SearchQuery__52593860000000 v

left join	fnGeoLocationTranslation(@LangID) [ref_GL_sflHC_PatientCRAddress]  
on			[ref_GL_sflHC_PatientCRAddress].idfGeoLocation = v.[sflHC_PatientCRAddress_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_AntimicrobialTherapy] 
on			[ref_sflHC_AntimicrobialTherapy].idfsReference = v.[sflHC_AntimicrobialTherapy_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_CaseClassification] 
on			[ref_sflHC_CaseClassification].idfsReference = v.[sflHC_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000041) [ref_sflHC_HospitalizationStatus] 
on			[ref_sflHC_HospitalizationStatus].idfsReference = v.[sflHC_HospitalizationStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHC_Diagnosis] 
on			[ref_sflHC_Diagnosis].idfsReference = v.[sflHC_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_Hospitalization] 
on			[ref_sflHC_Hospitalization].idfsReference = v.[sflHC_Hospitalization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflHC_CurrentLocation] 
on			[ref_sflHC_CurrentLocation].idfsReference = v.[sflHC_CurrentLocation_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHC_LocationRayon]  
on			[ref_GIS_sflHC_LocationRayon].idfsReference = v.[sflHC_LocationRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_LocationRegion]  
on			[ref_GIS_sflHC_LocationRegion].idfsReference = v.[sflHC_LocationRegion_ID] 
left join	fnReferenceRepair(@LangID, 19000054) [ref_sflHC_PatientNationality] 
on			[ref_sflHC_PatientNationality].idfsReference = v.[sflHC_PatientNationality_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_InvestigatedByOffice] 
on			[ref_sflHC_InvestigatedByOffice].idfsReference = v.[sflHC_InvestigatedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000064) [ref_sflHC_Outcome] 
on			[ref_sflHC_Outcome].idfsReference = v.[sflHC_Outcome_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHC_PatientCRRayon]  
on			[ref_GIS_sflHC_PatientCRRayon].idfsReference = v.[sflHC_PatientCRRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_PatientCRRegion]  
on			[ref_GIS_sflHC_PatientCRRegion].idfsReference = v.[sflHC_PatientCRRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHC_PatientCRSettlement]  
on			[ref_GIS_sflHC_PatientCRSettlement].idfsReference = v.[sflHC_PatientCRSettlement_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflHC_PatientSex] 
on			[ref_sflHC_PatientSex].idfsReference = v.[sflHC_PatientSex_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_SamplesCollected] 
on			[ref_sflHC_SamplesCollected].idfsReference = v.[sflHC_SamplesCollected_ID] 
left join	fnReferenceRepair(@LangID, 19000035) [ref_sflHC_PatientNotificationStatus] 
on			[ref_sflHC_PatientNotificationStatus].idfsReference = v.[sflHC_PatientNotificationStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000111) [ref_sflHC_CaseProgressStatus] 
on			[ref_sflHC_CaseProgressStatus].idfsReference = v.[sflHC_CaseProgressStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_InitialCaseClassification] 
on			[ref_sflHC_InitialCaseClassification].idfsReference = v.[sflHC_InitialCaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_FinalCaseClassification] 
on			[ref_sflHC_FinalCaseClassification].idfsReference = v.[sflHC_FinalCaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000042) [ref_sflHC_PatientAgeType] 
on			[ref_sflHC_PatientAgeType].idfsReference = v.[sflHC_PatientAgeType_ID] 
left join	fnReferenceRepair(@LangID, 19000061) [ref_sflHC_PatientOccupation] 
on			[ref_sflHC_PatientOccupation].idfsReference = v.[sflHC_PatientOccupation_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHC_LocationSettlement]  
on			[ref_GIS_sflHC_LocationSettlement].idfsReference = v.[sflHC_LocationSettlement_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_ClinicalDiagBasis] 
on			[ref_sflHC_ClinicalDiagBasis].idfsReference = v.[sflHC_ClinicalDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_EpiDiagBasis] 
on			[ref_sflHC_EpiDiagBasis].idfsReference = v.[sflHC_EpiDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_LabDiagBasis] 
on			[ref_sflHC_LabDiagBasis].idfsReference = v.[sflHC_LabDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000150) [ref_sflHC_ReasonForNotCollectingSample] 
on			[ref_sflHC_ReasonForNotCollectingSample].idfsReference = v.[sflHC_ReasonForNotCollectingSample_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_FacilityWherePatientFSC] 
on			[ref_sflHC_FacilityWherePatientFSC].idfsReference = v.[sflHC_FacilityWherePatientFSC_ID] 
left join	fnReferenceRepair(@LangID, 19000149) [ref_sflHC_NonNotifiableDiagnosis] 
on			[ref_sflHC_NonNotifiableDiagnosis].idfsReference = v.[sflHC_NonNotifiableDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_TestConducted] 
on			[ref_sflHC_TestConducted].idfsReference = v.[sflHC_TestConducted_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_EnteredBySite] 
on			[ref_sflHC_EnteredBySite].idfsReference = v.[sflHC_EnteredBySite_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_DiagnosisIsZoonotic] 
on			[ref_sflHC_DiagnosisIsZoonotic].idfsReference = v.[sflHC_DiagnosisIsZoonotic_ID] 
left join	fnDiagnosesAndGroups(@LangID) [ref_sflHC_DiagnosesAndGroups] 
on			[ref_sflHC_DiagnosesAndGroups].idfsDiagnosisOrDiagnosisGroup = v.[sflHC_DiagnosesAndGroups_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_PatientPersonalIDType] 
on			[ref_sflHC_PatientPersonalIDType].idfsReference = v.[sflHC_PatientPersonalIDType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflHC_LocationCountry]  
on			[ref_GIS_sflHC_LocationCountry].idfsReference = v.[sflHC_LocationCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_LocationIsForeignAddress] 
on			[ref_sflHC_LocationIsForeignAddress].idfsReference = v.[sflHC_LocationIsForeignAddress_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_EpiPersonalIDType] 
on			[ref_sflHC_EpiPersonalIDType].idfsReference = v.[sflHC_EpiPersonalIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_ReceivedByOfficerIDType] 
on			[ref_sflHC_ReceivedByOfficerIDType].idfsReference = v.[sflHC_ReceivedByOfficerIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_SentByOfficerIDType] 
on			[ref_sflHC_SentByOfficerIDType].idfsReference = v.[sflHC_SentByOfficerIDType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHC_EnteredDate] >=  N'20220101'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52606810000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52606810000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHCSample_CollectionDate], 
			v.[sflHCSample_DaysInTransit], 
			v.[sflHCSample_Diagnosis_ID], 
			[ref_sflHCSample_Diagnosis].[name] as [sflHCSample_Diagnosis], 
			v.[sflHCSample_CollectedByOffice_ID], 
			[ref_sflHCSample_CollectedByOffice].[name] as [sflHCSample_CollectedByOffice], 
			v.[sflHCSample_LabSampleID], 
			v.[sflHCSample_FieldSampleID], 
			v.[sflHCSample_ParentLabSampleID], 
			v.[sflHCSample_AccessionDate], 
			v.[sflHCSample_CaseID], 
			v.[sflHCSample_SampleCondition], 
			v.[sflHCSample_SentDate], 
			v.[sflHCSample_SampleType_ID], 
			[ref_sflHCSample_SampleType].[name] as [sflHCSample_SampleType], 
			v.[sflHCSample_PatientName], 
			v.[sflHCSample_AccessionCondition_ID], 
			[ref_sflHCSample_AccessionCondition].[name] as [sflHCSample_AccessionCondition], 
			v.[sflHCSample_ReasonNotCollectSample_ID], 
			[ref_sflHCSample_ReasonNotCollectSample].[name] as [sflHCSample_ReasonNotCollectSample], 
			v.[sflHCSample_DaysAfterNotifUntilSC], 
			v.[sflHCSample_DaysAfterFSCuntilSC], 
			v.[sflHCSample_DaysUntilSent_Collect], 
			v.[sflHCSample_DaysUntAccesSinceSent], 
			
 cast(	(	select top 1
						r_s_fa_o_name.[name] 
			from		fnReferenceRepair(@LangID, 19000164 /*rftDepartmentName*/ ) r_s_fa_o_name 
			where		r_s_fa_o_name.idfsReference = v.sflHCSample_FunctionalArea 
		) as nvarchar(2000)
	) as sflHCSample_FunctionalArea
 , 
			v.[sflHCSample_SentToOrganization_ID], 
			[ref_sflHCSample_SentToOrganization].[name] as [sflHCSample_SentToOrganization], 
			v.[sflHCSample_DestructionMethod_ID], 
			[ref_sflHCSample_DestructionMethod].[name] as [sflHCSample_DestructionMethod], 
			v.[sflHCSample_DiagnosisIsZoonotic_ID], 
			[ref_sflHCSample_DiagnosisIsZoonotic].[name] as [sflHCSample_DiagnosisIsZoonotic], 
			v.[sflHCSample_Status_ID], 
			[ref_sflHCSample_Status].[name] as [sflHCSample_Status], 
			v.[sflHCSample_ICS_LabID], 
			v.[sflHCSample_ICS_LocalID], 
			v.[sflHCSample_ICS_Type_ID], 
			[ref_sflHCSample_ICS_Type].[name] as [sflHCSample_ICS_Type], 
			v.[sflHCSample_ICS_CurrentLaboratory_ID], 
			[ref_sflHCSample_ICS_CurrentLaboratory].[name] as [sflHCSample_ICS_CurrentLaboratory], 
			v.[sflHCSample_ICS_CollectedByInst_ID], 
			[ref_sflHCSample_ICS_CollectedByInst].[name] as [sflHCSample_ICS_CollectedByInst], 
			v.[sflHCSample_ICS_CollectionDate], 
			v.[sflHCSample_ICS_SentToOrganization_ID], 
			[ref_sflHCSample_ICS_SentToOrganization].[name] as [sflHCSample_ICS_SentToOrganization], 
			v.[sflHCSample_ICS_AccessionDate], 
			v.[sflHCSample_ICS_Status_ID], 
			[ref_sflHCSample_ICS_Status].[name] as [sflHCSample_ICS_Status], 
			v.[sflHCSample_CurrentLaboratory_ID], 
			[ref_sflHCSample_CurrentLaboratory].[name] as [sflHCSample_CurrentLaboratory], 
			v.[sflHCSample_PS_LocalID], 
			v.[sflHCSample_PS_Type_ID], 
			[ref_sflHCSample_PS_Type].[name] as [sflHCSample_PS_Type], 
			v.[sflHCSample_PS_CurrentLaboratory_ID], 
			[ref_sflHCSample_PS_CurrentLaboratory].[name] as [sflHCSample_PS_CurrentLaboratory], 
			v.[sflHCSample_PS_CollectedByInst_ID], 
			[ref_sflHCSample_PS_CollectedByInst].[name] as [sflHCSample_PS_CollectedByInst], 
			v.[sflHCSample_PS_CollectionDate], 
			v.[sflHCSample_PS_SentToOrganization_ID], 
			[ref_sflHCSample_PS_SentToOrganization].[name] as [sflHCSample_PS_SentToOrganization], 
			v.[sflHCSample_PS_AccessionDate], 
			v.[sflHCSample_PS_Status_ID], 
			[ref_sflHCSample_PS_Status].[name] as [sflHCSample_PS_Status], 
			v.[sflHCSample_CollectedByPersonalID], 
			v.[sflHCSample_CollectedPersonalIDType_ID], 
			[ref_sflHCSample_CollectedPersonalIDType].[name] as [sflHCSample_CollectedPersonalIDType], 
			v.[sflHCSample_TestedByPerson], 
			v.[sflHCSample_TestedByInstitution_ID], 
			[ref_sflHCSample_TestedByInstitution].[name] as [sflHCSample_TestedByInstitution] 
from		vw1100SearchQuery__52606810000000 v

left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHCSample_Diagnosis] 
on			[ref_sflHCSample_Diagnosis].idfsReference = v.[sflHCSample_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_CollectedByOffice] 
on			[ref_sflHCSample_CollectedByOffice].idfsReference = v.[sflHCSample_CollectedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHCSample_SampleType] 
on			[ref_sflHCSample_SampleType].idfsReference = v.[sflHCSample_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000110) [ref_sflHCSample_AccessionCondition] 
on			[ref_sflHCSample_AccessionCondition].idfsReference = v.[sflHCSample_AccessionCondition_ID] 
left join	fnReferenceRepair(@LangID, 19000150) [ref_sflHCSample_ReasonNotCollectSample] 
on			[ref_sflHCSample_ReasonNotCollectSample].idfsReference = v.[sflHCSample_ReasonNotCollectSample_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_SentToOrganization] 
on			[ref_sflHCSample_SentToOrganization].idfsReference = v.[sflHCSample_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000157) [ref_sflHCSample_DestructionMethod] 
on			[ref_sflHCSample_DestructionMethod].idfsReference = v.[sflHCSample_DestructionMethod_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHCSample_DiagnosisIsZoonotic] 
on			[ref_sflHCSample_DiagnosisIsZoonotic].idfsReference = v.[sflHCSample_DiagnosisIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000015) [ref_sflHCSample_Status] 
on			[ref_sflHCSample_Status].idfsReference = v.[sflHCSample_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHCSample_ICS_Type] 
on			[ref_sflHCSample_ICS_Type].idfsReference = v.[sflHCSample_ICS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflHCSample_ICS_CurrentLaboratory] 
on			[ref_sflHCSample_ICS_CurrentLaboratory].idfsReference = v.[sflHCSample_ICS_CurrentLaboratory_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_ICS_CollectedByInst] 
on			[ref_sflHCSample_ICS_CollectedByInst].idfsReference = v.[sflHCSample_ICS_CollectedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_ICS_SentToOrganization] 
on			[ref_sflHCSample_ICS_SentToOrganization].idfsReference = v.[sflHCSample_ICS_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000015) [ref_sflHCSample_ICS_Status] 
on			[ref_sflHCSample_ICS_Status].idfsReference = v.[sflHCSample_ICS_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflHCSample_CurrentLaboratory] 
on			[ref_sflHCSample_CurrentLaboratory].idfsReference = v.[sflHCSample_CurrentLaboratory_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHCSample_PS_Type] 
on			[ref_sflHCSample_PS_Type].idfsReference = v.[sflHCSample_PS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflHCSample_PS_CurrentLaboratory] 
on			[ref_sflHCSample_PS_CurrentLaboratory].idfsReference = v.[sflHCSample_PS_CurrentLaboratory_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_PS_CollectedByInst] 
on			[ref_sflHCSample_PS_CollectedByInst].idfsReference = v.[sflHCSample_PS_CollectedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_PS_SentToOrganization] 
on			[ref_sflHCSample_PS_SentToOrganization].idfsReference = v.[sflHCSample_PS_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000015) [ref_sflHCSample_PS_Status] 
on			[ref_sflHCSample_PS_Status].idfsReference = v.[sflHCSample_PS_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHCSample_CollectedPersonalIDType] 
on			[ref_sflHCSample_CollectedPersonalIDType].idfsReference = v.[sflHCSample_CollectedPersonalIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_TestedByInstitution] 
on			[ref_sflHCSample_TestedByInstitution].idfsReference = v.[sflHCSample_TestedByInstitution_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52619930000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52619930000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_TestedByInstitution_ID], 
			[ref_sflHC_TestedByInstitution].[name] as [sflHC_TestedByInstitution], 
			v.[sflHC_TestedByPerson], 
			v.[sflHCTest_TestStatus_ID], 
			[ref_sflHCTest_TestStatus].[name] as [sflHCTest_TestStatus], 
			v.[sflHCTest_BatchID], 
			v.[sflHCTest_TestResult_ID], 
			[ref_sflHCTest_TestResult].[name] as [sflHCTest_TestResult], 
			v.[sflHCTest_TestType_ID], 
			[ref_sflHCTest_TestType].[name] as [sflHCTest_TestType], 
			v.[sflHCTest_TestCategory_ID], 
			[ref_sflHCTest_TestCategory].[name] as [sflHCTest_TestCategory], 
			v.[sflHCTest_SampleType_ID], 
			[ref_sflHCTest_SampleType].[name] as [sflHCTest_SampleType], 
			v.[sflHC_Status_ID], 
			[ref_sflHC_Status].[name] as [sflHC_Status], 
			v.[sflHCTest_ValidatedDate], 
			v.[sflHCTest_PatientName], 
			v.[sflHCTest_FieldSampleID], 
			v.[sflHCTest_LabSampleID], 
			v.[sflHCTest_IsEnteredByLaboratory_ID], 
			[ref_sflHCTest_IsEnteredByLaboratory].[name] as [sflHCTest_IsEnteredByLaboratory], 
			v.[sflHCTest_CaseID], 
			v.[sflHCTest_DiagnosisIsZoonotic_ID], 
			[ref_sflHCTest_DiagnosisIsZoonotic].[name] as [sflHCTest_DiagnosisIsZoonotic], 
			v.[sflHCTest_Diagnosis_ID], 
			[ref_sflHCTest_Diagnosis].[name] as [sflHCTest_Diagnosis], 
			v.[sflHCTest_DaysUntilTest_SmplSent], 
			v.[sflHCTest_DaysUntilTest_SmplAcces], 
			v.[sflHCTest_PerformedDate] 
from		vw1100SearchQuery__52619930000000 v

left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_TestedByInstitution] 
on			[ref_sflHC_TestedByInstitution].idfsReference = v.[sflHC_TestedByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000001) [ref_sflHCTest_TestStatus] 
on			[ref_sflHCTest_TestStatus].idfsReference = v.[sflHCTest_TestStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000096) [ref_sflHCTest_TestResult] 
on			[ref_sflHCTest_TestResult].idfsReference = v.[sflHCTest_TestResult_ID] 
left join	fnReferenceRepair(@LangID, 19000097) [ref_sflHCTest_TestType] 
on			[ref_sflHCTest_TestType].idfsReference = v.[sflHCTest_TestType_ID] 
left join	fnReferenceRepair(@LangID, 19000095) [ref_sflHCTest_TestCategory] 
on			[ref_sflHCTest_TestCategory].idfsReference = v.[sflHCTest_TestCategory_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHCTest_SampleType] 
on			[ref_sflHCTest_SampleType].idfsReference = v.[sflHCTest_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000015) [ref_sflHC_Status] 
on			[ref_sflHC_Status].idfsReference = v.[sflHC_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHCTest_IsEnteredByLaboratory] 
on			[ref_sflHCTest_IsEnteredByLaboratory].idfsReference = v.[sflHCTest_IsEnteredByLaboratory_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHCTest_DiagnosisIsZoonotic] 
on			[ref_sflHCTest_DiagnosisIsZoonotic].idfsReference = v.[sflHCTest_DiagnosisIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHCTest_Diagnosis] 
on			[ref_sflHCTest_Diagnosis].idfsReference = v.[sflHCTest_Diagnosis_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHCTest_PerformedDate] >=  N'20220101'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52626790000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52626790000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflBssAForm_WeekStartDate], 
			v.[sflBssAForm_WeekEndDate], 
			v.[sflBssAForm_WeekDateForGrouping], 
			v.[sflBssAForm_Site_ID], 
			[ref_sflBssAForm_Site].[name] as [sflBssAForm_Site], 
			v.[sflBssAForm_FormID], 
			v.[sflBssAForm_EnteredBy], 
			v.[sflBssAForm_DateLastSaved], 
			v.[sflBssAForm_DateEntered] 
from		vw1100SearchQuery__52626790000000 v

left join	fnReferenceRepair(@LangID, 19000045) [ref_sflBssAForm_Site] 
on			[ref_sflBssAForm_Site].idfsReference = v.[sflBssAForm_Site_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52634350000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52634350000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflOS_SpeciesAffected_ID], 
			[ref_sflOS_SpeciesAffected].[name] as [sflOS_SpeciesAffected], 
			v.[sflOS_Settlement_ID], 
			[ref_GIS_sflOS_Settlement].[ExtendedName] as [sflOS_Settlement], 
			[ref_GIS_sflOS_Settlement].[name] as [sflOS_Settlement_ShortGISName], 
			v.[sflOS_Region_ID], 
			[ref_GIS_sflOS_Region].[ExtendedName] as [sflOS_Region], 
			[ref_GIS_sflOS_Region].[name] as [sflOS_Region_ShortGISName], 
			v.[sflOS_Rayon_ID], 
			[ref_GIS_sflOS_Rayon].[ExtendedName] as [sflOS_Rayon], 
			[ref_GIS_sflOS_Rayon].[name] as [sflOS_Rayon_ShortGISName], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflOS_Status_ID], 
			[ref_sflOS_Status].[name] as [sflOS_Status], 
			v.[sflOS_StartDate], 
			v.[sflOutbreak_ID], 
			v.[sflOS_EndDate], 
			v.[sflOS_Diagnosis_ID], 
			[ref_sflOS_Diagnosis].[name] as [sflOS_Diagnosis] 
from		vw1100SearchQuery__52634350000000 v

left join	fnReferenceRepair(@LangID, 19000086) [ref_sflOS_SpeciesAffected] 
on			[ref_sflOS_SpeciesAffected].idfsReference = v.[sflOS_SpeciesAffected_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOS_Settlement]  
on			[ref_GIS_sflOS_Settlement].idfsReference = v.[sflOS_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOS_Region]  
on			[ref_GIS_sflOS_Region].idfsReference = v.[sflOS_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOS_Rayon]  
on			[ref_GIS_sflOS_Rayon].idfsReference = v.[sflOS_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOS_Status] 
on			[ref_sflOS_Status].idfsReference = v.[sflOS_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflOS_Diagnosis] 
on			[ref_sflOS_Diagnosis].idfsReference = v.[sflOS_Diagnosis_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflOS_StartDate] >=  N'20220101'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52642100000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52642100000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflOS_SpeciesAffected_ID], 
			[ref_sflOS_SpeciesAffected].[name] as [sflOS_SpeciesAffected], 
			v.[sflOS_Settlement_ID], 
			[ref_GIS_sflOS_Settlement].[ExtendedName] as [sflOS_Settlement], 
			[ref_GIS_sflOS_Settlement].[name] as [sflOS_Settlement_ShortGISName], 
			v.[sflOS_Region_ID], 
			[ref_GIS_sflOS_Region].[ExtendedName] as [sflOS_Region], 
			[ref_GIS_sflOS_Region].[name] as [sflOS_Region_ShortGISName], 
			v.[sflOS_Rayon_ID], 
			[ref_GIS_sflOS_Rayon].[ExtendedName] as [sflOS_Rayon], 
			[ref_GIS_sflOS_Rayon].[name] as [sflOS_Rayon_ShortGISName], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflOS_Status_ID], 
			[ref_sflOS_Status].[name] as [sflOS_Status], 
			v.[sflOS_StartDate], 
			v.[sflOutbreak_ID], 
			v.[sflOS_EndDate], 
			v.[sflOS_Diagnosis_ID], 
			[ref_sflOS_Diagnosis].[name] as [sflOS_Diagnosis], 
			v.[sflOBS_StartDateOfSymptomsOnset], 
			v.[sflOBS_Settlement_ID], 
			[ref_GIS_sflOBS_Settlement].[ExtendedName] as [sflOBS_Settlement], 
			[ref_GIS_sflOBS_Settlement].[name] as [sflOBS_Settlement_ShortGISName], 
			v.[sflOBS_Region_ID], 
			[ref_GIS_sflOBS_Region].[ExtendedName] as [sflOBS_Region], 
			[ref_GIS_sflOBS_Region].[name] as [sflOBS_Region_ShortGISName], 
			v.[sflOBS_Rayon_ID], 
			[ref_GIS_sflOBS_Rayon].[ExtendedName] as [sflOBS_Rayon], 
			[ref_GIS_sflOBS_Rayon].[name] as [sflOBS_Rayon_ShortGISName], 
			v.[sflOutbreakC_ID], 
			v.[sflOBS_DateOfSymptomsOnset], 
			v.[sflOSC_EnteredDate], 
			v.[sflOSC_Type_ID], 
			[ref_sflOSC_Type].[name] as [sflOSC_Type], 
			v.[sflOSC_Status_ID], 
			[ref_sflOSC_Status].[name] as [sflOSC_Status], 
			v.[sflOBS_CaseMonitoringQuestions], 
			v.[sflOBS_CaseClassification_ID], 
			[ref_sflOBS_CaseClassification].[name] as [sflOBS_CaseClassification] 
from		vw1100SearchQuery__52642100000000 v

left join	fnReferenceRepair(@LangID, 19000086) [ref_sflOS_SpeciesAffected] 
on			[ref_sflOS_SpeciesAffected].idfsReference = v.[sflOS_SpeciesAffected_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOS_Settlement]  
on			[ref_GIS_sflOS_Settlement].idfsReference = v.[sflOS_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOS_Region]  
on			[ref_GIS_sflOS_Region].idfsReference = v.[sflOS_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOS_Rayon]  
on			[ref_GIS_sflOS_Rayon].idfsReference = v.[sflOS_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOS_Status] 
on			[ref_sflOS_Status].idfsReference = v.[sflOS_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflOS_Diagnosis] 
on			[ref_sflOS_Diagnosis].idfsReference = v.[sflOS_Diagnosis_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOBS_Settlement]  
on			[ref_GIS_sflOBS_Settlement].idfsReference = v.[sflOBS_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOBS_Region]  
on			[ref_GIS_sflOBS_Region].idfsReference = v.[sflOBS_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOBS_Rayon]  
on			[ref_GIS_sflOBS_Rayon].idfsReference = v.[sflOBS_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOSC_Type] 
on			[ref_sflOSC_Type].idfsReference = v.[sflOSC_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOSC_Status] 
on			[ref_sflOSC_Status].idfsReference = v.[sflOSC_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflOBS_CaseClassification] 
on			[ref_sflOBS_CaseClassification].idfsReference = v.[sflOBS_CaseClassification_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52655870000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52655870000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVCVaccination_Comments], 
			v.[sflBss_SeasonalFluVaccine_ID], 
			[ref_sflBss_SeasonalFluVaccine].[name] as [sflBss_SeasonalFluVaccine], 
			v.[sflOHC_Symptoms], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflOS_Settlement_ID], 
			[ref_GIS_sflOS_Settlement].[ExtendedName] as [sflOS_Settlement], 
			[ref_GIS_sflOS_Settlement].[name] as [sflOS_Settlement_ShortGISName], 
			v.[sflHC_SamplesCollected_ID], 
			[ref_sflHC_SamplesCollected].[name] as [sflHC_SamplesCollected], 
			v.[sflOutbreak_LocationRegion_ID], 
			[ref_GIS_sflOutbreak_LocationRegion].[ExtendedName] as [sflOutbreak_LocationRegion], 
			[ref_GIS_sflOutbreak_LocationRegion].[name] as [sflOutbreak_LocationRegion_ShortGISName], 
			v.[sflHC_ReasonForNotCollectingSample_ID], 
			[ref_sflHC_ReasonForNotCollectingSample].[name] as [sflHC_ReasonForNotCollectingSample], 
			v.[sflOutbreak_LocationRayon_ID], 
			[ref_GIS_sflOutbreak_LocationRayon].[ExtendedName] as [sflOutbreak_LocationRayon], 
			[ref_GIS_sflOutbreak_LocationRayon].[name] as [sflOutbreak_LocationRayon_ShortGISName], 
			v.[sflOHC_PrimaryCase], 
			v.[sflHASST_PersonID], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflHC_OutbreakID], 
			v.[sflOutbreak_ID], 
			v.[sflOHC_NumberOfContacts], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflHC_LocationLongitude], 
			v.[sflHC_LocationLatitude], 
			v.[sflHCSample_SentToOrganization_ID], 
			[ref_sflHCSample_SentToOrganization].[name] as [sflHCSample_SentToOrganization], 
			v.[sflVC_InvestigatedByPerson], 
			v.[sflHC_Hospitalization_ID], 
			[ref_sflHC_Hospitalization].[name] as [sflHC_Hospitalization], 
			v.[sflBss_NameOfHospital_ID], 
			[ref_sflBss_NameOfHospital].[name] as [sflBss_NameOfHospital], 
			v.[sflHC_PatientSex_ID], 
			[ref_sflHC_PatientSex].[name] as [sflHC_PatientSex], 
			cast((   select  distinct ASSessionDiagnosis.[name] + '; '    from  tlbMonitoringSessionToDiagnosis SessionToDiagnosesString   inner join fnReferenceRepair(@LangID, 19000019) ASSessionDiagnosis on   ASSessionDiagnosis.idfsReference = SessionToDiagnosesString.idfsDiagnosis   where  SessionToDiagnosesString.idfMonitoringSession = v.[sflHASS_Diseases]      and SessionToDiagnosesString.intRowStatus = 0   order by ASSessionDiagnosis.[name] + '; '    for xml path('')     ) as nvarchar(max)) as [sflHASS_Diseases] , 
			v.[sflVCVaccination_Date], 
			v.[sflBss_DateOfSymptomsOnset], 
			v.[sflHC_EnteredDate], 
			v.[sflZD_PatientHospitalizationDate], 
			v.[sflHC_DiagnosisDate], 
			v.[sflHC_PatientDischargeDate], 
			v.[sflHC_PatientDOB], 
			v.[sflHASS_EnteredDate], 
			v.[sflHCAntibiotic_AdministratedDate], 
			v.[sflOutbreak_Status_ID], 
			[ref_sflOutbreak_Status].[name] as [sflOutbreak_Status], 
			v.[sflOHC_CaseQuestionnaire], 
			v.[sflOHC_CaseMonitoring], 
			v.[sflZD_CaseClassification_ID], 
			[ref_sflZD_CaseClassification].[name] as [sflZD_CaseClassification], 
			v.[sflBss_AdminAntiviralMedication_ID], 
			[ref_sflBss_AdminAntiviralMedication].[name] as [sflBss_AdminAntiviralMedication], 
			v.[sflBss_NameOfMedication], 
			v.[sflHCAntibiotic_Dose], 
			v.[sflZD_PatientAge] 
from		vw1100SearchQuery__52655870000000 v

left join	fnReferenceRepair(@LangID, 19000100) [ref_sflBss_SeasonalFluVaccine] 
on			[ref_sflBss_SeasonalFluVaccine].idfsReference = v.[sflBss_SeasonalFluVaccine_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOS_Settlement]  
on			[ref_GIS_sflOS_Settlement].idfsReference = v.[sflOS_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_SamplesCollected] 
on			[ref_sflHC_SamplesCollected].idfsReference = v.[sflHC_SamplesCollected_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOutbreak_LocationRegion]  
on			[ref_GIS_sflOutbreak_LocationRegion].idfsReference = v.[sflOutbreak_LocationRegion_ID] 
left join	fnReferenceRepair(@LangID, 19000150) [ref_sflHC_ReasonForNotCollectingSample] 
on			[ref_sflHC_ReasonForNotCollectingSample].idfsReference = v.[sflHC_ReasonForNotCollectingSample_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOutbreak_LocationRayon]  
on			[ref_GIS_sflOutbreak_LocationRayon].idfsReference = v.[sflOutbreak_LocationRayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_SentToOrganization] 
on			[ref_sflHCSample_SentToOrganization].idfsReference = v.[sflHCSample_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_Hospitalization] 
on			[ref_sflHC_Hospitalization].idfsReference = v.[sflHC_Hospitalization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflBss_NameOfHospital] 
on			[ref_sflBss_NameOfHospital].idfsReference = v.[sflBss_NameOfHospital_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflHC_PatientSex] 
on			[ref_sflHC_PatientSex].idfsReference = v.[sflHC_PatientSex_ID] 
left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOutbreak_Status] 
on			[ref_sflOutbreak_Status].idfsReference = v.[sflOutbreak_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflZD_CaseClassification] 
on			[ref_sflZD_CaseClassification].idfsReference = v.[sflZD_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflBss_AdminAntiviralMedication] 
on			[ref_sflBss_AdminAntiviralMedication].idfsReference = v.[sflBss_AdminAntiviralMedication_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52694620000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52694620000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVss_Settlement_ID], 
			[ref_GIS_sflVss_Settlement].[ExtendedName] as [sflVss_Settlement], 
			[ref_GIS_sflVss_Settlement].[name] as [sflVss_Settlement_ShortGISName], 
			v.[sflVss_Status_ID], 
			[ref_sflVss_Status].[name] as [sflVss_Status], 
			v.[sflVss_StartDate], 
			cast(	(	
			select distinct	IsNull(vss_sel.VectorType_name, N'') + IsNull(N': ' + vss_sel.VectorSubType_name, N'') + N';'
			from (
				select	distinct	r_vt_v_vss_vectors.[name] as VectorType_name, r_vs_v_vss_vectors.[name] as VectorSubType_name, vss_vectors.idfVectorSurveillanceSession
				from		tlbVectorSurveillanceSession vss_vectors 
					inner join	tlbVector v_vss_vectors 
					on			v_vss_vectors.idfVectorSurveillanceSession = vss_vectors.idfVectorSurveillanceSession 
								and v_vss_vectors.intRowStatus = 0 
					inner join	fnReferenceRepair(@LangID, 19000140) r_vt_v_vss_vectors 
					on			r_vt_v_vss_vectors.idfsReference = v_vss_vectors.idfsVectorType 
					inner join	fnReferenceRepair(@LangID, 19000141) r_vs_v_vss_vectors 
					on			r_vs_v_vss_vectors.idfsReference = v_vss_vectors.idfsVectorSubType 
				where		vss_vectors.idfVectorSurveillanceSession = v.sflVss_Vectors 
				union 
				select	distinct	r_vt_v_vss_vectors.[name] as VectorType_name, r_vs_v_vss_vectors.[name] as VectorSubType_name, vss_vectors_sum.idfVectorSurveillanceSession
				from		tlbVectorSurveillanceSessionSummary as vss_vectors_sum
					inner join trtVectorSubType tvst_vss_vectors_sum
					on tvst_vss_vectors_sum.idfsVectorSubType = vss_vectors_sum.idfsVectorSubType
					inner join	fnReferenceRepair(@LangID, 19000140) r_vt_v_vss_vectors 
					on			r_vt_v_vss_vectors.idfsReference = tvst_vss_vectors_sum.idfsVectorType
					inner join	fnReferenceRepair(@LangID, 19000141) r_vs_v_vss_vectors 
					on			r_vs_v_vss_vectors.idfsReference = vss_vectors_sum.idfsVectorSubType
					
				where		vss_vectors_sum.idfVectorSurveillanceSession = v.sflVss_Vectors 
				
			) as vss_sel
			for xml path('') 
		) as nvarchar(MAX)
	) as sflVss_Vectors, 
			v.[sflVss_ID], 
			v.[sflVss_Region_ID], 
			[ref_GIS_sflVss_Region].[ExtendedName] as [sflVss_Region], 
			[ref_GIS_sflVss_Region].[name] as [sflVss_Region_ShortGISName], 
			v.[sflVss_Rayon_ID], 
			[ref_GIS_sflVss_Rayon].[ExtendedName] as [sflVss_Rayon], 
			[ref_GIS_sflVss_Rayon].[name] as [sflVss_Rayon_ShortGISName], 
			v.[sflVssOutbreak_Type_ID], 
			[ref_sflVssOutbreak_Type].[name] as [sflVssOutbreak_Type], 
			v.[sflVss_OutbreakID], 
			v.[sflVss_Longitude], 
			v.[sflVss_Latitude], 
			v.[sflVss_FieldID], 
			v.[sflVss_Elevationm], 
			cast((	select		IsNull(r_d_vss_diagnoses.[name], N'') + N';' 
			from		tlbVectorSurveillanceSession vss_diagnoses 
			inner join	trtDiagnosis d_vss_diagnoses 
				inner join	fnReferenceRepair(@LangID, 19000019) r_d_vss_diagnoses 
				on			r_d_vss_diagnoses.idfsReference = d_vss_diagnoses.idfsDiagnosis 
			on			exists	( 
							select		* 
							from		tlbVector v_pt_vss_diagnoses 
							inner join	tlbMaterial m_pt_vss_diagnoses 
							on			m_pt_vss_diagnoses.idfVector = v_pt_vss_diagnoses.idfVector 
										and m_pt_vss_diagnoses.idfVectorSurveillanceSession = 
											v_pt_vss_diagnoses.idfVectorSurveillanceSession 
										and m_pt_vss_diagnoses.intRowStatus = 0 
							inner join	tlbPensideTest pt_vss_diagnoses 
							on			pt_vss_diagnoses.idfMaterial = m_pt_vss_diagnoses.idfMaterial 
										and pt_vss_diagnoses.intRowStatus = 0 
										and pt_vss_diagnoses.idfsDiagnosis = d_vss_diagnoses.idfsDiagnosis 
							inner join	trtPensideTestTypeToTestResult ptt_to_tr_vss_diagnoses 
							on			ptt_to_tr_vss_diagnoses.idfsPensideTestName = pt_vss_diagnoses.idfsPensideTestName 
										and ptt_to_tr_vss_diagnoses.idfsPensideTestResult = pt_vss_diagnoses.idfsPensideTestResult 
										and IsNull(ptt_to_tr_vss_diagnoses.blnIndicative, 0) = 1 
										and ptt_to_tr_vss_diagnoses.intRowStatus = 0 
							where		v_pt_vss_diagnoses.idfVectorSurveillanceSession = vss_diagnoses.idfVectorSurveillanceSession 
										and v_pt_vss_diagnoses.intRowStatus = 0 
							) 
						or	exists	( 
							select		* 
							from		tlbVector v_t_vss_diagnoses 
							inner join	tlbMaterial m_t_vss_diagnoses 
							on			m_t_vss_diagnoses.idfVector = v_t_vss_diagnoses.idfVector 
										and m_t_vss_diagnoses.idfVectorSurveillanceSession = 
											v_t_vss_diagnoses.idfVectorSurveillanceSession 
										and m_t_vss_diagnoses.intRowStatus = 0 
							inner join	tlbTesting t_vss_diagnoses 
							on			t_vss_diagnoses.idfMaterial = m_t_vss_diagnoses.idfMaterial 
										and t_vss_diagnoses.intRowStatus = 0 
										and t_vss_diagnoses.idfsDiagnosis = d_vss_diagnoses.idfsDiagnosis 
							inner join	trtTestTypeToTestResult tt_to_tr_vss_diagnoses 
							on			tt_to_tr_vss_diagnoses.idfsTestName = t_vss_diagnoses.idfsTestName 
										and tt_to_tr_vss_diagnoses.idfsTestResult = t_vss_diagnoses.idfsTestResult 
										and IsNull(tt_to_tr_vss_diagnoses.blnIndicative, 0) = 1 
										and tt_to_tr_vss_diagnoses.intRowStatus = 0 
							where		v_t_vss_diagnoses.idfVectorSurveillanceSession = vss_diagnoses.idfVectorSurveillanceSession 
										and v_t_vss_diagnoses.intRowStatus = 0 
									) 
						or	exists	( 
							select		* 
							from	tlbVectorSurveillanceSessionSummary vsss
								inner join tlbVectorSurveillanceSessionSummaryDiagnosis vsss_diag
								on vsss_diag.idfsVSSessionSummary = vsss.idfsVSSessionSummary
								and vsss_diag.idfsDiagnosis = d_vss_diagnoses.idfsDiagnosis
								and vsss_diag.intRowStatus = 0
								and isnull(vsss_diag.intPositiveQuantity, 0) > 0
							where		vsss.idfVectorSurveillanceSession = vss_diagnoses.idfVectorSurveillanceSession 
										and vsss.intRowStatus = 0 
									) 			
									
			where		vss_diagnoses.idfVectorSurveillanceSession = v.sflVss_Diagnoses 
			order by	r_d_vss_diagnoses.[name]
			for xml path('') 
		) as nvarchar(MAX)
	) as sflVss_Diagnoses 	
, 
			v.[sflVss_Country_ID], 
			[ref_GIS_sflVss_Country].[ExtendedName] as [sflVss_Country], 
			[ref_GIS_sflVss_Country].[name] as [sflVss_Country_ShortGISName], 
			v.[sflVss_Coordinates], 
			v.[sflVss_Duration], 
			v.[sflVss_CloseDate] 
from		vw1100SearchQuery__52694620000000 v

left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVss_Settlement]  
on			[ref_GIS_sflVss_Settlement].idfsReference = v.[sflVss_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000133) [ref_sflVss_Status] 
on			[ref_sflVss_Status].idfsReference = v.[sflVss_Status_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVss_Region]  
on			[ref_GIS_sflVss_Region].idfsReference = v.[sflVss_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVss_Rayon]  
on			[ref_GIS_sflVss_Rayon].idfsReference = v.[sflVss_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflVssOutbreak_Type] 
on			[ref_sflVssOutbreak_Type].idfsReference = v.[sflVssOutbreak_Type_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflVss_Country]  
on			[ref_GIS_sflVss_Country].idfsReference = v.[sflVss_Country_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflVss_StartDate] >=  N'20220101'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52713060000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52713060000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflFA_FarmType_ID], 
			[ref_sflFA_FarmType].[name] as [sflFA_FarmType], 
			v.[sflFA_FarmSettlement_ID], 
			[ref_GIS_sflFA_FarmSettlement].[ExtendedName] as [sflFA_FarmSettlement], 
			[ref_GIS_sflFA_FarmSettlement].[name] as [sflFA_FarmSettlement_ShortGISName], 
			v.[sflFA_FarmRegion_ID], 
			[ref_GIS_sflFA_FarmRegion].[ExtendedName] as [sflFA_FarmRegion], 
			[ref_GIS_sflFA_FarmRegion].[name] as [sflFA_FarmRegion_ShortGISName], 
			v.[sflFA_FarmRayon_ID], 
			[ref_GIS_sflFA_FarmRayon].[ExtendedName] as [sflFA_FarmRayon], 
			[ref_GIS_sflFA_FarmRayon].[name] as [sflFA_FarmRayon_ShortGISName], 
			v.[sflFA_FarmPostalCode], 
			v.[sflFA_FarmPhone], 
			v.[sflFA_FarmOwner], 
			v.[sflFA_FarmName], 
			v.[sflFA_FarmLongitude], 
			v.[sflFA_FarmLatitude], 
			v.[sflFA_FarmID], 
			v.[sflFA_FarmFax], 
			v.[sflFA_FarmEmail], 
			v.[sflFA_FarmDateLastUpdated], 
			v.[sflFA_FarmCountry_ID], 
			[ref_GIS_sflFA_FarmCountry].[ExtendedName] as [sflFA_FarmCountry], 
			[ref_GIS_sflFA_FarmCountry].[name] as [sflFA_FarmCountry_ShortGISName], 
			v.[sflFA_FarmCoordinates], 
			v.[sflFA_FarmAddress_ID], 
			[ref_GL_sflFA_FarmAddress].[strDefaultShortAddressString] as [sflFA_FarmAddress] 
from		vw1100SearchQuery__52713060000000 v

left join	fnAccessoryCode(@LangID) [ref_sflFA_FarmType] 
on			[ref_sflFA_FarmType].intHACode = v.[sflFA_FarmType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflFA_FarmSettlement]  
on			[ref_GIS_sflFA_FarmSettlement].idfsReference = v.[sflFA_FarmSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflFA_FarmRegion]  
on			[ref_GIS_sflFA_FarmRegion].idfsReference = v.[sflFA_FarmRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflFA_FarmRayon]  
on			[ref_GIS_sflFA_FarmRayon].idfsReference = v.[sflFA_FarmRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflFA_FarmCountry]  
on			[ref_GIS_sflFA_FarmCountry].idfsReference = v.[sflFA_FarmCountry_ID] 
left join	fnGeoLocationSharedTranslation(@LangID) [ref_GL_sflFA_FarmAddress]  
on			[ref_GL_sflFA_FarmAddress].idfGeoLocationShared = v.[sflFA_FarmAddress_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52749600000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52749600000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflASCampaign_CampaignType_ID], 
			[ref_sflASCampaign_CampaignType].[name] as [sflASCampaign_CampaignType], 
			v.[sflASCampaign_CampaignStatus_ID], 
			[ref_sflASCampaign_CampaignStatus].[name] as [sflASCampaign_CampaignStatus], 
			v.[sflASCampaign_StartDate], 
			v.[sflASCampaign_CampaignName], 
			v.[sflASCampaign_EndDate], 
			cast((
	select		distinct ASCampaignDiagnosis.[name] + '; ' 
	from		tlbCampaignToDiagnosis CampaignToDiagnosesString
	inner join	fnReferenceRepair(@LangID, 19000019)	ASCampaignDiagnosis	-- rftDiagnosis
	on			ASCampaignDiagnosis.idfsReference = CampaignToDiagnosesString.idfsDiagnosis
	where		CampaignToDiagnosesString.idfCampaign = v.[sflASCampaign_DiagnosesString]
				and CampaignToDiagnosesString.intRowStatus = 0
	order by	ASCampaignDiagnosis.[name] + '; ' 
	for xml path('')		
	) as nvarchar(max)) as [sflASCampaign_DiagnosesString] , 
			v.[sflASCampaign_CampaignID], 
			v.[sflASCampaign_Administrator] 
from		vw1100SearchQuery__52749600000000 v

left join	fnReferenceRepair(@LangID, 19000116) [ref_sflASCampaign_CampaignType] 
on			[ref_sflASCampaign_CampaignType].idfsReference = v.[sflASCampaign_CampaignType_ID] 
left join	fnReferenceRepair(@LangID, 19000115) [ref_sflASCampaign_CampaignStatus] 
on			[ref_sflASCampaign_CampaignStatus].idfsReference = v.[sflASCampaign_CampaignStatus_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52754160000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52754160000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflASCampaign_CampaignType_ID], 
			[ref_sflASCampaign_CampaignType].[name] as [sflASCampaign_CampaignType], 
			v.[sflASCampaign_CampaignStatus_ID], 
			[ref_sflASCampaign_CampaignStatus].[name] as [sflASCampaign_CampaignStatus], 
			v.[sflASCampaign_StartDate], 
			v.[sflASCampaign_CampaignName], 
			v.[sflASCampaign_EndDate], 
			cast((
	select		distinct ASCampaignDiagnosis.[name] + '; ' 
	from		tlbCampaignToDiagnosis CampaignToDiagnosesString
	inner join	fnReferenceRepair(@LangID, 19000019)	ASCampaignDiagnosis	-- rftDiagnosis
	on			ASCampaignDiagnosis.idfsReference = CampaignToDiagnosesString.idfsDiagnosis
	where		CampaignToDiagnosesString.idfCampaign = v.[sflASCampaign_DiagnosesString]
				and CampaignToDiagnosesString.intRowStatus = 0
	order by	ASCampaignDiagnosis.[name] + '; ' 
	for xml path('')		
	) as nvarchar(max)) as [sflASCampaign_DiagnosesString] , 
			v.[sflASCampaign_CampaignID], 
			v.[sflASCampaign_Administrator], 
			v.[sflASSession_AddressSettlement_ID], 
			[ref_GIS_sflASSession_AddressSettlement].[ExtendedName] as [sflASSession_AddressSettlement], 
			[ref_GIS_sflASSession_AddressSettlement].[name] as [sflASSession_AddressSettlement_ShortGISName], 
			v.[sflASSession_AddressRegion_ID], 
			[ref_GIS_sflASSession_AddressRegion].[ExtendedName] as [sflASSession_AddressRegion], 
			[ref_GIS_sflASSession_AddressRegion].[name] as [sflASSession_AddressRegion_ShortGISName], 
			v.[sflASSession_AddressRayon_ID], 
			[ref_GIS_sflASSession_AddressRayon].[ExtendedName] as [sflASSession_AddressRayon], 
			[ref_GIS_sflASSession_AddressRayon].[name] as [sflASSession_AddressRayon_ShortGISName], 
			v.[sflASSession_AddressElevationm], 
			v.[sflASSession_AddressCountry_ID], 
			[ref_GIS_sflASSession_AddressCountry].[ExtendedName] as [sflASSession_AddressCountry], 
			[ref_GIS_sflASSession_AddressCountry].[name] as [sflASSession_AddressCountry_ShortGISName], 
			v.[sflASSession_SessionStatus_ID], 
			[ref_sflASSession_SessionStatus].[name] as [sflASSession_SessionStatus], 
			v.[sflASSession_StartDate], 
			v.[sflASSession_SessionID], 
			v.[sflASSession_EnteredDate], 
			v.[sflASSession_EndDate], 
			cast((
	select		distinct ASSessionDiagnosis.[name] + '; ' 
	from		tlbMonitoringSessionToDiagnosis SessionToDiagnosesString
	inner join	fnReferenceRepair(@LangID, 19000019)	ASSessionDiagnosis	-- rftDiagnosis
	on			ASSessionDiagnosis.idfsReference = SessionToDiagnosesString.idfsDiagnosis
	where		SessionToDiagnosesString.idfMonitoringSession = v.[sflASSession_DiagnosesString]
				and SessionToDiagnosesString.intRowStatus = 0
	order by	ASSessionDiagnosis.[name] + '; ' 
	for xml path('')		
	) as nvarchar(max)) as [sflASSession_DiagnosesString] , 
			v.[sflASSession_CampaignType_ID], 
			[ref_sflASSession_CampaignType].[name] as [sflASSession_CampaignType], 
			v.[sflASSession_CampaignName], 
			v.[sflASSession_CampaignID] 
from		vw1100SearchQuery__52754160000000 v

left join	fnReferenceRepair(@LangID, 19000116) [ref_sflASCampaign_CampaignType] 
on			[ref_sflASCampaign_CampaignType].idfsReference = v.[sflASCampaign_CampaignType_ID] 
left join	fnReferenceRepair(@LangID, 19000115) [ref_sflASCampaign_CampaignStatus] 
on			[ref_sflASCampaign_CampaignStatus].idfsReference = v.[sflASCampaign_CampaignStatus_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflASSession_AddressSettlement]  
on			[ref_GIS_sflASSession_AddressSettlement].idfsReference = v.[sflASSession_AddressSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflASSession_AddressRegion]  
on			[ref_GIS_sflASSession_AddressRegion].idfsReference = v.[sflASSession_AddressRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflASSession_AddressRayon]  
on			[ref_GIS_sflASSession_AddressRayon].idfsReference = v.[sflASSession_AddressRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflASSession_AddressCountry]  
on			[ref_GIS_sflASSession_AddressCountry].idfsReference = v.[sflASSession_AddressCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000117) [ref_sflASSession_SessionStatus] 
on			[ref_sflASSession_SessionStatus].idfsReference = v.[sflASSession_SessionStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflASSession_CampaignType] 
on			[ref_sflASSession_CampaignType].idfsReference = v.[sflASSession_CampaignType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52759970000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52759970000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflASSession_AddressSettlement_ID], 
			[ref_GIS_sflASSession_AddressSettlement].[ExtendedName] as [sflASSession_AddressSettlement], 
			[ref_GIS_sflASSession_AddressSettlement].[name] as [sflASSession_AddressSettlement_ShortGISName], 
			v.[sflASSession_AddressRegion_ID], 
			[ref_GIS_sflASSession_AddressRegion].[ExtendedName] as [sflASSession_AddressRegion], 
			[ref_GIS_sflASSession_AddressRegion].[name] as [sflASSession_AddressRegion_ShortGISName], 
			v.[sflASSession_AddressRayon_ID], 
			[ref_GIS_sflASSession_AddressRayon].[ExtendedName] as [sflASSession_AddressRayon], 
			[ref_GIS_sflASSession_AddressRayon].[name] as [sflASSession_AddressRayon_ShortGISName], 
			v.[sflASSession_AddressElevationm], 
			v.[sflASSession_AddressCountry_ID], 
			[ref_GIS_sflASSession_AddressCountry].[ExtendedName] as [sflASSession_AddressCountry], 
			[ref_GIS_sflASSession_AddressCountry].[name] as [sflASSession_AddressCountry_ShortGISName], 
			v.[sflASSession_SessionStatus_ID], 
			[ref_sflASSession_SessionStatus].[name] as [sflASSession_SessionStatus], 
			v.[sflASSession_StartDate], 
			v.[sflASSession_SessionID], 
			v.[sflASSession_EnteredDate], 
			v.[sflASSession_EndDate], 
			cast((
	select		distinct ASSessionDiagnosis.[name] + '; ' 
	from		tlbMonitoringSessionToDiagnosis SessionToDiagnosesString
	inner join	fnReferenceRepair(@LangID, 19000019)	ASSessionDiagnosis	-- rftDiagnosis
	on			ASSessionDiagnosis.idfsReference = SessionToDiagnosesString.idfsDiagnosis
	where		SessionToDiagnosesString.idfMonitoringSession = v.[sflASSession_DiagnosesString]
				and SessionToDiagnosesString.intRowStatus = 0
	order by	ASSessionDiagnosis.[name] + '; ' 
	for xml path('')		
	) as nvarchar(max)) as [sflASSession_DiagnosesString] , 
			v.[sflASSession_CampaignType_ID], 
			[ref_sflASSession_CampaignType].[name] as [sflASSession_CampaignType], 
			v.[sflASSession_CampaignName], 
			v.[sflASSession_CampaignID] 
from		vw1100SearchQuery__52759970000000 v

left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflASSession_AddressSettlement]  
on			[ref_GIS_sflASSession_AddressSettlement].idfsReference = v.[sflASSession_AddressSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflASSession_AddressRegion]  
on			[ref_GIS_sflASSession_AddressRegion].idfsReference = v.[sflASSession_AddressRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflASSession_AddressRayon]  
on			[ref_GIS_sflASSession_AddressRayon].idfsReference = v.[sflASSession_AddressRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflASSession_AddressCountry]  
on			[ref_GIS_sflASSession_AddressCountry].idfsReference = v.[sflASSession_AddressCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000117) [ref_sflASSession_SessionStatus] 
on			[ref_sflASSession_SessionStatus].idfsReference = v.[sflASSession_SessionStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflASSession_CampaignType] 
on			[ref_sflASSession_CampaignType].idfsReference = v.[sflASSession_CampaignType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52771450000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52771450000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVC_ReportedByPersonIDType_ID], 
			[ref_sflVC_ReportedByPersonIDType].[name] as [sflVC_ReportedByPersonIDType], 
			v.[sflVC_ReportedByPersonID], 
			v.[sflVC_ReportedByPerson], 
			v.[sflVC_CaseReportType_ID], 
			[ref_sflVC_CaseReportType].[name] as [sflVC_CaseReportType], 
			v.[sflVC_FarmBuildings], 
			v.[sflVC_FarmBirdsPerBuildings], 
			v.[sflVC_InvestigatedByPersonIDType_ID], 
			[ref_sflVC_InvestigatedByPersonIDType].[name] as [sflVC_InvestigatedByPersonIDType], 
			v.[sflVC_InvestigatedByPersonID], 
			v.[sflVC_InvestigatedByPerson], 
			v.[sflVC_InvestigationDate], 
			v.[sflVC_ReportDate], 
			v.[sflVC_FieldAccessionID], 
			v.[sflVC_FarmPhone], 
			v.[sflVC_FarmOwnershipStructure_ID], 
			[ref_sflVC_FarmOwnershipStructure].[name] as [sflVC_FarmOwnershipStructure], 
			v.[sflVC_FarmOwner], 
			v.[sflVC_FarmName], 
			v.[sflVC_FarmID], 
			v.[sflVC_FarmFax], 
			v.[sflVC_FarmEMail], 
			v.[sflVC_FarmAddressSettlement_ID], 
			[ref_GIS_sflVC_FarmAddressSettlement].[ExtendedName] as [sflVC_FarmAddressSettlement], 
			[ref_GIS_sflVC_FarmAddressSettlement].[name] as [sflVC_FarmAddressSettlement_ShortGISName], 
			v.[sflVC_FarmAddressRegion_ID], 
			[ref_GIS_sflVC_FarmAddressRegion].[ExtendedName] as [sflVC_FarmAddressRegion], 
			[ref_GIS_sflVC_FarmAddressRegion].[name] as [sflVC_FarmAddressRegion_ShortGISName], 
			v.[sflVC_FarmAddressRayon_ID], 
			[ref_GIS_sflVC_FarmAddressRayon].[ExtendedName] as [sflVC_FarmAddressRayon], 
			[ref_GIS_sflVC_FarmAddressRayon].[name] as [sflVC_FarmAddressRayon_ShortGISName], 
			v.[sflVC_FarmLocationLongitude], 
			v.[sflVC_FarmLocationLatitude], 
			v.[sflVC_FarmLocationElevationm], 
			v.[sflVC_FarmAddressCountry_ID], 
			[ref_GIS_sflVC_FarmAddressCountry].[ExtendedName] as [sflVC_FarmAddressCountry], 
			[ref_GIS_sflVC_FarmAddressCountry].[name] as [sflVC_FarmAddressCountry_ShortGISName], 
			v.[sflVC_FarmLocationCoordinates], 
			v.[sflVC_EnteredDate], 
			v.[sflVC_SiteID_ID], 
			[ref_sflVC_SiteID].[name] as [sflVC_SiteID], 
			v.[sflVC_CollectedPersonalIDType_ID], 
			[ref_sflVC_CollectedPersonalIDType].[name] as [sflVC_CollectedPersonalIDType], 
			v.[sflVC_CollectedByPersonalID], 
			v.[sflVC_EnteredByPerson], 
			v.[sflVC_DiagnosesAndGroups_ID], 
			[ref_sflVC_DiagnosesAndGroups].[name] as [sflVC_DiagnosesAndGroups], 
			v.[sflVC_CaseType_ID], 
			[ref_sflVC_CaseType].[name] as [sflVC_CaseType], 
			v.[sflVC_CaseProgressStatus_ID], 
			[ref_sflVC_CaseProgressStatus].[name] as [sflVC_CaseProgressStatus], 
			v.[sflVC_CaseID], 
			v.[sflVC_CaseClassification_ID], 
			[ref_sflVC_CaseClassification].[name] as [sflVC_CaseClassification], 
			v.[sflVC_FinalDiagnosisDate], 
			v.[sflVC_FinalDiagnosisCode], 
			v.[sflVC_FinalDiagnosisIsZoonotic_ID], 
			[ref_sflVC_FinalDiagnosisIsZoonotic].[name] as [sflVC_FinalDiagnosisIsZoonotic], 
			v.[sflVC_FinalDiagnosis_ID], 
			[ref_sflVC_FinalDiagnosis].[name] as [sflVC_FinalDiagnosis], 
			v.[sflVC_DaysAfterReporting], 
			v.[sflVC_AvianFarmType_ID], 
			[ref_sflVC_AvianFarmType].[name] as [sflVC_AvianFarmType], 
			v.[sflVC_AssignedDate] 
from		vw1100SearchQuery__52771450000000 v

left join	fnReferenceRepair(@LangID, 19000148) [ref_sflVC_ReportedByPersonIDType] 
on			[ref_sflVC_ReportedByPersonIDType].idfsReference = v.[sflVC_ReportedByPersonIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000144) [ref_sflVC_CaseReportType] 
on			[ref_sflVC_CaseReportType].idfsReference = v.[sflVC_CaseReportType_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflVC_InvestigatedByPersonIDType] 
on			[ref_sflVC_InvestigatedByPersonIDType].idfsReference = v.[sflVC_InvestigatedByPersonIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000065) [ref_sflVC_FarmOwnershipStructure] 
on			[ref_sflVC_FarmOwnershipStructure].idfsReference = v.[sflVC_FarmOwnershipStructure_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVC_FarmAddressSettlement]  
on			[ref_GIS_sflVC_FarmAddressSettlement].idfsReference = v.[sflVC_FarmAddressSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVC_FarmAddressRegion]  
on			[ref_GIS_sflVC_FarmAddressRegion].idfsReference = v.[sflVC_FarmAddressRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVC_FarmAddressRayon]  
on			[ref_GIS_sflVC_FarmAddressRayon].idfsReference = v.[sflVC_FarmAddressRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflVC_FarmAddressCountry]  
on			[ref_GIS_sflVC_FarmAddressCountry].idfsReference = v.[sflVC_FarmAddressCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVC_SiteID] 
on			[ref_sflVC_SiteID].idfsReference = v.[sflVC_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflVC_CollectedPersonalIDType] 
on			[ref_sflVC_CollectedPersonalIDType].idfsReference = v.[sflVC_CollectedPersonalIDType_ID] 
left join	fnDiagnosesAndGroups(@LangID) [ref_sflVC_DiagnosesAndGroups] 
on			[ref_sflVC_DiagnosesAndGroups].idfsDiagnosisOrDiagnosisGroup = v.[sflVC_DiagnosesAndGroups_ID] 
left join	fnReferenceRepair(@LangID, 19000012) [ref_sflVC_CaseType] 
on			[ref_sflVC_CaseType].idfsReference = v.[sflVC_CaseType_ID] 
left join	fnReferenceRepair(@LangID, 19000111) [ref_sflVC_CaseProgressStatus] 
on			[ref_sflVC_CaseProgressStatus].idfsReference = v.[sflVC_CaseProgressStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflVC_CaseClassification] 
on			[ref_sflVC_CaseClassification].idfsReference = v.[sflVC_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVC_FinalDiagnosisIsZoonotic] 
on			[ref_sflVC_FinalDiagnosisIsZoonotic].idfsReference = v.[sflVC_FinalDiagnosisIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVC_FinalDiagnosis] 
on			[ref_sflVC_FinalDiagnosis].idfsReference = v.[sflVC_FinalDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000008) [ref_sflVC_AvianFarmType] 
on			[ref_sflVC_AvianFarmType].idfsReference = v.[sflVC_AvianFarmType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflVC_EnteredDate] >=  N'20220101'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52784110000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52784110000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAD_Total], 
			v.[sflVAD_TimeIntervalUnit_ID], 
			[ref_sflVAD_TimeIntervalUnit].[name] as [sflVAD_TimeIntervalUnit], 
			v.[sflVAD_StartDate], 
			v.[sflVAD_GroupingDate], 
			v.[sflVAD_EndDate], 
			v.[sflVAD_Settlement_ID], 
			[ref_GIS_sflVAD_Settlement].[ExtendedName] as [sflVAD_Settlement], 
			[ref_GIS_sflVAD_Settlement].[name] as [sflVAD_Settlement_ShortGISName], 
			v.[sflVAD_Region_ID], 
			[ref_GIS_sflVAD_Region].[ExtendedName] as [sflVAD_Region], 
			[ref_GIS_sflVAD_Region].[name] as [sflVAD_Region_ShortGISName], 
			v.[sflVAD_Rayon_ID], 
			[ref_GIS_sflVAD_Rayon].[ExtendedName] as [sflVAD_Rayon], 
			[ref_GIS_sflVAD_Rayon].[name] as [sflVAD_Rayon_ShortGISName], 
			v.[sflVAD_OIEcode], 
			v.[sflVAD_NotificationSentDate], 
			v.[sflVAD_SentByOfficer], 
			v.[sflVAD_SentByInstitution_ID], 
			[ref_sflVAD_SentByInstitution].[name] as [sflVAD_SentByInstitution], 
			v.[sflVAD_SentByInstitutionID], 
			v.[sflVAD_NotificationReceivDate], 
			v.[sflVAD_ReceivedByOfficer], 
			v.[sflVAD_ReceivedByInst_ID], 
			[ref_sflVAD_ReceivedByInst].[name] as [sflVAD_ReceivedByInst], 
			v.[sflVAD_ReceiveByInstitutionID], 
			v.[sflVAD_EnteredByOrganizationID], 
			v.[sflVAD_SiteID_ID], 
			[ref_sflVAD_SiteID].[name] as [sflVAD_SiteID], 
			v.[sflVAD_EnteredByPerson], 
			v.[sflVAD_IsZoonotic_ID], 
			[ref_sflVAD_IsZoonotic].[name] as [sflVAD_IsZoonotic], 
			v.[sflVAD_Diagnosis_ID], 
			[ref_sflVAD_Diagnosis].[name] as [sflVAD_Diagnosis], 
			v.[sflVAD_DateOfEntry], 
			v.[sflVAD_CaseID], 
			v.[sflVAD_AdministrativeLevel_ID], 
			[ref_sflVAD_AdministrativeLevel].[name] as [sflVAD_AdministrativeLevel] 
from		vw1100SearchQuery__52784110000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAD_TimeIntervalUnit] 
on			[ref_sflVAD_TimeIntervalUnit].idfsReference = v.[sflVAD_TimeIntervalUnit_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAD_Settlement]  
on			[ref_GIS_sflVAD_Settlement].idfsReference = v.[sflVAD_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAD_Region]  
on			[ref_GIS_sflVAD_Region].idfsReference = v.[sflVAD_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAD_Rayon]  
on			[ref_GIS_sflVAD_Rayon].idfsReference = v.[sflVAD_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAD_SentByInstitution] 
on			[ref_sflVAD_SentByInstitution].idfsReference = v.[sflVAD_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAD_ReceivedByInst] 
on			[ref_sflVAD_ReceivedByInst].idfsReference = v.[sflVAD_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAD_SiteID] 
on			[ref_sflVAD_SiteID].idfsReference = v.[sflVAD_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVAD_IsZoonotic] 
on			[ref_sflVAD_IsZoonotic].idfsReference = v.[sflVAD_IsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVAD_Diagnosis] 
on			[ref_sflVAD_Diagnosis].idfsReference = v.[sflVAD_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAD_AdministrativeLevel] 
on			[ref_sflVAD_AdministrativeLevel].idfsReference = v.[sflVAD_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52793690000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52793690000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAIA_Total], 
			v.[sflVAIA_TimeIntervalUnit_ID], 
			[ref_sflVAIA_TimeIntervalUnit].[name] as [sflVAIA_TimeIntervalUnit], 
			v.[sflVAIA_StartDate], 
			v.[sflVAIA_GroupingDate], 
			v.[sflVAIA_EndDate], 
			v.[sflVAIA_AnimalSpecies_ID], 
			[ref_sflVAIA_AnimalSpecies].[name] as [sflVAIA_AnimalSpecies], 
			v.[sflVAIA_Settlement_ID], 
			[ref_GIS_sflVAIA_Settlement].[ExtendedName] as [sflVAIA_Settlement], 
			[ref_GIS_sflVAIA_Settlement].[name] as [sflVAIA_Settlement_ShortGISName], 
			v.[sflVAIA_Region_ID], 
			[ref_GIS_sflVAIA_Region].[ExtendedName] as [sflVAIA_Region], 
			[ref_GIS_sflVAIA_Region].[name] as [sflVAIA_Region_ShortGISName], 
			v.[sflVAIA_Rayon_ID], 
			[ref_GIS_sflVAIA_Rayon].[ExtendedName] as [sflVAIA_Rayon], 
			[ref_GIS_sflVAIA_Rayon].[name] as [sflVAIA_Rayon_ShortGISName], 
			v.[sflVAIA_OIAcode], 
			v.[sflVAIA_NotificationSentDate], 
			v.[sflVAIA_SentByOfficer], 
			v.[sflVAIA_SentByInstitution_ID], 
			[ref_sflVAIA_SentByInstitution].[name] as [sflVAIA_SentByInstitution], 
			v.[sflVAIA_SentByInstitutionID], 
			v.[sflVAIA_NotificationReceivDate], 
			v.[sflVAIA_ReceivedByOfficer], 
			v.[sflVAIA_ReceivedByInst_ID], 
			[ref_sflVAIA_ReceivedByInst].[name] as [sflVAIA_ReceivedByInst], 
			v.[sflVAIA_ReceiveByInstitutionID], 
			v.[sflVAIA_InvestigationType_ID], 
			[ref_sflVAIA_InvestigationType].[name] as [sflVAIA_InvestigationType], 
			v.[sflVAIA_EnteredByOrganizationID], 
			v.[sflVAIA_SiteID_ID], 
			[ref_sflVAIA_SiteID].[name] as [sflVAIA_SiteID], 
			v.[sflVAIA_EnteredByPerson], 
			v.[sflVAIA_FinalDiagnosis_ID], 
			[ref_sflVAIA_FinalDiagnosis].[name] as [sflVAIA_FinalDiagnosis], 
			v.[sflVAIA_DateOfEntry], 
			v.[sflVAIA_CaseID], 
			v.[sflVAIA_AdministrativeLevel_ID], 
			[ref_sflVAIA_AdministrativeLevel].[name] as [sflVAIA_AdministrativeLevel] 
from		vw1100SearchQuery__52793690000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAIA_TimeIntervalUnit] 
on			[ref_sflVAIA_TimeIntervalUnit].idfsReference = v.[sflVAIA_TimeIntervalUnit_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVAIA_AnimalSpecies] 
on			[ref_sflVAIA_AnimalSpecies].idfsReference = v.[sflVAIA_AnimalSpecies_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAIA_Settlement]  
on			[ref_GIS_sflVAIA_Settlement].idfsReference = v.[sflVAIA_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAIA_Region]  
on			[ref_GIS_sflVAIA_Region].idfsReference = v.[sflVAIA_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAIA_Rayon]  
on			[ref_GIS_sflVAIA_Rayon].idfsReference = v.[sflVAIA_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIA_SentByInstitution] 
on			[ref_sflVAIA_SentByInstitution].idfsReference = v.[sflVAIA_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIA_ReceivedByInst] 
on			[ref_sflVAIA_ReceivedByInst].idfsReference = v.[sflVAIA_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000144) [ref_sflVAIA_InvestigationType] 
on			[ref_sflVAIA_InvestigationType].idfsReference = v.[sflVAIA_InvestigationType_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAIA_SiteID] 
on			[ref_sflVAIA_SiteID].idfsReference = v.[sflVAIA_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVAIA_FinalDiagnosis] 
on			[ref_sflVAIA_FinalDiagnosis].idfsReference = v.[sflVAIA_FinalDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAIA_AdministrativeLevel] 
on			[ref_sflVAIA_AdministrativeLevel].idfsReference = v.[sflVAIA_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52870310000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52870310000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAIAC_Total], 
			v.[sflVAIAC_TimeIntervalUnit_ID], 
			[ref_sflVAIAC_TimeIntervalUnit].[name] as [sflVAIAC_TimeIntervalUnit], 
			v.[sflVAIAC_StartDate], 
			v.[sflVAIAC_GroupingDate], 
			v.[sflVAIAC_EndDate], 
			v.[sflVAIAC_AnimalSpecies_ID], 
			[ref_sflVAIAC_AnimalSpecies].[name] as [sflVAIAC_AnimalSpecies], 
			v.[sflVAIAC_Settlement_ID], 
			[ref_GIS_sflVAIAC_Settlement].[ExtendedName] as [sflVAIAC_Settlement], 
			[ref_GIS_sflVAIAC_Settlement].[name] as [sflVAIAC_Settlement_ShortGISName], 
			v.[sflVAIAC_Region_ID], 
			[ref_GIS_sflVAIAC_Region].[ExtendedName] as [sflVAIAC_Region], 
			[ref_GIS_sflVAIAC_Region].[name] as [sflVAIAC_Region_ShortGISName], 
			v.[sflVAIAC_Rayon_ID], 
			[ref_GIS_sflVAIAC_Rayon].[ExtendedName] as [sflVAIAC_Rayon], 
			[ref_GIS_sflVAIAC_Rayon].[name] as [sflVAIAC_Rayon_ShortGISName], 
			v.[sflVAIAC_OIEcode], 
			v.[sflVAIAC_NotificationSentDate], 
			v.[sflVAIAC_SentByOfficer], 
			v.[sflVAIAC_SentByInstitution_ID], 
			[ref_sflVAIAC_SentByInstitution].[name] as [sflVAIAC_SentByInstitution], 
			v.[sflVAIAC_NotificationReceivDate], 
			v.[sflVAIAC_ReceivedByOfficer], 
			v.[sflVAIAC_ReceivedByInst_ID], 
			[ref_sflVAIAC_ReceivedByInst].[name] as [sflVAIAC_ReceivedByInst], 
			v.[sflVAIAC_ReceiveByInstitutionID], 
			v.[sflVAIAC_MethodOfMeasurement_ID], 
			[ref_sflVAIAC_MethodOfMeasurement].[name] as [sflVAIAC_MethodOfMeasurement], 
			v.[sflVAIAC_EnteredByOrganizationID], 
			v.[sflVAIAC_SiteID_ID], 
			[ref_sflVAIAC_SiteID].[name] as [sflVAIAC_SiteID], 
			v.[sflVAIAC_EnteredByPerson], 
			v.[sflVAIAC_DiagnosesString], 
			v.[sflVAIAC_DateOfEntry], 
			v.[sflVAIAC_CaseID], 
			v.[sflVAIAC_AdministrativeLevel_ID], 
			[ref_sflVAIAC_AdministrativeLevel].[name] as [sflVAIAC_AdministrativeLevel] 
from		vw1100SearchQuery__52870310000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAIAC_TimeIntervalUnit] 
on			[ref_sflVAIAC_TimeIntervalUnit].idfsReference = v.[sflVAIAC_TimeIntervalUnit_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVAIAC_AnimalSpecies] 
on			[ref_sflVAIAC_AnimalSpecies].idfsReference = v.[sflVAIAC_AnimalSpecies_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAIAC_Settlement]  
on			[ref_GIS_sflVAIAC_Settlement].idfsReference = v.[sflVAIAC_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAIAC_Region]  
on			[ref_GIS_sflVAIAC_Region].idfsReference = v.[sflVAIAC_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAIAC_Rayon]  
on			[ref_GIS_sflVAIAC_Rayon].idfsReference = v.[sflVAIAC_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIAC_SentByInstitution] 
on			[ref_sflVAIAC_SentByInstitution].idfsReference = v.[sflVAIAC_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIAC_ReceivedByInst] 
on			[ref_sflVAIAC_ReceivedByInst].idfsReference = v.[sflVAIAC_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000160) [ref_sflVAIAC_MethodOfMeasurement] 
on			[ref_sflVAIAC_MethodOfMeasurement].idfsReference = v.[sflVAIAC_MethodOfMeasurement_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAIAC_SiteID] 
on			[ref_sflVAIAC_SiteID].idfsReference = v.[sflVAIAC_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAIAC_AdministrativeLevel] 
on			[ref_sflVAIAC_AdministrativeLevel].idfsReference = v.[sflVAIAC_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__52877960000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__52877960000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAPA_Total], 
			v.[sflVAPA_TimeIntervalUnit_ID], 
			[ref_sflVAPA_TimeIntervalUnit].[name] as [sflVAPA_TimeIntervalUnit], 
			v.[sflVAPA_StartDate], 
			v.[sflVAPA_GroupingDate], 
			v.[sflVAPA_EndDate], 
			v.[sflVAPA_Settlement_ID], 
			[ref_GIS_sflVAPA_Settlement].[ExtendedName] as [sflVAPA_Settlement], 
			[ref_GIS_sflVAPA_Settlement].[name] as [sflVAPA_Settlement_ShortGISName], 
			v.[sflVAPA_Region_ID], 
			[ref_GIS_sflVAPA_Region].[ExtendedName] as [sflVAPA_Region], 
			[ref_GIS_sflVAPA_Region].[name] as [sflVAPA_Region_ShortGISName], 
			v.[sflVAPA_Rayon_ID], 
			[ref_GIS_sflVAPA_Rayon].[ExtendedName] as [sflVAPA_Rayon], 
			[ref_GIS_sflVAPA_Rayon].[name] as [sflVAPA_Rayon_ShortGISName], 
			v.[sflVAPA_NotificationSentDate], 
			v.[sflVAPA_SentByOfficer], 
			v.[sflVAPA_SentByInstitution_ID], 
			[ref_sflVAPA_SentByInstitution].[name] as [sflVAPA_SentByInstitution], 
			v.[sflVAPA_SentByInstitutionID], 
			v.[sflVAPA_NotificationReceivDate], 
			v.[sflVAPA_ReceivedByOfficer], 
			v.[sflVAPA_ReceivedByInst_ID], 
			[ref_sflVAPA_ReceivedByInst].[name] as [sflVAPA_ReceivedByInst], 
			v.[sflVAPA_ReceiveByInstitutionID], 
			v.[sflVAPA_MethodOfMeasurement_ID], 
			[ref_sflVAPA_MethodOfMeasurement].[name] as [sflVAPA_MethodOfMeasurement], 
			v.[sflVAPA_MeasureCode], 
			v.[sflVAPA_InvestigationType_ID], 
			[ref_sflVAPA_InvestigationType].[name] as [sflVAPA_InvestigationType], 
			v.[sflVAPA_EnteredByOrganizationID], 
			v.[sflVAPA_SiteID_ID], 
			[ref_sflVAPA_SiteID].[name] as [sflVAPA_SiteID], 
			v.[sflVAPA_EnteredByPerson], 
			v.[sflVAPA_DateOfEntry], 
			v.[sflVAPA_CaseID], 
			v.[sflVAPA_AdministrativeLevel_ID], 
			[ref_sflVAPA_AdministrativeLevel].[name] as [sflVAPA_AdministrativeLevel] 
from		vw1100SearchQuery__52877960000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAPA_TimeIntervalUnit] 
on			[ref_sflVAPA_TimeIntervalUnit].idfsReference = v.[sflVAPA_TimeIntervalUnit_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAPA_Settlement]  
on			[ref_GIS_sflVAPA_Settlement].idfsReference = v.[sflVAPA_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAPA_Region]  
on			[ref_GIS_sflVAPA_Region].idfsReference = v.[sflVAPA_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAPA_Rayon]  
on			[ref_GIS_sflVAPA_Rayon].idfsReference = v.[sflVAPA_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAPA_SentByInstitution] 
on			[ref_sflVAPA_SentByInstitution].idfsReference = v.[sflVAPA_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAPA_ReceivedByInst] 
on			[ref_sflVAPA_ReceivedByInst].idfsReference = v.[sflVAPA_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000160) [ref_sflVAPA_MethodOfMeasurement] 
on			[ref_sflVAPA_MethodOfMeasurement].idfsReference = v.[sflVAPA_MethodOfMeasurement_ID] 
left join	fnReferenceRepair(@LangID, 19000144) [ref_sflVAPA_InvestigationType] 
on			[ref_sflVAPA_InvestigationType].idfsReference = v.[sflVAPA_InvestigationType_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAPA_SiteID] 
on			[ref_sflVAPA_SiteID].idfsReference = v.[sflVAPA_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAPA_AdministrativeLevel] 
on			[ref_sflVAPA_AdministrativeLevel].idfsReference = v.[sflVAPA_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53023230000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53023230000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_EnteredDate], 
			v.[sflHC_Diagnosis_ID], 
			[ref_sflHC_Diagnosis].[name] as [sflHC_Diagnosis], 
			v.[sflHC_CaseID], 
			v.[sflHC_PatientCRRegion_ID], 
			[ref_GIS_sflHC_PatientCRRegion].[ExtendedName] as [sflHC_PatientCRRegion], 
			[ref_GIS_sflHC_PatientCRRegion].[name] as [sflHC_PatientCRRegion_ShortGISName] 
from		vw1100SearchQuery__53023230000000 v

left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHC_Diagnosis] 
on			[ref_sflHC_Diagnosis].idfsReference = v.[sflHC_Diagnosis_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_PatientCRRegion]  
on			[ref_GIS_sflHC_PatientCRRegion].idfsReference = v.[sflHC_PatientCRRegion_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53032080000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53032080000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_EnteredDate], 
			v.[sflHC_Diagnosis_ID], 
			[ref_sflHC_Diagnosis].[name] as [sflHC_Diagnosis], 
			v.[sflHC_CaseID], 
			v.[sflHC_PatientCRRegion_ID], 
			[ref_GIS_sflHC_PatientCRRegion].[ExtendedName] as [sflHC_PatientCRRegion], 
			[ref_GIS_sflHC_PatientCRRegion].[name] as [sflHC_PatientCRRegion_ShortGISName] 
from		vw1100SearchQuery__53032080000000 v

left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHC_Diagnosis] 
on			[ref_sflHC_Diagnosis].idfsReference = v.[sflHC_Diagnosis_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_PatientCRRegion]  
on			[ref_GIS_sflHC_PatientCRRegion].idfsReference = v.[sflHC_PatientCRRegion_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHC_EnteredDate] >=  N'20200101')and (v.[sflHC_EnteredDate] <=  N'20221231'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53046910000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53046910000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_CaseID], 
			v.[sflHCSample_CaseID] 
from		vw1100SearchQuery__53046910000000 v




--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53146280000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53146280000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVss_OutbreakID], 
			v.[sflVss_ID], 
			v.[sflVss_FieldID], 
			v.[sflVss_Status_ID], 
			[ref_sflVss_Status].[name] as [sflVss_Status] 
from		vw1100SearchQuery__53146280000000 v

left join	fnReferenceRepair(@LangID, 19000133) [ref_sflVss_Status] 
on			[ref_sflVss_Status].idfsReference = v.[sflVss_Status_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53147510000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53147510000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAIA_Total], 
			v.[sflVAIA_TimeIntervalUnit_ID], 
			[ref_sflVAIA_TimeIntervalUnit].[name] as [sflVAIA_TimeIntervalUnit], 
			v.[sflVAIA_StartDate], 
			v.[sflVAIA_GroupingDate], 
			v.[sflVAIA_EndDate], 
			v.[sflVAIA_AnimalSpecies_ID], 
			[ref_sflVAIA_AnimalSpecies].[name] as [sflVAIA_AnimalSpecies], 
			v.[sflVAIA_Settlement_ID], 
			[ref_GIS_sflVAIA_Settlement].[ExtendedName] as [sflVAIA_Settlement], 
			[ref_GIS_sflVAIA_Settlement].[name] as [sflVAIA_Settlement_ShortGISName], 
			v.[sflVAIA_Region_ID], 
			[ref_GIS_sflVAIA_Region].[ExtendedName] as [sflVAIA_Region], 
			[ref_GIS_sflVAIA_Region].[name] as [sflVAIA_Region_ShortGISName], 
			v.[sflVAIA_Rayon_ID], 
			[ref_GIS_sflVAIA_Rayon].[ExtendedName] as [sflVAIA_Rayon], 
			[ref_GIS_sflVAIA_Rayon].[name] as [sflVAIA_Rayon_ShortGISName], 
			v.[sflVAIA_OIAcode], 
			v.[sflVAIA_NotificationSentDate], 
			v.[sflVAIA_SentByOfficer], 
			v.[sflVAIA_SentByInstitution_ID], 
			[ref_sflVAIA_SentByInstitution].[name] as [sflVAIA_SentByInstitution], 
			v.[sflVAIA_SentByInstitutionID], 
			v.[sflVAIA_NotificationReceivDate], 
			v.[sflVAIA_ReceivedByOfficer], 
			v.[sflVAIA_ReceivedByInst_ID], 
			[ref_sflVAIA_ReceivedByInst].[name] as [sflVAIA_ReceivedByInst], 
			v.[sflVAIA_ReceiveByInstitutionID], 
			v.[sflVAIA_InvestigationType_ID], 
			[ref_sflVAIA_InvestigationType].[name] as [sflVAIA_InvestigationType], 
			v.[sflVAIA_EnteredByOrganizationID], 
			v.[sflVAIA_SiteID_ID], 
			[ref_sflVAIA_SiteID].[name] as [sflVAIA_SiteID], 
			v.[sflVAIA_EnteredByPerson], 
			v.[sflVAIA_FinalDiagnosis_ID], 
			[ref_sflVAIA_FinalDiagnosis].[name] as [sflVAIA_FinalDiagnosis], 
			v.[sflVAIA_DateOfEntry], 
			v.[sflVAIA_CaseID], 
			v.[sflVAIA_AdministrativeLevel_ID], 
			[ref_sflVAIA_AdministrativeLevel].[name] as [sflVAIA_AdministrativeLevel] 
from		vw1100SearchQuery__53147510000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAIA_TimeIntervalUnit] 
on			[ref_sflVAIA_TimeIntervalUnit].idfsReference = v.[sflVAIA_TimeIntervalUnit_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVAIA_AnimalSpecies] 
on			[ref_sflVAIA_AnimalSpecies].idfsReference = v.[sflVAIA_AnimalSpecies_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAIA_Settlement]  
on			[ref_GIS_sflVAIA_Settlement].idfsReference = v.[sflVAIA_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAIA_Region]  
on			[ref_GIS_sflVAIA_Region].idfsReference = v.[sflVAIA_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAIA_Rayon]  
on			[ref_GIS_sflVAIA_Rayon].idfsReference = v.[sflVAIA_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIA_SentByInstitution] 
on			[ref_sflVAIA_SentByInstitution].idfsReference = v.[sflVAIA_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIA_ReceivedByInst] 
on			[ref_sflVAIA_ReceivedByInst].idfsReference = v.[sflVAIA_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000144) [ref_sflVAIA_InvestigationType] 
on			[ref_sflVAIA_InvestigationType].idfsReference = v.[sflVAIA_InvestigationType_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAIA_SiteID] 
on			[ref_sflVAIA_SiteID].idfsReference = v.[sflVAIA_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVAIA_FinalDiagnosis] 
on			[ref_sflVAIA_FinalDiagnosis].idfsReference = v.[sflVAIA_FinalDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAIA_AdministrativeLevel] 
on			[ref_sflVAIA_AdministrativeLevel].idfsReference = v.[sflVAIA_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53194540000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53194540000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_TestConducted_ID], 
			[ref_sflHC_TestConducted].[name] as [sflHC_TestConducted], 
			v.[sflHC_PatientNotificationStatus_ID], 
			[ref_sflHC_PatientNotificationStatus].[name] as [sflHC_PatientNotificationStatus], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflHC_PatientSex_ID], 
			[ref_sflHC_PatientSex].[name] as [sflHC_PatientSex], 
			v.[sflHC_SamplesCollected_ID], 
			[ref_sflHC_SamplesCollected].[name] as [sflHC_SamplesCollected], 
			v.[sflHC_ReasonForNotCollectingSample_ID], 
			[ref_sflHC_ReasonForNotCollectingSample].[name] as [sflHC_ReasonForNotCollectingSample], 
			v.[sflHC_HospitalizationPlace], 
			v.[sflHC_PatientPersonalIDType_ID], 
			[ref_sflHC_PatientPersonalIDType].[name] as [sflHC_PatientPersonalIDType], 
			v.[sflHC_PatientPersonalID], 
			v.[sflHC_PatientName], 
			v.[sflHC_PatientCRSettlement_ID], 
			[ref_GIS_sflHC_PatientCRSettlement].[ExtendedName] as [sflHC_PatientCRSettlement], 
			[ref_GIS_sflHC_PatientCRSettlement].[name] as [sflHC_PatientCRSettlement_ShortGISName], 
			v.[sflHC_PatientCRRegion_ID], 
			[ref_GIS_sflHC_PatientCRRegion].[ExtendedName] as [sflHC_PatientCRRegion], 
			[ref_GIS_sflHC_PatientCRRegion].[name] as [sflHC_PatientCRRegion_ShortGISName], 
			v.[sflHC_PatientCRRayon_ID], 
			[ref_GIS_sflHC_PatientCRRayon].[ExtendedName] as [sflHC_PatientCRRayon], 
			[ref_GIS_sflHC_PatientCRRayon].[name] as [sflHC_PatientCRRayon_ShortGISName], 
			v.[sflHC_PatientCRLongitude], 
			v.[sflHC_PatientCRLatitudee], 
			v.[sflHC_PCRElevationm], 
			v.[sflHC_PatientCRCoordinates], 
			v.[sflHC_PatientCRAddress_ID], 
			[ref_GL_sflHC_PatientCRAddress].[strDefaultShortAddressString] as [sflHC_PatientCRAddress], 
			v.[sflHC_PatientAgeGroup], 
			v.[sflHC_Outcome_ID], 
			[ref_sflHC_Outcome].[name] as [sflHC_Outcome], 
			v.[sflHC_OtherLocation], 
			v.[sflHC_InvestigatedByOffice_ID], 
			[ref_sflHC_InvestigatedByOffice].[name] as [sflHC_InvestigatedByOffice], 
			v.[sflHC_InvestigatedByOfficeID], 
			v.[sflHC_PatientOccupation_ID], 
			[ref_sflHC_PatientOccupation].[name] as [sflHC_PatientOccupation], 
			v.[sflHC_SentByOfficerIDType_ID], 
			[ref_sflHC_SentByOfficerIDType].[name] as [sflHC_SentByOfficerIDType], 
			v.[sflHC_SentByOfficerID], 
			v.[sflHC_SentByPerson], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_SentByOfficeID], 
			v.[sflHC_ReceivedByOfficerIDType_ID], 
			[ref_sflHC_ReceivedByOfficerIDType].[name] as [sflHC_ReceivedByOfficerIDType], 
			v.[sflHC_ReceivedByOfficerID], 
			v.[sflHC_ReceivedByPerson], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflHC_ReceivedByOfficeID], 
			v.[sflHC_NotificationDate], 
			v.[sflHC_NonNotifiableDiagnosis_ID], 
			[ref_sflHC_NonNotifiableDiagnosis].[name] as [sflHC_NonNotifiableDiagnosis], 
			v.[sflHC_LocationSettlement_ID], 
			[ref_GIS_sflHC_LocationSettlement].[ExtendedName] as [sflHC_LocationSettlement], 
			[ref_GIS_sflHC_LocationSettlement].[name] as [sflHC_LocationSettlement_ShortGISName], 
			v.[sflHC_LocationRegion_ID], 
			[ref_GIS_sflHC_LocationRegion].[ExtendedName] as [sflHC_LocationRegion], 
			[ref_GIS_sflHC_LocationRegion].[name] as [sflHC_LocationRegion_ShortGISName], 
			v.[sflHC_LocationRayon_ID], 
			[ref_GIS_sflHC_LocationRayon].[ExtendedName] as [sflHC_LocationRayon], 
			[ref_GIS_sflHC_LocationRayon].[name] as [sflHC_LocationRayon_ShortGISName], 
			v.[sflHC_LocationLongitude], 
			v.[sflHC_LocationLatitude], 
			v.[sflHC_LocationIsForeignAddress_ID], 
			[ref_sflHC_LocationIsForeignAddress].[name] as [sflHC_LocationIsForeignAddress], 
			v.[sflHC_LocationForeignAddress], 
			v.[sflHC_LocationCountry_ID], 
			[ref_GIS_sflHC_LocationCountry].[ExtendedName] as [sflHC_LocationCountry], 
			[ref_GIS_sflHC_LocationCountry].[name] as [sflHC_LocationCountry_ShortGISName], 
			v.[sflHC_LocationCoordinates], 
			v.[sflHC_HospitalizationStatus_ID], 
			[ref_sflHC_HospitalizationStatus].[name] as [sflHC_HospitalizationStatus], 
			v.[sflHC_LocalID], 
			v.[sflHC_InitialCaseClassification_ID], 
			[ref_sflHC_InitialCaseClassification].[name] as [sflHC_InitialCaseClassification], 
			v.[sflHC_Hospitalization_ID], 
			[ref_sflHC_Hospitalization].[name] as [sflHC_Hospitalization], 
			v.[sflHC_HospitalNameID], 
			v.[sflHC_CurrentLocation_ID], 
			[ref_sflHC_CurrentLocation].[name] as [sflHC_CurrentLocation], 
			v.[sflHC_FinalCaseClassification_ID], 
			[ref_sflHC_FinalCaseClassification].[name] as [sflHC_FinalCaseClassification], 
			v.[sflHC_FacilityWherePatientFSC_ID], 
			[ref_sflHC_FacilityWherePatientFSC].[name] as [sflHC_FacilityWherePatientFSC], 
			v.[sflHC_FacilityWherePatientFSCCode], 
			v.[sflHC_EpiPersonalIDType_ID], 
			[ref_sflHC_EpiPersonalIDType].[name] as [sflHC_EpiPersonalIDType], 
			v.[sflHC_EpiPersonalID], 
			v.[sflHC_EpidemiologistName], 
			v.[sflHC_EnteredBySite_ID], 
			[ref_sflHC_EnteredBySite].[name] as [sflHC_EnteredBySite], 
			v.[sflHC_EnteredByOrganizationID], 
			v.[sflHC_EnteredByEmployer], 
			v.[sflHC_PatientEmployerPhone], 
			v.[sflHC_PatientEmployer], 
			v.[sflHC_CaseProgressStatus_ID], 
			[ref_sflHC_CaseProgressStatus].[name] as [sflHC_CaseProgressStatus], 
			v.[sflHC_CaseID], 
			v.[sflHC_CaseClassification_ID], 
			[ref_sflHC_CaseClassification].[name] as [sflHC_CaseClassification], 
			v.[sflHC_DiagnosesAndGroups_ID], 
			[ref_sflHC_DiagnosesAndGroups].[name] as [sflHC_DiagnosesAndGroups], 
			v.[sflHC_DiagnosisDate], 
			v.[sflHC_DiagnosisCode], 
			v.[sflHC_DiagnosisIsZoonotic_ID], 
			[ref_sflHC_DiagnosisIsZoonotic].[name] as [sflHC_DiagnosisIsZoonotic], 
			v.[sflHC_Diagnosis_ID], 
			[ref_sflHC_Diagnosis].[name] as [sflHC_Diagnosis], 
			v.[sflHC_DaysAfterSymptOnsetUntilFSC], 
			v.[sflHC_DaysAfterFSCUntilEntered], 
			v.[sflHC_DaysAfterFSCUntilFinalDiag], 
			v.[sflHC_DaysAfterOnsetSymptUntilNotif], 
			v.[sflHC_DaysAfterNotification], 
			v.[sflHC_DaysAfterNotifUntilCaseInvest], 
			v.[sflHC_DaysAfterFSCUntilNotif], 
			v.[sflHC_DaysAfterInitDiagUntilNotif], 
			v.[sflHC_PatientFirstSoughtCareDate], 
			v.[sflHC_SymptomOnsetDate], 
			v.[sflHC_FacilityLastVisitDate], 
			v.[sflHC_PatientHospitalizationDate], 
			v.[sflHC_DateFinalCaseClassification], 
			v.[sflHC_ExposureDate], 
			v.[sflHC_FinalDiagnosisDate], 
			v.[sflHC_PatientDischargeDate], 
			v.[sflHC_PatientDeathDate], 
			v.[sflHC_CompletionPaperFormDate], 
			v.[sflHC_PatientDOB], 
			v.[sflHC_ModificationDate], 
			v.[sflHC_EnteredDate], 
			v.[sflHC_PatientNationality_ID], 
			[ref_sflHC_PatientNationality].[name] as [sflHC_PatientNationality], 
			v.[sflHC_LabDiagBasis_ID], 
			[ref_sflHC_LabDiagBasis].[name] as [sflHC_LabDiagBasis], 
			v.[sflHC_EpiDiagBasis_ID], 
			[ref_sflHC_EpiDiagBasis].[name] as [sflHC_EpiDiagBasis], 
			v.[sflHC_ClinicalDiagBasis_ID], 
			[ref_sflHC_ClinicalDiagBasis].[name] as [sflHC_ClinicalDiagBasis], 
			v.[sflHC_AntimicrobialTherapy_ID], 
			[ref_sflHC_AntimicrobialTherapy].[name] as [sflHC_AntimicrobialTherapy], 
			v.[sflHC_PatientAgeType_ID], 
			[ref_sflHC_PatientAgeType].[name] as [sflHC_PatientAgeType], 
			v.[sflHC_PatientAge], 
			v.[sflHC_PatientPhone] 
from		vw1100SearchQuery__53194540000000 v

left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_TestConducted] 
on			[ref_sflHC_TestConducted].idfsReference = v.[sflHC_TestConducted_ID] 
left join	fnReferenceRepair(@LangID, 19000035) [ref_sflHC_PatientNotificationStatus] 
on			[ref_sflHC_PatientNotificationStatus].idfsReference = v.[sflHC_PatientNotificationStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflHC_PatientSex] 
on			[ref_sflHC_PatientSex].idfsReference = v.[sflHC_PatientSex_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_SamplesCollected] 
on			[ref_sflHC_SamplesCollected].idfsReference = v.[sflHC_SamplesCollected_ID] 
left join	fnReferenceRepair(@LangID, 19000150) [ref_sflHC_ReasonForNotCollectingSample] 
on			[ref_sflHC_ReasonForNotCollectingSample].idfsReference = v.[sflHC_ReasonForNotCollectingSample_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_PatientPersonalIDType] 
on			[ref_sflHC_PatientPersonalIDType].idfsReference = v.[sflHC_PatientPersonalIDType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHC_PatientCRSettlement]  
on			[ref_GIS_sflHC_PatientCRSettlement].idfsReference = v.[sflHC_PatientCRSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_PatientCRRegion]  
on			[ref_GIS_sflHC_PatientCRRegion].idfsReference = v.[sflHC_PatientCRRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHC_PatientCRRayon]  
on			[ref_GIS_sflHC_PatientCRRayon].idfsReference = v.[sflHC_PatientCRRayon_ID] 
left join	fnGeoLocationTranslation(@LangID) [ref_GL_sflHC_PatientCRAddress]  
on			[ref_GL_sflHC_PatientCRAddress].idfGeoLocation = v.[sflHC_PatientCRAddress_ID] 
left join	fnReferenceRepair(@LangID, 19000064) [ref_sflHC_Outcome] 
on			[ref_sflHC_Outcome].idfsReference = v.[sflHC_Outcome_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_InvestigatedByOffice] 
on			[ref_sflHC_InvestigatedByOffice].idfsReference = v.[sflHC_InvestigatedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000061) [ref_sflHC_PatientOccupation] 
on			[ref_sflHC_PatientOccupation].idfsReference = v.[sflHC_PatientOccupation_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_SentByOfficerIDType] 
on			[ref_sflHC_SentByOfficerIDType].idfsReference = v.[sflHC_SentByOfficerIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_ReceivedByOfficerIDType] 
on			[ref_sflHC_ReceivedByOfficerIDType].idfsReference = v.[sflHC_ReceivedByOfficerIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000149) [ref_sflHC_NonNotifiableDiagnosis] 
on			[ref_sflHC_NonNotifiableDiagnosis].idfsReference = v.[sflHC_NonNotifiableDiagnosis_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHC_LocationSettlement]  
on			[ref_GIS_sflHC_LocationSettlement].idfsReference = v.[sflHC_LocationSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_LocationRegion]  
on			[ref_GIS_sflHC_LocationRegion].idfsReference = v.[sflHC_LocationRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHC_LocationRayon]  
on			[ref_GIS_sflHC_LocationRayon].idfsReference = v.[sflHC_LocationRayon_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_LocationIsForeignAddress] 
on			[ref_sflHC_LocationIsForeignAddress].idfsReference = v.[sflHC_LocationIsForeignAddress_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflHC_LocationCountry]  
on			[ref_GIS_sflHC_LocationCountry].idfsReference = v.[sflHC_LocationCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000041) [ref_sflHC_HospitalizationStatus] 
on			[ref_sflHC_HospitalizationStatus].idfsReference = v.[sflHC_HospitalizationStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_InitialCaseClassification] 
on			[ref_sflHC_InitialCaseClassification].idfsReference = v.[sflHC_InitialCaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_Hospitalization] 
on			[ref_sflHC_Hospitalization].idfsReference = v.[sflHC_Hospitalization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflHC_CurrentLocation] 
on			[ref_sflHC_CurrentLocation].idfsReference = v.[sflHC_CurrentLocation_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_FinalCaseClassification] 
on			[ref_sflHC_FinalCaseClassification].idfsReference = v.[sflHC_FinalCaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_FacilityWherePatientFSC] 
on			[ref_sflHC_FacilityWherePatientFSC].idfsReference = v.[sflHC_FacilityWherePatientFSC_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_EpiPersonalIDType] 
on			[ref_sflHC_EpiPersonalIDType].idfsReference = v.[sflHC_EpiPersonalIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_EnteredBySite] 
on			[ref_sflHC_EnteredBySite].idfsReference = v.[sflHC_EnteredBySite_ID] 
left join	fnReferenceRepair(@LangID, 19000111) [ref_sflHC_CaseProgressStatus] 
on			[ref_sflHC_CaseProgressStatus].idfsReference = v.[sflHC_CaseProgressStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_CaseClassification] 
on			[ref_sflHC_CaseClassification].idfsReference = v.[sflHC_CaseClassification_ID] 
left join	fnDiagnosesAndGroups(@LangID) [ref_sflHC_DiagnosesAndGroups] 
on			[ref_sflHC_DiagnosesAndGroups].idfsDiagnosisOrDiagnosisGroup = v.[sflHC_DiagnosesAndGroups_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_DiagnosisIsZoonotic] 
on			[ref_sflHC_DiagnosisIsZoonotic].idfsReference = v.[sflHC_DiagnosisIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHC_Diagnosis] 
on			[ref_sflHC_Diagnosis].idfsReference = v.[sflHC_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000054) [ref_sflHC_PatientNationality] 
on			[ref_sflHC_PatientNationality].idfsReference = v.[sflHC_PatientNationality_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_LabDiagBasis] 
on			[ref_sflHC_LabDiagBasis].idfsReference = v.[sflHC_LabDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_EpiDiagBasis] 
on			[ref_sflHC_EpiDiagBasis].idfsReference = v.[sflHC_EpiDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_ClinicalDiagBasis] 
on			[ref_sflHC_ClinicalDiagBasis].idfsReference = v.[sflHC_ClinicalDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_AntimicrobialTherapy] 
on			[ref_sflHC_AntimicrobialTherapy].idfsReference = v.[sflHC_AntimicrobialTherapy_ID] 
left join	fnReferenceRepair(@LangID, 19000042) [ref_sflHC_PatientAgeType] 
on			[ref_sflHC_PatientAgeType].idfsReference = v.[sflHC_PatientAgeType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHC_EnteredDate] >=  N'20210101')and (v.[sflHC_EnteredDate] <=  N'20221231'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53260510000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53260510000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVC_ReportedByPersonIDType_ID], 
			[ref_sflVC_ReportedByPersonIDType].[name] as [sflVC_ReportedByPersonIDType], 
			v.[sflVC_ReportedByPersonID], 
			v.[sflVC_ReportedByPerson], 
			v.[sflVC_CaseReportType_ID], 
			[ref_sflVC_CaseReportType].[name] as [sflVC_CaseReportType], 
			v.[sflVC_FarmBuildings], 
			v.[sflVC_FarmBirdsPerBuildings], 
			v.[sflVC_InvestigatedByPersonIDType_ID], 
			[ref_sflVC_InvestigatedByPersonIDType].[name] as [sflVC_InvestigatedByPersonIDType], 
			v.[sflVC_InvestigatedByPersonID], 
			v.[sflVC_InvestigatedByPerson], 
			v.[sflVC_InvestigationDate], 
			v.[sflVC_ReportDate], 
			v.[sflVC_FieldAccessionID], 
			v.[sflVC_FarmPhone], 
			v.[sflVC_FarmOwnershipStructure_ID], 
			[ref_sflVC_FarmOwnershipStructure].[name] as [sflVC_FarmOwnershipStructure], 
			v.[sflVC_FarmOwner], 
			v.[sflVC_FarmName], 
			v.[sflVC_FarmID], 
			v.[sflVC_FarmFax], 
			v.[sflVC_FarmEMail], 
			v.[sflVC_FarmAddressSettlement_ID], 
			[ref_GIS_sflVC_FarmAddressSettlement].[ExtendedName] as [sflVC_FarmAddressSettlement], 
			[ref_GIS_sflVC_FarmAddressSettlement].[name] as [sflVC_FarmAddressSettlement_ShortGISName], 
			v.[sflVC_FarmAddressRegion_ID], 
			[ref_GIS_sflVC_FarmAddressRegion].[ExtendedName] as [sflVC_FarmAddressRegion], 
			[ref_GIS_sflVC_FarmAddressRegion].[name] as [sflVC_FarmAddressRegion_ShortGISName], 
			v.[sflVC_FarmAddressRayon_ID], 
			[ref_GIS_sflVC_FarmAddressRayon].[ExtendedName] as [sflVC_FarmAddressRayon], 
			[ref_GIS_sflVC_FarmAddressRayon].[name] as [sflVC_FarmAddressRayon_ShortGISName], 
			v.[sflVC_FarmLocationLongitude], 
			v.[sflVC_FarmLocationLatitude], 
			v.[sflVC_FarmLocationElevationm], 
			v.[sflVC_FarmAddressCountry_ID], 
			[ref_GIS_sflVC_FarmAddressCountry].[ExtendedName] as [sflVC_FarmAddressCountry], 
			[ref_GIS_sflVC_FarmAddressCountry].[name] as [sflVC_FarmAddressCountry_ShortGISName], 
			v.[sflVC_FarmLocationCoordinates], 
			v.[sflVC_EnteredDate], 
			v.[sflVC_SiteID_ID], 
			[ref_sflVC_SiteID].[name] as [sflVC_SiteID], 
			v.[sflVC_CollectedPersonalIDType_ID], 
			[ref_sflVC_CollectedPersonalIDType].[name] as [sflVC_CollectedPersonalIDType], 
			v.[sflVC_CollectedByPersonalID], 
			v.[sflVC_EnteredByPerson], 
			v.[sflVC_DiagnosesAndGroups_ID], 
			[ref_sflVC_DiagnosesAndGroups].[name] as [sflVC_DiagnosesAndGroups], 
			v.[sflVC_CaseType_ID], 
			[ref_sflVC_CaseType].[name] as [sflVC_CaseType], 
			v.[sflVC_CaseProgressStatus_ID], 
			[ref_sflVC_CaseProgressStatus].[name] as [sflVC_CaseProgressStatus], 
			v.[sflVC_CaseID], 
			v.[sflVC_CaseClassification_ID], 
			[ref_sflVC_CaseClassification].[name] as [sflVC_CaseClassification], 
			v.[sflVC_FinalDiagnosisDate], 
			v.[sflVC_FinalDiagnosisCode], 
			v.[sflVC_FinalDiagnosisIsZoonotic_ID], 
			[ref_sflVC_FinalDiagnosisIsZoonotic].[name] as [sflVC_FinalDiagnosisIsZoonotic], 
			v.[sflVC_FinalDiagnosis_ID], 
			[ref_sflVC_FinalDiagnosis].[name] as [sflVC_FinalDiagnosis], 
			v.[sflVC_DaysAfterReporting], 
			v.[sflVC_AvianFarmType_ID], 
			[ref_sflVC_AvianFarmType].[name] as [sflVC_AvianFarmType], 
			v.[sflVC_AssignedDate] 
from		vw1100SearchQuery__53260510000000 v

left join	fnReferenceRepair(@LangID, 19000148) [ref_sflVC_ReportedByPersonIDType] 
on			[ref_sflVC_ReportedByPersonIDType].idfsReference = v.[sflVC_ReportedByPersonIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000144) [ref_sflVC_CaseReportType] 
on			[ref_sflVC_CaseReportType].idfsReference = v.[sflVC_CaseReportType_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflVC_InvestigatedByPersonIDType] 
on			[ref_sflVC_InvestigatedByPersonIDType].idfsReference = v.[sflVC_InvestigatedByPersonIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000065) [ref_sflVC_FarmOwnershipStructure] 
on			[ref_sflVC_FarmOwnershipStructure].idfsReference = v.[sflVC_FarmOwnershipStructure_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVC_FarmAddressSettlement]  
on			[ref_GIS_sflVC_FarmAddressSettlement].idfsReference = v.[sflVC_FarmAddressSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVC_FarmAddressRegion]  
on			[ref_GIS_sflVC_FarmAddressRegion].idfsReference = v.[sflVC_FarmAddressRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVC_FarmAddressRayon]  
on			[ref_GIS_sflVC_FarmAddressRayon].idfsReference = v.[sflVC_FarmAddressRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflVC_FarmAddressCountry]  
on			[ref_GIS_sflVC_FarmAddressCountry].idfsReference = v.[sflVC_FarmAddressCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVC_SiteID] 
on			[ref_sflVC_SiteID].idfsReference = v.[sflVC_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflVC_CollectedPersonalIDType] 
on			[ref_sflVC_CollectedPersonalIDType].idfsReference = v.[sflVC_CollectedPersonalIDType_ID] 
left join	fnDiagnosesAndGroups(@LangID) [ref_sflVC_DiagnosesAndGroups] 
on			[ref_sflVC_DiagnosesAndGroups].idfsDiagnosisOrDiagnosisGroup = v.[sflVC_DiagnosesAndGroups_ID] 
left join	fnReferenceRepair(@LangID, 19000012) [ref_sflVC_CaseType] 
on			[ref_sflVC_CaseType].idfsReference = v.[sflVC_CaseType_ID] 
left join	fnReferenceRepair(@LangID, 19000111) [ref_sflVC_CaseProgressStatus] 
on			[ref_sflVC_CaseProgressStatus].idfsReference = v.[sflVC_CaseProgressStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflVC_CaseClassification] 
on			[ref_sflVC_CaseClassification].idfsReference = v.[sflVC_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVC_FinalDiagnosisIsZoonotic] 
on			[ref_sflVC_FinalDiagnosisIsZoonotic].idfsReference = v.[sflVC_FinalDiagnosisIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVC_FinalDiagnosis] 
on			[ref_sflVC_FinalDiagnosis].idfsReference = v.[sflVC_FinalDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000008) [ref_sflVC_AvianFarmType] 
on			[ref_sflVC_AvianFarmType].idfsReference = v.[sflVC_AvianFarmType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53285670000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53285670000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflASSession_AddressSettlement_ID], 
			[ref_GIS_sflASSession_AddressSettlement].[ExtendedName] as [sflASSession_AddressSettlement], 
			[ref_GIS_sflASSession_AddressSettlement].[name] as [sflASSession_AddressSettlement_ShortGISName], 
			v.[sflASSession_AddressRegion_ID], 
			[ref_GIS_sflASSession_AddressRegion].[ExtendedName] as [sflASSession_AddressRegion], 
			[ref_GIS_sflASSession_AddressRegion].[name] as [sflASSession_AddressRegion_ShortGISName], 
			v.[sflASSession_AddressRayon_ID], 
			[ref_GIS_sflASSession_AddressRayon].[ExtendedName] as [sflASSession_AddressRayon], 
			[ref_GIS_sflASSession_AddressRayon].[name] as [sflASSession_AddressRayon_ShortGISName], 
			v.[sflASSession_AddressElevationm], 
			v.[sflASSession_AddressCountry_ID], 
			[ref_GIS_sflASSession_AddressCountry].[ExtendedName] as [sflASSession_AddressCountry], 
			[ref_GIS_sflASSession_AddressCountry].[name] as [sflASSession_AddressCountry_ShortGISName], 
			v.[sflASSession_SessionStatus_ID], 
			[ref_sflASSession_SessionStatus].[name] as [sflASSession_SessionStatus], 
			v.[sflASSession_StartDate], 
			v.[sflASSession_SessionID], 
			v.[sflASSession_EnteredDate], 
			v.[sflASSession_EndDate], 
			cast((
	select		distinct ASSessionDiagnosis.[name] + '; ' 
	from		tlbMonitoringSessionToDiagnosis SessionToDiagnosesString
	inner join	fnReferenceRepair(@LangID, 19000019)	ASSessionDiagnosis	-- rftDiagnosis
	on			ASSessionDiagnosis.idfsReference = SessionToDiagnosesString.idfsDiagnosis
	where		SessionToDiagnosesString.idfMonitoringSession = v.[sflASSession_DiagnosesString]
				and SessionToDiagnosesString.intRowStatus = 0
	order by	ASSessionDiagnosis.[name] + '; ' 
	for xml path('')		
	) as nvarchar(max)) as [sflASSession_DiagnosesString] , 
			v.[sflASSession_CampaignType_ID], 
			[ref_sflASSession_CampaignType].[name] as [sflASSession_CampaignType], 
			v.[sflASSession_CampaignName], 
			v.[sflASSession_CampaignID] 
from		vw1100SearchQuery__53285670000000 v

left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflASSession_AddressSettlement]  
on			[ref_GIS_sflASSession_AddressSettlement].idfsReference = v.[sflASSession_AddressSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflASSession_AddressRegion]  
on			[ref_GIS_sflASSession_AddressRegion].idfsReference = v.[sflASSession_AddressRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflASSession_AddressRayon]  
on			[ref_GIS_sflASSession_AddressRayon].idfsReference = v.[sflASSession_AddressRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflASSession_AddressCountry]  
on			[ref_GIS_sflASSession_AddressCountry].idfsReference = v.[sflASSession_AddressCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000117) [ref_sflASSession_SessionStatus] 
on			[ref_sflASSession_SessionStatus].idfsReference = v.[sflASSession_SessionStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflASSession_CampaignType] 
on			[ref_sflASSession_CampaignType].idfsReference = v.[sflASSession_CampaignType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflASSession_EnteredDate] >=  N'20210101'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53312300000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53312300000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflZD_TotalNumberOfAnimalsForSpecies], 
			v.[sflZD_SymptomOnsetOrStartOfSignDate], 
			v.[sflZD_Species_ID], 
			[ref_sflZD_Species].[name] as [sflZD_Species], 
			v.[sflZD_Settlement_ID], 
			[ref_GIS_sflZD_Settlement].[ExtendedName] as [sflZD_Settlement], 
			[ref_GIS_sflZD_Settlement].[name] as [sflZD_Settlement_ShortGISName], 
			v.[sflZD_CaseType_ID], 
			[ref_sflZD_CaseType].[name] as [sflZD_CaseType], 
			v.[sflZD_Region_ID], 
			[ref_GIS_sflZD_Region].[ExtendedName] as [sflZD_Region], 
			[ref_GIS_sflZD_Region].[name] as [sflZD_Region_ShortGISName], 
			v.[sflZD_Rayon_ID], 
			[ref_GIS_sflZD_Rayon].[ExtendedName] as [sflZD_Rayon], 
			[ref_GIS_sflZD_Rayon].[name] as [sflZD_Rayon_ShortGISName], 
			v.[sflZD_PatientSex_ID], 
			[ref_sflZD_PatientSex].[name] as [sflZD_PatientSex], 
			v.[sflZD_PatientOccupation_ID], 
			[ref_sflZD_PatientOccupation].[name] as [sflZD_PatientOccupation], 
			v.[sflZD_PatientEmployerSettlement_ID], 
			[ref_GIS_sflZD_PatientEmployerSettlement].[ExtendedName] as [sflZD_PatientEmployerSettlement], 
			[ref_GIS_sflZD_PatientEmployerSettlement].[name] as [sflZD_PatientEmployerSettlement_ShortGISName], 
			v.[sflZD_PatientEmployerRegion_ID], 
			[ref_GIS_sflZD_PatientEmployerRegion].[ExtendedName] as [sflZD_PatientEmployerRegion], 
			[ref_GIS_sflZD_PatientEmployerRegion].[name] as [sflZD_PatientEmployerRegion_ShortGISName], 
			v.[sflZD_PatientEmployerRayon_ID], 
			[ref_GIS_sflZD_PatientEmployerRayon].[ExtendedName] as [sflZD_PatientEmployerRayon], 
			[ref_GIS_sflZD_PatientEmployerRayon].[name] as [sflZD_PatientEmployerRayon_ShortGISName], 
			v.[sflZD_PatientEmployerElevationm], 
			v.[sflZD_PatientEmployerCountry_ID], 
			[ref_GIS_sflZD_PatientEmployerCountry].[ExtendedName] as [sflZD_PatientEmployerCountry], 
			[ref_GIS_sflZD_PatientEmployerCountry].[name] as [sflZD_PatientEmployerCountry_ShortGISName], 
			v.[sflZD_PatientCitizenship_ID], 
			[ref_sflZD_PatientCitizenship].[name] as [sflZD_PatientCitizenship], 
			v.[sflZD_PatientAgeType_ID], 
			[ref_sflZD_PatientAgeType].[name] as [sflZD_PatientAgeType], 
			v.[sflZD_PatientAge], 
			v.[sflZD_OutbreakID], 
			v.[sflZD_NumberOfSickAnimalsForSpecies], 
			v.[sflZD_NumberOfDeadAnimalsForSpecies], 
			v.[sflZD_NotificationOrReportDate], 
			v.[sflZD_Longitude], 
			v.[sflZD_LocationOfHCExposureRegion_ID], 
			[ref_GIS_sflZD_LocationOfHCExposureRegion].[ExtendedName] as [sflZD_LocationOfHCExposureRegion], 
			[ref_GIS_sflZD_LocationOfHCExposureRegion].[name] as [sflZD_LocationOfHCExposureRegion_ShortGISName], 
			v.[sflZD_LocationOfHCExposureRayon_ID], 
			[ref_GIS_sflZD_LocationOfHCExposureRayon].[ExtendedName] as [sflZD_LocationOfHCExposureRayon], 
			[ref_GIS_sflZD_LocationOfHCExposureRayon].[name] as [sflZD_LocationOfHCExposureRayon_ShortGISName], 
			v.[sflZD_LocationOfHCExpLongitude], 
			v.[sflZD_LocationOfHCExpLatitude], 
			v.[sflZD_LocationOfHCExposureElevatm], 
			v.[sflZD_LocationOfHCExposureCountry_ID], 
			[ref_GIS_sflZD_LocationOfHCExposureCountry].[ExtendedName] as [sflZD_LocationOfHCExposureCountry], 
			[ref_GIS_sflZD_LocationOfHCExposureCountry].[name] as [sflZD_LocationOfHCExposureCountry_ShortGISName], 
			v.[sflZD_LocationOfHCExposureCoord], 
			v.[sflZD_LocationOfHCExposureSettlement_ID], 
			[ref_GIS_sflZD_LocationOfHCExposureSettlement].[ExtendedName] as [sflZD_LocationOfHCExposureSettlement], 
			[ref_GIS_sflZD_LocationOfHCExposureSettlement].[name] as [sflZD_LocationOfHCExposureSettlement_ShortGISName], 
			v.[sflZD_LivestockAgeRangeOfSickAnimals], 
			v.[sflZD_LivestockAgeRangeOfDeadAnimals], 
			v.[sflZD_Latitude], 
			v.[sflZD_InvestigationDate], 
			v.[sflZD_Elevationm], 
			v.[sflZD_DiagnosesAndGroups_ID], 
			[ref_sflZD_DiagnosesAndGroups].[name] as [sflZD_DiagnosesAndGroups], 
			v.[sflZD_IsZoonotic_ID], 
			[ref_sflZD_IsZoonotic].[name] as [sflZD_IsZoonotic], 
			v.[sflZD_Diagnosis_ID], 
			[ref_sflZD_Diagnosis].[name] as [sflZD_Diagnosis], 
			v.[sflZD_DiagnosisDate], 
			v.[sflZD_PatientFirstSoughtCareDate], 
			v.[sflZD_PatientHospitalizationDate], 
			v.[sflZD_PatientDeathDate], 
			v.[sflZD_HumanCaseExposureDate], 
			v.[sflZD_Country_ID], 
			[ref_GIS_sflZD_Country].[ExtendedName] as [sflZD_Country], 
			[ref_GIS_sflZD_Country].[name] as [sflZD_Country_ShortGISName], 
			v.[sflZD_Coordinates], 
			v.[sflZD_CaseID], 
			v.[sflZD_CaseClassification_ID], 
			[ref_sflZD_CaseClassification].[name] as [sflZD_CaseClassification] 
from		vw1100SearchQuery__53312300000000 v

left join	fnReferenceRepair(@LangID, 19000086) [ref_sflZD_Species] 
on			[ref_sflZD_Species].idfsReference = v.[sflZD_Species_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflZD_Settlement]  
on			[ref_GIS_sflZD_Settlement].idfsReference = v.[sflZD_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000012) [ref_sflZD_CaseType] 
on			[ref_sflZD_CaseType].idfsReference = v.[sflZD_CaseType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflZD_Region]  
on			[ref_GIS_sflZD_Region].idfsReference = v.[sflZD_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflZD_Rayon]  
on			[ref_GIS_sflZD_Rayon].idfsReference = v.[sflZD_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflZD_PatientSex] 
on			[ref_sflZD_PatientSex].idfsReference = v.[sflZD_PatientSex_ID] 
left join	fnReferenceRepair(@LangID, 19000061) [ref_sflZD_PatientOccupation] 
on			[ref_sflZD_PatientOccupation].idfsReference = v.[sflZD_PatientOccupation_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflZD_PatientEmployerSettlement]  
on			[ref_GIS_sflZD_PatientEmployerSettlement].idfsReference = v.[sflZD_PatientEmployerSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflZD_PatientEmployerRegion]  
on			[ref_GIS_sflZD_PatientEmployerRegion].idfsReference = v.[sflZD_PatientEmployerRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflZD_PatientEmployerRayon]  
on			[ref_GIS_sflZD_PatientEmployerRayon].idfsReference = v.[sflZD_PatientEmployerRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflZD_PatientEmployerCountry]  
on			[ref_GIS_sflZD_PatientEmployerCountry].idfsReference = v.[sflZD_PatientEmployerCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000054) [ref_sflZD_PatientCitizenship] 
on			[ref_sflZD_PatientCitizenship].idfsReference = v.[sflZD_PatientCitizenship_ID] 
left join	fnReferenceRepair(@LangID, 19000042) [ref_sflZD_PatientAgeType] 
on			[ref_sflZD_PatientAgeType].idfsReference = v.[sflZD_PatientAgeType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflZD_LocationOfHCExposureRegion]  
on			[ref_GIS_sflZD_LocationOfHCExposureRegion].idfsReference = v.[sflZD_LocationOfHCExposureRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflZD_LocationOfHCExposureRayon]  
on			[ref_GIS_sflZD_LocationOfHCExposureRayon].idfsReference = v.[sflZD_LocationOfHCExposureRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflZD_LocationOfHCExposureCountry]  
on			[ref_GIS_sflZD_LocationOfHCExposureCountry].idfsReference = v.[sflZD_LocationOfHCExposureCountry_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflZD_LocationOfHCExposureSettlement]  
on			[ref_GIS_sflZD_LocationOfHCExposureSettlement].idfsReference = v.[sflZD_LocationOfHCExposureSettlement_ID] 
left join	fnDiagnosesAndGroups(@LangID) [ref_sflZD_DiagnosesAndGroups] 
on			[ref_sflZD_DiagnosesAndGroups].idfsDiagnosisOrDiagnosisGroup = v.[sflZD_DiagnosesAndGroups_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflZD_IsZoonotic] 
on			[ref_sflZD_IsZoonotic].idfsReference = v.[sflZD_IsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflZD_Diagnosis] 
on			[ref_sflZD_Diagnosis].idfsReference = v.[sflZD_Diagnosis_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflZD_Country]  
on			[ref_GIS_sflZD_Country].idfsReference = v.[sflZD_Country_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflZD_CaseClassification] 
on			[ref_sflZD_CaseClassification].idfsReference = v.[sflZD_CaseClassification_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53498610000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53498610000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_TestConducted_ID], 
			[ref_sflHC_TestConducted].[name] as [sflHC_TestConducted], 
			v.[sflHC_PatientNotificationStatus_ID], 
			[ref_sflHC_PatientNotificationStatus].[name] as [sflHC_PatientNotificationStatus], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflHC_PatientSex_ID], 
			[ref_sflHC_PatientSex].[name] as [sflHC_PatientSex], 
			v.[sflHC_SamplesCollected_ID], 
			[ref_sflHC_SamplesCollected].[name] as [sflHC_SamplesCollected], 
			v.[sflHC_ReasonForNotCollectingSample_ID], 
			[ref_sflHC_ReasonForNotCollectingSample].[name] as [sflHC_ReasonForNotCollectingSample], 
			v.[sflHC_HospitalizationPlace], 
			v.[sflHC_PatientPersonalIDType_ID], 
			[ref_sflHC_PatientPersonalIDType].[name] as [sflHC_PatientPersonalIDType], 
			v.[sflHC_PatientPersonalID], 
			v.[sflHC_PatientName], 
			v.[sflHC_PatientCRSettlement_ID], 
			[ref_GIS_sflHC_PatientCRSettlement].[ExtendedName] as [sflHC_PatientCRSettlement], 
			[ref_GIS_sflHC_PatientCRSettlement].[name] as [sflHC_PatientCRSettlement_ShortGISName], 
			v.[sflHC_PatientCRRegion_ID], 
			[ref_GIS_sflHC_PatientCRRegion].[ExtendedName] as [sflHC_PatientCRRegion], 
			[ref_GIS_sflHC_PatientCRRegion].[name] as [sflHC_PatientCRRegion_ShortGISName], 
			v.[sflHC_PatientCRRayon_ID], 
			[ref_GIS_sflHC_PatientCRRayon].[ExtendedName] as [sflHC_PatientCRRayon], 
			[ref_GIS_sflHC_PatientCRRayon].[name] as [sflHC_PatientCRRayon_ShortGISName], 
			v.[sflHC_PatientCRLongitude], 
			v.[sflHC_PatientCRLatitudee], 
			v.[sflHC_PCRElevationm], 
			v.[sflHC_PatientCRCoordinates], 
			v.[sflHC_PatientCRAddress_ID], 
			[ref_GL_sflHC_PatientCRAddress].[strDefaultShortAddressString] as [sflHC_PatientCRAddress], 
			v.[sflHC_PatientAgeGroup], 
			v.[sflHC_Outcome_ID], 
			[ref_sflHC_Outcome].[name] as [sflHC_Outcome], 
			v.[sflHC_OtherLocation], 
			v.[sflHC_InvestigatedByOffice_ID], 
			[ref_sflHC_InvestigatedByOffice].[name] as [sflHC_InvestigatedByOffice], 
			v.[sflHC_InvestigatedByOfficeID], 
			v.[sflHC_PatientOccupation_ID], 
			[ref_sflHC_PatientOccupation].[name] as [sflHC_PatientOccupation], 
			v.[sflHC_SentByOfficerIDType_ID], 
			[ref_sflHC_SentByOfficerIDType].[name] as [sflHC_SentByOfficerIDType], 
			v.[sflHC_SentByOfficerID], 
			v.[sflHC_SentByPerson], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_SentByOfficeID], 
			v.[sflHC_ReceivedByOfficerIDType_ID], 
			[ref_sflHC_ReceivedByOfficerIDType].[name] as [sflHC_ReceivedByOfficerIDType], 
			v.[sflHC_ReceivedByOfficerID], 
			v.[sflHC_ReceivedByPerson], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflHC_ReceivedByOfficeID], 
			v.[sflHC_NotificationDate], 
			v.[sflHC_NonNotifiableDiagnosis_ID], 
			[ref_sflHC_NonNotifiableDiagnosis].[name] as [sflHC_NonNotifiableDiagnosis], 
			v.[sflHC_LocationSettlement_ID], 
			[ref_GIS_sflHC_LocationSettlement].[ExtendedName] as [sflHC_LocationSettlement], 
			[ref_GIS_sflHC_LocationSettlement].[name] as [sflHC_LocationSettlement_ShortGISName], 
			v.[sflHC_LocationRegion_ID], 
			[ref_GIS_sflHC_LocationRegion].[ExtendedName] as [sflHC_LocationRegion], 
			[ref_GIS_sflHC_LocationRegion].[name] as [sflHC_LocationRegion_ShortGISName], 
			v.[sflHC_LocationRayon_ID], 
			[ref_GIS_sflHC_LocationRayon].[ExtendedName] as [sflHC_LocationRayon], 
			[ref_GIS_sflHC_LocationRayon].[name] as [sflHC_LocationRayon_ShortGISName], 
			v.[sflHC_LocationLongitude], 
			v.[sflHC_LocationLatitude], 
			v.[sflHC_LocationIsForeignAddress_ID], 
			[ref_sflHC_LocationIsForeignAddress].[name] as [sflHC_LocationIsForeignAddress], 
			v.[sflHC_LocationForeignAddress], 
			v.[sflHC_LocationCountry_ID], 
			[ref_GIS_sflHC_LocationCountry].[ExtendedName] as [sflHC_LocationCountry], 
			[ref_GIS_sflHC_LocationCountry].[name] as [sflHC_LocationCountry_ShortGISName], 
			v.[sflHC_LocationCoordinates], 
			v.[sflHC_HospitalizationStatus_ID], 
			[ref_sflHC_HospitalizationStatus].[name] as [sflHC_HospitalizationStatus], 
			v.[sflHC_LocalID], 
			v.[sflHC_InitialCaseClassification_ID], 
			[ref_sflHC_InitialCaseClassification].[name] as [sflHC_InitialCaseClassification], 
			v.[sflHC_Hospitalization_ID], 
			[ref_sflHC_Hospitalization].[name] as [sflHC_Hospitalization], 
			v.[sflHC_HospitalNameID], 
			v.[sflHC_CurrentLocation_ID], 
			[ref_sflHC_CurrentLocation].[name] as [sflHC_CurrentLocation], 
			v.[sflHC_FinalCaseClassification_ID], 
			[ref_sflHC_FinalCaseClassification].[name] as [sflHC_FinalCaseClassification], 
			v.[sflHC_FacilityWherePatientFSC_ID], 
			[ref_sflHC_FacilityWherePatientFSC].[name] as [sflHC_FacilityWherePatientFSC], 
			v.[sflHC_FacilityWherePatientFSCCode], 
			v.[sflHC_EpiPersonalIDType_ID], 
			[ref_sflHC_EpiPersonalIDType].[name] as [sflHC_EpiPersonalIDType], 
			v.[sflHC_EpiPersonalID], 
			v.[sflHC_EpidemiologistName], 
			v.[sflHC_EnteredBySite_ID], 
			[ref_sflHC_EnteredBySite].[name] as [sflHC_EnteredBySite], 
			v.[sflHC_EnteredByOrganizationID], 
			v.[sflHC_EnteredByEmployer], 
			v.[sflHC_PatientEmployerPhone], 
			v.[sflHC_PatientEmployer], 
			v.[sflHC_CaseProgressStatus_ID], 
			[ref_sflHC_CaseProgressStatus].[name] as [sflHC_CaseProgressStatus], 
			v.[sflHC_CaseID], 
			v.[sflHC_CaseClassification_ID], 
			[ref_sflHC_CaseClassification].[name] as [sflHC_CaseClassification], 
			v.[sflHC_DiagnosesAndGroups_ID], 
			[ref_sflHC_DiagnosesAndGroups].[name] as [sflHC_DiagnosesAndGroups], 
			v.[sflHC_DiagnosisDate], 
			v.[sflHC_DiagnosisCode], 
			v.[sflHC_DiagnosisIsZoonotic_ID], 
			[ref_sflHC_DiagnosisIsZoonotic].[name] as [sflHC_DiagnosisIsZoonotic], 
			v.[sflHC_Diagnosis_ID], 
			[ref_sflHC_Diagnosis].[name] as [sflHC_Diagnosis], 
			v.[sflHC_DaysAfterSymptOnsetUntilFSC], 
			v.[sflHC_DaysAfterFSCUntilEntered], 
			v.[sflHC_DaysAfterFSCUntilFinalDiag], 
			v.[sflHC_DaysAfterOnsetSymptUntilNotif], 
			v.[sflHC_DaysAfterNotification], 
			v.[sflHC_DaysAfterNotifUntilCaseInvest], 
			v.[sflHC_DaysAfterFSCUntilNotif], 
			v.[sflHC_DaysAfterInitDiagUntilNotif], 
			v.[sflHC_PatientFirstSoughtCareDate], 
			v.[sflHC_SymptomOnsetDate], 
			v.[sflHC_FacilityLastVisitDate], 
			v.[sflHC_PatientHospitalizationDate], 
			v.[sflHC_DateFinalCaseClassification], 
			v.[sflHC_ExposureDate], 
			v.[sflHC_FinalDiagnosisDate], 
			v.[sflHC_PatientDischargeDate], 
			v.[sflHC_PatientDeathDate], 
			v.[sflHC_CompletionPaperFormDate], 
			v.[sflHC_PatientDOB], 
			v.[sflHC_ModificationDate], 
			v.[sflHC_EnteredDate], 
			v.[sflHC_PatientNationality_ID], 
			[ref_sflHC_PatientNationality].[name] as [sflHC_PatientNationality], 
			v.[sflHC_LabDiagBasis_ID], 
			[ref_sflHC_LabDiagBasis].[name] as [sflHC_LabDiagBasis], 
			v.[sflHC_EpiDiagBasis_ID], 
			[ref_sflHC_EpiDiagBasis].[name] as [sflHC_EpiDiagBasis], 
			v.[sflHC_ClinicalDiagBasis_ID], 
			[ref_sflHC_ClinicalDiagBasis].[name] as [sflHC_ClinicalDiagBasis], 
			v.[sflHC_AntimicrobialTherapy_ID], 
			[ref_sflHC_AntimicrobialTherapy].[name] as [sflHC_AntimicrobialTherapy], 
			v.[sflHC_PatientAgeType_ID], 
			[ref_sflHC_PatientAgeType].[name] as [sflHC_PatientAgeType], 
			v.[sflHC_PatientAge], 
			v.[sflHC_PatientPhone] 
from		vw1100SearchQuery__53498610000000 v

left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_TestConducted] 
on			[ref_sflHC_TestConducted].idfsReference = v.[sflHC_TestConducted_ID] 
left join	fnReferenceRepair(@LangID, 19000035) [ref_sflHC_PatientNotificationStatus] 
on			[ref_sflHC_PatientNotificationStatus].idfsReference = v.[sflHC_PatientNotificationStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflHC_PatientSex] 
on			[ref_sflHC_PatientSex].idfsReference = v.[sflHC_PatientSex_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_SamplesCollected] 
on			[ref_sflHC_SamplesCollected].idfsReference = v.[sflHC_SamplesCollected_ID] 
left join	fnReferenceRepair(@LangID, 19000150) [ref_sflHC_ReasonForNotCollectingSample] 
on			[ref_sflHC_ReasonForNotCollectingSample].idfsReference = v.[sflHC_ReasonForNotCollectingSample_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_PatientPersonalIDType] 
on			[ref_sflHC_PatientPersonalIDType].idfsReference = v.[sflHC_PatientPersonalIDType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHC_PatientCRSettlement]  
on			[ref_GIS_sflHC_PatientCRSettlement].idfsReference = v.[sflHC_PatientCRSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_PatientCRRegion]  
on			[ref_GIS_sflHC_PatientCRRegion].idfsReference = v.[sflHC_PatientCRRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHC_PatientCRRayon]  
on			[ref_GIS_sflHC_PatientCRRayon].idfsReference = v.[sflHC_PatientCRRayon_ID] 
left join	fnGeoLocationTranslation(@LangID) [ref_GL_sflHC_PatientCRAddress]  
on			[ref_GL_sflHC_PatientCRAddress].idfGeoLocation = v.[sflHC_PatientCRAddress_ID] 
left join	fnReferenceRepair(@LangID, 19000064) [ref_sflHC_Outcome] 
on			[ref_sflHC_Outcome].idfsReference = v.[sflHC_Outcome_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_InvestigatedByOffice] 
on			[ref_sflHC_InvestigatedByOffice].idfsReference = v.[sflHC_InvestigatedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000061) [ref_sflHC_PatientOccupation] 
on			[ref_sflHC_PatientOccupation].idfsReference = v.[sflHC_PatientOccupation_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_SentByOfficerIDType] 
on			[ref_sflHC_SentByOfficerIDType].idfsReference = v.[sflHC_SentByOfficerIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_ReceivedByOfficerIDType] 
on			[ref_sflHC_ReceivedByOfficerIDType].idfsReference = v.[sflHC_ReceivedByOfficerIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000149) [ref_sflHC_NonNotifiableDiagnosis] 
on			[ref_sflHC_NonNotifiableDiagnosis].idfsReference = v.[sflHC_NonNotifiableDiagnosis_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHC_LocationSettlement]  
on			[ref_GIS_sflHC_LocationSettlement].idfsReference = v.[sflHC_LocationSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_LocationRegion]  
on			[ref_GIS_sflHC_LocationRegion].idfsReference = v.[sflHC_LocationRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHC_LocationRayon]  
on			[ref_GIS_sflHC_LocationRayon].idfsReference = v.[sflHC_LocationRayon_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_LocationIsForeignAddress] 
on			[ref_sflHC_LocationIsForeignAddress].idfsReference = v.[sflHC_LocationIsForeignAddress_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflHC_LocationCountry]  
on			[ref_GIS_sflHC_LocationCountry].idfsReference = v.[sflHC_LocationCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000041) [ref_sflHC_HospitalizationStatus] 
on			[ref_sflHC_HospitalizationStatus].idfsReference = v.[sflHC_HospitalizationStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_InitialCaseClassification] 
on			[ref_sflHC_InitialCaseClassification].idfsReference = v.[sflHC_InitialCaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_Hospitalization] 
on			[ref_sflHC_Hospitalization].idfsReference = v.[sflHC_Hospitalization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflHC_CurrentLocation] 
on			[ref_sflHC_CurrentLocation].idfsReference = v.[sflHC_CurrentLocation_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_FinalCaseClassification] 
on			[ref_sflHC_FinalCaseClassification].idfsReference = v.[sflHC_FinalCaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_FacilityWherePatientFSC] 
on			[ref_sflHC_FacilityWherePatientFSC].idfsReference = v.[sflHC_FacilityWherePatientFSC_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_EpiPersonalIDType] 
on			[ref_sflHC_EpiPersonalIDType].idfsReference = v.[sflHC_EpiPersonalIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_EnteredBySite] 
on			[ref_sflHC_EnteredBySite].idfsReference = v.[sflHC_EnteredBySite_ID] 
left join	fnReferenceRepair(@LangID, 19000111) [ref_sflHC_CaseProgressStatus] 
on			[ref_sflHC_CaseProgressStatus].idfsReference = v.[sflHC_CaseProgressStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_CaseClassification] 
on			[ref_sflHC_CaseClassification].idfsReference = v.[sflHC_CaseClassification_ID] 
left join	fnDiagnosesAndGroups(@LangID) [ref_sflHC_DiagnosesAndGroups] 
on			[ref_sflHC_DiagnosesAndGroups].idfsDiagnosisOrDiagnosisGroup = v.[sflHC_DiagnosesAndGroups_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_DiagnosisIsZoonotic] 
on			[ref_sflHC_DiagnosisIsZoonotic].idfsReference = v.[sflHC_DiagnosisIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHC_Diagnosis] 
on			[ref_sflHC_Diagnosis].idfsReference = v.[sflHC_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000054) [ref_sflHC_PatientNationality] 
on			[ref_sflHC_PatientNationality].idfsReference = v.[sflHC_PatientNationality_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_LabDiagBasis] 
on			[ref_sflHC_LabDiagBasis].idfsReference = v.[sflHC_LabDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_EpiDiagBasis] 
on			[ref_sflHC_EpiDiagBasis].idfsReference = v.[sflHC_EpiDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_ClinicalDiagBasis] 
on			[ref_sflHC_ClinicalDiagBasis].idfsReference = v.[sflHC_ClinicalDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_AntimicrobialTherapy] 
on			[ref_sflHC_AntimicrobialTherapy].idfsReference = v.[sflHC_AntimicrobialTherapy_ID] 
left join	fnReferenceRepair(@LangID, 19000042) [ref_sflHC_PatientAgeType] 
on			[ref_sflHC_PatientAgeType].idfsReference = v.[sflHC_PatientAgeType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHC_EnteredDate] >=  N'20210101'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53542340000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53542340000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAIAC_Total], 
			v.[sflVAIAC_TimeIntervalUnit_ID], 
			[ref_sflVAIAC_TimeIntervalUnit].[name] as [sflVAIAC_TimeIntervalUnit], 
			v.[sflVAIAC_StartDate], 
			v.[sflVAIAC_GroupingDate], 
			v.[sflVAIAC_EndDate], 
			v.[sflVAIAC_AnimalSpecies_ID], 
			[ref_sflVAIAC_AnimalSpecies].[name] as [sflVAIAC_AnimalSpecies], 
			v.[sflVAIAC_Settlement_ID], 
			[ref_GIS_sflVAIAC_Settlement].[ExtendedName] as [sflVAIAC_Settlement], 
			[ref_GIS_sflVAIAC_Settlement].[name] as [sflVAIAC_Settlement_ShortGISName], 
			v.[sflVAIAC_Region_ID], 
			[ref_GIS_sflVAIAC_Region].[ExtendedName] as [sflVAIAC_Region], 
			[ref_GIS_sflVAIAC_Region].[name] as [sflVAIAC_Region_ShortGISName], 
			v.[sflVAIAC_Rayon_ID], 
			[ref_GIS_sflVAIAC_Rayon].[ExtendedName] as [sflVAIAC_Rayon], 
			[ref_GIS_sflVAIAC_Rayon].[name] as [sflVAIAC_Rayon_ShortGISName], 
			v.[sflVAIAC_OIEcode], 
			v.[sflVAIAC_NotificationSentDate], 
			v.[sflVAIAC_SentByOfficer], 
			v.[sflVAIAC_SentByInstitution_ID], 
			[ref_sflVAIAC_SentByInstitution].[name] as [sflVAIAC_SentByInstitution], 
			v.[sflVAIAC_NotificationReceivDate], 
			v.[sflVAIAC_ReceivedByOfficer], 
			v.[sflVAIAC_ReceivedByInst_ID], 
			[ref_sflVAIAC_ReceivedByInst].[name] as [sflVAIAC_ReceivedByInst], 
			v.[sflVAIAC_ReceiveByInstitutionID], 
			v.[sflVAIAC_MethodOfMeasurement_ID], 
			[ref_sflVAIAC_MethodOfMeasurement].[name] as [sflVAIAC_MethodOfMeasurement], 
			v.[sflVAIAC_EnteredByOrganizationID], 
			v.[sflVAIAC_SiteID_ID], 
			[ref_sflVAIAC_SiteID].[name] as [sflVAIAC_SiteID], 
			v.[sflVAIAC_EnteredByPerson], 
			v.[sflVAIAC_DiagnosesString], 
			v.[sflVAIAC_DateOfEntry], 
			v.[sflVAIAC_CaseID], 
			v.[sflVAIAC_AdministrativeLevel_ID], 
			[ref_sflVAIAC_AdministrativeLevel].[name] as [sflVAIAC_AdministrativeLevel] 
from		vw1100SearchQuery__53542340000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAIAC_TimeIntervalUnit] 
on			[ref_sflVAIAC_TimeIntervalUnit].idfsReference = v.[sflVAIAC_TimeIntervalUnit_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVAIAC_AnimalSpecies] 
on			[ref_sflVAIAC_AnimalSpecies].idfsReference = v.[sflVAIAC_AnimalSpecies_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAIAC_Settlement]  
on			[ref_GIS_sflVAIAC_Settlement].idfsReference = v.[sflVAIAC_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAIAC_Region]  
on			[ref_GIS_sflVAIAC_Region].idfsReference = v.[sflVAIAC_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAIAC_Rayon]  
on			[ref_GIS_sflVAIAC_Rayon].idfsReference = v.[sflVAIAC_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIAC_SentByInstitution] 
on			[ref_sflVAIAC_SentByInstitution].idfsReference = v.[sflVAIAC_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIAC_ReceivedByInst] 
on			[ref_sflVAIAC_ReceivedByInst].idfsReference = v.[sflVAIAC_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000160) [ref_sflVAIAC_MethodOfMeasurement] 
on			[ref_sflVAIAC_MethodOfMeasurement].idfsReference = v.[sflVAIAC_MethodOfMeasurement_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAIAC_SiteID] 
on			[ref_sflVAIAC_SiteID].idfsReference = v.[sflVAIAC_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAIAC_AdministrativeLevel] 
on			[ref_sflVAIAC_AdministrativeLevel].idfsReference = v.[sflVAIAC_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53548980000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53548980000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVC_CaseType_ID], 
			[ref_sflVC_CaseType].[name] as [sflVC_CaseType], 
			v.[sflZD_IsZoonotic_ID], 
			[ref_sflZD_IsZoonotic].[name] as [sflZD_IsZoonotic], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflVC_FarmAddressSettlement_ID], 
			[ref_GIS_sflVC_FarmAddressSettlement].[ExtendedName] as [sflVC_FarmAddressSettlement], 
			[ref_GIS_sflVC_FarmAddressSettlement].[name] as [sflVC_FarmAddressSettlement_ShortGISName], 
			v.[sflVC_FarmAddressRegion_ID], 
			[ref_GIS_sflVC_FarmAddressRegion].[ExtendedName] as [sflVC_FarmAddressRegion], 
			[ref_GIS_sflVC_FarmAddressRegion].[name] as [sflVC_FarmAddressRegion_ShortGISName], 
			v.[sflVC_FarmAddressRayon_ID], 
			[ref_GIS_sflVC_FarmAddressRayon].[ExtendedName] as [sflVC_FarmAddressRayon], 
			[ref_GIS_sflVC_FarmAddressRayon].[name] as [sflVC_FarmAddressRayon_ShortGISName], 
			v.[sflOVC_PrimaryCase], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflVC_OutbreakID], 
			v.[sflOutbreak_ID], 
			v.[sflOVC_NumberOfContacts], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflVC_FarmLocationLongitude], 
			v.[sflVC_FarmLocationLatitude], 
			v.[sflHCSample_SentToOrganization_ID], 
			[ref_sflHCSample_SentToOrganization].[name] as [sflHCSample_SentToOrganization], 
			v.[sflVC_InvestigatedByPerson], 
			v.[sflVC_FarmID], 
			v.[sflVC_FinalDiagnosis_ID], 
			[ref_sflVC_FinalDiagnosis].[name] as [sflVC_FinalDiagnosis], 
			v.[sflBss_DateOfSymptomsOnset], 
			v.[sflHC_EnteredDate], 
			v.[sflVC_FinalDiagnosisDate], 
			v.[sflOSC_EnteredDate], 
			v.[sflVC_CaseClassification_ID], 
			[ref_sflVC_CaseClassification].[name] as [sflVC_CaseClassification], 
			v.[sflOVC_CaseMonitoringQuestions], 
			v.[sflOVC_CaseMonitoring], 
			v.[sflZD_CaseClassification_ID], 
			[ref_sflZD_CaseClassification].[name] as [sflZD_CaseClassification] 
from		vw1100SearchQuery__53548980000000 v

left join	fnReferenceRepair(@LangID, 19000012) [ref_sflVC_CaseType] 
on			[ref_sflVC_CaseType].idfsReference = v.[sflVC_CaseType_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflZD_IsZoonotic] 
on			[ref_sflZD_IsZoonotic].idfsReference = v.[sflZD_IsZoonotic_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVC_FarmAddressSettlement]  
on			[ref_GIS_sflVC_FarmAddressSettlement].idfsReference = v.[sflVC_FarmAddressSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVC_FarmAddressRegion]  
on			[ref_GIS_sflVC_FarmAddressRegion].idfsReference = v.[sflVC_FarmAddressRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVC_FarmAddressRayon]  
on			[ref_GIS_sflVC_FarmAddressRayon].idfsReference = v.[sflVC_FarmAddressRayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_SentToOrganization] 
on			[ref_sflHCSample_SentToOrganization].idfsReference = v.[sflHCSample_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVC_FinalDiagnosis] 
on			[ref_sflVC_FinalDiagnosis].idfsReference = v.[sflVC_FinalDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflVC_CaseClassification] 
on			[ref_sflVC_CaseClassification].idfsReference = v.[sflVC_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflZD_CaseClassification] 
on			[ref_sflZD_CaseClassification].idfsReference = v.[sflZD_CaseClassification_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53633380000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53633380000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAIA_Total], 
			v.[sflVAIA_TimeIntervalUnit_ID], 
			[ref_sflVAIA_TimeIntervalUnit].[name] as [sflVAIA_TimeIntervalUnit], 
			v.[sflVAIA_StartDate], 
			v.[sflVAIA_GroupingDate], 
			v.[sflVAIA_EndDate], 
			v.[sflVAIA_AnimalSpecies_ID], 
			[ref_sflVAIA_AnimalSpecies].[name] as [sflVAIA_AnimalSpecies], 
			v.[sflVAIA_Settlement_ID], 
			[ref_GIS_sflVAIA_Settlement].[ExtendedName] as [sflVAIA_Settlement], 
			[ref_GIS_sflVAIA_Settlement].[name] as [sflVAIA_Settlement_ShortGISName], 
			v.[sflVAIA_Region_ID], 
			[ref_GIS_sflVAIA_Region].[ExtendedName] as [sflVAIA_Region], 
			[ref_GIS_sflVAIA_Region].[name] as [sflVAIA_Region_ShortGISName], 
			v.[sflVAIA_Rayon_ID], 
			[ref_GIS_sflVAIA_Rayon].[ExtendedName] as [sflVAIA_Rayon], 
			[ref_GIS_sflVAIA_Rayon].[name] as [sflVAIA_Rayon_ShortGISName], 
			v.[sflVAIA_OIAcode], 
			v.[sflVAIA_NotificationSentDate], 
			v.[sflVAIA_SentByOfficer], 
			v.[sflVAIA_SentByInstitution_ID], 
			[ref_sflVAIA_SentByInstitution].[name] as [sflVAIA_SentByInstitution], 
			v.[sflVAIA_SentByInstitutionID], 
			v.[sflVAIA_NotificationReceivDate], 
			v.[sflVAIA_ReceivedByOfficer], 
			v.[sflVAIA_ReceivedByInst_ID], 
			[ref_sflVAIA_ReceivedByInst].[name] as [sflVAIA_ReceivedByInst], 
			v.[sflVAIA_ReceiveByInstitutionID], 
			v.[sflVAIA_InvestigationType_ID], 
			[ref_sflVAIA_InvestigationType].[name] as [sflVAIA_InvestigationType], 
			v.[sflVAIA_EnteredByOrganizationID], 
			v.[sflVAIA_SiteID_ID], 
			[ref_sflVAIA_SiteID].[name] as [sflVAIA_SiteID], 
			v.[sflVAIA_EnteredByPerson], 
			v.[sflVAIA_FinalDiagnosis_ID], 
			[ref_sflVAIA_FinalDiagnosis].[name] as [sflVAIA_FinalDiagnosis], 
			v.[sflVAIA_DateOfEntry], 
			v.[sflVAIA_CaseID], 
			v.[sflVAIA_AdministrativeLevel_ID], 
			[ref_sflVAIA_AdministrativeLevel].[name] as [sflVAIA_AdministrativeLevel] 
from		vw1100SearchQuery__53633380000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAIA_TimeIntervalUnit] 
on			[ref_sflVAIA_TimeIntervalUnit].idfsReference = v.[sflVAIA_TimeIntervalUnit_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVAIA_AnimalSpecies] 
on			[ref_sflVAIA_AnimalSpecies].idfsReference = v.[sflVAIA_AnimalSpecies_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAIA_Settlement]  
on			[ref_GIS_sflVAIA_Settlement].idfsReference = v.[sflVAIA_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAIA_Region]  
on			[ref_GIS_sflVAIA_Region].idfsReference = v.[sflVAIA_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAIA_Rayon]  
on			[ref_GIS_sflVAIA_Rayon].idfsReference = v.[sflVAIA_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIA_SentByInstitution] 
on			[ref_sflVAIA_SentByInstitution].idfsReference = v.[sflVAIA_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIA_ReceivedByInst] 
on			[ref_sflVAIA_ReceivedByInst].idfsReference = v.[sflVAIA_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000144) [ref_sflVAIA_InvestigationType] 
on			[ref_sflVAIA_InvestigationType].idfsReference = v.[sflVAIA_InvestigationType_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAIA_SiteID] 
on			[ref_sflVAIA_SiteID].idfsReference = v.[sflVAIA_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVAIA_FinalDiagnosis] 
on			[ref_sflVAIA_FinalDiagnosis].idfsReference = v.[sflVAIA_FinalDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAIA_AdministrativeLevel] 
on			[ref_sflVAIA_AdministrativeLevel].idfsReference = v.[sflVAIA_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53649700000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53649700000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAIA_Total], 
			v.[sflVAIA_TimeIntervalUnit_ID], 
			[ref_sflVAIA_TimeIntervalUnit].[name] as [sflVAIA_TimeIntervalUnit], 
			v.[sflVAIA_StartDate], 
			v.[sflVAIA_GroupingDate], 
			v.[sflVAIA_EndDate], 
			v.[sflVAIA_AnimalSpecies_ID], 
			[ref_sflVAIA_AnimalSpecies].[name] as [sflVAIA_AnimalSpecies], 
			v.[sflVAIA_Settlement_ID], 
			[ref_GIS_sflVAIA_Settlement].[ExtendedName] as [sflVAIA_Settlement], 
			[ref_GIS_sflVAIA_Settlement].[name] as [sflVAIA_Settlement_ShortGISName], 
			v.[sflVAIA_Region_ID], 
			[ref_GIS_sflVAIA_Region].[ExtendedName] as [sflVAIA_Region], 
			[ref_GIS_sflVAIA_Region].[name] as [sflVAIA_Region_ShortGISName], 
			v.[sflVAIA_Rayon_ID], 
			[ref_GIS_sflVAIA_Rayon].[ExtendedName] as [sflVAIA_Rayon], 
			[ref_GIS_sflVAIA_Rayon].[name] as [sflVAIA_Rayon_ShortGISName], 
			v.[sflVAIA_OIAcode], 
			v.[sflVAIA_NotificationSentDate], 
			v.[sflVAIA_SentByOfficer], 
			v.[sflVAIA_SentByInstitution_ID], 
			[ref_sflVAIA_SentByInstitution].[name] as [sflVAIA_SentByInstitution], 
			v.[sflVAIA_SentByInstitutionID], 
			v.[sflVAIA_NotificationReceivDate], 
			v.[sflVAIA_ReceivedByOfficer], 
			v.[sflVAIA_ReceivedByInst_ID], 
			[ref_sflVAIA_ReceivedByInst].[name] as [sflVAIA_ReceivedByInst], 
			v.[sflVAIA_ReceiveByInstitutionID], 
			v.[sflVAIA_InvestigationType_ID], 
			[ref_sflVAIA_InvestigationType].[name] as [sflVAIA_InvestigationType], 
			v.[sflVAIA_EnteredByOrganizationID], 
			v.[sflVAIA_SiteID_ID], 
			[ref_sflVAIA_SiteID].[name] as [sflVAIA_SiteID], 
			v.[sflVAIA_EnteredByPerson], 
			v.[sflVAIA_FinalDiagnosis_ID], 
			[ref_sflVAIA_FinalDiagnosis].[name] as [sflVAIA_FinalDiagnosis], 
			v.[sflVAIA_DateOfEntry], 
			v.[sflVAIA_CaseID], 
			v.[sflVAIA_AdministrativeLevel_ID], 
			[ref_sflVAIA_AdministrativeLevel].[name] as [sflVAIA_AdministrativeLevel] 
from		vw1100SearchQuery__53649700000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAIA_TimeIntervalUnit] 
on			[ref_sflVAIA_TimeIntervalUnit].idfsReference = v.[sflVAIA_TimeIntervalUnit_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVAIA_AnimalSpecies] 
on			[ref_sflVAIA_AnimalSpecies].idfsReference = v.[sflVAIA_AnimalSpecies_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAIA_Settlement]  
on			[ref_GIS_sflVAIA_Settlement].idfsReference = v.[sflVAIA_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAIA_Region]  
on			[ref_GIS_sflVAIA_Region].idfsReference = v.[sflVAIA_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAIA_Rayon]  
on			[ref_GIS_sflVAIA_Rayon].idfsReference = v.[sflVAIA_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIA_SentByInstitution] 
on			[ref_sflVAIA_SentByInstitution].idfsReference = v.[sflVAIA_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAIA_ReceivedByInst] 
on			[ref_sflVAIA_ReceivedByInst].idfsReference = v.[sflVAIA_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000144) [ref_sflVAIA_InvestigationType] 
on			[ref_sflVAIA_InvestigationType].idfsReference = v.[sflVAIA_InvestigationType_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAIA_SiteID] 
on			[ref_sflVAIA_SiteID].idfsReference = v.[sflVAIA_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVAIA_FinalDiagnosis] 
on			[ref_sflVAIA_FinalDiagnosis].idfsReference = v.[sflVAIA_FinalDiagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAIA_AdministrativeLevel] 
on			[ref_sflVAIA_AdministrativeLevel].idfsReference = v.[sflVAIA_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflVAIA_DateOfEntry] >=  N'20200101'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53657980000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53657980000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_TestConducted_ID], 
			[ref_sflHC_TestConducted].[name] as [sflHC_TestConducted], 
			v.[sflHC_PatientNotificationStatus_ID], 
			[ref_sflHC_PatientNotificationStatus].[name] as [sflHC_PatientNotificationStatus], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflHC_PatientSex_ID], 
			[ref_sflHC_PatientSex].[name] as [sflHC_PatientSex], 
			v.[sflHC_SamplesCollected_ID], 
			[ref_sflHC_SamplesCollected].[name] as [sflHC_SamplesCollected], 
			v.[sflHC_ReasonForNotCollectingSample_ID], 
			[ref_sflHC_ReasonForNotCollectingSample].[name] as [sflHC_ReasonForNotCollectingSample], 
			v.[sflHC_HospitalizationPlace], 
			v.[sflHC_PatientPersonalIDType_ID], 
			[ref_sflHC_PatientPersonalIDType].[name] as [sflHC_PatientPersonalIDType], 
			v.[sflHC_PatientPersonalID], 
			v.[sflHC_PatientName], 
			v.[sflHC_PatientCRSettlement_ID], 
			[ref_GIS_sflHC_PatientCRSettlement].[ExtendedName] as [sflHC_PatientCRSettlement], 
			[ref_GIS_sflHC_PatientCRSettlement].[name] as [sflHC_PatientCRSettlement_ShortGISName], 
			v.[sflHC_PatientCRRegion_ID], 
			[ref_GIS_sflHC_PatientCRRegion].[ExtendedName] as [sflHC_PatientCRRegion], 
			[ref_GIS_sflHC_PatientCRRegion].[name] as [sflHC_PatientCRRegion_ShortGISName], 
			v.[sflHC_PatientCRRayon_ID], 
			[ref_GIS_sflHC_PatientCRRayon].[ExtendedName] as [sflHC_PatientCRRayon], 
			[ref_GIS_sflHC_PatientCRRayon].[name] as [sflHC_PatientCRRayon_ShortGISName], 
			v.[sflHC_PatientCRLongitude], 
			v.[sflHC_PatientCRLatitudee], 
			v.[sflHC_PCRElevationm], 
			v.[sflHC_PatientCRCoordinates], 
			v.[sflHC_PatientCRAddress_ID], 
			[ref_GL_sflHC_PatientCRAddress].[strDefaultShortAddressString] as [sflHC_PatientCRAddress], 
			v.[sflHC_PatientAgeGroup], 
			v.[sflHC_Outcome_ID], 
			[ref_sflHC_Outcome].[name] as [sflHC_Outcome], 
			v.[sflHC_OtherLocation], 
			v.[sflHC_InvestigatedByOffice_ID], 
			[ref_sflHC_InvestigatedByOffice].[name] as [sflHC_InvestigatedByOffice], 
			v.[sflHC_InvestigatedByOfficeID], 
			v.[sflHC_PatientOccupation_ID], 
			[ref_sflHC_PatientOccupation].[name] as [sflHC_PatientOccupation], 
			v.[sflHC_SentByOfficerIDType_ID], 
			[ref_sflHC_SentByOfficerIDType].[name] as [sflHC_SentByOfficerIDType], 
			v.[sflHC_SentByOfficerID], 
			v.[sflHC_SentByPerson], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_SentByOfficeID], 
			v.[sflHC_ReceivedByOfficerIDType_ID], 
			[ref_sflHC_ReceivedByOfficerIDType].[name] as [sflHC_ReceivedByOfficerIDType], 
			v.[sflHC_ReceivedByOfficerID], 
			v.[sflHC_ReceivedByPerson], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflHC_ReceivedByOfficeID], 
			v.[sflHC_NotificationDate], 
			v.[sflHC_NonNotifiableDiagnosis_ID], 
			[ref_sflHC_NonNotifiableDiagnosis].[name] as [sflHC_NonNotifiableDiagnosis], 
			v.[sflHC_LocationSettlement_ID], 
			[ref_GIS_sflHC_LocationSettlement].[ExtendedName] as [sflHC_LocationSettlement], 
			[ref_GIS_sflHC_LocationSettlement].[name] as [sflHC_LocationSettlement_ShortGISName], 
			v.[sflHC_LocationRegion_ID], 
			[ref_GIS_sflHC_LocationRegion].[ExtendedName] as [sflHC_LocationRegion], 
			[ref_GIS_sflHC_LocationRegion].[name] as [sflHC_LocationRegion_ShortGISName], 
			v.[sflHC_LocationRayon_ID], 
			[ref_GIS_sflHC_LocationRayon].[ExtendedName] as [sflHC_LocationRayon], 
			[ref_GIS_sflHC_LocationRayon].[name] as [sflHC_LocationRayon_ShortGISName], 
			v.[sflHC_LocationLongitude], 
			v.[sflHC_LocationLatitude], 
			v.[sflHC_LocationIsForeignAddress_ID], 
			[ref_sflHC_LocationIsForeignAddress].[name] as [sflHC_LocationIsForeignAddress], 
			v.[sflHC_LocationForeignAddress], 
			v.[sflHC_LocationCountry_ID], 
			[ref_GIS_sflHC_LocationCountry].[ExtendedName] as [sflHC_LocationCountry], 
			[ref_GIS_sflHC_LocationCountry].[name] as [sflHC_LocationCountry_ShortGISName], 
			v.[sflHC_LocationCoordinates], 
			v.[sflHC_HospitalizationStatus_ID], 
			[ref_sflHC_HospitalizationStatus].[name] as [sflHC_HospitalizationStatus], 
			v.[sflHC_LocalID], 
			v.[sflHC_InitialCaseClassification_ID], 
			[ref_sflHC_InitialCaseClassification].[name] as [sflHC_InitialCaseClassification], 
			v.[sflHC_Hospitalization_ID], 
			[ref_sflHC_Hospitalization].[name] as [sflHC_Hospitalization], 
			v.[sflHC_HospitalNameID], 
			v.[sflHC_CurrentLocation_ID], 
			[ref_sflHC_CurrentLocation].[name] as [sflHC_CurrentLocation], 
			v.[sflHC_FinalCaseClassification_ID], 
			[ref_sflHC_FinalCaseClassification].[name] as [sflHC_FinalCaseClassification], 
			v.[sflHC_FacilityWherePatientFSC_ID], 
			[ref_sflHC_FacilityWherePatientFSC].[name] as [sflHC_FacilityWherePatientFSC], 
			v.[sflHC_FacilityWherePatientFSCCode], 
			v.[sflHC_EpiPersonalIDType_ID], 
			[ref_sflHC_EpiPersonalIDType].[name] as [sflHC_EpiPersonalIDType], 
			v.[sflHC_EpiPersonalID], 
			v.[sflHC_EpidemiologistName], 
			v.[sflHC_EnteredBySite_ID], 
			[ref_sflHC_EnteredBySite].[name] as [sflHC_EnteredBySite], 
			v.[sflHC_EnteredByOrganizationID], 
			v.[sflHC_EnteredByEmployer], 
			v.[sflHC_PatientEmployerPhone], 
			v.[sflHC_PatientEmployer], 
			v.[sflHC_CaseProgressStatus_ID], 
			[ref_sflHC_CaseProgressStatus].[name] as [sflHC_CaseProgressStatus], 
			v.[sflHC_CaseID], 
			v.[sflHC_CaseClassification_ID], 
			[ref_sflHC_CaseClassification].[name] as [sflHC_CaseClassification], 
			v.[sflHC_DiagnosesAndGroups_ID], 
			[ref_sflHC_DiagnosesAndGroups].[name] as [sflHC_DiagnosesAndGroups], 
			v.[sflHC_DiagnosisDate], 
			v.[sflHC_DiagnosisCode], 
			v.[sflHC_DiagnosisIsZoonotic_ID], 
			[ref_sflHC_DiagnosisIsZoonotic].[name] as [sflHC_DiagnosisIsZoonotic], 
			v.[sflHC_Diagnosis_ID], 
			[ref_sflHC_Diagnosis].[name] as [sflHC_Diagnosis], 
			v.[sflHC_DaysAfterSymptOnsetUntilFSC], 
			v.[sflHC_DaysAfterFSCUntilEntered], 
			v.[sflHC_DaysAfterFSCUntilFinalDiag], 
			v.[sflHC_DaysAfterOnsetSymptUntilNotif], 
			v.[sflHC_DaysAfterNotification], 
			v.[sflHC_DaysAfterNotifUntilCaseInvest], 
			v.[sflHC_DaysAfterFSCUntilNotif], 
			v.[sflHC_DaysAfterInitDiagUntilNotif], 
			v.[sflHC_PatientFirstSoughtCareDate], 
			v.[sflHC_SymptomOnsetDate], 
			v.[sflHC_FacilityLastVisitDate], 
			v.[sflHC_PatientHospitalizationDate], 
			v.[sflHC_DateFinalCaseClassification], 
			v.[sflHC_ExposureDate], 
			v.[sflHC_FinalDiagnosisDate], 
			v.[sflHC_PatientDischargeDate], 
			v.[sflHC_PatientDeathDate], 
			v.[sflHC_CompletionPaperFormDate], 
			v.[sflHC_PatientDOB], 
			v.[sflHC_ModificationDate], 
			v.[sflHC_EnteredDate], 
			v.[sflHC_PatientNationality_ID], 
			[ref_sflHC_PatientNationality].[name] as [sflHC_PatientNationality], 
			v.[sflHC_LabDiagBasis_ID], 
			[ref_sflHC_LabDiagBasis].[name] as [sflHC_LabDiagBasis], 
			v.[sflHC_EpiDiagBasis_ID], 
			[ref_sflHC_EpiDiagBasis].[name] as [sflHC_EpiDiagBasis], 
			v.[sflHC_ClinicalDiagBasis_ID], 
			[ref_sflHC_ClinicalDiagBasis].[name] as [sflHC_ClinicalDiagBasis], 
			v.[sflHC_AntimicrobialTherapy_ID], 
			[ref_sflHC_AntimicrobialTherapy].[name] as [sflHC_AntimicrobialTherapy], 
			v.[sflHC_PatientAgeType_ID], 
			[ref_sflHC_PatientAgeType].[name] as [sflHC_PatientAgeType], 
			v.[sflHC_PatientAge], 
			v.[sflHC_PatientPhone] 
from		vw1100SearchQuery__53657980000000 v

left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_TestConducted] 
on			[ref_sflHC_TestConducted].idfsReference = v.[sflHC_TestConducted_ID] 
left join	fnReferenceRepair(@LangID, 19000035) [ref_sflHC_PatientNotificationStatus] 
on			[ref_sflHC_PatientNotificationStatus].idfsReference = v.[sflHC_PatientNotificationStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflHC_PatientSex] 
on			[ref_sflHC_PatientSex].idfsReference = v.[sflHC_PatientSex_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_SamplesCollected] 
on			[ref_sflHC_SamplesCollected].idfsReference = v.[sflHC_SamplesCollected_ID] 
left join	fnReferenceRepair(@LangID, 19000150) [ref_sflHC_ReasonForNotCollectingSample] 
on			[ref_sflHC_ReasonForNotCollectingSample].idfsReference = v.[sflHC_ReasonForNotCollectingSample_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_PatientPersonalIDType] 
on			[ref_sflHC_PatientPersonalIDType].idfsReference = v.[sflHC_PatientPersonalIDType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHC_PatientCRSettlement]  
on			[ref_GIS_sflHC_PatientCRSettlement].idfsReference = v.[sflHC_PatientCRSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_PatientCRRegion]  
on			[ref_GIS_sflHC_PatientCRRegion].idfsReference = v.[sflHC_PatientCRRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHC_PatientCRRayon]  
on			[ref_GIS_sflHC_PatientCRRayon].idfsReference = v.[sflHC_PatientCRRayon_ID] 
left join	fnGeoLocationTranslation(@LangID) [ref_GL_sflHC_PatientCRAddress]  
on			[ref_GL_sflHC_PatientCRAddress].idfGeoLocation = v.[sflHC_PatientCRAddress_ID] 
left join	fnReferenceRepair(@LangID, 19000064) [ref_sflHC_Outcome] 
on			[ref_sflHC_Outcome].idfsReference = v.[sflHC_Outcome_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_InvestigatedByOffice] 
on			[ref_sflHC_InvestigatedByOffice].idfsReference = v.[sflHC_InvestigatedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000061) [ref_sflHC_PatientOccupation] 
on			[ref_sflHC_PatientOccupation].idfsReference = v.[sflHC_PatientOccupation_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_SentByOfficerIDType] 
on			[ref_sflHC_SentByOfficerIDType].idfsReference = v.[sflHC_SentByOfficerIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_ReceivedByOfficerIDType] 
on			[ref_sflHC_ReceivedByOfficerIDType].idfsReference = v.[sflHC_ReceivedByOfficerIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000149) [ref_sflHC_NonNotifiableDiagnosis] 
on			[ref_sflHC_NonNotifiableDiagnosis].idfsReference = v.[sflHC_NonNotifiableDiagnosis_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHC_LocationSettlement]  
on			[ref_GIS_sflHC_LocationSettlement].idfsReference = v.[sflHC_LocationSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_LocationRegion]  
on			[ref_GIS_sflHC_LocationRegion].idfsReference = v.[sflHC_LocationRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHC_LocationRayon]  
on			[ref_GIS_sflHC_LocationRayon].idfsReference = v.[sflHC_LocationRayon_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_LocationIsForeignAddress] 
on			[ref_sflHC_LocationIsForeignAddress].idfsReference = v.[sflHC_LocationIsForeignAddress_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflHC_LocationCountry]  
on			[ref_GIS_sflHC_LocationCountry].idfsReference = v.[sflHC_LocationCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000041) [ref_sflHC_HospitalizationStatus] 
on			[ref_sflHC_HospitalizationStatus].idfsReference = v.[sflHC_HospitalizationStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_InitialCaseClassification] 
on			[ref_sflHC_InitialCaseClassification].idfsReference = v.[sflHC_InitialCaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_Hospitalization] 
on			[ref_sflHC_Hospitalization].idfsReference = v.[sflHC_Hospitalization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflHC_CurrentLocation] 
on			[ref_sflHC_CurrentLocation].idfsReference = v.[sflHC_CurrentLocation_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_FinalCaseClassification] 
on			[ref_sflHC_FinalCaseClassification].idfsReference = v.[sflHC_FinalCaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_FacilityWherePatientFSC] 
on			[ref_sflHC_FacilityWherePatientFSC].idfsReference = v.[sflHC_FacilityWherePatientFSC_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflHC_EpiPersonalIDType] 
on			[ref_sflHC_EpiPersonalIDType].idfsReference = v.[sflHC_EpiPersonalIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_EnteredBySite] 
on			[ref_sflHC_EnteredBySite].idfsReference = v.[sflHC_EnteredBySite_ID] 
left join	fnReferenceRepair(@LangID, 19000111) [ref_sflHC_CaseProgressStatus] 
on			[ref_sflHC_CaseProgressStatus].idfsReference = v.[sflHC_CaseProgressStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflHC_CaseClassification] 
on			[ref_sflHC_CaseClassification].idfsReference = v.[sflHC_CaseClassification_ID] 
left join	fnDiagnosesAndGroups(@LangID) [ref_sflHC_DiagnosesAndGroups] 
on			[ref_sflHC_DiagnosesAndGroups].idfsDiagnosisOrDiagnosisGroup = v.[sflHC_DiagnosesAndGroups_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_DiagnosisIsZoonotic] 
on			[ref_sflHC_DiagnosisIsZoonotic].idfsReference = v.[sflHC_DiagnosisIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHC_Diagnosis] 
on			[ref_sflHC_Diagnosis].idfsReference = v.[sflHC_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000054) [ref_sflHC_PatientNationality] 
on			[ref_sflHC_PatientNationality].idfsReference = v.[sflHC_PatientNationality_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_LabDiagBasis] 
on			[ref_sflHC_LabDiagBasis].idfsReference = v.[sflHC_LabDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_EpiDiagBasis] 
on			[ref_sflHC_EpiDiagBasis].idfsReference = v.[sflHC_EpiDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_ClinicalDiagBasis] 
on			[ref_sflHC_ClinicalDiagBasis].idfsReference = v.[sflHC_ClinicalDiagBasis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_AntimicrobialTherapy] 
on			[ref_sflHC_AntimicrobialTherapy].idfsReference = v.[sflHC_AntimicrobialTherapy_ID] 
left join	fnReferenceRepair(@LangID, 19000042) [ref_sflHC_PatientAgeType] 
on			[ref_sflHC_PatientAgeType].idfsReference = v.[sflHC_PatientAgeType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHC_EnteredDate] >=  N'20200101'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53699270000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53699270000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVAD_Total], 
			v.[sflVAD_TimeIntervalUnit_ID], 
			[ref_sflVAD_TimeIntervalUnit].[name] as [sflVAD_TimeIntervalUnit], 
			v.[sflVAD_StartDate], 
			v.[sflVAD_GroupingDate], 
			v.[sflVAD_EndDate], 
			v.[sflVAD_Settlement_ID], 
			[ref_GIS_sflVAD_Settlement].[ExtendedName] as [sflVAD_Settlement], 
			[ref_GIS_sflVAD_Settlement].[name] as [sflVAD_Settlement_ShortGISName], 
			v.[sflVAD_Region_ID], 
			[ref_GIS_sflVAD_Region].[ExtendedName] as [sflVAD_Region], 
			[ref_GIS_sflVAD_Region].[name] as [sflVAD_Region_ShortGISName], 
			v.[sflVAD_Rayon_ID], 
			[ref_GIS_sflVAD_Rayon].[ExtendedName] as [sflVAD_Rayon], 
			[ref_GIS_sflVAD_Rayon].[name] as [sflVAD_Rayon_ShortGISName], 
			v.[sflVAD_OIEcode], 
			v.[sflVAD_NotificationSentDate], 
			v.[sflVAD_SentByOfficer], 
			v.[sflVAD_SentByInstitution_ID], 
			[ref_sflVAD_SentByInstitution].[name] as [sflVAD_SentByInstitution], 
			v.[sflVAD_SentByInstitutionID], 
			v.[sflVAD_NotificationReceivDate], 
			v.[sflVAD_ReceivedByOfficer], 
			v.[sflVAD_ReceivedByInst_ID], 
			[ref_sflVAD_ReceivedByInst].[name] as [sflVAD_ReceivedByInst], 
			v.[sflVAD_ReceiveByInstitutionID], 
			v.[sflVAD_EnteredByOrganizationID], 
			v.[sflVAD_SiteID_ID], 
			[ref_sflVAD_SiteID].[name] as [sflVAD_SiteID], 
			v.[sflVAD_EnteredByPerson], 
			v.[sflVAD_IsZoonotic_ID], 
			[ref_sflVAD_IsZoonotic].[name] as [sflVAD_IsZoonotic], 
			v.[sflVAD_Diagnosis_ID], 
			[ref_sflVAD_Diagnosis].[name] as [sflVAD_Diagnosis], 
			v.[sflVAD_DateOfEntry], 
			v.[sflVAD_CaseID], 
			v.[sflVAD_AdministrativeLevel_ID], 
			[ref_sflVAD_AdministrativeLevel].[name] as [sflVAD_AdministrativeLevel] 
from		vw1100SearchQuery__53699270000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflVAD_TimeIntervalUnit] 
on			[ref_sflVAD_TimeIntervalUnit].idfsReference = v.[sflVAD_TimeIntervalUnit_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVAD_Settlement]  
on			[ref_GIS_sflVAD_Settlement].idfsReference = v.[sflVAD_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVAD_Region]  
on			[ref_GIS_sflVAD_Region].idfsReference = v.[sflVAD_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVAD_Rayon]  
on			[ref_GIS_sflVAD_Rayon].idfsReference = v.[sflVAD_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAD_SentByInstitution] 
on			[ref_sflVAD_SentByInstitution].idfsReference = v.[sflVAD_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVAD_ReceivedByInst] 
on			[ref_sflVAD_ReceivedByInst].idfsReference = v.[sflVAD_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVAD_SiteID] 
on			[ref_sflVAD_SiteID].idfsReference = v.[sflVAD_SiteID_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVAD_IsZoonotic] 
on			[ref_sflVAD_IsZoonotic].idfsReference = v.[sflVAD_IsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVAD_Diagnosis] 
on			[ref_sflVAD_Diagnosis].idfsReference = v.[sflVAD_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflVAD_AdministrativeLevel] 
on			[ref_sflVAD_AdministrativeLevel].idfsReference = v.[sflVAD_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53707440000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53707440000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVCVaccination_Comments], 
			v.[sflBss_SeasonalFluVaccine_ID], 
			[ref_sflBss_SeasonalFluVaccine].[name] as [sflBss_SeasonalFluVaccine], 
			v.[sflOHC_Symptoms], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflOS_Settlement_ID], 
			[ref_GIS_sflOS_Settlement].[ExtendedName] as [sflOS_Settlement], 
			[ref_GIS_sflOS_Settlement].[name] as [sflOS_Settlement_ShortGISName], 
			v.[sflHC_SamplesCollected_ID], 
			[ref_sflHC_SamplesCollected].[name] as [sflHC_SamplesCollected], 
			v.[sflOutbreak_LocationRegion_ID], 
			[ref_GIS_sflOutbreak_LocationRegion].[ExtendedName] as [sflOutbreak_LocationRegion], 
			[ref_GIS_sflOutbreak_LocationRegion].[name] as [sflOutbreak_LocationRegion_ShortGISName], 
			v.[sflHC_ReasonForNotCollectingSample_ID], 
			[ref_sflHC_ReasonForNotCollectingSample].[name] as [sflHC_ReasonForNotCollectingSample], 
			v.[sflOutbreak_LocationRayon_ID], 
			[ref_GIS_sflOutbreak_LocationRayon].[ExtendedName] as [sflOutbreak_LocationRayon], 
			[ref_GIS_sflOutbreak_LocationRayon].[name] as [sflOutbreak_LocationRayon_ShortGISName], 
			v.[sflOHC_PrimaryCase], 
			v.[sflHASST_PersonID], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflHC_OutbreakID], 
			v.[sflOutbreak_ID], 
			v.[sflOHC_NumberOfContacts], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflHC_LocationLongitude], 
			v.[sflHC_LocationLatitude], 
			v.[sflHCSample_SentToOrganization_ID], 
			[ref_sflHCSample_SentToOrganization].[name] as [sflHCSample_SentToOrganization], 
			v.[sflVC_InvestigatedByPerson], 
			v.[sflHC_Hospitalization_ID], 
			[ref_sflHC_Hospitalization].[name] as [sflHC_Hospitalization], 
			v.[sflBss_NameOfHospital_ID], 
			[ref_sflBss_NameOfHospital].[name] as [sflBss_NameOfHospital], 
			v.[sflHC_PatientSex_ID], 
			[ref_sflHC_PatientSex].[name] as [sflHC_PatientSex], 
			cast((   select  distinct ASSessionDiagnosis.[name] + '; '    from  tlbMonitoringSessionToDiagnosis SessionToDiagnosesString   inner join fnReferenceRepair(@LangID, 19000019) ASSessionDiagnosis on   ASSessionDiagnosis.idfsReference = SessionToDiagnosesString.idfsDiagnosis   where  SessionToDiagnosesString.idfMonitoringSession = v.[sflHASS_Diseases]      and SessionToDiagnosesString.intRowStatus = 0   order by ASSessionDiagnosis.[name] + '; '    for xml path('')     ) as nvarchar(max)) as [sflHASS_Diseases] , 
			v.[sflVCVaccination_Date], 
			v.[sflBss_DateOfSymptomsOnset], 
			v.[sflHC_EnteredDate], 
			v.[sflZD_PatientHospitalizationDate], 
			v.[sflHC_DiagnosisDate], 
			v.[sflHC_PatientDischargeDate], 
			v.[sflHC_PatientDOB], 
			v.[sflHASS_EnteredDate], 
			v.[sflHCAntibiotic_AdministratedDate], 
			v.[sflOutbreak_Status_ID], 
			[ref_sflOutbreak_Status].[name] as [sflOutbreak_Status], 
			v.[sflOHC_CaseQuestionnaire], 
			v.[sflOHC_CaseMonitoring], 
			v.[sflZD_CaseClassification_ID], 
			[ref_sflZD_CaseClassification].[name] as [sflZD_CaseClassification], 
			v.[sflBss_AdminAntiviralMedication_ID], 
			[ref_sflBss_AdminAntiviralMedication].[name] as [sflBss_AdminAntiviralMedication], 
			v.[sflBss_NameOfMedication], 
			v.[sflHCAntibiotic_Dose], 
			v.[sflZD_PatientAge] 
from		vw1100SearchQuery__53707440000000 v

left join	fnReferenceRepair(@LangID, 19000100) [ref_sflBss_SeasonalFluVaccine] 
on			[ref_sflBss_SeasonalFluVaccine].idfsReference = v.[sflBss_SeasonalFluVaccine_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOS_Settlement]  
on			[ref_GIS_sflOS_Settlement].idfsReference = v.[sflOS_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_SamplesCollected] 
on			[ref_sflHC_SamplesCollected].idfsReference = v.[sflHC_SamplesCollected_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOutbreak_LocationRegion]  
on			[ref_GIS_sflOutbreak_LocationRegion].idfsReference = v.[sflOutbreak_LocationRegion_ID] 
left join	fnReferenceRepair(@LangID, 19000150) [ref_sflHC_ReasonForNotCollectingSample] 
on			[ref_sflHC_ReasonForNotCollectingSample].idfsReference = v.[sflHC_ReasonForNotCollectingSample_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOutbreak_LocationRayon]  
on			[ref_GIS_sflOutbreak_LocationRayon].idfsReference = v.[sflOutbreak_LocationRayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_SentToOrganization] 
on			[ref_sflHCSample_SentToOrganization].idfsReference = v.[sflHCSample_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_Hospitalization] 
on			[ref_sflHC_Hospitalization].idfsReference = v.[sflHC_Hospitalization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflBss_NameOfHospital] 
on			[ref_sflBss_NameOfHospital].idfsReference = v.[sflBss_NameOfHospital_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflHC_PatientSex] 
on			[ref_sflHC_PatientSex].idfsReference = v.[sflHC_PatientSex_ID] 
left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOutbreak_Status] 
on			[ref_sflOutbreak_Status].idfsReference = v.[sflOutbreak_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflZD_CaseClassification] 
on			[ref_sflZD_CaseClassification].idfsReference = v.[sflZD_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflBss_AdminAntiviralMedication] 
on			[ref_sflBss_AdminAntiviralMedication].idfsReference = v.[sflBss_AdminAntiviralMedication_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53708010000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53708010000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflFA_FarmType_ID], 
			[ref_sflFA_FarmType].[name] as [sflFA_FarmType], 
			v.[sflFA_FarmSettlement_ID], 
			[ref_GIS_sflFA_FarmSettlement].[ExtendedName] as [sflFA_FarmSettlement], 
			[ref_GIS_sflFA_FarmSettlement].[name] as [sflFA_FarmSettlement_ShortGISName], 
			v.[sflFA_FarmRegion_ID], 
			[ref_GIS_sflFA_FarmRegion].[ExtendedName] as [sflFA_FarmRegion], 
			[ref_GIS_sflFA_FarmRegion].[name] as [sflFA_FarmRegion_ShortGISName], 
			v.[sflFA_FarmRayon_ID], 
			[ref_GIS_sflFA_FarmRayon].[ExtendedName] as [sflFA_FarmRayon], 
			[ref_GIS_sflFA_FarmRayon].[name] as [sflFA_FarmRayon_ShortGISName], 
			v.[sflFA_FarmPostalCode], 
			v.[sflFA_FarmPhone], 
			v.[sflFA_FarmOwner], 
			v.[sflFA_FarmName], 
			v.[sflFA_FarmLongitude], 
			v.[sflFA_FarmLatitude], 
			v.[sflFA_FarmID], 
			v.[sflFA_FarmFax], 
			v.[sflFA_FarmEmail], 
			v.[sflFA_FarmDateLastUpdated], 
			v.[sflFA_FarmCountry_ID], 
			[ref_GIS_sflFA_FarmCountry].[ExtendedName] as [sflFA_FarmCountry], 
			[ref_GIS_sflFA_FarmCountry].[name] as [sflFA_FarmCountry_ShortGISName], 
			v.[sflFA_FarmCoordinates], 
			v.[sflFA_FarmAddress_ID], 
			[ref_GL_sflFA_FarmAddress].[strDefaultShortAddressString] as [sflFA_FarmAddress] 
from		vw1100SearchQuery__53708010000000 v

left join	fnAccessoryCode(@LangID) [ref_sflFA_FarmType] 
on			[ref_sflFA_FarmType].intHACode = v.[sflFA_FarmType_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflFA_FarmSettlement]  
on			[ref_GIS_sflFA_FarmSettlement].idfsReference = v.[sflFA_FarmSettlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflFA_FarmRegion]  
on			[ref_GIS_sflFA_FarmRegion].idfsReference = v.[sflFA_FarmRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflFA_FarmRayon]  
on			[ref_GIS_sflFA_FarmRayon].idfsReference = v.[sflFA_FarmRayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflFA_FarmCountry]  
on			[ref_GIS_sflFA_FarmCountry].idfsReference = v.[sflFA_FarmCountry_ID] 
left join	fnGeoLocationSharedTranslation(@LangID) [ref_GL_sflFA_FarmAddress]  
on			[ref_GL_sflFA_FarmAddress].idfGeoLocationShared = v.[sflFA_FarmAddress_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53762400000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53762400000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_CaseID], 
			v.[sflHC_Diagnosis_ID], 
			[ref_sflHC_Diagnosis].[name] as [sflHC_Diagnosis], 
			v.[sflHC_CS__10034010__10066527], 
			v.[sflHC_CS__10034010__10066530_ID], 
			[ref_sflHC_CS__10034010__10066530].[name] as [sflHC_CS__10034010__10066530], 
			v.[sflHC_CS__10034010__10066508_ID], 
			[ref_sflHC_CS__10034010__10066508].[name] as [sflHC_CS__10034010__10066508], 
			v.[sflHC_CS__10034010__10066509_ID], 
			[ref_sflHC_CS__10034010__10066509].[name] as [sflHC_CS__10034010__10066509], 
			v.[sflHC_CS__10034010__10066529], 
			v.[sflHC_CS__10034010__10066528], 
			v.[sflHC_CS__10034010__10066510], 
			v.[sflHC_CS__10034010__10066521], 
			v.[sflHC_CS__10034010__10066519], 
			v.[sflHC_CS__10034010__10066514_ID], 
			[ref_sflHC_CS__10034010__10066514].[name] as [sflHC_CS__10034010__10066514], 
			v.[sflHC_CS__10034010__10066511_ID], 
			[ref_sflHC_CS__10034010__10066511].[name] as [sflHC_CS__10034010__10066511], 
			v.[sflHC_CS__10034010__10066512_ID], 
			[ref_sflHC_CS__10034010__10066512].[name] as [sflHC_CS__10034010__10066512], 
			v.[sflHC_CS__10034010__10066513_ID], 
			[ref_sflHC_CS__10034010__10066513].[name] as [sflHC_CS__10034010__10066513], 
			v.[sflHC_CS__10034010__10066506], 
			v.[sflHC_CS__10034010__10066504_ID], 
			[ref_sflHC_CS__10034010__10066504].[name] as [sflHC_CS__10034010__10066504], 
			v.[sflHC_CS__10034010__10066520], 
			v.[sflHC_CS__10034010__10066517], 
			v.[sflHC_CS__10034010__10066501], 
			v.[sflHC_CS__10034010__10066507_ID], 
			[ref_sflHC_CS__10034010__10066507].[name] as [sflHC_CS__10034010__10066507], 
			v.[sflHC_CS__10034010__10066522], 
			v.[sflHC_CS__10034010__10066525], 
			v.[sflHC_CS__10034010__10066516], 
			v.[sflHC_CS__10034010__10066505_ID], 
			[ref_sflHC_CS__10034010__10066505].[name] as [sflHC_CS__10034010__10066505], 
			v.[sflHC_CS__10034010__10066524], 
			v.[sflHC_CS__10034010__10066526], 
			v.[sflHC_CS__10034010__10066531], 
			v.[sflHC_CS__10034010__10066518], 
			v.[sflHC_CS__10034010__10066523], 
			v.[sflHC_CS__10034010__10066502_ID], 
			[ref_sflHC_CS__10034010__10066502].[name] as [sflHC_CS__10034010__10066502], 
			v.[sflHC_CS__10034010__10066503_ID], 
			[ref_sflHC_CS__10034010__10066503].[name] as [sflHC_CS__10034010__10066503], 
			v.[sflHC_CS__10034010__10066515_ID], 
			[ref_sflHC_CS__10034010__10066515].[name] as [sflHC_CS__10034010__10066515] 
from		vw1100SearchQuery__53762400000000 v

left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHC_Diagnosis] 
on			[ref_sflHC_Diagnosis].idfsReference = v.[sflHC_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000162) [ref_sflHC_CS__10034010__10066530] 
on			[ref_sflHC_CS__10034010__10066530].idfsReference = v.[sflHC_CS__10034010__10066530_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066508] 
on			[ref_sflHC_CS__10034010__10066508].idfsReference = v.[sflHC_CS__10034010__10066508_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066509] 
on			[ref_sflHC_CS__10034010__10066509].idfsReference = v.[sflHC_CS__10034010__10066509_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066514] 
on			[ref_sflHC_CS__10034010__10066514].idfsReference = v.[sflHC_CS__10034010__10066514_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066511] 
on			[ref_sflHC_CS__10034010__10066511].idfsReference = v.[sflHC_CS__10034010__10066511_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066512] 
on			[ref_sflHC_CS__10034010__10066512].idfsReference = v.[sflHC_CS__10034010__10066512_ID] 
left join	fnReferenceRepair(@LangID, 19000064) [ref_sflHC_CS__10034010__10066513] 
on			[ref_sflHC_CS__10034010__10066513].idfsReference = v.[sflHC_CS__10034010__10066513_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066504] 
on			[ref_sflHC_CS__10034010__10066504].idfsReference = v.[sflHC_CS__10034010__10066504_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066507] 
on			[ref_sflHC_CS__10034010__10066507].idfsReference = v.[sflHC_CS__10034010__10066507_ID] 
left join	fnReferenceRepair(@LangID, 19000160) [ref_sflHC_CS__10034010__10066505] 
on			[ref_sflHC_CS__10034010__10066505].idfsReference = v.[sflHC_CS__10034010__10066505_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066502] 
on			[ref_sflHC_CS__10034010__10066502].idfsReference = v.[sflHC_CS__10034010__10066502_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066503] 
on			[ref_sflHC_CS__10034010__10066503].idfsReference = v.[sflHC_CS__10034010__10066503_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066515] 
on			[ref_sflHC_CS__10034010__10066515].idfsReference = v.[sflHC_CS__10034010__10066515_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHC_Diagnosis_ID] = 10019001)or (v.[sflHC_Diagnosis_ID] = 10019002))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53792560000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53792560000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVCVaccination_Comments], 
			v.[sflBss_SeasonalFluVaccine_ID], 
			[ref_sflBss_SeasonalFluVaccine].[name] as [sflBss_SeasonalFluVaccine], 
			v.[sflOHC_Symptoms], 
			v.[sflHC_InvestigationStartDate], 
			v.[sflOS_Settlement_ID], 
			[ref_GIS_sflOS_Settlement].[ExtendedName] as [sflOS_Settlement], 
			[ref_GIS_sflOS_Settlement].[name] as [sflOS_Settlement_ShortGISName], 
			v.[sflHC_SamplesCollected_ID], 
			[ref_sflHC_SamplesCollected].[name] as [sflHC_SamplesCollected], 
			v.[sflOutbreak_LocationRegion_ID], 
			[ref_GIS_sflOutbreak_LocationRegion].[ExtendedName] as [sflOutbreak_LocationRegion], 
			[ref_GIS_sflOutbreak_LocationRegion].[name] as [sflOutbreak_LocationRegion_ShortGISName], 
			v.[sflHC_ReasonForNotCollectingSample_ID], 
			[ref_sflHC_ReasonForNotCollectingSample].[name] as [sflHC_ReasonForNotCollectingSample], 
			v.[sflOutbreak_LocationRayon_ID], 
			[ref_GIS_sflOutbreak_LocationRayon].[ExtendedName] as [sflOutbreak_LocationRayon], 
			[ref_GIS_sflOutbreak_LocationRayon].[name] as [sflOutbreak_LocationRayon_ShortGISName], 
			v.[sflOHC_PrimaryCase], 
			v.[sflHASST_PersonID], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflHC_OutbreakID], 
			v.[sflOutbreak_ID], 
			v.[sflOHC_NumberOfContacts], 
			v.[sflHC_SentByOffice_ID], 
			[ref_sflHC_SentByOffice].[name] as [sflHC_SentByOffice], 
			v.[sflHC_ReceivedByOffice_ID], 
			[ref_sflHC_ReceivedByOffice].[name] as [sflHC_ReceivedByOffice], 
			v.[sflHC_LocationLongitude], 
			v.[sflHC_LocationLatitude], 
			v.[sflHCSample_SentToOrganization_ID], 
			[ref_sflHCSample_SentToOrganization].[name] as [sflHCSample_SentToOrganization], 
			v.[sflVC_InvestigatedByPerson], 
			v.[sflHC_Hospitalization_ID], 
			[ref_sflHC_Hospitalization].[name] as [sflHC_Hospitalization], 
			v.[sflBss_NameOfHospital_ID], 
			[ref_sflBss_NameOfHospital].[name] as [sflBss_NameOfHospital], 
			v.[sflHC_PatientSex_ID], 
			[ref_sflHC_PatientSex].[name] as [sflHC_PatientSex], 
			cast((   select  distinct ASSessionDiagnosis.[name] + '; '    from  tlbMonitoringSessionToDiagnosis SessionToDiagnosesString   inner join fnReferenceRepair(@LangID, 19000019) ASSessionDiagnosis on   ASSessionDiagnosis.idfsReference = SessionToDiagnosesString.idfsDiagnosis   where  SessionToDiagnosesString.idfMonitoringSession = v.[sflHASS_Diseases]      and SessionToDiagnosesString.intRowStatus = 0   order by ASSessionDiagnosis.[name] + '; '    for xml path('')     ) as nvarchar(max)) as [sflHASS_Diseases] , 
			v.[sflVCVaccination_Date], 
			v.[sflBss_DateOfSymptomsOnset], 
			v.[sflHC_EnteredDate], 
			v.[sflZD_PatientHospitalizationDate], 
			v.[sflHC_DiagnosisDate], 
			v.[sflHC_PatientDischargeDate], 
			v.[sflHC_PatientDOB], 
			v.[sflHASS_EnteredDate], 
			v.[sflHCAntibiotic_AdministratedDate], 
			v.[sflOutbreak_Status_ID], 
			[ref_sflOutbreak_Status].[name] as [sflOutbreak_Status], 
			v.[sflOHC_CaseQuestionnaire], 
			v.[sflOHC_CaseMonitoring], 
			v.[sflZD_CaseClassification_ID], 
			[ref_sflZD_CaseClassification].[name] as [sflZD_CaseClassification], 
			v.[sflBss_AdminAntiviralMedication_ID], 
			[ref_sflBss_AdminAntiviralMedication].[name] as [sflBss_AdminAntiviralMedication], 
			v.[sflBss_NameOfMedication], 
			v.[sflHCAntibiotic_Dose], 
			v.[sflZD_PatientAge] 
from		vw1100SearchQuery__53792560000000 v

left join	fnReferenceRepair(@LangID, 19000100) [ref_sflBss_SeasonalFluVaccine] 
on			[ref_sflBss_SeasonalFluVaccine].idfsReference = v.[sflBss_SeasonalFluVaccine_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOS_Settlement]  
on			[ref_GIS_sflOS_Settlement].idfsReference = v.[sflOS_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_SamplesCollected] 
on			[ref_sflHC_SamplesCollected].idfsReference = v.[sflHC_SamplesCollected_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOutbreak_LocationRegion]  
on			[ref_GIS_sflOutbreak_LocationRegion].idfsReference = v.[sflOutbreak_LocationRegion_ID] 
left join	fnReferenceRepair(@LangID, 19000150) [ref_sflHC_ReasonForNotCollectingSample] 
on			[ref_sflHC_ReasonForNotCollectingSample].idfsReference = v.[sflHC_ReasonForNotCollectingSample_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOutbreak_LocationRayon]  
on			[ref_GIS_sflOutbreak_LocationRayon].idfsReference = v.[sflOutbreak_LocationRayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_SentByOffice] 
on			[ref_sflHC_SentByOffice].idfsReference = v.[sflHC_SentByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHC_ReceivedByOffice] 
on			[ref_sflHC_ReceivedByOffice].idfsReference = v.[sflHC_ReceivedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHCSample_SentToOrganization] 
on			[ref_sflHCSample_SentToOrganization].idfsReference = v.[sflHCSample_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_Hospitalization] 
on			[ref_sflHC_Hospitalization].idfsReference = v.[sflHC_Hospitalization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflBss_NameOfHospital] 
on			[ref_sflBss_NameOfHospital].idfsReference = v.[sflBss_NameOfHospital_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflHC_PatientSex] 
on			[ref_sflHC_PatientSex].idfsReference = v.[sflHC_PatientSex_ID] 
left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOutbreak_Status] 
on			[ref_sflOutbreak_Status].idfsReference = v.[sflOutbreak_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflZD_CaseClassification] 
on			[ref_sflZD_CaseClassification].idfsReference = v.[sflZD_CaseClassification_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflBss_AdminAntiviralMedication] 
on			[ref_sflBss_AdminAntiviralMedication].idfsReference = v.[sflBss_AdminAntiviralMedication_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHASS_EnteredDate] >=  N'20220101'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53801670000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53801670000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_Diagnosis_ID], 
			[ref_sflHC_Diagnosis].[name] as [sflHC_Diagnosis], 
			v.[sflHC_CaseID], 
			v.[sflHC_CS__10034010__10066521], 
			v.[sflHC_CS__10034010__10066519], 
			v.[sflHC_CS__10034010__10066504_ID], 
			[ref_sflHC_CS__10034010__10066504].[name] as [sflHC_CS__10034010__10066504], 
			v.[sflHC_CS__10034010__10066520], 
			v.[sflHC_CS__10034010__10066517], 
			v.[sflHC_CS__10034010__10066501], 
			v.[sflHC_CS__10034010__10066510], 
			v.[sflHC_CS__10034010__10066507_ID], 
			[ref_sflHC_CS__10034010__10066507].[name] as [sflHC_CS__10034010__10066507], 
			v.[sflHC_CS__10034010__10066525], 
			v.[sflHC_CS__10034010__10066516], 
			v.[sflHC_CS__10034010__10066505_ID], 
			[ref_sflHC_CS__10034010__10066505].[name] as [sflHC_CS__10034010__10066505], 
			v.[sflHC_CS__10034010__10066524], 
			v.[sflHC_CS__10034010__10066526], 
			v.[sflHC_CS__10034010__10066506], 
			v.[sflHC_CS__10034010__10066503_ID], 
			[ref_sflHC_CS__10034010__10066503].[name] as [sflHC_CS__10034010__10066503], 
			v.[sflHC_CS__10034010__10066511_ID], 
			[ref_sflHC_CS__10034010__10066511].[name] as [sflHC_CS__10034010__10066511], 
			v.[sflHC_CS__10034010__10066512_ID], 
			[ref_sflHC_CS__10034010__10066512].[name] as [sflHC_CS__10034010__10066512], 
			v.[sflHC_CS__10034010__10066515_ID], 
			[ref_sflHC_CS__10034010__10066515].[name] as [sflHC_CS__10034010__10066515], 
			v.[sflHC_CS__10034010__10066513_ID], 
			[ref_sflHC_CS__10034010__10066513].[name] as [sflHC_CS__10034010__10066513], 
			v.[sflHC_CS__10034010__10066522], 
			v.[sflHC_CS__10034010__10066529], 
			v.[sflHC_CS__10034010__10066528], 
			v.[sflHC_CS__10034010__10066531], 
			v.[sflHC_CS__10034010__10066518], 
			v.[sflHC_CS__10034010__10066523], 
			v.[sflHC_CS__10034010__10066502_ID], 
			[ref_sflHC_CS__10034010__10066502].[name] as [sflHC_CS__10034010__10066502], 
			v.[sflHC_CS__10034010__10066527], 
			v.[sflHC_CS__10034010__10066514_ID], 
			[ref_sflHC_CS__10034010__10066514].[name] as [sflHC_CS__10034010__10066514], 
			v.[sflHC_CS__10034010__10066530_ID], 
			[ref_sflHC_CS__10034010__10066530].[name] as [sflHC_CS__10034010__10066530], 
			v.[sflHC_CS__10034010__10066508_ID], 
			[ref_sflHC_CS__10034010__10066508].[name] as [sflHC_CS__10034010__10066508], 
			v.[sflHC_CS__10034010__10066509_ID], 
			[ref_sflHC_CS__10034010__10066509].[name] as [sflHC_CS__10034010__10066509] 
from		vw1100SearchQuery__53801670000000 v

left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHC_Diagnosis] 
on			[ref_sflHC_Diagnosis].idfsReference = v.[sflHC_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066504] 
on			[ref_sflHC_CS__10034010__10066504].idfsReference = v.[sflHC_CS__10034010__10066504_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066507] 
on			[ref_sflHC_CS__10034010__10066507].idfsReference = v.[sflHC_CS__10034010__10066507_ID] 
left join	fnReferenceRepair(@LangID, 19000160) [ref_sflHC_CS__10034010__10066505] 
on			[ref_sflHC_CS__10034010__10066505].idfsReference = v.[sflHC_CS__10034010__10066505_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066503] 
on			[ref_sflHC_CS__10034010__10066503].idfsReference = v.[sflHC_CS__10034010__10066503_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066511] 
on			[ref_sflHC_CS__10034010__10066511].idfsReference = v.[sflHC_CS__10034010__10066511_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066512] 
on			[ref_sflHC_CS__10034010__10066512].idfsReference = v.[sflHC_CS__10034010__10066512_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066515] 
on			[ref_sflHC_CS__10034010__10066515].idfsReference = v.[sflHC_CS__10034010__10066515_ID] 
left join	fnReferenceRepair(@LangID, 19000064) [ref_sflHC_CS__10034010__10066513] 
on			[ref_sflHC_CS__10034010__10066513].idfsReference = v.[sflHC_CS__10034010__10066513_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066502] 
on			[ref_sflHC_CS__10034010__10066502].idfsReference = v.[sflHC_CS__10034010__10066502_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066514] 
on			[ref_sflHC_CS__10034010__10066514].idfsReference = v.[sflHC_CS__10034010__10066514_ID] 
left join	fnReferenceRepair(@LangID, 19000162) [ref_sflHC_CS__10034010__10066530] 
on			[ref_sflHC_CS__10034010__10066530].idfsReference = v.[sflHC_CS__10034010__10066530_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066508] 
on			[ref_sflHC_CS__10034010__10066508].idfsReference = v.[sflHC_CS__10034010__10066508_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHC_CS__10034010__10066509] 
on			[ref_sflHC_CS__10034010__10066509].idfsReference = v.[sflHC_CS__10034010__10066509_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHC_Diagnosis_ID] = 10019001)or (v.[sflHC_Diagnosis_ID] = 10019002))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53888000000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53888000000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHASC_SampleType_ID], 
			[ref_sflHASC_SampleType].[name] as [sflHASC_SampleType], 
			v.[sflHASC_CampaignType_ID], 
			[ref_sflHASC_CampaignType].[name] as [sflHASC_CampaignType], 
			v.[sflHASC_CampaignStatus_ID], 
			[ref_sflHASC_CampaignStatus].[name] as [sflHASC_CampaignStatus], 
			v.[sflHASC_CampaignStartDate], 
			v.[sflHASC_CampaignName], 
			v.[sflHASC_CampaignID], 
			v.[sflHASC_CampaignEndDate], 
			v.[sflHASC_CampaignAdministrator], 
			v.[sflHASS_Settlement_ID], 
			[ref_GIS_sflHASS_Settlement].[ExtendedName] as [sflHASS_Settlement], 
			[ref_GIS_sflHASS_Settlement].[name] as [sflHASS_Settlement_ShortGISName], 
			v.[sflHASS_SessionStatus_ID], 
			[ref_sflHASS_SessionStatus].[name] as [sflHASS_SessionStatus], 
			v.[sflHASS_SessionStartDate], 
			v.[sflHASS_SessionID], 
			v.[sflHASSession_EndDate], 
			v.[sflHASS_Region_ID], 
			[ref_GIS_sflHASS_Region].[ExtendedName] as [sflHASS_Region], 
			[ref_GIS_sflHASS_Region].[name] as [sflHASS_Region_ShortGISName], 
			v.[sflHASS_Rayon_ID], 
			[ref_GIS_sflHASS_Rayon].[ExtendedName] as [sflHASS_Rayon], 
			[ref_GIS_sflHASS_Rayon].[name] as [sflHASS_Rayon_ShortGISName], 
			cast((
	select		distinct ASSessionDiagnosis.[name] + '; ' 
	from		tlbMonitoringSessionToDiagnosis SessionToDiagnosesString
	inner join	fnReferenceRepair(@LangID, 19000019)	ASSessionDiagnosis	-- rftDiagnosis
	on			ASSessionDiagnosis.idfsReference = SessionToDiagnosesString.idfsDiagnosis
	where		SessionToDiagnosesString.idfMonitoringSession = v.[sflASSession_DiagnosesString]
				and SessionToDiagnosesString.intRowStatus = 0
	order by	ASSessionDiagnosis.[name] + '; ' 
	for xml path('')		
	) as nvarchar(max)) as [sflASSession_DiagnosesString] , 
			v.[sflHASS_EnteredDate], 
			v.[sflHASS_LocationCountry_ID], 
			[ref_GIS_sflHASS_LocationCountry].[ExtendedName] as [sflHASS_LocationCountry], 
			[ref_GIS_sflHASS_LocationCountry].[name] as [sflHASS_LocationCountry_ShortGISName], 
			v.[sflHASS_CampaignType_ID], 
			[ref_sflHASS_CampaignType].[name] as [sflHASS_CampaignType], 
			v.[sflHASS_CampaignName], 
			v.[sflHASS_CampaignID] 
from		vw1100SearchQuery__53888000000000 v

left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHASC_SampleType] 
on			[ref_sflHASC_SampleType].idfsReference = v.[sflHASC_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASC_CampaignType] 
on			[ref_sflHASC_CampaignType].idfsReference = v.[sflHASC_CampaignType_ID] 
left join	fnReferenceRepair(@LangID, 19000115) [ref_sflHASC_CampaignStatus] 
on			[ref_sflHASC_CampaignStatus].idfsReference = v.[sflHASC_CampaignStatus_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHASS_Settlement]  
on			[ref_GIS_sflHASS_Settlement].idfsReference = v.[sflHASS_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000117) [ref_sflHASS_SessionStatus] 
on			[ref_sflHASS_SessionStatus].idfsReference = v.[sflHASS_SessionStatus_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHASS_Region]  
on			[ref_GIS_sflHASS_Region].idfsReference = v.[sflHASS_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHASS_Rayon]  
on			[ref_GIS_sflHASS_Rayon].idfsReference = v.[sflHASS_Rayon_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflHASS_LocationCountry]  
on			[ref_GIS_sflHASS_LocationCountry].idfsReference = v.[sflHASS_LocationCountry_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASS_CampaignType] 
on			[ref_sflHASS_CampaignType].idfsReference = v.[sflHASS_CampaignType_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53934660000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53934660000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHC_EnteredDate], 
			v.[sflHC_CaseID], 
			v.[sflHC_PatientCRRegion_ID], 
			[ref_GIS_sflHC_PatientCRRegion].[ExtendedName] as [sflHC_PatientCRRegion], 
			[ref_GIS_sflHC_PatientCRRegion].[name] as [sflHC_PatientCRRegion_ShortGISName], 
			v.[sflHC_Diagnosis_ID], 
			[ref_sflHC_Diagnosis].[name] as [sflHC_Diagnosis], 
			v.[sflHC_LocationRegion_ID], 
			[ref_GIS_sflHC_LocationRegion].[ExtendedName] as [sflHC_LocationRegion], 
			[ref_GIS_sflHC_LocationRegion].[name] as [sflHC_LocationRegion_ShortGISName], 
			v.[sflHC_PatientEmpRegion_ID], 
			[ref_GIS_sflHC_PatientEmpRegion].[ExtendedName] as [sflHC_PatientEmpRegion], 
			[ref_GIS_sflHC_PatientEmpRegion].[name] as [sflHC_PatientEmpRegion_ShortGISName] 
from		vw1100SearchQuery__53934660000000 v

left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_PatientCRRegion]  
on			[ref_GIS_sflHC_PatientCRRegion].idfsReference = v.[sflHC_PatientCRRegion_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHC_Diagnosis] 
on			[ref_sflHC_Diagnosis].idfsReference = v.[sflHC_Diagnosis_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_LocationRegion]  
on			[ref_GIS_sflHC_LocationRegion].idfsReference = v.[sflHC_LocationRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHC_PatientEmpRegion]  
on			[ref_GIS_sflHC_PatientEmpRegion].idfsReference = v.[sflHC_PatientEmpRegion_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHC_CaseID] =  N'HUMTBTBZ22GLDY'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53939260000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53939260000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVSLSample_TestedByInstitution_ID], 
			[ref_sflVSLSample_TestedByInstitution].[name] as [sflVSLSample_TestedByInstitution], 
			v.[sflVCSample_TestedByPerson], 
			v.[sflVCSample_TestCategory_ID], 
			[ref_sflVCSample_TestCategory].[name] as [sflVCSample_TestCategory], 
			v.[sflVCSample_Status_ID], 
			[ref_sflVCSample_Status].[name] as [sflVCSample_Status], 
			v.[sflVCSample_Species_ID], 
			[ref_sflVCSample_Species].[name] as [sflVCSample_Species], 
			v.[sflVCSample_SentToOrganization_ID], 
			[ref_sflVCSample_SentToOrganization].[name] as [sflVCSample_SentToOrganization], 
			v.[sflVCSample_SampleType_ID], 
			[ref_sflVCSample_SampleType].[name] as [sflVCSample_SampleType], 
			v.[sflVCSample_SentDate], 
			v.[sflVCSample_CaseReportType_ID], 
			[ref_sflVCSample_CaseReportType].[name] as [sflVCSample_CaseReportType], 
			v.[sflVCSample_PS_Type_ID], 
			[ref_sflVCSample_PS_Type].[name] as [sflVCSample_PS_Type], 
			v.[sflVCSample_PS_Status_ID], 
			[ref_sflVCSample_PS_Status].[name] as [sflVCSample_PS_Status], 
			v.[sflVCSample_PS_SentToOrganization_ID], 
			[ref_sflVCSample_PS_SentToOrganization].[name] as [sflVCSample_PS_SentToOrganization], 
			v.[sflVCSample_ParentLabSampleID], 
			v.[sflVCSample_PS_FieldID], 
			v.[sflVCSample_PS_CurrentLaboratory_ID], 
			[ref_sflVCSample_PS_CurrentLaboratory].[name] as [sflVCSample_PS_CurrentLaboratory], 
			v.[sflVCSample_PS_CollectionDate], 
			v.[sflVCSample_PS_CollectedByInst_ID], 
			[ref_sflVCSample_PS_CollectedByInst].[name] as [sflVCSample_PS_CollectedByInst], 
			v.[sflVCSample_PS_AccessionDate], 
			v.[sflVCSample_LabSampleID], 
			v.[sflVCSample_ICS_Type_ID], 
			[ref_sflVCSample_ICS_Type].[name] as [sflVCSample_ICS_Type], 
			v.[sflVCSample_ICS_Status_ID], 
			[ref_sflVCSample_ICS_Status].[name] as [sflVCSample_ICS_Status], 
			v.[sflVCSample_ICS_SentToOrganization_ID], 
			[ref_sflVCSample_ICS_SentToOrganization].[name] as [sflVCSample_ICS_SentToOrganization], 
			v.[sflVCSample_ICS_LabID], 
			v.[sflVCSample_ICS_FieldID], 
			v.[sflVCSample_ICS_CurrentLaboratory_ID], 
			[ref_sflVCSample_ICS_CurrentLaboratory].[name] as [sflVCSample_ICS_CurrentLaboratory], 
			v.[sflVCSample_ICS_CollectionDate], 
			v.[sflVCSample_ICS_CollectedByInst_ID], 
			[ref_sflVCSample_ICS_CollectedByInst].[name] as [sflVCSample_ICS_CollectedByInst], 
			v.[sflVCSample_ICS_AccessionDate], 
			v.[sflVCSample_FieldSampleID], 
			v.[sflVCSample_FarmOwner], 
			v.[sflVCSample_CaseType_ID], 
			[ref_sflVCSample_CaseType].[name] as [sflVCSample_CaseType], 
			v.[sflVCSample_CaseID], 
			v.[sflVCSample_DiagnosisIsZoonotic_ID], 
			[ref_sflVCSample_DiagnosisIsZoonotic].[name] as [sflVCSample_DiagnosisIsZoonotic], 
			v.[sflVCSample_Diagnosis_ID], 
			[ref_sflVCSample_Diagnosis].[name] as [sflVCSample_Diagnosis], 
			v.[sflVCSample_DestructionMethod_ID], 
			[ref_sflVCSample_DestructionMethod].[name] as [sflVCSample_DestructionMethod], 
			v.[sflVCSample_DaysInTransit], 
			v.[sflVCSample_CurrentLaboratory_ID], 
			[ref_sflVCSample_CurrentLaboratory].[name] as [sflVCSample_CurrentLaboratory], 
			v.[sflVCSample_AccessionCondition_ID], 
			[ref_sflVCSample_AccessionCondition].[name] as [sflVCSample_AccessionCondition], 
			v.[sflVCSample_SampleCondition], 
			v.[sflVCSample_CollectionDate], 
			v.[sflVCSample_CollectedByOffice_ID], 
			[ref_sflVCSample_CollectedByOffice].[name] as [sflVCSample_CollectedByOffice], 
			v.[sflVCSample_AnimalID], 
			v.[sflVCSample_AccessionDate], 
			v.[sflVCTest_TestedByInstitution_ID], 
			[ref_sflVCTest_TestedByInstitution].[name] as [sflVCTest_TestedByInstitution], 
			v.[sflVCTest_TestedByPerson], 
			v.[sflVCTest_TestStatus_ID], 
			[ref_sflVCTest_TestStatus].[name] as [sflVCTest_TestStatus], 
			v.[sflVCTest_BatchID], 
			v.[sflVCTest_TestResult_ID], 
			[ref_sflVCTest_TestResult].[name] as [sflVCTest_TestResult], 
			v.[sflVCTest_TestType_ID], 
			[ref_sflVCTest_TestType].[name] as [sflVCTest_TestType], 
			v.[sflVCTest_TestCategory_ID], 
			[ref_sflVCTest_TestCategory].[name] as [sflVCTest_TestCategory], 
			v.[sflVCTest_Species_ID], 
			[ref_sflVCTest_Species].[name] as [sflVCTest_Species], 
			v.[sflVCTest_SentToOrganization_ID], 
			[ref_sflVCTest_SentToOrganization].[name] as [sflVCTest_SentToOrganization], 
			v.[sflVCTest_SampleType_ID], 
			[ref_sflVCTest_SampleType].[name] as [sflVCTest_SampleType], 
			v.[sflVCTest_Status_ID], 
			[ref_sflVCTest_Status].[name] as [sflVCTest_Status], 
			v.[sflVCTest_ValidatedDate], 
			v.[sflVCTest_CaseReportType_ID], 
			[ref_sflVCTest_CaseReportType].[name] as [sflVCTest_CaseReportType], 
			v.[sflVCTest_LabSampleID], 
			v.[sflVCTest_IsEnteredByLaboratory_ID], 
			[ref_sflVCTest_IsEnteredByLaboratory].[name] as [sflVCTest_IsEnteredByLaboratory], 
			v.[sflVCTest_FieldSampleID], 
			v.[sflVCTest_FarmOwner], 
			v.[sflVCTest_CaseType_ID], 
			[ref_sflVCTest_CaseType].[name] as [sflVCTest_CaseType], 
			v.[sflVCTest_CaseID], 
			v.[sflVCTest_DiagnosisIsZoonotic_ID], 
			[ref_sflVCTest_DiagnosisIsZoonotic].[name] as [sflVCTest_DiagnosisIsZoonotic], 
			v.[sflVCTest_Diagnosis_ID], 
			[ref_sflVCTest_Diagnosis].[name] as [sflVCTest_Diagnosis], 
			v.[sflVCTest_PerformedDate], 
			v.[sflVCTest_AnimalID], 
			v.[sflVCTest_SentDate] 
from		vw1100SearchQuery__53939260000000 v

left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVSLSample_TestedByInstitution] 
on			[ref_sflVSLSample_TestedByInstitution].idfsReference = v.[sflVSLSample_TestedByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000095) [ref_sflVCSample_TestCategory] 
on			[ref_sflVCSample_TestCategory].idfsReference = v.[sflVCSample_TestCategory_ID] 
left join	fnReferenceRepair(@LangID, 19000015) [ref_sflVCSample_Status] 
on			[ref_sflVCSample_Status].idfsReference = v.[sflVCSample_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVCSample_Species] 
on			[ref_sflVCSample_Species].idfsReference = v.[sflVCSample_Species_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_SentToOrganization] 
on			[ref_sflVCSample_SentToOrganization].idfsReference = v.[sflVCSample_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflVCSample_SampleType] 
on			[ref_sflVCSample_SampleType].idfsReference = v.[sflVCSample_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000144) [ref_sflVCSample_CaseReportType] 
on			[ref_sflVCSample_CaseReportType].idfsReference = v.[sflVCSample_CaseReportType_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflVCSample_PS_Type] 
on			[ref_sflVCSample_PS_Type].idfsReference = v.[sflVCSample_PS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000015) [ref_sflVCSample_PS_Status] 
on			[ref_sflVCSample_PS_Status].idfsReference = v.[sflVCSample_PS_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_PS_SentToOrganization] 
on			[ref_sflVCSample_PS_SentToOrganization].idfsReference = v.[sflVCSample_PS_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVCSample_PS_CurrentLaboratory] 
on			[ref_sflVCSample_PS_CurrentLaboratory].idfsReference = v.[sflVCSample_PS_CurrentLaboratory_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_PS_CollectedByInst] 
on			[ref_sflVCSample_PS_CollectedByInst].idfsReference = v.[sflVCSample_PS_CollectedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflVCSample_ICS_Type] 
on			[ref_sflVCSample_ICS_Type].idfsReference = v.[sflVCSample_ICS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000015) [ref_sflVCSample_ICS_Status] 
on			[ref_sflVCSample_ICS_Status].idfsReference = v.[sflVCSample_ICS_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_ICS_SentToOrganization] 
on			[ref_sflVCSample_ICS_SentToOrganization].idfsReference = v.[sflVCSample_ICS_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVCSample_ICS_CurrentLaboratory] 
on			[ref_sflVCSample_ICS_CurrentLaboratory].idfsReference = v.[sflVCSample_ICS_CurrentLaboratory_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_ICS_CollectedByInst] 
on			[ref_sflVCSample_ICS_CollectedByInst].idfsReference = v.[sflVCSample_ICS_CollectedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000012) [ref_sflVCSample_CaseType] 
on			[ref_sflVCSample_CaseType].idfsReference = v.[sflVCSample_CaseType_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVCSample_DiagnosisIsZoonotic] 
on			[ref_sflVCSample_DiagnosisIsZoonotic].idfsReference = v.[sflVCSample_DiagnosisIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVCSample_Diagnosis] 
on			[ref_sflVCSample_Diagnosis].idfsReference = v.[sflVCSample_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000157) [ref_sflVCSample_DestructionMethod] 
on			[ref_sflVCSample_DestructionMethod].idfsReference = v.[sflVCSample_DestructionMethod_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVCSample_CurrentLaboratory] 
on			[ref_sflVCSample_CurrentLaboratory].idfsReference = v.[sflVCSample_CurrentLaboratory_ID] 
left join	fnReferenceRepair(@LangID, 19000110) [ref_sflVCSample_AccessionCondition] 
on			[ref_sflVCSample_AccessionCondition].idfsReference = v.[sflVCSample_AccessionCondition_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_CollectedByOffice] 
on			[ref_sflVCSample_CollectedByOffice].idfsReference = v.[sflVCSample_CollectedByOffice_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCTest_TestedByInstitution] 
on			[ref_sflVCTest_TestedByInstitution].idfsReference = v.[sflVCTest_TestedByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000001) [ref_sflVCTest_TestStatus] 
on			[ref_sflVCTest_TestStatus].idfsReference = v.[sflVCTest_TestStatus_ID] 
left join	fnReferenceRepair(@LangID, 19000096) [ref_sflVCTest_TestResult] 
on			[ref_sflVCTest_TestResult].idfsReference = v.[sflVCTest_TestResult_ID] 
left join	fnReferenceRepair(@LangID, 19000097) [ref_sflVCTest_TestType] 
on			[ref_sflVCTest_TestType].idfsReference = v.[sflVCTest_TestType_ID] 
left join	fnReferenceRepair(@LangID, 19000095) [ref_sflVCTest_TestCategory] 
on			[ref_sflVCTest_TestCategory].idfsReference = v.[sflVCTest_TestCategory_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVCTest_Species] 
on			[ref_sflVCTest_Species].idfsReference = v.[sflVCTest_Species_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCTest_SentToOrganization] 
on			[ref_sflVCTest_SentToOrganization].idfsReference = v.[sflVCTest_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflVCTest_SampleType] 
on			[ref_sflVCTest_SampleType].idfsReference = v.[sflVCTest_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000015) [ref_sflVCTest_Status] 
on			[ref_sflVCTest_Status].idfsReference = v.[sflVCTest_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000144) [ref_sflVCTest_CaseReportType] 
on			[ref_sflVCTest_CaseReportType].idfsReference = v.[sflVCTest_CaseReportType_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVCTest_IsEnteredByLaboratory] 
on			[ref_sflVCTest_IsEnteredByLaboratory].idfsReference = v.[sflVCTest_IsEnteredByLaboratory_ID] 
left join	fnReferenceRepair(@LangID, 19000012) [ref_sflVCTest_CaseType] 
on			[ref_sflVCTest_CaseType].idfsReference = v.[sflVCTest_CaseType_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVCTest_DiagnosisIsZoonotic] 
on			[ref_sflVCTest_DiagnosisIsZoonotic].idfsReference = v.[sflVCTest_DiagnosisIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVCTest_Diagnosis] 
on			[ref_sflVCTest_Diagnosis].idfsReference = v.[sflVCTest_Diagnosis_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__53961940000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__53961940000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHACD_Total], 
			v.[sflHACD_TimeIntervalUnit_ID], 
			[ref_sflHACD_TimeIntervalUnit].[name] as [sflHACD_TimeIntervalUnit], 
			v.[sflHACD_StartDate], 
			v.[sflHACD_EndDate], 
			v.[sflHACD_GroupingDate], 
			v.[sflHACD_Settlement_ID], 
			[ref_GIS_sflHACD_Settlement].[ExtendedName] as [sflHACD_Settlement], 
			[ref_GIS_sflHACD_Settlement].[name] as [sflHACD_Settlement_ShortGISName], 
			v.[sflHACD_Region_ID], 
			[ref_GIS_sflHACD_Region].[ExtendedName] as [sflHACD_Region], 
			[ref_GIS_sflHACD_Region].[name] as [sflHACD_Region_ShortGISName], 
			v.[sflHACD_Rayon_ID], 
			[ref_GIS_sflHACD_Rayon].[ExtendedName] as [sflHACD_Rayon], 
			[ref_GIS_sflHACD_Rayon].[name] as [sflHACD_Rayon_ShortGISName], 
			v.[sflHACD_NotificationSentDate], 
			v.[sflHACD_SentByOfficer], 
			v.[sflHACD_SentByInstitution_ID], 
			[ref_sflHACD_SentByInstitution].[name] as [sflHACD_SentByInstitution], 
			v.[sflHACD_SentByInstitutionID], 
			v.[sflHACD_NotificationReceivDate], 
			v.[sflHACD_ReceivedByOfficer], 
			v.[sflHACD_ReceivedByInst_ID], 
			[ref_sflHACD_ReceivedByInst].[name] as [sflHACD_ReceivedByInst], 
			v.[sflHACD_ReceiveByInstitutionID], 
			v.[sflHACD_EnterByOrganizationID], 
			v.[sflHACD_EnteredByOrganization_ID], 
			[ref_sflHACD_EnteredByOrganization].[name] as [sflHACD_EnteredByOrganization], 
			v.[sflHACD_EnteredByOfficer], 
			v.[sflHACD_Elevationm], 
			v.[sflHACD_CaseID], 
			v.[sflHACD_DiagnosisCode], 
			v.[sflHACD_DiseaseIsZoonotic_ID], 
			[ref_sflHACD_DiseaseIsZoonotic].[name] as [sflHACD_DiseaseIsZoonotic], 
			v.[sflHACD_Diagnosis_ID], 
			[ref_sflHACD_Diagnosis].[name] as [sflHACD_Diagnosis], 
			v.[sflHACD_DateOfEntry], 
			v.[sflHACD_Country_ID], 
			[ref_GIS_sflHACD_Country].[ExtendedName] as [sflHACD_Country], 
			[ref_GIS_sflHACD_Country].[name] as [sflHACD_Country_ShortGISName], 
			v.[sflHACD_AdministrativeLevel_ID], 
			[ref_sflHACD_AdministrativeLevel].[name] as [sflHACD_AdministrativeLevel] 
from		vw1100SearchQuery__53961940000000 v

left join	fnReferenceRepair(@LangID, 19000091) [ref_sflHACD_TimeIntervalUnit] 
on			[ref_sflHACD_TimeIntervalUnit].idfsReference = v.[sflHACD_TimeIntervalUnit_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHACD_Settlement]  
on			[ref_GIS_sflHACD_Settlement].idfsReference = v.[sflHACD_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflHACD_Region]  
on			[ref_GIS_sflHACD_Region].idfsReference = v.[sflHACD_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflHACD_Rayon]  
on			[ref_GIS_sflHACD_Rayon].idfsReference = v.[sflHACD_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHACD_SentByInstitution] 
on			[ref_sflHACD_SentByInstitution].idfsReference = v.[sflHACD_SentByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflHACD_ReceivedByInst] 
on			[ref_sflHACD_ReceivedByInst].idfsReference = v.[sflHACD_ReceivedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflHACD_EnteredByOrganization] 
on			[ref_sflHACD_EnteredByOrganization].idfsReference = v.[sflHACD_EnteredByOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflHACD_DiseaseIsZoonotic] 
on			[ref_sflHACD_DiseaseIsZoonotic].idfsReference = v.[sflHACD_DiseaseIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflHACD_Diagnosis] 
on			[ref_sflHACD_Diagnosis].idfsReference = v.[sflHACD_Diagnosis_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflHACD_Country]  
on			[ref_GIS_sflHACD_Country].idfsReference = v.[sflHACD_Country_ID] 
left join	fnReferenceRepair(@LangID, 19000089) [ref_sflHACD_AdministrativeLevel] 
on			[ref_sflHACD_AdministrativeLevel].idfsReference = v.[sflHACD_AdministrativeLevel_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflHACD_DateOfEntry] >=  N'20210101')and (v.[sflHACD_DateOfEntry] <=  N'20211231'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__54201990000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__54201990000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHASC_SampleType_ID], 
			[ref_sflHASC_SampleType].[name] as [sflHASC_SampleType], 
			v.[sflHASC_CampaignType_ID], 
			[ref_sflHASC_CampaignType].[name] as [sflHASC_CampaignType], 
			v.[sflHASC_CampaignStatus_ID], 
			[ref_sflHASC_CampaignStatus].[name] as [sflHASC_CampaignStatus], 
			v.[sflHASC_CampaignStartDate], 
			v.[sflHASC_CampaignName], 
			v.[sflHASC_CampaignID], 
			v.[sflHASC_CampaignEndDate], 
			v.[sflHASC_CampaignAdministrator] 
from		vw1100SearchQuery__54201990000000 v

left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHASC_SampleType] 
on			[ref_sflHASC_SampleType].idfsReference = v.[sflHASC_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASC_CampaignType] 
on			[ref_sflHASC_CampaignType].idfsReference = v.[sflHASC_CampaignType_ID] 
left join	fnReferenceRepair(@LangID, 19000115) [ref_sflHASC_CampaignStatus] 
on			[ref_sflHASC_CampaignStatus].idfsReference = v.[sflHASC_CampaignStatus_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__54231790000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__54231790000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVss_Settlement_ID], 
			[ref_GIS_sflVss_Settlement].[ExtendedName] as [sflVss_Settlement], 
			[ref_GIS_sflVss_Settlement].[name] as [sflVss_Settlement_ShortGISName], 
			v.[sflVss_Status_ID], 
			[ref_sflVss_Status].[name] as [sflVss_Status], 
			v.[sflVss_StartDate], 
			cast(	(	
			select distinct	IsNull(vss_sel.VectorType_name, N'') + IsNull(N': ' + vss_sel.VectorSubType_name, N'') + N';'
			from (
				select	distinct	r_vt_v_vss_vectors.[name] as VectorType_name, r_vs_v_vss_vectors.[name] as VectorSubType_name, vss_vectors.idfVectorSurveillanceSession
				from		tlbVectorSurveillanceSession vss_vectors 
					inner join	tlbVector v_vss_vectors 
					on			v_vss_vectors.idfVectorSurveillanceSession = vss_vectors.idfVectorSurveillanceSession 
								and v_vss_vectors.intRowStatus = 0 
					inner join	fnReferenceRepair(@LangID, 19000140) r_vt_v_vss_vectors 
					on			r_vt_v_vss_vectors.idfsReference = v_vss_vectors.idfsVectorType 
					inner join	fnReferenceRepair(@LangID, 19000141) r_vs_v_vss_vectors 
					on			r_vs_v_vss_vectors.idfsReference = v_vss_vectors.idfsVectorSubType 
				where		vss_vectors.idfVectorSurveillanceSession = v.sflVss_Vectors 
				union 
				select	distinct	r_vt_v_vss_vectors.[name] as VectorType_name, r_vs_v_vss_vectors.[name] as VectorSubType_name, vss_vectors_sum.idfVectorSurveillanceSession
				from		tlbVectorSurveillanceSessionSummary as vss_vectors_sum
					inner join trtVectorSubType tvst_vss_vectors_sum
					on tvst_vss_vectors_sum.idfsVectorSubType = vss_vectors_sum.idfsVectorSubType
					inner join	fnReferenceRepair(@LangID, 19000140) r_vt_v_vss_vectors 
					on			r_vt_v_vss_vectors.idfsReference = tvst_vss_vectors_sum.idfsVectorType
					inner join	fnReferenceRepair(@LangID, 19000141) r_vs_v_vss_vectors 
					on			r_vs_v_vss_vectors.idfsReference = vss_vectors_sum.idfsVectorSubType
					
				where		vss_vectors_sum.idfVectorSurveillanceSession = v.sflVss_Vectors 
				
			) as vss_sel
			for xml path('') 
		) as nvarchar(MAX)
	) as sflVss_Vectors, 
			v.[sflVss_ID], 
			v.[sflVss_Region_ID], 
			[ref_GIS_sflVss_Region].[ExtendedName] as [sflVss_Region], 
			[ref_GIS_sflVss_Region].[name] as [sflVss_Region_ShortGISName], 
			v.[sflVss_Rayon_ID], 
			[ref_GIS_sflVss_Rayon].[ExtendedName] as [sflVss_Rayon], 
			[ref_GIS_sflVss_Rayon].[name] as [sflVss_Rayon_ShortGISName], 
			v.[sflVssOutbreak_Type_ID], 
			[ref_sflVssOutbreak_Type].[name] as [sflVssOutbreak_Type], 
			v.[sflVss_OutbreakID], 
			v.[sflVss_Longitude], 
			v.[sflVss_Latitude], 
			v.[sflVss_FieldID], 
			v.[sflVss_Elevationm], 
			cast((	select		IsNull(r_d_vss_diagnoses.[name], N'') + N';' 
			from		tlbVectorSurveillanceSession vss_diagnoses 
			inner join	trtDiagnosis d_vss_diagnoses 
				inner join	fnReferenceRepair(@LangID, 19000019) r_d_vss_diagnoses 
				on			r_d_vss_diagnoses.idfsReference = d_vss_diagnoses.idfsDiagnosis 
			on			exists	( 
							select		* 
							from		tlbVector v_pt_vss_diagnoses 
							inner join	tlbMaterial m_pt_vss_diagnoses 
							on			m_pt_vss_diagnoses.idfVector = v_pt_vss_diagnoses.idfVector 
										and m_pt_vss_diagnoses.idfVectorSurveillanceSession = 
											v_pt_vss_diagnoses.idfVectorSurveillanceSession 
										and m_pt_vss_diagnoses.intRowStatus = 0 
							inner join	tlbPensideTest pt_vss_diagnoses 
							on			pt_vss_diagnoses.idfMaterial = m_pt_vss_diagnoses.idfMaterial 
										and pt_vss_diagnoses.intRowStatus = 0 
										and pt_vss_diagnoses.idfsDiagnosis = d_vss_diagnoses.idfsDiagnosis 
							inner join	trtPensideTestTypeToTestResult ptt_to_tr_vss_diagnoses 
							on			ptt_to_tr_vss_diagnoses.idfsPensideTestName = pt_vss_diagnoses.idfsPensideTestName 
										and ptt_to_tr_vss_diagnoses.idfsPensideTestResult = pt_vss_diagnoses.idfsPensideTestResult 
										and IsNull(ptt_to_tr_vss_diagnoses.blnIndicative, 0) = 1 
										and ptt_to_tr_vss_diagnoses.intRowStatus = 0 
							where		v_pt_vss_diagnoses.idfVectorSurveillanceSession = vss_diagnoses.idfVectorSurveillanceSession 
										and v_pt_vss_diagnoses.intRowStatus = 0 
							) 
						or	exists	( 
							select		* 
							from		tlbVector v_t_vss_diagnoses 
							inner join	tlbMaterial m_t_vss_diagnoses 
							on			m_t_vss_diagnoses.idfVector = v_t_vss_diagnoses.idfVector 
										and m_t_vss_diagnoses.idfVectorSurveillanceSession = 
											v_t_vss_diagnoses.idfVectorSurveillanceSession 
										and m_t_vss_diagnoses.intRowStatus = 0 
							inner join	tlbTesting t_vss_diagnoses 
							on			t_vss_diagnoses.idfMaterial = m_t_vss_diagnoses.idfMaterial 
										and t_vss_diagnoses.intRowStatus = 0 
										and t_vss_diagnoses.idfsDiagnosis = d_vss_diagnoses.idfsDiagnosis 
							inner join	trtTestTypeToTestResult tt_to_tr_vss_diagnoses 
							on			tt_to_tr_vss_diagnoses.idfsTestName = t_vss_diagnoses.idfsTestName 
										and tt_to_tr_vss_diagnoses.idfsTestResult = t_vss_diagnoses.idfsTestResult 
										and IsNull(tt_to_tr_vss_diagnoses.blnIndicative, 0) = 1 
										and tt_to_tr_vss_diagnoses.intRowStatus = 0 
							where		v_t_vss_diagnoses.idfVectorSurveillanceSession = vss_diagnoses.idfVectorSurveillanceSession 
										and v_t_vss_diagnoses.intRowStatus = 0 
									) 
						or	exists	( 
							select		* 
							from	tlbVectorSurveillanceSessionSummary vsss
								inner join tlbVectorSurveillanceSessionSummaryDiagnosis vsss_diag
								on vsss_diag.idfsVSSessionSummary = vsss.idfsVSSessionSummary
								and vsss_diag.idfsDiagnosis = d_vss_diagnoses.idfsDiagnosis
								and vsss_diag.intRowStatus = 0
								and isnull(vsss_diag.intPositiveQuantity, 0) > 0
							where		vsss.idfVectorSurveillanceSession = vss_diagnoses.idfVectorSurveillanceSession 
										and vsss.intRowStatus = 0 
									) 			
									
			where		vss_diagnoses.idfVectorSurveillanceSession = v.sflVss_Diagnoses 
			order by	r_d_vss_diagnoses.[name]
			for xml path('') 
		) as nvarchar(MAX)
	) as sflVss_Diagnoses 	
, 
			v.[sflVss_Country_ID], 
			[ref_GIS_sflVss_Country].[ExtendedName] as [sflVss_Country], 
			[ref_GIS_sflVss_Country].[name] as [sflVss_Country_ShortGISName], 
			v.[sflVss_Coordinates], 
			v.[sflVss_Duration], 
			v.[sflVss_CloseDate], 
			v.[sflVPFieldTest_VectorType_ID], 
			[ref_sflVPFieldTest_VectorType].[name] as [sflVPFieldTest_VectorType], 
			v.[sflVPFieldTest_VectorSpecies_ID], 
			[ref_sflVPFieldTest_VectorSpecies].[name] as [sflVPFieldTest_VectorSpecies], 
			v.[sflVPFieldTest_VectorSex_ID], 
			[ref_sflVPFieldTest_VectorSex].[name] as [sflVPFieldTest_VectorSex], 
			v.[sflVPFieldTest_PersonalIDType_ID], 
			[ref_sflVPFieldTest_PersonalIDType].[name] as [sflVPFieldTest_PersonalIDType], 
			v.[sflVPFieldTest_PersonID], 
			v.[sflVPFieldTest_TestedByInstitution_ID], 
			[ref_sflVPFieldTest_TestedByInstitution].[name] as [sflVPFieldTest_TestedByInstitution], 
			v.[sflVPFieldTest_TestedByPerson], 
			v.[sflVPFieldTest_Result_ID], 
			[ref_sflVPFieldTest_Result].[name] as [sflVPFieldTest_Result], 
			v.[sflVPFieldTest_TestName_ID], 
			[ref_sflVPFieldTest_TestName].[name] as [sflVPFieldTest_TestName], 
			v.[sflVPFieldTest_TestDate], 
			v.[sflVPFieldTest_TestCategory_ID], 
			[ref_sflVPFieldTest_TestCategory].[name] as [sflVPFieldTest_TestCategory], 
			v.[sflVPFieldTest_SessionID], 
			v.[sflVPFieldTest_SampleType_ID], 
			[ref_sflVPFieldTest_SampleType].[name] as [sflVPFieldTest_SampleType], 
			v.[sflVPFieldTest_SampleCollectionDate], 
			v.[sflVPFieldTest_PoolVectorID], 
			v.[sflVPFieldTest_FieldSampleID], 
			v.[sflVPFieldTest_DiagnosisIsZoonotic_ID], 
			[ref_sflVPFieldTest_DiagnosisIsZoonotic].[name] as [sflVPFieldTest_DiagnosisIsZoonotic], 
			v.[sflVPFieldTest_Diagnosis_ID], 
			[ref_sflVPFieldTest_Diagnosis].[name] as [sflVPFieldTest_Diagnosis] 
from		vw1100SearchQuery__54231790000000 v

left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVss_Settlement]  
on			[ref_GIS_sflVss_Settlement].idfsReference = v.[sflVss_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000133) [ref_sflVss_Status] 
on			[ref_sflVss_Status].idfsReference = v.[sflVss_Status_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVss_Region]  
on			[ref_GIS_sflVss_Region].idfsReference = v.[sflVss_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVss_Rayon]  
on			[ref_GIS_sflVss_Rayon].idfsReference = v.[sflVss_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflVssOutbreak_Type] 
on			[ref_sflVssOutbreak_Type].idfsReference = v.[sflVssOutbreak_Type_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflVss_Country]  
on			[ref_GIS_sflVss_Country].idfsReference = v.[sflVss_Country_ID] 
left join	fnReferenceRepair(@LangID, 19000140) [ref_sflVPFieldTest_VectorType] 
on			[ref_sflVPFieldTest_VectorType].idfsReference = v.[sflVPFieldTest_VectorType_ID] 
left join	fnReferenceRepair(@LangID, 19000141) [ref_sflVPFieldTest_VectorSpecies] 
on			[ref_sflVPFieldTest_VectorSpecies].idfsReference = v.[sflVPFieldTest_VectorSpecies_ID] 
left join	fnReferenceRepair(@LangID, 19000007) [ref_sflVPFieldTest_VectorSex] 
on			[ref_sflVPFieldTest_VectorSex].idfsReference = v.[sflVPFieldTest_VectorSex_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflVPFieldTest_PersonalIDType] 
on			[ref_sflVPFieldTest_PersonalIDType].idfsReference = v.[sflVPFieldTest_PersonalIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVPFieldTest_TestedByInstitution] 
on			[ref_sflVPFieldTest_TestedByInstitution].idfsReference = v.[sflVPFieldTest_TestedByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000105) [ref_sflVPFieldTest_Result] 
on			[ref_sflVPFieldTest_Result].idfsReference = v.[sflVPFieldTest_Result_ID] 
left join	fnReferenceRepair(@LangID, 19000104) [ref_sflVPFieldTest_TestName] 
on			[ref_sflVPFieldTest_TestName].idfsReference = v.[sflVPFieldTest_TestName_ID] 
left join	fnReferenceRepair(@LangID, 19000134) [ref_sflVPFieldTest_TestCategory] 
on			[ref_sflVPFieldTest_TestCategory].idfsReference = v.[sflVPFieldTest_TestCategory_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflVPFieldTest_SampleType] 
on			[ref_sflVPFieldTest_SampleType].idfsReference = v.[sflVPFieldTest_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVPFieldTest_DiagnosisIsZoonotic] 
on			[ref_sflVPFieldTest_DiagnosisIsZoonotic].idfsReference = v.[sflVPFieldTest_DiagnosisIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVPFieldTest_Diagnosis] 
on			[ref_sflVPFieldTest_Diagnosis].idfsReference = v.[sflVPFieldTest_Diagnosis_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__54237390000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__54237390000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVSLSample_TestedByInstitution_ID], 
			[ref_sflVSLSample_TestedByInstitution].[name] as [sflVSLSample_TestedByInstitution], 
			v.[sflVCSample_TestedByPerson], 
			v.[sflVCSample_TestCategory_ID], 
			[ref_sflVCSample_TestCategory].[name] as [sflVCSample_TestCategory], 
			v.[sflVCSample_Status_ID], 
			[ref_sflVCSample_Status].[name] as [sflVCSample_Status], 
			v.[sflVCSample_Species_ID], 
			[ref_sflVCSample_Species].[name] as [sflVCSample_Species], 
			v.[sflVCSample_SentToOrganization_ID], 
			[ref_sflVCSample_SentToOrganization].[name] as [sflVCSample_SentToOrganization], 
			v.[sflVCSample_SampleType_ID], 
			[ref_sflVCSample_SampleType].[name] as [sflVCSample_SampleType], 
			v.[sflVCSample_SentDate], 
			v.[sflVCSample_CaseReportType_ID], 
			[ref_sflVCSample_CaseReportType].[name] as [sflVCSample_CaseReportType], 
			v.[sflVCSample_PS_Type_ID], 
			[ref_sflVCSample_PS_Type].[name] as [sflVCSample_PS_Type], 
			v.[sflVCSample_PS_Status_ID], 
			[ref_sflVCSample_PS_Status].[name] as [sflVCSample_PS_Status], 
			v.[sflVCSample_PS_SentToOrganization_ID], 
			[ref_sflVCSample_PS_SentToOrganization].[name] as [sflVCSample_PS_SentToOrganization], 
			v.[sflVCSample_ParentLabSampleID], 
			v.[sflVCSample_PS_FieldID], 
			v.[sflVCSample_PS_CurrentLaboratory_ID], 
			[ref_sflVCSample_PS_CurrentLaboratory].[name] as [sflVCSample_PS_CurrentLaboratory], 
			v.[sflVCSample_PS_CollectionDate], 
			v.[sflVCSample_PS_CollectedByInst_ID], 
			[ref_sflVCSample_PS_CollectedByInst].[name] as [sflVCSample_PS_CollectedByInst], 
			v.[sflVCSample_PS_AccessionDate], 
			v.[sflVCSample_LabSampleID], 
			v.[sflVCSample_ICS_Type_ID], 
			[ref_sflVCSample_ICS_Type].[name] as [sflVCSample_ICS_Type], 
			v.[sflVCSample_ICS_Status_ID], 
			[ref_sflVCSample_ICS_Status].[name] as [sflVCSample_ICS_Status], 
			v.[sflVCSample_ICS_SentToOrganization_ID], 
			[ref_sflVCSample_ICS_SentToOrganization].[name] as [sflVCSample_ICS_SentToOrganization], 
			v.[sflVCSample_ICS_LabID], 
			v.[sflVCSample_ICS_FieldID], 
			v.[sflVCSample_ICS_CurrentLaboratory_ID], 
			[ref_sflVCSample_ICS_CurrentLaboratory].[name] as [sflVCSample_ICS_CurrentLaboratory], 
			v.[sflVCSample_ICS_CollectionDate], 
			v.[sflVCSample_ICS_CollectedByInst_ID], 
			[ref_sflVCSample_ICS_CollectedByInst].[name] as [sflVCSample_ICS_CollectedByInst], 
			v.[sflVCSample_ICS_AccessionDate], 
			v.[sflVCSample_FieldSampleID], 
			v.[sflVCSample_FarmOwner], 
			v.[sflVCSample_CaseType_ID], 
			[ref_sflVCSample_CaseType].[name] as [sflVCSample_CaseType], 
			v.[sflVCSample_CaseID], 
			v.[sflVCSample_DiagnosisIsZoonotic_ID], 
			[ref_sflVCSample_DiagnosisIsZoonotic].[name] as [sflVCSample_DiagnosisIsZoonotic], 
			v.[sflVCSample_Diagnosis_ID], 
			[ref_sflVCSample_Diagnosis].[name] as [sflVCSample_Diagnosis], 
			v.[sflVCSample_DestructionMethod_ID], 
			[ref_sflVCSample_DestructionMethod].[name] as [sflVCSample_DestructionMethod], 
			v.[sflVCSample_DaysInTransit], 
			v.[sflVCSample_CurrentLaboratory_ID], 
			[ref_sflVCSample_CurrentLaboratory].[name] as [sflVCSample_CurrentLaboratory], 
			v.[sflVCSample_AccessionCondition_ID], 
			[ref_sflVCSample_AccessionCondition].[name] as [sflVCSample_AccessionCondition], 
			v.[sflVCSample_SampleCondition], 
			v.[sflVCSample_CollectionDate], 
			v.[sflVCSample_CollectedByOffice_ID], 
			[ref_sflVCSample_CollectedByOffice].[name] as [sflVCSample_CollectedByOffice], 
			v.[sflVCSample_AnimalID], 
			v.[sflVCSample_AccessionDate] 
from		vw1100SearchQuery__54237390000000 v

left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVSLSample_TestedByInstitution] 
on			[ref_sflVSLSample_TestedByInstitution].idfsReference = v.[sflVSLSample_TestedByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000095) [ref_sflVCSample_TestCategory] 
on			[ref_sflVCSample_TestCategory].idfsReference = v.[sflVCSample_TestCategory_ID] 
left join	fnReferenceRepair(@LangID, 19000015) [ref_sflVCSample_Status] 
on			[ref_sflVCSample_Status].idfsReference = v.[sflVCSample_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000086) [ref_sflVCSample_Species] 
on			[ref_sflVCSample_Species].idfsReference = v.[sflVCSample_Species_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_SentToOrganization] 
on			[ref_sflVCSample_SentToOrganization].idfsReference = v.[sflVCSample_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflVCSample_SampleType] 
on			[ref_sflVCSample_SampleType].idfsReference = v.[sflVCSample_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000144) [ref_sflVCSample_CaseReportType] 
on			[ref_sflVCSample_CaseReportType].idfsReference = v.[sflVCSample_CaseReportType_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflVCSample_PS_Type] 
on			[ref_sflVCSample_PS_Type].idfsReference = v.[sflVCSample_PS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000015) [ref_sflVCSample_PS_Status] 
on			[ref_sflVCSample_PS_Status].idfsReference = v.[sflVCSample_PS_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_PS_SentToOrganization] 
on			[ref_sflVCSample_PS_SentToOrganization].idfsReference = v.[sflVCSample_PS_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVCSample_PS_CurrentLaboratory] 
on			[ref_sflVCSample_PS_CurrentLaboratory].idfsReference = v.[sflVCSample_PS_CurrentLaboratory_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_PS_CollectedByInst] 
on			[ref_sflVCSample_PS_CollectedByInst].idfsReference = v.[sflVCSample_PS_CollectedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflVCSample_ICS_Type] 
on			[ref_sflVCSample_ICS_Type].idfsReference = v.[sflVCSample_ICS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000015) [ref_sflVCSample_ICS_Status] 
on			[ref_sflVCSample_ICS_Status].idfsReference = v.[sflVCSample_ICS_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_ICS_SentToOrganization] 
on			[ref_sflVCSample_ICS_SentToOrganization].idfsReference = v.[sflVCSample_ICS_SentToOrganization_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVCSample_ICS_CurrentLaboratory] 
on			[ref_sflVCSample_ICS_CurrentLaboratory].idfsReference = v.[sflVCSample_ICS_CurrentLaboratory_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_ICS_CollectedByInst] 
on			[ref_sflVCSample_ICS_CollectedByInst].idfsReference = v.[sflVCSample_ICS_CollectedByInst_ID] 
left join	fnReferenceRepair(@LangID, 19000012) [ref_sflVCSample_CaseType] 
on			[ref_sflVCSample_CaseType].idfsReference = v.[sflVCSample_CaseType_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVCSample_DiagnosisIsZoonotic] 
on			[ref_sflVCSample_DiagnosisIsZoonotic].idfsReference = v.[sflVCSample_DiagnosisIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVCSample_Diagnosis] 
on			[ref_sflVCSample_Diagnosis].idfsReference = v.[sflVCSample_Diagnosis_ID] 
left join	fnReferenceRepair(@LangID, 19000157) [ref_sflVCSample_DestructionMethod] 
on			[ref_sflVCSample_DestructionMethod].idfsReference = v.[sflVCSample_DestructionMethod_ID] 
left join	fnReferenceRepair(@LangID, 19000045) [ref_sflVCSample_CurrentLaboratory] 
on			[ref_sflVCSample_CurrentLaboratory].idfsReference = v.[sflVCSample_CurrentLaboratory_ID] 
left join	fnReferenceRepair(@LangID, 19000110) [ref_sflVCSample_AccessionCondition] 
on			[ref_sflVCSample_AccessionCondition].idfsReference = v.[sflVCSample_AccessionCondition_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVCSample_CollectedByOffice] 
on			[ref_sflVCSample_CollectedByOffice].idfsReference = v.[sflVCSample_CollectedByOffice_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__54245940000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__54245940000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflVss_Settlement_ID], 
			[ref_GIS_sflVss_Settlement].[ExtendedName] as [sflVss_Settlement], 
			[ref_GIS_sflVss_Settlement].[name] as [sflVss_Settlement_ShortGISName], 
			v.[sflVss_Status_ID], 
			[ref_sflVss_Status].[name] as [sflVss_Status], 
			v.[sflVss_StartDate], 
			cast(	(	
			select distinct	IsNull(vss_sel.VectorType_name, N'') + IsNull(N': ' + vss_sel.VectorSubType_name, N'') + N';'
			from (
				select	distinct	r_vt_v_vss_vectors.[name] as VectorType_name, r_vs_v_vss_vectors.[name] as VectorSubType_name, vss_vectors.idfVectorSurveillanceSession
				from		tlbVectorSurveillanceSession vss_vectors 
					inner join	tlbVector v_vss_vectors 
					on			v_vss_vectors.idfVectorSurveillanceSession = vss_vectors.idfVectorSurveillanceSession 
								and v_vss_vectors.intRowStatus = 0 
					inner join	fnReferenceRepair(@LangID, 19000140) r_vt_v_vss_vectors 
					on			r_vt_v_vss_vectors.idfsReference = v_vss_vectors.idfsVectorType 
					inner join	fnReferenceRepair(@LangID, 19000141) r_vs_v_vss_vectors 
					on			r_vs_v_vss_vectors.idfsReference = v_vss_vectors.idfsVectorSubType 
				where		vss_vectors.idfVectorSurveillanceSession = v.sflVss_Vectors 
				union 
				select	distinct	r_vt_v_vss_vectors.[name] as VectorType_name, r_vs_v_vss_vectors.[name] as VectorSubType_name, vss_vectors_sum.idfVectorSurveillanceSession
				from		tlbVectorSurveillanceSessionSummary as vss_vectors_sum
					inner join trtVectorSubType tvst_vss_vectors_sum
					on tvst_vss_vectors_sum.idfsVectorSubType = vss_vectors_sum.idfsVectorSubType
					inner join	fnReferenceRepair(@LangID, 19000140) r_vt_v_vss_vectors 
					on			r_vt_v_vss_vectors.idfsReference = tvst_vss_vectors_sum.idfsVectorType
					inner join	fnReferenceRepair(@LangID, 19000141) r_vs_v_vss_vectors 
					on			r_vs_v_vss_vectors.idfsReference = vss_vectors_sum.idfsVectorSubType
					
				where		vss_vectors_sum.idfVectorSurveillanceSession = v.sflVss_Vectors 
				
			) as vss_sel
			for xml path('') 
		) as nvarchar(MAX)
	) as sflVss_Vectors, 
			v.[sflVss_ID], 
			v.[sflVss_Region_ID], 
			[ref_GIS_sflVss_Region].[ExtendedName] as [sflVss_Region], 
			[ref_GIS_sflVss_Region].[name] as [sflVss_Region_ShortGISName], 
			v.[sflVss_Rayon_ID], 
			[ref_GIS_sflVss_Rayon].[ExtendedName] as [sflVss_Rayon], 
			[ref_GIS_sflVss_Rayon].[name] as [sflVss_Rayon_ShortGISName], 
			v.[sflVssOutbreak_Type_ID], 
			[ref_sflVssOutbreak_Type].[name] as [sflVssOutbreak_Type], 
			v.[sflVss_OutbreakID], 
			v.[sflVss_Longitude], 
			v.[sflVss_Latitude], 
			v.[sflVss_FieldID], 
			v.[sflVss_Elevationm], 
			cast((	select		IsNull(r_d_vss_diagnoses.[name], N'') + N';' 
			from		tlbVectorSurveillanceSession vss_diagnoses 
			inner join	trtDiagnosis d_vss_diagnoses 
				inner join	fnReferenceRepair(@LangID, 19000019) r_d_vss_diagnoses 
				on			r_d_vss_diagnoses.idfsReference = d_vss_diagnoses.idfsDiagnosis 
			on			exists	( 
							select		* 
							from		tlbVector v_pt_vss_diagnoses 
							inner join	tlbMaterial m_pt_vss_diagnoses 
							on			m_pt_vss_diagnoses.idfVector = v_pt_vss_diagnoses.idfVector 
										and m_pt_vss_diagnoses.idfVectorSurveillanceSession = 
											v_pt_vss_diagnoses.idfVectorSurveillanceSession 
										and m_pt_vss_diagnoses.intRowStatus = 0 
							inner join	tlbPensideTest pt_vss_diagnoses 
							on			pt_vss_diagnoses.idfMaterial = m_pt_vss_diagnoses.idfMaterial 
										and pt_vss_diagnoses.intRowStatus = 0 
										and pt_vss_diagnoses.idfsDiagnosis = d_vss_diagnoses.idfsDiagnosis 
							inner join	trtPensideTestTypeToTestResult ptt_to_tr_vss_diagnoses 
							on			ptt_to_tr_vss_diagnoses.idfsPensideTestName = pt_vss_diagnoses.idfsPensideTestName 
										and ptt_to_tr_vss_diagnoses.idfsPensideTestResult = pt_vss_diagnoses.idfsPensideTestResult 
										and IsNull(ptt_to_tr_vss_diagnoses.blnIndicative, 0) = 1 
										and ptt_to_tr_vss_diagnoses.intRowStatus = 0 
							where		v_pt_vss_diagnoses.idfVectorSurveillanceSession = vss_diagnoses.idfVectorSurveillanceSession 
										and v_pt_vss_diagnoses.intRowStatus = 0 
							) 
						or	exists	( 
							select		* 
							from		tlbVector v_t_vss_diagnoses 
							inner join	tlbMaterial m_t_vss_diagnoses 
							on			m_t_vss_diagnoses.idfVector = v_t_vss_diagnoses.idfVector 
										and m_t_vss_diagnoses.idfVectorSurveillanceSession = 
											v_t_vss_diagnoses.idfVectorSurveillanceSession 
										and m_t_vss_diagnoses.intRowStatus = 0 
							inner join	tlbTesting t_vss_diagnoses 
							on			t_vss_diagnoses.idfMaterial = m_t_vss_diagnoses.idfMaterial 
										and t_vss_diagnoses.intRowStatus = 0 
										and t_vss_diagnoses.idfsDiagnosis = d_vss_diagnoses.idfsDiagnosis 
							inner join	trtTestTypeToTestResult tt_to_tr_vss_diagnoses 
							on			tt_to_tr_vss_diagnoses.idfsTestName = t_vss_diagnoses.idfsTestName 
										and tt_to_tr_vss_diagnoses.idfsTestResult = t_vss_diagnoses.idfsTestResult 
										and IsNull(tt_to_tr_vss_diagnoses.blnIndicative, 0) = 1 
										and tt_to_tr_vss_diagnoses.intRowStatus = 0 
							where		v_t_vss_diagnoses.idfVectorSurveillanceSession = vss_diagnoses.idfVectorSurveillanceSession 
										and v_t_vss_diagnoses.intRowStatus = 0 
									) 
						or	exists	( 
							select		* 
							from	tlbVectorSurveillanceSessionSummary vsss
								inner join tlbVectorSurveillanceSessionSummaryDiagnosis vsss_diag
								on vsss_diag.idfsVSSessionSummary = vsss.idfsVSSessionSummary
								and vsss_diag.idfsDiagnosis = d_vss_diagnoses.idfsDiagnosis
								and vsss_diag.intRowStatus = 0
								and isnull(vsss_diag.intPositiveQuantity, 0) > 0
							where		vsss.idfVectorSurveillanceSession = vss_diagnoses.idfVectorSurveillanceSession 
										and vsss.intRowStatus = 0 
									) 			
									
			where		vss_diagnoses.idfVectorSurveillanceSession = v.sflVss_Diagnoses 
			order by	r_d_vss_diagnoses.[name]
			for xml path('') 
		) as nvarchar(MAX)
	) as sflVss_Diagnoses 	
, 
			v.[sflVss_Country_ID], 
			[ref_GIS_sflVss_Country].[ExtendedName] as [sflVss_Country], 
			[ref_GIS_sflVss_Country].[name] as [sflVss_Country_ShortGISName], 
			v.[sflVss_Coordinates], 
			v.[sflVss_Duration], 
			v.[sflVss_CloseDate], 
			v.[sflVPFieldTest_VectorType_ID], 
			[ref_sflVPFieldTest_VectorType].[name] as [sflVPFieldTest_VectorType], 
			v.[sflVPFieldTest_VectorSpecies_ID], 
			[ref_sflVPFieldTest_VectorSpecies].[name] as [sflVPFieldTest_VectorSpecies], 
			v.[sflVPFieldTest_VectorSex_ID], 
			[ref_sflVPFieldTest_VectorSex].[name] as [sflVPFieldTest_VectorSex], 
			v.[sflVPFieldTest_PersonalIDType_ID], 
			[ref_sflVPFieldTest_PersonalIDType].[name] as [sflVPFieldTest_PersonalIDType], 
			v.[sflVPFieldTest_PersonID], 
			v.[sflVPFieldTest_TestedByInstitution_ID], 
			[ref_sflVPFieldTest_TestedByInstitution].[name] as [sflVPFieldTest_TestedByInstitution], 
			v.[sflVPFieldTest_TestedByPerson], 
			v.[sflVPFieldTest_Result_ID], 
			[ref_sflVPFieldTest_Result].[name] as [sflVPFieldTest_Result], 
			v.[sflVPFieldTest_TestName_ID], 
			[ref_sflVPFieldTest_TestName].[name] as [sflVPFieldTest_TestName], 
			v.[sflVPFieldTest_TestDate], 
			v.[sflVPFieldTest_TestCategory_ID], 
			[ref_sflVPFieldTest_TestCategory].[name] as [sflVPFieldTest_TestCategory], 
			v.[sflVPFieldTest_SessionID], 
			v.[sflVPFieldTest_SampleType_ID], 
			[ref_sflVPFieldTest_SampleType].[name] as [sflVPFieldTest_SampleType], 
			v.[sflVPFieldTest_SampleCollectionDate], 
			v.[sflVPFieldTest_PoolVectorID], 
			v.[sflVPFieldTest_FieldSampleID], 
			v.[sflVPFieldTest_DiagnosisIsZoonotic_ID], 
			[ref_sflVPFieldTest_DiagnosisIsZoonotic].[name] as [sflVPFieldTest_DiagnosisIsZoonotic], 
			v.[sflVPFieldTest_Diagnosis_ID], 
			[ref_sflVPFieldTest_Diagnosis].[name] as [sflVPFieldTest_Diagnosis] 
from		vw1100SearchQuery__54245940000000 v

left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflVss_Settlement]  
on			[ref_GIS_sflVss_Settlement].idfsReference = v.[sflVss_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000133) [ref_sflVss_Status] 
on			[ref_sflVss_Status].idfsReference = v.[sflVss_Status_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflVss_Region]  
on			[ref_GIS_sflVss_Region].idfsReference = v.[sflVss_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflVss_Rayon]  
on			[ref_GIS_sflVss_Rayon].idfsReference = v.[sflVss_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflVssOutbreak_Type] 
on			[ref_sflVssOutbreak_Type].idfsReference = v.[sflVssOutbreak_Type_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflVss_Country]  
on			[ref_GIS_sflVss_Country].idfsReference = v.[sflVss_Country_ID] 
left join	fnReferenceRepair(@LangID, 19000140) [ref_sflVPFieldTest_VectorType] 
on			[ref_sflVPFieldTest_VectorType].idfsReference = v.[sflVPFieldTest_VectorType_ID] 
left join	fnReferenceRepair(@LangID, 19000141) [ref_sflVPFieldTest_VectorSpecies] 
on			[ref_sflVPFieldTest_VectorSpecies].idfsReference = v.[sflVPFieldTest_VectorSpecies_ID] 
left join	fnReferenceRepair(@LangID, 19000007) [ref_sflVPFieldTest_VectorSex] 
on			[ref_sflVPFieldTest_VectorSex].idfsReference = v.[sflVPFieldTest_VectorSex_ID] 
left join	fnReferenceRepair(@LangID, 19000148) [ref_sflVPFieldTest_PersonalIDType] 
on			[ref_sflVPFieldTest_PersonalIDType].idfsReference = v.[sflVPFieldTest_PersonalIDType_ID] 
left join	fnReferenceRepair(@LangID, 19000046) [ref_sflVPFieldTest_TestedByInstitution] 
on			[ref_sflVPFieldTest_TestedByInstitution].idfsReference = v.[sflVPFieldTest_TestedByInstitution_ID] 
left join	fnReferenceRepair(@LangID, 19000105) [ref_sflVPFieldTest_Result] 
on			[ref_sflVPFieldTest_Result].idfsReference = v.[sflVPFieldTest_Result_ID] 
left join	fnReferenceRepair(@LangID, 19000104) [ref_sflVPFieldTest_TestName] 
on			[ref_sflVPFieldTest_TestName].idfsReference = v.[sflVPFieldTest_TestName_ID] 
left join	fnReferenceRepair(@LangID, 19000134) [ref_sflVPFieldTest_TestCategory] 
on			[ref_sflVPFieldTest_TestCategory].idfsReference = v.[sflVPFieldTest_TestCategory_ID] 
left join	fnReferenceRepair(@LangID, 19000087) [ref_sflVPFieldTest_SampleType] 
on			[ref_sflVPFieldTest_SampleType].idfsReference = v.[sflVPFieldTest_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000100) [ref_sflVPFieldTest_DiagnosisIsZoonotic] 
on			[ref_sflVPFieldTest_DiagnosisIsZoonotic].idfsReference = v.[sflVPFieldTest_DiagnosisIsZoonotic_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflVPFieldTest_Diagnosis] 
on			[ref_sflVPFieldTest_Diagnosis].idfsReference = v.[sflVPFieldTest_Diagnosis_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore

 
where		(

 
			((v.[sflVss_StartDate] >=  N'20220101'))
			)
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__54248810000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__54248810000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflOS_SpeciesAffected_ID], 
			[ref_sflOS_SpeciesAffected].[name] as [sflOS_SpeciesAffected], 
			v.[sflOS_Settlement_ID], 
			[ref_GIS_sflOS_Settlement].[ExtendedName] as [sflOS_Settlement], 
			[ref_GIS_sflOS_Settlement].[name] as [sflOS_Settlement_ShortGISName], 
			v.[sflOS_Region_ID], 
			[ref_GIS_sflOS_Region].[ExtendedName] as [sflOS_Region], 
			[ref_GIS_sflOS_Region].[name] as [sflOS_Region_ShortGISName], 
			v.[sflOS_Rayon_ID], 
			[ref_GIS_sflOS_Rayon].[ExtendedName] as [sflOS_Rayon], 
			[ref_GIS_sflOS_Rayon].[name] as [sflOS_Rayon_ShortGISName], 
			v.[sflOS_Type_ID], 
			[ref_sflOS_Type].[name] as [sflOS_Type], 
			v.[sflOS_Status_ID], 
			[ref_sflOS_Status].[name] as [sflOS_Status], 
			v.[sflOS_StartDate], 
			v.[sflOutbreak_ID], 
			v.[sflOS_EndDate], 
			v.[sflOS_Diagnosis_ID], 
			[ref_sflOS_Diagnosis].[name] as [sflOS_Diagnosis], 
			v.[sflOBS_StartDateOfSymptomsOnset], 
			v.[sflOBS_Settlement_ID], 
			[ref_GIS_sflOBS_Settlement].[ExtendedName] as [sflOBS_Settlement], 
			[ref_GIS_sflOBS_Settlement].[name] as [sflOBS_Settlement_ShortGISName], 
			v.[sflOBS_Region_ID], 
			[ref_GIS_sflOBS_Region].[ExtendedName] as [sflOBS_Region], 
			[ref_GIS_sflOBS_Region].[name] as [sflOBS_Region_ShortGISName], 
			v.[sflOBS_Rayon_ID], 
			[ref_GIS_sflOBS_Rayon].[ExtendedName] as [sflOBS_Rayon], 
			[ref_GIS_sflOBS_Rayon].[name] as [sflOBS_Rayon_ShortGISName], 
			v.[sflOutbreakC_ID], 
			v.[sflOBS_DateOfSymptomsOnset], 
			v.[sflOSC_EnteredDate], 
			v.[sflOSC_Type_ID], 
			[ref_sflOSC_Type].[name] as [sflOSC_Type], 
			v.[sflOSC_Status_ID], 
			[ref_sflOSC_Status].[name] as [sflOSC_Status], 
			v.[sflOBS_CaseMonitoringQuestions], 
			v.[sflOBS_CaseClassification_ID], 
			[ref_sflOBS_CaseClassification].[name] as [sflOBS_CaseClassification], 
			v.[sflHASS_Settlement_ID], 
			[ref_GIS_sflHASS_Settlement].[ExtendedName] as [sflHASS_Settlement], 
			[ref_GIS_sflHASS_Settlement].[name] as [sflHASS_Settlement_ShortGISName], 
			v.[sflOutbreak_LocationRegion_ID], 
			[ref_GIS_sflOutbreak_LocationRegion].[ExtendedName] as [sflOutbreak_LocationRegion], 
			[ref_GIS_sflOutbreak_LocationRegion].[name] as [sflOutbreak_LocationRegion_ShortGISName], 
			v.[sflOutbreak_LocationRayon_ID], 
			[ref_GIS_sflOutbreak_LocationRayon].[ExtendedName] as [sflOutbreak_LocationRayon], 
			[ref_GIS_sflOutbreak_LocationRayon].[name] as [sflOutbreak_LocationRayon_ShortGISName], 
			v.[sflHASST_PersonID], 
			v.[sflHC_PatientSex_ID], 
			[ref_sflHC_PatientSex].[name] as [sflHC_PatientSex], 
			v.[sflVC_FarmID], 
			v.[sflHCContact_LastContactDate], 
			v.[sflOBSC_ContactMonitoringQuestions], 
			v.[sflOSV_Settlement_ID], 
			[ref_GIS_sflOSV_Settlement].[ExtendedName] as [sflOSV_Settlement], 
			[ref_GIS_sflOSV_Settlement].[name] as [sflOSV_Settlement_ShortGISName], 
			v.[sflHASS_SessionStatus_ID], 
			[ref_sflHASS_SessionStatus].[name] as [sflHASS_SessionStatus], 
			v.[sflHASS_SessionStartDate], 
			v.[sflPV_SessionID], 
			v.[sflVss_CloseDate], 
			v.[sflOutbreak_LocationRegionV_ID], 
			[ref_GIS_sflOutbreak_LocationRegionV].[ExtendedName] as [sflOutbreak_LocationRegionV], 
			[ref_GIS_sflOutbreak_LocationRegionV].[name] as [sflOutbreak_LocationRegionV_ShortGISName], 
			v.[sflOutbreak_LocationRayonV_ID], 
			[ref_GIS_sflOutbreak_LocationRayonV].[ExtendedName] as [sflOutbreak_LocationRayonV], 
			[ref_GIS_sflOutbreak_LocationRayonV].[name] as [sflOutbreak_LocationRayonV_ShortGISName], 
			v.[sflPV_Country_ID], 
			[ref_GIS_sflPV_Country].[ExtendedName] as [sflPV_Country], 
			[ref_GIS_sflPV_Country].[name] as [sflPV_Country_ShortGISName] 
from		vw1100SearchQuery__54248810000000 v

left join	fnReferenceRepair(@LangID, 19000086) [ref_sflOS_SpeciesAffected] 
on			[ref_sflOS_SpeciesAffected].idfsReference = v.[sflOS_SpeciesAffected_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOS_Settlement]  
on			[ref_GIS_sflOS_Settlement].idfsReference = v.[sflOS_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOS_Region]  
on			[ref_GIS_sflOS_Region].idfsReference = v.[sflOS_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOS_Rayon]  
on			[ref_GIS_sflOS_Rayon].idfsReference = v.[sflOS_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOS_Type] 
on			[ref_sflOS_Type].idfsReference = v.[sflOS_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOS_Status] 
on			[ref_sflOS_Status].idfsReference = v.[sflOS_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000019) [ref_sflOS_Diagnosis] 
on			[ref_sflOS_Diagnosis].idfsReference = v.[sflOS_Diagnosis_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOBS_Settlement]  
on			[ref_GIS_sflOBS_Settlement].idfsReference = v.[sflOBS_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOBS_Region]  
on			[ref_GIS_sflOBS_Region].idfsReference = v.[sflOBS_Region_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOBS_Rayon]  
on			[ref_GIS_sflOBS_Rayon].idfsReference = v.[sflOBS_Rayon_ID] 
left join	fnReferenceRepair(@LangID, 19000513) [ref_sflOSC_Type] 
on			[ref_sflOSC_Type].idfsReference = v.[sflOSC_Type_ID] 
left join	fnReferenceRepair(@LangID, 19000063) [ref_sflOSC_Status] 
on			[ref_sflOSC_Status].idfsReference = v.[sflOSC_Status_ID] 
left join	fnReferenceRepair(@LangID, 19000011) [ref_sflOBS_CaseClassification] 
on			[ref_sflOBS_CaseClassification].idfsReference = v.[sflOBS_CaseClassification_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflHASS_Settlement]  
on			[ref_GIS_sflHASS_Settlement].idfsReference = v.[sflHASS_Settlement_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOutbreak_LocationRegion]  
on			[ref_GIS_sflOutbreak_LocationRegion].idfsReference = v.[sflOutbreak_LocationRegion_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOutbreak_LocationRayon]  
on			[ref_GIS_sflOutbreak_LocationRayon].idfsReference = v.[sflOutbreak_LocationRayon_ID] 
left join	fnReferenceRepair(@LangID, 19000043) [ref_sflHC_PatientSex] 
on			[ref_sflHC_PatientSex].idfsReference = v.[sflHC_PatientSex_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000004) [ref_GIS_sflOSV_Settlement]  
on			[ref_GIS_sflOSV_Settlement].idfsReference = v.[sflOSV_Settlement_ID] 
left join	fnReferenceRepair(@LangID, 19000117) [ref_sflHASS_SessionStatus] 
on			[ref_sflHASS_SessionStatus].idfsReference = v.[sflHASS_SessionStatus_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000003) [ref_GIS_sflOutbreak_LocationRegionV]  
on			[ref_GIS_sflOutbreak_LocationRegionV].idfsReference = v.[sflOutbreak_LocationRegionV_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000002) [ref_GIS_sflOutbreak_LocationRayonV]  
on			[ref_GIS_sflOutbreak_LocationRayonV].idfsReference = v.[sflOutbreak_LocationRayonV_ID] 
left join	fnGisExtendedReferenceRepair(@LangID, 19000001) [ref_GIS_sflPV_Country]  
on			[ref_GIS_sflPV_Country].idfsReference = v.[sflPV_Country_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__54477830000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__54477830000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHASC_SampleType_ID], 
			[ref_sflHASC_SampleType].[name] as [sflHASC_SampleType], 
			v.[sflHASC_CampaignType_ID], 
			[ref_sflHASC_CampaignType].[name] as [sflHASC_CampaignType], 
			v.[sflHASC_CampaignStatus_ID], 
			[ref_sflHASC_CampaignStatus].[name] as [sflHASC_CampaignStatus], 
			v.[sflHASC_CampaignStartDate], 
			v.[sflHASC_CampaignName], 
			v.[sflHASC_CampaignID], 
			v.[sflHASC_CampaignEndDate], 
			v.[sflHASC_CampaignAdministrator] 
from		vw1100SearchQuery__54477830000000 v

left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHASC_SampleType] 
on			[ref_sflHASC_SampleType].idfsReference = v.[sflHASC_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASC_CampaignType] 
on			[ref_sflHASC_CampaignType].idfsReference = v.[sflHASC_CampaignType_ID] 
left join	fnReferenceRepair(@LangID, 19000115) [ref_sflHASC_CampaignStatus] 
on			[ref_sflHASC_CampaignStatus].idfsReference = v.[sflHASC_CampaignStatus_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[fn1100SearchQuery__54699090000000]...';


GO


CREATE FUNCTION [dbo].[fn1100SearchQuery__54699090000000]
(
@LangID	as nvarchar(50),
@UserID as bigint
)
returns table
as
return
select		
v.[sflHASC_SampleType_ID], 
			[ref_sflHASC_SampleType].[name] as [sflHASC_SampleType], 
			v.[sflHASC_CampaignType_ID], 
			[ref_sflHASC_CampaignType].[name] as [sflHASC_CampaignType], 
			v.[sflHASC_CampaignStatus_ID], 
			[ref_sflHASC_CampaignStatus].[name] as [sflHASC_CampaignStatus], 
			v.[sflHASC_CampaignStartDate], 
			v.[sflHASC_CampaignName], 
			v.[sflHASC_CampaignID], 
			v.[sflHASC_CampaignEndDate], 
			v.[sflHASC_CampaignAdministrator] 
from		vw1100SearchQuery__54699090000000 v

left join	fnReferenceRepair(@LangID, 19000087) [ref_sflHASC_SampleType] 
on			[ref_sflHASC_SampleType].idfsReference = v.[sflHASC_SampleType_ID] 
left join	fnReferenceRepair(@LangID, 19000116) [ref_sflHASC_CampaignType] 
on			[ref_sflHASC_CampaignType].idfsReference = v.[sflHASC_CampaignType_ID] 
left join	fnReferenceRepair(@LangID, 19000115) [ref_sflHASC_CampaignStatus] 
on			[ref_sflHASC_CampaignStatus].idfsReference = v.[sflHASC_CampaignStatus_ID] 



--Not needed--left join	fnReference(@LangID, 19000044) ref_None	-- Information String
--Not needed--on			ref_None.idfsReference = 0		-- Workaround. We dont need (none) anymore
GO
PRINT N'Creating Function [dbo].[FN_GBL_AVR_LocationHierarchy_Flattened]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 12/1/2021
-- Description:	Returns the complete location hierarchy for the given location on a single row.
-- =============================================
CREATE FUNCTION [dbo].[FN_GBL_AVR_LocationHierarchy_Flattened] 
(
	--@languageId nvarchar(20)
)
RETURNS @ResultsTable TABLE 
(
	 idfsLocation BIGINT
	,AdminLevel1ID BIGINT
	,AdminLevel2ID BIGINT
	,AdminLevel3ID BIGINT
	,AdminLevel4ID BIGINT
	,AdminLevel5ID BIGINT
	,AdminLevel6ID BIGINT
	,AdminLevel7ID BIGINT
	,AdminLevel1Name NVARCHAR(200)
	,AdminLevel2Name NVARCHAR(200)
	,AdminLevel3Name NVARCHAR(200)
	,AdminLevel4Name NVARCHAR(200)
	,AdminLevel5Name NVARCHAR(200)
	,AdminLevel6Name NVARCHAR(200)
	,AdminLevel7Name NVARCHAR(200)
	,Node HIERARCHYID
	,Level INT
	,LevelType NVARCHAR(100)
	,idfsLanguage BIGINT

)
AS
BEGIN
	--DECLARE @lid BIGINT 

	--SELECT @lid = dbo.FN_GBL_LanguageCode_GET(@languageId)

	INSERT INTO @ResultsTable
	SELECT 
		 ld.idfsLocation
		,ld.Level1ID
		,ld.Level2ID
		,ld.Level3ID
		,ld.Level4ID
		,ld.Level5ID
		,ld.Level6ID
		,ld.Level7ID
		,ld.Level1Name
		,ld.Level2Name
		,ld.Level3Name
		,ld.Level4Name
		,ld.Level5Name
		,ld.Level6Name
		,ld.Level7Name
		,ld.Node
		,ld.Level
		,ld.LevelType
		,ld.idfsLanguage
	FROM gisLocationDenormalized ld
	--WHERE ld.idfsLanguage =@lid
	
	RETURN 
END;
GO
PRINT N'Creating Function [dbo].[fnGetAttributesFromFormattedString]...';


GO

--##SUMMARY This function retrieves pairs of attribute names and values from formatted string of attributes;
--##SUMMARY Expected format is as follows: N'intAttrInd:1,strAttr:AttrName1,strVal:AttrVal1;intAttrInd:2,strAttr:AttrName2,strVal:AttrVal2;...'
--##SUMMARY If necessary, it's possible to filter results by only one attribute.

--##REMARKS 
--##REMARKS Create date: 20.12.2020

--##RETURNS Returns table of pairs of attribute names and values optionally filtered by selected attribute


/*
Example of a call of function:

select	*
from	dbo.fnGetAttributesFromFormattedString(N'intAttrInd:1,strAttr:TablePrefix,strVal:hc{0};intAttrInd:2,strAttr:FilterTable,strVal:tflHumanCaseFiltered', null)

*/
CREATE   FUNCTION [dbo].[fnGetAttributesFromFormattedString]
(	@AttrString	nvarchar(max),			--##PARAM @AttrString Formatted string of attributes; expected format of the string: N'intAttrInd:1,strAttr:AttrName1,strVal:AttrVal1;intAttrInd:2,strAttr:AttrName2,strVal:AttrVal2;...'
	@AttrName	nvarchar(100) = null	--##PARAM @AttrName Optional parameter to retrieve only one attribute
)
returns @ResTable table
(
    strAttr varchar(100) collate Cyrillic_General_CI_AS not null primary key,
    strVal nvarchar(max) collate Cyrillic_General_CI_AS null
)
as
begin

	;
	with cte
	(	intId,
		attrLineNum,
		attrPartNum,
		strVal
	)
	as
	(	select		(attrLine.[num]-1) * 100 + (attrPart.[num]-1) * 2 + attrNameValPair.[num] as intId, 
					attrLine.[num] as attrLineNum, 
					attrPart.[num] as attrPartNum, 
					cast(attrNameValPair.[Value] as nvarchar(max)) as strVal
		from		dbo.fnsysSplitList(@AttrString, 0, N';') attrLine
		outer apply	dbo.fnsysSplitList(cast(attrLine.[Value] as nvarchar(max)), 0, N',') attrPart
		outer apply	dbo.fnsysSplitList(cast(attrPart.[Value] as nvarchar(max)), 0, N':') attrNameValPair
	)

	insert into	@ResTable (strAttr, strVal)
	select		cast(left(attrName.strVal, 100) as varchar(100)) as strAttr, attrVal.strVal as strVal
	from		cte as attrName
	inner join	cte as attrNamePrevPart
	on			attrNamePrevPart.attrLineNum = attrName.attrLineNum
				and attrNamePrevPart.attrPartNum = attrName.attrPartNum
				and attrNamePrevPart.intId = attrName.intId - 1
				and attrNamePrevPart.strVal = N'strAttr' collate Cyrillic_General_CI_AS

	left join	cte as attrVal
		inner join	cte as attrValPrevPart
		on			attrValPrevPart.attrLineNum = attrVal.attrLineNum
					and attrValPrevPart.attrPartNum = attrVal.attrPartNum
					and attrValPrevPart.intId = attrVal.intId - 1
					and attrValPrevPart.strVal = N'strVal' collate Cyrillic_General_CI_AS
	on			attrVal.attrLineNum = attrName.attrLineNum
	where	attrName.strVal is not null
			and (@AttrName is null or (@AttrName is not null and attrName.strVal = @AttrName collate Cyrillic_General_CI_AS))

	return
end
GO
PRINT N'Altering Procedure [dbo].[sp_MSins_dbotrtReferenceType]...';


GO
ALTER procedure [sp_MSins_dbotrtReferenceType]
    @c1 bigint,
    @c2 nvarchar(36),
    @c3 nvarchar(200),
    @c4 int,
    @c5 bigint,
    @c6 bigint,
    @c7 uniqueidentifier,
    @c8 int,
    @c9 bigint,
    @c10 bigint,
    @c11 nvarchar(100),
    @c12 nvarchar(20),
    @c13 nvarchar(max),
    @c14 bigint,
    @c15 nvarchar(max),
    @c16 nvarchar(200),
    @c17 datetime,
    @c18 nvarchar(200),
    @c19 datetime,
    @c20 nvarchar(100)
as
begin  
	insert into [dbo].[trtReferenceType] (
		[idfsReferenceType],
		[strReferenceTypeCode],
		[strReferenceTypeName],
		[intStandard],
		[idfMinID],
		[idfMaxID],
		[rowguid],
		[intRowStatus],
		[intHACodeMask],
		[intDefaultHACode],
		[strEditorName],
		[strMaintenanceFlag],
		[strReservedAttribute],
		[SourceSystemNameID],
		[SourceSystemKeyValue],
		[AuditCreateUser],
		[AuditCreateDTM],
		[AuditUpdateUser],
		[AuditUpdateDTM],
		[strChildTableColumnName]
	) values (
		@c1,
		@c2,
		@c3,
		@c4,
		@c5,
		@c6,
		@c7,
		@c8,
		@c9,
		@c10,
		@c11,
		@c12,
		@c13,
		@c14,
		@c15,
		@c16,
		@c17,
		@c18,
		@c19,
		@c20	) 
end
GO
PRINT N'Altering Procedure [dbo].[sp_MSupd_dbotrtReferenceType]...';


GO
ALTER procedure [sp_MSupd_dbotrtReferenceType]
		@c1 bigint = NULL,
		@c2 nvarchar(36) = NULL,
		@c3 nvarchar(200) = NULL,
		@c4 int = NULL,
		@c5 bigint = NULL,
		@c6 bigint = NULL,
		@c7 uniqueidentifier = NULL,
		@c8 int = NULL,
		@c9 bigint = NULL,
		@c10 bigint = NULL,
		@c11 nvarchar(100) = NULL,
		@c12 nvarchar(20) = NULL,
		@c13 nvarchar(max) = NULL,
		@c14 bigint = NULL,
		@c15 nvarchar(max) = NULL,
		@c16 nvarchar(200) = NULL,
		@c17 datetime = NULL,
		@c18 nvarchar(200) = NULL,
		@c19 datetime = NULL,
		@c20 nvarchar(100) = NULL,
		@pkc1 bigint = NULL,
		@bitmap binary(3)
as
begin  
	declare @primarykey_text nvarchar(100) = ''
if (substring(@bitmap,1,1) & 1 = 1)
begin 

update [dbo].[trtReferenceType] set
		[idfsReferenceType] = case substring(@bitmap,1,1) & 1 when 1 then @c1 else [idfsReferenceType] end,
		[strReferenceTypeCode] = case substring(@bitmap,1,1) & 2 when 2 then @c2 else [strReferenceTypeCode] end,
		[strReferenceTypeName] = case substring(@bitmap,1,1) & 4 when 4 then @c3 else [strReferenceTypeName] end,
		[intStandard] = case substring(@bitmap,1,1) & 8 when 8 then @c4 else [intStandard] end,
		[idfMinID] = case substring(@bitmap,1,1) & 16 when 16 then @c5 else [idfMinID] end,
		[idfMaxID] = case substring(@bitmap,1,1) & 32 when 32 then @c6 else [idfMaxID] end,
		[rowguid] = case substring(@bitmap,1,1) & 64 when 64 then @c7 else [rowguid] end,
		[intRowStatus] = case substring(@bitmap,1,1) & 128 when 128 then @c8 else [intRowStatus] end,
		[intHACodeMask] = case substring(@bitmap,2,1) & 1 when 1 then @c9 else [intHACodeMask] end,
		[intDefaultHACode] = case substring(@bitmap,2,1) & 2 when 2 then @c10 else [intDefaultHACode] end,
		[strEditorName] = case substring(@bitmap,2,1) & 4 when 4 then @c11 else [strEditorName] end,
		[strMaintenanceFlag] = case substring(@bitmap,2,1) & 8 when 8 then @c12 else [strMaintenanceFlag] end,
		[strReservedAttribute] = case substring(@bitmap,2,1) & 16 when 16 then @c13 else [strReservedAttribute] end,
		[SourceSystemNameID] = case substring(@bitmap,2,1) & 32 when 32 then @c14 else [SourceSystemNameID] end,
		[SourceSystemKeyValue] = case substring(@bitmap,2,1) & 64 when 64 then @c15 else [SourceSystemKeyValue] end,
		[AuditCreateUser] = case substring(@bitmap,2,1) & 128 when 128 then @c16 else [AuditCreateUser] end,
		[AuditCreateDTM] = case substring(@bitmap,3,1) & 1 when 1 then @c17 else [AuditCreateDTM] end,
		[AuditUpdateUser] = case substring(@bitmap,3,1) & 2 when 2 then @c18 else [AuditUpdateUser] end,
		[AuditUpdateDTM] = case substring(@bitmap,3,1) & 4 when 4 then @c19 else [AuditUpdateDTM] end,
		[strChildTableColumnName] = case substring(@bitmap,3,1) & 8 when 8 then @c20 else [strChildTableColumnName] end
	where [idfsReferenceType] = @pkc1
if @@rowcount = 0
    if @@microsoftversion>0x07320000
		Begin
			if exists (Select * from sys.all_parameters where object_id = OBJECT_ID('sp_MSreplraiserror') and [name] = '@param3')
			Begin
				
				set @primarykey_text = @primarykey_text + '[idfsReferenceType] = ' + convert(nvarchar(100),@pkc1,1)
				exec sp_MSreplraiserror @errorid=20598, @param1=N'[dbo].[trtReferenceType]', @param2=@primarykey_text, @param3=13233 
			End
			Else
				exec sp_MSreplraiserror @errorid=20598
		End
end  
else
begin 

update [dbo].[trtReferenceType] set
		[strReferenceTypeCode] = case substring(@bitmap,1,1) & 2 when 2 then @c2 else [strReferenceTypeCode] end,
		[strReferenceTypeName] = case substring(@bitmap,1,1) & 4 when 4 then @c3 else [strReferenceTypeName] end,
		[intStandard] = case substring(@bitmap,1,1) & 8 when 8 then @c4 else [intStandard] end,
		[idfMinID] = case substring(@bitmap,1,1) & 16 when 16 then @c5 else [idfMinID] end,
		[idfMaxID] = case substring(@bitmap,1,1) & 32 when 32 then @c6 else [idfMaxID] end,
		[rowguid] = case substring(@bitmap,1,1) & 64 when 64 then @c7 else [rowguid] end,
		[intRowStatus] = case substring(@bitmap,1,1) & 128 when 128 then @c8 else [intRowStatus] end,
		[intHACodeMask] = case substring(@bitmap,2,1) & 1 when 1 then @c9 else [intHACodeMask] end,
		[intDefaultHACode] = case substring(@bitmap,2,1) & 2 when 2 then @c10 else [intDefaultHACode] end,
		[strEditorName] = case substring(@bitmap,2,1) & 4 when 4 then @c11 else [strEditorName] end,
		[strMaintenanceFlag] = case substring(@bitmap,2,1) & 8 when 8 then @c12 else [strMaintenanceFlag] end,
		[strReservedAttribute] = case substring(@bitmap,2,1) & 16 when 16 then @c13 else [strReservedAttribute] end,
		[SourceSystemNameID] = case substring(@bitmap,2,1) & 32 when 32 then @c14 else [SourceSystemNameID] end,
		[SourceSystemKeyValue] = case substring(@bitmap,2,1) & 64 when 64 then @c15 else [SourceSystemKeyValue] end,
		[AuditCreateUser] = case substring(@bitmap,2,1) & 128 when 128 then @c16 else [AuditCreateUser] end,
		[AuditCreateDTM] = case substring(@bitmap,3,1) & 1 when 1 then @c17 else [AuditCreateDTM] end,
		[AuditUpdateUser] = case substring(@bitmap,3,1) & 2 when 2 then @c18 else [AuditUpdateUser] end,
		[AuditUpdateDTM] = case substring(@bitmap,3,1) & 4 when 4 then @c19 else [AuditUpdateDTM] end,
		[strChildTableColumnName] = case substring(@bitmap,3,1) & 8 when 8 then @c20 else [strChildTableColumnName] end
	where [idfsReferenceType] = @pkc1
if @@rowcount = 0
    if @@microsoftversion>0x07320000
		Begin
			if exists (Select * from sys.all_parameters where object_id = OBJECT_ID('sp_MSreplraiserror') and [name] = '@param3')
			Begin
				
				set @primarykey_text = @primarykey_text + '[idfsReferenceType] = ' + convert(nvarchar(100),@pkc1,1)
				exec sp_MSreplraiserror @errorid=20598, @param1=N'[dbo].[trtReferenceType]', @param2=@primarykey_text, @param3=13233 
			End
			Else
				exec sp_MSreplraiserror @errorid=20598
		End
end 
end
GO
PRINT N'Altering Procedure [dbo].[USP_REP_ReportFormSummary_GetList]...';


GO

--*************************************************************
-- Name 				: USP_REP_ReportFormSummary_GetList
-- Description			: Get List of Weekly Reports that fit
--						  search criteria entered
--          
-- Author               : Mark Wilson
-- Revision History
--		Name       Date       Change Detail
--	Mark Wilson	   29Mar2023  Added SET DATEFIRST 1; -- SET MONDAY AS First day of week.

--
-- Testing code:
--
/*[]

EXECUTE [dbo].[USP_REP_ReportFormSummary_GetList] 
	@LanguageID = 'ka-GE',
	@Year = 2020,
	@Month = 11

EXECUTE [dbo].[USP_REP_ReportFormSummary_GetList] 
	@LanguageID = 'ru-RU',
	@Year = 2020,
	@Month = 11,
	@RegionID = '37020000000',
	@RayonID='3260000000'

*/
ALTER PROCEDURE [dbo].[USP_REP_ReportFormSummary_GetList](
	@LanguageID AS NVARCHAR(50),
	@Year INT = NULL,
	@Month INT = NULL,
	@RegionID AS VARCHAR(50) = NULL,
	@RayonID AS VARCHAR(50) = NULL,
	@ReportFormTypeID AS BIGINT = NULL,
	@TimeIntervalTypeID AS BIGINT = NULL,
	@AdministrativeUnitID AS BIGINT = NULL, 
	@OrganizationID BIGINT = NULL,
	@SiteList VARCHAR(MAX) = NULL
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
		@ReturnCode BIGINT = 0;
	DECLARE @IDs TABLE (ID BIGINT NOT NULL);

	DECLARE @StartDate DATETIME
	DECLARE @EndDate DATETIME

	SELECT 
		@StartDate = DATEADD(YEAR, @Year - 2000, DATEADD(MONTH, @Month - 1, '20000101')),
		@EndDate = DATEADD(YEAR, @Year - 2000, DATEADD(MONTH, @Month, '20000101'))

	-- Set Fist day of week to Monday
	IF (dbo.FN_GBL_CURRENTCOUNTRY_GET() = 780000000) -- Georgia first day of week = Monday
	BEGIN
		SET DATEFIRST 1; -- SET MONDAY AS First day of week.
	END


	BEGIN TRY

		DECLARE @WeeksPerMonth TABLE
		(
			WeekOfMonth INT,
			WeekStart DATE,
			WeekEnd DATE

		)

		INSERT INTO @WeeksPerMonth
		(
		    WeekOfMonth,
		    WeekStart,
		    WeekEnd
		)
		SELECT 
			WeekOfMonth,
			WeekStart,
			WeekEnd

		FROM dbo.FN_GBL_WeeksOfMonth(@StartDate)

-----------------------------------------------------------
		DECLARE @FinalResultSet TABLE
		(
			RegionID VARCHAR(50),
			RayonID VARCHAR(50),
			RegionName NVARCHAR(300),
			RayonName NVARCHAR(300),
			WeekOfMonth INT,
			StartDate DATE,
			EndDate DATE,
			total INT,
			notified INT

		)

		INSERT INTO @FinalResultSet
		(
			RegionID,
			RayonID,
		    RegionName,
		    RayonName,
			WeekOfMonth,
			StartDate,
			EndDate,
			total,
			notified
		)
		SELECT 
			CAST(L.Level2ID AS VARCHAR)AS RegionID,
			CAST(L.Level3ID AS VARCHAR)AS RayonID,
			L.Level2Name AS RegionName,
			L.Level3Name AS RayonName,
			W.WeekOfMonth,
			W.WeekStart,
			W.WeekEnd,
			0,
			0
		FROM dbo.gisLocationDenormalized L
		LEFT JOIN @WeeksPerMonth W ON 1 = 1
		WHERE idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID) 
		AND level1ID = dbo.FN_GBL_CURRENTCOUNTRY_GET() AND Level = 3

		DECLARE @PopulatedRayons TABLE
		(
			RegionID VARCHAR(50),
			RayonID VARCHAR(50),
			RegionName NVARCHAR(300),
			RayonName NVARCHAR(300),
			StartDate DATE,
			EndDate DATE,
			total INT,
			notified INT

		)

---------------------------------------------------------------
		DECLARE @SiteOrganizationList VARCHAR(MAX) = '';

		SELECT @SiteOrganizationList = @SiteOrganizationList + ',' + CAST(o.idfOffice AS VARCHAR)
		FROM dbo.tlbOffice o
		WHERE (
				o.idfsSite IN (
					SELECT CAST([Value] AS BIGINT)
					FROM dbo.FN_GBL_SYS_SplitList(@SiteList, NULL, ',')
					)
				OR (@SiteList IS NULL)
				);

		SET @SiteOrganizationList = SUBSTRING(@SiteOrganizationList, 2, LEN(@SiteOrganizationList));

		-- Entered by and notification received by and sent to organizations
		INSERT INTO @IDs
		SELECT 
			a.idfReportForm
		FROM dbo.tlbReportForm a
		WHERE (a.intRowStatus = 0)
			AND (
				a.idfEnteredByOffice IN (
					SELECT CAST([Value] AS BIGINT)
					FROM dbo.FN_GBL_SYS_SplitList(@SiteOrganizationList, NULL, ',')
					)
				OR a.idfSentByOffice IN (
					SELECT CAST([Value] AS BIGINT)
					FROM dbo.FN_GBL_SYS_SplitList(@SiteOrganizationList, NULL, ',')
					)
				);

		--
		-- Weekly Report data shall be available to all sites of the same 
		-- administrative rayon.
		--
		-- Rayon of the report administrative unit.
		DECLARE @SiteRayonList VARCHAR(MAX) = '';

		SELECT @SiteRayonList = @SiteRayonList + ',' + CAST(l.idfsRayon AS VARCHAR)
		FROM dbo.tstSite s
		INNER JOIN dbo.tlbOffice AS o
			ON o.idfOffice = s.idfOffice
				AND o.intRowStatus = 0
		INNER JOIN dbo.tlbGeoLocationShared AS l
			ON l.idfGeoLocationShared = o.idfLocation
				AND l.intRowStatus = 0
		WHERE (
				s.idfsSite IN (
					SELECT CAST([Value] AS BIGINT)
					FROM dbo.FN_GBL_SYS_SplitList(@SiteList, NULL, ',')
					)
				OR (@SiteList IS NULL)
				);

		SET @SiteRayonList = SUBSTRING(@SiteRayonList, 2, LEN(@SiteRayonList));

		INSERT INTO @IDs
		SELECT 
			a.idfReportForm
		FROM dbo.tlbReportForm a
		INNER JOIN dbo.gisLocation L ON L.idfsLocation = a.idfsAdministrativeUnit AND L.intRowStatus = 0
		INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) LF ON LF.AdminLevel1ID = L.idfsLocation OR LF.AdminLevel2ID = LF.idfsLocation  OR LF.AdminLevel4ID = L.idfsLocation

/*		INNER JOIN dbo.gisRayon r
			ON r.idfsRayon = a.idfsAdministrativeUnit
				AND r.intRowStatus = 0
*/
		WHERE (a.intRowStatus = 0)


			AND (
					LF.AdminLevel2ID IN 
					(
						SELECT CAST([Value] AS BIGINT)
						FROM dbo.FN_GBL_SYS_SplitList(@SiteRayonList, NULL, ',')
					)

					OR LF.AdminLevel3ID IN 
					(
						SELECT CAST([Value] AS BIGINT)
						FROM dbo.FN_GBL_SYS_SplitList(@SiteRayonList, NULL, ',')
					)

				)
			AND a.idfReportForm NOT IN (
				SELECT *
				FROM @IDs
				);

		---- Rayon of the settlement of the report administrative unit.
		INSERT INTO @IDs
		SELECT 
			a.idfReportForm
		FROM dbo.tlbReportForm a
		INNER JOIN dbo.gisSettlement s
			ON s.idfsSettlement = a.idfsAdministrativeUnit
				AND s.intRowStatus = 0
		WHERE (a.intRowStatus = 0)
			AND (
				s.idfsRayon IN (
					SELECT CAST([Value] AS BIGINT)
					FROM dbo.FN_GBL_SYS_SplitList(@SiteRayonList, NULL, ',')
					)
				)
			AND a.idfReportForm NOT IN (
				SELECT *
				FROM @IDs
				);
		INSERT INTO @PopulatedRayons
		(
			RegionID,
			RayonID,
		    RegionName,
		    RayonName,
		    StartDate,
		    EndDate,
			total,
			notified
		)

		SELECT 
			CAST(summary.RegionID AS VARCHAR),
			CAST(summary.RayonID AS VARCHAR),
			summary.RegionName,
			summary.RayonName,  
			summary.StartDate, 
			summary.finishdate,
			SUM(summary.total) total,
			SUM(summary.notified) notified 
		FROM
		(SELECT RfID.ID AS ReportFormID,
			dbo.FN_GBL_FormatDate(ac.datStartDate, 'mm/dd/yyyy') AS StartDate,
			dbo.FN_GBL_FormatDate(ac.datFinishDate, 'mm/dd/yyyy') AS FinishDate,
			br.strDefault AS diseaseDefaultName,
			ac.Total,
			ac.Notified,
			L.AdminLevel2ID AS RegionID,
			L.AdminLevel3ID AS RayonID,
			L.AdminLevel2Name AS RegionName,
			L.AdminLevel3Name AS RayonName,
			L.AdminLevel4Name AS SettlementName

		FROM @IDs RfID
		INNER JOIN dbo.tlbReportForm AS ac ON ac.idfReportForm = RfID.ID
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) AS EnteredByOffice ON ac.idfEnteredByOffice = EnteredByOffice.idfOffice
		LEFT JOIN dbo.tlbPerson AS EnteredByPerson ON ac.idfEnteredByPerson = EnteredByPerson.idfPerson
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) AS SentByOffice ON ac.idfSentByOffice = SentByOffice.idfOffice
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) L ON L.idfsLocation = ac.idfsAdministrativeUnit
		LEFT JOIN dbo.trtStringNameTranslation AS per
			ON per.idfsBaseReference = CASE 
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091002 /* Day */
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6
						THEN 10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
					WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091001 /* Month */
					WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091003 /* Quarter */
					WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091005 /* Year */
					END
				AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
		JOIN dbo.trtBaseReference br ON br.idfsBaseReference = ac.idfsDiagnosis 
		LEFT JOIN dbo.trtStringNameTranslation AS Diagnosis ON Diagnosis.idfsBaseReference = ac.idfsDiagnosis AND Diagnosis.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
		WHERE (ac.intRowStatus = 0)
			AND (
				(ac.idfsReportFormType = @ReportFormTypeID)
				OR (@ReportFormTypeID IS NULL)
				)
			AND (
				(ac.idfSentByOffice = @OrganizationID)
				OR (@OrganizationID IS NULL)
				)
			--AND (
			--	(L.LevelType = @AdministrativeUnitTypeID)
			--	OR (@AdministrativeUnitTypeID IS NULL)
			--)
			AND (
				(per.idfsBaseReference = @TimeIntervalTypeID)
				OR (@TimeIntervalTypeID IS NULL)
				)
			AND (
				(ac.datStartDate >= @StartDate)
				OR (@StartDate IS NULL)
				)
			AND (
				(ac.datFinishDate < @EndDate)
				OR (@EndDate IS NULL)
				)
			AND (
				CASE 
					WHEN @AdministrativeUnitID IS NULL
						THEN 1
					WHEN (
							L.AdminLevel1ID = @AdministrativeUnitID
							OR L.AdminLevel2ID = @AdministrativeUnitID
							OR L.AdminLevel3ID = @AdministrativeUnitID
							OR L.AdminLevel4ID = @AdministrativeUnitID
						)
					THEN 1
					ELSE 0
					END = 1
				)
		) summary

		GROUP BY Summary.RegionID,Summary.RayonID,summary.RegionName,summary.RayonName,summary.StartDate,summary.FinishDate

	UPDATE F
	SET F.total = P.total,
		F.notified = P.notified
	FROM @FinalResultSet F
	INNER JOIN @PopulatedRayons P ON P.RegionID = F.RegionID AND P.RayonID = F.RayonID AND P.StartDate = F.StartDate AND P.EndDate = F.EndDate


	SELECT 
		summary.RegionName,
		summary.RayonName,
		summary.WeekOfMonth,
		Summary.StartDate,
		Summary.EndDate,
		--CONVERT(VARCHAR, Summary.StartDate,103) + ' - ' + CONVERT(VARCHAR, Summary.EndDate,103) AS WeekSpan,
		summary.total,
		summary.notified,
		summary.RegionID,
		summary.RayonID,
		@RegionID,
		@RayonID
		
	FROM @FinalResultSet summary
	WHERE  ((summary.RegionID = @RegionID) OR (ISNULL(@RegionID,'0') = '0'))
			AND ((summary.RayonID = @RayonID) OR (ISNULL(@RayonID,'0')= '0'))
	ORDER BY summary.RegionName,summary.RayonName,summary.WeekOfMonth


	SELECT @ReturnCode,
			@ReturnMessage;
	END TRY

	BEGIN CATCH
		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();

		SELECT @ReturnCode,
			@ReturnMessage;

		THROW;
	END CATCH;

	
END
GO
PRINT N'Altering Procedure [dbo].[USSP_HUM_DISEASE_GEOLOCATION_SET]...';


GO
-- ================================================================================================
-- Name: USSP_HUM_DISEASE_GEOLOCATION_SET
--
-- Description: Inserts or updates a geo-location record for a human associated with a human 
-- diease report.
--          
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                   Date       Change Detail
-- ---------------------- ---------- -------------------------------------------------------------
-- Stephen Long           11/18/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long           12/01/2022 Added EIDSS object ID; smart key that represents the parent 
--                                   object. 
--
-- Testing code:

/*
--Example of a call of procedure:
DECLARE @idfGeoLocation BIGINT
DECLARE @idfsGroundType BIGINT
DECLARE @idfsGeoLocationType BIGINT
DECLARE @idfsCountry BIGINT
DECLARE @idfsRegion BIGINT
DECLARE @idfsRayon BIGINT
DECLARE @idfsSettlement BIGINT
DECLARE @strDescription NVARCHAR(200)
DECLARE @dblDistance FLOAT
DECLARE @dblLatitude FLOAT
DECLARE @dblLongitude FLOAT
DECLARE @dblAccuracy FLOAT
DECLARE @dblAlignment FLOAT
declare @blnGeoLocationShared bit

-- TODO: Set parameter values here.

EXECUTE dbo.USP_GBL_GEOLOCATION_SET
   @idfGeoLocation
  ,@idfsGroundType
  ,@idfsGeoLocationType
  ,@idfsCountry
  ,@idfsRegion
  ,@idfsRayon
  ,@idfsSettlement
  ,@strDescription
  ,@dblDistance
  ,@dblLatitude
  ,@dblLongitude
  ,@dblAccuracy
  ,@dblAlignment
  ,@blnGeoLocationShared
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_HUM_DISEASE_GEOLOCATION_SET]
(
    @GeoLocationID BIGINT,
    @GroundTypeID BIGINT,
    @GeoLocationTypeID BIGINT,
    @CountryID BIGINT,
    @RegionID BIGINT,
    @RayonID BIGINT,
    @SettlementID BIGINT,
    @Description NVARCHAR(200),
    @Latitude FLOAT,
    @Longitude FLOAT,
    @Accuracy FLOAT,
    @Distance FLOAT,
    @Alignment FLOAT,
    @ForeignAddressString NVARCHAR(200),
    @GeoLocationSharedIndicator BIT = 0,
    @Elevation FLOAT = NULL,
    @AuditUserName NVARCHAR(100) = '',
    @DataAuditEventID BIGINT = NULL, 
    @EIDSSObjectID NVARCHAR(200) = NULL 
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @AddressString NVARCHAR(MAX),
        @LocationID BIGINT = COALESCE(@SettlementID, @RayonID, @RegionID, @CountryID),
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @ObjectID BIGINT = @GeoLocationID,
        @ObjectTableID BIGINT = 75580000000; -- tlbGeoLocation
DECLARE @GeoLocationBeforeEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
DECLARE @GeoLocationAfterEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
BEGIN
    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID
        )
        BEGIN
            -- Data audit
            INSERT INTO @GeoLocationBeforeEdit
            (
                GeoLocationID,
                ResidentTypeID,
                GroundTypeID,
                GeoLocationTypeID,
                LocationID,
                PostalCode,
                StreetName,
                House,
                Building,
                Apartment,
                AddressDescription,
                Distance,
                Latitude,
                Longitude,
                Accuracy,
                Alignment,
                ForeignAddressIndicator,
                ForeignAddressString,
                ShortAddressString
            )
            SELECT idfGeoLocation,
                   idfsResidentType,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsLocation,
                   strPostCode,
                   strStreetName,
                   strHouse,
                   strBuilding,
                   strApartment,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   blnForeignAddress,
                   strForeignAddress,
                   strShortAddressString
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID;
            -- End data audit

            UPDATE dbo.tlbGeoLocation
            SET idfsGroundType = @GroundTypeID,
                idfsGeoLocationType = @GeoLocationTypeID,
                idfsCountry = @CountryID,
                idfsRegion = @RegionID,
                idfsRayon = @RayonID,
                idfsSettlement = @SettlementID,
                idfsLocation = @LocationID,
                strDescription = @Description,
                dblDistance = @Distance,
                dblLatitude = @Latitude,
                dblLongitude = @Longitude,
                dblAccuracy = @Accuracy,
                dblAlignment = @Alignment,
                strForeignAddress = @ForeignAddressString,
                blnForeignAddress = CASE
                                        WHEN @GeoLocationTypeID = 10036001 THEN
                                            1
                                        ELSE
                                            0
                                    END,
                dblElevation = @Elevation,
                AuditUpdateUser = @AuditUserName, 
                AuditUpdateDTM = GETDATE() 
            WHERE idfGeoLocation = @GeoLocationID;

            -- Data audit
            INSERT INTO @GeoLocationAfterEdit
            (
                GeoLocationID,
                ResidentTypeID,
                GroundTypeID,
                GeoLocationTypeID,
                LocationID,
                PostalCode,
                StreetName,
                House,
                Building,
                Apartment,
                AddressDescription,
                Distance,
                Latitude,
                Longitude,
                Accuracy,
                Alignment,
                ForeignAddressIndicator,
                ForeignAddressString,
                ShortAddressString
            )
            SELECT idfGeoLocation,
                   idfsResidentType,
                   idfsGroundType,
                   idfsGeoLocationType,
                   idfsLocation,
                   strPostCode,
                   strStreetName,
                   strHouse,
                   strBuilding,
                   strApartment,
                   strDescription,
                   dblDistance,
                   dblLatitude,
                   dblLongitude,
                   dblAccuracy,
                   dblAlignment,
                   blnForeignAddress,
                   strForeignAddress,
                   strShortAddressString
            FROM dbo.tlbGeoLocation
            WHERE idfGeoLocation = @GeoLocationID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79170000000,
                   a.GeoLocationID,
                   NULL,
                   b.GroundTypeID,
                   a.GroundTypeID,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GroundTypeID <> b.GroundTypeID)
                  OR (
                         a.GroundTypeID IS NOT NULL
                         AND b.GroundTypeID IS NULL
                     )
                  OR (
                         a.GroundTypeID IS NULL
                         AND b.GroundTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79160000000,
                   a.GeoLocationID,
                   NULL,
                   b.GeoLocationTypeID,
                   a.GeoLocationTypeID,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                  OR (
                         a.GeoLocationTypeID IS NOT NULL
                         AND b.GeoLocationTypeID IS NULL
                     )
                  OR (
                         a.GeoLocationTypeID IS NULL
                         AND b.GeoLocationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51523690000000,
                   a.GeoLocationID,
                   NULL,
                   b.LocationID,
                   a.LocationID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.LocationID <> b.LocationID)
                  OR (
                         a.LocationID IS NOT NULL
                         AND b.LocationID IS NULL
                     )
                  OR (
                         a.LocationID IS NULL
                         AND b.LocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79240000000,
                   a.GeoLocationID,
                   NULL,
                   b.AddressDescription,
                   a.AddressDescription,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.AddressDescription <> b.AddressDescription)
                  OR (
                         a.AddressDescription IS NOT NULL
                         AND b.AddressDescription IS NULL
                     )
                  OR (
                         a.AddressDescription IS NULL
                         AND b.AddressDescription IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79110000000,
                   a.GeoLocationID,
                   NULL,
                   b.Distance,
                   a.Distance,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Distance <> b.Distance)
                  OR (
                         a.Distance IS NOT NULL
                         AND b.Distance IS NULL
                     )
                  OR (
                         a.Distance IS NULL
                         AND b.Distance IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79120000000,
                   a.GeoLocationID,
                   NULL,
                   b.Latitude,
                   a.Latitude,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Latitude <> b.Latitude)
                  OR (
                         a.Latitude IS NOT NULL
                         AND b.Latitude IS NULL
                     )
                  OR (
                         a.Latitude IS NULL
                         AND b.Latitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79130000000,
                   a.GeoLocationID,
                   NULL,
                   b.Longitude,
                   a.Longitude,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Longitude <> b.Longitude)
                  OR (
                         a.Longitude IS NOT NULL
                         AND b.Longitude IS NULL
                     )
                  OR (
                         a.Longitude IS NULL
                         AND b.Longitude IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79090000000,
                   a.GeoLocationID,
                   NULL,
                   b.Accuracy,
                   a.Accuracy,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Accuracy <> b.Accuracy)
                  OR (
                         a.Accuracy IS NOT NULL
                         AND b.Accuracy IS NULL
                     )
                  OR (
                         a.Accuracy IS NULL
                         AND b.Accuracy IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79100000000,
                   a.GeoLocationID,
                   NULL,
                   b.Alignment,
                   a.Alignment,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.Alignment <> b.Alignment)
                  OR (
                         a.Alignment IS NOT NULL
                         AND b.Alignment IS NULL
                     )
                  OR (
                         a.Alignment IS NULL
                         AND b.Alignment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578780000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressIndicator,
                   a.ForeignAddressIndicator,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                  OR (
                         a.ForeignAddressIndicator IS NOT NULL
                         AND b.ForeignAddressIndicator IS NULL
                     )
                  OR (
                         a.ForeignAddressIndicator IS NULL
                         AND b.ForeignAddressIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578790000000,
                   a.GeoLocationID,
                   NULL,
                   b.ForeignAddressString,
                   a.ForeignAddressString,
                   @AuditUserName, 
                   @EIDSSObjectID
            FROM @GeoLocationAfterEdit AS a
                FULL JOIN @GeoLocationBeforeEdit AS b
                    ON a.GeoLocationID = b.GeoLocationID
            WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                  OR (
                         a.ForeignAddressString IS NOT NULL
                         AND b.ForeignAddressString IS NULL
                     )
                  OR (
                         a.ForeignAddressString IS NULL
                         AND b.ForeignAddressString IS NOT NULL
                     );
            -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO dbo.tlbGeoLocation
            (
                idfGeoLocation,
                idfsGroundType,
                idfsGeoLocationType,
                idfsCountry,
                idfsRegion,
                idfsRayon,
                idfsSettlement,
                idfsLocation,
                strDescription,
                dblDistance,
                dblLatitude,
                dblLongitude,
                dblAccuracy,
                dblAlignment,
                strForeignAddress,
                blnForeignAddress,
                dblElevation,
                AuditCreateUser
            )
            VALUES
            (   @GeoLocationID,
                @GroundTypeID,
                @GeoLocationTypeID,
                @CountryID,
                @RegionID,
                @RayonID,
                @SettlementID,
                @LocationID,
                @Description,
                @Distance,
                @Latitude,
                @Longitude,
                @Accuracy,
                @Alignment,
                @ForeignAddressString,
                CASE
                    WHEN @GeoLocationTypeID = 10036001 THEN
                        1
                    ELSE
                        0
                END,
                @Elevation,
                @AuditUserName
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @GeoLocationID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             @EIDSSObjectID
            );
            -- End data audit
        END

        SELECT @ReturnCode,
               @ReturnMessage,
               @GeoLocationID;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode,
               @ReturnMessage,
               @GeoLocationID;
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[spGetNextNumberPrefixes]...';


GO

CREATE   PROCEDURE [dbo].[spGetNextNumberPrefixes]
AS

	
SELECT  
	nn.idfsNumberName,
	nn.strPrefix
FROM 
	dbo.tstNextNumbers nn
GO
PRINT N'Creating Procedure [dbo].[spOutbreakTypeSelectLookup]...';


GO

-- Create stored procedure spOutbreakTypeSelectLookup for OutbreakType
--##REMARKS Author: Edgard Torres
--##REMARKS Create date: 02/08/2022

--##RETURNS Don't use 

/*
--Example of a call of procedure:

exec spOutbreakTypeSelectLookup 'en'

*/ 
 
CREATE   PROCEDURE [dbo].[spOutbreakTypeSelectLookup]
	@LangID			as varchar(36)
AS
BEGIN
	select distinct
		r.idfsReference, 
		r.[name],
		r.intOrder  
		from		fnReferenceRepair(@LangID, 19000513) r
		where		r.idfsReference in
					(	
						10513001,	-- Human
						10513002,	-- Veterinary
						10513003	-- Zoonotic
					)
		order by	r.intOrder, r.[name], r.idfsReference

END
GO
PRINT N'Creating Procedure [dbo].[spSpeciesAffectedSelectLookup]...';


GO

-- Create stored procedure spSpeciesAffectedSelectLookup for Outbreak Session – Species Affected
--##REMARKS Author: Edgard Torres
--##REMARKS Create date: 6/14/2022

--##RETURNS Don't use 

/*
--Example of a call of procedure:

exec spSpeciesAffectedSelectLookup 'en'

*/ 
 
CREATE PROCEDURE [dbo].[spSpeciesAffectedSelectLookup]
	@LangID			as varchar(36)
AS
BEGIN
	select distinct
		r.idfsReference, 
		r.[name],
		r.intOrder  
		from		fnReferenceRepair(@LangID, 19000514) r
		where		r.idfsReference in
					(	
						10514001,	-- Human
						10514002,	-- Avian
						10514003,	-- Livestock
						10514004	-- Vector
					)
		order by	r.intOrder, r.[name], r.idfsReference

END


-- Add 'Outbreak Session Cases' - object
ALTER TABLE dbo.trtBaseReference DISABLE TRIGGER ALL
INSERT INTO [dbo].[trtBaseReference] ([idfsBaseReference], [idfsReferenceType], [strBaseReferenceCode], [strDefault], [intHACode], [intOrder], [blnSystem], [intRowStatus], [rowguid], [strMaintenanceFlag], [strReservedAttribute])
VALUES (10082054, 19000082, NULL, 'Outbreak Session Cases', 32, 0, 1, 0, NEWID(), NULL, NULL)
GO
PRINT N'Creating Procedure [dbo].[USP_AGG_REPORT_GETList_AVR]...';


GO
-- ================================================================================================
-- Name:  USP_AGG_REPORT_GETList_AVR
--
-- Description:  Returns list of aggregate reports depending on aggregate report type.
--          
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        07/01/2019 Initial release.
-- Stephen Long        07/09/2019 Updated gis string translation to sub selects instead of joins 
--                                for better performance.
-- Stephen Long        08/05/2019 Updated time period join, and changed the select all if/else. 
--                                Was throwing errors on POCO.
-- Stephen Long        08/08/2019 Added entered by person name.
-- Stephen Long        08/13/2019 Corrected administrative unit type id values.
-- Stephen Long        09/26/2019 Changed administrative where clause; reference TFS item
-- Stephen Long        01/22/2020 Added site list parameter for site filtration.
-- Stephen Long        02/18/2020 Added non-configurable site filtration rules.
-- Stephen Long        02/28/2020 Added "display" dates to handle different cultures.
-- Mark Wilson		   03/03/2020 Removed @DistinctIDs table parm and got rid of duplicates
-- Stephen Long        04/29/2020 Added organization statistical area type.
-- Stephen Long        06/30/2020 Made updates so POCO generator would better handle.
-- Stephen Long        07/06/2020 Added trim to EIDSS Report ID.
-- Stephen Long        09/18/2020 Added the four version ID's for the various matrices.
-- Stephen Long        09/21/2020 Added parameter administrative unit type ID and where 
--                                criteria.
-- Stephen Long        11/18/2020 Added site ID to the query.
-- Stephen Long        11/27/2020 Added configurable site filtration rules.
-- Stephen Long        12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long        04/04/2021 Added updated pagination and location hierarchy.
-- Ann Xiong	       10/23/2021 Fixed search by Organization issue
-- Stephen Long        05/17/2022 Added additional criteria for admin unit of organization.
-- Mike Kornegay	   05/19/2022 Updated to reflect new parameters.
-- Stephen Long        05/31/2022 Updated default rule for administrative level check, and added
--                                for organizations connected to the report.
-- Stephen Long        06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	   08/01/2022 Changed CTE for paging and sorting because sorting was not correct.
-- Stephen Long        09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Ann Xiong		   09/27/2022 Added parameter LegacyReportID
-- Edgard Torres	   11/07/2022 Modified version of USP_AGG_REPORT_GETList 
--							      to return comma delimeted SiteIDs 
--
-- Legends:
/*
	Aggregate disease report types:
    Human Aggregate = 10102001
    Veterinary Aggregate Disease = 10102002
    Veterinary Aggregate Action = 10102003

	Time interval types:
    None = 0
    Month = 10091001
    Day = 10091002
    Quarter = 10091003
    Week = 10091004
    Year = 10091005

	Administrative unit types:
    None = 0
    Country/Administrative Level 1 = 10089001
	Administrative Level 2 = 10089003
    Administrative Level 3 = 10089002
    Settlement = 10089004
	Organization = 10089005

	Testing Code:
	exec USP_AGG_REPORT_GETList 'en-US', 
	@AggregateReportTypeID=10102001, 
	@UserSiteID=864, 
	@UserOrganizationID=758210000000, 
	@UserEmployeeID=420664190000872
*/
--
-- ================================================================================================
CREATE   PROCEDURE [dbo].[USP_AGG_REPORT_GETList_AVR] (
	@LanguageID AS NVARCHAR(50)
	,@AggregateReportTypeID AS BIGINT = NULL
	,@ReportID AS NVARCHAR(200) = NULL
	,@LegacyReportID NVARCHAR(200) = NULL
	,@AdministrativeUnitTypeID AS BIGINT = NULL
	,@TimeIntervalTypeID AS BIGINT = NULL
	,@StartDate AS DATETIME = NULL
	,@EndDate AS DATETIME = NULL
	,@AdministrativeUnitID AS BIGINT = NULL
	,@OrganizationID BIGINT = NULL
	,@SelectAllIndicator BIT = 0
	,@UserSiteID BIGINT
	,@UserOrganizationID BIGINT
	,@UserEmployeeID BIGINT
	,@ApplySiteFiltrationIndicator BIT = 0
	,@SortColumn NVARCHAR(30) = 'ReportID'
	,@SortOrder NVARCHAR(4) = 'DESC'
	,@PageNumber INT = 1
	,@PageSize INT = 10,
	@SiteIDs NVARCHAR(MAX) OUTPUT
	)
AS
BEGIN
	SET NOCOUNT ON;

	IF @SelectAllIndicator = 1
	BEGIN
		SET @PageSize = 100000;
		SET @PageNumber = 1;
	END;

	DECLARE @firstRec INT;
	DECLARE @lastRec INT;
	SET @firstRec = (@PageNumber-1)* @PageSize
	SET @lastRec = (@PageNumber*@PageSize+1);

	DECLARE @AdministrativeLevelNode AS HIERARCHYID;
	DECLARE @Results TABLE (
		ID BIGINT NOT NULL
		,ReadPermissionIndicator BIT NOT NULL
		,AccessToPersonalDataPermissionIndicator BIT NOT NULL
		,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
		,WritePermissionIndicator BIT NOT NULL
		,DeletePermissionIndicator BIT NOT NULL
		);

	BEGIN TRY
	    IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

		IF @AdministrativeUnitID IS NOT NULL
		BEGIN
			SELECT @AdministrativeLevelNode = node
			FROM dbo.gisLocation
			WHERE idfsLocation = @AdministrativeUnitID;
		END;

		-- ========================================================================================
		-- NO SITE FILTRATION RULES APPLIED
		--
		-- For first and second level sites, do not apply any site filtration rules.
		-- ========================================================================================
		IF @ApplySiteFiltrationIndicator = 0
		BEGIN
			INSERT INTO @Results
			SELECT ac.idfAggrCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbAggrCase ac
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
			LEFT JOIN dbo.gisBaseReference br ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit ON ac.idfOffice = OrganizationAdminUnit.idfOffice
			LEFT JOIN dbo.trtBaseReference AdminUnit ON AdminUnit.idfsBaseReference = CASE 
					WHEN ac.idfOffice IS NOT NULL
						THEN 10089005
					WHEN br.idfsGISReferenceType = 19000001
						THEN 10089001
					WHEN br.idfsGISReferenceType = 19000003
						THEN 10089003
					WHEN br.idfsGISReferenceType = 19000002
						THEN 10089002
					WHEN br.idfsGISReferenceType = 19000004
						THEN 10089004
					END
			LEFT JOIN dbo.trtStringNameTranslation AS per ON per.idfsBaseReference = CASE 
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091002 /* Day */
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6
						THEN 10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
					WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091001 /* Month */
					WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091003 /* Quarter */
					WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091005 /* Year */
					END
				AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
			WHERE ac.intRowStatus = 0
				AND (
					ac.idfsAggrCaseType = @AggregateReportTypeID
					OR @AggregateReportTypeID IS NULL
					)
				AND (
					ac.idfOffice = @OrganizationID
					OR @OrganizationID IS NULL
					)
				AND (
					AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
					OR @AdministrativeUnitTypeID IS NULL
					)
				AND (
					per.idfsBaseReference = @TimeIntervalTypeID
					OR @TimeIntervalTypeID IS NULL
					)
				AND (
					ac.datStartDate >= @StartDate
					OR @StartDate IS NULL
					)
				AND (
					ac.datFinishDate <= @EndDate
					OR @EndDate IS NULL
					)
				AND (
					CASE 
						WHEN @AdministrativeUnitID IS NULL
							THEN 1
						WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
							OR (ac.idfOffice = @AdministrativeUnitID AND @AdministrativeUnitTypeID = 10089005)
							THEN 1
						ELSE 0
						END = 1
					)
				AND (
					ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					ac.strCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
					;
		END
		ELSE
		BEGIN
			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,INDEX IDX_ID(ID)
				);
			-- =======================================================================================
			-- DEFAULT SITE FILTRATION RULES
			--
			-- Apply non-configurable site filtration rules for third level sites.
			-- =======================================================================================
			DECLARE @RuleActiveStatus INT = 0;
			DECLARE @AdministrativeLevelTypeID INT;
			DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
			DECLARE @DefaultAccessRules AS TABLE (
				AccessRuleID BIGINT NOT NULL
				,ActiveIndicator INT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,AdministrativeLevelTypeID INT NULL
				);

			INSERT INTO @DefaultAccessRules
			SELECT AccessRuleID
			    ,a.intRowStatus
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
				,a.AdministrativeLevelTypeID
			FROM dbo.AccessRule a
			WHERE a.DefaultRuleIndicator = 1;

			--
			-- Human Aggregate Disease Report data shall be available to all sites' organizations 
			-- connected to the particular report.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537023;

			IF @RuleActiveStatus = 0
			BEGIN
				-- Entered by and notification received by and sent to organizations
				INSERT INTO @FilteredResults
				SELECT a.idfAggrCase
					,1
					,1
					,1
					,1
					,1
				FROM dbo.tlbAggrCase a
				WHERE a.intRowStatus = 0
					AND (
						a.idfEnteredByOffice = @UserOrganizationID
						OR a.idfReceivedByOffice = @UserOrganizationID
						OR a.idfSentByOffice = @UserOrganizationID
						);
			END;

			--
			-- Human Aggregate Disease Report data shall be available to all sites of the same 
			-- administrative level specified in the rule.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537005;

			IF @RuleActiveStatus = 0
			BEGIN
				SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				FROM @DefaultAccessRules
				WHERE AccessRuleID = 10537005;

				SELECT @OrganizationAdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				FROM dbo.tlbOffice o
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				WHERE o.idfOffice = @UserOrganizationID
					AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

				-- Administrative level specified in the rule of the report administrative unit.
				INSERT INTO @FilteredResults
				SELECT ac.idfAggrCase
					,1
					,1
					,1
					,1
					,1
				FROM dbo.tlbAggrCase ac
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537005
				WHERE ac.intRowStatus = 0
				    AND ac.idfsAggrCaseType = 10102001 
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
					AND ac.idfAggrCase NOT IN (
						SELECT ID
						FROM @FilteredResults
						);

				-- Administrative level of the settlement of the report administrative unit.
				INSERT INTO @FilteredResults
				SELECT ac.idfAggrCase
					,1
					,1
					,1
					,1
					,1
				FROM dbo.tlbAggrCase ac
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537005
				WHERE ac.intRowStatus = 0
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
					AND (
						ac.idfAggrCase NOT IN (
							SELECT ID
							FROM @FilteredResults
							)
						);
			END;

			--
			-- Veterinary Aggregate Disease/Action Report data shall be available to all sites' organizations 
			-- connected to the particular report.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537024;

			IF @RuleActiveStatus = 0
			BEGIN
				-- Entered by and notification received by and sent to organizations
				INSERT INTO @FilteredResults
				SELECT a.idfAggrCase
					,1
					,1
					,1
					,1
					,1
				FROM dbo.tlbAggrCase a
				WHERE a.intRowStatus = 0
					AND (
						a.idfEnteredByOffice = @UserOrganizationID
						OR a.idfReceivedByOffice = @UserOrganizationID
						OR a.idfSentByOffice = @UserOrganizationID
						);
			END;

			--
			-- Veterinary Aggregate Disease/Action Report data shall be available to all sites of the same 
			-- administrative level specified in the rule.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537014;

			IF @RuleActiveStatus = 0
			BEGIN
				SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				FROM @DefaultAccessRules
				WHERE AccessRuleID = 10537014;

				SELECT @OrganizationAdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				FROM dbo.tlbOffice o
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				WHERE o.idfOffice = @UserOrganizationID
					AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

				-- Administrative level specified in the rule of the report administrative unit.
				INSERT INTO @FilteredResults
				SELECT ac.idfAggrCase
					,1
					,1
					,1
					,1
					,1
				FROM dbo.tlbAggrCase ac
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537014
				WHERE ac.intRowStatus = 0
				    AND ac.idfsAggrCaseType = 10102002 OR ac.idfAggrCase = 10102003 
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
					AND ac.idfAggrCase NOT IN (
						SELECT ID
						FROM @FilteredResults
						);

				-- Administrative level of the settlement of the report administrative unit.
				INSERT INTO @FilteredResults
				SELECT ac.idfAggrCase
					,1
					,1
					,1
					,1
					,1
				FROM dbo.tlbAggrCase ac
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537014
				WHERE ac.intRowStatus = 0
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
					AND (
						ac.idfAggrCase NOT IN (
							SELECT ID
							FROM @FilteredResults
							)
						);
			END;

			-- =======================================================================================
			-- CONFIGURABLE SITE FILTRATION RULES
			-- 
			-- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
			-- overlap the non-configurable rules.
			-- =======================================================================================
			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = ag.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = ag.idfsSite
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = ag.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = ag.idfsSite
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND sgs.idfsSite = ag.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteID = ag.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteID = ag.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteID = ag.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
			FROM @FilteredResults
			INNER JOIN dbo.tlbAggrCase ac ON ac.idfAggrCase = ID
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
			LEFT JOIN dbo.gisBaseReference br ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit ON ac.idfOffice = OrganizationAdminUnit.idfOffice
			LEFT JOIN dbo.trtBaseReference AdminUnit ON AdminUnit.idfsBaseReference = CASE 
					WHEN ac.idfOffice IS NOT NULL
						THEN 10089005
					WHEN br.idfsGISReferenceType = 19000001
						THEN 10089001
					WHEN br.idfsGISReferenceType = 19000003
						THEN 10089003
					WHEN br.idfsGISReferenceType = 19000002
						THEN 10089002
					WHEN br.idfsGISReferenceType = 19000004
						THEN 10089004
					END
			LEFT JOIN dbo.trtStringNameTranslation AS per ON per.idfsBaseReference = CASE 
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091002 /* Day */
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6
						THEN 10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
					WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091001 /* Month */
					WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091003 /* Quarter */
					WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091005 /* Year */
					END
				AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
			WHERE (
					ac.idfsAggrCaseType = @AggregateReportTypeID
					OR @AggregateReportTypeID IS NULL
					)
				AND (
					ac.idfSentByOffice = @OrganizationID
					OR @OrganizationID IS NULL
					)
				AND (
					AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
					OR @AdministrativeUnitTypeID IS NULL
					)
				AND (
					per.idfsBaseReference = @TimeIntervalTypeID
					OR @TimeIntervalTypeID IS NULL
					)
				AND (
					ac.datStartDate >= @StartDate
					OR @StartDate IS NULL
					)
				AND (
					ac.datFinishDate <= @EndDate
					OR @EndDate IS NULL
					)
				AND (
					CASE 
						WHEN @AdministrativeUnitID IS NULL
							THEN 1
						WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
							OR (ac.idfOffice = @AdministrativeUnitID AND @AdministrativeUnitTypeID = 10089005)
							THEN 1
						ELSE 0
						END = 1
					)
				AND (
					ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
			GROUP BY ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator;
		END;

		-- ========================================================================================
		-- FINAL QUERY, PAGINATION AND COUNTS
		-- ========================================================================================
		WITH paging
		AS (
			SELECT ROW_NUMBER() OVER ( ORDER BY
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN ac.strCaseID END ASC,
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN ac.strCaseID END DESC,
				CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'ASC' THEN ac.datStartDate END ASC,
				CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'DESC' THEN ac.datStartDate END DESC,
				CASE WHEN @SortColumn = 'TimeIntervalUnitTypeName' AND @SortOrder = 'ASC' THEN per.strTextString END ASC,
				CASE WHEN @SortColumn = 'TimeIntervalUnitTypeName' AND @SortOrder = 'DESC' THEN per.strTextString END DESC,
				CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'ASC' THEN LH.AdminLevel2Name END ASC,
				CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'DESC' THEN LH.AdminLevel2Name END DESC,
				CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'ASC' THEN LH.AdminLevel3Name END ASC,
				CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'DESC' THEN LH.AdminLevel3Name END DESC,
				CASE WHEN @SortColumn = 'SettlementName' AND @SortOrder = 'ASC' THEN LH.AdminLevel4Name END ASC,
				CASE WHEN @SortColumn = 'SettlementName' AND @SortOrder = 'DESC' THEN LH.AdminLevel4Name END DESC,
				CASE WHEN @SortColumn = 'OrganizationAdministrativeName' AND @SortOrder = 'ASC' THEN organizationAdminUnit.name END ASC,
				CASE WHEN @SortColumn = 'OrganizationAdministrativeName' AND @SortOrder = 'DESC' THEN organizationAdminUnit.name END DESC 
			) AS ROWNUM,
			ac.idfsSite AS SiteID
			FROM @Results res
			INNER JOIN dbo.tlbAggrCase ac ON ac.idfAggrCase = res.ID
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) receivedByOrganization ON ac.idfReceivedByOffice = receivedByOrganization.idfOffice
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) enteredByOrganization ON ac.idfEnteredByOffice = enteredByOrganization.idfOffice
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) sentByOrganization ON ac.idfSentByOffice = sentByOrganization.idfOffice
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
			INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation= ac.idfsAdministrativeUnit
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) organizationAdminUnit ON ac.idfOffice = organizationAdminUnit.idfOffice
			LEFT JOIN dbo.trtBaseReference adminUnit ON adminUnit.idfsBaseReference = CASE 
				WHEN NOT ac.idfOffice IS NULL
					THEN 10089005
				WHEN NOT lh.AdminLevel4ID IS NULL
					THEN 10089004
				WHEN NOT lh.AdminLevel3ID IS NULL
					THEN 10089002
				WHEN NOT lh.AdminLevel2ID IS NULL
					THEN 10089003
				WHEN NOT lh.AdminLevel1Id IS NULL
					THEN   10089001
				END
			LEFT JOIN dbo.trtStringNameTranslation per ON per.idfsBaseReference = CASE 
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091002 /* Day */
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6
						THEN 10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
					WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091001 /* Month */
					WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091003 /* Quarter */
					WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091005 /* Year */
					END
				AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
			),

			SITEID AS
		   (
				SELECT
					DISTINCT siteID
				FROM paging

			)

		SELECT @SiteIDs = STRING_AGG(CAST(SiteID AS NVARCHAR(24)), ',') 
		FROM SITEID

	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Creating Procedure [dbo].[USP_AS_CAMPAIGN_GETList_AVR]...';


GO



-- ================================================================================================
-- Name: USP_AS_CAMPAIGN_GETList_AVR
--
-- Description: Gets data for active surveillance campaign search for the human module.
--          
-- Revision History:
-- Name               Date       Change Detail
-- ------------------ ---------- -----------------------------------------------------------------
-- Stephen Long       07/06/2019 Initial release.
-- Stephen Long       01/26/2020 Added site list parameter for site filtration.
-- Ann Xiong		  02/19/2020 Added script to search by Region and Rayon
-- Stephen Long       05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long       06/18/2020 Added where criteria to the query when no site filtration is 
--                               required.
-- Stephen Long       07/07/2020 Added trim to EIDSS identifier like criteria.
-- Stephen Long       11/18/2020 Added site ID to the query.
-- Stephen Long       11/27/2020 Added configurable site filtration rules.
-- Stephen Long       12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long       12/14/2020 Corrected where criteria on site list in the final query.
-- Stephen Long       12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long       12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long       04/08/2021 Added updated pagination and location hierarchy.
-- Lamont Mitchell    07/01/2021 
-- Mark Wilson		  08/10/2021 added join to tlbCampaignToDiagnosis to pull diagnosis
-- Mark Wilson		  08/26/2021 added Select Distinct to remove dupes
-- Mark Wilson		  08/27/2021 added @CampaignTypeID to total count
-- Mark Wilson		  02/22/2022 renamed from USP_HAS_CAMPAIGN_GETList and added @CampaignCategoryID to 
--								 support both human and vet campaigns
-- Mark Wilson		  02/23/2022 removed parm @AdministrativeLevelID, redo paging and sorting
-- Manickandan Govindrajan 05/12/2022 Fixed the start and End date condition
-- Edgard Torres	  11/10/2022 Modified version of USP_AS_CAMPAIGN_GETList
--							     to return comma delimeted SiteIDs 
-- ================================================================================================
CREATE   PROCEDURE [dbo].[USP_AS_CAMPAIGN_GETList_AVR] 
(
	@LanguageID AS NVARCHAR(50),
	@CampaignID AS NVARCHAR(200) = NULL,
	@LegacyCampaignID AS NVARCHAR(200) = NULL,
	@CampaignName AS NVARCHAR(200) = NULL,
	@CampaignTypeID AS BIGINT = NULL,
	@CampaignStatusTypeID AS BIGINT = NULL,
	@CampaignCategoryID AS BIGINT,
	@StartDateFrom AS DATETIME = NULL,
	@StartDateTo AS DATETIME = NULL,
	@DiseaseID AS BIGINT = NULL,
	@UserSiteID BIGINT,
	@UserEmployeeID BIGINT,
	@ApplySiteFiltrationIndicator BIT = 0,
	@SortColumn NVARCHAR(30) = 'CampaignID',
	@SortOrder NVARCHAR(4) = 'DESC',
	@Page INT = 1,
	@PageSize INT = 10,
	@SiteIDs NVARCHAR(MAX) OUTPUT
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
	DECLARE @firstRec INT
	DECLARE @lastRec INT

	SET @firstRec = (@page-1)* @pagesize
	SET @lastRec = (@page*@pageSize+1)
	BEGIN TRY

	DECLARE @Results TABLE (
		ID BIGINT NOT NULL
		,ReadPermissionIndicator BIT NOT NULL
		,AccessToPersonalDataPermissionIndicator BIT NOT NULL
		,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
		,WritePermissionIndicator BIT NOT NULL
		,DeletePermissionIndicator BIT NOT NULL
		);

		INSERT INTO @Results
		SELECT 
			DISTINCT C.idfCampaign,
			1,
			1,
			1,
			1,
			1
		FROM dbo.tlbCampaign C
		INNER JOIN dbo.tlbCampaignToDiagnosis CD ON CD.idfCampaign = C.idfCampaign
		LEFT JOIN dbo.tstSite s ON s.idfsSite = c.idfsSite AND s.intRowStatus = 0
		LEFT JOIN dbo.tlbOffice o ON s.idfOffice = o.idfOffice AND o.intRowStatus = 0
		LEFT JOIN dbo.tlbGeoLocationShared gl ON o.idfLocation = gl.idfGeoLocationShared
		LEFT JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = gl.idfsLocation AND g.idfsLanguage = @idfsLanguage
		WHERE c.intRowStatus = 0
		AND c.CampaignCategoryID = @CampaignCategoryID 
		AND ((c.idfsSite = @UserSiteID AND @ApplySiteFiltrationIndicator = 1) OR ((@UserSiteID IS NULL) OR (@ApplySiteFiltrationIndicator = 0)))
		AND (c.strCampaignName LIKE '%' + TRIM(@CampaignName) + '%'   OR @CampaignName IS NULL) 
		AND (c.idfsCampaignType = @CampaignTypeID OR @CampaignTypeID IS NULL) 
		AND (c.idfsCampaignStatus = @CampaignStatusTypeID OR @CampaignStatusTypeID IS NULL)
		AND (CD.idfsDiagnosis = @DiseaseID OR @DiseaseID IS NULL)
		AND (((c.datCampaignDateStart BETWEEN @StartDateFrom AND @StartDateTo) OR (@StartDateFrom IS NULL))
		OR ((c.datCampaignDateEnd BETWEEN @StartDateFrom AND @StartDateTo) OR (@StartDateTo IS NULL)))
		AND (c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%' OR @CampaignID IS NULL)
		AND (c.LegacyCampaignID LIKE '%' + TRIM(@LegacyCampaignID) + '%' OR @LegacyCampaignID IS NULL);


	    -- =======================================================================================
		-- CONFIGURABLE SITE FILTRATION RULES
		-- 
		-- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
		-- overlap the non-configurable rules.
		-- =======================================================================================
		IF @ApplySiteFiltrationIndicator = 1
		BEGIN
			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,INDEX IDX_ID(ID)
				);

			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT c.idfCampaign
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbCampaign c
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = c.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE c.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT c.idfCampaign
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbCampaign c
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = c.idfsSite
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE c.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT c.idfCampaign
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbCampaign c
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = c.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE c.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT c.idfCampaign
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbCampaign c
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = c.idfsSite
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE c.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT c.idfCampaign
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbCampaign c
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE c.intRowStatus = 0
				AND sgs.idfsSite = c.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT c.idfCampaign
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbCampaign c
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE c.intRowStatus = 0
				AND a.GrantingActorSiteID = c.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT c.idfCampaign
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbCampaign c
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE c.intRowStatus = 0
				AND a.GrantingActorSiteID = c.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT c.idfCampaign
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbCampaign c
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE c.intRowStatus = 0
				AND a.GrantingActorSiteID = c.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT 
				DISTINCT F.ID,
				F.ReadPermissionIndicator,
				F.AccessToPersonalDataPermissionIndicator,
				F.AccessToGenderAndAgeDataPermissionIndicator,
				F.WritePermissionIndicator,
				F.DeletePermissionIndicator

			FROM @FilteredResults F
			INNER JOIN dbo.tlbCampaign C ON C.idfCampaign = F.ID
			INNER JOIN dbo.tlbCampaignToDiagnosis CD ON CD.idfCampaign = C.idfCampaign AND CD.intRowStatus = 0
			LEFT JOIN dbo.tstSite s ON s.idfsSite = C.idfsSite AND s.intRowStatus = 0
			LEFT JOIN dbo.tlbOffice o ON s.idfOffice = o.idfOffice AND o.intRowStatus = 0
			LEFT JOIN dbo.tlbGeoLocationShared gl ON o.idfLocation = gl.idfGeoLocationShared
			LEFT JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = gl.idfsLocation AND g.idfsLanguage = @LanguageID
			WHERE c.CampaignCategoryID = @CampaignCategoryID -- Human Active Surveillance Campaign
		    AND (c.strCampaignName LIKE '%' + TRIM(@CampaignName) + '%'   OR @CampaignName IS NULL) 
			AND (C.idfsCampaignType = @CampaignTypeID OR @CampaignTypeID IS NULL)
			AND (C.idfsCampaignStatus = @CampaignStatusTypeID OR @CampaignStatusTypeID IS NULL)
			AND (CD.idfsDiagnosis = @DiseaseID OR @DiseaseID IS NULL)
			AND (((c.datCampaignDateStart BETWEEN @StartDateFrom AND @StartDateTo) OR (@StartDateFrom IS NULL))
			OR ((c.datCampaignDateEnd BETWEEN @StartDateFrom AND @StartDateTo) OR (@StartDateTo IS NULL)))
			AND (C.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%' OR @CampaignID IS NULL)
			AND (c.LegacyCampaignID LIKE '%' + TRIM(@LegacyCampaignID) + '%' OR @LegacyCampaignID IS NULL)
			AND F.ID NOT IN (SELECT ID FROM @Results);
		END;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		-- =======================================================================================
		-- DISEASE FILTRATION RULES
		--
		-- Apply disease filtration rules from use case SAUC62.
		-- =======================================================================================
		-- 
		-- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
		-- as all records have been pulled above with or without site filtration rules applied.
		--
		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT 
					C.idfCampaign
				FROM dbo.tlbCampaign C
				INNER JOIN dbo.tlbCampaignToDiagnosis CD ON CD.idfCampaign = C.idfCampaign AND CD.intRowStatus = 0
				INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = CD.idfsDiagnosis	AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1 AND oa.idfsObjectType = 10060001 AND oa.idfActor = - 506 -- Default role
				);

		--
		-- Apply level 1 disease filtration rules for an employee's associated user group(s).  
		-- Allows and denies will supersede level 0.
		--
		INSERT INTO @Results
		SELECT
			DISTINCT C.idfCampaign
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbCampaign C
		INNER JOIN dbo.tlbCampaignToDiagnosis CD ON CD.idfCampaign = C.idfCampaign AND CD.intRowStatus = 0
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = CD.idfsDiagnosis AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID AND egm.intRowStatus = 0
		LEFT JOIN dbo.tstSite s ON s.idfsSite = C.idfsSite AND s.intRowStatus = 0
		LEFT JOIN dbo.tlbOffice o ON s.idfOffice = o.idfOffice AND o.intRowStatus = 0
		LEFT JOIN dbo.tlbGeoLocationShared gl ON o.idfLocation = gl.idfGeoLocationShared
		LEFT JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = gl.idfsLocation AND g.idfsLanguage = @idfsLanguage
		WHERE oa.intPermission = 2 -- Allow permission
		AND C.intRowStatus = 0
		AND oa.idfsObjectType = 10060001 -- Disease
		AND oa.idfActor = egm.idfEmployeeGroup
		AND C.CampaignCategoryID = @CampaignCategoryID -- Human Active Surveillance Campaign
		AND (c.strCampaignName LIKE '%' + TRIM(@CampaignName) + '%'   OR @CampaignName IS NULL) 
		AND (C.idfsCampaignType = @CampaignTypeID OR @CampaignTypeID IS NULL)
		AND (C.idfsCampaignStatus = @CampaignStatusTypeID OR @CampaignStatusTypeID IS NULL)
		AND (CD.idfsDiagnosis = @DiseaseID OR @DiseaseID IS NULL)
		AND (((c.datCampaignDateStart BETWEEN @StartDateFrom AND @StartDateTo) OR (@StartDateFrom IS NULL))
			OR ((c.datCampaignDateEnd BETWEEN @StartDateFrom AND @StartDateTo) OR (@StartDateTo IS NULL)))
		AND (C.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%' OR @CampaignID IS NULL)	
		AND (c.LegacyCampaignID LIKE '%' + TRIM(@LegacyCampaignID) + '%' OR @LegacyCampaignID IS NULL)
		AND C.idfCampaign NOT IN (SELECT ID FROM @Results);

		DELETE res
		FROM @Results res
		INNER JOIN dbo.tlbCampaign C ON C.idfCampaign = ID
		INNER JOIN dbo.tlbCampaignToDiagnosis CD ON CD.idfCampaign = C.idfCampaign AND CD.intRowStatus = 0
		INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID AND egm.intRowStatus = 0
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = CD.idfsDiagnosis AND oa.intRowStatus = 0
		WHERE oa.intPermission = 1 -- Deny permission
		AND oa.idfsObjectType = 10060001 -- Disease
		AND oa.idfActor = egm.idfEmployeeGroup;

		--
		-- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
		-- will supersede level 1.
		--
		INSERT INTO @Results
		SELECT 
			DISTINCT c.idfCampaign
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbCampaign c
		INNER JOIN dbo.tlbCampaignToDiagnosis CD ON CD.idfCampaign = c.idfCampaign AND CD.intRowStatus = 0
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = CD.idfsDiagnosis	AND oa.intRowStatus = 0
		LEFT JOIN dbo.tstSite s ON s.idfsSite = c.idfsSite AND s.intRowStatus = 0
		LEFT JOIN dbo.tlbOffice o ON s.idfOffice = o.idfOffice AND o.intRowStatus = 0
		LEFT JOIN dbo.tlbGeoLocationShared gl ON o.idfLocation = gl.idfGeoLocationShared
		LEFT JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = gl.idfsLocation AND g.idfsLanguage = @idfsLanguage
		WHERE oa.intPermission = 2 -- Allow permission
		AND c.intRowStatus = 0
		AND oa.idfsObjectType = 10060001 -- Disease
		AND oa.idfActor = @UserEmployeeID
		AND c.CampaignCategoryID = @CampaignCategoryID -- Human Active Surveillance Campaign
		AND (c.strCampaignName LIKE '%' + TRIM(@CampaignName) + '%'   OR @CampaignName IS NULL) 
		AND (c.idfsCampaignType = @CampaignTypeID OR @CampaignTypeID IS NULL)
		AND (c.idfsCampaignStatus = @CampaignStatusTypeID OR @CampaignStatusTypeID IS NULL)
		AND (CD.idfsDiagnosis = @DiseaseID OR @DiseaseID IS NULL)
		AND (((c.datCampaignDateStart BETWEEN @StartDateFrom AND @StartDateTo) OR (@StartDateFrom IS NULL))
			OR ((c.datCampaignDateEnd BETWEEN @StartDateFrom AND @StartDateTo) OR (@StartDateTo IS NULL)))
		AND (c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'	OR @CampaignID IS NULL)
		AND (c.LegacyCampaignID LIKE '%' + TRIM(@LegacyCampaignID) + '%' OR @LegacyCampaignID IS NULL)
		AND c.idfCampaign NOT IN (SELECT ID FROM @Results);

		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT c.idfCampaign
				FROM dbo.tlbCampaign c
				INNER JOIN dbo.tlbCampaignToDiagnosis CD ON CD.idfCampaign = c.idfCampaign AND CD.intRowStatus = 0
				INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = CD.idfsDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1 -- Deny permission
				AND oa.idfActor = @UserEmployeeID
				);


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
		-- ========================================================================================
		-- FINAL QUERY, PAGINATION AND COUNTS
		-- ========================================================================================
		WITH paging
		AS (
			SELECT 
				DISTINCT c.idfCampaign,
				(SELECT dbo.FN_GBL_Campaign_Disease_Names_GET(C.idfCampaign, @LanguageID)) AS DiseaseList, 
				SpeciesList = STUFF((
									SELECT ', ' + speciesType.name
									FROM dbo.tlbCampaignToDiagnosis CD
									INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) AS speciesType ON speciesType.idfsReference = CD.idfsSpeciesType
									WHERE CD.idfCampaign = c.idfCampaign
									GROUP BY speciesType.name
									FOR XML PATH('')
										,TYPE
									).value('.[1]', 'NVARCHAR(MAX)'), 1, 2, ''),
				SampleTypesList = STUFF((
											SELECT ', ' + sampleType.name
											FROM dbo.tlbCampaignToDiagnosis CD
											INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) AS sampleType ON sampleType.idfsReference = CD.idfsSampleType
											WHERE CD.idfCampaign = c.idfCampaign
											GROUP BY sampleType.name
											FOR XML PATH('')
												,TYPE
										).value('.[1]', 'NVARCHAR(MAX)'), 1, 2, ''),
				campaignType.name AS CampaignTypeName,
				campaignStatus.name AS CampaignStatus,
				c.strCampaignID,
				c.strCampaignName,
				c.datCampaignDateStart,
				c.idfsSite,
				c.datCampaignDateEnd,
				c.strCampaignAdministrator,
				c.AuditCreateDTM,
				c.CampaignCategoryID

			FROM dbo.tlbCampaign c
			LEFT JOIN dbo.tlbCampaignToDiagnosis CD ON CD.idfCampaign = C.idfCampaign
			LEFT JOIN @Results res ON c.idfCampaign = res.ID
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000115) campaignStatus ON c.idfsCampaignStatus = campaignStatus.idfsReference
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000116) campaignType ON c.idfsCampaignType = campaignType.idfsReference
			WHERE c.CampaignCategoryID= @CampaignCategoryID AND c.intRowStatus =0
			AND ((c.idfsSite = @UserSiteID AND @ApplySiteFiltrationIndicator = 1) OR ((@UserSiteID IS NULL) OR (@ApplySiteFiltrationIndicator = 0)))
			AND (c.strCampaignName LIKE '%' + TRIM(@CampaignName) + '%'   OR @CampaignName IS NULL) 
			AND (c.idfsCampaignType = @CampaignTypeID OR @CampaignTypeID IS NULL) 
			AND (c.idfsCampaignStatus = @CampaignStatusTypeID OR @CampaignStatusTypeID IS NULL)
			AND (CD.idfsDiagnosis = @DiseaseID OR @DiseaseID IS NULL)
			AND (((c.datCampaignDateStart BETWEEN @StartDateFrom AND @StartDateTo) OR (@StartDateFrom IS NULL))
			OR ((c.datCampaignDateEnd BETWEEN @StartDateFrom AND @StartDateTo) OR (@StartDateTo IS NULL)))
			AND (c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%' OR @CampaignID IS NULL)
			AND (c.LegacyCampaignID LIKE '%' + TRIM(@LegacyCampaignID) + '%' OR @LegacyCampaignID IS NULL)

			),
			paging_final AS 
			(
			SELECT 
				DISTINCT paging.idfCampaign,
				paging.DiseaseList, 
				paging.SpeciesList,
				paging.SampleTypesList,
				paging.CampaignTypeName,
				paging.CampaignStatus,
				paging.strCampaignID,
				paging.strCampaignName,
				paging.datCampaignDateStart,
				paging.idfsSite,
				paging.datCampaignDateEnd,
				paging.strCampaignAdministrator,
				paging.AuditCreateDTM,
				paging.CampaignCategoryID,
				c = COUNT(*) OVER (),
				ROW_NUMBER() OVER (ORDER BY CASE 
					WHEN @SortColumn = 'CampaignID'
						AND @SortOrder = 'ASC'
						THEN paging.strCampaignID
					END ASC
				,CASE 
					WHEN @SortColumn = 'CampaignID'
						AND @SortOrder = 'DESC'
						THEN paging.strCampaignID
					END DESC
				,CASE 
					WHEN @SortColumn = 'CampaignName'
						AND @SortOrder = 'ASC'
						THEN paging.strCampaignName
					END ASC
				,CASE 
					WHEN @SortColumn = 'CampaignName'
						AND @SortOrder = 'DESC'
						THEN paging.strCampaignName
					END DESC
				,CASE 
					WHEN @SortColumn = 'CampaignTypeName'
						AND @SortOrder = 'ASC'
						THEN paging.CampaignTypeName
					END ASC
				,CASE 
					WHEN @SortColumn = 'CampaignTypeName'
						AND @SortOrder = 'DESC'
						THEN paging.CampaignTypeName
					END DESC
				,CASE 
					WHEN @SortColumn = 'CampaignStatusTypeName'
						AND @SortOrder = 'ASC'
						THEN paging.CampaignStatus
					END ASC
				,CASE 
					WHEN @SortColumn = 'CampaignStatusTypeName'
						AND @SortOrder = 'DESC'
						THEN paging.CampaignStatus
					END DESC
				,CASE 
					WHEN @SortColumn = '"CampaignStartDate'
						AND @SortOrder = 'ASC'
						THEN paging.datCampaignDateStart
					END ASC
				,CASE 
					WHEN @SortColumn = '"CampaignStartDate'
						AND @SortOrder = 'DESC'
						THEN paging.datCampaignDateStart
					END DESC
				,CASE 
					WHEN @SortColumn = 'DiseaseName'
						AND @SortOrder = 'ASC'
						THEN paging.DiseaseList
					END ASC
				,CASE 
					WHEN @SortColumn = 'DiseaseName'
						AND @SortOrder = 'DESC'
						THEN paging.DiseaseList
					END DESC ) AS RowNo

			FROM paging
			
			),

		SITEIDs AS
		(
		SELECT DISTINCT
			p.idfsSite AS SiteID
		FROM paging_final p
		LEFT JOIN @Results res ON p.idfCampaign = res.ID
		INNER JOIN dbo.tstSite s ON s.idfsSite = p.idfsSite
		WHERE p.CampaignCategoryID =@CampaignCategoryID
		)


		SELECT @SiteIDs = STRING_AGG(CAST(SiteID AS NVARCHAR(24)), ',') 
		FROM SITEIDs

		SELECT @SiteIDs


	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Creating Procedure [dbo].[USP_HAS_MONITORING_SESSION_GETList_AVR]...';


GO
-- ================================================================================================
-- Name: USP_HAS_MONITORING_SESSION_GETList_AVR
--
-- Description: Gets a list of human monitoring sessions based on search criteria provided.
--                      
-- Revision History:
-- Name				Date		Change Detail
-- ---------------	----------	-------------------------------------------------------------------
-- Stephen Long		12/31/2018	Initial release.
-- Stephen Long		07/06/2019	Fixed category code, and added campaign ID.
-- Stephen Long		01/26/2020	Added site list parameter for site filtration.
-- Stephen Long		02/24/2020	Added non-configurable site filtration rules.
-- Stephen Long		03/25/2020	Added if/else for first-level and second-level site types to 
--                              bypass non-configurable rules.
-- Stephen Long		04/20/2020	Changed join from FN_GBL_INSTITUTION to tstSite as not all sites 
--                              have organizations.
-- Stephen Long		05/18/2020	Added disease filtration rules from use case SAUC62.
-- Stephen Long		06/18/2020	Added where criteria to the query when no site filtration is 
--								required.
-- Stephen Long		07/07/2020	Added trim to EIDSS identifier like criteria.
-- Stephen Long		11/18/2020	Added site ID to the query.
-- Stephen Long		11/27/2020	Added configurable site filtration rules.
-- Stephen Long		12/13/2020	Added apply configurable filtration indicator parameter.
-- Stephen Long		12/24/2020	Modified join on disease filtration default role rule.
-- Stephen Long		12/29/2020	Changed function call on reference data for inactive records.
-- Stephen Long		04/04/2021	Added updated pagination and location hierarchy.
-- Mark Wilson		08/18/2021	joined tlbMonitoringSessionToDiagnosis to get disease
-- Doug Albanese	11/23/2021	Refactored for use with new HAS module
-- Stephen Long     01/26/2022  Added the disease identifiers and names fields to the query.
-- Doug Albanese	01/27/2022	Completely removed "node" searches and put in full hierarchy 
--                              location joins
-- Stephen Long     03/29/2022  Fix to site filtration to pull back a user's own site records.
-- Doug Albanese	03/30/2022	Refactored to align with Stephen's changes to combine Diseases into 
--                              one row.
-- Doug Albanese	04/01/2022	Creating HAS's on the first o a month exposed an incorrect BETWEEN 
--                              statement use. Adding one day to ending date.
-- Doug Albanese	05/16/2022	Added Admin Level 4 for return of Settlement in Campaign's use
-- Stephen Long     06/03/2022  Updated to point default access rules to base reference.
-- Mike Kornegay	06/14/2022  Fixed filtration rule that was pointing to SessionCategoryID for vet
--								instead of human.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Edgard Torres	11/11/2022 Modified version of USP_HAS_MONITORING_SESSION_GETList
--							   to return comma delimeted SiteIDs 
-- ================================================================================================
CREATE     PROCEDURE [dbo].[USP_HAS_MONITORING_SESSION_GETList_AVR]
(
    @LanguageID NVARCHAR(50),
    @SessionID NVARCHAR(200) = NULL,
    @LegacySessionID NVARCHAR(50) = NULL,
    @CampaignID NVARCHAR(200) = NULL,
    @CampaignKey BIGINT = NULL,
    @SessionStatusTypeID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'SessionID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10,
	@SiteIDs NVARCHAR(MAX) OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;
	
    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
	(
		ID BIGINT NOT NULL,
	    ReadPermissionIndicator BIT NOT NULL,
	    AccessToPersonalDataPermissionIndicator BIT NOT NULL,
		AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
		WritePermissionIndicator BIT NOT NULL,
		DeletePermissionIndicator BIT NOT NULL
	);

	IF @AdministrativeLevelID IS NOT NULL
		BEGIN
			SELECT @AdministrativeLevelNode = node
			FROM dbo.gisLocation
			WHERE idfsLocation = @AdministrativeLevelID;
		END;

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis MSD
                    ON MSD.idfMonitoringSession = ms.idfMonitoringSession
                       AND MSD.intRowStatus = 0
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
				LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
                INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = ms.idfsLocation
            WHERE ms.intRowStatus = 0
                  AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          MSD.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
				  AND (
						g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
					  )
                  AND (
                          (ms.datEnteredDate
                  BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      );
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis MSD
                    ON MSD.idfMonitoringSession = ms.idfMonitoringSession
                       AND MSD.intRowStatus = 0
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
				LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
                INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = ms.idfsLocation
            WHERE ms.intRowStatus = 0
                  AND ms.idfsSite = @UserSiteID 
                  AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          MSD.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
				  AND (
						g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
					  )
                  AND (
                          (ms.datEnteredDate
                  BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      );

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply non-configurable site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL, 
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            (
                AccessRuleID,
                ActiveIndicator,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator,
                AdministrativeLevelTypeID
            )
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            --
            -- Session data shall be available to all sites of the same administrative level.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537006;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537006;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the session was created.
                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tstSite s
                        ON ms.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537006
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the patient's current residence address
                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbHuman h
                        ON h.idfMonitoringSession = ms.idfMonitoringSession
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfCurrentResidenceAddress
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537006
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            --
            -- Session data is always distributed across the sites where the disease reports are 
            -- linked to the session.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537007;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfParentMonitoringSession = ms.idfMonitoringSession
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules AS a
                        ON a.AccessRuleID = 10537007
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND h.idfsSite = @UserSiteID;
            END;

            --
            -- Session data shall be available to all sites' organizations connected to the particular 
            -- session where samples were transferred out.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537008;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Samples transferred collected by and sent to organizations
                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbMaterial m
                        ON ms.idfMonitoringSession = m.idfMonitoringSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT tout
                        ON toutm.idfTransferOut = tout.idfTransferOut
                           AND tout.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537008
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND tout.idfSendToOffice = @UserOrganizationID;

                INSERT INTO @FilteredResults
                (
                    ID,
                    ReadPermissionIndicator,
                    AccessToPersonalDataPermissionIndicator,
                    AccessToGenderAndAgeDataPermissionIndicator,
                    WritePermissionIndicator,
                    DeletePermissionIndicator
                )
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbMaterial m
                        ON ms.idfMonitoringSession = m.idfMonitoringSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537008
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          );
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND sgs.idfsSite = ms.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            (
                ID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator
            )
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = ID
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis MSD
                    ON MSD.idfMonitoringSession = ms.idfMonitoringSession
                       AND MSD.intRowStatus = 0
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
				INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
					ON LH.idfsLocation = ms.idfsLocation
            WHERE ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          MSD.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (ms.datEnteredDate
                  BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 AND @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                          OR @LegacySessionID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;

        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis MSD
                                ON MSD.idfMonitoringSession = ms.idfMonitoringSession
                                   AND MSD.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = MSD.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE oa.intPermission = 1
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        (
            ID,
            ReadPermissionIndicator,
            AccessToPersonalDataPermissionIndicator,
            AccessToGenderAndAgeDataPermissionIndicator,
            WritePermissionIndicator,
            DeletePermissionIndicator
        )
        SELECT ms.idfMonitoringSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMonitoringSession ms
            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis MSD
                ON MSD.idfMonitoringSession = ms.idfMonitoringSession
                   AND MSD.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = MSD.idfsDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ms.idfsLocation
			INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
					ON LH.idfsLocation = ms.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND ms.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
              AND (
                      ms.idfCampaign = @CampaignKey
                      OR @CampaignKey IS NULL
                  )
              AND (
                      ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                      OR @SessionStatusTypeID IS NULL
                  )
              AND (
                      MSD.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (ms.datEnteredDate
              BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             AND @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                      OR @CampaignID IS NULL
                  )
              AND (
                      LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                      OR @LegacySessionID IS NULL
                  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis MSD
                ON MSD.idfMonitoringSession = ms.idfMonitoringSession
                   AND MSD.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = MSD.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        (
            ID,
            ReadPermissionIndicator,
            AccessToPersonalDataPermissionIndicator,
            AccessToGenderAndAgeDataPermissionIndicator,
            WritePermissionIndicator,
            DeletePermissionIndicator
        )
        SELECT ms.idfMonitoringSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMonitoringSession ms
            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis MSD
                ON MSD.idfMonitoringSession = ms.idfMonitoringSession
                   AND MSD.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = MSD.idfsDiagnosis
                   AND oa.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ms.idfsLocation
			INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
					ON LH.idfsLocation = ms.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND ms.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND ms.SessionCategoryID = 10502001 -- Human Active Surveillance Session
              AND (
                      ms.idfCampaign = @CampaignKey
                      OR @CampaignKey IS NULL
                  )
              AND (
                      ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                      OR @SessionStatusTypeID IS NULL
                  )
              AND (
                      MSD.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (ms.datEnteredDate
              BETWEEN @DateEnteredFrom AND DATEADD(DAY, 1, @DateEnteredTo)
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             AND @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                      OR @CampaignID IS NULL
                  )
              AND (
                      ms.LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                      OR @LegacySessionID IS NULL
                  );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            INNER JOIN dbo.tlbMonitoringSessionToDiagnosis MSD
                                ON MSD.idfMonitoringSession = ms.idfMonitoringSession
                                   AND MSD.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = MSD.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE oa.intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = @UserEmployeeID
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator;

        WITH paging
        AS (SELECT ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = res.ID
				INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH ON LH.idfsLocation = ms.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000117) sessionStatus
                    ON sessionStatus.idfsReference = ms.idfsMonitoringSessionStatus
            ORDER BY CASE
                         WHEN @SortColumn = 'SessionID'
                              AND @SortOrder = 'ASC' THEN
                             ms.strMonitoringSessionID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SessionID'
                              AND @SortOrder = 'DESC' THEN
                             ms.strMonitoringSessionID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'SessionStatusTypeName'
                              AND @SortOrder = 'ASC' THEN
                             sessionStatus.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SessionStatusTypeName'
                              AND @SortOrder = 'DESC' THEN
                             sessionStatus.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'ASC' THEN
                             ms.datEnteredDate
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'DESC' THEN
                             ms.datEnteredDate
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel1Name'
                              AND @SortOrder = 'ASC' THEN
                             LH.AdminLevel1Name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel1Name'
                              AND @SortOrder = 'DESC' THEN
                             LH.AdminLevel1Name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel2Name'
                              AND @SortOrder = 'ASC' THEN
                             LH.AdminLevel2Name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel2Name'
                              AND @SortOrder = 'DESC' THEN
                             LH.AdminLevel2Name
                     END DESC,
					 CASE
                         WHEN @SortColumn = 'AdministrativeLevel3Name'
                              AND @SortOrder = 'ASC' THEN
                             LH.AdminLevel2Name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel3Name'
                              AND @SortOrder = 'DESC' THEN
                             LH.AdminLevel2Name
                     END DESC,
					 CASE
                         WHEN @SortColumn = 'AdministrativeLevel4Name'
                              AND @SortOrder = 'ASC' THEN
                             LH.AdminLevel2Name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AdministrativeLevel4Name'
                              AND @SortOrder = 'DESC' THEN
                             LH.AdminLevel2Name
                     END DESC OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
           ),

		   SITEID AS
		   (
			SELECT DISTINCT
				   ms.idfsSite AS SiteID
			FROM @FinalResults res
				INNER JOIN paging
					ON paging.ID = res.ID
				INNER JOIN dbo.tlbMonitoringSession ms
					ON ms.idfMonitoringSession = paging.ID
				CROSS APPLY
				(
					SELECT dbo.FN_GBL_SESSION_DISEASEIDS_GET(ms.idfMonitoringSession) diseaseIDs
				) diseaseIDs
					CROSS APPLY
				(
					SELECT dbo.FN_GBL_SESSION_DISEASE_NAMES_GET(ms.idfMonitoringSession, @LanguageID) diseaseNames
				) diseaseNames
				INNER JOIN dbo.tstSite siteName
					ON siteName.idfsSite = ms.idfsSite
				LEFT JOIN dbo.tlbCampaign c
					ON c.idfCampaign = ms.idfCampaign
					   AND c.intRowStatus = 0
				LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000117) sessionStatus
					ON sessionStatus.idfsReference = ms.idfsMonitoringSessionStatus
				INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
					ON LH.idfsLocation = ms.idfsLocation
				LEFT JOIN dbo.tlbPerson p
					ON p.idfPerson = ms.idfPersonEnteredBy
			)

 
		SELECT @SiteIDs = STRING_AGG(CAST(SiteID AS NVARCHAR(24)), ',') 
		FROM SITEID

    END TRY
    BEGIN CATCH

    END CATCH;
END
GO
PRINT N'Creating Procedure [dbo].[USP_HUM_DISEASE_REPORT_GETList_AVR]...';


GO
-- ================================================================================================
-- Name: USP_HUM_DISEASE_REPORT_GETList
--
-- Description: Get a list of human disease reports for the human module.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/26/2018 Added the person reported by name for the farm use case.
-- JWJ	            04/17/2018 Added extra col to return:  tlbHuman.idfHumanActual. Added alias 
--                             for region rayon to make them unique in results added report status 
--                             to results 
-- Harold Pryor     10/22/2018 Added input search parameters SearchStrPersonFirstName, 
--                             SearchStrPersonMiddleName, and SearchStrPersonLastName
-- Harold Pryor     10/31/2018 Added input search parameters SearchLegacyCaseID and	
--                             added strLocation (region, rayon) field to list result set
-- Harold Pryor     11/12/2018 Changed @SearchLegacyCaseID parameter from BIGINT to NVARCHAR(200)
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     07/07/2019 Added monitoring session ID to parameters and where clause.
-- Stephen Long     07/10/2019 Changed address join from exposure location to patient's current 
--                             residence address.
-- Stephen Long     07/19/2019 Corrected patient name and person entered by name ', '.
-- Stephen Long     02/26/2020 Added non-configurable site filtration rules.
-- Lamont Mitchell  03/03/2020 Modified all joins on human case and human to join on human actual.
-- Stephen Long     04/01/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Corrected the join on the rayon of the report current residence 
--                             address (human ID to human ID instead of human ID to human actual 
--                             ID).
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	11/16/2020 Added Outbreak Tied filtering
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2020 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     04/04/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	09/23/2021 Added HospitalizationStatus field
-- Stephen Long     11/03/2021 Added disease ID field.
-- Mike Kornegay	11/16/2021 Fix hospitalization field for translations
-- Mike Kornegay	12/07/2021 Added back EnteredByPersonName 
-- Mike Kornegay	12/08/2021 Swapped out FN_GBL_GIS_ReferenceRepair for new flat hierarchy
-- Mike Kornegay	12/23/2021 Fixed YN hospitalization where clause
-- Manickandan Govindarajan 03/21/2022  Rename Param PageNumber to Page
-- Stephen Long     03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay    06/06/2022 Added parameter OutcomeID.
-- Mike Kornegay	06/13/2022 Changed inner joins to left joins in final query because result set 
--                             was incorrect.
-- Stephen Long     08/14/2022 Added additional criteria for outbreak cases for laboratory module.
--                             TODO: replace filter outbreak cases parameter, and just filter in 
--                             the initial query to avoid getting extra unneeded records; also just 
--                             make it a boolean value.
-- Mark Wilson      09/01/2022 update to use denormalized locations to work with site filtration.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/11/2022 Move order by back to CTE row partition for performance and add 
--                             LanguageID to default filtration rule joins.
-- Stephen Long     11/02/2022 Fixes for 4599 - site filtration returning the wrong results.
-- Stephen Long     11/09/2022 Fix on where criteria when filtration is run; added groupings for 
--                             the user entered parameters from the search criteria page.
-- Edgard Torres	11/07/2022 Modified version of USP_HUM_DISEASE_REPORT_GETList 
--							   to return comma delimeted SiteIDs 
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US'
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US', @EIDSSReportID = 'H'
-- ================================================================================================
CREATE   PROCEDURE [dbo].[USP_HUM_DISEASE_REPORT_GETList_AVR]
    @LanguageID NVARCHAR(50),
    @ReportKey BIGINT = NULL,
    @ReportID NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @SessionKey BIGINT = NULL,
    @PatientID BIGINT = NULL,
    @PersonID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @ReportStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @HospitalizationYNID BIGINT = NULL,
    @PatientFirstName NVARCHAR(200) = NULL,
    @PatientMiddleName NVARCHAR(200) = NULL,
    @PatientLastName NVARCHAR(200) = NULL,
    @SentByFacilityID BIGINT = NULL,
    @ReceivedByFacilityID BIGINT = NULL,
    @DiagnosisDateFrom DATETIME = NULL,
    @DiagnosisDateTo DATETIME = NULL,
    @LocalOrFieldSampleID NVARCHAR(200) = NULL,
    @DataEntrySiteID BIGINT = NULL,
    @DateOfSymptomsOnsetFrom DATETIME = NULL,
    @DateOfSymptomsOnsetTo DATETIME = NULL,
    @NotificationDateFrom DATETIME = NULL,
    @NotificationDateTo DATETIME = NULL,
    @DateOfFinalCaseClassificationFrom DATETIME = NULL,
    @DateOfFinalCaseClassificationTo DATETIME = NULL,
    @LocationOfExposureAdministrativeLevelID BIGINT = NULL,
    @OutcomeID BIGINT = NULL,
    @FilterOutbreakTiedReports INT = 0,
    @OutbreakCasesIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @Page INT = 1,
    @PageSize INT = 10,
	@SiteIDs NVARCHAR(MAX) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT,
            @lastRec INT,
            @FiltrationSiteAdministrativeLevelID AS BIGINT, 
            @LanguageCode AS BIGINT = dbo.FN_GBL_LanguageCode_GET(@LanguageID);
    SET @firstRec = (@Page - 1) * @PageSize
    SET @lastRec = (@Page * @PageSize + 1);

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = @LanguageCode
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = @LanguageCode
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase;
        END
        ELSE
        BEGIN -- Site Filtration
            DECLARE @InitialFilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            INSERT INTO @InitialFilteredResults
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
            WHERE hc.intRowStatus = 0
                  AND hc.idfsSite = @UserSiteID;

            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM @InitialFilteredResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = @LanguageCode
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = @LanguageCode
            WHERE hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase;

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply active default site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537000;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537000;

                SELECT @FiltrationSiteAdministrativeLevelID = CASE
                                                                  WHEN @AdministrativeLevelTypeID = 1 THEN
                                                                      g.Level1ID
                                                                  WHEN @AdministrativeLevelTypeID = 2 THEN
                                                                      g.Level2ID
                                                                  WHEN @AdministrativeLevelTypeID = 3 THEN
                                                                      g.Level3ID
                                                                  WHEN @AdministrativeLevelTypeID = 4 THEN
                                                                      g.Level4ID
                                                                  WHEN @AdministrativeLevelTypeID = 5 THEN
                                                                      g.Level5ID
                                                                  WHEN @AdministrativeLevelTypeID = 6 THEN
                                                                      g.Level6ID
                                                                  WHEN @AdministrativeLevelTypeID = 7 THEN
                                                                      g.Level7ID
                                                              END
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                WHERE o.intRowStatus = 0
                      AND o.idfOffice = @UserOrganizationID;

                -- Administrative level specified in the rule of the site where the report was created.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tstSite s
                        ON h.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                           AND o.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )

                -- Administrative level specified in the rule of the report current residence address.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbHuman hu
                        ON hu.idfHuman = h.idfHuman
                           AND hu.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )

                -- Administrative level specified in the rule of the report location of exposure, 
                -- if corresponding field was filled in.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfPointGeoLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )
            END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            --
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            ----
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          ha.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        IF @FilterOutbreakTiedReports = 1
        BEGIN
            DELETE I
            FROM @Results I
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = I.ID
            WHERE hc.idfOutbreak IS NOT NULL;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT h.idfHumanCase
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = h.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
                   AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
                   AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                      g.Level1ID = @AdministrativeLevelID
                      OR g.Level2ID = @AdministrativeLevelID
                      OR g.Level3ID = @AdministrativeLevelID
                      OR g.Level4ID = @AdministrativeLevelID
                      OR g.Level5ID = @AdministrativeLevelID
                      OR g.Level6ID = @AdministrativeLevelID
                      OR g.Level7ID = @AdministrativeLevelID
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
              AND (
                      g.Level1ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                      OR @LocationOfExposureAdministrativeLevelID IS NULL
                  )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
                      (
                          hc.idfOutbreak IS NULL
                          AND @OutbreakCasesIndicator = 0
                      )
                      OR (
                             hc.idfOutbreak IS NOT NULL
                             AND @OutbreakCasesIndicator = 1
                         )
                      OR (@OutbreakCasesIndicator IS NULL)
                  )
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
              AND (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
                   AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
                   AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                      g.Level1ID = @AdministrativeLevelID
                      OR g.Level2ID = @AdministrativeLevelID
                      OR g.Level3ID = @AdministrativeLevelID
                      OR g.Level4ID = @AdministrativeLevelID
                      OR g.Level5ID = @AdministrativeLevelID
                      OR g.Level6ID = @AdministrativeLevelID
                      OR g.Level7ID = @AdministrativeLevelID
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
              AND (
                      g.Level1ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                      OR @LocationOfExposureAdministrativeLevelID IS NULL
                  )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
                      (
                          hc.idfOutbreak IS NULL
                          AND @OutbreakCasesIndicator = 0
                      )
                      OR (
                             hc.idfOutbreak IS NOT NULL
                             AND @OutbreakCasesIndicator = 1
                         )
                      OR (@OutbreakCasesIndicator IS NULL)
                  )
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
              AND (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase;

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND idfActor = @UserEmployeeID
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;


        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.strCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.strCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.datEnteredDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.datEnteredDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                                                       + ISNULL(' ' + h.strSecondName, N'')
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                                                       + ISNULL(' ' + h.strSecondName, N'')
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonLocation'
                                                        AND @SortOrder = 'ASC' THEN
                                               (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonLocation'
                                                        AND @SortOrder = 'DESC' THEN
                                               (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       finalClassification.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       finalClassification.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       reportStatus.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       reportStatus.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.LegacyCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.LegacyCaseID
                                               END DESC
                                     ) AS ROWNUM,
                   hc.idfsSite AS SiteID
            FROM @FinalResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                       AND haai.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
                    ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                    ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                    ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType
                    ON reportType.idfsReference = hc.DiseaseReportTypeID
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000041) hospitalization
                    ON hospitalization.idfsReference = idfsHospitalizationStatus
                LEFT JOIN dbo.tlbPerson p
                    ON p.idfPerson = hc.idfPersonEnteredBy
                       AND p.intRowStatus = 0
           ),

		   SITEID AS
		   (
				SELECT
					DISTINCT siteID
				FROM paging

			)

 
		SELECT @SiteIDs = STRING_AGG(CAST(SiteID AS NVARCHAR(24)), ',') 
		FROM SITEID

    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Creating Procedure [dbo].[USP_HUM_DISEASE_REPORT_GETList_MJK101122]...';


GO
-- ================================================================================================
-- Name: USP_HUM_DISEASE_REPORT_GETList
--
-- Description: Get a list of human disease reports for the human module.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/26/2018 Added the person reported by name for the farm use case.
-- JWJ	            04/17/2018 Added extra col to return:  tlbHuman.idfHumanActual. Added alias 
--                             for region rayon to make them unique in results added report status 
--                             to results 
-- Harold Pryor     10/22/2018 Added input search parameters SearchStrPersonFirstName, 
--                             SearchStrPersonMiddleName, and SearchStrPersonLastName
-- Harold Pryor     10/31/2018 Added input search parameters SearchLegacyCaseID and	
--                             added strLocation (region, rayon) field to list result set
-- Harold Pryor     11/12/2018 Changed @SearchLegacyCaseID parameter from BIGINT to NVARCHAR(200)
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     07/07/2019 Added monitoring session ID to parameters and where clause.
-- Stephen Long     07/10/2019 Changed address join from exposure location to patient's current 
--                             residence address.
-- Stephen Long     07/19/2019 Corrected patient name and person entered by name ', '.
-- Stephen Long     02/26/2020 Added non-configurable site filtration rules.
-- Lamont Mitchell  03/03/2020 Modified all joins on human case and human to join on human actual.
-- Stephen Long     04/01/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Corrected the join on the rayon of the report current residence 
--                             address (human ID to human ID instead of human ID to human actual 
--                             ID).
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	11/16/2020 Added Outbreak Tied filtering
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2020 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     04/04/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	09/23/2021 Added HospitalizationStatus field
-- Stephen Long     11/03/2021 Added disease ID field.
-- Mike Kornegay	11/16/2021 Fix hospitalization field for translations
-- Mike Kornegay	12/07/2021 Added back EnteredByPersonName 
-- Mike Kornegay	12/08/2021 Swapped out FN_GBL_GIS_ReferenceRepair for new flat hierarchy
-- Mike Kornegay	12/23/2021 Fixed YN hospitalization where clause
-- Manickandan Govindarajan 03/21/2022  Rename Param PageNumber to Page
-- Stephen Long     03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay    06/06/2022 Added parameter OutcomeID.
-- Mike Kornegay	06/13/2022 Changed inner joins to left joins in final query because result set 
--                             was incorrect.
-- Stephen Long     08/14/2022 Added additional criteria for outbreak cases for laboratory module.
--                             TODO: replace filter outbreak cases parameter, and just filter in 
--                             the initial query to avoid getting extra unneeded records; also just 
--                             make it a boolean value.
-- Mark Wilson      09/01/2022 update to use denormalized locations to work with site filtration.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US'
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US', @EIDSSReportID = 'H'
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_HUM_DISEASE_REPORT_GETList_MJK101122]
    @LanguageID NVARCHAR(50),
    @ReportKey BIGINT = NULL,
    @ReportID NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @SessionKey BIGINT = NULL,
    @PatientID BIGINT = NULL,
    @PersonID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @ReportStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @HospitalizationYNID BIGINT = NULL,
    @PatientFirstName NVARCHAR(200) = NULL,
    @PatientMiddleName NVARCHAR(200) = NULL,
    @PatientLastName NVARCHAR(200) = NULL,
    @SentByFacilityID BIGINT = NULL,
    @ReceivedByFacilityID BIGINT = NULL,
    @DiagnosisDateFrom DATETIME = NULL,
    @DiagnosisDateTo DATETIME = NULL,
    @LocalOrFieldSampleID NVARCHAR(200) = NULL,
    @DataEntrySiteID BIGINT = NULL,
    @DateOfSymptomsOnsetFrom DATETIME = NULL,
    @DateOfSymptomsOnsetTo DATETIME = NULL,
    @NotificationDateFrom DATETIME = NULL,
    @NotificationDateTo DATETIME = NULL,
    @DateOfFinalCaseClassificationFrom DATETIME = NULL,
    @DateOfFinalCaseClassificationTo DATETIME = NULL,
    @LocationOfExposureAdministrativeLevelID BIGINT = NULL,
    @OutcomeID BIGINT = NULL,
    @FilterOutbreakTiedReports INT = 0,
    @OutbreakCasesIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @Page INT = 1,
    @PageSize INT = 10
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @AdministrativeLevelNode AS HIERARCHYID,
            @LocationOfExposureLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        IF @LocationOfExposureAdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @LocationOfExposureLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @LocationOfExposureAdministrativeLevelID;
        END;

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
--------------------------------------------------------------------------------------------------------------------
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                 AND  (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase
            OPTION (RECOMPILE);
        END
        ELSE
        BEGIN -- Site Filtration
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
            1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tlbHuman h ON h.idfHuman = hc.idfHuman AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m ON m.idfHumanCase = hc.idfHumanCase AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure ON gExposure.idfsLocation = exposure.idfsLocation
            
			WHERE hc.intRowStatus = 0
            AND hc.idfsSite = @UserSiteID
            AND hc.idfsFinalDiagnosis IS NOT NULL
            AND (hc.idfHumanCase = @ReportKey OR @ReportKey IS NULL)
            AND (hc.idfParentMonitoringSession = @SessionKey OR @SessionKey IS NULL)
            AND (h.idfHumanActual = @PatientID OR @PatientID IS NULL)
            AND (h.strPersonId = @PersonID OR @PersonID IS NULL)
            AND (idfsFinalDiagnosis = @DiseaseID OR @DiseaseID IS NULL)
            AND (idfsCaseProgressStatus = @ReportStatusTypeID OR @ReportStatusTypeID IS NULL)
            AND (
                    g.Level1ID = @AdministrativeLevelID
					OR g.Level2ID = @AdministrativeLevelID
					OR g.Level3ID = @AdministrativeLevelID
					OR g.Level4ID = @AdministrativeLevelID
					OR g.Level5ID = @AdministrativeLevelID
					OR g.Level6ID = @AdministrativeLevelID
					OR g.Level7ID = @AdministrativeLevelID
					OR @AdministrativeLevelID IS NULL
                )
            AND (
                    (CAST(hc.datEnteredDate AS DATE)
            BETWEEN @DateEnteredFrom AND @DateEnteredTo
                    )
                    OR (
                            @DateEnteredFrom IS NULL
                            OR @DateEnteredTo IS NULL
                        )
                )
            AND (
                    (CAST(hc.datFinalDiagnosisDate AS DATE)
            BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                    )
                    OR (
                            @DiagnosisDateFrom IS NULL
                            OR @DiagnosisDateTo IS NULL
                        )
                )
            AND (
                    (CAST(hc.datNotificationDate AS DATE)
            BETWEEN @NotificationDateFrom AND @NotificationDateTo
                    )
                    OR (
                            @NotificationDateFrom IS NULL
                            OR @NotificationDateTo IS NULL
                        )
                )
            AND (
                    (CAST(hc.datOnSetDate AS DATE)
            BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                    )
                    OR (
                            @DateOfSymptomsOnsetFrom IS NULL
                            OR @DateOfSymptomsOnsetTo IS NULL
                        )
                )
            AND (
                    (CAST(hc.datFinalCaseClassificationDate AS DATE)
            BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                    )
                    OR (
                            @DateOfFinalCaseClassificationFrom IS NULL
                            OR @DateOfFinalCaseClassificationTo IS NULL
                        )
                )
            AND (
                    hc.idfReceivedByOffice = @ReceivedByFacilityID
                    OR @ReceivedByFacilityID IS NULL
                )
            AND (
                    hc.idfSentByOffice = @SentByFacilityID
                    OR @SentByFacilityID IS NULL
                )
            AND (
                    idfsFinalCaseStatus = @ClassificationTypeID
                    OR @ClassificationTypeID IS NULL
                )
            AND (
                    idfsYNHospitalization = @HospitalizationYNID
                    OR @HospitalizationYNID IS NULL
                )
            AND (
                    g.Level1ID = @LocationOfExposureAdministrativeLevelID
					OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
					OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
					OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
					OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
					OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
					OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
					OR @LocationOfExposureAdministrativeLevelID IS NULL
                )
            AND (
                    (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                    WHEN '' THEN
                                                        ISNULL(h.strFirstName, '')
                                                    ELSE
                                                        @PatientFirstName
                                                END
                    )
                    OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                )
            AND (
                    (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strSecondName, '')
                                                        ELSE
                                                            @PatientMiddleName
                                                    END
                    )
                    OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                )
            AND (
                    (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                    WHEN '' THEN
                                                        ISNULL(h.strLastName, '')
                                                    ELSE
                                                        @PatientLastName
                                                END
                    )
                    OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                )
            AND (
                    hc.idfsSite = @DataEntrySiteID
                    OR @DataEntrySiteID IS NULL
                )
            AND (
			(
				hc.idfOutbreak IS NULL
				AND @OutbreakCasesIndicator = 0
				)
			OR (
				hc.idfOutbreak IS NOT NULL
				AND @OutbreakCasesIndicator = 1
				)
			OR (@OutbreakCasesIndicator IS NULL)
			)
            AND (
                    hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                    OR @ReportID IS NULL
                )
            AND (
                    hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                    OR @LegacyReportID IS NULL
                )
            AND (
                    m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                    OR @LocalOrFieldSampleID IS NULL
                )
            AND  (
                    hc.idfsOutcome = @OutcomeID
            OR @OutcomeID IS NULL
                )
            GROUP BY hc.idfHumanCase
            OPTION (RECOMPILE);

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply active default site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537000;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537000;
				
                SELECT @AdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared AS l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           --AND g.intRowStatus = 0
                WHERE o.idfOffice = @UserOrganizationID
                AND 
				(
					g.Level1ID = @AdministrativeLevelID OR
					g.Level2ID = @AdministrativeLevelID OR
					g.Level3ID = @AdministrativeLevelID OR
					g.Level4ID = @AdministrativeLevelID OR
					g.Level5ID = @AdministrativeLevelID OR
					g.Level6ID = @AdministrativeLevelID OR
					g.Level7ID = @AdministrativeLevelID OR
					@AdministrativeLevelID IS NULL 
				)


                -- Administrative level specified in the rule of the site where the report was created.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tstSite s
                        ON h.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                           AND o.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = l.idfsLocation  --AND g.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                AND 
				(
                    g.Level1ID = @AdministrativeLevelID
					OR g.Level2ID = @AdministrativeLevelID
					OR g.Level3ID = @AdministrativeLevelID
					OR g.Level4ID = @AdministrativeLevelID
					OR g.Level5ID = @AdministrativeLevelID
					OR g.Level6ID = @AdministrativeLevelID
					OR g.Level7ID = @AdministrativeLevelID
					OR @AdministrativeLevelID IS NULL
               )


                -- Administrative level specified in the rule of the report current residence address.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbHuman hu
                        ON hu.idfHuman = h.idfHuman
                           AND hu.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                         --  AND g.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                AND 
				(
                    g.Level1ID = @AdministrativeLevelID
					OR g.Level2ID = @AdministrativeLevelID
					OR g.Level3ID = @AdministrativeLevelID
					OR g.Level4ID = @AdministrativeLevelID
					OR g.Level5ID = @AdministrativeLevelID
					OR g.Level6ID = @AdministrativeLevelID
					OR g.Level7ID = @AdministrativeLevelID
					OR @AdministrativeLevelID IS NULL
				)

                -- Administrative level specified in the rule of the report location of exposure, 
                -- if corresponding field was filled in.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfPointGeoLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           --AND g.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                  AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )
            END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            --
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                 AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          ha.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )

                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                 AND  (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator
            OPTION (RECOMPILE);
        END;


        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        IF @FilterOutbreakTiedReports = 1
        BEGIN
            DELETE I
            FROM @Results I
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = I.ID
            WHERE hc.idfOutbreak IS NOT NULL;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
		
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT h.idfHumanCase
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = h.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )

              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                 OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
             AND  (
                     hc.idfsOutcome = @OutcomeID
                     OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )
              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
       AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
             AND  (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND idfActor = @UserEmployeeID
        );
		
        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;

		
        WITH paging
        AS (SELECT ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                    ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                    ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
            ORDER BY CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'ASC' THEN
                             hc.strCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'DESC' THEN
                             hc.strCaseID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'ASC' THEN
                             hc.datEnteredDate
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'DESC' THEN
                             hc.datEnteredDate
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'ASC' THEN
                             disease.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'DESC' THEN
                             disease.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PersonName'
                              AND @SortOrder = 'ASC' THEN
                             ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                             + ISNULL(' ' + h.strSecondName, N'')
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PersonName'
                              AND @SortOrder = 'DESC' THEN
                             ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                             + ISNULL(' ' + h.strSecondName, N'')
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'ASC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'DESC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'ASC' THEN
                             finalClassification.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'DESC' THEN
                             finalClassification.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'ReportStatusTypeName'
                              AND @SortOrder = 'ASC' THEN
                             reportStatus.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ReportStatusTypeName'
                              AND @SortOrder = 'DESC' THEN
                             reportStatus.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'LegacyReportID'
                              AND @SortOrder = 'ASC' THEN
                             hc.LegacyCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'LegacyReportID'
                              AND @SortOrder = 'DESC' THEN
                             hc.LegacyCaseID
                     END DESC OFFSET @PageSize * (@Page - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
     )
        SELECT res.ID AS ReportKey,
               hc.strCaseId AS ReportID,
               hc.LegacyCaseID AS LegacyReportID,
               reportStatus.name AS ReportStatusTypeName,
               reportType.name AS ReportTypeName,
               hc.datTentativeDiagnosisDate AS TentativeDiagnosisDate,
               hc.datFinalDiagnosisDate AS FinalDiagnosisDate,
               ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
               finalClassification.name AS FinalClassificationTypeName,
               hc.datOnSetDate AS DateOfOnset,
               hc.idfsFinalDiagnosis AS DiseaseID,
               disease.Name AS DiseaseName,
               h.idfHumanActual AS PersonMasterID,
               hc.idfHuman AS PersonKey,
               haai.EIDSSPersonID AS PersonID,
               h.strPersonID AS PersonalID,
               dbo.FN_GBL_ConcatFullName(h.strLastName, h.strFirstName, h.strSecondName) AS PersonName,
               ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
               + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
               ha.strEmployerName AS EmployerName,
               hc.datEnteredDate AS EnteredDate,
               ISNULL(p.strFamilyName, N'') + ISNULL(', ' + p.strFirstName, N'') + ISNULL(' ' + p.strSecondName, N'') AS EnteredByPersonName,
               hc.datModificationDate AS ModificationDate,
               ISNULL(hospitalization.name, hospitalization.strDefault) AS HospitalizationStatus,
               hc.idfsSite AS SiteID,
               res.ReadPermissionIndicator,
               res.AccessToPersonalDataPermissionIndicator,
               res.AccessToGenderAndAgeDataPermissionIndicator,
               res.WritePermissionIndicator,
               res.DeletePermissionIndicator,
               c AS RecordCount,
               (
                   SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
               ) AS TotalCount,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0),
               CurrentPage = @Page,
               LH.AdminLevel2Name Region,
			   LH.AdminLevel3Name Rayon
        FROM @FinalResults res
            INNER JOIN paging
                ON paging.ID = res.ID
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbHumanActual ha
                ON ha.idfHumanActual = h.idfHumanActual
                   AND ha.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation gl
                ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
            LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                ON LH.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.HumanActualAddlInfo haai
                ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                   AND haai.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
                ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType
                ON reportType.idfsReference = hc.DiseaseReportTypeID
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000041) hospitalization
                ON hospitalization.idfsReference = idfsHospitalizationStatus
            LEFT JOIN dbo.tlbPerson p
                ON p.idfPerson = hc.idfPersonEnteredBy
                   AND p.intRowStatus = 0
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Creating Procedure [dbo].[USP_OMM_Session_GetList_AVR]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Session_GetList_AVR
--
-- Description: Get a list of outbreak sessions for the outbreak module.
--          
-- Author: Doug Albanese
--
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Lamont Mitchell 01/09/2019 Removed ReturnCode and Return Message
-- Stephen Long	   01/13/2020 Changed from strDefault to name to pick up language translation.
-- Stephen Long	   01/26/2020 Added site list parameter for site filtration.
-- Stephen Long	   05/19/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long	   11/18/2020 Added site ID to the query.
-- Stephen Long	   11/27/2020 Added configurable site filtration rules.
-- Stephen Long	   12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long	   12/24/2020 Modified join on disease filtration default role rule.  Changed 
--                            function call to bring back inactive outbreak status and type to 
--                            handle v6.1 data that has been made obsolete.
-- Stephen Long	   12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long	   04/04/2021 Added updated pagination and location hierarchy.
-- Stephen Long	   08/16/2021 Added gisLocation and location joins where IsDescendent is called.
-- Doug Albanese   11/17/2021 Fixed the default range for returning Outbreak for the past year only.
-- Doug Albanese   12/03/2021 Integrated the new FN_GBL_LocationHierarchy_Flattened for use with 
--                             the Location Hierarchy
-- Stephen Long    03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Doug Albanese   05/16/2022 Corrected Date Range, when not passed. This causes other searches 
--                             not to work well.
-- Stephen Long    06/03/2022 Updated to point default access rules to base reference.
-- Edgard Torres   11/17/2022 Modified version of USP_OMM_Session_GetList 
--							  to return comma delimeted SiteIDs 
--
-- exec [dbo].[USP_OMM_Session_GetList] @LanguageId= 'en-us', @UserSiteId = 0, @UserOrganizationID = 0, @UserEmployeeId = 0
-- ================================================================================================
CREATE     PROCEDURE [dbo].[USP_OMM_Session_GetList_AVR]
(
    @LanguageID NVARCHAR(50),
    @OutbreakID NVARCHAR(200) = NULL,
    @OutbreakTypeID BIGINT = NULL,
    @SearchDiagnosesGroup BIGINT = NULL,
    @StartDateFrom DATETIME = NULL,
    @StartDateTo DATETIME = NULL,
    @OutbreakStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @QuickSearch NVARCHAR(200) = '',
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'OutbreakID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10,
	@SiteIDs NVARCHAR(MAX) OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;

    IF @StartDateFrom IS NULL
       or @StartDateFrom = NULL
    BEGIN
        SET @StartDateFrom = CAST(CAST(CAST(0xD1BA AS BIGINT) * -1 AS DATETIME) AS DATE)
    END

    IF @StartDateTo IS NULL
       OR @StartDateTo = NULL
    BEGIN
        SET @StartDateTo = CAST(CAST(CAST(0x2D247f AS BIGINT) AS DATETIME) AS DATE)
    END

    DECLARE @firstRec INT
    DECLARE @lastRec INT
    SET @firstRec = (@PageNumber - 1) * @pagesize
    SET @lastRec = (@PageNumber * @pageSize + 1)

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    DECLARE @RuleActiveStatus INT = 0;
    DECLARE @AdministrativeLevelTypeID INT;
    DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
    DECLARE @DefaultAccessRules AS TABLE
    (
        AccessRuleID BIGINT NOT NULL,
        ActiveIndicator INT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL,
        AdministrativeLevelTypeID INT NULL
    );

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FilteredResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    -- Set defaults for invalid passed parameters
    IF (@StartDateFrom IS NULL)
    BEGIN
        SET @StartDateFrom = DATEADD(day, -365, GETDATE())
    END

    IF (@StartDateTo IS NULL)
    BEGIN
        SET @StartDateTo = GETDATE()
    END

    BEGIN TRY
        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        IF @QuickSearch = ''
           OR @QuickSearch IS NULL
        BEGIN
            -- ========================================================================================
            -- NO SITE FILTRATION RULES APPLIED
            --
            -- For first and second level sites, do not apply any site filtration rules.
            -- ========================================================================================
            IF @ApplySiteFiltrationIndicator = 0
            BEGIN
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup -- DISEASE
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus --STATUS...
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.datStartDate
                      BETWEEN @StartDateFrom AND @StartDateTo
                      AND (
                              (o.OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                      WHEN '' THEN
                                                          OutbreakTypeID
                                                      ELSE
                                                          @OutbreakTypeID
                                                  END
                              )
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              (o.idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                          WHEN '' THEN
                                                              idfsOutbreakStatus
                                                          ELSE
                                                              @OutbreakStatusTypeID
                                                      END
                              )
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                     WHEN '' THEN
                                                                         o.idfsDiagnosisOrDiagnosisGroup
                                                                     ELSE
                                                                         @SearchDiagnosesGroup
                                                                 END
                              )
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                                  WHEN '' THEN
                                                      '%%'
                                                  ELSE
                                                      '%' + @OutbreakID + '%'
                                              END
                          );
            END
            ELSE
            BEGIN
                -- =======================================================================================
                -- CONFIGURABLE SITE FILTRATION RULES
                -- 
                -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
                -- overlap the default rules.
                -- =======================================================================================
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup -- DISEASE
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus --STATUS...
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID
                      AND o.datStartDate
                      BETWEEN @StartDateFrom AND @StartDateTo
                      AND (
                              (o.OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                      WHEN '' THEN
                                                          OutbreakTypeID
                                                      ELSE
                                                          @OutbreakTypeID
                                                  END
                              )
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              (o.idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                          WHEN '' THEN
                                                              idfsOutbreakStatus
                                                          ELSE
                                                              @OutbreakStatusTypeID
                                                      END
                              )
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                     WHEN '' THEN
                                                                         o.idfsDiagnosisOrDiagnosisGroup
                                                                     ELSE
                                                                         @SearchDiagnosesGroup
                                                                 END
                              )
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                                  WHEN '' THEN
                                                      '%%'
                                                  ELSE
                                                      '%' + @OutbreakID + '%'
                                              END
                          );

                -- =======================================================================================
                -- DEFAULT SITE FILTRATION RULES
                --
                -- Apply active default site filtration rules for third level sites.
                -- =======================================================================================
                INSERT INTO @DefaultAccessRules
                SELECT AccessRuleID,
                       a.intRowStatus,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator,
                       a.AdministrativeLevelTypeID
                FROM dbo.AccessRule a
                WHERE AccessRuleID = 10537022;

                SELECT @RuleActiveStatus = ActiveIndicator
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537022;

                IF @RuleActiveStatus = 0
                BEGIN
                    SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                    FROM @DefaultAccessRules
                    WHERE AccessRuleID = 10537022;

                    SELECT @AdministrativeLevelNode
                        = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared AS l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                    WHERE o.idfOffice = @UserOrganizationID
                          AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                    -- Administrative level specified in the rule of the site where the session was created.
                    INSERT INTO @FilteredResults
                    SELECT ob.idfOutbreak,
                           a.ReadPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           a.WritePermissionIndicator,
                           a.DeletePermissionIndicator
                    FROM dbo.tlbOutbreak ob
                        INNER JOIN dbo.tstSite s
                            ON ob.idfsSite = s.idfsSite
                        INNER JOIN dbo.tlbOffice o
                            ON o.idfOffice = s.idfOffice
                               AND o.intRowStatus = 0
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                               AND l.intRowStatus = 0
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                        INNER JOIN @DefaultAccessRules a
                            ON a.AccessRuleID = 10537022
                    WHERE ob.intRowStatus = 0
                          AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
                END;

                --
                -- Apply at the user's site group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                        ON userSiteGroup.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's employee group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's ID level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup sgs
                        ON sgs.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND sgs.idfsSite = o.idfsSite;

                -- 
                -- Apply at the user's site level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's employee group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's ID level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- Copy filtered results to results and use search criteria
                INSERT INTO @Results
                SELECT ID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator
                FROM @FilteredResults
                    INNER JOIN dbo.tlbOutbreak o
                        ON o.idfOutbreak = ID
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup -- DISEASE
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus --STATUS...
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.datStartDate
                      BETWEEN @StartDateFrom AND @StartDateTo
                      AND (
                              (o.OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                      WHEN '' THEN
                                                          OutbreakTypeID
                                                      ELSE
                                                          @OutbreakTypeID
                                                  END
                              )
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              (o.idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                          WHEN '' THEN
                                                              idfsOutbreakStatus
                                                          ELSE
                                                              @OutbreakStatusTypeID
                                                      END
                              )
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                     WHEN '' THEN
                                                                         o.idfsDiagnosisOrDiagnosisGroup
                                                                     ELSE
                                                                         @SearchDiagnosesGroup
                                                                 END
                              )
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                                  WHEN '' THEN
                                                      '%%'
                                                  ELSE
                                                      '%' + @OutbreakID + '%'
                                              END
                          )
                GROUP BY ID,
                         ReadPermissionIndicator,
                         AccessToPersonalDataPermissionIndicator,
                         AccessToGenderAndAgeDataPermissionIndicator,
                         WritePermissionIndicator,
                         DeletePermissionIndicator;
            END;

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================		
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE oa.intPermission = 1
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND oa.idfActor = -506 -- Default role
                        );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND o.intRowStatus = 0
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND o.intRowStatus = 0
                  AND oa.idfActor = @UserEmployeeID
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE intPermission = 1 -- Deny permission
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND idfActor = @UserEmployeeID
                        );
        END
        ELSE
        BEGIN
            -- ========================================================================================
            -- NO SITE FILTRATION RULES APPLIED
            --
            -- For first and second level sites, do not apply any site filtration rules.
            -- ========================================================================================
            IF @ApplySiteFiltrationIndicator = 0
            BEGIN
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    -- DISEASE
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup

                    --STATUS...
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.gisbasereference gbr
                        on gbr.idfsGISBaseReference = g.idfsLocation
                    INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                        ON LH.idfsLocation = g.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.strDefault LIKE '%' + @QuickSearch + '%'
                              OR ot.strDefault LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          );
            END
            ELSE
            BEGIN
                -- =======================================================================================
                -- CONFIGURABLE SITE FILTRATION RULES
                -- 
                -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
                -- overlap the default rules.
                -- =======================================================================================
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    -- DISEASE
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup

                    --STATUS...
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.gisbasereference gbr
                        on gbr.idfsGISBaseReference = g.idfsLocation
                    INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                        ON LH.idfsLocation = g.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.strDefault LIKE '%' + @QuickSearch + '%'
                              OR ot.strDefault LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          );

                -- =======================================================================================
                -- DEFAULT SITE FILTRATION RULES
                --
                -- Apply active default site filtration rules for third level sites.
                -- =======================================================================================
                INSERT INTO @DefaultAccessRules
                SELECT AccessRuleID,
                       a.intRowStatus,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator,
                       a.AdministrativeLevelTypeID
                FROM dbo.AccessRule a
                WHERE AccessRuleID = 10537022;

                SELECT @RuleActiveStatus = ActiveIndicator
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537022;

                IF @RuleActiveStatus = 0
                BEGIN
                    SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                    FROM @DefaultAccessRules
                    WHERE AccessRuleID = 10537022;

                    SELECT @AdministrativeLevelNode
                        = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared AS l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                    WHERE o.idfOffice = @UserOrganizationID
                          AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                    -- Administrative level specified in the rule of the site where the session was created.
                    INSERT INTO @FilteredResults
                    SELECT ob.idfOutbreak,
                           a.ReadPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           a.WritePermissionIndicator,
                           a.DeletePermissionIndicator
                    FROM dbo.tlbOutbreak ob
                        INNER JOIN dbo.tstSite s
                            ON ob.idfsSite = s.idfsSite
                        INNER JOIN dbo.tlbOffice o
                            ON o.idfOffice = s.idfOffice
                               AND o.intRowStatus = 0
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                               AND l.intRowStatus = 0
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                        INNER JOIN @DefaultAccessRules a
                            ON a.AccessRuleID = 10537022
                    WHERE ob.intRowStatus = 0
                          AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
                END;

                --
                -- Apply at the user's site group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                        ON userSiteGroup.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's employee group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's ID level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup sgs
                        ON sgs.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND sgs.idfsSite = o.idfsSite;

                -- 
                -- Apply at the user's site level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's employee group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's ID level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- Copy filtered results to results and use search criteria
                INSERT INTO @Results
                SELECT ID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator
                FROM @FilteredResults
                    INNER JOIN dbo.tlbOutbreak o
                        ON o.idfOutbreak = ID
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                        ON LH.idfsLocation = g.idfsLocation
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.strDefault LIKE '%' + @QuickSearch + '%'
                              OR ot.strDefault LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR LH.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          )
                GROUP BY ID,
                         ReadPermissionIndicator,
                         AccessToPersonalDataPermissionIndicator,
                         AccessToGenderAndAgeDataPermissionIndicator,
                         WritePermissionIndicator,
                         DeletePermissionIndicator;
            END;

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================		
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE oa.intPermission = 1
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND oa.idfActor = -506 -- Default role
                        );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus
                INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = g.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE oa.intPermission = 2 -- Allow permission
                  AND o.intRowStatus = 0
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.strDefault LIKE '%' + @QuickSearch + '%'
                          OR ot.strDefault LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus
                INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = g.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE oa.intPermission = 2 -- Allow permission
                  AND o.intRowStatus = 0
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.strDefault LIKE '%' + @QuickSearch + '%'
                          OR ot.strDefault LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR LH.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE intPermission = 1 -- Deny permission
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND idfActor = @UserEmployeeID
                        );
        END;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'OutbreakID'
                                                        AND @SortOrder = 'ASC' THEN
                                          (os.name + ' ' + o.strOutbreakID)
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakID'
                                                        AND @SortOrder = 'DESC' THEN
                                               (os.name + ' ' + o.strOutbreakID)
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       os.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       os.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ot.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ot.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel1Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel1Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel4Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel4Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel4Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel4Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel5Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel5Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel5Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel5Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel6Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel6Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel6Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel6Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel7Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel7Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel7Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel7Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       d.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       d.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       o.datStartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       o.datStartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'INIT'
                                                        AND @SortOrder = 'DESC' THEN
                                                       os.name + ' ' + o.strOutbreakID
                                               END DESC
                                     ) AS ROWNUM,
                   ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbOutbreak AS o
                    ON o.idfOutbreak = res.ID
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation AS g
                    ON g.idfsLocation = gl.idfsLocation
                INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = g.idfsLocation
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
           --            ORDER BY 
           ),

		   SITEID AS
		   (
			SELECT DISTINCT o.idfsSite AS SiteID
			FROM @FinalResults res
				INNER JOIN paging
					ON paging.ID = res.ID
				INNER JOIN dbo.tlbOutbreak o
					ON o.idfOutbreak = res.ID
				LEFT JOIN dbo.tlbGeoLocation gl
					ON o.idfGeoLocation = gl.idfGeoLocation
				INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
					ON LH.idfsLocation = gl.idfsLocation
				INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) d
					ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
				INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
					ON os.idfsReference = o.idfsOutbreakStatus
				LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
					ON ot.idfsReference = o.OutbreakTypeId
			--WHERE RowNum > @firstRec
			--	  AND RowNum < @lastRec
			--ORDER BY paging.ROWNUM
		)

 
		SELECT @SiteIDs = STRING_AGG(CAST(SiteID AS NVARCHAR(24)), ',') 
		FROM SITEID

    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Creating Procedure [dbo].[USP_VAS_MONITORING_SESSION_GETList_AVR]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_GETList_AVR
--
-- Description: Gets a list of veterinary active surveillance sessions for the veterinary module 
-- based on search criteria provided.
--
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Mandar Kulkarni            Initial release.
-- Stephen Long    06/06/2018 Added campaign ID parameter and additional where clause check.
-- Stephen Long    11/18/2018 Renamed with correct module name, and updated parameter names and 
--                            result name field names.
-- Stephen Long    12/31/2018 Added pagination logic.
-- Stephen Long    05/01/2019 Removed additional field parameters to sync with use case, and 
--                            added campaign and monitoring session ID parameters.
-- Stephen Long    06/25/2019 Corrected session category type.
-- Stephen Long    07/06/2019 Added EIDSSCampaignID to the select.
-- Stephen Long    08/28/2019 Corrected date entered from and to when null dates are passed in on 
--                            one of the dates and the other has data.
-- Stephen Long    09/13/2019 Added settlement ID parameter and where clause.
-- Stephen Long    12/18/2019 Added legacy session ID parameter and where clause.
-- Stephen Long    01/22/2020 Added site list parameter for site filtration.
-- Stephen Long    02/02/2020 Added non-configurable filtration rules.
-- Stephen Long    02/20/2020 Added additional non-configurable rules.
-- Stephen Long    03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                            non-configurable rules.
-- Stephen Long    04/17/2020 Changed join from FN_GBL_INSTITUTION to tstSite as not all sites have 
--                            organizations.
-- Stephen Long    05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long    06/22/2020 Added where criteria to the query when no site filtration is 
--                            required.
-- Stephen Long    07/07/2020 Added trim to EIDSS identifier like criteria.
-- Stephen Long    09/23/2020 Added descending to the order by clause.
-- Stephen Long    11/18/2020 Renamed organization ID and name to site ID and name.
-- Stephen Long    11/25/2020 Added configurable site filtration rules.
-- Stephen Long    12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long    12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long    12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long    01/28/2021 Added order by clause to handle user selected sorting across 
--                            pagination sets.
-- Stephen Long    04/02/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay   12/16/2021 Added tlbMonitoringSessionToDiagnosis to all joins involving 
--                            idfsDiagnosis and changed
--                            location hieararchy to use FN_GBL_LocationHierarchy_Flattened
-- Stephen Long    01/26/2022 Added the disease identifiers and names fields to the query.
-- Mike Kornegay   01/31/2022 Removed the left join on tlbMonitoringSessionToDiagnosis because it 
--                            was replaced
--							  by the new disease functions.
-- Mike Kornegay   03/10/2022 Added SessionStatusTypeID and ReportTypeID to return fields.
-- Mike Kornegay   03/20/2022 Corrected date comparisons to use binary compare instead of between.
-- Mike Kornegay   03/25/2022 Further changes to date comparisons to prevent sql overflow.
-- Stephen Long    03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Mike Kornegay   05/16/2022 Correct returned location levels to be country, region, rayon, 
--                            settlement
-- Mike Kornegay   05/19/2022 Correct location search to use node descendants instead of particular 
--                            idfsLocation
-- Stephen Long    06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay   06/13/2022 Changed ReportTypeID and ReportTypeName to point to the new SessionCategoryID - this
--							   field now stores the report type of the vet surveillance session so we do not depend 
--							   on the diagnosis list to determine type.
-- Mike Kornegay   07/27/2022 Changed CTE for paging and sorting.
-- Stephen Long    08/13/2022 Added session category type ID parameter and where criteria.
-- Stephen Long    09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay   09/24/2022 Testing stored proc change.
-- Edgard Torres   11/21/2022 Modified version of USP_VAS_MONITORING_SESSION_GETList to return comma delimeted SiteIDs 
--
-- Testing Code:
--EXEC	@return_value = [dbo].[USP_VAS_MONITORING_SESSION_GETList]
--		@LanguageID = N'en-US',
--		@SessionID = NULL,
--		@LegacySessionID = NULL,
--		@CampaignID = NULL,
--		@CampaignKey = NULL,
--		@SessionStatusTypeID = NULL,
--		@DateEnteredFrom = NULL,
--		@DateEnteredTo = NULL,
--		@AdministrativeLevelID = 349690000000,
--		@DiseaseID = NULL,
--		@UserSiteID = 1100,
--		@UserOrganizationID = 709150000000,
--		@UserEmployeeID = 155568340001298,
--		@ApplySiteFiltrationIndicator = 0,
--		@SortColumn = N'SessionID',
--		@SortOrder = N'desc',
--		@PageNumber = 1,
--		@PageSize = 10
-- ================================================================================================
CREATE   PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_GETList_AVR]
(
    @LanguageID NVARCHAR(50),
    @SessionID NVARCHAR(200) = NULL,
    @LegacySessionID NVARCHAR(50) = NULL,
    @CampaignID NVARCHAR(200) = NULL,
    @CampaignKey BIGINT = NULL,
    @SessionStatusTypeID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @SessionCategoryTypeID BIGINT = NULL, 
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'SessionID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10,
	@SiteIDs NVARCHAR(MAX) OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;

	DECLARE @firstRec INT;
	DECLARE @lastRec INT;
	SET @firstRec = (@PageNumber-1)* @PageSize
	SET @lastRec = (@PageNumber*@PageSize+1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
	IF @AdministrativeLevelID IS NOT NULL
	BEGIN
		SELECT @AdministrativeLevelNode = node
		FROM dbo.gisLocation
		WHERE idfsLocation = @AdministrativeLevelID;
	END;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
	(
		ID BIGINT NOT NULL,
	    ReadPermissionIndicator BIT NOT NULL,
	    AccessToPersonalDataPermissionIndicator BIT NOT NULL,
		AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
		WritePermissionIndicator BIT NOT NULL,
		DeletePermissionIndicator BIT NOT NULL
	);

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT ms.idfMonitoringSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMonitoringSession ms
            	--INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH ON LH.idfsLocation = ms.idfsLocation
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
				LEFT JOIN dbo.gisLocation g ON g.idfsLocation = ms.idfsLocation
            WHERE ms.intRowStatus = 0
                  AND ms.SessionCategoryID IN (10502002, 10502009) -- Veterinary Active Surveillance Session (Avian and Livestock)
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
   				AND (
					(
						CAST(ms.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (@DateEnteredFrom IS NULL
						OR
						@DateEnteredTo IS NULL
						)
					)
                  AND (
						g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
						OR @AdministrativeLevelID IS NULL
					  )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                          OR @LegacySessionID IS NULL
                      )
                  AND (
                          ms.SessionCategoryID = @SessionCategoryTypeID
                          OR @SessionCategoryTypeID IS NULL
                      )
				GROUP BY  ms.idfMonitoringSession;
        END
        ELSE
        BEGIN
        INSERT INTO @Results
            SELECT ms.idfMonitoringSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMonitoringSession ms
            	--INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH ON LH.idfsLocation = ms.idfsLocation
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
				LEFT JOIN dbo.gisLocation g ON g.idfsLocation = ms.idfsLocation
            WHERE ms.intRowStatus = 0
                  AND ms.idfsSite = @UserSiteID 
                  AND ms.SessionCategoryID IN (10502002, 10502009) -- Veterinary Active Surveillance Session
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
   				AND (
					(
						CAST(ms.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
                  AND (
						g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
						OR @AdministrativeLevelID IS NULL
					  )
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                          OR @LegacySessionID IS NULL
                      )
                  AND (
                          ms.SessionCategoryID = @SessionCategoryTypeID
                          OR @SessionCategoryTypeID IS NULL
                      )
			GROUP BY ms.idfMonitoringSession;

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply non-configurable site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL, 
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus, 
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            --
            -- Session data shall be available to all sites of the same administrative level.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537015;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537015;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the session was created.
                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tstSite s
                        ON ms.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537015
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN (10502002, 10502009) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the farm address.
                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbFarm f
                        ON f.idfMonitoringSession = ms.idfMonitoringSession
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = f.idfFarmAddress
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537015
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN (10502002, 10502009) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            --
            -- Session data is always distributed across the sites where the disease reports are 
            -- linked to the session.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537016;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbVetCase v
                        ON v.idfParentMonitoringSession = ms.idfMonitoringSession
                           AND v.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537016
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN (10502002, 10502009) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND v.idfsSite = @UserSiteID;
            END;

            --
            -- Session data shall be available to all sites' organizations connected to the particular 
            -- session where samples were transferred out.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537017;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Samples transferred collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbMaterial m
                        ON ms.idfMonitoringSession = m.idfMonitoringSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT tout
                        ON toutm.idfTransferOut = tout.idfTransferOut
                           AND tout.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537017
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN (10502002, 10502009) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND tout.idfSendToOffice = @UserOrganizationID;

                INSERT INTO @FilteredResults
                SELECT ms.idfMonitoringSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMonitoringSession ms
                    INNER JOIN dbo.tlbMaterial m
                        ON ms.idfMonitoringSession = m.idfMonitoringSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537017
                WHERE ms.intRowStatus = 0
                      AND ms.SessionCategoryID IN (10502002, 10502009) -- Veterinary Active Surveillance Session (Avian and Livestock)
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          );
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ms.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND sgs.idfsSite = ms.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ms.idfMonitoringSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbMonitoringSession ms
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ms.intRowStatus = 0
                  AND a.GrantingActorSiteID = ms.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = ID
                LEFT JOIN dbo.tlbCampaign c
                    ON c.idfCampaign = ms.idfCampaign
                       AND c.intRowStatus = 0
                LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ms.idfsLocation
            WHERE ms.SessionCategoryID IN (10502002, 10502009) -- Veterinary Active Surveillance Session (Avian and Livestock)
                  AND (
                          ms.idfCampaign = @CampaignKey
                          OR @CampaignKey IS NULL
                      )
                  AND (
                          ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                          OR @SessionStatusTypeID IS NULL
                      )
                  AND (
                          msd.idfsDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
              	AND (
					(
						CAST(ms.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
                  AND (
                          ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                          OR @CampaignID IS NULL
                      )
                  AND (
                          LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                          OR @LegacySessionID IS NULL
                      )
                  AND (
                          ms.SessionCategoryID = @SessionCategoryTypeID
                          OR @SessionCategoryTypeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = msd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE oa.intPermission = 1
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT ms.idfMonitoringSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMonitoringSession ms
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ms.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND ms.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND ms.SessionCategoryID IN (10502002, 10502009) -- Veterinary Active Surveillance Session (Avian and Livestock)
              AND (
                      ms.idfCampaign = @CampaignKey
                      OR @CampaignKey IS NULL
                  )
              AND (
                      ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                      OR @SessionStatusTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
          	AND (
					(
						CAST(ms.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
              AND (
                      ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                      OR @CampaignID IS NULL
                  )
              AND (
                      LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                      OR @LegacySessionID IS NULL
                  )
              AND (
                      ms.SessionCategoryID = @SessionCategoryTypeID
                      OR @SessionCategoryTypeID IS NULL
                  )
			GROUP BY ms.idfMonitoringSession;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = res.ID
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT ms.idfMonitoringSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMonitoringSession ms
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = msd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ms.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND ms.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND ms.SessionCategoryID IN (10502002, 10502009) -- Veterinary Active Surveillance Session (Avian and Livestock)
              AND (
                      ms.idfCampaign = @CampaignKey
                      OR @CampaignKey IS NULL
                  )
              AND (
                      ms.idfsMonitoringSessionStatus = @SessionStatusTypeID
                      OR @SessionStatusTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
            	AND (
					(
						CAST(ms.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
              AND (
                      ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      c.strCampaignID LIKE '%' + TRIM(@CampaignID) + '%'
                      OR @CampaignID IS NULL
                  )
              AND (
                      LegacySessionID LIKE '%' + TRIM(@LegacySessionID) + '%'
                      OR @LegacySessionID IS NULL
                  )
              AND (
                      ms.SessionCategoryID = @SessionCategoryTypeID
                      OR @SessionCategoryTypeID IS NULL
                  )
			GROUP BY ms.idfMonitoringSession;

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT ms.idfMonitoringSession
                        FROM dbo.tlbMonitoringSession ms
                            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = msd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND idfActor = @UserEmployeeID
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator;

		WITH paging 
		AS (SELECT ROW_NUMBER() OVER( ORDER BY 
		CASE WHEN @SortColumn = 'SessionID' AND @SortOrder = 'ASC' THEN ms.strMonitoringSessionID END ASC,
        CASE WHEN @SortColumn = 'SessionID' AND @SortOrder = 'DESC' THEN ms.strMonitoringSessionID END DESC,
        CASE WHEN @SortColumn = 'SessionStatusTypeName' AND @SortOrder = 'ASC' THEN sessionStatus.name END ASC,
        CASE WHEN @SortColumn = 'SessionStatusTypeName' AND @SortOrder = 'DESC' THEN sessionStatus.name END DESC,
        CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN ms.datEnteredDate END ASC,
        CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN ms.datEnteredDate END DESC,
        CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'ASC' THEN LH.AdminLevel2Name END ASC,
        CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'DESC' THEN LH.AdminLevel2Name END DESC,
        CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'ASC' THEN LH.AdminLevel3Name END ASC,
        CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'DESC' THEN LH.AdminLevel3Name END DESC 
         ) AS ROWNUM,
		 COUNT(*) OVER() AS RecordCount,
		 res.ID AS SessionKey,
		 ms.strMonitoringSessionID AS SessionID,
         ms.idfCampaign AS CampaignKey,
         c.strCampaignID AS CampaignID,
		 sessionStatus.idfsReference AS SessionStatusTypeID,
		 ms.SessionCategoryID as ReportTypeID,
		 ISNULL(reportType.name, reportType.strDefault) as ReportTypeName,
         sessionStatus.name AS SessionStatusTypeName,
         ms.datStartDate AS StartDate,
         ms.datEndDate AS EndDate,
         diseaseIDs.diseaseIDs AS DiseaseIdentifiers,
         diseaseNames.diseaseNames AS DiseaseNames,
         '' AS DiseaseName,
         LH.AdminLevel1Name AS AdministrativeLevel0Name,
         LH.AdminLevel2Name AS AdministrativeLevel1Name,
		 LH.AdminLevel3Name AS AdministrativeLevel2Name,
         LH.AdminLevel4Name AS SettlementName,
         ms.datEnteredDate AS EnteredDate,
         ISNULL(p.strFirstName, '') + ' ' + ISNULL(p.strFamilyName, '') AS EnteredByPersonName,
         ms.idfsSite AS SiteKey,
         s.strSiteName AS SiteName,
         res.ReadPermissionIndicator,
         res.AccessToPersonalDataPermissionIndicator,
         res.AccessToGenderAndAgeDataPermissionIndicator,
         res.WritePermissionIndicator,
         res.DeletePermissionIndicator,
         (
            SELECT COUNT(*)
            FROM dbo.tlbMonitoringSession
            WHERE intRowStatus = 0
                    AND SessionCategoryID = 10502002 -- Veterinary Avian Active Surveillance Session
					OR SessionCategoryID = 10502009 -- Veterinary Livestock Active Surveillance Session
         ) AS TotalCount
     
		FROM @FinalResults res
		INNER JOIN dbo.tlbMonitoringSession ms
            ON ms.idfMonitoringSession = res.ID
		LEFT JOIN dbo.MonitoringSessionToSampleType AS mss
			ON ms.idfMonitoringSession = mss.idfMonitoringSession
        CROSS APPLY (
            SELECT dbo.FN_GBL_SESSION_DISEASEIDS_GET(ms.idfMonitoringSession) diseaseIDs
        ) diseaseIDs
        CROSS APPLY
        (
            SELECT dbo.FN_GBL_SESSION_DISEASE_NAMES_GET(ms.idfMonitoringSession, @LanguageID) diseaseNames
        ) diseaseNames
        LEFT JOIN dbo.tstSite s
            ON s.idfsSite = ms.idfsSite
        LEFT JOIN dbo.tlbCampaign c
            ON c.idfCampaign = ms.idfCampaign
                AND c.intRowStatus = 0
        LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000117) sessionStatus
            ON sessionStatus.idfsReference = ms.idfsMonitoringSessionStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000502) AS reportType 
			ON reportType.idfsReference = ms.SessionCategoryID
        LEFT JOIN dbo.gisLocation g
            ON g.idfsLocation = ms.idfsLocation
        INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
            ON LH.idfsLocation = g.idfsLocation
        LEFT JOIN dbo.tlbPerson p
            ON p.idfPerson = ms.idfPersonEnteredBy
		WHERE ms.intRowStatus = 0
		),
		SITEID AS
		(
		        
		SELECT DISTINCT
               SiteKey
        FROM paging
		WHERE RowNum > @firstRec AND RowNum < @lastRec
		)


		SELECT @SiteIDs = STRING_AGG(CAST(SiteKey AS NVARCHAR(24)), ',') 
		FROM SITEID
	
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Creating Procedure [dbo].[USP_VCTS_Copy_DetailedCollections]...';


GO

--*************************************************************
-- Name 				: USP_VCTS_Copy_DetailedCollections
-- Description			: Create replicas of the given idfVector ids
--          
-- Author               : Doug Albanese
-- Revision History
--	Name			Date			Change Detail
--  Doug Albanese	01/21/2020		Initial Creation
-- Doug Albanese	11/5/2020		Re-worked to get the copy to associate samples and tests for the new vector.
--*************************************************************

CREATE PROCEDURE [dbo].[USP_VCTS_Copy_DetailedCollections]
(
    @idfVector								BIGINT
)

AS 

BEGIN
	DECLARE @returnCode						INT = 0 
	DECLARE	@returnMsg						NVARCHAR(max) = 'SUCCESS' 
	DECLARE @idfVectorNew					BIGINT

	DECLARE @SupressSelect TABLE
	( retrunCode INT,
		returnMsg NVARCHAR(200)
	)

	DECLARE @idfMaterials TABLE (
		idfMaterial BIGINT
	);

	DECLARE @idfTestings TABLE (
		idfTesting BIGINT,
		idfMaterial BIGINT
	);

	INSERT INTO @idfMaterials
		SELECT
			DISTINCT idfMaterial
		FROM
			tlbMaterial
		WHERE
			idfVector = @idfVector

	INSERT INTO @idfTestings
		SELECT
			DISTINCT idfTesting, idfMaterial
		FROM
			tlbTesting
		WHERE
			idfMaterial IN (
				SELECT
					idfMaterial
				FROM
					@idfMaterials
			)

	DECLARE @rowId							BIGINT
	DECLARE @idfMaterial					BIGINT
	DECLARE @idfMaterialNew					BIGINT
	DECLARE @idfVectorSurveillanceSession	BIGINT
	DECLARE @idfHostVector					BIGINT = NULL
	DECLARE @strVectorID					NVARCHAR(50)
	DECLARE @strFieldVectorID				NVARCHAR(50) = NULL
	DECLARE @idfLocation					BIGINT = NULL
	DECLARE @intElevation					BIGINT = NULL
	DECLARE @idfsSurrounding				BIGINT = NULL
	DECLARE @strGEOReferenceSources			NVARCHAR(500) = NULL
	DECLARE @idfCollectedByOffice			BIGINT
	DECLARE @idfCollectedByPerson			BIGINT = NULL
	DECLARE @datCollectionDateTime			DATETIME
	DECLARE @idfsCollectionMethod			BIGINT = NULL
	DECLARE @idfsBasisOfRecord				BIGINT = NULL
	DECLARE @idfsVectorType					BIGINT
	DECLARE @idfsVectorSubType				BIGINT
	DECLARE @intQuantity					INT
	DECLARE @idfsSex						BIGINT = NULL
	DECLARE @idfIdentIFiedByOffice			BIGINT = NULL
	DECLARE @idfIdentIFiedByPerson			BIGINT = NULL
	DECLARE @datIdentIFiedDateTime			DATETIME = NULL
	DECLARE @idfsIdentIFicationMethod		BIGINT = NULL
	DECLARE @idfObservation					BIGINT = NULL
	DECLARE @idfsDayPeriod					BIGINT = NULL
	DECLARE @strComment						NVARCHAR(500) = NULL
	DECLARE @idfsEctoparASitesCollected		BIGINT = NULL

	DECLARE @idfsSampleType 				BIGINT
	DECLARE @idfRootMaterial 				BIGINT = NULL
	DECLARE @idfParentMaterial 				BIGINT = NULL
	DECLARE @idfHuman 						BIGINT = NULL
	DECLARE @idfSpecies 					BIGINT = NULL
	DECLARE @idfAnimal 						BIGINT = NULL
	DECLARE @idfMonitoringSession 			BIGINT = NULL
	DECLARE @idfFieldCollectedByPerson 		BIGINT = NULL
	DECLARE @idfFieldCollectedByOffice 		BIGINT = NULL
	DECLARE @idfMainTest 					BIGINT = NULL
	DECLARE @datFieldCollectionDate 		DATETIME = NULL
	DECLARE @datFieldSentDate 				DATETIME = NULL
	DECLARE @strFieldBarcode 				NVARCHAR(200) = NULL
	DECLARE @strCalculatedCaseID 			NVARCHAR(200) = NULL
	DECLARE @strCalculatedHumanName 		NVARCHAR(700) = NULL
	DECLARE @idfSubdivision 				BIGINT = NULL	
	DECLARE @idfsSampleStatus 				BIGINT = NULL
	DECLARE @idfInDepartment 				BIGINT = NULL
	DECLARE @idfDestroyedByPerson 			BIGINT = NULL
	DECLARE @datEnteringDate 				DATETIME = NULL
	DECLARE @datDestructionDate 			DATETIME = NULL
	DECLARE @strBarcode 					NVARCHAR(200) = NULL
	DECLARE @strNote 						NVARCHAR(500) = NULL
	DECLARE @idfsSite 						BIGINT
	DECLARE @intRowStatus 					INT = 0
	DECLARE @idfSendToOffice 				BIGINT = NULL
	DECLARE @blnReadOnly 					BIT
	DECLARE @idfsBirdStatus 				BIGINT = NULL
	DECLARE @idfHumanCase 					BIGINT = NULL
	DECLARE @idfVetCase 					BIGINT = NULL
	DECLARE @datAccession 					DATETIME = NULL
	DECLARE @idfsAccessionCondition 		BIGINT = NULL
	DECLARE @strCondition 					NVARCHAR(200) = NULL
	DECLARE @idfAccesionByPerson 			BIGINT = NULL
	DECLARE @idfsDestructionMethod 			BIGINT = NULL
	DECLARE @idfsCurrentSite 				BIGINT = NULL
	DECLARE @idfsSampleKind 				BIGINT = NULL
	DECLARE @idfMarkedForDispositionByPerson BIGINT = NULL
	DECLARE @datOutOfRepositoryDate 		DATETIME = NULL
	DECLARE @strMaintenanceFlag 			NVARCHAR(20) = NULL

	DECLARE @idfTesting						BIGINT
	DECLARE @idfTestingNew					BIGINT
	DECLARE @idfsTestName					BIGINT = NULL
	DECLARE @idfsTestCategory				BIGINT = NULL
	DECLARE @idfsTestResult					BIGINT = NULL
	DECLARE @idfsTestStatus					BIGINT
	DECLARE @idfsDiagnosis					BIGINT
	DECLARE @idfBatchTest					BIGINT = NULL
	DECLARE @intTestNumber					INT = NULL
	DECLARE @datStartedDate					DATETIME = NULL
	DECLARE @datConcludedDate				DATETIME = NULL
	DECLARE @idfTestedByOffice				BIGINT = NULL
	DECLARE @idfTestedByPerson				BIGINT = NULL
	DECLARE @idfResultEnteredByOffice		BIGINT = NULL
	DECLARE @idfResultEnteredByPerson		BIGINT = NULL
	DECLARE @idfValidatedByOffice			BIGINT = NULL
	DECLARE @idfValidatedByPerson			BIGINT = NULL
	DECLARE @blnNonLaboratoryTest			BIT
	DECLARE @blnExternalTest				BIT = NULL
	DECLARE @idfPerformedByOffice			BIGINT = NULL
	DECLARE @datReceivedDate				DATETIME = NULL
	DECLARE @strContactPerson				NVARCHAR(200) = NULL

	BEGIN TRY
	
			BEGIN
				SELECT
						@idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
						@idfHostVector = idfHostVector, 
						@strFieldVectorID = strFieldVectorID, 
						@idfLocation = idfLocation, 
						@intElevation = intElevation, 
						@idfsSurrounding = idfsSurrounding, 
						@strGEOReferenceSources = strGEOReferenceSources, 
						@idfCollectedByOffice = idfCollectedByOffice, 
						@idfCollectedByPerson = idfCollectedByPerson, 
						@datCollectionDateTime = datCollectionDateTime, 
						@idfsCollectionMethod = idfsCollectionMethod, 
						@idfsBASisOfRecord = idfsBASisOfRecord, 
						@idfsVectorType = idfsVectorType, 
						@idfsVectorSubType = idfsVectorSubType, 
						@intQuantity = intQuantity, 
						@idfsSex = idfsSex, 
						@idfIdentIFiedByOffice = idfIdentIFiedByOffice, 
						@idfIdentIFiedByPerson = idfIdentIFiedByPerson, 
						@datIdentIFiedDateTime = datIdentIFiedDateTime, 
						@idfsIdentIFicationMethod = idfsIdentIFicationMethod, 
						@idfObservation = idfObservation,
						@idfsDayPeriod = idfsDayPeriod,
						@strComment = strComment,
						@idfsEctoparASitesCollected = idfsEctoparASitesCollected
				FROM
					tlbVector
				WHERE
						idfVector = @idfVector

				INSERT INTO @SupressSelect
				EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @idfVectorNew OUTPUT

				INSERT INTO @SupressSelect
				EXEC dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector', @strVectorID OUTPUT , NULL --N'AS Session'

				INSERT INTO dbo.tlbVector
						(
							idfVector, 
							idfVectorSurveillanceSession, 
							idfHostVector, 
							strVectorID, 
							strFieldVectorID, 
							idfLocation, 
							intElevation, 
							idfsSurrounding, 
							strGEOReferenceSources, 
							idfCollectedByOffice, 
							idfCollectedByPerson, 
							datCollectionDateTime, 
							idfsCollectionMethod, 
							idfsBasisOfRecord, 
							idfsVectorType, 
							idfsVectorSubType, 
							intQuantity, 
							idfsSex, 
							idfIdentIFiedByOffice, 
							idfIdentIFiedByPerson, 
							datIdentIFiedDateTime, 
							idfsIdentIFicationMethod, 
							idfObservation
							,idfsDayPeriod
							,strComment
							,idfsEctoparASitesCollected
						)
					VALUES
						(
							@idfVectorNew, 
							@idfVectorSurveillanceSession, 
							@idfHostVector, 
							@strVectorID, 
							@strFieldVectorID, 
							@idfLocation, 
							@intElevation, 
							@idfsSurrounding, 
							@strGEOReferenceSources, 
							@idfCollectedByOffice, 
							@idfCollectedByPerson, 
							@datCollectionDateTime, 
							@idfsCollectionMethod, 
							@idfsBasisOfRecord, 
							@idfsVectorType, 
							@idfsVectorSubType, 
							@intQuantity, 
							@idfsSex, 
							@idfIdentifiedByOffice, 
							@idfIdentIFiedByPerson, 
							@datIdentIFiedDateTime, 
							@idfsIdentIFicationMethod, 
							@idfObservation,
							@idfsDayPeriod,
							@strComment,
							@idfsEctoparASitesCollected
					)
			END;
		
		WHILE EXISTS ( SELECT * FROM @idfMaterials )
			BEGIN
				SELECT
					TOP 1
					@rowId = idfMaterial
				FROM 
					@idfMaterials

				SELECT
					@idfsSampleType = idfsSampleType, 
					@idfRootMaterial = idfRootMaterial, 
					@idfParentMaterial = idfParentMaterial, 
					@idfHuman = idfHuman, 
					@idfSpecies = idfSpecies, 
					@idfAnimal = idfAnimal, 
					@idfMonitoringSession = idfMonitoringSession, 
					@idfFieldCollectedByPerson = idfFieldCollectedByPerson, 
					@idfFieldCollectedByOffice = idfFieldCollectedByOffice, 
					@idfMainTest = idfMainTest, 
					@datFieldCollectionDate = datFieldCollectionDate, 
					@datFieldSentDate = datFieldSentDate, 
					@strFieldBarcode = strFieldBarcode, 
					@strCalculatedCaseID = strCalculatedCaseID, 
					@strCalculatedHumanName = strCalculatedHumanName, 
					@idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
					@idfVector = @idfVectorNew, 
					@idfSubdivision = idfSubdivision, 
					@idfsSampleStatus = idfsSampleStatus, 
					@idfInDepartment = idfInDepartment, 
					@idfDestroyedByPerson = idfDestroyedByPerson, 
					@datEnteringDate = datEnteringDate, 
					@datDestructionDate = datDestructionDate, 
					@strBarcode = strBarcode, 
					@strNote = strNote, 
					@idfsSite = idfsSite, 
					@intRowStatus = intRowStatus, 
					@idfSendToOffice = idfSendToOffice, 
					@blnReadOnly = blnReadOnly, 
					@idfsBirdStatus = idfsBirdStatus, 
					@idfHumanCase = idfHumanCase, 
					@idfVetCase = idfVetCase, 
					@datAccession = datAccession, 
					@idfsAccessionCondition = idfsAccessionCondition, 
					@strCondition = strCondition, 
					@idfAccesionByPerson = idfAccesionByPerson, 
					@idfsDestructionMethod = idfsDestructionMethod, 
					@idfsCurrentSite = idfsCurrentSite, 
					@idfsSampleKind = idfsSampleKind, 
					@idfMarkedForDispositionByPerson = idfMarkedForDispositionByPerson, 
					@datOutOfRepositoryDate = datOutOfRepositoryDate, 
					@strMaintenanceFlag = strMaintenanceFlag 
				FROM
					tlbMaterial
				WHERE
					idfMaterial = @rowId

				INSERT INTO @SupressSelect
				EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbMaterial', @idfMaterialNew OUTPUT;

				INSERT INTO @SupressSelect
				EXEC	dbo.USP_GBL_NextNumber_GET 'Sample Field Barcode', @strBarcode OUTPUT, NULL 

				--Update the temp table so that we will have the association between the new material and tests
				UPDATE @idfTestings
				SET idfMaterial = @idfMaterialNew
				WHERE 
					idfMaterial = @rowid

				INSERT INTO	dbo.tlbMaterial
					(						
							idfMaterial, 
							idfsSampleType, 
							idfRootMaterial, 
							idfParentMaterial, 
							idfHuman, 
							idfSpecies, 
							idfAnimal, 
							idfMonitoringSession, 
							idfFieldCollectedByPerson, 
							idfFieldCollectedByOffice, 
							idfMainTest, 
							datFieldCollectionDate, 
							datFieldSentDate, 
							strFieldBarcode, 
							strCalculatedCaseID, 
							strCalculatedHumanName, 
							idfVectorSurveillanceSession, 
							idfVector, 
							idfSubdivision, 
							idfsSampleStatus, 
							idfInDepartment, 
							idfDestroyedByPerson, 
							datEnteringDate, 
							datDestructionDate, 
							strBarcode, 
							strNote, 
							idfsSite, 
							intRowStatus, 
							idfSendToOffice, 
							blnReadOnly, 
							idfsBirdStatus, 
							idfHumanCase, 
							idfVetCase, 
							datAccession, 
							idfsAccessionCondition, 
							strCondition, 
							idfAccesionByPerson, 
							idfsDestructionMethod, 
							idfsCurrentSite, 
							idfsSampleKind, 
							idfMarkedForDispositionByPerson, 
							datOutOfRepositoryDate, 
							strMaintenanceFlag 
					)
					VALUES
					(
							@idfMaterialNew, 
							@idfsSampleType, 
							@idfRootMaterial, 
							@idfParentMaterial, 
							@idfHuman, 
							@idfSpecies, 
							@idfAnimal, 
							@idfMonitoringSession, 
							@idfFieldCollectedByPerson, 
							@idfFieldCollectedByOffice, 
							@idfMainTest, 
							@datFieldCollectionDate, 
							@datFieldSentDate, 
							@strFieldBarcode, 
							@strCalculatedCaseID, 
							@strCalculatedHumanName, 
							@idfVectorSurveillanceSession, 
							@idfVectorNew, 
							@idfSubdivision, 
							@idfsSampleStatus, 
							@idfInDepartment, 
							@idfDestroyedByPerson, 
							@datEnteringDate, 
							@datDestructionDate, 
							@strBarcode, 
							@strNote, 
							@idfsSite, 
							@intRowStatus, 
							@idfSendToOffice, 
							@blnReadOnly, 
							@idfsBirdStatus, 
							@idfHumanCase, 
							@idfVetCase, 
							@datAccession, 
							@idfsAccessionCondition, 
							@strCondition, 
							@idfAccesionByPerson, 
							@idfsDestructionMethod, 
							@idfsCurrentSite, 
							@idfsSampleKind, 
							@idfMarkedForDispositionByPerson, 
							@datOutOfRepositoryDate, 
							@strMaintenanceFlag 
					);
					
					DELETE FROM @idfMaterials
					WHERE idfMaterial = @rowId
				END;
		
		WHILE EXISTS ( SELECT * FROM @idfTestings )
			BEGIN
				SELECT
					TOP 1
					@rowId = idfTesting
				FROM 
					@idfTestings

				SELECT
					@idfsTestName = idfsTestName, 
					@idfsTestCategory = idfsTestCategory, 
					@idfsTestResult = idfsTestResult, 
					@idfsTestStatus = idfsTestStatus, 
					@idfsDiagnosis = idfsDiagnosis, 
					@idfBatchTest = idfBatchTest, 
					@idfObservation = idfObservation, 
					@intTestNumber = intTestNumber, 
					@strNote = strNote, 
					@intRowStatus = intRowStatus, 
					@datStartedDate = datStartedDate, 
					@datConcludedDate = datConcludedDate, 
					@idfTestedByOffice = idfTestedByOffice, 
					@idfTestedByPerson = idfTestedByPerson, 
					@idfResultEnteredByOffice = idfResultEnteredByOffice, 
					@idfResultEnteredByPerson = idfResultEnteredByPerson, 
					@idfValidatedByOffice = idfValidatedByOffice, 
					@idfValidatedByPerson = idfValidatedByPerson, 
					@blnReadOnly = blnReadOnly, 
					@blnNonLaboratoryTest = blnNonLaboratoryTest, 
					@blnExternalTest = blnExternalTest, 
					@idfPerformedByOffice = idfPerformedByOffice, 
					@datReceivedDate = datReceivedDate, 
					@strContactPerson = strContactPerson, 
					@strMaintenanceFlag = strMaintenanceFlag
				FROM
					tlbTesting
				WHERE
					idfTesting = @rowId

				INSERT INTO @SupressSelect
				EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @idfTestingNew OUTPUT;

				SELECT
					@idfMaterialNew = idfMaterial
				FROM
					@idfTestings
				WHERE
					idfTesting = @rowId

				INSERT INTO	dbo.tlbTesting
				(						
						idfTesting, 
						idfsTestName, 
						idfsTestCategory, 
						idfsTestResult, 
						idfsTestStatus, 
						idfsDiagnosis, 
						idfMaterial, 
						idfBatchTest, 
						idfObservation, 
						intTestNumber, 
						strNote, 
						intRowStatus, 
						datStartedDate, 
						datConcludedDate, 
						idfTestedByOffice, 
						idfTestedByPerson, 
						idfResultEnteredByOffice, 
						idfResultEnteredByPerson, 
						idfValidatedByOffice, 
						idfValidatedByPerson, 
						blnReadOnly, 
						blnNonLaboratoryTest, 
						blnExternalTest, 
						idfPerformedByOffice, 
						datReceivedDate, 
						strContactPerson, 
						strMaintenanceFlag
				)
				VALUES
				(
						@idfTestingNew, 
						@idfsTestName, 
						@idfsTestCategory, 
						@idfsTestResult, 
						@idfsTestStatus, 
						@idfsDiagnosis, 
						@idfMaterialNew, 
						@idfBatchTest, 
						@idfObservation, 
						@intTestNumber, 
						@strNote, 
						@intRowStatus, 
						@datStartedDate, 
						@datConcludedDate, 
						@idfTestedByOffice, 
						@idfTestedByPerson, 
						@idfResultEnteredByOffice, 
						@idfResultEnteredByPerson, 
						@idfValidatedByOffice, 
						@idfValidatedByPerson, 
						@blnReadOnly, 
						@blnNonLaboratoryTest, 
						@blnExternalTest, 
						@idfPerformedByOffice, 
						@datReceivedDate, 
						@strContactPerson, 
						@strMaintenanceFlag
				);
				
				DELETE FROM @idfTestings
				WHERE idfTesting = @rowId

			END;
											
		IF @@TRANCOUNT > 0 AND @returnCode =0
			COMMIT
	END TRY

	BEGIN CATCH
			IF @@Trancount > 0
				ROLLBACK
				SET @returnCode = ERROR_NUMBER()
				SET @returnMsg = 
			   'ErrorNumber: ' + convert(varchar, ERROR_NUMBER() ) 
			   + ' ErrorSeverity: ' + convert(varchar, ERROR_SEVERITY() )
			   + ' ErrorState: ' + convert(varchar,ERROR_STATE())
			   + ' ErrorProcedure: ' + isnull(ERROR_PROCEDURE() ,'')
			   + ' ErrorLine: ' +  convert(varchar,isnull(ERROR_LINE() ,''))
			   + ' ErrorMessage: '+ ERROR_MESSAGE();
			   THROW;

	END CATCH

	SELECT 
		@returnCode AS ReturnCode
		,@returnMsg AS ReturnMsg

END
GO
PRINT N'Creating Procedure [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList_AVR]...';


GO
-- ================================================================================================
-- Name: USP_VCTS_SURVEILLANCE_SESSION_GetList_AVR
--
-- Description: Gets a list of vector surveillance sessions filtered by various criteria.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/31/2018 Added additional search parameters
-- Maheshwar Deo	03/08/2019 Fixed filter for @DiseaseID
-- Stephen Long     07/19/2019 Added summary disease ID and join.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Added non-configurable site filtration rules.
-- Stephen Long     02/26/2020 Corrected all criteria where clauses; returned incorrect results.
-- Stephen Long     03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	10/16/2020 Added Outbreak's EIDSS ID
-- Doug Albanese	10/16/2020 Added Outbreak's Session Start Date
-- Doug Albanese	11/11/2020 Modified secondary filtering
-- Doug Albanese	11/20/2020 Added dblAlignment (Direction)
-- Stephen Long     11/27/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Added intRowStatus check on disease filtration insert rules.
-- Doug Albanese	01/21/2021 Change the WHERE claus to detect shared vector types so that it is 
--                             no so strict on records being returned.
-- Stephen Long     04/02/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	11/05/2021 Added group by surveillance session id to filtration 
--							   intermediate results so final cte join is correct.
-- Stephen Long     11/05/2021 Added vector type ID's and disease ID's to the query.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	07/04/2022 Fixed sorting by pointing to correct location tables in final query.
-- Mike Kornegay	07/05/2022 Fixed search by disease and vector type.
-- Mike Kornegay	08/03/2022 Add order by in final select and change location tables back to inner join.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/06/2022 Move order by back to CTE row number partition for performance and correct date clauses.
-- Edgard Torres    11/18/2022 Modified version of USP_VCTS_SURVEILLANCE_SESSION_GetList to return comma delimeted SiteIDs 
--
-- ================================================================================================
CREATE   PROCEDURE [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList_AVR]
(
    @LanguageID NVARCHAR(50),
    @SessionID NVARCHAR(200) = NULL,
    @FieldSessionID NVARCHAR(200) = NULL,
    @StatusTypeID BIGINT = NULL,
    @VectorTypeID NVARCHAR(MAX) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @DiseaseGroupID NVARCHAR(MAX) = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @StartDateFrom DATETIME = NULL,
    @StartDateTo DATETIME = NULL,
    @EndDateFrom DATETIME = NULL,
    @EndDateTo DATETIME = NULL,
    @OutbreakKey BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'SessionID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10,
	@SiteIDs NVARCHAR(MAX) OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;

	DECLARE @firstRec INT;
	DECLARE @lastRec INT;
	SET @firstRec = (@PageNumber-1)* @PageSize
	SET @lastRec = (@PageNumber*@PageSize+1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;

	DECLARE @FinalResults TABLE
	(
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
		
    );

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL,
		INDEX IDX_ID(ID)
    );

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT vss.idfVectorSurveillanceSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbVectorSurveillanceSession vss
                LEFT JOIN tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
				CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs) vectorTypeIDs
                LEFT JOIN dbo.tlbVector v
                    ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                       AND v.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                    ON vectorSubType.idfsReference = v.idfsVectorSubType
				CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs) diseaseIDs
            WHERE vss.intRowStatus = 0
                  AND (
                          vss.idfsVectorSurveillanceStatus = @StatusTypeID
                          OR @StatusTypeID IS NULL
                      )
                  AND (
                          CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                          OR @VectorTypeID IS NULL
                      )
                  AND (
                          vectorSubType.idfsReference = @SpeciesTypeID
                          OR @SpeciesTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          vss.idfOUtBreak = @OutbreakKey
                          OR @OutbreakKey IS NULL
                      )
                  AND (	
						((CAST(vss.datStartDate AS DATE) >= @StartDateFrom AND @StartDateTo IS NULL)
						OR
						(CAST(vss.datStartDate AS DATE) <= @StartDateTo AND @StartDateFrom IS NULL)
						OR
						(CAST(vss.datStartDate AS DATE) BETWEEN @StartDateFrom AND @StartDateTo))
						OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
					  )
                  AND (
						((CAST(vss.datCloseDate AS DATE) >= @EndDateFrom AND @EndDateTo IS NULL)
						OR
						(CAST(vss.datCloseDate AS DATE) <= @EndDateTo AND @EndDateFrom IS NULL)
						OR
						(CAST(vss.datCloseDate AS DATE) BETWEEN @EndDateFrom AND @EndDateTo))
						OR 
						(@EndDateFrom IS NULL AND @EndDateTo IS NULL)
					  ) 
                  AND (
                          vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                          OR @FieldSessionID IS NULL
                      )
                  AND (
                          CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                          OR @DiseaseID IS NULL
                      )
            GROUP BY vss.idfVectorSurveillanceSession;
        END
        ELSE
        BEGIN
            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID));
            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply non-configurable site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            --
            -- Session data shall be available to all sites' organizations connected to the particular 
            -- session.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537019;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Collected and identified by organizations for any vectors/pools
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVector v
                        ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND v.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE vss.intRowStatus = 0
                      AND (
                              v.idfCollectedByOffice = @UserOrganizationID
                              OR v.idfIdentifiedByOffice = @UserOrganizationID
                          );

                -- Collected by and sent to organizations for any samples
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Tested by organization for any laboratory test
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN dbo.tlbTesting t
                        ON t.idfMaterial = m.idfMaterial
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND t.idfTestedByOffice = @UserOrganizationID
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Tested by organization for any field test
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN dbo.tlbPensideTest p
                        ON p.idfMaterial = m.idfMaterial
                           AND p.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND p.idfTestedByOffice = @UserOrganizationID
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Sent to organizations for any sample transfers
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537021;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT MAX(vss.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbMaterial m
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT tout
                        ON toutm.idfTransferOut = tout.idfTransferOut
                           AND tout.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537021
                WHERE vss.intRowStatus = 0
                      AND tout.idfSendToOffice = @UserOrganizationID
                GROUP BY vss.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Session data shall be available to all sites of the same administrative level.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537018;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537018;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the session was created.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tstSite s
                        ON vss.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the session location, if completed
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = vss.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of any vector location, if completed.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVector v
                        ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND v.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = v.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administration level specified in the rule of the location of any session summary record, if completed.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                        ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND vsss.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation AS l
                        ON l.idfGeoLocation = vsss.idfGeoLocation
                    INNER JOIN dbo.gisLocation AS g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules AS a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND sgs.idfsSite = vss.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbVectorSurveillanceSession vss
                    ON vss.idfVectorSurveillanceSession = ID
                LEFT JOIN tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIds) vectorTypeIds
                LEFT JOIN dbo.tlbVector v
                    ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                       AND v.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                    ON vectorSubType.idfsReference = v.idfsVectorSubType
                CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs) diseaseIDs
            WHERE (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
                  AND (
                          CHARINDEX(@VectorTypeID, vectorTypeIds) > 0
                          OR @VectorTypeID IS NULL
                      )
                  AND (
                          vectorSubType.idfsReference = @SpeciesTypeID
                          OR @SpeciesTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          vss.idfOUtBreak = @OutbreakKey
                          OR @OutbreakKey IS NULL
                      )
				  AND (	
						((CAST(vss.datStartDate AS DATE) >= @StartDateFrom AND @StartDateTo IS NULL)
						OR
						(CAST(vss.datStartDate AS DATE) <= @StartDateTo AND @StartDateFrom IS NULL)
						OR
						(CAST(vss.datStartDate AS DATE) BETWEEN @StartDateFrom AND @StartDateTo))
						OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
					  )
                  AND (
						((CAST(vss.datCloseDate AS DATE) >= @EndDateFrom AND @EndDateTo IS NULL)
						OR
						(CAST(vss.datCloseDate AS DATE) <= @EndDateTo AND @EndDateFrom IS NULL)
						OR
						(CAST(vss.datCloseDate AS DATE) BETWEEN @EndDateFrom AND @EndDateTo))
						OR 
						(@EndDateFrom IS NULL AND @EndDateTo IS NULL)
					  ) 
                  AND (
                          vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                          OR @FieldSessionID IS NULL
                      )
                   AND (
                          CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                          OR @DiseaseID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                                   AND vsss.intRowStatus = 0
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                                   AND vssd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = vssd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE oa.intPermission = 1
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbVectorSurveillanceSession vss
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            LEFT JOIN tlbGeoLocation gl
                ON gl.idfGeoLocation = vss.idfLocation
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
            CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs) vectorTypeIDs
            LEFT JOIN dbo.tlbVector v
                ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND v.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                ON vectorSubType.idfsReference = v.idfsVectorSubType
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs) diseaseIDs
        WHERE oa.intPermission = 2 -- Allow permission
              AND vss.intRowStatus = 0
              AND oa.idfActor = egm.idfEmployeeGroup
              AND (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
              AND (
                      CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                      OR @VectorTypeID IS NULL
                  )
              AND (
                      vectorSubType.idfsReference = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      vss.idfOUtBreak = @OutbreakKey
                      OR @OutbreakKey IS NULL
                  )
			  AND (	
					((CAST(vss.datStartDate AS DATE) >= @StartDateFrom AND @StartDateTo IS NULL)
					OR
					(CAST(vss.datStartDate AS DATE) <= @StartDateTo AND @StartDateFrom IS NULL)
					OR
					(CAST(vss.datStartDate AS DATE) BETWEEN @StartDateFrom AND @StartDateTo))
					OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
					)
			  AND (
					((CAST(vss.datCloseDate AS DATE) >= @EndDateFrom AND @EndDateTo IS NULL)
					OR
					(CAST(vss.datCloseDate AS DATE) <= @EndDateTo AND @EndDateFrom IS NULL)
					OR
					(CAST(vss.datCloseDate AS DATE) BETWEEN @EndDateFrom AND @EndDateTo))
					OR 
					(@EndDateFrom IS NULL AND @EndDateTo IS NULL)
					) 
              AND (
                      vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                      OR @FieldSessionID IS NULL
                  )
			 AND (
						CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
						OR @DiseaseID IS NULL
				  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss
                ON vss.idfVectorSurveillanceSession = ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbVectorSurveillanceSession vss
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            LEFT JOIN tlbGeoLocation gl
                ON gl.idfGeoLocation = vss.idfLocation
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs) vectorTypeIDs
            LEFT JOIN dbo.tlbVector v
                ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND v.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                ON vectorSubType.idfsReference = v.idfsVectorSubType
            CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs ) diseaseIDs
        WHERE oa.intPermission = 2 -- Allow permission
              AND vss.intRowStatus = 0
              AND oa.idfActor = @UserEmployeeID
              AND (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
              AND (
                      CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                      OR @VectorTypeID IS NULL
                  )
              AND (
                      vectorSubType.idfsReference = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      vss.idfOUtBreak = @OutbreakKey
                      OR @OutbreakKey IS NULL
                  )
			  AND (	
					((CAST(vss.datStartDate AS DATE) >= @StartDateFrom AND @StartDateTo IS NULL)
					OR
					(CAST(vss.datStartDate AS DATE) <= @StartDateTo AND @StartDateFrom IS NULL)
					OR
					(CAST(vss.datStartDate AS DATE) BETWEEN @StartDateFrom AND @StartDateTo))
					OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
					)
			  AND (
					((CAST(vss.datCloseDate AS DATE) >= @EndDateFrom AND @EndDateTo IS NULL)
					OR
					(CAST(vss.datCloseDate AS DATE) <= @EndDateTo AND @EndDateFrom IS NULL)
					OR
					(CAST(vss.datCloseDate AS DATE) BETWEEN @EndDateFrom AND @EndDateTo))
					OR 
					(@EndDateFrom IS NULL AND @EndDateTo IS NULL)
					) 
              AND (
                      vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                      OR @FieldSessionID IS NULL
                  )
             AND (
					  CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
					  OR @DiseaseID IS NULL
                 );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                                   AND vsss.intRowStatus = 0
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                                   AND vssd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = vssd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE intPermission = 1 -- Deny permission
                              AND idfActor = @UserEmployeeID
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;

        
		WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY
				CASE WHEN @SortColumn = 'SessionID' AND @SortOrder = 'ASC' THEN vss.strSessionID END ASC,
                CASE WHEN @SortColumn = 'SessionID' AND @SortOrder = 'DESC' THEN vss.strSessionID END DESC,
                CASE WHEN @SortColumn = 'SessionStatusTypeName' AND @SortOrder = 'ASC' THEN sessionStatusType.name END ASC,
                CASE WHEN @SortColumn = 'SessionStatusTypeName' AND @SortOrder = 'DESC' THEN sessionStatusType.name END DESC,
                CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'ASC' THEN vss.datStartDate END ASC,
                CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'DESC' THEN vss.datStartDate END DESC,
                CASE WHEN @SortColumn = 'CloseDate' AND @SortOrder = 'ASC' THEN vss.datCloseDate END ASC,
                CASE WHEN @SortColumn = 'CloseDate' AND @SortOrder = 'DESC' THEN vss.datCloseDate END DESC,
                CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'ASC' THEN lh.AdminLevel2Name END ASC,
                CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'DESC' THEN lh.AdminLevel2Name END DESC,
                CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'ASC' THEN lh.AdminLevel3Name END ASC,
                CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'DESC' THEN lh.AdminLevel3Name END DESC,
                CASE WHEN @SortColumn = 'VectorType' AND @SortOrder = 'ASC' THEN vectorTypes.vectorTypes END ASC,
                CASE WHEN @SortColumn = 'VectorType' AND @SortOrder = 'DESC' THEN vectorTypes.vectorTypes END DESC,
                CASE WHEN @SortColumn = 'Disease' AND @SortOrder = 'ASC' THEN diseases.diseases END ASC,
                CASE WHEN @SortColumn = 'Disease' AND @SortOrder = 'DESC' THEN diseases.diseases END DESC 
			) AS ROWNUM,
			idfVectorSurveillanceSession AS SessionKey,
            strSessionID AS SessionID,
            vss.strFieldSessionID AS FieldSessionID,
            vss.idfOUtBreak AS OutbreakKey,
            o.strOutbreakID AS OutbreakID,
            o.datStartDate AS OutbreakStartDate,
            vectorTypeIDs.vectorTypeIDs AS VectorTypeIDs,
            vectorTypes.vectorTypes AS Vectors,
            diseaseIDs.diseaseIDs AS DiseaseIDs,
            diseases.diseases AS Diseases,
            statusType.name AS StatusTypeName,
            lh.AdminLevel2Name AS AdministrativeLevel1Name,
            lh.AdminLevel3Name AS AdministrativeLevel2Name,
            lh.AdminLevel4Name AS SettlementName,
            gl.dblLatitude AS Latitude,
            gl.dblLongitude AS Longitude,
            vss.datStartDate AS StartDate,
            vss.datCloseDate AS CloseDate,
            vss.idfsSite AS SiteID,
            res.ReadPermissionIndicator,
            res.AccessToPersonalDataPermissionIndicator,
            res.AccessToGenderAndAgeDataPermissionIndicator,
            res.WritePermissionIndicator,
            res.DeletePermissionIndicator,
			COUNT(*) OVER() AS RecordCount,
            (SELECT COUNT(*) FROM dbo.tlbVectorSurveillanceSession WHERE intRowStatus = 0 ) AS TotalCount
            FROM @FinalResults res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss ON vss.idfVectorSurveillanceSession = res.ID
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000133) sessionStatusType ON sessionStatusType.idfsReference = vss.idfsVectorSurveillanceStatus
            LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = vss.idfLocation
            INNER JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
            CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseases) diseases
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPENAMES_GET(vss.idfVectorSurveillanceSession, @LanguageID) vectorTypes) vectorTypes
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs ) diseaseIDs
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs ) vectorTypeIDs
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000133) statusType ON statusType.idfsReference = vss.idfsVectorSurveillanceStatus
			LEFT JOIN dbo.tlbOutbreak o ON o.idfOutbreak = vss.idfOutbreak AND o.intRowStatus = 0
		),
		SITEID AS
		(
			SELECT DISTINCT
				   SiteID
			FROM paging 
		)


		SELECT @SiteIDs = STRING_AGG(CAST(SiteID AS NVARCHAR(24)), ',') 
		FROM SITEID

    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Creating Procedure [dbo].[USP_VET_DISEASE_REPORT_GETList_AVR]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_GETList_AVR
--
-- Description:	Get disease list for the farm edit/enter and other use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     03/25/2018 Initial release.
-- Stephen Long     11/09/2018 Added FarmOwnerID and FarmOwnerName for lab use case 10.
-- Stephen Long     11/25/2018 Updated for the new API.
-- Stephen Long     12/31/2018 Added pagination logic.
-- Stephen Long     04/24/2019 Added advanced search parameters to sync up with use case VUC10.
-- Stephen Long     04/29/2019 Added related to veterinary disease report fields for use case VUC11 
--                             and VUC12.
-- Stephen Long     06/14/2019 Adjusted date from's and to's to be cast as just dates with no time.
-- Stephen Long     06/22/2019 Fix to the farm address logic (building, apartment, house IIF's 
--                             to case statements).
-- Stephen Long     06/25/2019 Add group by for joins with multiple records (such as samples).
-- Stephen Long     07/20/2019 Changed farm inventory counts to ISNULL.
-- Stephen Long     09/03/2019 Add active status check on species list.
-- Ann Xiong		12/05/2019 Added EIDSSPersonID to select list and replaced "ON 
--                             caseType.idfsReference = vc.idfsCaseReportType" with 
--                             "caseType.idfsReference = vc.idfsCaseType".
-- Ann Xiong		12/10/2019 Added a parameter @PersonID NVARCHAR(200) = NULL.
-- Ann Xiong		12/19/2019 Added EIDSSFarmID to select list
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     01/28/2020 Added non-configurable filtration rules, and legacy report ID.
-- Stephen Long     02/03/2020 Added dbo prefix and changed non-configurable filtration comments.
-- Stephen Long     02/16/2020 Removed group by and pagination applied on final query.
-- Stephen Long     02/26/2020 Added data entry site ID parameter and where clause.
-- Stephen Long     03/04/2020 Corrected where clause on total count for null species type.
-- Stephen Long     03/17/2020 Corrected farm owner ID to use idfHuman instead of idfHumanActual.
-- Stephen Long     03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to the EIDSS identifier like criteria.
-- Stephen Long     07/08/2020 Replaced common table experssion; was not working well with POCO.
-- Stephen Long     09/24/2020 Update address fields returned (settlement, rayon and region only).
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/23/2020 Added configurable site filtration rules.
-- Stephen Long     11/25/2020 Modified for new permission fields on the AccessRule table.
-- Stephen Long     11/28/2020 Add index to table variable primary key.
-- Stephen Long     12/02/2020 Remove primary key from table variable IDs.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/23/2020 Added EIDSS session ID parameter and where clause criteria.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2021 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     01/05/2021 Removed species list sub-query due to performance.  New stored 
--                             procedure added to get species list when user expands disease 
--                             report row in search.
-- Stephen Long     01/06/2021 Added string aggregate function on species list and parameter to 
--                             include.
-- Stephen Long     01/25/2021 Added order by parameter to handle when a user selected a specific 
--                             column to sort by.
-- Stephen Long     01/27/2021 Fix for order by; alias will not work on order by with case.
-- Stephen Long     04/02/2021 Added updated pagination and location hierarchy.
-- Stephen Long     01/11/2022 Added farm owner (idfHuman) ID to the query and updated location 
--                             hierarchy.
-- Mike Kornegay	01/26/2022 Changed RecordCount to TotalRowCount to match BaseModel.
-- Stephen Long     03/29/2022 Added disease ID to the model for laboratory module, and corrected 
--                             site filtration.
-- Ann Xiong		04/25/2022 Added f.idfFarm to select list for Veterinary Disease Report 
--                             Deduplication.
-- Stephen Long     05/10/2022 Added report category type ID to the query.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	08/28/2022 Changed FarmAddress to FarmLocation and added FarmLocation.
-- Mike Kornegay    08/31/2022 Corrected sort by adding order by to final query.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Edgard Torres    11/22/2022 Modified version of USP_VET_DISEASE_REPORT_GETList to return comma delimeted SiteIDs 
-- ================================================================================================
CREATE   PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_GETList_AVR] (
	@LanguageID NVARCHAR(50)
	,@ReportKey BIGINT = NULL
	,@ReportID NVARCHAR(200) = NULL
	,@LegacyReportID NVARCHAR(200) = NULL
	,@SessionKey BIGINT = NULL
	,@FarmMasterID BIGINT = NULL
	,@DiseaseID BIGINT = NULL
	,@ReportStatusTypeID BIGINT = NULL
	,@AdministrativeLevelID BIGINT = NULL
	,@DateEnteredFrom DATE = NULL
	,@DateEnteredTo DATE = NULL
	,@ClassificationTypeID BIGINT = NULL
	,@PersonID NVARCHAR(200) = NULL
	,@ReportTypeID BIGINT = NULL
	,@SpeciesTypeID BIGINT = NULL
	,@OutbreakCasesIndicator BIT = 0
	,@DiagnosisDateFrom DATE = NULL
	,@DiagnosisDateTo DATE = NULL
	,@InvestigationDateFrom DATE = NULL
	,@InvestigationDateTo DATE = NULL
	,@LocalOrFieldSampleID NVARCHAR(200) = NULL
	,@TotalAnimalQuantityFrom INT = NULL
	,@TotalAnimalQuantityTo INT = NULL
	,@SessionID NVARCHAR(200) = NULL
	,@DataEntrySiteID BIGINT = NULL
	,@UserSiteID BIGINT
	,@UserOrganizationID BIGINT
	,@UserEmployeeID BIGINT
	,@ApplySiteFiltrationIndicator BIT = 0
	,@IncludeSpeciesListIndicator BIT = 0
	,@SortColumn NVARCHAR(30) = 'ReportID'
	,@SortOrder NVARCHAR(4) = 'DESC'
	,@PageNumber INT = 1
	,@PageSize INT = 10
	,@SiteIDs NVARCHAR(MAX) OUTPUT
	)
AS
BEGIN
	SET NOCOUNT ON;

	     
	DECLARE @firstRec INT;
    DECLARE @lastRec INT;

    SET @firstRec = (@PageNumber - 1) * @PageSize;
    SET @lastRec = (@PageNumber * @PageSize + 1);

	DECLARE @AdministrativeLevelNode AS HIERARCHYID;
	DECLARE @Results TABLE (
		ID BIGINT NOT NULL
		,ReadPermissionIndicator BIT NOT NULL
		,AccessToPersonalDataPermissionIndicator BIT NOT NULL
		,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
		,WritePermissionIndicator BIT NOT NULL
		,DeletePermissionIndicator BIT NOT NULL
		,INDEX IDX_ID(ID)
		);

	BEGIN TRY
	    IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

		IF @AdministrativeLevelID IS NOT NULL
		BEGIN
			SELECT @AdministrativeLevelNode = node
			FROM dbo.gisLocation
			WHERE idfsLocation = @AdministrativeLevelID;
		END;

		-- ========================================================================================
		-- NO SITE FILTRATION RULES APPLIED
		--
		-- For first and second level sites, do not apply any site filtration rules.
		-- ========================================================================================
		IF @ApplySiteFiltrationIndicator = 0
		BEGIN
			INSERT INTO @Results
			SELECT v.idfVetCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY v.idfVetCase;
		END
		ELSE
		BEGIN
		INSERT INTO @Results
			SELECT v.idfVetCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND v.idfsSite = @UserSiteID 
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY v.idfVetCase;

			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,INDEX IDX_ID(ID)
				);
			DECLARE @FinalResults TABLE
			(
				ID BIGINT NOT NULL,
		        ReadPermissionIndicator BIT NOT NULL,
				AccessToPersonalDataPermissionIndicator BIT NOT NULL,
				AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
				WritePermissionIndicator BIT NOT NULL,
				DeletePermissionIndicator BIT NOT NULL
			);

			-- =======================================================================================
			-- DEFAULT SITE FILTRATION RULES
			--
			-- Apply active default site filtration rules for third level sites.
			-- =======================================================================================
			DECLARE @RuleActiveStatus INT = 0;
			DECLARE @AdministrativeLevelTypeID INT;
			DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
			DECLARE @DefaultAccessRules AS TABLE (
				AccessRuleID BIGINT NOT NULL,
				ActiveIndicator INT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,AdministrativeLevelTypeID INT NULL
				);

			INSERT INTO @DefaultAccessRules
			SELECT AccessRuleID
			    ,a.intRowStatus
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
				,a.AdministrativeLevelTypeID
			FROM dbo.AccessRule a
			WHERE DefaultRuleIndicator = 1;

			--
			-- Report data shall be available to all sites of the same administrative level 
			-- specified in the rule.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537009;

			IF @RuleActiveStatus = 0
			BEGIN
				SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				FROM @DefaultAccessRules
				WHERE AccessRuleID = 10537009;

				SELECT @OrganizationAdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				FROM dbo.tlbOffice o
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				WHERE o.idfOffice = @UserOrganizationID
					AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

				-- Administrative level specified in the rule of the site where the report was created.
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstSite s ON v.idfsSite = s.idfsSite
				INNER JOIN dbo.tlbOffice o ON o.idfOffice = s.idfOffice
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537009
				WHERE v.intRowStatus = 0
					AND (
						v.idfsCaseType = @SpeciesTypeID
						OR @SpeciesTypeID IS NULL
						)
					AND (
						(
							CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
								AND @DateEnteredTo
							)
						OR (
							@DateEnteredFrom IS NULL
							OR @DateEnteredTo IS NULL
							)
						)
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

				-- Administrative level specified in the rule of the farm address.
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
				INNER JOIN dbo.tlbGeoLocation l ON l.idfGeoLocation = f.idfFarmAddress
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537009
				WHERE v.intRowStatus = 0
					AND (
						v.idfsCaseType = @SpeciesTypeID
						OR @SpeciesTypeID IS NULL
						)
					AND (
						(
							CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
								AND @DateEnteredTo
							)
						OR (
							@DateEnteredFrom IS NULL
							OR @DateEnteredTo IS NULL
							)
						)
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
			END;

			--
			-- Report data shall be available to all sites' organizations connected to the particular report.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537010;

			IF @RuleActiveStatus = 0
			BEGIN
				-- Investigated and reported by organizations
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE (v.intRowStatus = 0)
					AND (
						v.idfInvestigatedByOffice = @UserOrganizationID
						OR v.idfReportedByOffice = @UserOrganizationID
						);

				-- Sample collected by and sent to organizations
				INSERT INTO @FilteredResults
				SELECT MAX(m.idfVetCase)
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbMaterial m
				INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = m.idfVetCase
					AND v.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE m.intRowStatus = 0
					AND (
						m.idfFieldCollectedByOffice = @UserOrganizationID
						OR m.idfSendToOffice = @UserOrganizationID
						)
				GROUP BY m.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator;

				-- Sample transferred to organizations
				INSERT INTO @FilteredResults
				SELECT MAX(m.idfVetCase)
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbMaterial m
				INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = m.idfVetCase
					AND v.intRowStatus = 0
				INNER JOIN dbo.tlbTransferOutMaterial tom ON m.idfMaterial = tom.idfMaterial
					AND tom.intRowStatus = 0
				INNER JOIN dbo.tlbTransferOUT t ON tom.idfTransferOut = t.idfTransferOut
					AND t.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537010
				WHERE m.intRowStatus = 0
					AND t.idfSendToOffice = @UserOrganizationID
				GROUP BY m.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator;
			END;

			--
			-- Report data shall be available to the sites with the connected outbreak, if the report 
			-- is the primary report/session for an outbreak.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537011;

			IF @RuleActiveStatus = 0
			BEGIN
				INSERT INTO @FilteredResults
				SELECT v.idfVetCase
					,a.ReadPermissionIndicator
					,a.AccessToPersonalDataPermissionIndicator
					,a.AccessToGenderAndAgeDataPermissionIndicator
					,a.WritePermissionIndicator
					,a.DeletePermissionIndicator
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tlbOutbreak o ON v.idfVetCase = o.idfPrimaryCaseOrSession
					AND o.intRowStatus = 0
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537011
				WHERE v.intRowStatus = 0
					AND o.idfsSite = @UserSiteID
			END;

			-- =======================================================================================
			-- CONFIGURABLE SITE FILTRATION RULES
			-- 
			-- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
			-- overlap the default rules.
			-- =======================================================================================
			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = v.idfsSite
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND sgs.idfsSite = v.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT v.idfVetCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbVetCase v
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE v.intRowStatus = 0
				AND a.GrantingActorSiteID = v.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
			FROM @FilteredResults
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			WHERE v.intRowStatus = 0
				AND (
					f.idfFarmActual = @FarmMasterID
					OR @FarmMasterID IS NULL
					)
				AND (
					v.idfVetCase = @ReportKey
					OR @ReportKey IS NULL
					)
				AND (
					v.idfParentMonitoringSession = @SessionKey
					OR @SessionKey IS NULL
					)
				AND (
					g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
					OR @AdministrativeLevelID IS NULL
					)
				AND (
					v.idfsFinalDiagnosis = @DiseaseID
					OR @DiseaseID IS NULL
					)
				AND (
					v.idfsCaseClassification = @ClassificationTypeID
					OR @ClassificationTypeID IS NULL
					)
				AND (
					v.idfsCaseProgressStatus = @ReportStatusTypeID
					OR @ReportStatusTypeID IS NULL
					)
				AND (
					(
						CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
							AND @DateEnteredTo
						)
					OR (
						@DateEnteredFrom IS NULL
						OR @DateEnteredTo IS NULL
						)
					)
				AND (
					v.idfsCaseReportType = @ReportTypeID
					OR @ReportTypeID IS NULL
					)
				AND (
					v.idfsCaseType = @SpeciesTypeID
					OR @SpeciesTypeID IS NULL
					)
				AND (
					(
						CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
							AND @DiagnosisDateTo
						)
					OR (
						@DiagnosisDateFrom IS NULL
						OR @DiagnosisDateTo IS NULL
						)
					)
				AND (
					(
						CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
							AND @InvestigationDateTo
						)
					OR (
						@InvestigationDateFrom IS NULL
						OR @InvestigationDateTo IS NULL
						)
					)
				AND (
					(
						(
							f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						OR (
							f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
								AND @TotalAnimalQuantityTo
							)
						)
					OR (
						@TotalAnimalQuantityFrom IS NULL
						OR @TotalAnimalQuantityTo IS NULL
						)
					)
				AND (
					(
						v.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						v.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
				AND (
					v.idfsSite = @DataEntrySiteID
					OR @DataEntrySiteID IS NULL
					)
				AND (
					v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					)
				AND (
					haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
					OR @PersonID IS NULL
					)
				AND (
					m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
					OR @LocalOrFieldSampleID IS NULL
					)
				AND (
					ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
					OR @SessionID IS NULL
					)
			GROUP BY ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator;
		END;

		-- =======================================================================================
		-- DISEASE FILTRATION RULES
		--
		-- Apply disease filtration rules from use case SAUC62.
		-- =======================================================================================
		-- 
		-- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
		-- as all records have been pulled above with or without site filtration rules applied.
		--
		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT v.idfVetCase
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstObjectAccess AS oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1
					AND oa.idfActor = - 506 -- Default role
				);

		--
		-- Apply level 1 disease filtration rules for an employee's associated user group(s).  
		-- Allows and denies will supersede level 0.
		--
		INSERT INTO @Results
		SELECT v.idfVetCase
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbVetCase v
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
			AND egm.intRowStatus = 0
		INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
		WHERE oa.intPermission = 2 -- Allow permission
			AND v.intRowStatus = 0
			AND oa.idfActor = egm.idfEmployeeGroup
			AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
		GROUP BY v.idfVetCase;

		DELETE res
		FROM @Results res
		INNER JOIN dbo.tlbVetCase AS v ON v.idfVetCase = res.ID
		INNER JOIN dbo.tlbEmployeeGroupMember AS egm ON egm.idfEmployee = @UserEmployeeID
			AND egm.intRowStatus = 0
		INNER JOIN dbo.tstObjectAccess AS oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		WHERE oa.intPermission = 1
			AND oa.idfsObjectType = 10060001 -- Disease
			AND oa.idfActor = egm.idfEmployeeGroup;

		--
		-- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
		-- will supersede level 1.
		--
		INSERT INTO @Results
		SELECT v.idfVetCase
			,1
			,1
			,1
			,1
			,1
		FROM dbo.tlbVetCase v
		INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
			AND oa.intRowStatus = 0
		INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
		LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
		LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
		LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
		LEFT JOIN dbo.tlbMaterial m ON m.idfVetCase = v.idfVetCase
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = v.idfParentMonitoringSession
			AND ms.intRowStatus = 0
		WHERE oa.intPermission = 2 -- Allow permission
			AND v.intRowStatus = 0
			AND oa.idfsObjectType = 10060001 -- Disease
			AND oa.idfActor = @UserEmployeeID
			AND (
				f.idfFarmActual = @FarmMasterID
				OR @FarmMasterID IS NULL
				)
			AND (
				v.idfVetCase = @ReportKey
				OR @ReportKey IS NULL
				)
			AND (
				v.idfParentMonitoringSession = @SessionKey
				OR @SessionKey IS NULL
				)
			AND (
				g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
				OR @AdministrativeLevelID IS NULL
				)
			AND (
				v.idfsFinalDiagnosis = @DiseaseID
				OR @DiseaseID IS NULL
				)
			AND (
				v.idfsCaseClassification = @ClassificationTypeID
				OR @ClassificationTypeID IS NULL
				)
			AND (
				v.idfsCaseProgressStatus = @ReportStatusTypeID
				OR @ReportStatusTypeID IS NULL
				)
			AND (
				(
					CAST(v.datEnteredDate AS DATE) BETWEEN @DateEnteredFrom
						AND @DateEnteredTo
					)
				OR (
					@DateEnteredFrom IS NULL
					OR @DateEnteredTo IS NULL
					)
				)
			AND (
				v.idfsCaseReportType = @ReportTypeID
				OR @ReportTypeID IS NULL
				)
			AND (
				v.idfsCaseType = @SpeciesTypeID
				OR @SpeciesTypeID IS NULL
				)
			AND (
				(
					CAST(v.datFinalDiagnosisDate AS DATE) BETWEEN @DiagnosisDateFrom
						AND @DiagnosisDateTo
					)
				OR (
					@DiagnosisDateFrom IS NULL
					OR @DiagnosisDateTo IS NULL
					)
				)
			AND (
				(
					CAST(v.datInvestigationDate AS DATE) BETWEEN @InvestigationDateFrom
						AND @InvestigationDateTo
					)
				OR (
					@InvestigationDateFrom IS NULL
					OR @InvestigationDateTo IS NULL
					)
				)
			AND (
				(
					(
						f.intAvianTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					OR (
						f.intLivestockTotalAnimalQty BETWEEN @TotalAnimalQuantityFrom
							AND @TotalAnimalQuantityTo
						)
					)
				OR (
					@TotalAnimalQuantityFrom IS NULL
					OR @TotalAnimalQuantityTo IS NULL
					)
				)
			AND (
				(
					v.idfOutbreak IS NULL
					AND @OutbreakCasesIndicator = 0
					)
				OR (
					v.idfOutbreak IS NOT NULL
					AND @OutbreakCasesIndicator = 1
					)
				OR (@OutbreakCasesIndicator IS NULL)
				)
			AND (
				v.idfsSite = @DataEntrySiteID
				OR @DataEntrySiteID IS NULL
				)
			AND (
				v.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
				OR @ReportID IS NULL
				)
			AND (
				v.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
				OR @LegacyReportID IS NULL
				)
			AND (
				haai.EIDSSPersonID LIKE '%' + TRIM(@PersonID) + '%'
				OR @PersonID IS NULL
				)
			AND (
				m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
				OR @LocalOrFieldSampleID IS NULL
				)
			AND (
				ms.strMonitoringSessionID LIKE '%' + TRIM(@SessionID) + '%'
				OR @SessionID IS NULL
				)
		GROUP BY v.idfVetCase;

		DELETE
		FROM @Results
		WHERE ID IN (
				SELECT v.idfVetCase
				FROM dbo.tlbVetCase v
				INNER JOIN dbo.tstObjectAccess oa ON oa.idfsObjectID = v.idfsFinalDiagnosis
					AND oa.intRowStatus = 0
				WHERE oa.intPermission = 1 -- Deny permission
					AND oa.idfsObjectType = 10060001 -- Disease
					AND oa.idfActor = @UserEmployeeID
				);

		-- ========================================================================================
		-- FINAL QUERY, PAGINATION AND COUNTS
		-- ========================================================================================
		INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator;

		WITH paging
		AS (SELECT 
				ID,
				c = COUNT(*) OVER()
			FROM @FinalResults res
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease ON disease.idfsReference = v.idfsFinalDiagnosis
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) caseClassification ON caseClassification.idfsReference = v.idfsCaseClassification
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus ON reportStatus.idfsReference = v.idfsCaseProgressStatus
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType ON reportType.idfsReference = v.idfsCaseReportType
			ORDER BY 
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN v.strCaseID END ASC,
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN v.strCaseID END DESC,
				CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN v.datEnteredDate END ASC,
				CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN v.datEnteredDate END DESC,
				CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'ASC' THEN disease.name END ASC,
				CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'DESC' THEN disease.name END DESC,
				CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'ASC' THEN f.strNationalName END ASC,
				CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'DESC' THEN f.strNationalName END DESC,
				CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'ASC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END ASC,
				CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'DESC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END DESC,
				CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'ASC' THEN caseClassification.name END ASC,
				CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'DESC' THEN caseClassification.name END DESC,
				CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'ASC' THEN reportStatus.name END ASC,
				CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'DESC' THEN reportStatus.name END DESC,
				CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'ASC' THEN reportType.name END ASC,
				CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'DESC' THEN reportType.name END DESC
				OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY),
		SITEID AS
		(
		SELECT DISTINCT v.idfsSite AS SiteKey
		FROM paging 
			INNER JOIN @FinalResults res ON res.ID = paging.ID
			INNER JOIN dbo.tlbVetCase v ON v.idfVetCase = res.ID
			INNER JOIN dbo.tlbFarm f ON f.idfFarm = v.idfFarm
			LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
			LEFT JOIN dbo.HumanActualAddlInfo haai ON haai.HumanActualAddlInfoUID = h.idfHumanActual
			LEFT JOIN dbo.tlbPerson personInvestigatedBy ON personInvestigatedBy.idfPerson = v.idfPersonInvestigatedBy
			LEFT JOIN dbo.tlbPerson personEnteredBy ON personEnteredBy.idfPerson = v.idfPersonEnteredBy
			LEFT JOIN dbo.tlbPerson personReportedBy ON personReportedBy.idfPerson = v.idfPersonReportedBy
			LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = f.idfFarmAddress
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
			LEFT JOIN dbo.tlbOutbreak o ON o.idfOutbreak = v.idfOutbreak
				AND o.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) finalDiagnosis ON finalDiagnosis.idfsReference = v.idfsFinalDiagnosis
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) caseClassification ON caseClassification.idfsReference = v.idfsCaseClassification
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus ON reportStatus.idfsReference = v.idfsCaseProgressStatus
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType ON reportType.idfsReference = v.idfsCaseReportType
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000012) caseType ON caseType.idfsReference = v.idfsCaseType
		--ORDER BY 
		--	CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN v.strCaseID END ASC,
		--	CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN v.strCaseID END DESC,
		--	CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'ASC' THEN v.datEnteredDate END ASC,
		--	CASE WHEN @SortColumn = 'EnteredDate' AND @SortOrder = 'DESC' THEN v.datEnteredDate END DESC,
		--	CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'ASC' THEN finalDiagnosis.name END ASC,
		--	CASE WHEN @SortColumn = 'DiseaseName' AND @SortOrder = 'DESC' THEN finalDiagnosis.name END DESC,
		--	CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'ASC' THEN f.strNationalName END ASC,
		--	CASE WHEN @SortColumn = 'FarmName' AND @SortOrder = 'DESC' THEN f.strNationalName END DESC,
		--	CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'ASC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END ASC,
		--	CASE WHEN @SortColumn = 'FarmAddress' AND @SortOrder = 'DESC' THEN (lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) END DESC,
		--	CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'ASC' THEN caseClassification.name END ASC,
		--	CASE WHEN @SortColumn = 'ClassificationTypeName' AND @SortOrder = 'DESC' THEN caseClassification.name END DESC,
		--	CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'ASC' THEN reportStatus.name END ASC,
		--	CASE WHEN @SortColumn = 'ReportStatusTypeName' AND @SortOrder = 'DESC' THEN reportStatus.name END DESC,
		--	CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'ASC' THEN reportType.name END ASC,
		--	CASE WHEN @SortColumn = 'ReportTypeName' AND @SortOrder = 'DESC' THEN reportType.name END DESC
			)

		SELECT @SiteIDs = STRING_AGG(CAST(SiteKey AS NVARCHAR(24)), ',') 
		FROM SITEID
			
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END;
GO
PRINT N'Creating Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail_Orig]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		08/10/2022	Initial release for Veterinary Aggregate Report.
-- Srini Goli		10/07/2022  used Sql Veriant data type.
-- Srini Goli		10/12/2022  Without Templete also have to display Report.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools) and correct final query

/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfsAggrCaseType = 10102002,
        @idfAggrCaseList = '155564770002071'

*/
-- ================================================================================================
CREATE PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail_Orig] (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS  BIGINT= NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		--[intNumRow] INT,
		[Type] BIGINT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		--idfsReferenceType BIGINT
		)
	
	DECLARE @tmpDetails TABLE (
		idfCaseObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfVersion BIGINT
	)

	BEGIN TRY
			BEGIN

			--Get Selected Agg Cases
			INSERT INTO @AggrCaseTable (
					[idfAggrCase],
					[intRowNumber]
					)
				SELECT CAST([Value] AS BIGINT),
					ROW_NUMBER() OVER (
						ORDER BY [Value]
						)
				FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfCaseObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
				--AND (@idfAggrCase IS NULL OR a.idfAggrCase = @idfAggrCase)
				--	AND (
				--		CASE 
				--			WHEN @idfsAggrCaseType IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfsAggrCaseType, '') = @idfsAggrCaseType
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		)
				--	AND (
				--		CASE 
				--			WHEN @idfAggrCase IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfAggrCase, '') = @idfAggrCase
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		);
				
				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfCaseObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					ROW_NUMBER() OVER (
						ORDER BY [idfCaseObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrVetCaseMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode

				FROM dbo.tlbAggrVetCaseMTX mtx
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form header details
				IF @idfsFormTemplate IS NOT NULL 
				BEGIN
					INSERT INTO @tempFlexForm
					EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
							@LangID =@LangID, 
							@idfsDiagnosis= NULL, 
							@idfsFormType = 10034012, 
							@idfsFormTemplate=@idfsFormTemplate
				END 
				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				IF (SELECT COUNT(*) FROM @tempFlexForm)>1
					SELECT	ff.ParameterName
							,sl.strSpecies
							,ff.idfsParameter
							,ff.ParameterOrder
							,m.idfsDiagnosis
							,m.strDefault
							,m.strOIECode
							,m.intNumRow
							,ap.varValue as varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
					FROM @tempFlexForm ff 
					CROSS JOIN @tmpMatrix m 
					LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter and m.idfAggrVetCaseMTX=ap.idfRow
					LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
					ORDER BY intNumRow
				 ELSE
				 	SELECT	'' as ParameterName
							,sl.strSpecies
							,null as idfsParameter
							,null as ParameterOrder
							,m.idfsDiagnosis
							,m.strDefault
							,m.strOIECode
							,m.intNumRow
							,ap.varValue as varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
					FROM @tmpMatrix m 
					LEFT JOIN @tmpActivityParameters ap ON  m.idfAggrVetCaseMTX=ap.idfRow
					LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
					ORDER BY intNumRow
				--Test
				--Dynamic Pivot
				--DECLARE @ColumnToPivot  NVARCHAR(255),
				--		@ListToPivot    NVARCHAR(255),
				--		@SqlStatement NVARCHAR(MAX)
				--SET @ColumnToPivot='ParameterName'
				--SELECT @ListToPivot= COALESCE(@ListToPivot + ',','') +  N'[' + CAST(ff.ParameterName AS varchar(100)) + ']'
				--FROM @tempFlexForm ff
				--ORDER BY ParameterOrder

				----SELECT @ListToPivot
				----EXEC dbo.USP_ADMIN_DynamicPivotTableInSql @ColumnToPivot,@ListToPivot

				--  SET @SqlStatement = N'
				--	SELECT * FROM (
				--	  SELECT
				--	    [intNumRow],
				--		[strDefault],
				--		[strIDC10],
				--		[ParameterName],
				--		[varValue]
				--	  FROM #tempReport
				--	) Results
				--	PIVOT (
				--	  MAX([varValue])
				--	  FOR ['+@ColumnToPivot+']
				--	  IN (
				--		'+@ListToPivot+'
				--	  )
				--	) AS PivotTable
				--	ORDER BY intNumRow
				--  ';

			END

		--DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[spAsQueryFunction_Post]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQueryFunction_Post]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQueryCopyPublished]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQueryCopyPublished]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQueryPublish]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQueryPublish]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuery_SelectDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuery_SelectDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[sp_MSins_dbotasQuery]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_MSins_dbotasQuery]';


GO
PRINT N'Refreshing Procedure [dbo].[sp_MSupd_dbotasQuery]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_MSupd_dbotasQuery]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsFolderCopyPublished]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsFolderCopyPublished]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsFolderMakeLocal]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsFolderMakeLocal]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsFolderPost]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsFolderPost]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsFolderPublish]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsFolderPublish]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsGetGlobalIdFromLocalId]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsGetGlobalIdFromLocalId]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsLayoutMetadataPost]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsLayoutMetadataPost]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsLayoutPost]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsLayoutPost]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsLayoutSearchFieldSelectDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsLayoutSearchFieldSelectDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuery_CanDelete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuery_CanDelete]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuery_DeleteSubqueries]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuery_DeleteSubqueries]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuery_SelectSubqueries]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuery_SelectSubqueries]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQueryMakeLocal]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQueryMakeLocal]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQueryRemovePublishing]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQueryRemovePublishing]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuerySearchFieldPersonalDataGroupSelectLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuerySearchFieldPersonalDataGroupSelectLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuerySearchFieldSelectLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuerySearchFieldSelectLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuerySearchObject_Post]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuerySearchObject_Post]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuerySearchObject_SelectFieldList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuerySearchObject_SelectFieldList]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuerySearchObjectMakeLocal]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuerySearchObjectMakeLocal]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuerySearchObjectPublish]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuerySearchObjectPublish]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuerySelectLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuerySelectLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQueryToSystemFunctionSelectLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQueryToSystemFunctionSelectLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQueryUnpublish]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQueryUnpublish]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsSubQuery_PostWithRootObject]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsSubQuery_PostWithRootObject]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsSubQuerySelectLookup]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsSubQuerySelectLookup]';


GO
PRINT N'Refreshing Procedure [dbo].[spEventLog_EventForObjectExists]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spEventLog_EventForObjectExists]';


GO
PRINT N'Refreshing Procedure [dbo].[spQuery_CanDelete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spQuery_CanDelete]';


GO
PRINT N'Refreshing Procedure [dbo].[spQuery_Delete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spQuery_Delete]';


GO
PRINT N'Refreshing Procedure [dbo].[spTestNotification_GetAvrLocalID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spTestNotification_GetAvrLocalID]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuerySearchObject_SelectDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuerySearchObject_SelectDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[sptemp_CreateHumanCase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sptemp_CreateHumanCase]';


GO
PRINT N'Refreshing Procedure [dbo].[sptemp_CreateVetCase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sptemp_CreateVetCase]';


GO
PRINT N'Refreshing Procedure [dbo].[sptemp_CreateTestData]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sptemp_CreateTestData]';


GO
PRINT N'Refreshing Procedure [dbo].[spTest_CreateHumanCase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spTest_CreateHumanCase]';


GO
PRINT N'Refreshing Procedure [dbo].[spTest_CreateVetCase]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spTest_CreateVetCase]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_HUMAN_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsLayoutPublish]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsLayoutPublish]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsLayoutCopyPublished]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsLayoutCopyPublished]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuery_Delete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuery_Delete]';


GO
PRINT N'Refreshing Procedure [dbo].[spTestNotification_GetObjectID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spTestNotification_GetObjectID]';


GO
PRINT N'Refreshing Procedure [dbo].[spAsQuery_Post]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spAsQuery_Post]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
ALTER TABLE [dbo].[tasQuery] WITH CHECK CHECK CONSTRAINT [FK_tasQuery_tlbEmployee];

ALTER TABLE [dbo].[tasQuery] WITH CHECK CHECK CONSTRAINT [FK_tasQuery_tlbOffice];


GO
PRINT N'Update complete.';


GO
